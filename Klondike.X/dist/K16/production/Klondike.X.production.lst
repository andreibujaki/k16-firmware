

Microchip Technology PIC LITE Macro Assembler V1.20 build 52243 
                                                                                               Fri Oct 25 04:23:59 2013

Microchip Technology Omniscient Code Generator (Lite mode) build 52243
     1                           	processor	16LF1459
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK3,global,class=CODE,delta=2
     6                           	psect	idataBANK7,global,class=CODE,delta=2
     7                           	psect	strings,global,class=STRING,delta=2
     8                           	psect	nvBANK3,global,class=BANK3,space=1,delta=1
     9                           	psect	cinit,global,class=CODE,merge=1,delta=2
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    14                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    15                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    16                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    17                           	psect	bssBANK6,global,class=BANK6,space=1,delta=1
    18                           	psect	dataBANK7,global,class=BANK7,space=1,delta=1
    19                           	psect	clrtext,global,class=CODE,delta=2
    20                           	psect	inittext,global,class=CODE,delta=2
    21                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    22                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    23                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    24                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    25                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    26                           	psect	text1,local,class=CODE,merge=1,delta=2
    27                           	psect	text2,local,class=CODE,merge=1,delta=2
    28                           	psect	text3,local,class=CODE,merge=1,delta=2
    29                           	psect	text4,local,class=CODE,merge=1,delta=2
    30                           	psect	text5,local,class=CODE,merge=1,delta=2
    31                           	psect	text6,local,class=CODE,merge=1,delta=2
    32                           	psect	text7,local,class=CODE,merge=1,delta=2
    33                           	psect	text8,local,class=CODE,merge=1,delta=2
    34                           	psect	text9,local,class=CODE,merge=1,delta=2
    35                           	psect	text10,local,class=CODE,merge=1,delta=2
    36                           	psect	text11,local,class=CODE,merge=1,delta=2
    37                           	psect	text12,local,class=CODE,merge=1,delta=2
    38                           	psect	text13,local,class=CODE,merge=1,delta=2
    39                           	psect	text14,local,class=CODE,merge=1,delta=2
    40                           	psect	text15,local,class=CODE,merge=1,delta=2
    41                           	psect	text16,local,class=CODE,merge=1,delta=2
    42                           	psect	text17,local,class=CODE,merge=1,delta=2
    43                           	psect	text18,local,class=CODE,merge=1,delta=2
    44                           	psect	text19,local,class=CODE,merge=1,delta=2
    45                           	psect	text20,local,class=CODE,merge=1,delta=2
    46                           	psect	text21,local,class=CODE,merge=1,delta=2
    47                           	psect	text22,local,class=CODE,merge=1,delta=2
    48                           	psect	text23,local,class=CODE,merge=1,delta=2
    49                           	psect	text24,local,class=CODE,merge=1,delta=2
    50                           	psect	text25,local,class=CODE,merge=1,delta=2
    51                           	psect	text26,local,class=CODE,merge=1,delta=2
    52                           	psect	text27,local,class=CODE,merge=1,delta=2
    53                           	psect	text28,local,class=CODE,merge=1,delta=2
    54                           	psect	text29,local,class=CODE,merge=1,delta=2
    55                           	psect	text30,local,class=CODE,merge=1,delta=2
    56                           	psect	text31,local,class=CODE,merge=1,delta=2
    57                           	psect	text32,local,class=CODE,merge=1,delta=2
    58                           	psect	text33,local,class=CODE,merge=1,delta=2
    59                           	psect	text34,local,class=CODE,merge=1,delta=2
    60                           	psect	swtext1,local,class=CONST,delta=2
    61                           	psect	text35,local,class=CODE,merge=1,delta=2
    62                           	psect	text36,local,class=CODE,merge=1,delta=2
    63                           	psect	text37,local,class=CODE,merge=1,delta=2
    64                           	psect	text38,local,class=CODE,merge=1,delta=2
    65                           	psect	text39,local,class=CODE,merge=1,delta=2
    66                           	psect	text40,local,class=CODE,merge=1,delta=2
    67                           	psect	text41,local,class=CODE,merge=1,delta=2
    68                           	psect	text42,local,class=CODE,merge=1,delta=2
    69                           	psect	text43,local,class=CODE,merge=1,delta=2
    70                           	psect	text44,local,class=CODE,merge=1,delta=2
    71                           	psect	text45,local,class=CODE,merge=1,delta=2
    72                           	psect	text46,local,class=CODE,merge=1,delta=2
    73                           	psect	text47,local,class=CODE,merge=1,delta=2
    74                           	psect	text48,local,class=CODE,merge=1,delta=2
    75                           	psect	text49,local,class=CODE,merge=1,delta=2
    76                           	psect	text50,local,class=CODE,merge=1,delta=2
    77                           	psect	text51,local,class=CODE,merge=1,delta=2
    78                           	psect	text52,local,class=CODE,merge=1,delta=2
    79                           	psect	text53,local,class=CODE,merge=1,delta=2
    80                           	psect	text54,local,class=CODE,merge=1,delta=2
    81                           	psect	text55,local,class=CODE,merge=1,delta=2
    82                           	psect	text56,local,class=CODE,merge=1,delta=2
    83                           	psect	text57,local,class=CODE,merge=1,delta=2
    84                           	psect	text58,local,class=CODE,merge=1,delta=2
    85                           	psect	text59,local,class=CODE,merge=1,delta=2
    86                           	psect	intentry,global,class=CODE,delta=2
    87                           	psect	text61,local,class=CODE,merge=1,delta=2
    88                           	psect	text62,local,class=CODE,merge=1,delta=2
    89                           	psect	text63,local,class=CODE,merge=1,delta=2
    90                           	psect	text64,local,class=CODE,merge=1,delta=2
    91                           	dabs	1,0x620,48
    92                           	dabs	1,0x5A0,80
    93                           	dabs	1,0x53C,52
    94                           	dabs	1,0x20,32,_BDT
    95                           	dabs	1,0x48,8,_CtrlTrfData
    96                           	dabs	1,0x40,8,_SetupPkt
    97                           	dabs	1,0x220,64,_INPacket
    98                           	dabs	1,0x2A0,64,_OUTPacket
    99                           	dabs	1,0x233C,0,_WorkQue
   100                           	dabs	1,0x7E,2
   101  0000                     	;# 
   102  0001                     	;# 
   103  0002                     	;# 
   104  0003                     	;# 
   105  0004                     	;# 
   106  0005                     	;# 
   107  0006                     	;# 
   108  0007                     	;# 
   109  0008                     	;# 
   110  0009                     	;# 
   111  000A                     	;# 
   112  000B                     	;# 
   113  000C                     	;# 
   114  000D                     	;# 
   115  000E                     	;# 
   116  0011                     	;# 
   117  0012                     	;# 
   118  0015                     	;# 
   119  0016                     	;# 
   120  0016                     	;# 
   121  0017                     	;# 
   122  0018                     	;# 
   123  0019                     	;# 
   124  001A                     	;# 
   125  001B                     	;# 
   126  001C                     	;# 
   127  008C                     	;# 
   128  008D                     	;# 
   129  008E                     	;# 
   130  0091                     	;# 
   131  0092                     	;# 
   132  0095                     	;# 
   133  0096                     	;# 
   134  0097                     	;# 
   135  0098                     	;# 
   136  0099                     	;# 
   137  009A                     	;# 
   138  009B                     	;# 
   139  009B                     	;# 
   140  009C                     	;# 
   141  009D                     	;# 
   142  009E                     	;# 
   143  009F                     	;# 
   144  010C                     	;# 
   145  010D                     	;# 
   146  010E                     	;# 
   147  0111                     	;# 
   148  0112                     	;# 
   149  0113                     	;# 
   150  0114                     	;# 
   151  0115                     	;# 
   152  0116                     	;# 
   153  0117                     	;# 
   154  0118                     	;# 
   155  0119                     	;# 
   156  011D                     	;# 
   157  018C                     	;# 
   158  018D                     	;# 
   159  018E                     	;# 
   160  0191                     	;# 
   161  0191                     	;# 
   162  0192                     	;# 
   163  0193                     	;# 
   164  0193                     	;# 
   165  0194                     	;# 
   166  0195                     	;# 
   167  0196                     	;# 
   168  0199                     	;# 
   169  019A                     	;# 
   170  019B                     	;# 
   171  019C                     	;# 
   172  019D                     	;# 
   173  019E                     	;# 
   174  019F                     	;# 
   175  020C                     	;# 
   176  020D                     	;# 
   177  0211                     	;# 
   178  0211                     	;# 
   179  0212                     	;# 
   180  0212                     	;# 
   181  0213                     	;# 
   182  0213                     	;# 
   183  0214                     	;# 
   184  0214                     	;# 
   185  0215                     	;# 
   186  0215                     	;# 
   187  0215                     	;# 
   188  0216                     	;# 
   189  0216                     	;# 
   190  0217                     	;# 
   191  0217                     	;# 
   192  0391                     	;# 
   193  0392                     	;# 
   194  0393                     	;# 
   195  0394                     	;# 
   196  0395                     	;# 
   197  0396                     	;# 
   198  039A                     	;# 
   199  039B                     	;# 
   200  0611                     	;# 
   201  0612                     	;# 
   202  0613                     	;# 
   203  0613                     	;# 
   204  0614                     	;# 
   205  0615                     	;# 
   206  0616                     	;# 
   207  0616                     	;# 
   208  0691                     	;# 
   209  0692                     	;# 
   210  0693                     	;# 
   211  0694                     	;# 
   212  0695                     	;# 
   213  0E8E                     	;# 
   214  0E8F                     	;# 
   215  0E90                     	;# 
   216  0E91                     	;# 
   217  0E92                     	;# 
   218  0E93                     	;# 
   219  0E94                     	;# 
   220  0E94                     	;# 
   221  0E95                     	;# 
   222  0E96                     	;# 
   223  0E97                     	;# 
   224  0E98                     	;# 
   225  0E99                     	;# 
   226  0E9A                     	;# 
   227  0E9B                     	;# 
   228  0E9C                     	;# 
   229  0E9D                     	;# 
   230  0E9E                     	;# 
   231  0E9F                     	;# 
   232  0FE4                     	;# 
   233  0FE5                     	;# 
   234  0FE6                     	;# 
   235  0FE7                     	;# 
   236  0FE8                     	;# 
   237  0FE9                     	;# 
   238  0FEA                     	;# 
   239  0FEB                     	;# 
   240  0FED                     	;# 
   241  0FEE                     	;# 
   242  0FEF                     	;# 
   243  0000                     	;# 
   244  0001                     	;# 
   245  0002                     	;# 
   246  0003                     	;# 
   247  0004                     	;# 
   248  0005                     	;# 
   249  0006                     	;# 
   250  0007                     	;# 
   251  0008                     	;# 
   252  0009                     	;# 
   253  000A                     	;# 
   254  000B                     	;# 
   255  000C                     	;# 
   256  000D                     	;# 
   257  000E                     	;# 
   258  0011                     	;# 
   259  0012                     	;# 
   260  0015                     	;# 
   261  0016                     	;# 
   262  0016                     	;# 
   263  0017                     	;# 
   264  0018                     	;# 
   265  0019                     	;# 
   266  001A                     	;# 
   267  001B                     	;# 
   268  001C                     	;# 
   269  008C                     	;# 
   270  008D                     	;# 
   271  008E                     	;# 
   272  0091                     	;# 
   273  0092                     	;# 
   274  0095                     	;# 
   275  0096                     	;# 
   276  0097                     	;# 
   277  0098                     	;# 
   278  0099                     	;# 
   279  009A                     	;# 
   280  009B                     	;# 
   281  009B                     	;# 
   282  009C                     	;# 
   283  009D                     	;# 
   284  009E                     	;# 
   285  009F                     	;# 
   286  010C                     	;# 
   287  010D                     	;# 
   288  010E                     	;# 
   289  0111                     	;# 
   290  0112                     	;# 
   291  0113                     	;# 
   292  0114                     	;# 
   293  0115                     	;# 
   294  0116                     	;# 
   295  0117                     	;# 
   296  0118                     	;# 
   297  0119                     	;# 
   298  011D                     	;# 
   299  018C                     	;# 
   300  018D                     	;# 
   301  018E                     	;# 
   302  0191                     	;# 
   303  0191                     	;# 
   304  0192                     	;# 
   305  0193                     	;# 
   306  0193                     	;# 
   307  0194                     	;# 
   308  0195                     	;# 
   309  0196                     	;# 
   310  0199                     	;# 
   311  019A                     	;# 
   312  019B                     	;# 
   313  019C                     	;# 
   314  019D                     	;# 
   315  019E                     	;# 
   316  019F                     	;# 
   317  020C                     	;# 
   318  020D                     	;# 
   319  0211                     	;# 
   320  0211                     	;# 
   321  0212                     	;# 
   322  0212                     	;# 
   323  0213                     	;# 
   324  0213                     	;# 
   325  0214                     	;# 
   326  0214                     	;# 
   327  0215                     	;# 
   328  0215                     	;# 
   329  0215                     	;# 
   330  0216                     	;# 
   331  0216                     	;# 
   332  0217                     	;# 
   333  0217                     	;# 
   334  0391                     	;# 
   335  0392                     	;# 
   336  0393                     	;# 
   337  0394                     	;# 
   338  0395                     	;# 
   339  0396                     	;# 
   340  039A                     	;# 
   341  039B                     	;# 
   342  0611                     	;# 
   343  0612                     	;# 
   344  0613                     	;# 
   345  0613                     	;# 
   346  0614                     	;# 
   347  0615                     	;# 
   348  0616                     	;# 
   349  0616                     	;# 
   350  0691                     	;# 
   351  0692                     	;# 
   352  0693                     	;# 
   353  0694                     	;# 
   354  0695                     	;# 
   355  0E8E                     	;# 
   356  0E8F                     	;# 
   357  0E90                     	;# 
   358  0E91                     	;# 
   359  0E92                     	;# 
   360  0E93                     	;# 
   361  0E94                     	;# 
   362  0E94                     	;# 
   363  0E95                     	;# 
   364  0E96                     	;# 
   365  0E97                     	;# 
   366  0E98                     	;# 
   367  0E99                     	;# 
   368  0E9A                     	;# 
   369  0E9B                     	;# 
   370  0E9C                     	;# 
   371  0E9D                     	;# 
   372  0E9E                     	;# 
   373  0E9F                     	;# 
   374  0FE4                     	;# 
   375  0FE5                     	;# 
   376  0FE6                     	;# 
   377  0FE7                     	;# 
   378  0FE8                     	;# 
   379  0FE9                     	;# 
   380  0FEA                     	;# 
   381  0FEB                     	;# 
   382  0FED                     	;# 
   383  0FEE                     	;# 
   384  0FEF                     	;# 
   385  0000                     	;# 
   386  0001                     	;# 
   387  0002                     	;# 
   388  0003                     	;# 
   389  0004                     	;# 
   390  0005                     	;# 
   391  0006                     	;# 
   392  0007                     	;# 
   393  0008                     	;# 
   394  0009                     	;# 
   395  000A                     	;# 
   396  000B                     	;# 
   397  000C                     	;# 
   398  000D                     	;# 
   399  000E                     	;# 
   400  0011                     	;# 
   401  0012                     	;# 
   402  0015                     	;# 
   403  0016                     	;# 
   404  0016                     	;# 
   405  0017                     	;# 
   406  0018                     	;# 
   407  0019                     	;# 
   408  001A                     	;# 
   409  001B                     	;# 
   410  001C                     	;# 
   411  008C                     	;# 
   412  008D                     	;# 
   413  008E                     	;# 
   414  0091                     	;# 
   415  0092                     	;# 
   416  0095                     	;# 
   417  0096                     	;# 
   418  0097                     	;# 
   419  0098                     	;# 
   420  0099                     	;# 
   421  009A                     	;# 
   422  009B                     	;# 
   423  009B                     	;# 
   424  009C                     	;# 
   425  009D                     	;# 
   426  009E                     	;# 
   427  009F                     	;# 
   428  010C                     	;# 
   429  010D                     	;# 
   430  010E                     	;# 
   431  0111                     	;# 
   432  0112                     	;# 
   433  0113                     	;# 
   434  0114                     	;# 
   435  0115                     	;# 
   436  0116                     	;# 
   437  0117                     	;# 
   438  0118                     	;# 
   439  0119                     	;# 
   440  011D                     	;# 
   441  018C                     	;# 
   442  018D                     	;# 
   443  018E                     	;# 
   444  0191                     	;# 
   445  0191                     	;# 
   446  0192                     	;# 
   447  0193                     	;# 
   448  0193                     	;# 
   449  0194                     	;# 
   450  0195                     	;# 
   451  0196                     	;# 
   452  0199                     	;# 
   453  019A                     	;# 
   454  019B                     	;# 
   455  019C                     	;# 
   456  019D                     	;# 
   457  019E                     	;# 
   458  019F                     	;# 
   459  020C                     	;# 
   460  020D                     	;# 
   461  0211                     	;# 
   462  0211                     	;# 
   463  0212                     	;# 
   464  0212                     	;# 
   465  0213                     	;# 
   466  0213                     	;# 
   467  0214                     	;# 
   468  0214                     	;# 
   469  0215                     	;# 
   470  0215                     	;# 
   471  0215                     	;# 
   472  0216                     	;# 
   473  0216                     	;# 
   474  0217                     	;# 
   475  0217                     	;# 
   476  0391                     	;# 
   477  0392                     	;# 
   478  0393                     	;# 
   479  0394                     	;# 
   480  0395                     	;# 
   481  0396                     	;# 
   482  039A                     	;# 
   483  039B                     	;# 
   484  0611                     	;# 
   485  0612                     	;# 
   486  0613                     	;# 
   487  0613                     	;# 
   488  0614                     	;# 
   489  0615                     	;# 
   490  0616                     	;# 
   491  0616                     	;# 
   492  0691                     	;# 
   493  0692                     	;# 
   494  0693                     	;# 
   495  0694                     	;# 
   496  0695                     	;# 
   497  0E8E                     	;# 
   498  0E8F                     	;# 
   499  0E90                     	;# 
   500  0E91                     	;# 
   501  0E92                     	;# 
   502  0E93                     	;# 
   503  0E94                     	;# 
   504  0E94                     	;# 
   505  0E95                     	;# 
   506  0E96                     	;# 
   507  0E97                     	;# 
   508  0E98                     	;# 
   509  0E99                     	;# 
   510  0E9A                     	;# 
   511  0E9B                     	;# 
   512  0E9C                     	;# 
   513  0E9D                     	;# 
   514  0E9E                     	;# 
   515  0E9F                     	;# 
   516  0FE4                     	;# 
   517  0FE5                     	;# 
   518  0FE6                     	;# 
   519  0FE7                     	;# 
   520  0FE8                     	;# 
   521  0FE9                     	;# 
   522  0FEA                     	;# 
   523  0FEB                     	;# 
   524  0FED                     	;# 
   525  0FEE                     	;# 
   526  0FEF                     	;# 
   527  0000                     	;# 
   528  0001                     	;# 
   529  0002                     	;# 
   530  0003                     	;# 
   531  0004                     	;# 
   532  0005                     	;# 
   533  0006                     	;# 
   534  0007                     	;# 
   535  0008                     	;# 
   536  0009                     	;# 
   537  000A                     	;# 
   538  000B                     	;# 
   539  000C                     	;# 
   540  000D                     	;# 
   541  000E                     	;# 
   542  0011                     	;# 
   543  0012                     	;# 
   544  0015                     	;# 
   545  0016                     	;# 
   546  0016                     	;# 
   547  0017                     	;# 
   548  0018                     	;# 
   549  0019                     	;# 
   550  001A                     	;# 
   551  001B                     	;# 
   552  001C                     	;# 
   553  008C                     	;# 
   554  008D                     	;# 
   555  008E                     	;# 
   556  0091                     	;# 
   557  0092                     	;# 
   558  0095                     	;# 
   559  0096                     	;# 
   560  0097                     	;# 
   561  0098                     	;# 
   562  0099                     	;# 
   563  009A                     	;# 
   564  009B                     	;# 
   565  009B                     	;# 
   566  009C                     	;# 
   567  009D                     	;# 
   568  009E                     	;# 
   569  009F                     	;# 
   570  010C                     	;# 
   571  010D                     	;# 
   572  010E                     	;# 
   573  0111                     	;# 
   574  0112                     	;# 
   575  0113                     	;# 
   576  0114                     	;# 
   577  0115                     	;# 
   578  0116                     	;# 
   579  0117                     	;# 
   580  0118                     	;# 
   581  0119                     	;# 
   582  011D                     	;# 
   583  018C                     	;# 
   584  018D                     	;# 
   585  018E                     	;# 
   586  0191                     	;# 
   587  0191                     	;# 
   588  0192                     	;# 
   589  0193                     	;# 
   590  0193                     	;# 
   591  0194                     	;# 
   592  0195                     	;# 
   593  0196                     	;# 
   594  0199                     	;# 
   595  019A                     	;# 
   596  019B                     	;# 
   597  019C                     	;# 
   598  019D                     	;# 
   599  019E                     	;# 
   600  019F                     	;# 
   601  020C                     	;# 
   602  020D                     	;# 
   603  0211                     	;# 
   604  0211                     	;# 
   605  0212                     	;# 
   606  0212                     	;# 
   607  0213                     	;# 
   608  0213                     	;# 
   609  0214                     	;# 
   610  0214                     	;# 
   611  0215                     	;# 
   612  0215                     	;# 
   613  0215                     	;# 
   614  0216                     	;# 
   615  0216                     	;# 
   616  0217                     	;# 
   617  0217                     	;# 
   618  0391                     	;# 
   619  0392                     	;# 
   620  0393                     	;# 
   621  0394                     	;# 
   622  0395                     	;# 
   623  0396                     	;# 
   624  039A                     	;# 
   625  039B                     	;# 
   626  0611                     	;# 
   627  0612                     	;# 
   628  0613                     	;# 
   629  0613                     	;# 
   630  0614                     	;# 
   631  0615                     	;# 
   632  0616                     	;# 
   633  0616                     	;# 
   634  0691                     	;# 
   635  0692                     	;# 
   636  0693                     	;# 
   637  0694                     	;# 
   638  0695                     	;# 
   639  0E8E                     	;# 
   640  0E8F                     	;# 
   641  0E90                     	;# 
   642  0E91                     	;# 
   643  0E92                     	;# 
   644  0E93                     	;# 
   645  0E94                     	;# 
   646  0E94                     	;# 
   647  0E95                     	;# 
   648  0E96                     	;# 
   649  0E97                     	;# 
   650  0E98                     	;# 
   651  0E99                     	;# 
   652  0E9A                     	;# 
   653  0E9B                     	;# 
   654  0E9C                     	;# 
   655  0E9D                     	;# 
   656  0E9E                     	;# 
   657  0E9F                     	;# 
   658  0FE4                     	;# 
   659  0FE5                     	;# 
   660  0FE6                     	;# 
   661  0FE7                     	;# 
   662  0FE8                     	;# 
   663  0FE9                     	;# 
   664  0FEA                     	;# 
   665  0FEB                     	;# 
   666  0FED                     	;# 
   667  0FEE                     	;# 
   668  0FEF                     	;# 
   669  0000                     	;# 
   670  0001                     	;# 
   671  0002                     	;# 
   672  0003                     	;# 
   673  0004                     	;# 
   674  0005                     	;# 
   675  0006                     	;# 
   676  0007                     	;# 
   677  0008                     	;# 
   678  0009                     	;# 
   679  000A                     	;# 
   680  000B                     	;# 
   681  000C                     	;# 
   682  000D                     	;# 
   683  000E                     	;# 
   684  0011                     	;# 
   685  0012                     	;# 
   686  0015                     	;# 
   687  0016                     	;# 
   688  0016                     	;# 
   689  0017                     	;# 
   690  0018                     	;# 
   691  0019                     	;# 
   692  001A                     	;# 
   693  001B                     	;# 
   694  001C                     	;# 
   695  008C                     	;# 
   696  008D                     	;# 
   697  008E                     	;# 
   698  0091                     	;# 
   699  0092                     	;# 
   700  0095                     	;# 
   701  0096                     	;# 
   702  0097                     	;# 
   703  0098                     	;# 
   704  0099                     	;# 
   705  009A                     	;# 
   706  009B                     	;# 
   707  009B                     	;# 
   708  009C                     	;# 
   709  009D                     	;# 
   710  009E                     	;# 
   711  009F                     	;# 
   712  010C                     	;# 
   713  010D                     	;# 
   714  010E                     	;# 
   715  0111                     	;# 
   716  0112                     	;# 
   717  0113                     	;# 
   718  0114                     	;# 
   719  0115                     	;# 
   720  0116                     	;# 
   721  0117                     	;# 
   722  0118                     	;# 
   723  0119                     	;# 
   724  011D                     	;# 
   725  018C                     	;# 
   726  018D                     	;# 
   727  018E                     	;# 
   728  0191                     	;# 
   729  0191                     	;# 
   730  0192                     	;# 
   731  0193                     	;# 
   732  0193                     	;# 
   733  0194                     	;# 
   734  0195                     	;# 
   735  0196                     	;# 
   736  0199                     	;# 
   737  019A                     	;# 
   738  019B                     	;# 
   739  019C                     	;# 
   740  019D                     	;# 
   741  019E                     	;# 
   742  019F                     	;# 
   743  020C                     	;# 
   744  020D                     	;# 
   745  0211                     	;# 
   746  0211                     	;# 
   747  0212                     	;# 
   748  0212                     	;# 
   749  0213                     	;# 
   750  0213                     	;# 
   751  0214                     	;# 
   752  0214                     	;# 
   753  0215                     	;# 
   754  0215                     	;# 
   755  0215                     	;# 
   756  0216                     	;# 
   757  0216                     	;# 
   758  0217                     	;# 
   759  0217                     	;# 
   760  0391                     	;# 
   761  0392                     	;# 
   762  0393                     	;# 
   763  0394                     	;# 
   764  0395                     	;# 
   765  0396                     	;# 
   766  039A                     	;# 
   767  039B                     	;# 
   768  0611                     	;# 
   769  0612                     	;# 
   770  0613                     	;# 
   771  0613                     	;# 
   772  0614                     	;# 
   773  0615                     	;# 
   774  0616                     	;# 
   775  0616                     	;# 
   776  0691                     	;# 
   777  0692                     	;# 
   778  0693                     	;# 
   779  0694                     	;# 
   780  0695                     	;# 
   781  0E8E                     	;# 
   782  0E8F                     	;# 
   783  0E90                     	;# 
   784  0E91                     	;# 
   785  0E92                     	;# 
   786  0E93                     	;# 
   787  0E94                     	;# 
   788  0E94                     	;# 
   789  0E95                     	;# 
   790  0E96                     	;# 
   791  0E97                     	;# 
   792  0E98                     	;# 
   793  0E99                     	;# 
   794  0E9A                     	;# 
   795  0E9B                     	;# 
   796  0E9C                     	;# 
   797  0E9D                     	;# 
   798  0E9E                     	;# 
   799  0E9F                     	;# 
   800  0FE4                     	;# 
   801  0FE5                     	;# 
   802  0FE6                     	;# 
   803  0FE7                     	;# 
   804  0FE8                     	;# 
   805  0FE9                     	;# 
   806  0FEA                     	;# 
   807  0FEB                     	;# 
   808  0FED                     	;# 
   809  0FEE                     	;# 
   810  0FEF                     	;# 
   811  0000                     	;# 
   812  0001                     	;# 
   813  0002                     	;# 
   814  0003                     	;# 
   815  0004                     	;# 
   816  0005                     	;# 
   817  0006                     	;# 
   818  0007                     	;# 
   819  0008                     	;# 
   820  0009                     	;# 
   821  000A                     	;# 
   822  000B                     	;# 
   823  000C                     	;# 
   824  000D                     	;# 
   825  000E                     	;# 
   826  0011                     	;# 
   827  0012                     	;# 
   828  0015                     	;# 
   829  0016                     	;# 
   830  0016                     	;# 
   831  0017                     	;# 
   832  0018                     	;# 
   833  0019                     	;# 
   834  001A                     	;# 
   835  001B                     	;# 
   836  001C                     	;# 
   837  008C                     	;# 
   838  008D                     	;# 
   839  008E                     	;# 
   840  0091                     	;# 
   841  0092                     	;# 
   842  0095                     	;# 
   843  0096                     	;# 
   844  0097                     	;# 
   845  0098                     	;# 
   846  0099                     	;# 
   847  009A                     	;# 
   848  009B                     	;# 
   849  009B                     	;# 
   850  009C                     	;# 
   851  009D                     	;# 
   852  009E                     	;# 
   853  009F                     	;# 
   854  010C                     	;# 
   855  010D                     	;# 
   856  010E                     	;# 
   857  0111                     	;# 
   858  0112                     	;# 
   859  0113                     	;# 
   860  0114                     	;# 
   861  0115                     	;# 
   862  0116                     	;# 
   863  0117                     	;# 
   864  0118                     	;# 
   865  0119                     	;# 
   866  011D                     	;# 
   867  018C                     	;# 
   868  018D                     	;# 
   869  018E                     	;# 
   870  0191                     	;# 
   871  0191                     	;# 
   872  0192                     	;# 
   873  0193                     	;# 
   874  0193                     	;# 
   875  0194                     	;# 
   876  0195                     	;# 
   877  0196                     	;# 
   878  0199                     	;# 
   879  019A                     	;# 
   880  019B                     	;# 
   881  019C                     	;# 
   882  019D                     	;# 
   883  019E                     	;# 
   884  019F                     	;# 
   885  020C                     	;# 
   886  020D                     	;# 
   887  0211                     	;# 
   888  0211                     	;# 
   889  0212                     	;# 
   890  0212                     	;# 
   891  0213                     	;# 
   892  0213                     	;# 
   893  0214                     	;# 
   894  0214                     	;# 
   895  0215                     	;# 
   896  0215                     	;# 
   897  0215                     	;# 
   898  0216                     	;# 
   899  0216                     	;# 
   900  0217                     	;# 
   901  0217                     	;# 
   902  0391                     	;# 
   903  0392                     	;# 
   904  0393                     	;# 
   905  0394                     	;# 
   906  0395                     	;# 
   907  0396                     	;# 
   908  039A                     	;# 
   909  039B                     	;# 
   910  0611                     	;# 
   911  0612                     	;# 
   912  0613                     	;# 
   913  0613                     	;# 
   914  0614                     	;# 
   915  0615                     	;# 
   916  0616                     	;# 
   917  0616                     	;# 
   918  0691                     	;# 
   919  0692                     	;# 
   920  0693                     	;# 
   921  0694                     	;# 
   922  0695                     	;# 
   923  0E8E                     	;# 
   924  0E8F                     	;# 
   925  0E90                     	;# 
   926  0E91                     	;# 
   927  0E92                     	;# 
   928  0E93                     	;# 
   929  0E94                     	;# 
   930  0E94                     	;# 
   931  0E95                     	;# 
   932  0E96                     	;# 
   933  0E97                     	;# 
   934  0E98                     	;# 
   935  0E99                     	;# 
   936  0E9A                     	;# 
   937  0E9B                     	;# 
   938  0E9C                     	;# 
   939  0E9D                     	;# 
   940  0E9E                     	;# 
   941  0E9F                     	;# 
   942  0FE4                     	;# 
   943  0FE5                     	;# 
   944  0FE6                     	;# 
   945  0FE7                     	;# 
   946  0FE8                     	;# 
   947  0FE9                     	;# 
   948  0FEA                     	;# 
   949  0FEB                     	;# 
   950  0FED                     	;# 
   951  0FEE                     	;# 
   952  0FEF                     	;# 
   953  0000                     	;# 
   954  0001                     	;# 
   955  0002                     	;# 
   956  0003                     	;# 
   957  0004                     	;# 
   958  0005                     	;# 
   959  0006                     	;# 
   960  0007                     	;# 
   961  0008                     	;# 
   962  0009                     	;# 
   963  000A                     	;# 
   964  000B                     	;# 
   965  000C                     	;# 
   966  000D                     	;# 
   967  000E                     	;# 
   968  0011                     	;# 
   969  0012                     	;# 
   970  0015                     	;# 
   971  0016                     	;# 
   972  0016                     	;# 
   973  0017                     	;# 
   974  0018                     	;# 
   975  0019                     	;# 
   976  001A                     	;# 
   977  001B                     	;# 
   978  001C                     	;# 
   979  008C                     	;# 
   980  008D                     	;# 
   981  008E                     	;# 
   982  0091                     	;# 
   983  0092                     	;# 
   984  0095                     	;# 
   985  0096                     	;# 
   986  0097                     	;# 
   987  0098                     	;# 
   988  0099                     	;# 
   989  009A                     	;# 
   990  009B                     	;# 
   991  009B                     	;# 
   992  009C                     	;# 
   993  009D                     	;# 
   994  009E                     	;# 
   995  009F                     	;# 
   996  010C                     	;# 
   997  010D                     	;# 
   998  010E                     	;# 
   999  0111                     	;# 
  1000  0112                     	;# 
  1001  0113                     	;# 
  1002  0114                     	;# 
  1003  0115                     	;# 
  1004  0116                     	;# 
  1005  0117                     	;# 
  1006  0118                     	;# 
  1007  0119                     	;# 
  1008  011D                     	;# 
  1009  018C                     	;# 
  1010  018D                     	;# 
  1011  018E                     	;# 
  1012  0191                     	;# 
  1013  0191                     	;# 
  1014  0192                     	;# 
  1015  0193                     	;# 
  1016  0193                     	;# 
  1017  0194                     	;# 
  1018  0195                     	;# 
  1019  0196                     	;# 
  1020  0199                     	;# 
  1021  019A                     	;# 
  1022  019B                     	;# 
  1023  019C                     	;# 
  1024  019D                     	;# 
  1025  019E                     	;# 
  1026  019F                     	;# 
  1027  020C                     	;# 
  1028  020D                     	;# 
  1029  0211                     	;# 
  1030  0211                     	;# 
  1031  0212                     	;# 
  1032  0212                     	;# 
  1033  0213                     	;# 
  1034  0213                     	;# 
  1035  0214                     	;# 
  1036  0214                     	;# 
  1037  0215                     	;# 
  1038  0215                     	;# 
  1039  0215                     	;# 
  1040  0216                     	;# 
  1041  0216                     	;# 
  1042  0217                     	;# 
  1043  0217                     	;# 
  1044  0391                     	;# 
  1045  0392                     	;# 
  1046  0393                     	;# 
  1047  0394                     	;# 
  1048  0395                     	;# 
  1049  0396                     	;# 
  1050  039A                     	;# 
  1051  039B                     	;# 
  1052  0611                     	;# 
  1053  0612                     	;# 
  1054  0613                     	;# 
  1055  0613                     	;# 
  1056  0614                     	;# 
  1057  0615                     	;# 
  1058  0616                     	;# 
  1059  0616                     	;# 
  1060  0691                     	;# 
  1061  0692                     	;# 
  1062  0693                     	;# 
  1063  0694                     	;# 
  1064  0695                     	;# 
  1065  0E8E                     	;# 
  1066  0E8F                     	;# 
  1067  0E90                     	;# 
  1068  0E91                     	;# 
  1069  0E92                     	;# 
  1070  0E93                     	;# 
  1071  0E94                     	;# 
  1072  0E94                     	;# 
  1073  0E95                     	;# 
  1074  0E96                     	;# 
  1075  0E97                     	;# 
  1076  0E98                     	;# 
  1077  0E99                     	;# 
  1078  0E9A                     	;# 
  1079  0E9B                     	;# 
  1080  0E9C                     	;# 
  1081  0E9D                     	;# 
  1082  0E9E                     	;# 
  1083  0E9F                     	;# 
  1084  0FE4                     	;# 
  1085  0FE5                     	;# 
  1086  0FE6                     	;# 
  1087  0FE7                     	;# 
  1088  0FE8                     	;# 
  1089  0FE9                     	;# 
  1090  0FEA                     	;# 
  1091  0FEB                     	;# 
  1092  0FED                     	;# 
  1093  0FEE                     	;# 
  1094  0FEF                     	;# 
  1095  0000                     	;# 
  1096  0001                     	;# 
  1097  0002                     	;# 
  1098  0003                     	;# 
  1099  0004                     	;# 
  1100  0005                     	;# 
  1101  0006                     	;# 
  1102  0007                     	;# 
  1103  0008                     	;# 
  1104  0009                     	;# 
  1105  000A                     	;# 
  1106  000B                     	;# 
  1107  000C                     	;# 
  1108  000D                     	;# 
  1109  000E                     	;# 
  1110  0011                     	;# 
  1111  0012                     	;# 
  1112  0015                     	;# 
  1113  0016                     	;# 
  1114  0016                     	;# 
  1115  0017                     	;# 
  1116  0018                     	;# 
  1117  0019                     	;# 
  1118  001A                     	;# 
  1119  001B                     	;# 
  1120  001C                     	;# 
  1121  008C                     	;# 
  1122  008D                     	;# 
  1123  008E                     	;# 
  1124  0091                     	;# 
  1125  0092                     	;# 
  1126  0095                     	;# 
  1127  0096                     	;# 
  1128  0097                     	;# 
  1129  0098                     	;# 
  1130  0099                     	;# 
  1131  009A                     	;# 
  1132  009B                     	;# 
  1133  009B                     	;# 
  1134  009C                     	;# 
  1135  009D                     	;# 
  1136  009E                     	;# 
  1137  009F                     	;# 
  1138  010C                     	;# 
  1139  010D                     	;# 
  1140  010E                     	;# 
  1141  0111                     	;# 
  1142  0112                     	;# 
  1143  0113                     	;# 
  1144  0114                     	;# 
  1145  0115                     	;# 
  1146  0116                     	;# 
  1147  0117                     	;# 
  1148  0118                     	;# 
  1149  0119                     	;# 
  1150  011D                     	;# 
  1151  018C                     	;# 
  1152  018D                     	;# 
  1153  018E                     	;# 
  1154  0191                     	;# 
  1155  0191                     	;# 
  1156  0192                     	;# 
  1157  0193                     	;# 
  1158  0193                     	;# 
  1159  0194                     	;# 
  1160  0195                     	;# 
  1161  0196                     	;# 
  1162  0199                     	;# 
  1163  019A                     	;# 
  1164  019B                     	;# 
  1165  019C                     	;# 
  1166  019D                     	;# 
  1167  019E                     	;# 
  1168  019F                     	;# 
  1169  020C                     	;# 
  1170  020D                     	;# 
  1171  0211                     	;# 
  1172  0211                     	;# 
  1173  0212                     	;# 
  1174  0212                     	;# 
  1175  0213                     	;# 
  1176  0213                     	;# 
  1177  0214                     	;# 
  1178  0214                     	;# 
  1179  0215                     	;# 
  1180  0215                     	;# 
  1181  0215                     	;# 
  1182  0216                     	;# 
  1183  0216                     	;# 
  1184  0217                     	;# 
  1185  0217                     	;# 
  1186  0391                     	;# 
  1187  0392                     	;# 
  1188  0393                     	;# 
  1189  0394                     	;# 
  1190  0395                     	;# 
  1191  0396                     	;# 
  1192  039A                     	;# 
  1193  039B                     	;# 
  1194  0611                     	;# 
  1195  0612                     	;# 
  1196  0613                     	;# 
  1197  0613                     	;# 
  1198  0614                     	;# 
  1199  0615                     	;# 
  1200  0616                     	;# 
  1201  0616                     	;# 
  1202  0691                     	;# 
  1203  0692                     	;# 
  1204  0693                     	;# 
  1205  0694                     	;# 
  1206  0695                     	;# 
  1207  0E8E                     	;# 
  1208  0E8F                     	;# 
  1209  0E90                     	;# 
  1210  0E91                     	;# 
  1211  0E92                     	;# 
  1212  0E93                     	;# 
  1213  0E94                     	;# 
  1214  0E94                     	;# 
  1215  0E95                     	;# 
  1216  0E96                     	;# 
  1217  0E97                     	;# 
  1218  0E98                     	;# 
  1219  0E99                     	;# 
  1220  0E9A                     	;# 
  1221  0E9B                     	;# 
  1222  0E9C                     	;# 
  1223  0E9D                     	;# 
  1224  0E9E                     	;# 
  1225  0E9F                     	;# 
  1226  0FE4                     	;# 
  1227  0FE5                     	;# 
  1228  0FE6                     	;# 
  1229  0FE7                     	;# 
  1230  0FE8                     	;# 
  1231  0FE9                     	;# 
  1232  0FEA                     	;# 
  1233  0FEB                     	;# 
  1234  0FED                     	;# 
  1235  0FEE                     	;# 
  1236  0FEF                     	;_WorkQue
  1237                           
  1238                           	psect	idataBANK0
  1239  07FF                     __pidataBANK0:	
  1240                           
  1241                           ;initializer for _HashTime
  1242  07FF  34DD               	retlw	221
  1243                           
  1244                           	psect	idataBANK3
  1245  08B1                     __pidataBANK3:	
  1246                           
  1247                           ;initializer for AsicPreCalc@F3347
  1248  08B1  3498               	retlw	152
  1249  08B2  342F               	retlw	47
  1250  08B3  348A               	retlw	138
  1251  08B4  3442               	retlw	66
  1252  08B5  3491               	retlw	145
  1253  08B6  3444               	retlw	68
  1254  08B7  3437               	retlw	55
  1255  08B8  3471               	retlw	113
  1256  08B9  34CF               	retlw	207
  1257  08BA  34FB               	retlw	251
  1258  08BB  34C0               	retlw	192
  1259  08BC  34B5               	retlw	181
  1260                           
  1261                           ;initializer for _Status
  1262  08BD  3449               	retlw	73
  1263  08BE  3400               	retlw	0
  1264  08BF  3400               	retlw	0
  1265  08C0  3400               	retlw	0
  1266  08C1  3400               	retlw	0
  1267  08C2  3400               	retlw	0
  1268  08C3  3400               	retlw	0
  1269  08C4  3400               	retlw	0
  1270  08C5  3400               	retlw	0
  1271  08C6  3400               	retlw	0
  1272  08C7  3400               	retlw	0
  1273  08C8  3440               	retlw	64
  1274  08C9  3400               	retlw	0
  1275                           
  1276                           ;initializer for _ClockCfg
  1277  08CA  3407               	retlw	7
  1278  08CB  3400               	retlw	0
  1279  08CC  347B               	retlw	123
  1280  08CD  3405               	retlw	5
  1281  08CE  3472               	retlw	114
  1282  08CF  3401               	retlw	1
  1283  08D0  3400               	retlw	0
  1284  08D1  3400               	retlw	0
  1285                           
  1286                           ;initializer for _Cfg
  1287  08D2  345E               	retlw	94
  1288  08D3  3401               	retlw	1
  1289  08D4  348F               	retlw	143
  1290  08D5  3400               	retlw	0
  1291  08D6  3400               	retlw	0
  1292  08D7  3400               	retlw	0
  1293                           
  1294                           	psect	idataBANK7
  1295  1CAC                     __pidataBANK7:	
  1296                           
  1297                           ;initializer for _BankRanges
  1298  1CAC  3400               	retlw	0
  1299  1CAD  3400               	retlw	0
  1300  1CAE  3400               	retlw	0
  1301  1CAF  3400               	retlw	0
  1302  1CB0  3400               	retlw	0
  1303  1CB1  3400               	retlw	0
  1304  1CB2  3400               	retlw	0
  1305  1CB3  3440               	retlw	64
  1306  1CB4  34AA               	retlw	170
  1307  1CB5  34AA               	retlw	170
  1308  1CB6  34AA               	retlw	170
  1309  1CB7  342A               	retlw	42
  1310  1CB8  3400               	retlw	0
  1311  1CB9  3400               	retlw	0
  1312  1CBA  3400               	retlw	0
  1313  1CBB  3420               	retlw	32
  1314  1CBC  3499               	retlw	153
  1315  1CBD  3499               	retlw	153
  1316  1CBE  3499               	retlw	153
  1317  1CBF  3419               	retlw	25
  1318  1CC0  3455               	retlw	85
  1319  1CC1  3455               	retlw	85
  1320  1CC2  3455               	retlw	85
  1321  1CC3  3415               	retlw	21
  1322  1CC4  3492               	retlw	146
  1323  1CC5  3424               	retlw	36
  1324  1CC6  3449               	retlw	73
  1325  1CC7  3412               	retlw	18
  1326  1CC8  3400               	retlw	0
  1327  1CC9  3400               	retlw	0
  1328  1CCA  3400               	retlw	0
  1329  1CCB  3410               	retlw	16
  1330                           
  1331                           	psect	strings
  1332  0800                     __pstrings:	
  1333  0800                     __stringtab:	
  1334  0800  3400               	retlw	0
  1335  0801                     __end_of__stringtab:	
  1336  0801                     _USB_SD_Ptr:	
  1337  0801  34AB               	retlw	(_sd000| (0+32768))& (0+255)
  1338  0802  3405               	retlw	(_sd001| (0+32768))& (0+255)
  1339  0803  3439               	retlw	(_sd002| (0+32768))& (0+255)
  1340  0804                     __end_of_USB_SD_Ptr:	
  1341  0804                     _USB_CD_Ptr:	
  1342  0804  346D               	retlw	(_configDescriptor1| (0+32768))& (0+255)
  1343  0805                     __end_of_USB_CD_Ptr:	
  1344  0805                     _sd001:	
  1345  0805  3434               	retlw	52
  1346  0806  3403               	retlw	3
  1347  0807  344B               	retlw	75
  1348  0808  3400               	retlw	0
  1349  0809  346C               	retlw	108
  1350  080A  3400               	retlw	0
  1351  080B  346F               	retlw	111
  1352  080C  3400               	retlw	0
  1353  080D  346E               	retlw	110
  1354  080E  3400               	retlw	0
  1355  080F  3464               	retlw	100
  1356  0810  3400               	retlw	0
  1357  0811  3469               	retlw	105
  1358  0812  3400               	retlw	0
  1359  0813  346B               	retlw	107
  1360  0814  3400               	retlw	0
  1361  0815  3465               	retlw	101
  1362  0816  3400               	retlw	0
  1363  0817  3420               	retlw	32
  1364  0818  3400               	retlw	0
  1365  0819  3450               	retlw	80
  1366  081A  3400               	retlw	0
  1367  081B  3472               	retlw	114
  1368  081C  3400               	retlw	0
  1369  081D  346F               	retlw	111
  1370  081E  3400               	retlw	0
  1371  081F  346A               	retlw	106
  1372  0820  3400               	retlw	0
  1373  0821  3465               	retlw	101
  1374  0822  3400               	retlw	0
  1375  0823  3463               	retlw	99
  1376  0824  3400               	retlw	0
  1377  0825  3474               	retlw	116
  1378  0826  3400               	retlw	0
  1379  0827  3400               	retlw	0
  1380  0828  3400               	retlw	0
  1381  0829  3400               	retlw	0
  1382  082A  3400               	retlw	0
  1383  082B  3400               	retlw	0
  1384  082C  3400               	retlw	0
  1385  082D  3400               	retlw	0
  1386  082E  3400               	retlw	0
  1387  082F  3400               	retlw	0
  1388  0830  3400               	retlw	0
  1389  0831  3400               	retlw	0
  1390  0832  3400               	retlw	0
  1391  0833  3400               	retlw	0
  1392  0834  3400               	retlw	0
  1393  0835  3400               	retlw	0
  1394  0836  3400               	retlw	0
  1395  0837  3400               	retlw	0
  1396  0838  3400               	retlw	0
  1397  0839                     __end_of_sd001:	
  1398  0839                     _sd002:	
  1399  0839  3434               	retlw	52
  1400  083A  3403               	retlw	3
  1401  083B  344B               	retlw	75
  1402  083C  3400               	retlw	0
  1403  083D  3431               	retlw	49
  1404  083E  3400               	retlw	0
  1405  083F  3436               	retlw	54
  1406  0840  3400               	retlw	0
  1407  0841  3400               	retlw	0
  1408  0842  3400               	retlw	0
  1409  0843  3400               	retlw	0
  1410  0844  3400               	retlw	0
  1411  0845  3400               	retlw	0
  1412  0846  3400               	retlw	0
  1413  0847  3400               	retlw	0
  1414  0848  3400               	retlw	0
  1415  0849  3400               	retlw	0
  1416  084A  3400               	retlw	0
  1417  084B  3400               	retlw	0
  1418  084C  3400               	retlw	0
  1419  084D  3400               	retlw	0
  1420  084E  3400               	retlw	0
  1421  084F  3400               	retlw	0
  1422  0850  3400               	retlw	0
  1423  0851  3400               	retlw	0
  1424  0852  3400               	retlw	0
  1425  0853  3400               	retlw	0
  1426  0854  3400               	retlw	0
  1427  0855  3400               	retlw	0
  1428  0856  3400               	retlw	0
  1429  0857  3400               	retlw	0
  1430  0858  3400               	retlw	0
  1431  0859  3400               	retlw	0
  1432  085A  3400               	retlw	0
  1433  085B  3400               	retlw	0
  1434  085C  3400               	retlw	0
  1435  085D  3400               	retlw	0
  1436  085E  3400               	retlw	0
  1437  085F  3400               	retlw	0
  1438  0860  3400               	retlw	0
  1439  0861  3400               	retlw	0
  1440  0862  3400               	retlw	0
  1441  0863  3400               	retlw	0
  1442  0864  3400               	retlw	0
  1443  0865  3400               	retlw	0
  1444  0866  3400               	retlw	0
  1445  0867  3400               	retlw	0
  1446  0868  3400               	retlw	0
  1447  0869  3400               	retlw	0
  1448  086A  3400               	retlw	0
  1449  086B  3400               	retlw	0
  1450  086C  3400               	retlw	0
  1451  086D                     __end_of_sd002:	
  1452  086D                     _configDescriptor1:	
  1453  086D  3409               	retlw	9
  1454  086E  3402               	retlw	2
  1455  086F  3420               	retlw	32
  1456  0870  3400               	retlw	0
  1457  0871  3401               	retlw	1
  1458  0872  3401               	retlw	1
  1459  0873  3400               	retlw	0
  1460  0874  34C0               	retlw	192
  1461  0875  3432               	retlw	50
  1462  0876  3409               	retlw	9
  1463  0877  3404               	retlw	4
  1464  0878  3400               	retlw	0
  1465  0879  3400               	retlw	0
  1466  087A  3402               	retlw	2
  1467  087B  34FF               	retlw	255
  1468  087C  34FF               	retlw	255
  1469  087D  34FF               	retlw	255
  1470  087E  3400               	retlw	0
  1471  087F  3407               	retlw	7
  1472  0880  3405               	retlw	5
  1473  0881  3401               	retlw	1
  1474  0882  3402               	retlw	2
  1475  0883  3440               	retlw	64
  1476  0884  3400               	retlw	0
  1477  0885  3401               	retlw	1
  1478  0886  3407               	retlw	7
  1479  0887  3405               	retlw	5
  1480  0888  3481               	retlw	129
  1481  0889  3402               	retlw	2
  1482  088A  3440               	retlw	64
  1483  088B  3400               	retlw	0
  1484  088C  3401               	retlw	1
  1485  088D                     __end_of_configDescriptor1:	
  1486  088D                     _device_dsc:	
  1487  088D  3412               	retlw	18
  1488  088E  3401               	retlw	1
  1489  088F  3400               	retlw	0
  1490  0890  3402               	retlw	2
  1491  0891  3400               	retlw	0
  1492  0892  3400               	retlw	0
  1493  0893  3400               	retlw	0
  1494  0894  3408               	retlw	8
  1495  0895  34D8               	retlw	216
  1496  0896  3404               	retlw	4
  1497  0897  340A               	retlw	10
  1498  0898  34F6               	retlw	246
  1499  0899  3400               	retlw	0
  1500  089A  3400               	retlw	0
  1501  089B  3401               	retlw	1
  1502  089C  3402               	retlw	2
  1503  089D  3400               	retlw	0
  1504  089E  3401               	retlw	1
  1505  089F                     __end_of_device_dsc:	
  1506  089F                     _ID:	
  1507  089F  3410               	retlw	16
  1508  08A0  344B               	retlw	75
  1509  08A1  3431               	retlw	49
  1510  08A2  3436               	retlw	54
  1511  08A3  3400               	retlw	0
  1512  08A4  3400               	retlw	0
  1513  08A5  3400               	retlw	0
  1514  08A6  3400               	retlw	0
  1515  08A7  34EF               	retlw	239
  1516  08A8  34BE               	retlw	190
  1517  08A9  34AD               	retlw	173
  1518  08AA  34DE               	retlw	222
  1519  08AB                     __end_of_ID:	
  1520  08AB                     _sd000:	
  1521  08AB  3404               	retlw	4
  1522  08AC  3403               	retlw	3
  1523  08AD  3409               	retlw	9
  1524  08AE  3404               	retlw	4
  1525  08AF                     __end_of_sd000:	
  1526                           
  1527                           	psect	nvBANK3
  1528  01E3                     __pnvBANK3:	
  1529  01E3                     _FanLevel:	
  1530  01E3                     	ds	1
  1531  01E4                     _TempTarget:	
  1532  01E4                     	ds	1
  1533  01E5                     _BankSize:	
  1534  01E5                     	ds	1
  1535  000B                     _INTCONbits	set	11
  1536  0012                     _PIR2bits	set	18
  1537  001B                     _PR2	set	27
  1538  0018                     _T1CONbits	set	24
  1539  0019                     _T1GCONbits	set	25
  1540  001C                     _T2CONbits	set	28
  1541  0015                     _TMR0	set	21
  1542  0017                     _TMR1H	set	23
  1543  0016                     _TMR1L	set	22
  1544  005F                     _GIE	set	95
  1545  008D                     _RCIF	set	141
  1546  008B                     _SSP1IF	set	139
  1547  00CC                     _T1GSPM	set	204
  1548  005A                     _TMR0IF	set	90
  1549  00CF                     _TMR1GE	set	207
  1550  008F                     _TMR1GIF	set	143
  1551  0088                     _TMR1IF	set	136
  1552  00C0                     _TMR1ON	set	192
  1553  0089                     _TMR2IF	set	137
  1554  00E2                     _TMR2ON	set	226
  1555  009D                     _ADCON0bits	set	157
  1556  009E                     _ADCON1bits	set	158
  1557  009F                     _ADCON2bits	set	159
  1558  009C                     _ADRESH	set	156
  1559  0095                     _OPTION_REGbits	set	149
  1560  0099                     _OSCCON	set	153
  1561  0098                     _OSCTUNE	set	152
  1562  0092                     _PIE2bits	set	146
  1563  008C                     _TRISAbits	set	140
  1564  008D                     _TRISBbits	set	141
  1565  008E                     _TRISCbits	set	142
  1566  04AD                     _TMR0CS	set	1197
  1567  048F                     _TMR1GIE	set	1167
  1568  0488                     _TMR1IE	set	1160
  1569  010C                     _LATAbits	set	268
  1570  010E                     _LATC	set	270
  1571  010E                     _LATCbits	set	270
  1572  018C                     _ANSELA	set	396
  1573  018D                     _ANSELB	set	397
  1574  018D                     _ANSELBbits	set	397
  1575  018E                     _ANSELC	set	398
  1576  019F                     _BAUDCONbits	set	415
  1577  0199                     _RCREG	set	409
  1578  019D                     _RCSTAbits	set	413
  1579  019E                     _TXSTAbits	set	414
  1580  0212                     _SSPADD	set	530
  1581  0211                     _SSPBUF	set	529
  1582  0215                     _SSPCON1bits	set	533
  1583  0216                     _SSPCON2bits	set	534
  1584  0217                     _SSPCON3bits	set	535
  1585  0214                     _SSPSTATbits	set	532
  1586  10AD                     _SSP1EN	set	4269
  1587  039B                     _ACTCON	set	923
  1588  0396                     _IOCBF	set	918
  1589  0394                     _IOCBPbits	set	916
  1590  1C9B                     _IOCAF3	set	7323
  1591  0613                     _PWM1CON	set	1555
  1592  0612                     _PWM1DCH	set	1554
  1593  0611                     _PWM1DCL	set	1553
  1594  309E                     _PWM1OE	set	12446
  1595  0E96                     _UADDR	set	3734
  1596  0E91                     _UCFG	set	3729
  1597  0E8E                     _UCON	set	3726
  1598  0E8E                     _UCONbits	set	3726
  1599  0E97                     _UEIE	set	3735
  1600  0E93                     _UEIR	set	3731
  1601  0E98                     _UEP0bits	set	3736
  1602  0E92                     _UIE	set	3730
  1603  0E92                     _UIEbits	set	3730
  1604  0E90                     _UIR	set	3728
  1605  0E90                     _UIRbits	set	3728
  1606  0E8F                     _USTAT	set	3727
  1607  0E98                     _UEP0	set	3736
  1608  0E99                     _UEP1	set	3737
  1609                           
  1610                           ; #config settings
  1611  0000                     
  1612                           	psect	cinit
  1613  1241                     start_initialization:	
  1614  1241                     __initialization:		;BIGRAM
  1615                           
  1616                           ; Clear objects allocated to BIGRAM
  1617  1241  303C               	movlw	low (0+9020)
  1618  1242  0084               	movwf	4
  1619  1243  3023               	movlw	high (0+9020)
  1620  1244  0085               	movwf	5
  1621  1245  30B4               	movlw	180
  1622  1246  00FE               	movwf	btemp
  1623  1247  3000               	movlw	0
  1624  1248  00FF               	movwf	btemp+1
  1625  1249  319B  2374  3192   	fcall	clear_ram0
  1626                           
  1627                           ; Clear objects allocated to BANK0
  1628  124C  3062               	movlw	low __pbssBANK0
  1629  124D  0084               	movwf	4
  1630  124E  3000               	movlw	high __pbssBANK0
  1631  124F  0085               	movwf	5
  1632  1250  300D               	movlw	13
  1633  1251  00FE               	movwf	btemp
  1634  1252  3000               	movlw	0
  1635  1253  00FF               	movwf	btemp+1
  1636  1254  319B  2374  3192   	fcall	clear_ram0
  1637                           
  1638                           ; Clear objects allocated to BANK1
  1639  1257  30E0               	movlw	low __pbssBANK1
  1640  1258  0084               	movwf	4
  1641  1259  3000               	movlw	high __pbssBANK1
  1642  125A  0085               	movwf	5
  1643  125B  3010               	movlw	16
  1644  125C  00FE               	movwf	btemp
  1645  125D  3000               	movlw	0
  1646  125E  00FF               	movwf	btemp+1
  1647  125F  319B  2374  3192   	fcall	clear_ram0
  1648                           
  1649                           ; Clear objects allocated to BANK2
  1650  1262  3059               	movlw	low __pbssBANK2
  1651  1263  0084               	movwf	4
  1652  1264  3001               	movlw	high __pbssBANK2
  1653  1265  0085               	movwf	5
  1654  1266  3017               	movlw	23
  1655  1267  00FE               	movwf	btemp
  1656  1268  3000               	movlw	0
  1657  1269  00FF               	movwf	btemp+1
  1658  126A  319B  2374  3192   	fcall	clear_ram0
  1659                           
  1660                           ; Clear objects allocated to BANK3
  1661  126D  30C7               	movlw	low __pbssBANK3
  1662  126E  0084               	movwf	4
  1663  126F  3001               	movlw	high __pbssBANK3
  1664  1270  0085               	movwf	5
  1665  1271  301C               	movlw	28
  1666  1272  00FE               	movwf	btemp
  1667  1273  3000               	movlw	0
  1668  1274  00FF               	movwf	btemp+1
  1669  1275  319B  2374  3192   	fcall	clear_ram0
  1670                           
  1671                           ; Clear objects allocated to BANK4
  1672  1278  3060               	movlw	low __pbssBANK4
  1673  1279  0084               	movwf	4
  1674  127A  3002               	movlw	high __pbssBANK4
  1675  127B  0085               	movwf	5
  1676  127C  3010               	movlw	16
  1677  127D  00FE               	movwf	btemp
  1678  127E  3000               	movlw	0
  1679  127F  00FF               	movwf	btemp+1
  1680  1280  319B  2374  3192   	fcall	clear_ram0
  1681                           
  1682                           ; Clear objects allocated to BANK6
  1683  1283  3020               	movlw	low __pbssBANK6
  1684  1284  0084               	movwf	4
  1685  1285  3003               	movlw	high __pbssBANK6
  1686  1286  0085               	movwf	5
  1687  1287  3038               	movlw	56
  1688  1288  00FE               	movwf	btemp
  1689  1289  3000               	movlw	0
  1690  128A  00FF               	movwf	btemp+1
  1691  128B  319B  2374  3192   	fcall	clear_ram0
  1692                           
  1693                           ; Initialize objects allocated to BANK0
  1694  128E  3187  27FF  3192   	fcall	__pidataBANK0	;fetch initializer
  1695  1291  00EF               	movwf	__pdataBANK0& (0+127)
  1696                           
  1697                           ; Initialize objects allocated to BANK3
  1698  1292  30B1               	movlw	low __pidataBANK3
  1699  1293  0084               	movwf	4
  1700  1294  3088               	movlw	(high __pidataBANK3)| (0+128)
  1701  1295  0085               	movwf	5
  1702  1296  30A0               	movlw	low __pdataBANK3
  1703  1297  0086               	movwf	6
  1704  1298  3001               	movlw	high __pdataBANK3
  1705  1299  0087               	movwf	7
  1706  129A  3000               	movlw	0
  1707  129B  00FF               	movwf	btemp+1
  1708  129C  3027               	movlw	39
  1709  129D  319B  2368  3192   	fcall	init_ram
  1710                           
  1711                           ; Initialize objects allocated to BANK7
  1712  12A0  30AC               	movlw	low __pidataBANK7
  1713  12A1  0084               	movwf	4
  1714  12A2  309C               	movlw	(high __pidataBANK7)| (0+128)
  1715  12A3  0085               	movwf	5
  1716  12A4  30A0               	movlw	low __pdataBANK7
  1717  12A5  0086               	movwf	6
  1718  12A6  3003               	movlw	high __pdataBANK7
  1719  12A7  0087               	movwf	7
  1720  12A8  3000               	movlw	0
  1721  12A9  00FF               	movwf	btemp+1
  1722  12AA  3020               	movlw	32
  1723  12AB  319B  2368         	fcall	init_ram
  1724  12AD                     end_of_initialization:	
  1725                           ;End of C runtime variable initialization code
  1726                           
  1727  12AD                     __end_of__initialization:	
  1728  12AD  0020               	movlb	0
  1729  12AE  319B  2BF5         	ljmp	_main	;jump to C main() function
  1730                           
  1731                           	psect	bssBANK0
  1732  0062                     __pbssBANK0:	
  1733  0062                     _Step:	
  1734  0062                     	ds	2
  1735  0064                     _I2CCmd:	
  1736  0064                     	ds	1
  1737  0065                     _I2CCount:	
  1738  0065                     	ds	1
  1739  0066                     _I2CState:	
  1740  0066                     	ds	1
  1741  0067                     _ResultPos:	
  1742  0067                     	ds	1
  1743  0068                     _USBDeferStatusStagePacket:	
  1744  0068                     	ds	1
  1745  0069                     _controlTransferState:	
  1746  0069                     	ds	1
  1747  006A                     _pBDTEntryEP0OutNext:	
  1748  006A                     	ds	1
  1749  006B                     _pDst:	
  1750  006B                     	ds	1
  1751  006C                     _ptr:	
  1752  006C                     	ds	1
  1753  006D                     _shortPacketStatus:	
  1754  006D                     	ds	1
  1755  006E                     _WQX:	
  1756  006E                     	ds	1
  1757                           
  1758                           	psect	dataBANK0
  1759  006F                     __pdataBANK0:	
  1760  006F                     _HashTime:	
  1761  006F                     	ds	1
  1762                           
  1763                           	psect	bssBANK1
  1764  00E0                     __pbssBANK1:	
  1765  00E0                     _pBDTEntryIn:	
  1766  00E0                     	ds	2
  1767  00E2                     _SlaveAddress:	
  1768  00E2                     	ds	1
  1769  00E3                     _USBDeviceState:	
  1770  00E3                     	ds	1
  1771  00E4                     _WorkNow:	
  1772  00E4                     	ds	1
  1773  00E5                     _endpoint_number:	
  1774  00E5                     	ds	1
  1775  00E6                     _pBDTEntryEP0OutCurrent:	
  1776  00E6                     	ds	1
  1777  00E7                     _inPipes:	
  1778  00E7                     	ds	5
  1779  00EC                     _USBActiveConfiguration:	
  1780  00EC                     	ds	1
  1781  00ED                     _USBAlternateInterface:	
  1782  00ED                     	ds	1
  1783  00EE                     _USTATcopy:	
  1784  00EE                     	ds	1
  1785  00EF                     _WQI:	
  1786  00EF                     	ds	1
  1787                           
  1788                           	psect	bssBANK2
  1789  0159                     __pbssBANK2:	
  1790  0159                     _pBDTEntryOut:	
  1791  0159                     	ds	2
  1792  015B                     _send32_data:	
  1793  015B                     	ds	2
  1794  015D                     _BothEP0OutUOWNsSet:	
  1795  015D                     	ds	1
  1796  015E                     _I2CAddr:	
  1797  015E                     	ds	1
  1798  015F                     _I2CInBuf:	
  1799  015F                     	ds	1
  1800  0160                     _LastTemp:	
  1801  0160                     	ds	1
  1802  0161                     _RemoteWakeup:	
  1803  0161                     	ds	1
  1804  0162                     _ResultQC:	
  1805  0162                     	ds	1
  1806  0163                     _SlowTick:	
  1807  0163                     	ds	1
  1808  0164                     _TimeOut:	
  1809  0164                     	ds	1
  1810  0165                     _USBBusIsSuspended:	
  1811  0165                     	ds	1
  1812  0166                     _USBDeferINDataStagePackets:	
  1813  0166                     	ds	1
  1814  0167                     _USBDeferOUTDataStagePackets:	
  1815  0167                     	ds	1
  1816  0168                     _USBGenericInHandle:	
  1817  0168                     	ds	1
  1818  0169                     _USBGenericOutHandle:	
  1819  0169                     	ds	1
  1820  016A                     _USBStatusStageEnabledFlag1:	
  1821  016A                     	ds	1
  1822  016B                     _USBStatusStageEnabledFlag2:	
  1823  016B                     	ds	1
  1824  016C                     _USBStatusStageTimeoutCounter:	
  1825  016C                     	ds	1
  1826  016D                     _last_bit0:	
  1827  016D                     	ds	1
  1828  016E                     _last_bit1:	
  1829  016E                     	ds	1
  1830  016F                     _send32_count:	
  1831  016F                     	ds	1
  1832                           
  1833                           	psect	bssBANK3
  1834  01C7                     __pbssBANK3:	
  1835  01C7                     _outPipes:	
  1836  01C7                     	ds	6
  1837  01CD                     USBCBSendResume@delay_count:	
  1838  01CD                     	ds	2
  1839  01CF                     _LastError:	
  1840  01CF                     	ds	2
  1841  01D1                     _ep_data_in:	
  1842  01D1                     	ds	2
  1843  01D3                     _ep_data_out:	
  1844  01D3                     	ds	2
  1845  01D5                     _ResultQue:	
  1846  01D5                     	ds	12
  1847  01E1                     _Error:	
  1848  01E1                     	ds	2
  1849                           
  1850                           	psect	dataBANK3
  1851  01A0                     __pdataBANK3:	
  1852  01A0                     AsicPreCalc@F3347:	
  1853  01A0                     	ds	12
  1854  01AC                     _Status:	
  1855  01AC                     	ds	13
  1856  01B9                     _ClockCfg:	
  1857  01B9                     	ds	8
  1858  01C1                     _Cfg:	
  1859  01C1                     	ds	6
  1860                           
  1861                           	psect	bssBANK4
  1862  0260                     __pbssBANK4:	
  1863  0260                     _buf:	
  1864  0260                     	ds	16
  1865                           
  1866                           	psect	bssBANK6
  1867  0320                     __pbssBANK6:	
  1868  0320                     _NonceRanges:	
  1869  0320                     	ds	32
  1870  0340                     _PrecalcHashes:	
  1871  0340                     	ds	24
  1872                           
  1873                           	psect	dataBANK7
  1874  03A0                     __pdataBANK7:	
  1875  03A0                     _BankRanges:	
  1876  03A0                     	ds	32
  1877                           
  1878                           	psect	clrtext
  1879  1B74                     clear_ram0:	
  1880                           ;	Called with FSR0 containing the base address, and
  1881                           ;	btemp/btemp+1 has the size to clear
  1882                           
  1883  1B74  0064               	clrwdt	;clear the watchdog before getting into this loop
  1884  1B75                     clrloop0:	
  1885  1B75  0180               	clrf	0	;clear RAM location pointed to by FSR
  1886  1B76  3101               	addfsr 0,1
  1887  1B77  3001               	movlw	1
  1888  1B78  02FE               	subwf	126,f
  1889  1B79  3000               	movlw	0
  1890  1B7A  3BFF               	subwfb	127,f
  1891  1B7B  087F               	movf	127,w
  1892  1B7C  047E               	iorwf	126,w
  1893  1B7D  1903               	btfsc	3,2
  1894  1B7E  3400               	retlw	0	;all done for this memory range, return
  1895  1B7F  2B75               	goto	clrloop0	;have we reached the end yet?
  1896                           
  1897                           	psect	inittext
  1898  1B68                     init_ram:	
  1899  1B68  00FE               	movwf	126
  1900  1B69                     initloop:	
  1901  1B69  0012               	moviw fsr0++
  1902  1B6A  001E               	movwi fsr1++
  1903  1B6B  3001               	movlw	1
  1904  1B6C  02FE               	subwf	126,f
  1905  1B6D  3000               	movlw	0
  1906  1B6E  3BFF               	subwfb	127,f
  1907  1B6F  087F               	movf	127,w
  1908  1B70  047E               	iorwf	126,w
  1909  1B71  1903               	btfsc	3,2
  1910  1B72  3400               	retlw	0
  1911  1B73  2B69               	goto	initloop
  1912                           
  1913                           	psect	cstackBANK2
  1914  0120                     __pcstackBANK2:	
  1915  0120                     AsicPreCalc@K:	
  1916                           
  1917                           ; 12 bytes @ 0x0
  1918  0120                     	ds	12
  1919  012C                     AsicPreCalc@m:	
  1920                           
  1921                           ; 32 bytes @ 0xC
  1922  012C                     	ds	32
  1923  014C                     AsicPreCalc@z:	
  1924                           
  1925                           ; 4 bytes @ 0x2C
  1926  014C                     	ds	4
  1927  0150                     AsicPreCalc@y:	
  1928                           
  1929                           ; 4 bytes @ 0x30
  1930  0150                     	ds	4
  1931  0154                     AsicPreCalc@x:	
  1932                           
  1933                           ; 4 bytes @ 0x34
  1934  0154                     	ds	4
  1935  0158                     AsicPreCalc@n:	
  1936                           
  1937                           ; 1 bytes @ 0x38
  1938  0158                     	ds	1
  1939                           
  1940                           	psect	cstackBANK1
  1941  00A0                     __pcstackBANK1:	
  1942  00A0                     ??_USBConfigureEndpoint:	
  1943  00A0                     ??_memset:	
  1944                           ; 0 bytes @ 0x0
  1945                           
  1946  00A0                     ??_USBCtrlTrfInHandler:	
  1947                           ; 0 bytes @ 0x0
  1948                           
  1949  00A0                     ??_USBCtrlEPAllowDataStage:	
  1950                           ; 0 bytes @ 0x0
  1951                           
  1952  00A0                     ??___awdiv:	
  1953                           ; 0 bytes @ 0x0
  1954                           
  1955  00A0                     ??___lwdiv:	
  1956                           ; 0 bytes @ 0x0
  1957                           
  1958  00A0                     ?_USBTransferOnePacket:	
  1959                           ; 0 bytes @ 0x0
  1960                           
  1961  00A0                     ?___ftpack:	
  1962                           ; 1 bytes @ 0x0
  1963                           
  1964  00A0                     ?_rotate:	
  1965                           ; 3 bytes @ 0x0
  1966                           
  1967  00A0                     USBTransferOnePacket@dir:	
  1968                           ; 4 bytes @ 0x0
  1969                           
  1970  00A0                     USBCtrlTrfRxService@i:	
  1971                           ; 1 bytes @ 0x0
  1972                           
  1973  00A0                     USBDeviceInit@p:	
  1974                           ; 1 bytes @ 0x0
  1975                           
  1976  00A0                     ___wmul@product:	
  1977                           ; 2 bytes @ 0x0
  1978                           
  1979  00A0                     ___ftpack@arg:	
  1980                           ; 2 bytes @ 0x0
  1981                           
  1982  00A0                     rotate@x:	
  1983                           ; 3 bytes @ 0x0
  1984                           
  1985                           
  1986                           ; 4 bytes @ 0x0
  1987  00A0                     	ds	1
  1988  00A1                     USBTransferOnePacket@data:	
  1989  00A1                     USBCtrlTrfRxService@byteToRead:	
  1990                           ; 1 bytes @ 0x1
  1991                           
  1992  00A1                     ___awdiv@counter:	
  1993                           ; 1 bytes @ 0x1
  1994                           
  1995  00A1                     memset@p1:	
  1996                           ; 1 bytes @ 0x1
  1997                           
  1998  00A1                     ___lwdiv@quotient:	
  1999                           ; 1 bytes @ 0x1
  2000                           
  2001                           
  2002                           ; 2 bytes @ 0x1
  2003  00A1                     	ds	1
  2004  00A2                     ??_USBCtrlTrfOutHandler:	
  2005  00A2                     ?_SendCmdReply:	
  2006                           ; 0 bytes @ 0x2
  2007                           
  2008  00A2                     ??_USBCtrlEPServiceComplete:	
  2009                           ; 0 bytes @ 0x2
  2010                           
  2011  00A2                     ?_SendAsicData:	
  2012                           ; 0 bytes @ 0x2
  2013                           
  2014  00A2                     USBDeviceInit@i_718:	
  2015                           ; 0 bytes @ 0x2
  2016                           
  2017  00A2                     USBTransferOnePacket@len:	
  2018                           ; 1 bytes @ 0x2
  2019                           
  2020  00A2                     ___awdiv@sign:	
  2021                           ; 1 bytes @ 0x2
  2022                           
  2023  00A2                     memset@p:	
  2024                           ; 1 bytes @ 0x2
  2025                           
  2026  00A2                     SendAsicData@work:	
  2027                           ; 1 bytes @ 0x2
  2028                           
  2029  00A2                     SendCmdReply@cmd:	
  2030                           ; 2 bytes @ 0x2
  2031                           
  2032                           
  2033                           ; 2 bytes @ 0x2
  2034  00A2                     	ds	1
  2035  00A3                     ??_USBTransferOnePacket:	
  2036  00A3                     USBDeviceInit@i:	
  2037                           ; 0 bytes @ 0x3
  2038                           
  2039  00A3                     ___ftpack@exp:	
  2040                           ; 1 bytes @ 0x3
  2041                           
  2042  00A3                     ___lwdiv@counter:	
  2043                           ; 1 bytes @ 0x3
  2044                           
  2045  00A3                     ___awdiv@quotient:	
  2046                           ; 1 bytes @ 0x3
  2047                           
  2048                           
  2049                           ; 2 bytes @ 0x3
  2050  00A3                     	ds	1
  2051  00A4                     ??_USBEnableEndpoint:	
  2052  00A4                     ??_SendAsicData:	
  2053                           ; 0 bytes @ 0x4
  2054                           
  2055  00A4                     rotate@y:	
  2056                           ; 0 bytes @ 0x4
  2057                           
  2058  00A4                     ___ftpack@sign:	
  2059                           ; 1 bytes @ 0x4
  2060                           
  2061  00A4                     SendCmdReply@data:	
  2062                           ; 1 bytes @ 0x4
  2063                           
  2064                           
  2065                           ; 2 bytes @ 0x4
  2066  00A4                     	ds	1
  2067  00A5                     ??_rotate:	
  2068  00A5                     ??_DetectAsics:	
  2069                           ; 0 bytes @ 0x5
  2070                           
  2071  00A5                     ?___awtoft:	
  2072                           ; 0 bytes @ 0x5
  2073                           
  2074  00A5                     USBTransferOnePacket@ep:	
  2075                           ; 3 bytes @ 0x5
  2076                           
  2077  00A5                     ___awtoft@c:	
  2078                           ; 1 bytes @ 0x5
  2079                           
  2080                           
  2081                           ; 2 bytes @ 0x5
  2082  00A5                     	ds	1
  2083  00A6                     USBTransferOnePacket@handle:	
  2084  00A6                     SendCmdReply@count:	
  2085                           ; 1 bytes @ 0x6
  2086                           
  2087  00A6                     USBEnableEndpoint@p:	
  2088                           ; 1 bytes @ 0x6
  2089                           
  2090                           
  2091                           ; 2 bytes @ 0x6
  2092  00A6                     	ds	1
  2093  00A7                     ??_SendCmdReply:	
  2094                           
  2095                           ; 0 bytes @ 0x7
  2096  00A7                     	ds	1
  2097  00A8                     ??___awtoft:	
  2098  00A8                     USBEnableEndpoint@ep:	
  2099                           ; 0 bytes @ 0x8
  2100                           
  2101                           
  2102                           ; 1 bytes @ 0x8
  2103  00A8                     	ds	1
  2104  00A9                     ??_USBCBInitEP:	
  2105                           
  2106                           ; 0 bytes @ 0x9
  2107  00A9                     	ds	1
  2108  00AA                     ?___ftmul:	
  2109  00AA                     ___ftmul@f1:	
  2110                           ; 3 bytes @ 0xA
  2111                           
  2112                           
  2113                           ; 3 bytes @ 0xA
  2114  00AA                     	ds	2
  2115  00AC                     ?_USER_USB_CALLBACK_EVENT_HANDLER:	
  2116  00AC                     USER_USB_CALLBACK_EVENT_HANDLER@event:	
  2117                           ; 1 bytes @ 0xC
  2118                           
  2119  00AC                     _DetectAsics$2873:	
  2120                           ; 2 bytes @ 0xC
  2121                           
  2122                           
  2123                           ; 2 bytes @ 0xC
  2124  00AC                     	ds	1
  2125  00AD                     ?_AsicPreCalc:	
  2126  00AD                     AsicPreCalc@work:	
  2127                           ; 0 bytes @ 0xD
  2128                           
  2129  00AD                     ___ftmul@f2:	
  2130                           ; 2 bytes @ 0xD
  2131                           
  2132                           
  2133                           ; 3 bytes @ 0xD
  2134  00AD                     	ds	1
  2135  00AE                     DetectAsics@x:	
  2136  00AE                     USER_USB_CALLBACK_EVENT_HANDLER@pdata:	
  2137                           ; 1 bytes @ 0xE
  2138                           
  2139                           
  2140                           ; 1 bytes @ 0xE
  2141  00AE                     	ds	1
  2142  00AF                     ??_AsicPreCalc:	
  2143  00AF                     SendCmdReply@n:	
  2144                           ; 0 bytes @ 0xF
  2145                           
  2146  00AF                     USER_USB_CALLBACK_EVENT_HANDLER@size:	
  2147                           ; 1 bytes @ 0xF
  2148                           
  2149                           
  2150                           ; 2 bytes @ 0xF
  2151  00AF                     	ds	1
  2152  00B0                     ??___ftmul:	
  2153                           
  2154                           ; 0 bytes @ 0x10
  2155  00B0                     	ds	1
  2156  00B1                     ??_USBWakeFromSuspend:	
  2157  00B1                     ??_USBSuspend:	
  2158                           ; 0 bytes @ 0x11
  2159                           
  2160  00B1                     ??_USBStdFeatureReqHandler:	
  2161                           ; 0 bytes @ 0x11
  2162                           
  2163  00B1                     ??_USBStdSetCfgHandler:	
  2164                           ; 0 bytes @ 0x11
  2165                           
  2166                           
  2167                           ; 0 bytes @ 0x11
  2168  00B1                     	ds	1
  2169  00B2                     USBStdSetCfgHandler@p:	
  2170                           
  2171                           ; 2 bytes @ 0x12
  2172  00B2                     	ds	1
  2173  00B3                     USBStdFeatureReqHandler@pUEP:	
  2174                           
  2175                           ; 2 bytes @ 0x13
  2176  00B3                     	ds	1
  2177  00B4                     USBStdSetCfgHandler@i_1089:	
  2178  00B4                     ___ftmul@exp:	
  2179                           ; 1 bytes @ 0x14
  2180                           
  2181                           
  2182                           ; 1 bytes @ 0x14
  2183  00B4                     	ds	1
  2184  00B5                     USBStdSetCfgHandler@i:	
  2185  00B5                     USBStdFeatureReqHandler@current_ep_data:	
  2186                           ; 1 bytes @ 0x15
  2187                           
  2188  00B5                     ___ftmul@f3_as_product:	
  2189                           ; 1 bytes @ 0x15
  2190                           
  2191                           
  2192                           ; 3 bytes @ 0x15
  2193  00B5                     	ds	1
  2194  00B6                     USBStdFeatureReqHandler@p:	
  2195                           
  2196                           ; 1 bytes @ 0x16
  2197  00B6                     	ds	1
  2198  00B7                     ??_USBCheckStdRequest:	
  2199                           
  2200                           ; 0 bytes @ 0x17
  2201  00B7                     	ds	1
  2202  00B8                     ??_USBCtrlTrfSetupHandler:	
  2203  00B8                     ___ftmul@cntr:	
  2204                           ; 0 bytes @ 0x18
  2205                           
  2206                           
  2207                           ; 1 bytes @ 0x18
  2208  00B8                     	ds	1
  2209  00B9                     ??_USBCtrlEPService:	
  2210  00B9                     ??_AsicPushWork:	
  2211                           ; 0 bytes @ 0x19
  2212                           
  2213  00B9                     ___ftmul@sign:	
  2214                           ; 0 bytes @ 0x19
  2215                           
  2216                           
  2217                           ; 1 bytes @ 0x19
  2218  00B9                     	ds	1
  2219  00BA                     ?___ftneg:	
  2220  00BA                     ___ftneg@f1:	
  2221                           ; 3 bytes @ 0x1A
  2222                           
  2223                           
  2224                           ; 3 bytes @ 0x1A
  2225  00BA                     	ds	2
  2226  00BC                     USBCtrlEPService@setup_cnt:	
  2227                           
  2228                           ; 1 bytes @ 0x1C
  2229  00BC                     	ds	1
  2230  00BD                     ??_USBDeviceTasks:	
  2231  00BD                     ?___ftadd:	
  2232                           ; 0 bytes @ 0x1D
  2233                           
  2234  00BD                     ___ftadd@f1:	
  2235                           ; 3 bytes @ 0x1D
  2236                           
  2237                           
  2238                           ; 3 bytes @ 0x1D
  2239  00BD                     	ds	1
  2240  00BE                     ??_ProcessCmd:	
  2241                           
  2242                           ; 0 bytes @ 0x1E
  2243  00BE                     	ds	1
  2244  00BF                     USBDeviceTasks@i:	
  2245                           
  2246                           ; 1 bytes @ 0x1F
  2247  00BF                     	ds	1
  2248  00C0                     ___ftadd@f2:	
  2249                           
  2250                           ; 3 bytes @ 0x20
  2251  00C0                     	ds	2
  2252  00C2                     _ProcessCmd$2059:	
  2253                           
  2254                           ; 2 bytes @ 0x22
  2255  00C2                     	ds	1
  2256  00C3                     ??___ftadd:	
  2257                           
  2258                           ; 0 bytes @ 0x23
  2259  00C3                     	ds	1
  2260  00C4                     ProcessCmd@cmd:	
  2261                           
  2262                           ; 1 bytes @ 0x24
  2263  00C4                     	ds	1
  2264  00C5                     ??_ProcessIO:	
  2265                           
  2266                           ; 0 bytes @ 0x25
  2267  00C5                     	ds	2
  2268  00C7                     ___ftadd@sign:	
  2269                           
  2270                           ; 1 bytes @ 0x27
  2271  00C7                     	ds	1
  2272  00C8                     ___ftadd@exp2:	
  2273                           
  2274                           ; 1 bytes @ 0x28
  2275  00C8                     	ds	1
  2276  00C9                     ___ftadd@exp1:	
  2277  00C9                     _ProcessIO$2377:	
  2278                           ; 1 bytes @ 0x29
  2279                           
  2280                           
  2281                           ; 2 bytes @ 0x29
  2282  00C9                     	ds	1
  2283  00CA                     ?___fttol:	
  2284  00CA                     ___fttol@f1:	
  2285                           ; 4 bytes @ 0x2A
  2286                           
  2287                           
  2288                           ; 3 bytes @ 0x2A
  2289  00CA                     	ds	1
  2290  00CB                     _ProcessIO$2411:	
  2291                           
  2292                           ; 2 bytes @ 0x2B
  2293  00CB                     	ds	3
  2294  00CE                     ??___fttol:	
  2295                           
  2296                           ; 0 bytes @ 0x2E
  2297  00CE                     	ds	4
  2298  00D2                     ___fttol@sign1:	
  2299                           
  2300                           ; 1 bytes @ 0x32
  2301  00D2                     	ds	1
  2302  00D3                     ___fttol@lval:	
  2303                           
  2304                           ; 4 bytes @ 0x33
  2305  00D3                     	ds	4
  2306  00D7                     ___fttol@exp1:	
  2307                           
  2308                           ; 1 bytes @ 0x37
  2309  00D7                     	ds	1
  2310  00D8                     ??_UpdateFanLevel:	
  2311                           
  2312                           ; 0 bytes @ 0x38
  2313  00D8                     	ds	4
  2314  00DC                     _UpdateFanLevel$2876:	
  2315                           
  2316                           ; 3 bytes @ 0x3C
  2317  00DC                     	ds	3
  2318  00DF                     ??_WorkTick:	
  2319                           
  2320                           ; 0 bytes @ 0x3F
  2321  00DF                     	ds	1
  2322                           
  2323                           	psect	cstackCOMMON
  2324  0070                     __pcstackCOMMON:	
  2325  0070                     ?_USBWakeFromSuspend:	
  2326  0070                     ?_USBSuspend:	
  2327                           ; 0 bytes @ 0x0
  2328                           
  2329  0070                     ?_USBCtrlEPAllowStatusStage:	
  2330                           ; 0 bytes @ 0x0
  2331                           
  2332  0070                     ?_USBStallHandler:	
  2333                           ; 0 bytes @ 0x0
  2334                           
  2335  0070                     ?_USBCtrlEPService:	
  2336                           ; 0 bytes @ 0x0
  2337                           
  2338  0070                     ?_USBCtrlTrfTxService:	
  2339                           ; 0 bytes @ 0x0
  2340                           
  2341  0070                     ?_USBCtrlTrfSetupHandler:	
  2342                           ; 0 bytes @ 0x0
  2343                           
  2344  0070                     ?_USBCtrlTrfOutHandler:	
  2345                           ; 0 bytes @ 0x0
  2346                           
  2347  0070                     ?_USBCtrlTrfInHandler:	
  2348                           ; 0 bytes @ 0x0
  2349                           
  2350  0070                     ?_USBCheckStdRequest:	
  2351                           ; 0 bytes @ 0x0
  2352                           
  2353  0070                     ?_USBStdFeatureReqHandler:	
  2354                           ; 0 bytes @ 0x0
  2355                           
  2356  0070                     ?_Send32:	
  2357                           ; 0 bytes @ 0x0
  2358                           
  2359  0070                     ?_AsicPushWork:	
  2360                           ; 0 bytes @ 0x0
  2361                           
  2362  0070                     ?_UpdateFanLevel:	
  2363                           ; 0 bytes @ 0x0
  2364                           
  2365  0070                     ?_InitializeSystem:	
  2366                           ; 0 bytes @ 0x0
  2367                           
  2368  0070                     ?_ProcessIO:	
  2369                           ; 0 bytes @ 0x0
  2370                           
  2371  0070                     ?_UserInit:	
  2372                           ; 0 bytes @ 0x0
  2373                           
  2374  0070                     ?_USBDeviceInit:	
  2375                           ; 0 bytes @ 0x0
  2376                           
  2377  0070                     ?_USBDeviceTasks:	
  2378                           ; 0 bytes @ 0x0
  2379                           
  2380  0070                     ?_USBCtrlEPAllowDataStage:	
  2381                           ; 0 bytes @ 0x0
  2382                           
  2383  0070                     ?_USBCtrlEPServiceComplete:	
  2384                           ; 0 bytes @ 0x0
  2385                           
  2386  0070                     ?_USBCtrlTrfRxService:	
  2387                           ; 0 bytes @ 0x0
  2388                           
  2389  0070                     ?_USBStdSetCfgHandler:	
  2390                           ; 0 bytes @ 0x0
  2391                           
  2392  0070                     ?_USBStdGetDscHandler:	
  2393                           ; 0 bytes @ 0x0
  2394                           
  2395  0070                     ?_USBStdGetStatusHandler:	
  2396                           ; 0 bytes @ 0x0
  2397                           
  2398  0070                     ?_USBCheckVendorRequest:	
  2399                           ; 0 bytes @ 0x0
  2400                           
  2401  0070                     ?_ProcessCmd:	
  2402                           ; 0 bytes @ 0x0
  2403                           
  2404  0070                     ?_DetectAsics:	
  2405                           ; 0 bytes @ 0x0
  2406                           
  2407  0070                     ?_WorkTick:	
  2408                           ; 0 bytes @ 0x0
  2409                           
  2410  0070                     ?_ResultRx:	
  2411                           ; 0 bytes @ 0x0
  2412                           
  2413  0070                     ?_InitFAN:	
  2414                           ; 0 bytes @ 0x0
  2415                           
  2416  0070                     ?_InitTempSensor:	
  2417                           ; 0 bytes @ 0x0
  2418                           
  2419  0070                     ?_InitWorkTick:	
  2420                           ; 0 bytes @ 0x0
  2421                           
  2422  0070                     ?_InitResultRx:	
  2423                           ; 0 bytes @ 0x0
  2424                           
  2425  0070                     ?_ISRCode:	
  2426                           ; 0 bytes @ 0x0
  2427                           
  2428  0070                     ?_USBCBSuspend:	
  2429                           ; 0 bytes @ 0x0
  2430                           
  2431  0070                     ?_USBCBWakeFromSuspend:	
  2432                           ; 0 bytes @ 0x0
  2433                           
  2434  0070                     ?_USBCB_SOF_Handler:	
  2435                           ; 0 bytes @ 0x0
  2436                           
  2437  0070                     ?_USBCBErrorHandler:	
  2438                           ; 0 bytes @ 0x0
  2439                           
  2440  0070                     ?_USBCBCheckOtherReq:	
  2441                           ; 0 bytes @ 0x0
  2442                           
  2443  0070                     ?_USBCBStdSetDscHandler:	
  2444                           ; 0 bytes @ 0x0
  2445                           
  2446  0070                     ?_USBCBInitEP:	
  2447                           ; 0 bytes @ 0x0
  2448                           
  2449  0070                     ?i1___bmul:	
  2450                           ; 0 bytes @ 0x0
  2451                           
  2452  0070                     ?_main:	
  2453                           ; 1 bytes @ 0x0
  2454                           
  2455  0070                     ?i1___wmul:	
  2456                           ; 2 bytes @ 0x0
  2457                           
  2458  0070                     i1___bmul@multiplicand:	
  2459                           ; 2 bytes @ 0x0
  2460                           
  2461  0070                     i1___wmul@multiplier:	
  2462                           ; 1 bytes @ 0x0
  2463                           
  2464                           
  2465                           ; 2 bytes @ 0x0
  2466  0070                     	ds	1
  2467  0071                     ??i1___bmul:	
  2468                           
  2469                           ; 0 bytes @ 0x1
  2470  0071                     	ds	1
  2471  0072                     i1___bmul@multiplier:	
  2472  0072                     i1___wmul@multiplicand:	
  2473                           ; 1 bytes @ 0x2
  2474                           
  2475                           
  2476                           ; 2 bytes @ 0x2
  2477  0072                     	ds	1
  2478  0073                     i1___bmul@product:	
  2479                           
  2480                           ; 1 bytes @ 0x3
  2481  0073                     	ds	1
  2482  0074                     ??i1___wmul:	
  2483  0074                     i1___wmul@product:	
  2484                           ; 0 bytes @ 0x4
  2485                           
  2486                           
  2487                           ; 2 bytes @ 0x4
  2488  0074                     	ds	2
  2489  0076                     ?i1_SendCmdReply:	
  2490  0076                     i1SendCmdReply@cmd:	
  2491                           ; 0 bytes @ 0x6
  2492                           
  2493                           
  2494                           ; 2 bytes @ 0x6
  2495  0076                     	ds	2
  2496  0078                     i1SendCmdReply@data:	
  2497                           
  2498                           ; 2 bytes @ 0x8
  2499  0078                     	ds	2
  2500  007A                     i1SendCmdReply@count:	
  2501                           
  2502                           ; 1 bytes @ 0xA
  2503  007A                     	ds	1
  2504  007B                     i1SendCmdReply@n:	
  2505                           
  2506                           ; 1 bytes @ 0xB
  2507  007B                     	ds	1
  2508  007C                     _ResultRx$3156:	
  2509                           
  2510                           ; 1 bytes @ 0xC
  2511  007C                     	ds	1
  2512  007D                     _ResultRx$3157:	
  2513                           
  2514                           ; 1 bytes @ 0xD
  2515  007D                     	ds	1
  2516                           
  2517                           	psect	cstackBANK0
  2518  0050                     __pcstackBANK0:	
  2519  0050                     ??i1_SendCmdReply:	
  2520                           
  2521                           ; 0 bytes @ 0x0
  2522  0050                     	ds	8
  2523  0058                     ??_ResultRx:	
  2524                           
  2525                           ; 0 bytes @ 0x8
  2526  0058                     	ds	5
  2527  005D                     ??_ISRCode:	
  2528                           
  2529                           ; 0 bytes @ 0xD
  2530  005D                     	ds	1
  2531  005E                     ??_USBCtrlEPAllowStatusStage:	
  2532  005E                     ??_USBStallHandler:	
  2533                           ; 0 bytes @ 0xE
  2534                           
  2535  005E                     ?_USBConfigureEndpoint:	
  2536                           ; 0 bytes @ 0xE
  2537                           
  2538  005E                     ??_USBCtrlTrfTxService:	
  2539                           ; 0 bytes @ 0xE
  2540                           
  2541  005E                     ??_Send32:	
  2542                           ; 0 bytes @ 0xE
  2543                           
  2544  005E                     ??___ftpack:	
  2545                           ; 0 bytes @ 0xE
  2546                           
  2547  005E                     ??_USBDeviceInit:	
  2548                           ; 0 bytes @ 0xE
  2549                           
  2550  005E                     ??_USBStdGetDscHandler:	
  2551                           ; 0 bytes @ 0xE
  2552                           
  2553  005E                     ??_USBStdGetStatusHandler:	
  2554                           ; 0 bytes @ 0xE
  2555                           
  2556  005E                     ??_USBCheckVendorRequest:	
  2557                           ; 0 bytes @ 0xE
  2558                           
  2559  005E                     ??_InitFAN:	
  2560                           ; 0 bytes @ 0xE
  2561                           
  2562  005E                     ??_InitTempSensor:	
  2563                           ; 0 bytes @ 0xE
  2564                           
  2565  005E                     ??_InitWorkTick:	
  2566                           ; 0 bytes @ 0xE
  2567                           
  2568  005E                     ??_InitResultRx:	
  2569                           ; 0 bytes @ 0xE
  2570                           
  2571  005E                     ??_USBCBSuspend:	
  2572                           ; 0 bytes @ 0xE
  2573                           
  2574  005E                     ??_USBCBWakeFromSuspend:	
  2575                           ; 0 bytes @ 0xE
  2576                           
  2577  005E                     ??_USBCB_SOF_Handler:	
  2578                           ; 0 bytes @ 0xE
  2579                           
  2580  005E                     ??_USBCBErrorHandler:	
  2581                           ; 0 bytes @ 0xE
  2582                           
  2583  005E                     ??_USBCBCheckOtherReq:	
  2584                           ; 0 bytes @ 0xE
  2585                           
  2586  005E                     ??_USBCBStdSetDscHandler:	
  2587                           ; 0 bytes @ 0xE
  2588                           
  2589  005E                     ?_memset:	
  2590                           ; 0 bytes @ 0xE
  2591                           
  2592  005E                     ?___bmul:	
  2593                           ; 1 bytes @ 0xE
  2594                           
  2595  005E                     ?___awdiv:	
  2596                           ; 1 bytes @ 0xE
  2597                           
  2598  005E                     ?___lwdiv:	
  2599                           ; 2 bytes @ 0xE
  2600                           
  2601  005E                     ?___wmul:	
  2602                           ; 2 bytes @ 0xE
  2603                           
  2604  005E                     USBConfigureEndpoint@direction:	
  2605                           ; 2 bytes @ 0xE
  2606                           
  2607  005E                     ___bmul@multiplicand:	
  2608                           ; 1 bytes @ 0xE
  2609                           
  2610  005E                     ___awdiv@divisor:	
  2611                           ; 1 bytes @ 0xE
  2612                           
  2613  005E                     ___lwdiv@divisor:	
  2614                           ; 2 bytes @ 0xE
  2615                           
  2616  005E                     memset@c:	
  2617                           ; 2 bytes @ 0xE
  2618                           
  2619  005E                     ___wmul@multiplier:	
  2620                           ; 2 bytes @ 0xE
  2621                           
  2622                           
  2623                           ; 2 bytes @ 0xE
  2624  005E                     	ds	1
  2625  005F                     ??___bmul:	
  2626  005F                     USBConfigureEndpoint@EPNum:	
  2627                           ; 0 bytes @ 0xF
  2628                           
  2629  005F                     USBStdGetStatusHandler@p:	
  2630                           ; 1 bytes @ 0xF
  2631                           
  2632                           
  2633                           ; 1 bytes @ 0xF
  2634  005F                     	ds	1
  2635  0060                     ??_USBCtrlTrfRxService:	
  2636  0060                     USBConfigureEndpoint@handle:	
  2637                           ; 0 bytes @ 0x10
  2638                           
  2639  0060                     USBCtrlTrfTxService@byteToSend:	
  2640                           ; 1 bytes @ 0x10
  2641                           
  2642  0060                     ___bmul@product:	
  2643                           ; 1 bytes @ 0x10
  2644                           
  2645  0060                     ___awdiv@dividend:	
  2646                           ; 1 bytes @ 0x10
  2647                           
  2648  0060                     ___lwdiv@dividend:	
  2649                           ; 2 bytes @ 0x10
  2650                           
  2651  0060                     memset@n:	
  2652                           ; 2 bytes @ 0x10
  2653                           
  2654  0060                     ___wmul@multiplicand:	
  2655                           ; 2 bytes @ 0x10
  2656                           
  2657                           
  2658                           ; 2 bytes @ 0x10
  2659  0060                     	ds	1
  2660  0061                     ?_USBEnableEndpoint:	
  2661  0061                     USBEnableEndpoint@options:	
  2662                           ; 0 bytes @ 0x11
  2663                           
  2664  0061                     USBCtrlTrfInHandler@lastDTS:	
  2665                           ; 1 bytes @ 0x11
  2666                           
  2667  0061                     ___awtoft@sign:	
  2668                           ; 1 bytes @ 0x11
  2669                           
  2670  0061                     ___bmul@multiplier:	
  2671                           ; 1 bytes @ 0x11
  2672                           
  2673                           
  2674                           ; 1 bytes @ 0x11
  2675  0061                     	ds	1
  2676  0062                     ??_USER_USB_CALLBACK_EVENT_HANDLER:	
  2677  0062                     ??_InitializeSystem:	
  2678                           ; 0 bytes @ 0x12
  2679                           
  2680  0062                     ??_UserInit:	
  2681                           ; 0 bytes @ 0x12
  2682                           
  2683  0062                     ??_main:	
  2684                           ; 0 bytes @ 0x12
  2685                           
  2686  0062                     ??___ftneg:	
  2687                           ; 0 bytes @ 0x12
  2688                           
  2689  0062                     ??___wmul:	
  2690                           ; 0 bytes @ 0x12
  2691                           
  2692                           
  2693                           	psect	maintext
  2694  1BF5                     __pmaintext:	
  2695                           ; 0 bytes @ 0x12
  2696 ;;
  2697 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2698 ;;
  2699 ;; *************** function _main *****************
  2700 ;; Defined at:
  2701 ;;		line 98 in file "main.c"
  2702 ;; Parameters:    Size  Location     Type
  2703 ;;		None
  2704 ;; Auto vars:     Size  Location     Type
  2705 ;;		None
  2706 ;; Return value:  Size  Location     Type
  2707 ;;                  2  854[COMMON] int 
  2708 ;; Registers used:
  2709 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  2710 ;; Tracked objects:
  2711 ;;		On entry : 17F/0
  2712 ;;		On exit  : 0/0
  2713 ;;		Unchanged: 0/0
  2714 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2715 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2716 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2717 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2718 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2719 ;;Total ram usage:        0 bytes
  2720 ;; Hardware stack levels required when called:   13
  2721 ;; This function calls:
  2722 ;;		_USBDeviceTasks
  2723 ;;		_AsicPushWork
  2724 ;;		_WorkTick
  2725 ;;		_InitializeSystem
  2726 ;;		_ProcessIO
  2727 ;; This function is called by:
  2728 ;;		Startup code after reset
  2729 ;; This function uses a non-reentrant model
  2730 ;;
  2731                           
  2732                           
  2733                           ;psect for function _main
  2734  1BF5                     _main:	
  2735                           
  2736                           ;main.c: 99: InitializeSystem();
  2737                           
  2738                           ;incstack = 0
  2739                           ; Regs used in _main: [allreg]
  2740  1BF5  319C  243D  319B   	fcall	_InitializeSystem
  2741  1BF8                     l855:	
  2742                           ;main.c: 101: while(1)
  2743                           
  2744                           
  2745                           ;main.c: 102: {
  2746                           ;main.c: 119: USBDeviceTasks();
  2747  1BF8  318D  2505  319B   	fcall	_USBDeviceTasks
  2748                           
  2749                           ;main.c: 133: if(TMR0IF)
  2750  1BFB  1D0B               	btfss	11,2	;volatile
  2751  1BFC  2C00               	goto	l6709
  2752                           
  2753                           ;main.c: 134: WorkTick();
  2754  1BFD  3190  2003  319B   	fcall	_WorkTick
  2755  1C00                     l6709:	
  2756                           
  2757                           ;main.c: 136: if(Status.State == 'P'){
  2758  1C00  0023               	movlb	3	; select bank3
  2759  1C01  082C               	movf	_Status^(0+384),w	;volatile
  2760  1C02  3A50               	xorlw	80
  2761  1C03  1D03               	skipz
  2762  1C04  2C08               	goto	l6713
  2763                           
  2764                           ;main.c: 137: AsicPushWork();
  2765  1C05  3194  242C  319B   	fcall	_AsicPushWork
  2766  1C08                     l6713:	
  2767                           
  2768                           ;main.c: 138: }
  2769                           ;main.c: 140: ProcessIO();
  2770  1C08  3192  22B0  319B   	fcall	_ProcessIO
  2771  1C0B  2BF8               	goto	l855
  2772  1C0C                     __end_of_main:	
  2773                           
  2774                           	psect	text1
  2775  12B0                     __ptext1:	
  2776 ;; *************** function _ProcessIO *****************
  2777 ;; Defined at:
  2778 ;;		line 182 in file "main.c"
  2779 ;; Parameters:    Size  Location     Type
  2780 ;;		None
  2781 ;; Auto vars:     Size  Location     Type
  2782 ;;		None
  2783 ;; Return value:  Size  Location     Type
  2784 ;;		None               void
  2785 ;; Registers used:
  2786 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  2787 ;; Tracked objects:
  2788 ;;		On entry : 0/0
  2789 ;;		On exit  : 0/0
  2790 ;;		Unchanged: 0/0
  2791 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2792 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2793 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  2794 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  2795 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0
  2796 ;;Total ram usage:        8 bytes
  2797 ;; Hardware stack levels used:    1
  2798 ;; Hardware stack levels required when called:    8
  2799 ;; This function calls:
  2800 ;;		_USBTransferOnePacket
  2801 ;;		_ProcessCmd
  2802 ;;		___bmul
  2803 ;; This function is called by:
  2804 ;;		_main
  2805 ;; This function uses a non-reentrant model
  2806 ;;
  2807                           
  2808                           
  2809                           ;psect for function _ProcessIO
  2810  12B0                     _ProcessIO:	
  2811                           
  2812                           ;main.c: 184: if((USBDeviceState < CONFIGURED_STATE)||(UCONbits.SUSPND==1)) return;
  2813                           
  2814                           ;incstack = 0
  2815                           ; Regs used in _ProcessIO: [allreg]
  2816  12B0  3020               	movlw	32
  2817  12B1  0021               	movlb	1	; select bank1
  2818  12B2  0263               	subwf	_USBDeviceState^(0+128),w
  2819  12B3  1C03               	skipc
  2820  12B4  0008               	return
  2821  12B5  003D               	movlb	29	; select bank29
  2822  12B6  188E               	btfsc	14,1	;volatile
  2823  12B7  0008               	return
  2824                           
  2825                           ;main.c: 193: if(!(USBGenericOutHandle==0?0:((volatile BDT_ENTRY*)USBGenericOutHandle)->
      +                          STAT.UOWN)) {
  2826  12B8  0022               	movlb	2	; select bank2
  2827  12B9  0869               	movf	_USBGenericOutHandle^(0+256),w
  2828  12BA  1903               	btfsc	3,2
  2829  12BB  2ACA               	goto	l6739
  2830  12BC  0869               	movf	_USBGenericOutHandle^(0+256),w
  2831  12BD  0086               	movwf	6
  2832  12BE  0187               	clrf	7
  2833  12BF  0D01               	rlf	1,w
  2834  12C0  0D01               	rlf	1,w
  2835  12C1  3901               	andlw	1
  2836  12C2  0021               	movlb	1	; select bank1
  2837  12C3  00C5               	movwf	??_ProcessIO^(0+128)
  2838  12C4  01C6               	clrf	(??_ProcessIO^(0+128)+1)
  2839  12C5  0845               	movf	??_ProcessIO^(0+128),w
  2840  12C6  00C9               	movwf	_ProcessIO$2377^(0+128)
  2841  12C7  0846               	movf	(??_ProcessIO+1)^(0+128),w
  2842  12C8  00CA               	movwf	(_ProcessIO$2377+1)^(0+128)
  2843  12C9  2ACD               	goto	l6741
  2844  12CA                     l6739:	
  2845  12CA  0021               	movlb	1	; select bank1
  2846  12CB  01C9               	clrf	_ProcessIO$2377^(0+128)
  2847  12CC  01CA               	clrf	(_ProcessIO$2377+1)^(0+128)
  2848  12CD                     l6741:	
  2849  12CD  084A               	movf	(_ProcessIO$2377+1)^(0+128),w
  2850  12CE  0449               	iorwf	_ProcessIO$2377^(0+128),w
  2851  12CF  1D03               	skipz
  2852  12D0  2AE8               	goto	l6747
  2853                           
  2854                           ;main.c: 197: ProcessCmd(OUTPacket);
  2855  12D1  30A0               	movlw	160
  2856  12D2  3184  24E1  3192   	fcall	_ProcessCmd
  2857                           
  2858                           ;main.c: 198: USBGenericOutHandle = USBTransferOnePacket(1,0,(BYTE*)&OUTPacket,64);
  2859  12D5  0021               	movlb	1	; select bank1
  2860  12D6  01A0               	clrf	?_USBTransferOnePacket^(0+128)
  2861  12D7  30A0               	movlw	160
  2862  12D8  00C5               	movwf	??_ProcessIO^(0+128)
  2863  12D9  0845               	movf	??_ProcessIO^(0+128),w
  2864  12DA  00A1               	movwf	(?_USBTransferOnePacket+1)^(0+128)
  2865  12DB  3040               	movlw	64
  2866  12DC  00C6               	movwf	(??_ProcessIO+1)^(0+128)
  2867  12DD  0846               	movf	(??_ProcessIO+1)^(0+128),w
  2868  12DE  00A2               	movwf	(?_USBTransferOnePacket^(0+128)+2)
  2869  12DF  3001               	movlw	1
  2870  12E0  319F  2708  3192   	fcall	_USBTransferOnePacket
  2871  12E3  0021               	movlb	1	; select bank1
  2872  12E4  00C7               	movwf	(??_ProcessIO+2)^(0+128)
  2873  12E5  0847               	movf	(??_ProcessIO+2)^(0+128),w
  2874  12E6  0022               	movlb	2	; select bank2
  2875  12E7  00E9               	movwf	_USBGenericOutHandle^(0+256)
  2876  12E8                     l6747:	
  2877                           
  2878                           ;main.c: 199: }
  2879                           ;main.c: 201: if(WQI != WQX && !(USBGenericInHandle==0?0:((volatile BDT_ENTRY*)USBGeneri
      +                          cInHandle)->STAT.UOWN)) {
  2880  12E8  0021               	movlb	1	; select bank1
  2881  12E9  086F               	movf	_WQI^(0+128),w
  2882  12EA  0020               	movlb	0	; select bank0
  2883  12EB  066E               	xorwf	_WQX,w
  2884  12EC  1903               	skipnz
  2885  12ED  0008               	return
  2886  12EE  0022               	movlb	2	; select bank2
  2887  12EF  0868               	movf	_USBGenericInHandle^(0+256),w
  2888  12F0  1903               	btfsc	3,2
  2889  12F1  2B00               	goto	l6753
  2890  12F2  0868               	movf	_USBGenericInHandle^(0+256),w
  2891  12F3  0086               	movwf	6
  2892  12F4  0187               	clrf	7
  2893  12F5  0D01               	rlf	1,w
  2894  12F6  0D01               	rlf	1,w
  2895  12F7  3901               	andlw	1
  2896  12F8  0021               	movlb	1	; select bank1
  2897  12F9  00C5               	movwf	??_ProcessIO^(0+128)
  2898  12FA  01C6               	clrf	(??_ProcessIO^(0+128)+1)
  2899  12FB  0845               	movf	??_ProcessIO^(0+128),w
  2900  12FC  00CB               	movwf	_ProcessIO$2411^(0+128)
  2901  12FD  0846               	movf	(??_ProcessIO+1)^(0+128),w
  2902  12FE  00CC               	movwf	(_ProcessIO$2411+1)^(0+128)
  2903  12FF  2B03               	goto	l6755
  2904  1300                     l6753:	
  2905  1300  0021               	movlb	1	; select bank1
  2906  1301  01CB               	clrf	_ProcessIO$2411^(0+128)
  2907  1302  01CC               	clrf	(_ProcessIO$2411+1)^(0+128)
  2908  1303                     l6755:	
  2909  1303  084C               	movf	(_ProcessIO$2411+1)^(0+128),w
  2910  1304  044B               	iorwf	_ProcessIO$2411^(0+128),w
  2911  1305  1D03               	skipz
  2912  1306  0008               	return
  2913                           
  2914                           ;main.c: 202: USBGenericInHandle = USBTransferOnePacket(1,1,(BYTE*)&INPacket[WQX*15],15);
  2915  1307  01A0               	clrf	?_USBTransferOnePacket^(0+128)
  2916  1308  0AA0               	incf	?_USBTransferOnePacket^(0+128),f
  2917  1309  300F               	movlw	15
  2918  130A  00C5               	movwf	??_ProcessIO^(0+128)
  2919  130B  0845               	movf	??_ProcessIO^(0+128),w
  2920  130C  0020               	movlb	0	; select bank0
  2921  130D  00DE               	movwf	?___bmul
  2922  130E  086E               	movf	_WQX,w
  2923  130F  319B  2391  3192   	fcall	___bmul
  2924  1312  3E20               	addlw	32
  2925  1313  0021               	movlb	1	; select bank1
  2926  1314  00C6               	movwf	(??_ProcessIO+1)^(0+128)
  2927  1315  0846               	movf	(??_ProcessIO+1)^(0+128),w
  2928  1316  00A1               	movwf	(?_USBTransferOnePacket+1)^(0+128)
  2929  1317  300F               	movlw	15
  2930  1318  00C7               	movwf	(??_ProcessIO+2)^(0+128)
  2931  1319  0847               	movf	(??_ProcessIO+2)^(0+128),w
  2932  131A  00A2               	movwf	(?_USBTransferOnePacket^(0+128)+2)
  2933  131B  3001               	movlw	1
  2934  131C  319F  2708         	fcall	_USBTransferOnePacket
  2935  131E  0021               	movlb	1	; select bank1
  2936  131F  00C8               	movwf	(??_ProcessIO+3)^(0+128)
  2937  1320  0848               	movf	(??_ProcessIO+3)^(0+128),w
  2938  1321  0022               	movlb	2	; select bank2
  2939  1322  00E8               	movwf	_USBGenericInHandle^(0+256)
  2940                           
  2941                           ;main.c: 203: WQX = (WQX+1) & 3;
  2942  1323  0020               	movlb	0	; select bank0
  2943  1324  0A6E               	incf	_WQX,w
  2944  1325  3903               	andlw	3
  2945  1326  0021               	movlb	1	; select bank1
  2946  1327  00C5               	movwf	??_ProcessIO^(0+128)
  2947  1328  0845               	movf	??_ProcessIO^(0+128),w
  2948  1329  0020               	movlb	0	; select bank0
  2949  132A  00EE               	movwf	_WQX
  2950  132B  0008               	return
  2951  132C                     __end_of_ProcessIO:	
  2952                           
  2953                           	psect	text2
  2954  04E1                     __ptext2:	
  2955 ;; *************** function _ProcessCmd *****************
  2956 ;; Defined at:
  2957 ;;		line 45 in file "klondike.c"
  2958 ;; Parameters:    Size  Location     Type
  2959 ;;  cmd             1    wreg     PTR unsigned char 
  2960 ;;		 -> OUTPacket(64), 
  2961 ;; Auto vars:     Size  Location     Type
  2962 ;;  cmd             1   36[BANK1 ] PTR unsigned char 
  2963 ;;		 -> OUTPacket(64), 
  2964 ;; Return value:  Size  Location     Type
  2965 ;;		None               void
  2966 ;; Registers used:
  2967 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  2968 ;; Tracked objects:
  2969 ;;		On entry : 0/0
  2970 ;;		On exit  : 0/0
  2971 ;;		Unchanged: 0/0
  2972 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2973 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2974 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  2975 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  2976 ;;      Totals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
  2977 ;;Total ram usage:        7 bytes
  2978 ;; Hardware stack levels used:    1
  2979 ;; Hardware stack levels required when called:    7
  2980 ;; This function calls:
  2981 ;;		_AsicPushWork
  2982 ;;		_SendCmdReply
  2983 ;;		___lwdiv
  2984 ;;		___wmul
  2985 ;; This function is called by:
  2986 ;;		_ProcessIO
  2987 ;; This function uses a non-reentrant model
  2988 ;;
  2989                           
  2990                           
  2991                           ;psect for function _ProcessCmd
  2992  04E1                     _ProcessCmd:	
  2993                           
  2994                           ;incstack = 0
  2995                           ; Regs used in _ProcessCmd: [allreg]
  2996                           ;ProcessCmd@cmd stored from wreg
  2997  04E1  0021               	movlb	1	; select bank1
  2998  04E2  00C4               	movwf	ProcessCmd@cmd^(0+128)
  2999                           
  3000                           ;klondike.c: 48: switch(cmd[0]) {
  3001  04E3  2E35               	goto	l5373
  3002  04E4                     l5309:	
  3003                           ;klondike.c: 49: case 'W':
  3004                           
  3005                           
  3006                           ;klondike.c: 50: if( Status.WorkQC < 4-1 ) {
  3007  04E4  3003               	movlw	3
  3008  04E5  0023               	movlb	3	; select bank3
  3009  04E6  022F               	subwf	(_Status^(0+384)+3),w	;volatile
  3010  04E7  1803               	skipnc
  3011  04E8  2E21               	goto	L4
  3012                           
  3013                           ;klondike.c: 51: WorkQue[ (WorkNow + Status.WorkQC++) & 4-1 ] = *(WORKTASK *)(cmd+2);
  3014  04E9  0021               	movlb	1	; select bank1
  3015  04EA  0844               	movf	ProcessCmd@cmd^(0+128),w
  3016  04EB  3E02               	addlw	2
  3017  04EC  0086               	movwf	6
  3018  04ED  3002               	movlw	2	; select bank4/5
  3019  04EE  0087               	movwf	7
  3020  04EF  0864               	movf	_WorkNow^(0+128),w
  3021  04F0  0023               	movlb	3	; select bank3
  3022  04F1  072F               	addwf	(_Status^(0+384)+3),w	;volatile
  3023  04F2  0021               	movlb	1	; select bank1
  3024  04F3  00BE               	movwf	??_ProcessCmd^(0+128)
  3025  04F4  01BF               	clrf	(??_ProcessCmd^(0+128)+1)
  3026  04F5  0DBF               	rlf	(??_ProcessCmd+1)^(0+128),f
  3027  04F6  3003               	movlw	3
  3028  04F7  053E               	andwf	??_ProcessCmd^(0+128),w
  3029  04F8  0020               	movlb	0	; select bank0
  3030  04F9  00DE               	movwf	?___wmul
  3031  04FA  3000               	movlw	0
  3032  04FB  0021               	movlb	1	; select bank1
  3033  04FC  053F               	andwf	(??_ProcessCmd+1)^(0+128),w
  3034  04FD  0020               	movlb	0	; select bank0
  3035  04FE  00DF               	movwf	?___wmul+1
  3036  04FF  302D               	movlw	45
  3037  0500  00E0               	movwf	?___wmul+2
  3038  0501  3000               	movlw	0
  3039  0502  00E1               	movwf	?___wmul+3
  3040  0503  319D  2539  3184   	fcall	___wmul
  3041  0506  303C               	movlw	60
  3042  0507  0021               	movlb	1	; select bank1
  3043  0508  00C0               	movwf	(??_ProcessCmd+2)^(0+128)
  3044  0509  3023               	movlw	35
  3045  050A  00C1               	movwf	((??_ProcessCmd+2)^(0+128)+1)
  3046  050B  0020               	movlb	0	; select bank0
  3047  050C  085E               	movf	?___wmul,w
  3048  050D  0021               	movlb	1	; select bank1
  3049  050E  0740               	addwf	(??_ProcessCmd+2)^(0+128),w
  3050  050F  0084               	movwf	4
  3051  0510  0020               	movlb	0	; select bank0
  3052  0511  085F               	movf	?___wmul+1,w
  3053  0512  0021               	movlb	1	; select bank1
  3054  0513  3D41               	addwfc	(??_ProcessCmd+3)^(0+128),w
  3055  0514  0085               	movwf	5
  3056  0515  302D               	movlw	45
  3057  0516  00FF               	movwf	127
  3058  0517                     u5100:	
  3059  0517  0016               	moviw fsr1++
  3060  0518  001A               	movwi fsr0++
  3061  0519  0BFF               	decfsz	127,f
  3062  051A  2D17               	goto	u5100
  3063  051B  3001               	movlw	1
  3064  051C  00BE               	movwf	??_ProcessCmd^(0+128)
  3065  051D  083E               	movf	??_ProcessCmd^(0+128),w
  3066  051E  0023               	movlb	3	; select bank3
  3067  051F  07AF               	addwf	(_Status^(0+384)+3),f	;volatile
  3068                           
  3069                           ;klondike.c: 52: if(Status.State == 'R') {
  3070  0520  082C               	movf	_Status^(0+384),w	;volatile
  3071  0521  3A52               	xorlw	82
  3072  0522  1D03               	skipz
  3073  0523  2E21               	goto	L4
  3074                           
  3075                           ;klondike.c: 53: AsicPushWork();
  3076  0524  3194  242C  3184   	fcall	_AsicPushWork
  3077  0527  2E21               	goto	L4
  3078  0528                     l5321:	
  3079                           ;klondike.c: 59: case 'A':
  3080                           
  3081                           ;klondike.c: 58: break;
  3082                           
  3083                           ;klondike.c: 57: Status.Noise = Status.ErrorCount = 0;
  3084                           
  3085                           ;klondike.c: 54: }
  3086                           ;klondike.c: 55: }
  3087                           ;klondike.c: 56: SendCmdReply(cmd, (char *)&Status, sizeof(Status));
  3088                           
  3089                           
  3090                           ;klondike.c: 60: Status.WorkQC = WorkNow = 0;
  3091  0528  0021               	movlb	1	; select bank1
  3092  0529  01E4               	clrf	_WorkNow^(0+128)
  3093  052A  0023               	movlb	3	; select bank3
  3094  052B  01AF               	clrf	(_Status^(0+384)+3)	;volatile
  3095                           
  3096                           ;klondike.c: 61: Status.State = 'R';
  3097  052C  3052               	movlw	82
  3098  052D  0021               	movlb	1	; select bank1
  3099  052E  2E1D               	goto	L3
  3100  052F                     l5329:	
  3101                           ;klondike.c: 65: case 'I':
  3102                           
  3103                           ;klondike.c: 64: break;
  3104                           
  3105                           ;klondike.c: 63: Status.Noise = Status.ErrorCount = 0;
  3106                           
  3107                           ;klondike.c: 62: SendCmdReply(cmd, (char *)&Status, sizeof(Status));
  3108                           
  3109                           
  3110                           ;klondike.c: 66: SendCmdReply(cmd, (char *)&ID, sizeof(ID));
  3111  052F  0021               	movlb	1	; select bank1
  3112  0530  0844               	movf	ProcessCmd@cmd^(0+128),w
  3113  0531  00A2               	movwf	?_SendCmdReply^(0+128)
  3114  0532  3002               	movlw	2
  3115  0533  00A3               	movwf	(?_SendCmdReply+1)^(0+128)
  3116  0534  309F               	movlw	low (_ID| (0+32768))
  3117  0535  00A4               	movwf	(?_SendCmdReply+2)^(0+128)
  3118  0536  3088               	movlw	high (_ID| (0+32768))
  3119  0537  00A5               	movwf	(?_SendCmdReply+3)^(0+128)
  3120  0538  300C               	movlw	12
  3121  0539  00BE               	movwf	??_ProcessCmd^(0+128)
  3122  053A  083E               	movf	??_ProcessCmd^(0+128),w
  3123  053B  00A6               	movwf	(?_SendCmdReply^(0+128)+4)
  3124  053C  3197  2769  3184   	fcall	_SendCmdReply
  3125                           
  3126                           ;klondike.c: 67: break;
  3127  053F  2E4E               	goto	l695
  3128  0540                     l5331:	
  3129                           ;klondike.c: 68: case 'S':
  3130                           
  3131  0540  2E21               	goto	L4
  3132  0541                     l5335:	
  3133                           ;klondike.c: 72: case 'C':
  3134                           
  3135                           ;klondike.c: 71: break;
  3136                           
  3137                           ;klondike.c: 70: Status.Noise = Status.ErrorCount = 0;
  3138                           
  3139                           ;klondike.c: 69: SendCmdReply(cmd, (char *)&Status, sizeof(Status));
  3140                           
  3141                           
  3142                           ;klondike.c: 73: if( *(WORD *)&cmd[2] != 0 ) {
  3143  0541  0021               	movlb	1	; select bank1
  3144  0542  0844               	movf	ProcessCmd@cmd^(0+128),w
  3145  0543  3E02               	addlw	2
  3146  0544  0086               	movwf	6
  3147  0545  3002               	movlw	2	; select bank4/5
  3148  0546  0087               	movwf	7
  3149  0547  0016               	moviw fsr1++
  3150  0548  0401               	iorwf	1,w
  3151  0549  1903               	skipnz
  3152  054A  2DE6               	goto	l5357
  3153                           
  3154                           ;klondike.c: 74: Cfg = *(WORKCFG *)(cmd+2);
  3155  054B  0844               	movf	ProcessCmd@cmd^(0+128),w
  3156  054C  3E02               	addlw	2
  3157  054D  0086               	movwf	6
  3158  054E  3002               	movlw	2	; select bank4/5
  3159  054F  0087               	movwf	7
  3160  0550  30C1               	movlw	low _Cfg
  3161  0551  0084               	movwf	4
  3162  0552  3001               	movlw	high _Cfg
  3163  0553  0085               	movwf	5
  3164  0554  3006               	movlw	6
  3165  0555  00FF               	movwf	127
  3166  0556                     u5130:	
  3167  0556  0016               	moviw fsr1++
  3168  0557  001A               	movwi fsr0++
  3169  0558  0BFF               	decfsz	127,f
  3170  0559  2D56               	goto	u5130
  3171                           
  3172                           ;klondike.c: 75: if(Cfg.HashClock < 128)
  3173  055A  3000               	movlw	0
  3174  055B  0023               	movlb	3	; select bank3
  3175  055C  0242               	subwf	(_Cfg+1)^(0+384),w
  3176  055D  3080               	movlw	128
  3177  055E  1903               	skipnz
  3178  055F  0241               	subwf	_Cfg^(0+384),w
  3179  0560  1803               	skipnc
  3180  0561  2D66               	goto	l701
  3181                           
  3182                           ;klondike.c: 76: Cfg.HashClock = 128;
  3183  0562  3080               	movlw	128
  3184  0563  00C1               	movwf	_Cfg^(0+384)
  3185  0564  3000               	movlw	0
  3186  0565  00C2               	movwf	(_Cfg^(0+384)+1)
  3187  0566                     l701:	
  3188                           
  3189                           ;klondike.c: 77: if(Cfg.HashClock <= 250 && Cfg.HashClock >= 450/2)
  3190  0566  3000               	movlw	0
  3191  0567  0242               	subwf	(_Cfg+1)^(0+384),w
  3192  0568  30FB               	movlw	251
  3193  0569  1903               	skipnz
  3194  056A  0241               	subwf	_Cfg^(0+384),w
  3195  056B  1803               	skipnc
  3196  056C  2D78               	goto	l702
  3197  056D  3000               	movlw	0
  3198  056E  0242               	subwf	(_Cfg+1)^(0+384),w
  3199  056F  30E1               	movlw	225
  3200  0570  1903               	skipnz
  3201  0571  0241               	subwf	_Cfg^(0+384),w
  3202  0572  1C03               	skipc
  3203  0573  2D78               	goto	l702
  3204                           
  3205                           ;klondike.c: 78: Cfg.HashClock = 450/2-1;
  3206  0574  30E0               	movlw	224
  3207  0575  00C1               	movwf	_Cfg^(0+384)
  3208  0576  3000               	movlw	0
  3209  0577  00C2               	movwf	(_Cfg^(0+384)+1)
  3210  0578                     l702:	
  3211                           
  3212                           ;klondike.c: 79: if(Cfg.HashClock >= 450)
  3213  0578  3001               	movlw	1
  3214  0579  0242               	subwf	(_Cfg+1)^(0+384),w
  3215  057A  30C2               	movlw	194
  3216  057B  1903               	skipnz
  3217  057C  0241               	subwf	_Cfg^(0+384),w
  3218  057D  1C03               	skipc
  3219  057E  2D83               	goto	l703
  3220                           
  3221                           ;klondike.c: 80: Cfg.HashClock = 450-1;
  3222  057F  30C1               	movlw	193
  3223  0580  00C1               	movwf	_Cfg^(0+384)
  3224  0581  3001               	movlw	1
  3225  0582  00C2               	movwf	(_Cfg^(0+384)+1)
  3226  0583                     l703:	
  3227                           
  3228                           ;klondike.c: 81: if(Cfg.HashClock <= 250)
  3229  0583  3000               	movlw	0
  3230  0584  0242               	subwf	(_Cfg+1)^(0+384),w
  3231  0585  30FB               	movlw	251
  3232  0586  1903               	skipnz
  3233  0587  0241               	subwf	_Cfg^(0+384),w
  3234  0588  1803               	skipnc
  3235  0589  2DA3               	goto	l5351
  3236                           
  3237                           ;klondike.c: 82: ClockCfg[0] = (((DWORD)Cfg.HashClock*2) << 18) | 0x00030017;
  3238  058A  0841               	movf	_Cfg^(0+384),w
  3239  058B  0021               	movlb	1	; select bank1
  3240  058C  00BE               	movwf	??_ProcessCmd^(0+128)
  3241  058D  0023               	movlb	3	; select bank3
  3242  058E  0842               	movf	(_Cfg+1)^(0+384),w
  3243  058F  0021               	movlb	1	; select bank1
  3244  0590  00BF               	movwf	(??_ProcessCmd^(0+128)+1)
  3245  0591  01C0               	clrf	(??_ProcessCmd^(0+128)+2)
  3246  0592  01C1               	clrf	(??_ProcessCmd^(0+128)+3)
  3247  0593  3001               	movlw	1
  3248  0594                     u5195:	
  3249  0594  35BE               	lslf	??_ProcessCmd^(0+128),f
  3250  0595  0DBF               	rlf	(??_ProcessCmd^(0+128)+1),f
  3251  0596  0DC0               	rlf	(??_ProcessCmd^(0+128)+2),f
  3252  0597  0DC1               	rlf	(??_ProcessCmd^(0+128)+3),f
  3253  0598  0B89               	decfsz	9,f
  3254  0599  2D94               	goto	u5195
  3255  059A  3012               	movlw	18
  3256  059B                     u5205:	
  3257  059B  35BE               	lslf	??_ProcessCmd^(0+128),f
  3258  059C  0DBF               	rlf	(??_ProcessCmd^(0+128)+1),f
  3259  059D  0DC0               	rlf	(??_ProcessCmd^(0+128)+2),f
  3260  059E  0DC1               	rlf	(??_ProcessCmd^(0+128)+3),f
  3261  059F  0B89               	decfsz	9,f
  3262  05A0  2D9B               	goto	u5205
  3263  05A1  3017               	movlw	23
  3264  05A2  2DB4               	goto	L1
  3265  05A3                     l5351:	
  3266                           
  3267                           ;klondike.c: 83: else
  3268                           ;klondike.c: 84: ClockCfg[0] = ((DWORD)Cfg.HashClock << 18) | 0x00030007;
  3269  05A3  0841               	movf	_Cfg^(0+384),w
  3270  05A4  0021               	movlb	1	; select bank1
  3271  05A5  00BE               	movwf	??_ProcessCmd^(0+128)
  3272  05A6  0023               	movlb	3	; select bank3
  3273  05A7  0842               	movf	(_Cfg+1)^(0+384),w
  3274  05A8  0021               	movlb	1	; select bank1
  3275  05A9  00BF               	movwf	(??_ProcessCmd^(0+128)+1)
  3276  05AA  01C0               	clrf	(??_ProcessCmd^(0+128)+2)
  3277  05AB  01C1               	clrf	(??_ProcessCmd^(0+128)+3)
  3278  05AC  3012               	movlw	18
  3279  05AD                     u5215:	
  3280  05AD  35BE               	lslf	??_ProcessCmd^(0+128),f
  3281  05AE  0DBF               	rlf	(??_ProcessCmd^(0+128)+1),f
  3282  05AF  0DC0               	rlf	(??_ProcessCmd^(0+128)+2),f
  3283  05B0  0DC1               	rlf	(??_ProcessCmd^(0+128)+3),f
  3284  05B1  0B89               	decfsz	9,f
  3285  05B2  2DAD               	goto	u5215
  3286  05B3  3007               	movlw	7
  3287  05B4                     L1:	
  3288  05B4  043E               	iorwf	??_ProcessCmd^(0+128),w
  3289  05B5  0023               	movlb	3	; select bank3
  3290  05B6  00B9               	movwf	_ClockCfg^(0+384)
  3291  05B7  3000               	movlw	0
  3292  05B8  0021               	movlb	1	; select bank1
  3293  05B9  043F               	iorwf	(??_ProcessCmd+1)^(0+128),w
  3294  05BA  0023               	movlb	3	; select bank3
  3295  05BB  00BA               	movwf	(_ClockCfg+1)^(0+384)
  3296  05BC  3003               	movlw	3
  3297  05BD  0021               	movlb	1	; select bank1
  3298  05BE  0440               	iorwf	(??_ProcessCmd+2)^(0+128),w
  3299  05BF  0023               	movlb	3	; select bank3
  3300  05C0  00BB               	movwf	(_ClockCfg+2)^(0+384)
  3301  05C1  3000               	movlw	0
  3302  05C2  0021               	movlb	1	; select bank1
  3303  05C3  0441               	iorwf	(??_ProcessCmd+3)^(0+128),w
  3304  05C4  0023               	movlb	3	; select bank3
  3305  05C5  00BC               	movwf	(_ClockCfg+3)^(0+384)
  3306                           
  3307                           ;klondike.c: 85: HashTime = 256 - ((WORD)12285/Cfg.HashClock);
  3308  05C6  0842               	movf	(_Cfg+1)^(0+384),w
  3309  05C7  0020               	movlb	0	; select bank0
  3310  05C8  01DF               	clrf	?___lwdiv+1
  3311  05C9  07DF               	addwf	?___lwdiv+1,f
  3312  05CA  0023               	movlb	3	; select bank3
  3313  05CB  0841               	movf	_Cfg^(0+384),w
  3314  05CC  0020               	movlb	0	; select bank0
  3315  05CD  01DE               	clrf	?___lwdiv
  3316  05CE  07DE               	addwf	?___lwdiv,f
  3317  05CF  30FD               	movlw	253
  3318  05D0  00E0               	movwf	?___lwdiv+2
  3319  05D1  302F               	movlw	47
  3320  05D2  00E1               	movwf	?___lwdiv+3
  3321  05D3  319E  2676  3184   	fcall	___lwdiv
  3322  05D6  0020               	movlb	0	; select bank0
  3323  05D7  085E               	movf	?___lwdiv,w
  3324  05D8  3AFF               	xorlw	255
  3325  05D9  3E01               	addlw	1
  3326  05DA  0021               	movlb	1	; select bank1
  3327  05DB  00BE               	movwf	??_ProcessCmd^(0+128)
  3328  05DC  083E               	movf	??_ProcessCmd^(0+128),w
  3329  05DD  0020               	movlb	0	; select bank0
  3330  05DE  00EF               	movwf	_HashTime
  3331                           
  3332                           ;klondike.c: 87: TempTarget = Cfg.TempTarget;
  3333  05DF  0023               	movlb	3	; select bank3
  3334  05E0  0843               	movf	(_Cfg^(0+384)+2),w
  3335  05E1  0021               	movlb	1	; select bank1
  3336  05E2  00BE               	movwf	??_ProcessCmd^(0+128)
  3337  05E3  083E               	movf	??_ProcessCmd^(0+128),w
  3338  05E4  0023               	movlb	3	; select bank3
  3339  05E5  00E4               	movwf	_TempTarget^(0+384)
  3340  05E6                     l5357:	
  3341                           
  3342                           ;klondike.c: 88: }
  3343                           ;klondike.c: 89: SendCmdReply(cmd, (char *)&Cfg, sizeof(Cfg));
  3344  05E6  0021               	movlb	1	; select bank1
  3345  05E7  0844               	movf	ProcessCmd@cmd^(0+128),w
  3346  05E8  00A2               	movwf	?_SendCmdReply^(0+128)
  3347  05E9  3002               	movlw	2
  3348  05EA  00A3               	movwf	(?_SendCmdReply+1)^(0+128)
  3349  05EB  30C1               	movlw	low _Cfg
  3350  05EC  00A4               	movwf	(?_SendCmdReply+2)^(0+128)
  3351  05ED  3001               	movlw	high _Cfg
  3352  05EE  00A5               	movwf	(?_SendCmdReply+3)^(0+128)
  3353  05EF  3006               	movlw	6
  3354  05F0  00BE               	movwf	??_ProcessCmd^(0+128)
  3355  05F1  083E               	movf	??_ProcessCmd^(0+128),w
  3356  05F2  00A6               	movwf	(?_SendCmdReply^(0+128)+4)
  3357  05F3  3197  2769  3184   	fcall	_SendCmdReply
  3358                           
  3359                           ;klondike.c: 90: break;
  3360  05F6  2E4E               	goto	l695
  3361  05F7                     l5359:	
  3362                           ;klondike.c: 91: case 'E':
  3363                           
  3364                           
  3365                           ;klondike.c: 92: LATAbits.LATA4 = (cmd[2] == '1');
  3366  05F7  0021               	movlb	1	; select bank1
  3367  05F8  0844               	movf	ProcessCmd@cmd^(0+128),w
  3368  05F9  3E02               	addlw	2
  3369  05FA  0086               	movwf	6
  3370  05FB  3002               	movlw	2	; select bank4/5
  3371  05FC  0087               	movwf	7
  3372  05FD  0801               	movf	1,w
  3373  05FE  3A31               	xorlw	49
  3374  05FF  3000               	movlw	0
  3375  0600  1903               	skipnz
  3376  0601  3001               	movlw	1
  3377  0602  00BE               	movwf	??_ProcessCmd^(0+128)
  3378  0603  0EBE               	swapf	??_ProcessCmd^(0+128),f
  3379  0604  0022               	movlb	2	; select bank2
  3380  0605  080C               	movf	12,w	;volatile
  3381  0606  0021               	movlb	1	; select bank1
  3382  0607  063E               	xorwf	??_ProcessCmd^(0+128),w
  3383  0608  39EF               	andlw	-17
  3384  0609  063E               	xorwf	??_ProcessCmd^(0+128),w
  3385  060A  0022               	movlb	2	; select bank2
  3386  060B  008C               	movwf	12	;volatile
  3387                           
  3388                           ;klondike.c: 93: Status.State = (cmd[2] == '1') ? 'R' : 'D';
  3389  060C  0021               	movlb	1	; select bank1
  3390  060D  0844               	movf	ProcessCmd@cmd^(0+128),w
  3391  060E  3E02               	addlw	2
  3392  060F  0086               	movwf	6
  3393  0610  3002               	movlw	2	; select bank4/5
  3394  0611  0087               	movwf	7
  3395  0612  0801               	movf	1,w
  3396  0613  3A31               	xorlw	49
  3397  0614  1903               	skipnz
  3398  0615  2E18               	goto	l5365
  3399  0616  3044               	movlw	68
  3400  0617  2E19               	goto	L2
  3401  0618                     l5365:	
  3402  0618  3052               	movlw	82
  3403  0619                     L2:	
  3404  0619  00C2               	movwf	_ProcessCmd$2059^(0+128)
  3405  061A  3000               	movlw	0
  3406  061B  00C3               	movwf	(_ProcessCmd$2059^(0+128)+1)
  3407  061C  0842               	movf	_ProcessCmd$2059^(0+128),w
  3408  061D                     L3:	
  3409  061D  00BE               	movwf	??_ProcessCmd^(0+128)
  3410  061E  083E               	movf	??_ProcessCmd^(0+128),w
  3411  061F  0023               	movlb	3	; select bank3
  3412  0620  00AC               	movwf	_Status^(0+384)	;volatile
  3413  0621                     L4:	
  3414                           
  3415                           ;klondike.c: 94: SendCmdReply(cmd, (char *)&Status, sizeof(Status));
  3416  0621  0021               	movlb	1	; select bank1
  3417  0622  0844               	movf	ProcessCmd@cmd^(0+128),w
  3418  0623  00A2               	movwf	?_SendCmdReply^(0+128)
  3419  0624  3002               	movlw	2
  3420  0625  00A3               	movwf	(?_SendCmdReply+1)^(0+128)
  3421  0626  30AC               	movlw	low _Status
  3422  0627  00A4               	movwf	(?_SendCmdReply+2)^(0+128)
  3423  0628  3001               	movlw	high _Status
  3424  0629  00A5               	movwf	(?_SendCmdReply+3)^(0+128)
  3425  062A  300D               	movlw	13
  3426  062B  00BE               	movwf	??_ProcessCmd^(0+128)
  3427  062C  083E               	movf	??_ProcessCmd^(0+128),w
  3428  062D  00A6               	movwf	(?_SendCmdReply^(0+128)+4)
  3429  062E  3197  2769  3184   	fcall	_SendCmdReply
  3430                           
  3431                           ;klondike.c: 95: Status.Noise = Status.ErrorCount = 0;
  3432  0631  0023               	movlb	3	; select bank3
  3433  0632  01B3               	clrf	(_Status^(0+384)+7)	;volatile
  3434  0633  01B8               	clrf	(_Status^(0+384)+12)	;volatile
  3435                           
  3436                           ;klondike.c: 105: }
  3437                           
  3438                           ;klondike.c: 104: break;
  3439                           
  3440                           ;klondike.c: 103: default:
  3441                           
  3442                           ;klondike.c: 96: break;
  3443  0634  2E4E               	goto	l695
  3444  0635                     l5373:	
  3445  0635  0021               	movlb	1	; select bank1
  3446  0636  0844               	movf	ProcessCmd@cmd^(0+128),w
  3447  0637  0086               	movwf	6
  3448  0638  3002               	movlw	2	; select bank4/5
  3449  0639  0087               	movwf	7
  3450  063A  0801               	movf	1,w
  3451                           
  3452                           ; Switch size 1, requested type "space"
  3453                           ; Number of cases is 6, Range of values is 65 to 87
  3454                           ; switch strategies available:
  3455                           ; Name         Instructions Cycles
  3456                           ; simple_byte           19    10 (average)
  3457                           ; direct_byte           55     9 (fixed)
  3458                           ; jumptable            263     9 (fixed)
  3459                           ;	Chosen strategy is simple_byte
  3460  063B  3A41               	xorlw	65	; case 65
  3461  063C  1903               	skipnz
  3462  063D  2D28               	goto	l5321
  3463  063E  3A02               	xorlw	2	; case 67
  3464  063F  1903               	skipnz
  3465  0640  2D41               	goto	l5335
  3466  0641  3A06               	xorlw	6	; case 69
  3467  0642  1903               	skipnz
  3468  0643  2DF7               	goto	l5359
  3469  0644  3A0C               	xorlw	12	; case 73
  3470  0645  1903               	skipnz
  3471  0646  2D2F               	goto	l5329
  3472  0647  3A1A               	xorlw	26	; case 83
  3473  0648  1903               	skipnz
  3474  0649  2D40               	goto	l5331
  3475  064A  3A04               	xorlw	4	; case 87
  3476  064B  1903               	skipnz
  3477  064C  2CE4               	goto	l5309
  3478  064D  2E4E               	goto	l695
  3479  064E                     l695:	
  3480                           
  3481                           ;klondike.c: 106: LATAbits.LATA5 = 1;;
  3482  064E  0022               	movlb	2	; select bank2
  3483  064F  168C               	bsf	12,5	;volatile
  3484  0650  0008               	return
  3485  0651                     __end_of_ProcessCmd:	
  3486                           
  3487                           	psect	text3
  3488  1E76                     __ptext3:	
  3489 ;; *************** function ___lwdiv *****************
  3490 ;; Defined at:
  3491 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.20\sources\pic\lwdiv.c"
  3492 ;; Parameters:    Size  Location     Type
  3493 ;;  divisor         2   14[BANK0 ] unsigned int 
  3494 ;;  dividend        2   16[BANK0 ] unsigned int 
  3495 ;; Auto vars:     Size  Location     Type
  3496 ;;  quotient        2    1[BANK1 ] unsigned int 
  3497 ;;  counter         1    3[BANK1 ] unsigned char 
  3498 ;; Return value:  Size  Location     Type
  3499 ;;                  2   14[BANK0 ] unsigned int 
  3500 ;; Registers used:
  3501 ;;		wreg, status,2, status,0
  3502 ;; Tracked objects:
  3503 ;;		On entry : 0/0
  3504 ;;		On exit  : 0/0
  3505 ;;		Unchanged: 0/0
  3506 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3507 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3508 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  3509 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  3510 ;;      Totals:         0       4       4       0       0       0       0       0       0       0       0       0       
      +0       0
  3511 ;;Total ram usage:        8 bytes
  3512 ;; Hardware stack levels used:    1
  3513 ;; Hardware stack levels required when called:    4
  3514 ;; This function calls:
  3515 ;;		Nothing
  3516 ;; This function is called by:
  3517 ;;		_ProcessCmd
  3518 ;; This function uses a non-reentrant model
  3519 ;;
  3520                           
  3521                           
  3522                           ;psect for function ___lwdiv
  3523  1E76                     ___lwdiv:	
  3524                           
  3525                           ;incstack = 0
  3526                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  3527  1E76  0021               	movlb	1	; select bank1
  3528  1E77  01A1               	clrf	___lwdiv@quotient^(0+128)
  3529  1E78  01A2               	clrf	(___lwdiv@quotient+1)^(0+128)
  3530  1E79  0020               	movlb	0	; select bank0
  3531  1E7A  085F               	movf	___lwdiv@divisor+1,w
  3532  1E7B  045E               	iorwf	___lwdiv@divisor,w
  3533  1E7C  1903               	skipnz
  3534  1E7D  2EB0               	goto	l5967
  3535  1E7E  0021               	movlb	1	; select bank1
  3536  1E7F  01A3               	clrf	___lwdiv@counter^(0+128)
  3537  1E80  0AA3               	incf	___lwdiv@counter^(0+128),f
  3538  1E81                     l5955:	
  3539  1E81  0020               	movlb	0	; select bank0
  3540  1E82  1BDF               	btfsc	___lwdiv@divisor+1,7
  3541  1E83  2E90               	goto	l5957
  3542  1E84  3001               	movlw	1
  3543  1E85  0020               	movlb	0	; select bank0
  3544  1E86                     u6255:	
  3545  1E86  35DE               	lslf	___lwdiv@divisor,f
  3546  1E87  0DDF               	rlf	___lwdiv@divisor+1,f
  3547  1E88  0B89               	decfsz	9,f
  3548  1E89  2E86               	goto	u6255
  3549  1E8A  3001               	movlw	1
  3550  1E8B  0021               	movlb	1	; select bank1
  3551  1E8C  00A0               	movwf	??___lwdiv^(0+128)
  3552  1E8D  0820               	movf	??___lwdiv^(0+128),w
  3553  1E8E  07A3               	addwf	___lwdiv@counter^(0+128),f
  3554  1E8F  2E81               	goto	l5955
  3555  1E90                     l5957:	
  3556  1E90  3001               	movlw	1
  3557  1E91  0021               	movlb	1	; select bank1
  3558  1E92                     u6275:	
  3559  1E92  35A1               	lslf	___lwdiv@quotient^(0+128),f
  3560  1E93  0DA2               	rlf	(___lwdiv@quotient+1)^(0+128),f
  3561  1E94  0B89               	decfsz	9,f
  3562  1E95  2E92               	goto	u6275
  3563  1E96  0020               	movlb	0	; select bank0
  3564  1E97  085F               	movf	___lwdiv@divisor+1,w
  3565  1E98  0261               	subwf	___lwdiv@dividend+1,w
  3566  1E99  1D03               	skipz
  3567  1E9A  2E9D               	goto	u6285
  3568  1E9B  085E               	movf	___lwdiv@divisor,w
  3569  1E9C  0260               	subwf	___lwdiv@dividend,w
  3570  1E9D                     u6285:	
  3571  1E9D  1C03               	skipc
  3572  1E9E  2EA5               	goto	l5963
  3573  1E9F  085E               	movf	___lwdiv@divisor,w
  3574  1EA0  02E0               	subwf	___lwdiv@dividend,f
  3575  1EA1  085F               	movf	___lwdiv@divisor+1,w
  3576  1EA2  3BE1               	subwfb	___lwdiv@dividend+1,f
  3577  1EA3  0021               	movlb	1	; select bank1
  3578  1EA4  1421               	bsf	___lwdiv@quotient^(0+128),0
  3579  1EA5                     l5963:	
  3580  1EA5  3001               	movlw	1
  3581  1EA6  0020               	movlb	0	; select bank0
  3582  1EA7                     u6295:	
  3583  1EA7  36DF               	lsrf	___lwdiv@divisor+1,f
  3584  1EA8  0CDE               	rrf	___lwdiv@divisor,f
  3585  1EA9  0B89               	decfsz	9,f
  3586  1EAA  2EA7               	goto	u6295
  3587  1EAB  3001               	movlw	1
  3588  1EAC  0021               	movlb	1	; select bank1
  3589  1EAD  02A3               	subwf	___lwdiv@counter^(0+128),f
  3590  1EAE  1D03               	btfss	3,2
  3591  1EAF  2E90               	goto	l5957
  3592  1EB0                     l5967:	
  3593  1EB0  0021               	movlb	1	; select bank1
  3594  1EB1  0822               	movf	(___lwdiv@quotient+1)^(0+128),w
  3595  1EB2  0020               	movlb	0	; select bank0
  3596  1EB3  01DF               	clrf	?___lwdiv+1
  3597  1EB4  07DF               	addwf	?___lwdiv+1,f
  3598  1EB5  0021               	movlb	1	; select bank1
  3599  1EB6  0821               	movf	___lwdiv@quotient^(0+128),w
  3600  1EB7  0020               	movlb	0	; select bank0
  3601  1EB8  01DE               	clrf	?___lwdiv
  3602  1EB9  07DE               	addwf	?___lwdiv,f
  3603  1EBA  0008               	return
  3604  1EBB                     __end_of___lwdiv:	
  3605                           
  3606                           	psect	text4
  3607  1769                     __ptext4:	
  3608 ;; *************** function _SendCmdReply *****************
  3609 ;; Defined at:
  3610 ;;		line 208 in file "main.c"
  3611 ;; Parameters:    Size  Location     Type
  3612 ;;  cmd             2    2[BANK1 ] PTR unsigned char 
  3613 ;;		 -> ResultQue(12), OUTPacket(64), 
  3614 ;;  data            2    4[BANK1 ] PTR unsigned char 
  3615 ;;		 -> ResultQue(12), Cfg(6), ID(12), Status(13), 
  3616 ;;  count           1    6[BANK1 ] unsigned char 
  3617 ;; Auto vars:     Size  Location     Type
  3618 ;;  n               1   15[BANK1 ] unsigned char 
  3619 ;; Return value:  Size  Location     Type
  3620 ;;		None               void
  3621 ;; Registers used:
  3622 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  3623 ;; Tracked objects:
  3624 ;;		On entry : 0/0
  3625 ;;		On exit  : 0/0
  3626 ;;		Unchanged: 0/0
  3627 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3628 ;;      Params:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
  3629 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  3630 ;;      Temps:          0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0
  3631 ;;      Totals:         0       0      14       0       0       0       0       0       0       0       0       0       
      +0       0
  3632 ;;Total ram usage:       14 bytes
  3633 ;; Hardware stack levels used:    1
  3634 ;; Hardware stack levels required when called:    5
  3635 ;; This function calls:
  3636 ;;		___bmul
  3637 ;;		___wmul
  3638 ;; This function is called by:
  3639 ;;		_ProcessCmd
  3640 ;; This function uses a non-reentrant model
  3641 ;;
  3642                           
  3643                           
  3644                           ;psect for function _SendCmdReply
  3645  1769                     _SendCmdReply:	
  3646                           
  3647                           ;main.c: 209: if(WQI*15 + count + 2 < 64) {
  3648                           
  3649                           ;incstack = 0
  3650                           ; Regs used in _SendCmdReply: [wreg-fsr1h+status,2+status,0+btemp+1+pclath+cstack]
  3651  1769  0021               	movlb	1	; select bank1
  3652  176A  0826               	movf	SendCmdReply@count^(0+128),w
  3653  176B  00A7               	movwf	??_SendCmdReply^(0+128)
  3654  176C  01A8               	clrf	(??_SendCmdReply^(0+128)+1)
  3655  176D  086F               	movf	_WQI^(0+128),w
  3656  176E  00A9               	movwf	(??_SendCmdReply+2)^(0+128)
  3657  176F  01AA               	clrf	((??_SendCmdReply+2)^(0+128)+1)
  3658  1770  0829               	movf	(??_SendCmdReply+2)^(0+128),w
  3659  1771  0020               	movlb	0	; select bank0
  3660  1772  00DE               	movwf	?___wmul
  3661  1773  0021               	movlb	1	; select bank1
  3662  1774  082A               	movf	(??_SendCmdReply+3)^(0+128),w
  3663  1775  0020               	movlb	0	; select bank0
  3664  1776  00DF               	movwf	?___wmul+1
  3665  1777  300F               	movlw	15
  3666  1778  00E0               	movwf	?___wmul+2
  3667  1779  3000               	movlw	0
  3668  177A  00E1               	movwf	?___wmul+3
  3669  177B  319D  2539  3197   	fcall	___wmul
  3670  177E  0021               	movlb	1	; select bank1
  3671  177F  0827               	movf	??_SendCmdReply^(0+128),w
  3672  1780  0020               	movlb	0	; select bank0
  3673  1781  075E               	addwf	?___wmul,w
  3674  1782  0021               	movlb	1	; select bank1
  3675  1783  00AB               	movwf	(??_SendCmdReply+4)^(0+128)
  3676  1784  0828               	movf	(??_SendCmdReply+1)^(0+128),w
  3677  1785  0020               	movlb	0	; select bank0
  3678  1786  3D5F               	addwfc	?___wmul+1,w
  3679  1787  0021               	movlb	1	; select bank1
  3680  1788  00AC               	movwf	(??_SendCmdReply+5)^(0+128)
  3681  1789  082B               	movf	(??_SendCmdReply+4)^(0+128),w
  3682  178A  3E02               	addlw	2
  3683  178B  00AD               	movwf	(??_SendCmdReply+6)^(0+128)
  3684  178C  3000               	movlw	0
  3685  178D  3D2C               	addwfc	(??_SendCmdReply+5)^(0+128),w
  3686  178E  00AE               	movwf	(??_SendCmdReply+7)^(0+128)
  3687  178F  082E               	movf	(??_SendCmdReply+7)^(0+128),w
  3688  1790  3A80               	xorlw	128
  3689  1791  00FF               	movwf	127
  3690  1792  3080               	movlw	128
  3691  1793  027F               	subwf	127,w
  3692  1794  1D03               	skipz
  3693  1795  2F98               	goto	u5235
  3694  1796  3040               	movlw	64
  3695  1797  022D               	subwf	(??_SendCmdReply+6)^(0+128),w
  3696  1798                     u5235:	
  3697  1798  1803               	skipnc
  3698  1799  0008               	return
  3699                           
  3700                           ;main.c: 210: INPacket[WQI*15] = cmd[0];
  3701  179A  0021               	movlb	1	; select bank1
  3702  179B  0822               	movf	SendCmdReply@cmd^(0+128),w
  3703  179C  0086               	movwf	6
  3704  179D  0823               	movf	(SendCmdReply@cmd+1)^(0+128),w
  3705  179E  0087               	movwf	7
  3706  179F  0801               	movf	1,w
  3707  17A0  00A7               	movwf	??_SendCmdReply^(0+128)
  3708  17A1  300F               	movlw	15
  3709  17A2  00A8               	movwf	(??_SendCmdReply+1)^(0+128)
  3710  17A3  0828               	movf	(??_SendCmdReply+1)^(0+128),w
  3711  17A4  0020               	movlb	0	; select bank0
  3712  17A5  00DE               	movwf	?___bmul
  3713  17A6  0021               	movlb	1	; select bank1
  3714  17A7  086F               	movf	_WQI^(0+128),w
  3715  17A8  319B  2391  3197   	fcall	___bmul
  3716  17AB  3E20               	addlw	32
  3717  17AC  0086               	movwf	6
  3718  17AD  3002               	movlw	2	; select bank4/5
  3719  17AE  0087               	movwf	7
  3720  17AF  0021               	movlb	1	; select bank1
  3721  17B0  0827               	movf	??_SendCmdReply^(0+128),w
  3722  17B1  0081               	movwf	1
  3723                           
  3724                           ;main.c: 211: INPacket[WQI*15 + 1] = SlaveAddress;
  3725  17B2  0862               	movf	_SlaveAddress^(0+128),w
  3726  17B3  00A7               	movwf	??_SendCmdReply^(0+128)
  3727  17B4  300F               	movlw	15
  3728  17B5  00A8               	movwf	(??_SendCmdReply+1)^(0+128)
  3729  17B6  0828               	movf	(??_SendCmdReply+1)^(0+128),w
  3730  17B7  0020               	movlb	0	; select bank0
  3731  17B8  00DE               	movwf	?___bmul
  3732  17B9  0021               	movlb	1	; select bank1
  3733  17BA  086F               	movf	_WQI^(0+128),w
  3734  17BB  319B  2391  3197   	fcall	___bmul
  3735  17BE  0021               	movlb	1	; select bank1
  3736  17BF  00A9               	movwf	(??_SendCmdReply+2)^(0+128)
  3737  17C0  0A29               	incf	(??_SendCmdReply+2)^(0+128),w
  3738  17C1  3E20               	addlw	32
  3739  17C2  0086               	movwf	6
  3740  17C3  3002               	movlw	2	; select bank4/5
  3741  17C4  0087               	movwf	7
  3742  17C5  0827               	movf	??_SendCmdReply^(0+128),w
  3743  17C6  0081               	movwf	1
  3744                           
  3745                           ;main.c: 212: for(BYTE n = 0; n < count; n++)
  3746  17C7  01AF               	clrf	SendCmdReply@n^(0+128)
  3747  17C8                     l5401:	
  3748  17C8  0826               	movf	SendCmdReply@count^(0+128),w
  3749  17C9  022F               	subwf	SendCmdReply@n^(0+128),w
  3750  17CA  1803               	btfsc	3,0
  3751  17CB  2FFA               	goto	l5403
  3752                           
  3753                           ;main.c: 213: INPacket[WQI*15 + n + 2] = data[n];
  3754  17CC  0825               	movf	(SendCmdReply@data+1)^(0+128),w
  3755  17CD  00A8               	movwf	(??_SendCmdReply^(0+128)+1)
  3756  17CE  0824               	movf	SendCmdReply@data^(0+128),w
  3757  17CF  00A7               	movwf	??_SendCmdReply^(0+128)
  3758  17D0  082F               	movf	SendCmdReply@n^(0+128),w
  3759  17D1  0727               	addwf	??_SendCmdReply^(0+128),w
  3760  17D2  0084               	movwf	4
  3761  17D3  0828               	movf	(??_SendCmdReply^(0+128)+1),w
  3762  17D4  1803               	skipnc
  3763  17D5  0A28               	incf	(??_SendCmdReply^(0+128)+1),w
  3764  17D6  0085               	movwf	5
  3765  17D7  0800               	movf	0,w	;code access
  3766  17D8  00A9               	movwf	(??_SendCmdReply+2)^(0+128)
  3767  17D9  086F               	movf	_WQI^(0+128),w
  3768  17DA  00AA               	movwf	(??_SendCmdReply+3)^(0+128)
  3769  17DB  01AB               	clrf	((??_SendCmdReply+3)^(0+128)+1)
  3770  17DC  082A               	movf	(??_SendCmdReply+3)^(0+128),w
  3771  17DD  0020               	movlb	0	; select bank0
  3772  17DE  00DE               	movwf	?___wmul
  3773  17DF  0021               	movlb	1	; select bank1
  3774  17E0  082B               	movf	(??_SendCmdReply+4)^(0+128),w
  3775  17E1  0020               	movlb	0	; select bank0
  3776  17E2  00DF               	movwf	?___wmul+1
  3777  17E3  300F               	movlw	15
  3778  17E4  00E0               	movwf	?___wmul+2
  3779  17E5  3000               	movlw	0
  3780  17E6  00E1               	movwf	?___wmul+3
  3781  17E7  319D  2539  3197   	fcall	___wmul
  3782  17EA  0020               	movlb	0	; select bank0
  3783  17EB  085E               	movf	?___wmul,w
  3784  17EC  0021               	movlb	1	; select bank1
  3785  17ED  072F               	addwf	SendCmdReply@n^(0+128),w
  3786  17EE  3E02               	addlw	2
  3787  17EF  3E20               	addlw	32
  3788  17F0  0086               	movwf	6
  3789  17F1  3002               	movlw	2	; select bank4/5
  3790  17F2  0087               	movwf	7
  3791  17F3  0829               	movf	(??_SendCmdReply+2)^(0+128),w
  3792  17F4  0081               	movwf	1
  3793  17F5  3001               	movlw	1
  3794  17F6  00A7               	movwf	??_SendCmdReply^(0+128)
  3795  17F7  0827               	movf	??_SendCmdReply^(0+128),w
  3796  17F8  07AF               	addwf	SendCmdReply@n^(0+128),f
  3797  17F9  2FC8               	goto	l5401
  3798  17FA                     l5403:	
  3799                           
  3800                           ;main.c: 214: WQI = (WQI+1) & 3;
  3801  17FA  0A6F               	incf	_WQI^(0+128),w
  3802  17FB  3903               	andlw	3
  3803  17FC  00A7               	movwf	??_SendCmdReply^(0+128)
  3804  17FD  0827               	movf	??_SendCmdReply^(0+128),w
  3805  17FE  00EF               	movwf	_WQI^(0+128)
  3806  17FF  0008               	return
  3807  1800                     __end_of_SendCmdReply:	
  3808                           
  3809                           	psect	text5
  3810  1B91                     __ptext5:	
  3811 ;; *************** function ___bmul *****************
  3812 ;; Defined at:
  3813 ;;		line 3 in file "C:\Program Files (x86)\Microchip\xc8\v1.20\sources\pic\bmul.c"
  3814 ;; Parameters:    Size  Location     Type
  3815 ;;  multiplier      1    wreg     unsigned char 
  3816 ;;  multiplicand    1   14[BANK0 ] unsigned char 
  3817 ;; Auto vars:     Size  Location     Type
  3818 ;;  multiplier      1   17[BANK0 ] unsigned char 
  3819 ;;  product         1   16[BANK0 ] unsigned char 
  3820 ;; Return value:  Size  Location     Type
  3821 ;;                  1    wreg      unsigned char 
  3822 ;; Registers used:
  3823 ;;		wreg, status,2, status,0
  3824 ;; Tracked objects:
  3825 ;;		On entry : 0/0
  3826 ;;		On exit  : 0/0
  3827 ;;		Unchanged: 0/0
  3828 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3829 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3830 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3831 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3832 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3833 ;;Total ram usage:        4 bytes
  3834 ;; Hardware stack levels used:    1
  3835 ;; Hardware stack levels required when called:    4
  3836 ;; This function calls:
  3837 ;;		Nothing
  3838 ;; This function is called by:
  3839 ;;		_ResultRx
  3840 ;;		_ProcessIO
  3841 ;;		_SendCmdReply
  3842 ;;		i1_SendCmdReply
  3843 ;; This function uses a non-reentrant model
  3844 ;;
  3845                           
  3846                           
  3847                           ;psect for function ___bmul
  3848  1B91                     ___bmul:	
  3849                           
  3850                           ;incstack = 0
  3851                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  3852                           ;___bmul@multiplier stored from wreg
  3853  1B91  0020               	movlb	0	; select bank0
  3854  1B92  00E1               	movwf	___bmul@multiplier
  3855  1B93  01E0               	clrf	___bmul@product
  3856  1B94                     l5757:	
  3857  1B94  1C61               	btfss	___bmul@multiplier,0
  3858  1B95  2B9A               	goto	l5761
  3859  1B96  085E               	movf	___bmul@multiplicand,w
  3860  1B97  00DF               	movwf	??___bmul
  3861  1B98  085F               	movf	??___bmul,w
  3862  1B99  07E0               	addwf	___bmul@product,f
  3863  1B9A                     l5761:	
  3864  1B9A  1003               	clrc
  3865  1B9B  0DDE               	rlf	___bmul@multiplicand,f
  3866  1B9C  1003               	clrc
  3867  1B9D  0CE1               	rrf	___bmul@multiplier,f
  3868  1B9E  08E1               	movf	___bmul@multiplier,f
  3869  1B9F  1D03               	skipz
  3870  1BA0  2B94               	goto	l5757
  3871  1BA1  0860               	movf	___bmul@product,w
  3872  1BA2  0008               	return
  3873  1BA3                     __end_of___bmul:	
  3874                           
  3875                           	psect	text6
  3876  142C                     __ptext6:	
  3877 ;; *************** function _AsicPushWork *****************
  3878 ;; Defined at:
  3879 ;;		line 110 in file "klondike.c"
  3880 ;; Parameters:    Size  Location     Type
  3881 ;;		None
  3882 ;; Auto vars:     Size  Location     Type
  3883 ;;		None
  3884 ;; Return value:  Size  Location     Type
  3885 ;;		None               void
  3886 ;; Registers used:
  3887 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  3888 ;; Tracked objects:
  3889 ;;		On entry : 0/0
  3890 ;;		On exit  : 0/0
  3891 ;;		Unchanged: 0/0
  3892 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3893 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3894 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3895 ;;      Temps:          0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
  3896 ;;      Totals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
  3897 ;;Total ram usage:        5 bytes
  3898 ;; Hardware stack levels used:    1
  3899 ;; Hardware stack levels required when called:    6
  3900 ;; This function calls:
  3901 ;;		_SendAsicData
  3902 ;;		_AsicPreCalc
  3903 ;;		___wmul
  3904 ;; This function is called by:
  3905 ;;		_ProcessCmd
  3906 ;;		_main
  3907 ;; This function uses a non-reentrant model
  3908 ;;
  3909                           
  3910                           
  3911                           ;psect for function _AsicPushWork
  3912  142C                     _AsicPushWork:	
  3913                           
  3914                           ;klondike.c: 111: AsicPreCalc(&WorkQue[WorkNow]);
  3915                           
  3916                           ;incstack = 0
  3917                           ; Regs used in _AsicPushWork: [wreg-fsr1h+status,2+status,0+btemp+1+pclath+cstack]
  3918  142C  0021               	movlb	1	; select bank1
  3919  142D  0864               	movf	_WorkNow^(0+128),w
  3920  142E  00B9               	movwf	??_AsicPushWork^(0+128)
  3921  142F  01BA               	clrf	(??_AsicPushWork^(0+128)+1)
  3922  1430  0839               	movf	??_AsicPushWork^(0+128),w
  3923  1431  0020               	movlb	0	; select bank0
  3924  1432  00DE               	movwf	?___wmul
  3925  1433  0021               	movlb	1	; select bank1
  3926  1434  083A               	movf	(??_AsicPushWork+1)^(0+128),w
  3927  1435  0020               	movlb	0	; select bank0
  3928  1436  00DF               	movwf	?___wmul+1
  3929  1437  302D               	movlw	45
  3930  1438  00E0               	movwf	?___wmul+2
  3931  1439  3000               	movlw	0
  3932  143A  00E1               	movwf	?___wmul+3
  3933  143B  319D  2539  3194   	fcall	___wmul
  3934  143E  303C               	movlw	60
  3935  143F  0021               	movlb	1	; select bank1
  3936  1440  00BB               	movwf	(??_AsicPushWork+2)^(0+128)
  3937  1441  3023               	movlw	35
  3938  1442  00BC               	movwf	((??_AsicPushWork+2)^(0+128)+1)
  3939  1443  0020               	movlb	0	; select bank0
  3940  1444  085E               	movf	?___wmul,w
  3941  1445  0021               	movlb	1	; select bank1
  3942  1446  073B               	addwf	(??_AsicPushWork+2)^(0+128),w
  3943  1447  00AD               	movwf	?_AsicPreCalc^(0+128)
  3944  1448  0020               	movlb	0	; select bank0
  3945  1449  085F               	movf	?___wmul+1,w
  3946  144A  0021               	movlb	1	; select bank1
  3947  144B  3D3C               	addwfc	(??_AsicPushWork+3)^(0+128),w
  3948  144C  00AE               	movwf	(?_AsicPreCalc+1)^(0+128)
  3949  144D  3180  2014  3194   	fcall	_AsicPreCalc
  3950                           
  3951                           ;klondike.c: 112: Status.WorkID = WorkQue[WorkNow].WorkID;
  3952  1450  0021               	movlb	1	; select bank1
  3953  1451  0864               	movf	_WorkNow^(0+128),w
  3954  1452  00B9               	movwf	??_AsicPushWork^(0+128)
  3955  1453  01BA               	clrf	(??_AsicPushWork^(0+128)+1)
  3956  1454  0839               	movf	??_AsicPushWork^(0+128),w
  3957  1455  0020               	movlb	0	; select bank0
  3958  1456  00DE               	movwf	?___wmul
  3959  1457  0021               	movlb	1	; select bank1
  3960  1458  083A               	movf	(??_AsicPushWork+1)^(0+128),w
  3961  1459  0020               	movlb	0	; select bank0
  3962  145A  00DF               	movwf	?___wmul+1
  3963  145B  302D               	movlw	45
  3964  145C  00E0               	movwf	?___wmul+2
  3965  145D  3000               	movlw	0
  3966  145E  00E1               	movwf	?___wmul+3
  3967  145F  319D  2539  3194   	fcall	___wmul
  3968  1462  303C               	movlw	60
  3969  1463  0021               	movlb	1	; select bank1
  3970  1464  00BB               	movwf	(??_AsicPushWork+2)^(0+128)
  3971  1465  3023               	movlw	35
  3972  1466  00BC               	movwf	((??_AsicPushWork+2)^(0+128)+1)
  3973  1467  0020               	movlb	0	; select bank0
  3974  1468  085E               	movf	?___wmul,w
  3975  1469  0021               	movlb	1	; select bank1
  3976  146A  073B               	addwf	(??_AsicPushWork+2)^(0+128),w
  3977  146B  0086               	movwf	6
  3978  146C  0020               	movlb	0	; select bank0
  3979  146D  085F               	movf	?___wmul+1,w
  3980  146E  0021               	movlb	1	; select bank1
  3981  146F  3D3C               	addwfc	(??_AsicPushWork+3)^(0+128),w
  3982  1470  0087               	movwf	7
  3983  1471  0801               	movf	1,w
  3984  1472  00BD               	movwf	(??_AsicPushWork+4)^(0+128)
  3985  1473  083D               	movf	(??_AsicPushWork+4)^(0+128),w
  3986  1474  0023               	movlb	3	; select bank3
  3987  1475  00B0               	movwf	(_Status^(0+384)+4)	;volatile
  3988                           
  3989                           ;klondike.c: 113: SendAsicData(&WorkQue[WorkNow]);
  3990  1476  0021               	movlb	1	; select bank1
  3991  1477  0864               	movf	_WorkNow^(0+128),w
  3992  1478  00B9               	movwf	??_AsicPushWork^(0+128)
  3993  1479  01BA               	clrf	(??_AsicPushWork^(0+128)+1)
  3994  147A  0839               	movf	??_AsicPushWork^(0+128),w
  3995  147B  0020               	movlb	0	; select bank0
  3996  147C  00DE               	movwf	?___wmul
  3997  147D  0021               	movlb	1	; select bank1
  3998  147E  083A               	movf	(??_AsicPushWork+1)^(0+128),w
  3999  147F  0020               	movlb	0	; select bank0
  4000  1480  00DF               	movwf	?___wmul+1
  4001  1481  302D               	movlw	45
  4002  1482  00E0               	movwf	?___wmul+2
  4003  1483  3000               	movlw	0
  4004  1484  00E1               	movwf	?___wmul+3
  4005  1485  319D  2539  3194   	fcall	___wmul
  4006  1488  303C               	movlw	60
  4007  1489  0021               	movlb	1	; select bank1
  4008  148A  00BB               	movwf	(??_AsicPushWork+2)^(0+128)
  4009  148B  3023               	movlw	35
  4010  148C  00BC               	movwf	((??_AsicPushWork+2)^(0+128)+1)
  4011  148D  0020               	movlb	0	; select bank0
  4012  148E  085E               	movf	?___wmul,w
  4013  148F  0021               	movlb	1	; select bank1
  4014  1490  073B               	addwf	(??_AsicPushWork+2)^(0+128),w
  4015  1491  00A2               	movwf	?_SendAsicData^(0+128)
  4016  1492  0020               	movlb	0	; select bank0
  4017  1493  085F               	movf	?___wmul+1,w
  4018  1494  0021               	movlb	1	; select bank1
  4019  1495  3D3C               	addwfc	(??_AsicPushWork+3)^(0+128),w
  4020  1496  00A3               	movwf	(?_SendAsicData+1)^(0+128)
  4021  1497  3196  26D4         	fcall	_SendAsicData
  4022                           
  4023                           ;klondike.c: 114: WorkNow = (WorkNow+1) & 4-1;
  4024  1499  0021               	movlb	1	; select bank1
  4025  149A  0A64               	incf	_WorkNow^(0+128),w
  4026  149B  3903               	andlw	3
  4027  149C  00B9               	movwf	??_AsicPushWork^(0+128)
  4028  149D  0839               	movf	??_AsicPushWork^(0+128),w
  4029  149E  00E4               	movwf	_WorkNow^(0+128)
  4030                           
  4031                           ;klondike.c: 115: Status.HashCount = 0;
  4032  149F  0023               	movlb	3	; select bank3
  4033  14A0  01B4               	clrf	(_Status^(0+384)+8)	;volatile
  4034  14A1  01B5               	clrf	((_Status+1)^(0+384)+8)	;volatile
  4035                           
  4036                           ;klondike.c: 116: TMR0 = HashTime;
  4037  14A2  0020               	movlb	0	; select bank0
  4038  14A3  086F               	movf	_HashTime,w
  4039  14A4  0095               	movwf	21	;volatile
  4040                           
  4041                           ;klondike.c: 117: Status.State = 'W';
  4042  14A5  3057               	movlw	87
  4043  14A6  0021               	movlb	1	; select bank1
  4044  14A7  00B9               	movwf	??_AsicPushWork^(0+128)
  4045  14A8  0839               	movf	??_AsicPushWork^(0+128),w
  4046  14A9  0023               	movlb	3	; select bank3
  4047  14AA  00AC               	movwf	_Status^(0+384)	;volatile
  4048                           
  4049                           ;klondike.c: 118: Status.WorkQC--;
  4050  14AB  3001               	movlw	1
  4051  14AC  02AF               	subwf	(_Status^(0+384)+3),f	;volatile
  4052  14AD  0008               	return
  4053  14AE                     __end_of_AsicPushWork:	
  4054                           
  4055                           	psect	text7
  4056  1D39                     __ptext7:	
  4057 ;; *************** function ___wmul *****************
  4058 ;; Defined at:
  4059 ;;		line 3 in file "C:\Program Files (x86)\Microchip\xc8\v1.20\sources\pic\wmul.c"
  4060 ;; Parameters:    Size  Location     Type
  4061 ;;  multiplier      2   14[BANK0 ] unsigned int 
  4062 ;;  multiplicand    2   16[BANK0 ] unsigned int 
  4063 ;; Auto vars:     Size  Location     Type
  4064 ;;  product         2    0[BANK1 ] unsigned int 
  4065 ;; Return value:  Size  Location     Type
  4066 ;;                  2   14[BANK0 ] unsigned int 
  4067 ;; Registers used:
  4068 ;;		wreg, status,2, status,0
  4069 ;; Tracked objects:
  4070 ;;		On entry : 0/0
  4071 ;;		On exit  : 0/0
  4072 ;;		Unchanged: 0/0
  4073 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4074 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4075 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  4076 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4077 ;;      Totals:         0       4       2       0       0       0       0       0       0       0       0       0       
      +0       0
  4078 ;;Total ram usage:        6 bytes
  4079 ;; Hardware stack levels used:    1
  4080 ;; Hardware stack levels required when called:    4
  4081 ;; This function calls:
  4082 ;;		Nothing
  4083 ;; This function is called by:
  4084 ;;		_ProcessCmd
  4085 ;;		_AsicPushWork
  4086 ;;		_SendCmdReply
  4087 ;; This function uses a non-reentrant model
  4088 ;;
  4089                           
  4090                           
  4091                           ;psect for function ___wmul
  4092  1D39                     ___wmul:	
  4093                           
  4094                           ;incstack = 0
  4095                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  4096  1D39  0021               	movlb	1	; select bank1
  4097  1D3A  01A0               	clrf	___wmul@product^(0+128)
  4098  1D3B  01A1               	clrf	(___wmul@product+1)^(0+128)
  4099  1D3C                     l5973:	
  4100  1D3C  0020               	movlb	0	; select bank0
  4101  1D3D  1C5E               	btfss	___wmul@multiplier,0
  4102  1D3E  2D46               	goto	l1295
  4103  1D3F  0860               	movf	___wmul@multiplicand,w
  4104  1D40  0021               	movlb	1	; select bank1
  4105  1D41  07A0               	addwf	___wmul@product^(0+128),f
  4106  1D42  0020               	movlb	0	; select bank0
  4107  1D43  0861               	movf	___wmul@multiplicand+1,w
  4108  1D44  0021               	movlb	1	; select bank1
  4109  1D45  3DA1               	addwfc	(___wmul@product+1)^(0+128),f
  4110  1D46                     l1295:	
  4111  1D46  3001               	movlw	1
  4112  1D47  0020               	movlb	0	; select bank0
  4113  1D48                     u6325:	
  4114  1D48  35E0               	lslf	___wmul@multiplicand,f
  4115  1D49  0DE1               	rlf	___wmul@multiplicand+1,f
  4116  1D4A  0B89               	decfsz	9,f
  4117  1D4B  2D48               	goto	u6325
  4118  1D4C  3001               	movlw	1
  4119  1D4D                     u6335:	
  4120  1D4D  36DF               	lsrf	___wmul@multiplier+1,f
  4121  1D4E  0CDE               	rrf	___wmul@multiplier,f
  4122  1D4F  0B89               	decfsz	9,f
  4123  1D50  2D4D               	goto	u6335
  4124  1D51  085F               	movf	___wmul@multiplier+1,w
  4125  1D52  045E               	iorwf	___wmul@multiplier,w
  4126  1D53  1D03               	skipz
  4127  1D54  2D3C               	goto	l5973
  4128  1D55  0021               	movlb	1	; select bank1
  4129  1D56  0821               	movf	(___wmul@product+1)^(0+128),w
  4130  1D57  0020               	movlb	0	; select bank0
  4131  1D58  01DF               	clrf	?___wmul+1
  4132  1D59  07DF               	addwf	?___wmul+1,f
  4133  1D5A  0021               	movlb	1	; select bank1
  4134  1D5B  0820               	movf	___wmul@product^(0+128),w
  4135  1D5C  0020               	movlb	0	; select bank0
  4136  1D5D  01DE               	clrf	?___wmul
  4137  1D5E  07DE               	addwf	?___wmul,f
  4138  1D5F  0008               	return
  4139  1D60                     __end_of___wmul:	
  4140                           
  4141                           	psect	text8
  4142  0014                     __ptext8:	
  4143 ;; *************** function _AsicPreCalc *****************
  4144 ;; Defined at:
  4145 ;;		line 318 in file "asic.c"
  4146 ;; Parameters:    Size  Location     Type
  4147 ;;  work            2   13[BANK1 ] PTR struct _worktask
  4148 ;;		 -> WorkQue(180), 
  4149 ;; Auto vars:     Size  Location     Type
  4150 ;;  m              32   12[BANK2 ] unsigned long [8]
  4151 ;;  K              12    0[BANK2 ] unsigned long [3]
  4152 ;;  x               4   52[BANK2 ] unsigned long 
  4153 ;;  y               4   48[BANK2 ] unsigned long 
  4154 ;;  z               4   44[BANK2 ] unsigned long 
  4155 ;;  n               1   56[BANK2 ] unsigned char 
  4156 ;; Return value:  Size  Location     Type
  4157 ;;		None               void
  4158 ;; Registers used:
  4159 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  4160 ;; Tracked objects:
  4161 ;;		On entry : 0/0
  4162 ;;		On exit  : 0/0
  4163 ;;		Unchanged: 0/0
  4164 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4165 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  4166 ;;      Locals:         0       0       0      57       0       0       0       0       0       0       0       0       
      +0       0
  4167 ;;      Temps:          0       0      10       0       0       0       0       0       0       0       0       0       
      +0       0
  4168 ;;      Totals:         0       0      12      57       0       0       0       0       0       0       0       0       
      +0       0
  4169 ;;Total ram usage:       69 bytes
  4170 ;; Hardware stack levels used:    1
  4171 ;; Hardware stack levels required when called:    5
  4172 ;; This function calls:
  4173 ;;		_rotate
  4174 ;; This function is called by:
  4175 ;;		_AsicPushWork
  4176 ;; This function uses a non-reentrant model
  4177 ;;
  4178                           
  4179                           
  4180                           ;psect for function _AsicPreCalc
  4181  0014                     _AsicPreCalc:	
  4182                           
  4183                           ;asic.c: 319: DWORD K[3] = { 0x428a2f98, 0x71374491, 0xb5c0fbcf };
  4184                           
  4185                           ;incstack = 0
  4186                           ; Regs used in _AsicPreCalc: [wreg-fsr1h+status,2+status,0+btemp+1+pclath+cstack]
  4187  0014  30A0               	movlw	low AsicPreCalc@F3347
  4188  0015  0086               	movwf	6
  4189  0016  3001               	movlw	high AsicPreCalc@F3347
  4190  0017  0087               	movwf	7
  4191  0018  3020               	movlw	low AsicPreCalc@K
  4192  0019  0084               	movwf	4
  4193  001A  3001               	movlw	high AsicPreCalc@K
  4194  001B  0085               	movwf	5
  4195  001C  300C               	movlw	12
  4196  001D  00FF               	movwf	127
  4197  001E                     u4580:	
  4198  001E  0016               	moviw fsr1++
  4199  001F  001A               	movwi fsr0++
  4200  0020  0BFF               	decfsz	127,f
  4201  0021  281E               	goto	u4580
  4202                           
  4203                           ;asic.c: 320: DWORD x, y, z;
  4204                           ;asic.c: 321: DWORD m[8];
  4205                           ;asic.c: 322: BYTE n;
  4206                           ;asic.c: 324: for(n = 0; n < 8; n++)
  4207  0022  0022               	movlb	2	; select bank2
  4208  0023  01D8               	clrf	AsicPreCalc@n^(0+256)
  4209  0024  3008               	movlw	8
  4210  0025  0258               	subwf	AsicPreCalc@n^(0+256),w
  4211  0026  1803               	btfsc	3,0
  4212  0027  2863               	goto	l5023
  4213  0028                     l5017:	
  4214                           
  4215                           ;asic.c: 325: m[n] = work->MidState[n];
  4216  0028  0858               	movf	AsicPreCalc@n^(0+256),w
  4217  0029  0021               	movlb	1	; select bank1
  4218  002A  00AF               	movwf	??_AsicPreCalc^(0+128)
  4219  002B  01B0               	clrf	(??_AsicPreCalc^(0+128)+1)
  4220  002C  35AF               	lslf	??_AsicPreCalc^(0+128),f
  4221  002D  0DB0               	rlf	(??_AsicPreCalc^(0+128)+1),f
  4222  002E  35AF               	lslf	??_AsicPreCalc^(0+128),f
  4223  002F  0DB0               	rlf	(??_AsicPreCalc^(0+128)+1),f
  4224  0030  082F               	movf	??_AsicPreCalc^(0+128),w
  4225  0031  3E01               	addlw	1
  4226  0032  00B1               	movwf	(??_AsicPreCalc+2)^(0+128)
  4227  0033  3000               	movlw	0
  4228  0034  3D30               	addwfc	(??_AsicPreCalc+1)^(0+128),w
  4229  0035  00B2               	movwf	(??_AsicPreCalc+3)^(0+128)
  4230  0036  0831               	movf	(??_AsicPreCalc+2)^(0+128),w
  4231  0037  072D               	addwf	AsicPreCalc@work^(0+128),w
  4232  0038  0086               	movwf	6
  4233  0039  0832               	movf	(??_AsicPreCalc+3)^(0+128),w
  4234  003A  3D2E               	addwfc	(AsicPreCalc@work+1)^(0+128),w
  4235  003B  0087               	movwf	7
  4236  003C  3F40               	moviw [0]fsr1
  4237  003D  00B3               	movwf	(??_AsicPreCalc+4)^(0+128)
  4238  003E  3F41               	moviw [1]fsr1
  4239  003F  00B4               	movwf	((??_AsicPreCalc+4)^(0+128)+1)
  4240  0040  3F42               	moviw [2]fsr1
  4241  0041  00B5               	movwf	((??_AsicPreCalc+4)^(0+128)+2)
  4242  0042  3F43               	moviw [3]fsr1
  4243  0043  00B6               	movwf	((??_AsicPreCalc+4)^(0+128)+3)
  4244  0044  0022               	movlb	2	; select bank2
  4245  0045  0858               	movf	AsicPreCalc@n^(0+256),w
  4246  0046  0021               	movlb	1	; select bank1
  4247  0047  00B7               	movwf	(??_AsicPreCalc+8)^(0+128)
  4248  0048  3001               	movlw	1
  4249  0049                     u4605:	
  4250  0049  35B7               	lslf	(??_AsicPreCalc+8)^(0+128),f
  4251  004A  3EFF               	addlw	-1
  4252  004B  1D03               	skipz
  4253  004C  2849               	goto	u4605
  4254  004D  3537               	lslf	(??_AsicPreCalc+8)^(0+128),w
  4255  004E  3E2C               	addlw	AsicPreCalc@m& (0+255)
  4256  004F  0086               	movwf	6
  4257  0050  3001               	movlw	1	; select bank2/3
  4258  0051  0087               	movwf	7
  4259  0052  0833               	movf	(??_AsicPreCalc+4)^(0+128),w
  4260  0053  3FC0               	movwi [0]fsr1
  4261  0054  0834               	movf	(??_AsicPreCalc+5)^(0+128),w
  4262  0055  3FC1               	movwi [1]fsr1
  4263  0056  0835               	movf	(??_AsicPreCalc+6)^(0+128),w
  4264  0057  3FC2               	movwi [2]fsr1
  4265  0058  0836               	movf	(??_AsicPreCalc+7)^(0+128),w
  4266  0059  3FC3               	movwi [3]fsr1
  4267  005A  3001               	movlw	1
  4268  005B  00AF               	movwf	??_AsicPreCalc^(0+128)
  4269  005C  082F               	movf	??_AsicPreCalc^(0+128),w
  4270  005D  0022               	movlb	2	; select bank2
  4271  005E  07D8               	addwf	AsicPreCalc@n^(0+256),f
  4272  005F  3008               	movlw	8
  4273  0060  0258               	subwf	AsicPreCalc@n^(0+256),w
  4274  0061  1C03               	skipc
  4275  0062  2828               	goto	l5017
  4276  0063                     l5023:	
  4277                           
  4278                           ;asic.c: 327: for(n = 0; n < 3; n++) {
  4279  0063  01D8               	clrf	AsicPreCalc@n^(0+256)
  4280  0064                     L5:	
  4281  0064  3003               	movlw	3
  4282  0065  0258               	subwf	AsicPreCalc@n^(0+256),w
  4283  0066  1803               	btfsc	3,0
  4284  0067  0008               	return
  4285                           
  4286                           ;asic.c: 329: x = m[5-n] ^ m[6-n];
  4287  0068  0358               	decf	AsicPreCalc@n^(0+256),w
  4288  0069  3AFF               	xorlw	255
  4289  006A  0021               	movlb	1	; select bank1
  4290  006B  00AF               	movwf	??_AsicPreCalc^(0+128)
  4291  006C  3001               	movlw	1
  4292  006D                     u4635:	
  4293  006D  35AF               	lslf	??_AsicPreCalc^(0+128),f
  4294  006E  3EFF               	addlw	-1
  4295  006F  1D03               	skipz
  4296  0070  286D               	goto	u4635
  4297  0071  352F               	lslf	??_AsicPreCalc^(0+128),w
  4298  0072  3E18               	addlw	24
  4299  0073  3E2C               	addlw	AsicPreCalc@m& (0+255)
  4300  0074  0086               	movwf	6
  4301  0075  3001               	movlw	1	; select bank2/3
  4302  0076  0087               	movwf	7
  4303  0077  3F40               	moviw [0]fsr1
  4304  0078  00B0               	movwf	(??_AsicPreCalc+1)^(0+128)
  4305  0079  3F41               	moviw [1]fsr1
  4306  007A  00B1               	movwf	((??_AsicPreCalc+1)^(0+128)+1)
  4307  007B  3F42               	moviw [2]fsr1
  4308  007C  00B2               	movwf	((??_AsicPreCalc+1)^(0+128)+2)
  4309  007D  3F43               	moviw [3]fsr1
  4310  007E  00B3               	movwf	((??_AsicPreCalc+1)^(0+128)+3)
  4311  007F  0022               	movlb	2	; select bank2
  4312  0080  0358               	decf	AsicPreCalc@n^(0+256),w
  4313  0081  3AFF               	xorlw	255
  4314  0082  0021               	movlb	1	; select bank1
  4315  0083  00B4               	movwf	(??_AsicPreCalc+5)^(0+128)
  4316  0084  3001               	movlw	1
  4317  0085                     u4645:	
  4318  0085  35B4               	lslf	(??_AsicPreCalc+5)^(0+128),f
  4319  0086  3EFF               	addlw	-1
  4320  0087  1D03               	skipz
  4321  0088  2885               	goto	u4645
  4322  0089  3534               	lslf	(??_AsicPreCalc+5)^(0+128),w
  4323  008A  3E14               	addlw	20
  4324  008B  3E2C               	addlw	AsicPreCalc@m& (0+255)
  4325  008C  0086               	movwf	6
  4326  008D  3001               	movlw	1	; select bank2/3
  4327  008E  0087               	movwf	7
  4328  008F  3F40               	moviw [0]fsr1
  4329  0090  00B5               	movwf	(??_AsicPreCalc+6)^(0+128)
  4330  0091  3F41               	moviw [1]fsr1
  4331  0092  00B6               	movwf	((??_AsicPreCalc+6)^(0+128)+1)
  4332  0093  3F42               	moviw [2]fsr1
  4333  0094  00B7               	movwf	((??_AsicPreCalc+6)^(0+128)+2)
  4334  0095  3F43               	moviw [3]fsr1
  4335  0096  00B8               	movwf	((??_AsicPreCalc+6)^(0+128)+3)
  4336  0097  0830               	movf	(??_AsicPreCalc+1)^(0+128),w
  4337  0098  0635               	xorwf	(??_AsicPreCalc+6)^(0+128),w
  4338  0099  0022               	movlb	2	; select bank2
  4339  009A  00D4               	movwf	AsicPreCalc@x^(0+256)
  4340  009B  0021               	movlb	1	; select bank1
  4341  009C  0831               	movf	(??_AsicPreCalc+2)^(0+128),w
  4342  009D  0636               	xorwf	(??_AsicPreCalc+7)^(0+128),w
  4343  009E  0022               	movlb	2	; select bank2
  4344  009F  00D5               	movwf	(AsicPreCalc@x+1)^(0+256)
  4345  00A0  0021               	movlb	1	; select bank1
  4346  00A1  0832               	movf	(??_AsicPreCalc+3)^(0+128),w
  4347  00A2  0637               	xorwf	(??_AsicPreCalc+8)^(0+128),w
  4348  00A3  0022               	movlb	2	; select bank2
  4349  00A4  00D6               	movwf	(AsicPreCalc@x+2)^(0+256)
  4350  00A5  0021               	movlb	1	; select bank1
  4351  00A6  0833               	movf	(??_AsicPreCalc+4)^(0+128),w
  4352  00A7  0638               	xorwf	(??_AsicPreCalc+9)^(0+128),w
  4353  00A8  0022               	movlb	2	; select bank2
  4354  00A9  00D7               	movwf	(AsicPreCalc@x+3)^(0+256)
  4355                           
  4356                           ;asic.c: 330: x = x & m[4-n];
  4357  00AA  0358               	decf	AsicPreCalc@n^(0+256),w
  4358  00AB  3AFF               	xorlw	255
  4359  00AC  0021               	movlb	1	; select bank1
  4360  00AD  00AF               	movwf	??_AsicPreCalc^(0+128)
  4361  00AE  3001               	movlw	1
  4362  00AF                     u4655:	
  4363  00AF  35AF               	lslf	??_AsicPreCalc^(0+128),f
  4364  00B0  3EFF               	addlw	-1
  4365  00B1  1D03               	skipz
  4366  00B2  28AF               	goto	u4655
  4367  00B3  352F               	lslf	??_AsicPreCalc^(0+128),w
  4368  00B4  3E10               	addlw	16
  4369  00B5  3E2C               	addlw	AsicPreCalc@m& (0+255)
  4370  00B6  0086               	movwf	6
  4371  00B7  3001               	movlw	1	; select bank2/3
  4372  00B8  0087               	movwf	7
  4373  00B9  0022               	movlb	2	; select bank2
  4374  00BA  0854               	movf	AsicPreCalc@x^(0+256),w
  4375  00BB  0501               	andwf	1,w
  4376  00BC  0021               	movlb	1	; select bank1
  4377  00BD  00B0               	movwf	(??_AsicPreCalc+1)^(0+128)
  4378  00BE  3141               	addfsr 1,1
  4379  00BF  0022               	movlb	2	; select bank2
  4380  00C0  0855               	movf	(AsicPreCalc@x+1)^(0+256),w
  4381  00C1  0501               	andwf	1,w
  4382  00C2  0021               	movlb	1	; select bank1
  4383  00C3  00B1               	movwf	((??_AsicPreCalc+1)^(0+128)+1)
  4384  00C4  3141               	addfsr 1,1
  4385  00C5  0022               	movlb	2	; select bank2
  4386  00C6  0856               	movf	(AsicPreCalc@x+2)^(0+256),w
  4387  00C7  0501               	andwf	1,w
  4388  00C8  0021               	movlb	1	; select bank1
  4389  00C9  00B2               	movwf	((??_AsicPreCalc+1)^(0+128)+2)
  4390  00CA  3141               	addfsr 1,1
  4391  00CB  0022               	movlb	2	; select bank2
  4392  00CC  0857               	movf	(AsicPreCalc@x+3)^(0+256),w
  4393  00CD  0501               	andwf	1,w
  4394  00CE  0021               	movlb	1	; select bank1
  4395  00CF  00B3               	movwf	((??_AsicPreCalc+1)^(0+128)+3)
  4396  00D0  0833               	movf	(??_AsicPreCalc+4)^(0+128),w
  4397  00D1  0022               	movlb	2	; select bank2
  4398  00D2  00D7               	movwf	(AsicPreCalc@x+3)^(0+256)
  4399  00D3  0021               	movlb	1	; select bank1
  4400  00D4  0832               	movf	(??_AsicPreCalc+3)^(0+128),w
  4401  00D5  0022               	movlb	2	; select bank2
  4402  00D6  00D6               	movwf	(AsicPreCalc@x+2)^(0+256)
  4403  00D7  0021               	movlb	1	; select bank1
  4404  00D8  0831               	movf	(??_AsicPreCalc+2)^(0+128),w
  4405  00D9  0022               	movlb	2	; select bank2
  4406  00DA  00D5               	movwf	(AsicPreCalc@x+1)^(0+256)
  4407  00DB  0021               	movlb	1	; select bank1
  4408  00DC  0830               	movf	(??_AsicPreCalc+1)^(0+128),w
  4409  00DD  0022               	movlb	2	; select bank2
  4410  00DE  00D4               	movwf	AsicPreCalc@x^(0+256)
  4411                           
  4412                           ;asic.c: 331: x = m[6-n] ^ x;
  4413  00DF  0358               	decf	AsicPreCalc@n^(0+256),w
  4414  00E0  3AFF               	xorlw	255
  4415  00E1  0021               	movlb	1	; select bank1
  4416  00E2  00AF               	movwf	??_AsicPreCalc^(0+128)
  4417  00E3  3001               	movlw	1
  4418  00E4                     u4665:	
  4419  00E4  35AF               	lslf	??_AsicPreCalc^(0+128),f
  4420  00E5  3EFF               	addlw	-1
  4421  00E6  1D03               	skipz
  4422  00E7  28E4               	goto	u4665
  4423  00E8  352F               	lslf	??_AsicPreCalc^(0+128),w
  4424  00E9  3E18               	addlw	24
  4425  00EA  3E2C               	addlw	AsicPreCalc@m& (0+255)
  4426  00EB  0086               	movwf	6
  4427  00EC  3001               	movlw	1	; select bank2/3
  4428  00ED  0087               	movwf	7
  4429  00EE  0022               	movlb	2	; select bank2
  4430  00EF  0854               	movf	AsicPreCalc@x^(0+256),w
  4431  00F0  0601               	xorwf	1,w
  4432  00F1  0021               	movlb	1	; select bank1
  4433  00F2  00B0               	movwf	(??_AsicPreCalc+1)^(0+128)
  4434  00F3  3141               	addfsr 1,1
  4435  00F4  0022               	movlb	2	; select bank2
  4436  00F5  0855               	movf	(AsicPreCalc@x+1)^(0+256),w
  4437  00F6  0601               	xorwf	1,w
  4438  00F7  0021               	movlb	1	; select bank1
  4439  00F8  00B1               	movwf	((??_AsicPreCalc+1)^(0+128)+1)
  4440  00F9  3141               	addfsr 1,1
  4441  00FA  0022               	movlb	2	; select bank2
  4442  00FB  0856               	movf	(AsicPreCalc@x+2)^(0+256),w
  4443  00FC  0601               	xorwf	1,w
  4444  00FD  0021               	movlb	1	; select bank1
  4445  00FE  00B2               	movwf	((??_AsicPreCalc+1)^(0+128)+2)
  4446  00FF  3141               	addfsr 1,1
  4447  0100  0022               	movlb	2	; select bank2
  4448  0101  0857               	movf	(AsicPreCalc@x+3)^(0+256),w
  4449  0102  0601               	xorwf	1,w
  4450  0103  0021               	movlb	1	; select bank1
  4451  0104  00B3               	movwf	((??_AsicPreCalc+1)^(0+128)+3)
  4452  0105  0833               	movf	(??_AsicPreCalc+4)^(0+128),w
  4453  0106  0022               	movlb	2	; select bank2
  4454  0107  00D7               	movwf	(AsicPreCalc@x+3)^(0+256)
  4455  0108  0021               	movlb	1	; select bank1
  4456  0109  0832               	movf	(??_AsicPreCalc+3)^(0+128),w
  4457  010A  0022               	movlb	2	; select bank2
  4458  010B  00D6               	movwf	(AsicPreCalc@x+2)^(0+256)
  4459  010C  0021               	movlb	1	; select bank1
  4460  010D  0831               	movf	(??_AsicPreCalc+2)^(0+128),w
  4461  010E  0022               	movlb	2	; select bank2
  4462  010F  00D5               	movwf	(AsicPreCalc@x+1)^(0+256)
  4463  0110  0021               	movlb	1	; select bank1
  4464  0111  0830               	movf	(??_AsicPreCalc+1)^(0+128),w
  4465  0112  0022               	movlb	2	; select bank2
  4466  0113  00D4               	movwf	AsicPreCalc@x^(0+256)
  4467                           
  4468                           ;asic.c: 332: x += K[n];
  4469  0114  0858               	movf	AsicPreCalc@n^(0+256),w
  4470  0115  0021               	movlb	1	; select bank1
  4471  0116  00AF               	movwf	??_AsicPreCalc^(0+128)
  4472  0117  3001               	movlw	1
  4473  0118                     u4675:	
  4474  0118  35AF               	lslf	??_AsicPreCalc^(0+128),f
  4475  0119  3EFF               	addlw	-1
  4476  011A  1D03               	skipz
  4477  011B  2918               	goto	u4675
  4478  011C  352F               	lslf	??_AsicPreCalc^(0+128),w
  4479  011D  3E20               	addlw	AsicPreCalc@K& (0+255)
  4480  011E  0086               	movwf	6
  4481  011F  3001               	movlw	1	; select bank2/3
  4482  0120  0087               	movwf	7
  4483  0121  3F40               	moviw [0]fsr1
  4484  0122  0022               	movlb	2	; select bank2
  4485  0123  07D4               	addwf	AsicPreCalc@x^(0+256),f
  4486  0124  3F41               	moviw [1]fsr1
  4487  0125  3DD5               	addwfc	(AsicPreCalc@x+1)^(0+256),f
  4488  0126  3F42               	moviw [2]fsr1
  4489  0127  3DD6               	addwfc	(AsicPreCalc@x+2)^(0+256),f
  4490  0128  3F43               	moviw [3]fsr1
  4491  0129  3DD7               	addwfc	(AsicPreCalc@x+3)^(0+256),f
  4492                           
  4493                           ;asic.c: 333: x += work->Merkle[n];
  4494  012A  0858               	movf	AsicPreCalc@n^(0+256),w
  4495  012B  0021               	movlb	1	; select bank1
  4496  012C  00AF               	movwf	??_AsicPreCalc^(0+128)
  4497  012D  01B0               	clrf	(??_AsicPreCalc^(0+128)+1)
  4498  012E  35AF               	lslf	??_AsicPreCalc^(0+128),f
  4499  012F  0DB0               	rlf	(??_AsicPreCalc^(0+128)+1),f
  4500  0130  35AF               	lslf	??_AsicPreCalc^(0+128),f
  4501  0131  0DB0               	rlf	(??_AsicPreCalc^(0+128)+1),f
  4502  0132  082F               	movf	??_AsicPreCalc^(0+128),w
  4503  0133  3E21               	addlw	33
  4504  0134  00B1               	movwf	(??_AsicPreCalc+2)^(0+128)
  4505  0135  3000               	movlw	0
  4506  0136  3D30               	addwfc	(??_AsicPreCalc+1)^(0+128),w
  4507  0137  00B2               	movwf	(??_AsicPreCalc+3)^(0+128)
  4508  0138  0831               	movf	(??_AsicPreCalc+2)^(0+128),w
  4509  0139  072D               	addwf	AsicPreCalc@work^(0+128),w
  4510  013A  0086               	movwf	6
  4511  013B  0832               	movf	(??_AsicPreCalc+3)^(0+128),w
  4512  013C  3D2E               	addwfc	(AsicPreCalc@work+1)^(0+128),w
  4513  013D  0087               	movwf	7
  4514  013E  3F40               	moviw [0]fsr1
  4515  013F  0022               	movlb	2	; select bank2
  4516  0140  07D4               	addwf	AsicPreCalc@x^(0+256),f
  4517  0141  3F41               	moviw [1]fsr1
  4518  0142  3DD5               	addwfc	(AsicPreCalc@x+1)^(0+256),f
  4519  0143  3F42               	moviw [2]fsr1
  4520  0144  3DD6               	addwfc	(AsicPreCalc@x+2)^(0+256),f
  4521  0145  3F43               	moviw [3]fsr1
  4522  0146  3DD7               	addwfc	(AsicPreCalc@x+3)^(0+256),f
  4523                           
  4524                           ;asic.c: 334: x += m[7-n];
  4525  0147  0358               	decf	AsicPreCalc@n^(0+256),w
  4526  0148  3AFF               	xorlw	255
  4527  0149  0021               	movlb	1	; select bank1
  4528  014A  00AF               	movwf	??_AsicPreCalc^(0+128)
  4529  014B  3001               	movlw	1
  4530  014C                     u4685:	
  4531  014C  35AF               	lslf	??_AsicPreCalc^(0+128),f
  4532  014D  3EFF               	addlw	-1
  4533  014E  1D03               	skipz
  4534  014F  294C               	goto	u4685
  4535  0150  352F               	lslf	??_AsicPreCalc^(0+128),w
  4536  0151  3E1C               	addlw	28
  4537  0152  3E2C               	addlw	AsicPreCalc@m& (0+255)
  4538  0153  0086               	movwf	6
  4539  0154  3001               	movlw	1	; select bank2/3
  4540  0155  0087               	movwf	7
  4541  0156  3F40               	moviw [0]fsr1
  4542  0157  0022               	movlb	2	; select bank2
  4543  0158  07D4               	addwf	AsicPreCalc@x^(0+256),f
  4544  0159  3F41               	moviw [1]fsr1
  4545  015A  3DD5               	addwfc	(AsicPreCalc@x+1)^(0+256),f
  4546  015B  3F42               	moviw [2]fsr1
  4547  015C  3DD6               	addwfc	(AsicPreCalc@x+2)^(0+256),f
  4548  015D  3F43               	moviw [3]fsr1
  4549  015E  3DD7               	addwfc	(AsicPreCalc@x+3)^(0+256),f
  4550                           
  4551                           ;asic.c: 335: y = rotate(m[4-n], 26);
  4552  015F  0358               	decf	AsicPreCalc@n^(0+256),w
  4553  0160  3AFF               	xorlw	255
  4554  0161  0021               	movlb	1	; select bank1
  4555  0162  00AF               	movwf	??_AsicPreCalc^(0+128)
  4556  0163  3001               	movlw	1
  4557  0164                     u4695:	
  4558  0164  35AF               	lslf	??_AsicPreCalc^(0+128),f
  4559  0165  3EFF               	addlw	-1
  4560  0166  1D03               	skipz
  4561  0167  2964               	goto	u4695
  4562  0168  352F               	lslf	??_AsicPreCalc^(0+128),w
  4563  0169  3E10               	addlw	16
  4564  016A  3E2C               	addlw	AsicPreCalc@m& (0+255)
  4565  016B  0086               	movwf	6
  4566  016C  3001               	movlw	1	; select bank2/3
  4567  016D  0087               	movwf	7
  4568  016E  3F40               	moviw [0]fsr1
  4569  016F  00A0               	movwf	?_rotate^(0+128)
  4570  0170  3F41               	moviw [1]fsr1
  4571  0171  00A1               	movwf	(?_rotate+1)^(0+128)
  4572  0172  3F42               	moviw [2]fsr1
  4573  0173  00A2               	movwf	(?_rotate+2)^(0+128)
  4574  0174  3F43               	moviw [3]fsr1
  4575  0175  00A3               	movwf	(?_rotate+3)^(0+128)
  4576  0176  301A               	movlw	26
  4577  0177  00B0               	movwf	(??_AsicPreCalc+1)^(0+128)
  4578  0178  0830               	movf	(??_AsicPreCalc+1)^(0+128),w
  4579  0179  00A4               	movwf	(?_rotate^(0+128)+4)
  4580  017A  319D  25BD  3180   	fcall	_rotate
  4581  017D  0021               	movlb	1	; select bank1
  4582  017E  0823               	movf	(?_rotate+3)^(0+128),w
  4583  017F  0022               	movlb	2	; select bank2
  4584  0180  00D3               	movwf	(AsicPreCalc@y+3)^(0+256)
  4585  0181  0021               	movlb	1	; select bank1
  4586  0182  0822               	movf	(?_rotate+2)^(0+128),w
  4587  0183  0022               	movlb	2	; select bank2
  4588  0184  00D2               	movwf	(AsicPreCalc@y+2)^(0+256)
  4589  0185  0021               	movlb	1	; select bank1
  4590  0186  0821               	movf	(?_rotate+1)^(0+128),w
  4591  0187  0022               	movlb	2	; select bank2
  4592  0188  00D1               	movwf	(AsicPreCalc@y+1)^(0+256)
  4593  0189  0021               	movlb	1	; select bank1
  4594  018A  0820               	movf	?_rotate^(0+128),w
  4595  018B  0022               	movlb	2	; select bank2
  4596  018C  00D0               	movwf	AsicPreCalc@y^(0+256)
  4597                           
  4598                           ;asic.c: 336: z = rotate(m[4-n], 21);
  4599  018D  0358               	decf	AsicPreCalc@n^(0+256),w
  4600  018E  3AFF               	xorlw	255
  4601  018F  0021               	movlb	1	; select bank1
  4602  0190  00AF               	movwf	??_AsicPreCalc^(0+128)
  4603  0191  3001               	movlw	1
  4604  0192                     u4705:	
  4605  0192  35AF               	lslf	??_AsicPreCalc^(0+128),f
  4606  0193  3EFF               	addlw	-1
  4607  0194  1D03               	skipz
  4608  0195  2992               	goto	u4705
  4609  0196  352F               	lslf	??_AsicPreCalc^(0+128),w
  4610  0197  3E10               	addlw	16
  4611  0198  3E2C               	addlw	AsicPreCalc@m& (0+255)
  4612  0199  0086               	movwf	6
  4613  019A  3001               	movlw	1	; select bank2/3
  4614  019B  0087               	movwf	7
  4615  019C  3F40               	moviw [0]fsr1
  4616  019D  00A0               	movwf	?_rotate^(0+128)
  4617  019E  3F41               	moviw [1]fsr1
  4618  019F  00A1               	movwf	(?_rotate+1)^(0+128)
  4619  01A0  3F42               	moviw [2]fsr1
  4620  01A1  00A2               	movwf	(?_rotate+2)^(0+128)
  4621  01A2  3F43               	moviw [3]fsr1
  4622  01A3  00A3               	movwf	(?_rotate+3)^(0+128)
  4623  01A4  3015               	movlw	21
  4624  01A5  00B0               	movwf	(??_AsicPreCalc+1)^(0+128)
  4625  01A6  0830               	movf	(??_AsicPreCalc+1)^(0+128),w
  4626  01A7  00A4               	movwf	(?_rotate^(0+128)+4)
  4627  01A8  319D  25BD  3180   	fcall	_rotate
  4628  01AB  0021               	movlb	1	; select bank1
  4629  01AC  0823               	movf	(?_rotate+3)^(0+128),w
  4630  01AD  0022               	movlb	2	; select bank2
  4631  01AE  00CF               	movwf	(AsicPreCalc@z+3)^(0+256)
  4632  01AF  0021               	movlb	1	; select bank1
  4633  01B0  0822               	movf	(?_rotate+2)^(0+128),w
  4634  01B1  0022               	movlb	2	; select bank2
  4635  01B2  00CE               	movwf	(AsicPreCalc@z+2)^(0+256)
  4636  01B3  0021               	movlb	1	; select bank1
  4637  01B4  0821               	movf	(?_rotate+1)^(0+128),w
  4638  01B5  0022               	movlb	2	; select bank2
  4639  01B6  00CD               	movwf	(AsicPreCalc@z+1)^(0+256)
  4640  01B7  0021               	movlb	1	; select bank1
  4641  01B8  0820               	movf	?_rotate^(0+128),w
  4642  01B9  0022               	movlb	2	; select bank2
  4643  01BA  00CC               	movwf	AsicPreCalc@z^(0+256)
  4644                           
  4645                           ;asic.c: 337: z = y^z;
  4646  01BB  0850               	movf	AsicPreCalc@y^(0+256),w
  4647  01BC  064C               	xorwf	AsicPreCalc@z^(0+256),w
  4648  01BD  0021               	movlb	1	; select bank1
  4649  01BE  00AF               	movwf	??_AsicPreCalc^(0+128)
  4650  01BF  0022               	movlb	2	; select bank2
  4651  01C0  0851               	movf	(AsicPreCalc@y+1)^(0+256),w
  4652  01C1  064D               	xorwf	(AsicPreCalc@z+1)^(0+256),w
  4653  01C2  0021               	movlb	1	; select bank1
  4654  01C3  00B0               	movwf	(??_AsicPreCalc^(0+128)+1)
  4655  01C4  0022               	movlb	2	; select bank2
  4656  01C5  0852               	movf	(AsicPreCalc@y+2)^(0+256),w
  4657  01C6  064E               	xorwf	(AsicPreCalc@z+2)^(0+256),w
  4658  01C7  0021               	movlb	1	; select bank1
  4659  01C8  00B1               	movwf	(??_AsicPreCalc^(0+128)+2)
  4660  01C9  0022               	movlb	2	; select bank2
  4661  01CA  0853               	movf	(AsicPreCalc@y+3)^(0+256),w
  4662  01CB  064F               	xorwf	(AsicPreCalc@z+3)^(0+256),w
  4663  01CC  0021               	movlb	1	; select bank1
  4664  01CD  00B2               	movwf	(??_AsicPreCalc^(0+128)+3)
  4665  01CE  0832               	movf	(??_AsicPreCalc+3)^(0+128),w
  4666  01CF  0022               	movlb	2	; select bank2
  4667  01D0  00CF               	movwf	(AsicPreCalc@z+3)^(0+256)
  4668  01D1  0021               	movlb	1	; select bank1
  4669  01D2  0831               	movf	(??_AsicPreCalc+2)^(0+128),w
  4670  01D3  0022               	movlb	2	; select bank2
  4671  01D4  00CE               	movwf	(AsicPreCalc@z+2)^(0+256)
  4672  01D5  0021               	movlb	1	; select bank1
  4673  01D6  0830               	movf	(??_AsicPreCalc+1)^(0+128),w
  4674  01D7  0022               	movlb	2	; select bank2
  4675  01D8  00CD               	movwf	(AsicPreCalc@z+1)^(0+256)
  4676  01D9  0021               	movlb	1	; select bank1
  4677  01DA  082F               	movf	??_AsicPreCalc^(0+128),w
  4678  01DB  0022               	movlb	2	; select bank2
  4679  01DC  00CC               	movwf	AsicPreCalc@z^(0+256)
  4680                           
  4681                           ;asic.c: 338: y = rotate(m[4-n], 7);
  4682  01DD  0358               	decf	AsicPreCalc@n^(0+256),w
  4683  01DE  3AFF               	xorlw	255
  4684  01DF  0021               	movlb	1	; select bank1
  4685  01E0  00AF               	movwf	??_AsicPreCalc^(0+128)
  4686  01E1  3001               	movlw	1
  4687  01E2                     u4715:	
  4688  01E2  35AF               	lslf	??_AsicPreCalc^(0+128),f
  4689  01E3  3EFF               	addlw	-1
  4690  01E4  1D03               	skipz
  4691  01E5  29E2               	goto	u4715
  4692  01E6  352F               	lslf	??_AsicPreCalc^(0+128),w
  4693  01E7  3E10               	addlw	16
  4694  01E8  3E2C               	addlw	AsicPreCalc@m& (0+255)
  4695  01E9  0086               	movwf	6
  4696  01EA  3001               	movlw	1	; select bank2/3
  4697  01EB  0087               	movwf	7
  4698  01EC  3F40               	moviw [0]fsr1
  4699  01ED  00A0               	movwf	?_rotate^(0+128)
  4700  01EE  3F41               	moviw [1]fsr1
  4701  01EF  00A1               	movwf	(?_rotate+1)^(0+128)
  4702  01F0  3F42               	moviw [2]fsr1
  4703  01F1  00A2               	movwf	(?_rotate+2)^(0+128)
  4704  01F2  3F43               	moviw [3]fsr1
  4705  01F3  00A3               	movwf	(?_rotate+3)^(0+128)
  4706  01F4  3007               	movlw	7
  4707  01F5  00B0               	movwf	(??_AsicPreCalc+1)^(0+128)
  4708  01F6  0830               	movf	(??_AsicPreCalc+1)^(0+128),w
  4709  01F7  00A4               	movwf	(?_rotate^(0+128)+4)
  4710  01F8  319D  25BD  3180   	fcall	_rotate
  4711  01FB  0021               	movlb	1	; select bank1
  4712  01FC  0823               	movf	(?_rotate+3)^(0+128),w
  4713  01FD  0022               	movlb	2	; select bank2
  4714  01FE  00D3               	movwf	(AsicPreCalc@y+3)^(0+256)
  4715  01FF  0021               	movlb	1	; select bank1
  4716  0200  0822               	movf	(?_rotate+2)^(0+128),w
  4717  0201  0022               	movlb	2	; select bank2
  4718  0202  00D2               	movwf	(AsicPreCalc@y+2)^(0+256)
  4719  0203  0021               	movlb	1	; select bank1
  4720  0204  0821               	movf	(?_rotate+1)^(0+128),w
  4721  0205  0022               	movlb	2	; select bank2
  4722  0206  00D1               	movwf	(AsicPreCalc@y+1)^(0+256)
  4723  0207  0021               	movlb	1	; select bank1
  4724  0208  0820               	movf	?_rotate^(0+128),w
  4725  0209  0022               	movlb	2	; select bank2
  4726  020A  00D0               	movwf	AsicPreCalc@y^(0+256)
  4727                           
  4728                           ;asic.c: 339: z = y^z;
  4729  020B  0850               	movf	AsicPreCalc@y^(0+256),w
  4730  020C  064C               	xorwf	AsicPreCalc@z^(0+256),w
  4731  020D  0021               	movlb	1	; select bank1
  4732  020E  00AF               	movwf	??_AsicPreCalc^(0+128)
  4733  020F  0022               	movlb	2	; select bank2
  4734  0210  0851               	movf	(AsicPreCalc@y+1)^(0+256),w
  4735  0211  064D               	xorwf	(AsicPreCalc@z+1)^(0+256),w
  4736  0212  0021               	movlb	1	; select bank1
  4737  0213  00B0               	movwf	(??_AsicPreCalc^(0+128)+1)
  4738  0214  0022               	movlb	2	; select bank2
  4739  0215  0852               	movf	(AsicPreCalc@y+2)^(0+256),w
  4740  0216  064E               	xorwf	(AsicPreCalc@z+2)^(0+256),w
  4741  0217  0021               	movlb	1	; select bank1
  4742  0218  00B1               	movwf	(??_AsicPreCalc^(0+128)+2)
  4743  0219  0022               	movlb	2	; select bank2
  4744  021A  0853               	movf	(AsicPreCalc@y+3)^(0+256),w
  4745  021B  064F               	xorwf	(AsicPreCalc@z+3)^(0+256),w
  4746  021C  0021               	movlb	1	; select bank1
  4747  021D  00B2               	movwf	(??_AsicPreCalc^(0+128)+3)
  4748  021E  0832               	movf	(??_AsicPreCalc+3)^(0+128),w
  4749  021F  0022               	movlb	2	; select bank2
  4750  0220  00CF               	movwf	(AsicPreCalc@z+3)^(0+256)
  4751  0221  0021               	movlb	1	; select bank1
  4752  0222  0831               	movf	(??_AsicPreCalc+2)^(0+128),w
  4753  0223  0022               	movlb	2	; select bank2
  4754  0224  00CE               	movwf	(AsicPreCalc@z+2)^(0+256)
  4755  0225  0021               	movlb	1	; select bank1
  4756  0226  0830               	movf	(??_AsicPreCalc+1)^(0+128),w
  4757  0227  0022               	movlb	2	; select bank2
  4758  0228  00CD               	movwf	(AsicPreCalc@z+1)^(0+256)
  4759  0229  0021               	movlb	1	; select bank1
  4760  022A  082F               	movf	??_AsicPreCalc^(0+128),w
  4761  022B  0022               	movlb	2	; select bank2
  4762  022C  00CC               	movwf	AsicPreCalc@z^(0+256)
  4763                           
  4764                           ;asic.c: 340: m[7-n] = z+x;
  4765  022D  084C               	movf	AsicPreCalc@z^(0+256),w
  4766  022E  0754               	addwf	AsicPreCalc@x^(0+256),w
  4767  022F  0021               	movlb	1	; select bank1
  4768  0230  00AF               	movwf	??_AsicPreCalc^(0+128)
  4769  0231  0022               	movlb	2	; select bank2
  4770  0232  084D               	movf	(AsicPreCalc@z+1)^(0+256),w
  4771  0233  3D55               	addwfc	(AsicPreCalc@x+1)^(0+256),w
  4772  0234  0021               	movlb	1	; select bank1
  4773  0235  00B0               	movwf	(??_AsicPreCalc^(0+128)+1)
  4774  0236  0022               	movlb	2	; select bank2
  4775  0237  084E               	movf	(AsicPreCalc@z+2)^(0+256),w
  4776  0238  3D56               	addwfc	(AsicPreCalc@x+2)^(0+256),w
  4777  0239  0021               	movlb	1	; select bank1
  4778  023A  00B1               	movwf	(??_AsicPreCalc^(0+128)+2)
  4779  023B  0022               	movlb	2	; select bank2
  4780  023C  084F               	movf	(AsicPreCalc@z+3)^(0+256),w
  4781  023D  3D57               	addwfc	(AsicPreCalc@x+3)^(0+256),w
  4782  023E  0021               	movlb	1	; select bank1
  4783  023F  00B2               	movwf	(??_AsicPreCalc^(0+128)+3)
  4784  0240  0022               	movlb	2	; select bank2
  4785  0241  0358               	decf	AsicPreCalc@n^(0+256),w
  4786  0242  3AFF               	xorlw	255
  4787  0243  0021               	movlb	1	; select bank1
  4788  0244  00B3               	movwf	(??_AsicPreCalc+4)^(0+128)
  4789  0245  3001               	movlw	1
  4790  0246                     u4725:	
  4791  0246  35B3               	lslf	(??_AsicPreCalc+4)^(0+128),f
  4792  0247  3EFF               	addlw	-1
  4793  0248  1D03               	skipz
  4794  0249  2A46               	goto	u4725
  4795  024A  3533               	lslf	(??_AsicPreCalc+4)^(0+128),w
  4796  024B  3E1C               	addlw	28
  4797  024C  3E2C               	addlw	AsicPreCalc@m& (0+255)
  4798  024D  0086               	movwf	6
  4799  024E  3001               	movlw	1	; select bank2/3
  4800  024F  0087               	movwf	7
  4801  0250  082F               	movf	??_AsicPreCalc^(0+128),w
  4802  0251  3FC0               	movwi [0]fsr1
  4803  0252  0830               	movf	(??_AsicPreCalc+1)^(0+128),w
  4804  0253  3FC1               	movwi [1]fsr1
  4805  0254  0831               	movf	(??_AsicPreCalc+2)^(0+128),w
  4806  0255  3FC2               	movwi [2]fsr1
  4807  0256  0832               	movf	(??_AsicPreCalc+3)^(0+128),w
  4808  0257  3FC3               	movwi [3]fsr1
  4809                           
  4810                           ;asic.c: 341: m[3-n] = m[3-n] + m[7-n];
  4811  0258  0022               	movlb	2	; select bank2
  4812  0259  0358               	decf	AsicPreCalc@n^(0+256),w
  4813  025A  3AFF               	xorlw	255
  4814  025B  0021               	movlb	1	; select bank1
  4815  025C  00AF               	movwf	??_AsicPreCalc^(0+128)
  4816  025D  3001               	movlw	1
  4817  025E                     u4735:	
  4818  025E  35AF               	lslf	??_AsicPreCalc^(0+128),f
  4819  025F  3EFF               	addlw	-1
  4820  0260  1D03               	skipz
  4821  0261  2A5E               	goto	u4735
  4822  0262  352F               	lslf	??_AsicPreCalc^(0+128),w
  4823  0263  3E1C               	addlw	28
  4824  0264  3E2C               	addlw	AsicPreCalc@m& (0+255)
  4825  0265  0086               	movwf	6
  4826  0266  3001               	movlw	1	; select bank2/3
  4827  0267  0087               	movwf	7
  4828  0268  3F40               	moviw [0]fsr1
  4829  0269  00B0               	movwf	(??_AsicPreCalc+1)^(0+128)
  4830  026A  3F41               	moviw [1]fsr1
  4831  026B  00B1               	movwf	((??_AsicPreCalc+1)^(0+128)+1)
  4832  026C  3F42               	moviw [2]fsr1
  4833  026D  00B2               	movwf	((??_AsicPreCalc+1)^(0+128)+2)
  4834  026E  3F43               	moviw [3]fsr1
  4835  026F  00B3               	movwf	((??_AsicPreCalc+1)^(0+128)+3)
  4836  0270  0022               	movlb	2	; select bank2
  4837  0271  0358               	decf	AsicPreCalc@n^(0+256),w
  4838  0272  3AFF               	xorlw	255
  4839  0273  0021               	movlb	1	; select bank1
  4840  0274  00B4               	movwf	(??_AsicPreCalc+5)^(0+128)
  4841  0275  3001               	movlw	1
  4842  0276                     u4745:	
  4843  0276  35B4               	lslf	(??_AsicPreCalc+5)^(0+128),f
  4844  0277  3EFF               	addlw	-1
  4845  0278  1D03               	skipz
  4846  0279  2A76               	goto	u4745
  4847  027A  3534               	lslf	(??_AsicPreCalc+5)^(0+128),w
  4848  027B  3E0C               	addlw	12
  4849  027C  3E2C               	addlw	AsicPreCalc@m& (0+255)
  4850  027D  0086               	movwf	6
  4851  027E  3001               	movlw	1	; select bank2/3
  4852  027F  0087               	movwf	7
  4853  0280  3F40               	moviw [0]fsr1
  4854  0281  07B0               	addwf	(??_AsicPreCalc+1)^(0+128),f
  4855  0282  3F41               	moviw [1]fsr1
  4856  0283  3DB1               	addwfc	((??_AsicPreCalc+1)^(0+128)+1),f
  4857  0284  3F42               	moviw [2]fsr1
  4858  0285  3DB2               	addwfc	((??_AsicPreCalc+1)^(0+128)+2),f
  4859  0286  3F43               	moviw [3]fsr1
  4860  0287  3DB3               	addwfc	((??_AsicPreCalc+1)^(0+128)+3),f
  4861  0288  0022               	movlb	2	; select bank2
  4862  0289  0358               	decf	AsicPreCalc@n^(0+256),w
  4863  028A  3AFF               	xorlw	255
  4864  028B  0021               	movlb	1	; select bank1
  4865  028C  00B5               	movwf	(??_AsicPreCalc+6)^(0+128)
  4866  028D  3001               	movlw	1
  4867  028E                     u4755:	
  4868  028E  35B5               	lslf	(??_AsicPreCalc+6)^(0+128),f
  4869  028F  3EFF               	addlw	-1
  4870  0290  1D03               	skipz
  4871  0291  2A8E               	goto	u4755
  4872  0292  3535               	lslf	(??_AsicPreCalc+6)^(0+128),w
  4873  0293  3E0C               	addlw	12
  4874  0294  3E2C               	addlw	AsicPreCalc@m& (0+255)
  4875  0295  0086               	movwf	6
  4876  0296  3001               	movlw	1	; select bank2/3
  4877  0297  0087               	movwf	7
  4878  0298  0830               	movf	(??_AsicPreCalc+1)^(0+128),w
  4879  0299  3FC0               	movwi [0]fsr1
  4880  029A  0831               	movf	(??_AsicPreCalc+2)^(0+128),w
  4881  029B  3FC1               	movwi [1]fsr1
  4882  029C  0832               	movf	(??_AsicPreCalc+3)^(0+128),w
  4883  029D  3FC2               	movwi [2]fsr1
  4884  029E  0833               	movf	(??_AsicPreCalc+4)^(0+128),w
  4885  029F  3FC3               	movwi [3]fsr1
  4886                           
  4887                           ;asic.c: 342: x = rotate(m[((0-n)&7)], 30);
  4888  02A0  0022               	movlb	2	; select bank2
  4889  02A1  0358               	decf	AsicPreCalc@n^(0+256),w
  4890  02A2  3AFF               	xorlw	255
  4891  02A3  3907               	andlw	7
  4892  02A4  0021               	movlb	1	; select bank1
  4893  02A5  00AF               	movwf	??_AsicPreCalc^(0+128)
  4894  02A6  3001               	movlw	1
  4895  02A7                     u4765:	
  4896  02A7  35AF               	lslf	??_AsicPreCalc^(0+128),f
  4897  02A8  3EFF               	addlw	-1
  4898  02A9  1D03               	skipz
  4899  02AA  2AA7               	goto	u4765
  4900  02AB  352F               	lslf	??_AsicPreCalc^(0+128),w
  4901  02AC  3E2C               	addlw	AsicPreCalc@m& (0+255)
  4902  02AD  0086               	movwf	6
  4903  02AE  3001               	movlw	1	; select bank2/3
  4904  02AF  0087               	movwf	7
  4905  02B0  3F40               	moviw [0]fsr1
  4906  02B1  00A0               	movwf	?_rotate^(0+128)
  4907  02B2  3F41               	moviw [1]fsr1
  4908  02B3  00A1               	movwf	(?_rotate+1)^(0+128)
  4909  02B4  3F42               	moviw [2]fsr1
  4910  02B5  00A2               	movwf	(?_rotate+2)^(0+128)
  4911  02B6  3F43               	moviw [3]fsr1
  4912  02B7  00A3               	movwf	(?_rotate+3)^(0+128)
  4913  02B8  301E               	movlw	30
  4914  02B9  00B0               	movwf	(??_AsicPreCalc+1)^(0+128)
  4915  02BA  0830               	movf	(??_AsicPreCalc+1)^(0+128),w
  4916  02BB  00A4               	movwf	(?_rotate^(0+128)+4)
  4917  02BC  319D  25BD  3180   	fcall	_rotate
  4918  02BF  0021               	movlb	1	; select bank1
  4919  02C0  0823               	movf	(?_rotate+3)^(0+128),w
  4920  02C1  0022               	movlb	2	; select bank2
  4921  02C2  00D7               	movwf	(AsicPreCalc@x+3)^(0+256)
  4922  02C3  0021               	movlb	1	; select bank1
  4923  02C4  0822               	movf	(?_rotate+2)^(0+128),w
  4924  02C5  0022               	movlb	2	; select bank2
  4925  02C6  00D6               	movwf	(AsicPreCalc@x+2)^(0+256)
  4926  02C7  0021               	movlb	1	; select bank1
  4927  02C8  0821               	movf	(?_rotate+1)^(0+128),w
  4928  02C9  0022               	movlb	2	; select bank2
  4929  02CA  00D5               	movwf	(AsicPreCalc@x+1)^(0+256)
  4930  02CB  0021               	movlb	1	; select bank1
  4931  02CC  0820               	movf	?_rotate^(0+128),w
  4932  02CD  0022               	movlb	2	; select bank2
  4933  02CE  00D4               	movwf	AsicPreCalc@x^(0+256)
  4934                           
  4935                           ;asic.c: 343: y = rotate(m[((0-n)&7)], 19);
  4936  02CF  0358               	decf	AsicPreCalc@n^(0+256),w
  4937  02D0  3AFF               	xorlw	255
  4938  02D1  3907               	andlw	7
  4939  02D2  0021               	movlb	1	; select bank1
  4940  02D3  00AF               	movwf	??_AsicPreCalc^(0+128)
  4941  02D4  3001               	movlw	1
  4942  02D5                     u4775:	
  4943  02D5  35AF               	lslf	??_AsicPreCalc^(0+128),f
  4944  02D6  3EFF               	addlw	-1
  4945  02D7  1D03               	skipz
  4946  02D8  2AD5               	goto	u4775
  4947  02D9  352F               	lslf	??_AsicPreCalc^(0+128),w
  4948  02DA  3E2C               	addlw	AsicPreCalc@m& (0+255)
  4949  02DB  0086               	movwf	6
  4950  02DC  3001               	movlw	1	; select bank2/3
  4951  02DD  0087               	movwf	7
  4952  02DE  3F40               	moviw [0]fsr1
  4953  02DF  00A0               	movwf	?_rotate^(0+128)
  4954  02E0  3F41               	moviw [1]fsr1
  4955  02E1  00A1               	movwf	(?_rotate+1)^(0+128)
  4956  02E2  3F42               	moviw [2]fsr1
  4957  02E3  00A2               	movwf	(?_rotate+2)^(0+128)
  4958  02E4  3F43               	moviw [3]fsr1
  4959  02E5  00A3               	movwf	(?_rotate+3)^(0+128)
  4960  02E6  3013               	movlw	19
  4961  02E7  00B0               	movwf	(??_AsicPreCalc+1)^(0+128)
  4962  02E8  0830               	movf	(??_AsicPreCalc+1)^(0+128),w
  4963  02E9  00A4               	movwf	(?_rotate^(0+128)+4)
  4964  02EA  319D  25BD  3180   	fcall	_rotate
  4965  02ED  0021               	movlb	1	; select bank1
  4966  02EE  0823               	movf	(?_rotate+3)^(0+128),w
  4967  02EF  0022               	movlb	2	; select bank2
  4968  02F0  00D3               	movwf	(AsicPreCalc@y+3)^(0+256)
  4969  02F1  0021               	movlb	1	; select bank1
  4970  02F2  0822               	movf	(?_rotate+2)^(0+128),w
  4971  02F3  0022               	movlb	2	; select bank2
  4972  02F4  00D2               	movwf	(AsicPreCalc@y+2)^(0+256)
  4973  02F5  0021               	movlb	1	; select bank1
  4974  02F6  0821               	movf	(?_rotate+1)^(0+128),w
  4975  02F7  0022               	movlb	2	; select bank2
  4976  02F8  00D1               	movwf	(AsicPreCalc@y+1)^(0+256)
  4977  02F9  0021               	movlb	1	; select bank1
  4978  02FA  0820               	movf	?_rotate^(0+128),w
  4979  02FB  0022               	movlb	2	; select bank2
  4980  02FC  00D0               	movwf	AsicPreCalc@y^(0+256)
  4981                           
  4982                           ;asic.c: 344: y = y^x;
  4983  02FD  0850               	movf	AsicPreCalc@y^(0+256),w
  4984  02FE  0654               	xorwf	AsicPreCalc@x^(0+256),w
  4985  02FF  0021               	movlb	1	; select bank1
  4986  0300  00AF               	movwf	??_AsicPreCalc^(0+128)
  4987  0301  0022               	movlb	2	; select bank2
  4988  0302  0851               	movf	(AsicPreCalc@y+1)^(0+256),w
  4989  0303  0655               	xorwf	(AsicPreCalc@x+1)^(0+256),w
  4990  0304  0021               	movlb	1	; select bank1
  4991  0305  00B0               	movwf	(??_AsicPreCalc^(0+128)+1)
  4992  0306  0022               	movlb	2	; select bank2
  4993  0307  0852               	movf	(AsicPreCalc@y+2)^(0+256),w
  4994  0308  0656               	xorwf	(AsicPreCalc@x+2)^(0+256),w
  4995  0309  0021               	movlb	1	; select bank1
  4996  030A  00B1               	movwf	(??_AsicPreCalc^(0+128)+2)
  4997  030B  0022               	movlb	2	; select bank2
  4998  030C  0853               	movf	(AsicPreCalc@y+3)^(0+256),w
  4999  030D  0657               	xorwf	(AsicPreCalc@x+3)^(0+256),w
  5000  030E  0021               	movlb	1	; select bank1
  5001  030F  00B2               	movwf	(??_AsicPreCalc^(0+128)+3)
  5002  0310  0832               	movf	(??_AsicPreCalc+3)^(0+128),w
  5003  0311  0022               	movlb	2	; select bank2
  5004  0312  00D3               	movwf	(AsicPreCalc@y+3)^(0+256)
  5005  0313  0021               	movlb	1	; select bank1
  5006  0314  0831               	movf	(??_AsicPreCalc+2)^(0+128),w
  5007  0315  0022               	movlb	2	; select bank2
  5008  0316  00D2               	movwf	(AsicPreCalc@y+2)^(0+256)
  5009  0317  0021               	movlb	1	; select bank1
  5010  0318  0830               	movf	(??_AsicPreCalc+1)^(0+128),w
  5011  0319  0022               	movlb	2	; select bank2
  5012  031A  00D1               	movwf	(AsicPreCalc@y+1)^(0+256)
  5013  031B  0021               	movlb	1	; select bank1
  5014  031C  082F               	movf	??_AsicPreCalc^(0+128),w
  5015  031D  0022               	movlb	2	; select bank2
  5016  031E  00D0               	movwf	AsicPreCalc@y^(0+256)
  5017                           
  5018                           ;asic.c: 345: x = rotate(m[((0-n)&7)], 10);
  5019  031F  0358               	decf	AsicPreCalc@n^(0+256),w
  5020  0320  3AFF               	xorlw	255
  5021  0321  3907               	andlw	7
  5022  0322  0021               	movlb	1	; select bank1
  5023  0323  00AF               	movwf	??_AsicPreCalc^(0+128)
  5024  0324  3001               	movlw	1
  5025  0325                     u4785:	
  5026  0325  35AF               	lslf	??_AsicPreCalc^(0+128),f
  5027  0326  3EFF               	addlw	-1
  5028  0327  1D03               	skipz
  5029  0328  2B25               	goto	u4785
  5030  0329  352F               	lslf	??_AsicPreCalc^(0+128),w
  5031  032A  3E2C               	addlw	AsicPreCalc@m& (0+255)
  5032  032B  0086               	movwf	6
  5033  032C  3001               	movlw	1	; select bank2/3
  5034  032D  0087               	movwf	7
  5035  032E  3F40               	moviw [0]fsr1
  5036  032F  00A0               	movwf	?_rotate^(0+128)
  5037  0330  3F41               	moviw [1]fsr1
  5038  0331  00A1               	movwf	(?_rotate+1)^(0+128)
  5039  0332  3F42               	moviw [2]fsr1
  5040  0333  00A2               	movwf	(?_rotate+2)^(0+128)
  5041  0334  3F43               	moviw [3]fsr1
  5042  0335  00A3               	movwf	(?_rotate+3)^(0+128)
  5043  0336  300A               	movlw	10
  5044  0337  00B0               	movwf	(??_AsicPreCalc+1)^(0+128)
  5045  0338  0830               	movf	(??_AsicPreCalc+1)^(0+128),w
  5046  0339  00A4               	movwf	(?_rotate^(0+128)+4)
  5047  033A  319D  25BD  3180   	fcall	_rotate
  5048  033D  0021               	movlb	1	; select bank1
  5049  033E  0823               	movf	(?_rotate+3)^(0+128),w
  5050  033F  0022               	movlb	2	; select bank2
  5051  0340  00D7               	movwf	(AsicPreCalc@x+3)^(0+256)
  5052  0341  0021               	movlb	1	; select bank1
  5053  0342  0822               	movf	(?_rotate+2)^(0+128),w
  5054  0343  0022               	movlb	2	; select bank2
  5055  0344  00D6               	movwf	(AsicPreCalc@x+2)^(0+256)
  5056  0345  0021               	movlb	1	; select bank1
  5057  0346  0821               	movf	(?_rotate+1)^(0+128),w
  5058  0347  0022               	movlb	2	; select bank2
  5059  0348  00D5               	movwf	(AsicPreCalc@x+1)^(0+256)
  5060  0349  0021               	movlb	1	; select bank1
  5061  034A  0820               	movf	?_rotate^(0+128),w
  5062  034B  0022               	movlb	2	; select bank2
  5063  034C  00D4               	movwf	AsicPreCalc@x^(0+256)
  5064                           
  5065                           ;asic.c: 346: y = x^y;
  5066  034D  0854               	movf	AsicPreCalc@x^(0+256),w
  5067  034E  0650               	xorwf	AsicPreCalc@y^(0+256),w
  5068  034F  0021               	movlb	1	; select bank1
  5069  0350  00AF               	movwf	??_AsicPreCalc^(0+128)
  5070  0351  0022               	movlb	2	; select bank2
  5071  0352  0855               	movf	(AsicPreCalc@x+1)^(0+256),w
  5072  0353  0651               	xorwf	(AsicPreCalc@y+1)^(0+256),w
  5073  0354  0021               	movlb	1	; select bank1
  5074  0355  00B0               	movwf	(??_AsicPreCalc^(0+128)+1)
  5075  0356  0022               	movlb	2	; select bank2
  5076  0357  0856               	movf	(AsicPreCalc@x+2)^(0+256),w
  5077  0358  0652               	xorwf	(AsicPreCalc@y+2)^(0+256),w
  5078  0359  0021               	movlb	1	; select bank1
  5079  035A  00B1               	movwf	(??_AsicPreCalc^(0+128)+2)
  5080  035B  0022               	movlb	2	; select bank2
  5081  035C  0857               	movf	(AsicPreCalc@x+3)^(0+256),w
  5082  035D  0653               	xorwf	(AsicPreCalc@y+3)^(0+256),w
  5083  035E  0021               	movlb	1	; select bank1
  5084  035F  00B2               	movwf	(??_AsicPreCalc^(0+128)+3)
  5085  0360  0832               	movf	(??_AsicPreCalc+3)^(0+128),w
  5086  0361  0022               	movlb	2	; select bank2
  5087  0362  00D3               	movwf	(AsicPreCalc@y+3)^(0+256)
  5088  0363  0021               	movlb	1	; select bank1
  5089  0364  0831               	movf	(??_AsicPreCalc+2)^(0+128),w
  5090  0365  0022               	movlb	2	; select bank2
  5091  0366  00D2               	movwf	(AsicPreCalc@y+2)^(0+256)
  5092  0367  0021               	movlb	1	; select bank1
  5093  0368  0830               	movf	(??_AsicPreCalc+1)^(0+128),w
  5094  0369  0022               	movlb	2	; select bank2
  5095  036A  00D1               	movwf	(AsicPreCalc@y+1)^(0+256)
  5096  036B  0021               	movlb	1	; select bank1
  5097  036C  082F               	movf	??_AsicPreCalc^(0+128),w
  5098  036D  0022               	movlb	2	; select bank2
  5099  036E  00D0               	movwf	AsicPreCalc@y^(0+256)
  5100                           
  5101                           ;asic.c: 347: x = m[((0-n)&7)] | m[((1-n)&7)];
  5102  036F  0358               	decf	AsicPreCalc@n^(0+256),w
  5103  0370  3AFF               	xorlw	255
  5104  0371  3E01               	addlw	1
  5105  0372  3907               	andlw	7
  5106  0373  0021               	movlb	1	; select bank1
  5107  0374  00AF               	movwf	??_AsicPreCalc^(0+128)
  5108  0375  3001               	movlw	1
  5109  0376                     u4795:	
  5110  0376  35AF               	lslf	??_AsicPreCalc^(0+128),f
  5111  0377  3EFF               	addlw	-1
  5112  0378  1D03               	skipz
  5113  0379  2B76               	goto	u4795
  5114  037A  352F               	lslf	??_AsicPreCalc^(0+128),w
  5115  037B  3E2C               	addlw	AsicPreCalc@m& (0+255)
  5116  037C  0086               	movwf	6
  5117  037D  3001               	movlw	1	; select bank2/3
  5118  037E  0087               	movwf	7
  5119  037F  3F40               	moviw [0]fsr1
  5120  0380  00B0               	movwf	(??_AsicPreCalc+1)^(0+128)
  5121  0381  3F41               	moviw [1]fsr1
  5122  0382  00B1               	movwf	((??_AsicPreCalc+1)^(0+128)+1)
  5123  0383  3F42               	moviw [2]fsr1
  5124  0384  00B2               	movwf	((??_AsicPreCalc+1)^(0+128)+2)
  5125  0385  3F43               	moviw [3]fsr1
  5126  0386  00B3               	movwf	((??_AsicPreCalc+1)^(0+128)+3)
  5127  0387  0022               	movlb	2	; select bank2
  5128  0388  0358               	decf	AsicPreCalc@n^(0+256),w
  5129  0389  3AFF               	xorlw	255
  5130  038A  3907               	andlw	7
  5131  038B  0021               	movlb	1	; select bank1
  5132  038C  00B4               	movwf	(??_AsicPreCalc+5)^(0+128)
  5133  038D  3001               	movlw	1
  5134  038E                     u4805:	
  5135  038E  35B4               	lslf	(??_AsicPreCalc+5)^(0+128),f
  5136  038F  3EFF               	addlw	-1
  5137  0390  1D03               	skipz
  5138  0391  2B8E               	goto	u4805
  5139  0392  3534               	lslf	(??_AsicPreCalc+5)^(0+128),w
  5140  0393  3E2C               	addlw	AsicPreCalc@m& (0+255)
  5141  0394  0086               	movwf	6
  5142  0395  3001               	movlw	1	; select bank2/3
  5143  0396  0087               	movwf	7
  5144  0397  3F40               	moviw [0]fsr1
  5145  0398  00B5               	movwf	(??_AsicPreCalc+6)^(0+128)
  5146  0399  3F41               	moviw [1]fsr1
  5147  039A  00B6               	movwf	((??_AsicPreCalc+6)^(0+128)+1)
  5148  039B  3F42               	moviw [2]fsr1
  5149  039C  00B7               	movwf	((??_AsicPreCalc+6)^(0+128)+2)
  5150  039D  3F43               	moviw [3]fsr1
  5151  039E  00B8               	movwf	((??_AsicPreCalc+6)^(0+128)+3)
  5152  039F  0830               	movf	(??_AsicPreCalc+1)^(0+128),w
  5153  03A0  0435               	iorwf	(??_AsicPreCalc+6)^(0+128),w
  5154  03A1  0022               	movlb	2	; select bank2
  5155  03A2  00D4               	movwf	AsicPreCalc@x^(0+256)
  5156  03A3  0021               	movlb	1	; select bank1
  5157  03A4  0831               	movf	(??_AsicPreCalc+2)^(0+128),w
  5158  03A5  0436               	iorwf	(??_AsicPreCalc+7)^(0+128),w
  5159  03A6  0022               	movlb	2	; select bank2
  5160  03A7  00D5               	movwf	(AsicPreCalc@x+1)^(0+256)
  5161  03A8  0021               	movlb	1	; select bank1
  5162  03A9  0832               	movf	(??_AsicPreCalc+3)^(0+128),w
  5163  03AA  0437               	iorwf	(??_AsicPreCalc+8)^(0+128),w
  5164  03AB  0022               	movlb	2	; select bank2
  5165  03AC  00D6               	movwf	(AsicPreCalc@x+2)^(0+256)
  5166  03AD  0021               	movlb	1	; select bank1
  5167  03AE  0833               	movf	(??_AsicPreCalc+4)^(0+128),w
  5168  03AF  0438               	iorwf	(??_AsicPreCalc+9)^(0+128),w
  5169  03B0  0022               	movlb	2	; select bank2
  5170  03B1  00D7               	movwf	(AsicPreCalc@x+3)^(0+256)
  5171                           
  5172                           ;asic.c: 348: x = m[((2-n)&7)] & x;
  5173  03B2  0358               	decf	AsicPreCalc@n^(0+256),w
  5174  03B3  3AFF               	xorlw	255
  5175  03B4  3E02               	addlw	2
  5176  03B5  3907               	andlw	7
  5177  03B6  0021               	movlb	1	; select bank1
  5178  03B7  00AF               	movwf	??_AsicPreCalc^(0+128)
  5179  03B8  3001               	movlw	1
  5180  03B9                     u4815:	
  5181  03B9  35AF               	lslf	??_AsicPreCalc^(0+128),f
  5182  03BA  3EFF               	addlw	-1
  5183  03BB  1D03               	skipz
  5184  03BC  2BB9               	goto	u4815
  5185  03BD  352F               	lslf	??_AsicPreCalc^(0+128),w
  5186  03BE  3E2C               	addlw	AsicPreCalc@m& (0+255)
  5187  03BF  0086               	movwf	6
  5188  03C0  3001               	movlw	1	; select bank2/3
  5189  03C1  0087               	movwf	7
  5190  03C2  0022               	movlb	2	; select bank2
  5191  03C3  0854               	movf	AsicPreCalc@x^(0+256),w
  5192  03C4  0501               	andwf	1,w
  5193  03C5  0021               	movlb	1	; select bank1
  5194  03C6  00B0               	movwf	(??_AsicPreCalc+1)^(0+128)
  5195  03C7  3141               	addfsr 1,1
  5196  03C8  0022               	movlb	2	; select bank2
  5197  03C9  0855               	movf	(AsicPreCalc@x+1)^(0+256),w
  5198  03CA  0501               	andwf	1,w
  5199  03CB  0021               	movlb	1	; select bank1
  5200  03CC  00B1               	movwf	((??_AsicPreCalc+1)^(0+128)+1)
  5201  03CD  3141               	addfsr 1,1
  5202  03CE  0022               	movlb	2	; select bank2
  5203  03CF  0856               	movf	(AsicPreCalc@x+2)^(0+256),w
  5204  03D0  0501               	andwf	1,w
  5205  03D1  0021               	movlb	1	; select bank1
  5206  03D2  00B2               	movwf	((??_AsicPreCalc+1)^(0+128)+2)
  5207  03D3  3141               	addfsr 1,1
  5208  03D4  0022               	movlb	2	; select bank2
  5209  03D5  0857               	movf	(AsicPreCalc@x+3)^(0+256),w
  5210  03D6  0501               	andwf	1,w
  5211  03D7  0021               	movlb	1	; select bank1
  5212  03D8  00B3               	movwf	((??_AsicPreCalc+1)^(0+128)+3)
  5213  03D9  0833               	movf	(??_AsicPreCalc+4)^(0+128),w
  5214  03DA  0022               	movlb	2	; select bank2
  5215  03DB  00D7               	movwf	(AsicPreCalc@x+3)^(0+256)
  5216  03DC  0021               	movlb	1	; select bank1
  5217  03DD  0832               	movf	(??_AsicPreCalc+3)^(0+128),w
  5218  03DE  0022               	movlb	2	; select bank2
  5219  03DF  00D6               	movwf	(AsicPreCalc@x+2)^(0+256)
  5220  03E0  0021               	movlb	1	; select bank1
  5221  03E1  0831               	movf	(??_AsicPreCalc+2)^(0+128),w
  5222  03E2  0022               	movlb	2	; select bank2
  5223  03E3  00D5               	movwf	(AsicPreCalc@x+1)^(0+256)
  5224  03E4  0021               	movlb	1	; select bank1
  5225  03E5  0830               	movf	(??_AsicPreCalc+1)^(0+128),w
  5226  03E6  0022               	movlb	2	; select bank2
  5227  03E7  00D4               	movwf	AsicPreCalc@x^(0+256)
  5228                           
  5229                           ;asic.c: 349: z = m[((0-n)&7)] & m[((1-n)&7)];
  5230  03E8  0358               	decf	AsicPreCalc@n^(0+256),w
  5231  03E9  3AFF               	xorlw	255
  5232  03EA  3E01               	addlw	1
  5233  03EB  3907               	andlw	7
  5234  03EC  0021               	movlb	1	; select bank1
  5235  03ED  00AF               	movwf	??_AsicPreCalc^(0+128)
  5236  03EE  3001               	movlw	1
  5237  03EF                     u4825:	
  5238  03EF  35AF               	lslf	??_AsicPreCalc^(0+128),f
  5239  03F0  3EFF               	addlw	-1
  5240  03F1  1D03               	skipz
  5241  03F2  2BEF               	goto	u4825
  5242  03F3  352F               	lslf	??_AsicPreCalc^(0+128),w
  5243  03F4  3E2C               	addlw	AsicPreCalc@m& (0+255)
  5244  03F5  0086               	movwf	6
  5245  03F6  3001               	movlw	1	; select bank2/3
  5246  03F7  0087               	movwf	7
  5247  03F8  3F40               	moviw [0]fsr1
  5248  03F9  00B0               	movwf	(??_AsicPreCalc+1)^(0+128)
  5249  03FA  3F41               	moviw [1]fsr1
  5250  03FB  00B1               	movwf	((??_AsicPreCalc+1)^(0+128)+1)
  5251  03FC  3F42               	moviw [2]fsr1
  5252  03FD  00B2               	movwf	((??_AsicPreCalc+1)^(0+128)+2)
  5253  03FE  3F43               	moviw [3]fsr1
  5254  03FF  00B3               	movwf	((??_AsicPreCalc+1)^(0+128)+3)
  5255  0400  0022               	movlb	2	; select bank2
  5256  0401  0358               	decf	AsicPreCalc@n^(0+256),w
  5257  0402  3AFF               	xorlw	255
  5258  0403  3907               	andlw	7
  5259  0404  0021               	movlb	1	; select bank1
  5260  0405  00B4               	movwf	(??_AsicPreCalc+5)^(0+128)
  5261  0406  3001               	movlw	1
  5262  0407                     u4835:	
  5263  0407  35B4               	lslf	(??_AsicPreCalc+5)^(0+128),f
  5264  0408  3EFF               	addlw	-1
  5265  0409  1D03               	skipz
  5266  040A  2C07               	goto	u4835
  5267  040B  3534               	lslf	(??_AsicPreCalc+5)^(0+128),w
  5268  040C  3E2C               	addlw	AsicPreCalc@m& (0+255)
  5269  040D  0086               	movwf	6
  5270  040E  3001               	movlw	1	; select bank2/3
  5271  040F  0087               	movwf	7
  5272  0410  3F40               	moviw [0]fsr1
  5273  0411  00B5               	movwf	(??_AsicPreCalc+6)^(0+128)
  5274  0412  3F41               	moviw [1]fsr1
  5275  0413  00B6               	movwf	((??_AsicPreCalc+6)^(0+128)+1)
  5276  0414  3F42               	moviw [2]fsr1
  5277  0415  00B7               	movwf	((??_AsicPreCalc+6)^(0+128)+2)
  5278  0416  3F43               	moviw [3]fsr1
  5279  0417  00B8               	movwf	((??_AsicPreCalc+6)^(0+128)+3)
  5280  0418  0830               	movf	(??_AsicPreCalc+1)^(0+128),w
  5281  0419  0535               	andwf	(??_AsicPreCalc+6)^(0+128),w
  5282  041A  0022               	movlb	2	; select bank2
  5283  041B  00CC               	movwf	AsicPreCalc@z^(0+256)
  5284  041C  0021               	movlb	1	; select bank1
  5285  041D  0831               	movf	(??_AsicPreCalc+2)^(0+128),w
  5286  041E  0536               	andwf	(??_AsicPreCalc+7)^(0+128),w
  5287  041F  0022               	movlb	2	; select bank2
  5288  0420  00CD               	movwf	(AsicPreCalc@z+1)^(0+256)
  5289  0421  0021               	movlb	1	; select bank1
  5290  0422  0832               	movf	(??_AsicPreCalc+3)^(0+128),w
  5291  0423  0537               	andwf	(??_AsicPreCalc+8)^(0+128),w
  5292  0424  0022               	movlb	2	; select bank2
  5293  0425  00CE               	movwf	(AsicPreCalc@z+2)^(0+256)
  5294  0426  0021               	movlb	1	; select bank1
  5295  0427  0833               	movf	(??_AsicPreCalc+4)^(0+128),w
  5296  0428  0538               	andwf	(??_AsicPreCalc+9)^(0+128),w
  5297  0429  0022               	movlb	2	; select bank2
  5298  042A  00CF               	movwf	(AsicPreCalc@z+3)^(0+256)
  5299                           
  5300                           ;asic.c: 350: x = x | z;
  5301  042B  0854               	movf	AsicPreCalc@x^(0+256),w
  5302  042C  044C               	iorwf	AsicPreCalc@z^(0+256),w
  5303  042D  0021               	movlb	1	; select bank1
  5304  042E  00AF               	movwf	??_AsicPreCalc^(0+128)
  5305  042F  0022               	movlb	2	; select bank2
  5306  0430  0855               	movf	(AsicPreCalc@x+1)^(0+256),w
  5307  0431  044D               	iorwf	(AsicPreCalc@z+1)^(0+256),w
  5308  0432  0021               	movlb	1	; select bank1
  5309  0433  00B0               	movwf	(??_AsicPreCalc^(0+128)+1)
  5310  0434  0022               	movlb	2	; select bank2
  5311  0435  0856               	movf	(AsicPreCalc@x+2)^(0+256),w
  5312  0436  044E               	iorwf	(AsicPreCalc@z+2)^(0+256),w
  5313  0437  0021               	movlb	1	; select bank1
  5314  0438  00B1               	movwf	(??_AsicPreCalc^(0+128)+2)
  5315  0439  0022               	movlb	2	; select bank2
  5316  043A  0857               	movf	(AsicPreCalc@x+3)^(0+256),w
  5317  043B  044F               	iorwf	(AsicPreCalc@z+3)^(0+256),w
  5318  043C  0021               	movlb	1	; select bank1
  5319  043D  00B2               	movwf	(??_AsicPreCalc^(0+128)+3)
  5320  043E  0832               	movf	(??_AsicPreCalc+3)^(0+128),w
  5321  043F  0022               	movlb	2	; select bank2
  5322  0440  00D7               	movwf	(AsicPreCalc@x+3)^(0+256)
  5323  0441  0021               	movlb	1	; select bank1
  5324  0442  0831               	movf	(??_AsicPreCalc+2)^(0+128),w
  5325  0443  0022               	movlb	2	; select bank2
  5326  0444  00D6               	movwf	(AsicPreCalc@x+2)^(0+256)
  5327  0445  0021               	movlb	1	; select bank1
  5328  0446  0830               	movf	(??_AsicPreCalc+1)^(0+128),w
  5329  0447  0022               	movlb	2	; select bank2
  5330  0448  00D5               	movwf	(AsicPreCalc@x+1)^(0+256)
  5331  0449  0021               	movlb	1	; select bank1
  5332  044A  082F               	movf	??_AsicPreCalc^(0+128),w
  5333  044B  0022               	movlb	2	; select bank2
  5334  044C  00D4               	movwf	AsicPreCalc@x^(0+256)
  5335                           
  5336                           ;asic.c: 351: m[7-n] += y + x;
  5337  044D  0850               	movf	AsicPreCalc@y^(0+256),w
  5338  044E  0754               	addwf	AsicPreCalc@x^(0+256),w
  5339  044F  0021               	movlb	1	; select bank1
  5340  0450  00AF               	movwf	??_AsicPreCalc^(0+128)
  5341  0451  0022               	movlb	2	; select bank2
  5342  0452  0851               	movf	(AsicPreCalc@y+1)^(0+256),w
  5343  0453  3D55               	addwfc	(AsicPreCalc@x+1)^(0+256),w
  5344  0454  0021               	movlb	1	; select bank1
  5345  0455  00B0               	movwf	(??_AsicPreCalc^(0+128)+1)
  5346  0456  0022               	movlb	2	; select bank2
  5347  0457  0852               	movf	(AsicPreCalc@y+2)^(0+256),w
  5348  0458  3D56               	addwfc	(AsicPreCalc@x+2)^(0+256),w
  5349  0459  0021               	movlb	1	; select bank1
  5350  045A  00B1               	movwf	(??_AsicPreCalc^(0+128)+2)
  5351  045B  0022               	movlb	2	; select bank2
  5352  045C  0853               	movf	(AsicPreCalc@y+3)^(0+256),w
  5353  045D  3D57               	addwfc	(AsicPreCalc@x+3)^(0+256),w
  5354  045E  0021               	movlb	1	; select bank1
  5355  045F  00B2               	movwf	(??_AsicPreCalc^(0+128)+3)
  5356  0460  0022               	movlb	2	; select bank2
  5357  0461  0358               	decf	AsicPreCalc@n^(0+256),w
  5358  0462  3AFF               	xorlw	255
  5359  0463  0021               	movlb	1	; select bank1
  5360  0464  00B3               	movwf	(??_AsicPreCalc+4)^(0+128)
  5361  0465  3001               	movlw	1
  5362  0466                     u4845:	
  5363  0466  35B3               	lslf	(??_AsicPreCalc+4)^(0+128),f
  5364  0467  3EFF               	addlw	-1
  5365  0468  1D03               	skipz
  5366  0469  2C66               	goto	u4845
  5367  046A  3533               	lslf	(??_AsicPreCalc+4)^(0+128),w
  5368  046B  3E1C               	addlw	28
  5369  046C  3E2C               	addlw	AsicPreCalc@m& (0+255)
  5370  046D  0086               	movwf	6
  5371  046E  3001               	movlw	1	; select bank2/3
  5372  046F  0087               	movwf	7
  5373  0470  082F               	movf	??_AsicPreCalc^(0+128),w
  5374  0471  0781               	addwf	1,f
  5375  0472  3141               	addfsr 1,1
  5376  0473  0830               	movf	(??_AsicPreCalc+1)^(0+128),w
  5377  0474  3D81               	addwfc	1,f
  5378  0475  3141               	addfsr 1,1
  5379  0476  0831               	movf	(??_AsicPreCalc+2)^(0+128),w
  5380  0477  3D81               	addwfc	1,f
  5381  0478  3141               	addfsr 1,1
  5382  0479  0832               	movf	(??_AsicPreCalc+3)^(0+128),w
  5383  047A  3D81               	addwfc	1,f
  5384                           
  5385                           ;asic.c: 353: PrecalcHashes[2-n] = m[7-n];
  5386  047B  0022               	movlb	2	; select bank2
  5387  047C  0358               	decf	AsicPreCalc@n^(0+256),w
  5388  047D  3AFF               	xorlw	255
  5389  047E  0021               	movlb	1	; select bank1
  5390  047F  00AF               	movwf	??_AsicPreCalc^(0+128)
  5391  0480  3001               	movlw	1
  5392  0481                     u4855:	
  5393  0481  35AF               	lslf	??_AsicPreCalc^(0+128),f
  5394  0482  3EFF               	addlw	-1
  5395  0483  1D03               	skipz
  5396  0484  2C81               	goto	u4855
  5397  0485  352F               	lslf	??_AsicPreCalc^(0+128),w
  5398  0486  3E1C               	addlw	28
  5399  0487  3E2C               	addlw	AsicPreCalc@m& (0+255)
  5400  0488  0086               	movwf	6
  5401  0489  3001               	movlw	1	; select bank2/3
  5402  048A  0087               	movwf	7
  5403  048B  3F40               	moviw [0]fsr1
  5404  048C  00B0               	movwf	(??_AsicPreCalc+1)^(0+128)
  5405  048D  3F41               	moviw [1]fsr1
  5406  048E  00B1               	movwf	((??_AsicPreCalc+1)^(0+128)+1)
  5407  048F  3F42               	moviw [2]fsr1
  5408  0490  00B2               	movwf	((??_AsicPreCalc+1)^(0+128)+2)
  5409  0491  3F43               	moviw [3]fsr1
  5410  0492  00B3               	movwf	((??_AsicPreCalc+1)^(0+128)+3)
  5411  0493  0022               	movlb	2	; select bank2
  5412  0494  0358               	decf	AsicPreCalc@n^(0+256),w
  5413  0495  3AFF               	xorlw	255
  5414  0496  0021               	movlb	1	; select bank1
  5415  0497  00B4               	movwf	(??_AsicPreCalc+5)^(0+128)
  5416  0498  3001               	movlw	1
  5417  0499                     u4865:	
  5418  0499  35B4               	lslf	(??_AsicPreCalc+5)^(0+128),f
  5419  049A  3EFF               	addlw	-1
  5420  049B  1D03               	skipz
  5421  049C  2C99               	goto	u4865
  5422  049D  3534               	lslf	(??_AsicPreCalc+5)^(0+128),w
  5423  049E  3E08               	addlw	8
  5424  049F  3E40               	addlw	_PrecalcHashes& (0+255)
  5425  04A0  0086               	movwf	6
  5426  04A1  3003               	movlw	3	; select bank6/7
  5427  04A2  0087               	movwf	7
  5428  04A3  0830               	movf	(??_AsicPreCalc+1)^(0+128),w
  5429  04A4  3FC0               	movwi [0]fsr1
  5430  04A5  0831               	movf	(??_AsicPreCalc+2)^(0+128),w
  5431  04A6  3FC1               	movwi [1]fsr1
  5432  04A7  0832               	movf	(??_AsicPreCalc+3)^(0+128),w
  5433  04A8  3FC2               	movwi [2]fsr1
  5434  04A9  0833               	movf	(??_AsicPreCalc+4)^(0+128),w
  5435  04AA  3FC3               	movwi [3]fsr1
  5436                           
  5437                           ;asic.c: 354: PrecalcHashes[5-n] = m[3-n];
  5438  04AB  0022               	movlb	2	; select bank2
  5439  04AC  0358               	decf	AsicPreCalc@n^(0+256),w
  5440  04AD  3AFF               	xorlw	255
  5441  04AE  0021               	movlb	1	; select bank1
  5442  04AF  00AF               	movwf	??_AsicPreCalc^(0+128)
  5443  04B0  3001               	movlw	1
  5444  04B1                     u4875:	
  5445  04B1  35AF               	lslf	??_AsicPreCalc^(0+128),f
  5446  04B2  3EFF               	addlw	-1
  5447  04B3  1D03               	skipz
  5448  04B4  2CB1               	goto	u4875
  5449  04B5  352F               	lslf	??_AsicPreCalc^(0+128),w
  5450  04B6  3E0C               	addlw	12
  5451  04B7  3E2C               	addlw	AsicPreCalc@m& (0+255)
  5452  04B8  0086               	movwf	6
  5453  04B9  3001               	movlw	1	; select bank2/3
  5454  04BA  0087               	movwf	7
  5455  04BB  3F40               	moviw [0]fsr1
  5456  04BC  00B0               	movwf	(??_AsicPreCalc+1)^(0+128)
  5457  04BD  3F41               	moviw [1]fsr1
  5458  04BE  00B1               	movwf	((??_AsicPreCalc+1)^(0+128)+1)
  5459  04BF  3F42               	moviw [2]fsr1
  5460  04C0  00B2               	movwf	((??_AsicPreCalc+1)^(0+128)+2)
  5461  04C1  3F43               	moviw [3]fsr1
  5462  04C2  00B3               	movwf	((??_AsicPreCalc+1)^(0+128)+3)
  5463  04C3  0022               	movlb	2	; select bank2
  5464  04C4  0358               	decf	AsicPreCalc@n^(0+256),w
  5465  04C5  3AFF               	xorlw	255
  5466  04C6  0021               	movlb	1	; select bank1
  5467  04C7  00B4               	movwf	(??_AsicPreCalc+5)^(0+128)
  5468  04C8  3001               	movlw	1
  5469  04C9                     u4885:	
  5470  04C9  35B4               	lslf	(??_AsicPreCalc+5)^(0+128),f
  5471  04CA  3EFF               	addlw	-1
  5472  04CB  1D03               	skipz
  5473  04CC  2CC9               	goto	u4885
  5474  04CD  3534               	lslf	(??_AsicPreCalc+5)^(0+128),w
  5475  04CE  3E14               	addlw	20
  5476  04CF  3E40               	addlw	_PrecalcHashes& (0+255)
  5477  04D0  0086               	movwf	6
  5478  04D1  3003               	movlw	3	; select bank6/7
  5479  04D2  0087               	movwf	7
  5480  04D3  0830               	movf	(??_AsicPreCalc+1)^(0+128),w
  5481  04D4  3FC0               	movwi [0]fsr1
  5482  04D5  0831               	movf	(??_AsicPreCalc+2)^(0+128),w
  5483  04D6  3FC1               	movwi [1]fsr1
  5484  04D7  0832               	movf	(??_AsicPreCalc+3)^(0+128),w
  5485  04D8  3FC2               	movwi [2]fsr1
  5486  04D9  0833               	movf	(??_AsicPreCalc+4)^(0+128),w
  5487  04DA  3FC3               	movwi [3]fsr1
  5488  04DB  3001               	movlw	1
  5489  04DC  00AF               	movwf	??_AsicPreCalc^(0+128)
  5490  04DD  082F               	movf	??_AsicPreCalc^(0+128),w
  5491  04DE  0022               	movlb	2	; select bank2
  5492  04DF  07D8               	addwf	AsicPreCalc@n^(0+256),f
  5493  04E0  2864               	goto	L5
  5494  04E1                     __end_of_AsicPreCalc:	
  5495                           
  5496                           	psect	text9
  5497  1DBD                     __ptext9:	
  5498 ;; *************** function _rotate *****************
  5499 ;; Defined at:
  5500 ;;		line 313 in file "asic.c"
  5501 ;; Parameters:    Size  Location     Type
  5502 ;;  x               4    0[BANK1 ] unsigned long 
  5503 ;;  y               1    4[BANK1 ] unsigned char 
  5504 ;; Auto vars:     Size  Location     Type
  5505 ;;		None
  5506 ;; Return value:  Size  Location     Type
  5507 ;;                  4    0[BANK1 ] unsigned long 
  5508 ;; Registers used:
  5509 ;;		wreg, status,2, status,0
  5510 ;; Tracked objects:
  5511 ;;		On entry : 0/0
  5512 ;;		On exit  : 0/0
  5513 ;;		Unchanged: 0/0
  5514 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5515 ;;      Params:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
  5516 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5517 ;;      Temps:          0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0
  5518 ;;      Totals:         0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0
  5519 ;;Total ram usage:       13 bytes
  5520 ;; Hardware stack levels used:    1
  5521 ;; Hardware stack levels required when called:    4
  5522 ;; This function calls:
  5523 ;;		Nothing
  5524 ;; This function is called by:
  5525 ;;		_AsicPreCalc
  5526 ;; This function uses a non-reentrant model
  5527 ;;
  5528                           
  5529                           
  5530                           ;psect for function _rotate
  5531  1DBD                     _rotate:	
  5532                           
  5533                           ;asic.c: 314: return ((x<<y) | (x>>(32-y)));
  5534                           
  5535                           ;incstack = 0
  5536                           ; Regs used in _rotate: [wreg+status,2+status,0]
  5537  1DBD  0021               	movlb	1	; select bank1
  5538  1DBE  0820               	movf	rotate@x^(0+128),w
  5539  1DBF  00A5               	movwf	??_rotate^(0+128)
  5540  1DC0  0821               	movf	(rotate@x+1)^(0+128),w
  5541  1DC1  00A6               	movwf	(??_rotate^(0+128)+1)
  5542  1DC2  0822               	movf	(rotate@x+2)^(0+128),w
  5543  1DC3  00A7               	movwf	(??_rotate^(0+128)+2)
  5544  1DC4  0823               	movf	(rotate@x+3)^(0+128),w
  5545  1DC5  00A8               	movwf	(??_rotate^(0+128)+3)
  5546  1DC6  0324               	decf	rotate@y^(0+128),w
  5547  1DC7  3AFF               	xorlw	255
  5548  1DC8  3E20               	addlw	32
  5549  1DC9  0A89               	incf	9,f
  5550  1DCA  2DD0               	goto	u4560
  5551  1DCB                     u4565:	
  5552  1DCB  1003               	clrc
  5553  1DCC  0CA8               	rrf	(??_rotate^(0+128)+3),f
  5554  1DCD  0CA7               	rrf	(??_rotate^(0+128)+2),f
  5555  1DCE  0CA6               	rrf	(??_rotate^(0+128)+1),f
  5556  1DCF  0CA5               	rrf	??_rotate^(0+128),f
  5557  1DD0                     u4560:	
  5558  1DD0  3EFF               	addlw	-1
  5559  1DD1  1D03               	skipz
  5560  1DD2  2DCB               	goto	u4565
  5561  1DD3  0820               	movf	rotate@x^(0+128),w
  5562  1DD4  00A9               	movwf	(??_rotate+4)^(0+128)
  5563  1DD5  0821               	movf	(rotate@x+1)^(0+128),w
  5564  1DD6  00AA               	movwf	((??_rotate+4)^(0+128)+1)
  5565  1DD7  0822               	movf	(rotate@x+2)^(0+128),w
  5566  1DD8  00AB               	movwf	((??_rotate+4)^(0+128)+2)
  5567  1DD9  0823               	movf	(rotate@x+3)^(0+128),w
  5568  1DDA  00AC               	movwf	((??_rotate+4)^(0+128)+3)
  5569  1DDB  0A24               	incf	rotate@y^(0+128),w
  5570  1DDC  2DE1               	goto	u4570
  5571  1DDD                     u4575:	
  5572  1DDD  35A9               	lslf	(??_rotate+4)^(0+128),f
  5573  1DDE  0DAA               	rlf	((??_rotate+4)^(0+128)+1),f
  5574  1DDF  0DAB               	rlf	((??_rotate+4)^(0+128)+2),f
  5575  1DE0  0DAC               	rlf	((??_rotate+4)^(0+128)+3),f
  5576  1DE1                     u4570:	
  5577  1DE1  0B89               	decfsz	9,f
  5578  1DE2  2DDD               	goto	u4575
  5579  1DE3  0829               	movf	(??_rotate+4)^(0+128),w
  5580  1DE4  04A5               	iorwf	??_rotate^(0+128),f
  5581  1DE5  082A               	movf	(??_rotate+5)^(0+128),w
  5582  1DE6  04A6               	iorwf	(??_rotate^(0+128)+1),f
  5583  1DE7  082B               	movf	(??_rotate+6)^(0+128),w
  5584  1DE8  04A7               	iorwf	(??_rotate^(0+128)+2),f
  5585  1DE9  082C               	movf	(??_rotate+7)^(0+128),w
  5586  1DEA  04A8               	iorwf	(??_rotate^(0+128)+3),f
  5587  1DEB  0828               	movf	(??_rotate+3)^(0+128),w
  5588  1DEC  00A3               	movwf	(?_rotate+3)^(0+128)
  5589  1DED  0827               	movf	(??_rotate+2)^(0+128),w
  5590  1DEE  00A2               	movwf	(?_rotate+2)^(0+128)
  5591  1DEF  0826               	movf	(??_rotate+1)^(0+128),w
  5592  1DF0  00A1               	movwf	(?_rotate+1)^(0+128)
  5593  1DF1  0825               	movf	??_rotate^(0+128),w
  5594  1DF2  00A0               	movwf	?_rotate^(0+128)
  5595  1DF3  0008               	return
  5596  1DF4                     __end_of_rotate:	
  5597                           
  5598                           	psect	text10
  5599  16D4                     __ptext10:	
  5600 ;; *************** function _SendAsicData *****************
  5601 ;; Defined at:
  5602 ;;		line 36 in file "asic.c"
  5603 ;; Parameters:    Size  Location     Type
  5604 ;;  work            2    2[BANK1 ] PTR struct _worktask
  5605 ;;		 -> WorkQue(180), 
  5606 ;; Auto vars:     Size  Location     Type
  5607 ;;		None
  5608 ;; Return value:  Size  Location     Type
  5609 ;;		None               void
  5610 ;; Registers used:
  5611 ;;		wreg, status,2, status,0, pclath, cstack
  5612 ;; Tracked objects:
  5613 ;;		On entry : 0/0
  5614 ;;		On exit  : 0/0
  5615 ;;		Unchanged: 0/0
  5616 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5617 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5618 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5619 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  5620 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
  5621 ;;Total ram usage:        6 bytes
  5622 ;; Hardware stack levels used:    1
  5623 ;; Hardware stack levels required when called:    5
  5624 ;; This function calls:
  5625 ;;		_Send32
  5626 ;; This function is called by:
  5627 ;;		_AsicPushWork
  5628 ;; This function uses a non-reentrant model
  5629 ;;
  5630                           
  5631                           
  5632                           ;psect for function _SendAsicData
  5633  16D4                     _SendAsicData:	
  5634                           
  5635                           ;asic.c: 37: GIE = 0;
  5636                           
  5637                           ;incstack = 0
  5638                           ; Regs used in _SendAsicData: [wreg+status,2+status,0+pclath+cstack]
  5639  16D4  138B               	bcf	11,7	;volatile
  5640                           
  5641                           ;asic.c: 38: last_bit0 = 0x48; last_bit1 = 0x90;
  5642  16D5  3048               	movlw	72
  5643  16D6  0021               	movlb	1	; select bank1
  5644  16D7  00A4               	movwf	??_SendAsicData^(0+128)
  5645  16D8  0824               	movf	??_SendAsicData^(0+128),w
  5646  16D9  0022               	movlb	2	; select bank2
  5647  16DA  00ED               	movwf	_last_bit0^(0+256)
  5648  16DB  3090               	movlw	144
  5649  16DC  0021               	movlb	1	; select bank1
  5650  16DD  00A4               	movwf	??_SendAsicData^(0+128)
  5651  16DE  0824               	movf	??_SendAsicData^(0+128),w
  5652  16DF  0022               	movlb	2	; select bank2
  5653  16E0  00EE               	movwf	_last_bit1^(0+256)
  5654                           
  5655                           ;asic.c: 39: send32_data = (WORD)&ClockCfg; send32_count = 2;
  5656  16E1  30B9               	movlw	low _ClockCfg
  5657  16E2  00DB               	movwf	_send32_data^(0+256)
  5658  16E3  3001               	movlw	high _ClockCfg
  5659  16E4  00DC               	movwf	(_send32_data+1)^(0+256)
  5660  16E5  3002               	movlw	2
  5661  16E6  0021               	movlb	1	; select bank1
  5662  16E7  00A4               	movwf	??_SendAsicData^(0+128)
  5663  16E8  0824               	movf	??_SendAsicData^(0+128),w
  5664  16E9  0022               	movlb	2	; select bank2
  5665  16EA  00EF               	movwf	_send32_count^(0+256)
  5666                           
  5667                           ;asic.c: 40: Send32();
  5668  16EB  3188  20D8  3196   	fcall	_Send32
  5669                           
  5670                           ;asic.c: 41: send32_data = (WORD)&work->Merkle; send32_count = 3;
  5671  16EE  0021               	movlb	1	; select bank1
  5672  16EF  0822               	movf	SendAsicData@work^(0+128),w
  5673  16F0  3E21               	addlw	33
  5674  16F1  0022               	movlb	2	; select bank2
  5675  16F2  00DB               	movwf	_send32_data^(0+256)
  5676  16F3  3000               	movlw	0
  5677  16F4  0021               	movlb	1	; select bank1
  5678  16F5  3D23               	addwfc	(SendAsicData@work+1)^(0+128),w
  5679  16F6  0022               	movlb	2	; select bank2
  5680  16F7  00DC               	movwf	(_send32_data+1)^(0+256)
  5681  16F8  3003               	movlw	3
  5682  16F9  0021               	movlb	1	; select bank1
  5683  16FA  00A4               	movwf	??_SendAsicData^(0+128)
  5684  16FB  0824               	movf	??_SendAsicData^(0+128),w
  5685  16FC  0022               	movlb	2	; select bank2
  5686  16FD  00EF               	movwf	_send32_count^(0+256)
  5687                           
  5688                           ;asic.c: 42: Send32();
  5689  16FE  3188  20D8  3196   	fcall	_Send32
  5690                           
  5691                           ;asic.c: 43: send32_data = (WORD)&PrecalcHashes[1]; send32_count = 5;
  5692  1701  3044               	movlw	low (_PrecalcHashes+4)
  5693  1702  0022               	movlb	2	; select bank2
  5694  1703  00DB               	movwf	_send32_data^(0+256)
  5695  1704  3003               	movlw	high (_PrecalcHashes+4)
  5696  1705  00DC               	movwf	(_send32_data+1)^(0+256)
  5697  1706  3005               	movlw	5
  5698  1707  0021               	movlb	1	; select bank1
  5699  1708  00A4               	movwf	??_SendAsicData^(0+128)
  5700  1709  0824               	movf	??_SendAsicData^(0+128),w
  5701  170A  0022               	movlb	2	; select bank2
  5702  170B  00EF               	movwf	_send32_count^(0+256)
  5703                           
  5704                           ;asic.c: 44: Send32();
  5705  170C  3188  20D8  3196   	fcall	_Send32
  5706                           
  5707                           ;asic.c: 45: send32_data = (WORD)&work->MidState; send32_count = 8;
  5708  170F  0021               	movlb	1	; select bank1
  5709  1710  0822               	movf	SendAsicData@work^(0+128),w
  5710  1711  3E01               	addlw	1
  5711  1712  0022               	movlb	2	; select bank2
  5712  1713  00DB               	movwf	_send32_data^(0+256)
  5713  1714  3000               	movlw	0
  5714  1715  0021               	movlb	1	; select bank1
  5715  1716  3D23               	addwfc	(SendAsicData@work+1)^(0+128),w
  5716  1717  0022               	movlb	2	; select bank2
  5717  1718  00DC               	movwf	(_send32_data+1)^(0+256)
  5718  1719  3008               	movlw	8
  5719  171A  0021               	movlb	1	; select bank1
  5720  171B  00A4               	movwf	??_SendAsicData^(0+128)
  5721  171C  0824               	movf	??_SendAsicData^(0+128),w
  5722  171D  0022               	movlb	2	; select bank2
  5723  171E  00EF               	movwf	_send32_count^(0+256)
  5724                           
  5725                           ;asic.c: 46: Send32();
  5726  171F  3188  20D8  3196   	fcall	_Send32
  5727                           
  5728                           ;asic.c: 47: send32_data = (WORD)&PrecalcHashes; send32_count = 1;
  5729  1722  3040               	movlw	low _PrecalcHashes
  5730  1723  0022               	movlb	2	; select bank2
  5731  1724  00DB               	movwf	_send32_data^(0+256)
  5732  1725  3003               	movlw	high _PrecalcHashes
  5733  1726  00DC               	movwf	(_send32_data+1)^(0+256)
  5734  1727  01EF               	clrf	_send32_count^(0+256)
  5735  1728  0AEF               	incf	_send32_count^(0+256),f
  5736                           
  5737                           ;asic.c: 48: Send32();
  5738  1729  3188  20D8  3196   	fcall	_Send32
  5739                           
  5740                           ;asic.c: 49: last_bit0 = last_bit1 = 0x50;
  5741  172C  3050               	movlw	80
  5742  172D  0022               	movlb	2	; select bank2
  5743  172E  00EE               	movwf	_last_bit1^(0+256)
  5744  172F  0021               	movlb	1	; select bank1
  5745  1730  00A4               	movwf	??_SendAsicData^(0+128)
  5746  1731  0824               	movf	??_SendAsicData^(0+128),w
  5747  1732  0022               	movlb	2	; select bank2
  5748  1733  00ED               	movwf	_last_bit0^(0+256)
  5749                           
  5750                           ;asic.c: 50: send32_data = (WORD)&NonceRanges; send32_count = BankSize;
  5751  1734  3020               	movlw	low _NonceRanges
  5752  1735  00DB               	movwf	_send32_data^(0+256)
  5753  1736  3003               	movlw	high _NonceRanges
  5754  1737  00DC               	movwf	(_send32_data+1)^(0+256)
  5755  1738  0023               	movlb	3	; select bank3
  5756  1739  0865               	movf	_BankSize^(0+384),w
  5757  173A  0021               	movlb	1	; select bank1
  5758  173B  00A4               	movwf	??_SendAsicData^(0+128)
  5759  173C  0824               	movf	??_SendAsicData^(0+128),w
  5760  173D  0022               	movlb	2	; select bank2
  5761  173E  00EF               	movwf	_send32_count^(0+256)
  5762                           
  5763                           ;asic.c: 51: Send32();
  5764  173F  3188  20D8         	fcall	_Send32
  5765                           
  5766                           ;asic.c: 52: LATC = 0xD8;;
  5767  1741  30D8               	movlw	216
  5768  1742  0022               	movlb	2	; select bank2
  5769  1743  008E               	movwf	14	;volatile
  5770                           
  5771                           ;asic.c: 53: GIE = 1;
  5772  1744  178B               	bsf	11,7	;volatile
  5773                           
  5774                           ;asic.c: 54: ClockCfg[0] = ClockCfg[0] & ~0x00000002;
  5775  1745  30FD               	movlw	253
  5776  1746  0023               	movlb	3	; select bank3
  5777  1747  0539               	andwf	_ClockCfg^(0+384),w
  5778  1748  0021               	movlb	1	; select bank1
  5779  1749  00A4               	movwf	??_SendAsicData^(0+128)
  5780  174A  30FF               	movlw	255
  5781  174B  0023               	movlb	3	; select bank3
  5782  174C  053A               	andwf	(_ClockCfg+1)^(0+384),w
  5783  174D  0021               	movlb	1	; select bank1
  5784  174E  00A5               	movwf	(??_SendAsicData^(0+128)+1)
  5785  174F  30FF               	movlw	255
  5786  1750  0023               	movlb	3	; select bank3
  5787  1751  053B               	andwf	(_ClockCfg+2)^(0+384),w
  5788  1752  0021               	movlb	1	; select bank1
  5789  1753  00A6               	movwf	(??_SendAsicData^(0+128)+2)
  5790  1754  30FF               	movlw	255
  5791  1755  0023               	movlb	3	; select bank3
  5792  1756  053C               	andwf	(_ClockCfg+3)^(0+384),w
  5793  1757  0021               	movlb	1	; select bank1
  5794  1758  00A7               	movwf	(??_SendAsicData^(0+128)+3)
  5795  1759  0827               	movf	(??_SendAsicData+3)^(0+128),w
  5796  175A  0023               	movlb	3	; select bank3
  5797  175B  00BC               	movwf	(_ClockCfg+3)^(0+384)
  5798  175C  0021               	movlb	1	; select bank1
  5799  175D  0826               	movf	(??_SendAsicData+2)^(0+128),w
  5800  175E  0023               	movlb	3	; select bank3
  5801  175F  00BB               	movwf	(_ClockCfg+2)^(0+384)
  5802  1760  0021               	movlb	1	; select bank1
  5803  1761  0825               	movf	(??_SendAsicData+1)^(0+128),w
  5804  1762  0023               	movlb	3	; select bank3
  5805  1763  00BA               	movwf	(_ClockCfg+1)^(0+384)
  5806  1764  0021               	movlb	1	; select bank1
  5807  1765  0824               	movf	??_SendAsicData^(0+128),w
  5808  1766  0023               	movlb	3	; select bank3
  5809  1767  00B9               	movwf	_ClockCfg^(0+384)
  5810  1768  0008               	return
  5811  1769                     __end_of_SendAsicData:	
  5812                           
  5813                           	psect	text11
  5814  08D8                     __ptext11:	
  5815 ;; *************** function _Send32 *****************
  5816 ;; Defined at:
  5817 ;;		line 58 in file "asic.c"
  5818 ;; Parameters:    Size  Location     Type
  5819 ;;		None
  5820 ;; Auto vars:     Size  Location     Type
  5821 ;;		None
  5822 ;; Return value:  Size  Location     Type
  5823 ;;		None               void
  5824 ;; Registers used:
  5825 ;;		None
  5826 ;; Tracked objects:
  5827 ;;		On entry : 0/0
  5828 ;;		On exit  : 0/0
  5829 ;;		Unchanged: 0/0
  5830 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5831 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5832 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5833 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5834 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5835 ;;Total ram usage:        0 bytes
  5836 ;; Hardware stack levels used:    1
  5837 ;; Hardware stack levels required when called:    4
  5838 ;; This function calls:
  5839 ;;		Nothing
  5840 ;; This function is called by:
  5841 ;;		_SendAsicData
  5842 ;; This function uses a non-reentrant model
  5843 ;;
  5844                           
  5845                           
  5846                           ;psect for function _Send32
  5847  08D8                     _Send32:	
  5848                           
  5849                           ;incstack = 0
  5850                           ; Regs used in _Send32: []
  5851  08D8  0022               	banksel	270	;# 
  5852  08D9  085B               	movf	_send32_data& (0+127),w	;# 
  5853  08DA  0086               	movwf	6	;# 
  5854  08DB  085C               	movf	(_send32_data+1)& (0+127),w	;# 
  5855  08DC  0087               	movwf	7	;# 
  5856  08DD                     next_word:	
  5857                           
  5858                           ;# 
  5859  08DD  3048               	movlw	72	;# 
  5860  08DE  018E               	clrf	14	;# 
  5861  08DF  1801               	btfsc	1,0	;# 
  5862  08E0  3090               	movlw	144	;# 
  5863  08E1  008E               	movwf	14	;# 
  5864  08E2  3048               	movlw	72	;# 
  5865  08E3  018E               	clrf	14	;# 
  5866  08E4  1881               	btfsc	1,1	;# 
  5867  08E5  3090               	movlw	144	;# 
  5868  08E6  008E               	movwf	14	;# 
  5869  08E7  3048               	movlw	72	;# 
  5870  08E8  018E               	clrf	14	;# 
  5871  08E9  1901               	btfsc	1,2	;# 
  5872  08EA  3090               	movlw	144	;# 
  5873  08EB  008E               	movwf	14	;# 
  5874  08EC  3048               	movlw	72	;# 
  5875  08ED  018E               	clrf	14	;# 
  5876  08EE  1981               	btfsc	1,3	;# 
  5877  08EF  3090               	movlw	144	;# 
  5878  08F0  008E               	movwf	14	;# 
  5879  08F1  3048               	movlw	72	;# 
  5880  08F2  018E               	clrf	14	;# 
  5881  08F3  1A01               	btfsc	1,4	;# 
  5882  08F4  3090               	movlw	144	;# 
  5883  08F5  008E               	movwf	14	;# 
  5884  08F6  3048               	movlw	72	;# 
  5885  08F7  018E               	clrf	14	;# 
  5886  08F8  1A81               	btfsc	1,5	;# 
  5887  08F9  3090               	movlw	144	;# 
  5888  08FA  008E               	movwf	14	;# 
  5889  08FB  3048               	movlw	72	;# 
  5890  08FC  018E               	clrf	14	;# 
  5891  08FD  1B01               	btfsc	1,6	;# 
  5892  08FE  3090               	movlw	144	;# 
  5893  08FF  008E               	movwf	14	;# 
  5894  0900  3048               	movlw	72	;# 
  5895  0901  018E               	clrf	14	;# 
  5896  0902  1B81               	btfsc	1,7	;# 
  5897  0903  3090               	movlw	144	;# 
  5898  0904  008E               	movwf	14	;# 
  5899  0905  3141               	addfsr 1,1	;# 
  5900  0906  3048               	movlw	72	;# 
  5901  0907  018E               	clrf	14	;# 
  5902  0908  1801               	btfsc	1,0	;# 
  5903  0909  3090               	movlw	144	;# 
  5904  090A  008E               	movwf	14	;# 
  5905  090B  3048               	movlw	72	;# 
  5906  090C  018E               	clrf	14	;# 
  5907  090D  1881               	btfsc	1,1	;# 
  5908  090E  3090               	movlw	144	;# 
  5909  090F  008E               	movwf	14	;# 
  5910  0910  3048               	movlw	72	;# 
  5911  0911  018E               	clrf	14	;# 
  5912  0912  1901               	btfsc	1,2	;# 
  5913  0913  3090               	movlw	144	;# 
  5914  0914  008E               	movwf	14	;# 
  5915  0915  3048               	movlw	72	;# 
  5916  0916  018E               	clrf	14	;# 
  5917  0917  1981               	btfsc	1,3	;# 
  5918  0918  3090               	movlw	144	;# 
  5919  0919  008E               	movwf	14	;# 
  5920  091A  3048               	movlw	72	;# 
  5921  091B  018E               	clrf	14	;# 
  5922  091C  1A01               	btfsc	1,4	;# 
  5923  091D  3090               	movlw	144	;# 
  5924  091E  008E               	movwf	14	;# 
  5925  091F  3048               	movlw	72	;# 
  5926  0920  018E               	clrf	14	;# 
  5927  0921  1A81               	btfsc	1,5	;# 
  5928  0922  3090               	movlw	144	;# 
  5929  0923  008E               	movwf	14	;# 
  5930  0924  3048               	movlw	72	;# 
  5931  0925  018E               	clrf	14	;# 
  5932  0926  1B01               	btfsc	1,6	;# 
  5933  0927  3090               	movlw	144	;# 
  5934  0928  008E               	movwf	14	;# 
  5935  0929  3048               	movlw	72	;# 
  5936  092A  018E               	clrf	14	;# 
  5937  092B  1B81               	btfsc	1,7	;# 
  5938  092C  3090               	movlw	144	;# 
  5939  092D  008E               	movwf	14	;# 
  5940  092E  3141               	addfsr 1,1	;# 
  5941  092F  3048               	movlw	72	;# 
  5942  0930  018E               	clrf	14	;# 
  5943  0931  1801               	btfsc	1,0	;# 
  5944  0932  3090               	movlw	144	;# 
  5945  0933  008E               	movwf	14	;# 
  5946  0934  3048               	movlw	72	;# 
  5947  0935  018E               	clrf	14	;# 
  5948  0936  1881               	btfsc	1,1	;# 
  5949  0937  3090               	movlw	144	;# 
  5950  0938  008E               	movwf	14	;# 
  5951  0939  3048               	movlw	72	;# 
  5952  093A  018E               	clrf	14	;# 
  5953  093B  1901               	btfsc	1,2	;# 
  5954  093C  3090               	movlw	144	;# 
  5955  093D  008E               	movwf	14	;# 
  5956  093E  3048               	movlw	72	;# 
  5957  093F  018E               	clrf	14	;# 
  5958  0940  1981               	btfsc	1,3	;# 
  5959  0941  3090               	movlw	144	;# 
  5960  0942  008E               	movwf	14	;# 
  5961  0943  3048               	movlw	72	;# 
  5962  0944  018E               	clrf	14	;# 
  5963  0945  1A01               	btfsc	1,4	;# 
  5964  0946  3090               	movlw	144	;# 
  5965  0947  008E               	movwf	14	;# 
  5966  0948  3048               	movlw	72	;# 
  5967  0949  018E               	clrf	14	;# 
  5968  094A  1A81               	btfsc	1,5	;# 
  5969  094B  3090               	movlw	144	;# 
  5970  094C  008E               	movwf	14	;# 
  5971  094D  3048               	movlw	72	;# 
  5972  094E  018E               	clrf	14	;# 
  5973  094F  1B01               	btfsc	1,6	;# 
  5974  0950  3090               	movlw	144	;# 
  5975  0951  008E               	movwf	14	;# 
  5976  0952  3048               	movlw	72	;# 
  5977  0953  018E               	clrf	14	;# 
  5978  0954  1B81               	btfsc	1,7	;# 
  5979  0955  3090               	movlw	144	;# 
  5980  0956  008E               	movwf	14	;# 
  5981  0957  3141               	addfsr 1,1	;# 
  5982  0958  3048               	movlw	72	;# 
  5983  0959  018E               	clrf	14	;# 
  5984  095A  1801               	btfsc	1,0	;# 
  5985  095B  3090               	movlw	144	;# 
  5986  095C  008E               	movwf	14	;# 
  5987  095D  3048               	movlw	72	;# 
  5988  095E  018E               	clrf	14	;# 
  5989  095F  1881               	btfsc	1,1	;# 
  5990  0960  3090               	movlw	144	;# 
  5991  0961  008E               	movwf	14	;# 
  5992  0962  3048               	movlw	72	;# 
  5993  0963  018E               	clrf	14	;# 
  5994  0964  1901               	btfsc	1,2	;# 
  5995  0965  3090               	movlw	144	;# 
  5996  0966  008E               	movwf	14	;# 
  5997  0967  3048               	movlw	72	;# 
  5998  0968  018E               	clrf	14	;# 
  5999  0969  1981               	btfsc	1,3	;# 
  6000  096A  3090               	movlw	144	;# 
  6001  096B  008E               	movwf	14	;# 
  6002  096C  3048               	movlw	72	;# 
  6003  096D  018E               	clrf	14	;# 
  6004  096E  1A01               	btfsc	1,4	;# 
  6005  096F  3090               	movlw	144	;# 
  6006  0970  008E               	movwf	14	;# 
  6007  0971  3048               	movlw	72	;# 
  6008  0972  018E               	clrf	14	;# 
  6009  0973  1A81               	btfsc	1,5	;# 
  6010  0974  3090               	movlw	144	;# 
  6011  0975  008E               	movwf	14	;# 
  6012  0976  3048               	movlw	72	;# 
  6013  0977  018E               	clrf	14	;# 
  6014  0978  1B01               	btfsc	1,6	;# 
  6015  0979  3090               	movlw	144	;# 
  6016  097A  008E               	movwf	14	;# 
  6017  097B  086D               	movf	_last_bit0& (0+127),w	;# 
  6018  097C  018E               	clrf	14	;# 
  6019  097D  1B81               	btfsc	1,7	;# 
  6020  097E  086E               	movf	_last_bit1& (0+127),w	;# 
  6021  097F  008E               	movwf	14	;# 
  6022  0980  3141               	addfsr 1,1	;# 
  6023  0981  0BEF               	decfsz	_send32_count& (0+127),f	;# 
  6024  0982  28DD               	goto	next_word	;# 
  6025  0983  0008               	return
  6026  0984                     __end_of_Send32:	
  6027                           
  6028                           	psect	text12
  6029  1C3D                     __ptext12:	
  6030 ;; *************** function _InitializeSystem *****************
  6031 ;; Defined at:
  6032 ;;		line 146 in file "main.c"
  6033 ;; Parameters:    Size  Location     Type
  6034 ;;		None
  6035 ;; Auto vars:     Size  Location     Type
  6036 ;;		None
  6037 ;; Return value:  Size  Location     Type
  6038 ;;		None               void
  6039 ;; Registers used:
  6040 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6041 ;; Tracked objects:
  6042 ;;		On entry : 0/0
  6043 ;;		On exit  : 0/0
  6044 ;;		Unchanged: 0/0
  6045 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6046 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6047 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6048 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6049 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6050 ;;Total ram usage:        0 bytes
  6051 ;; Hardware stack levels used:    1
  6052 ;; Hardware stack levels required when called:    7
  6053 ;; This function calls:
  6054 ;;		_USBDeviceInit
  6055 ;;		_UserInit
  6056 ;; This function is called by:
  6057 ;;		_main
  6058 ;; This function uses a non-reentrant model
  6059 ;;
  6060                           
  6061                           
  6062                           ;psect for function _InitializeSystem
  6063  1C3D                     _InitializeSystem:	
  6064                           
  6065                           ;main.c: 148: ANSELA = 0x00;
  6066                           
  6067                           ;incstack = 0
  6068                           ; Regs used in _InitializeSystem: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6069  1C3D  0023               	movlb	3	; select bank3
  6070  1C3E  018C               	clrf	12	;volatile
  6071                           
  6072                           ;main.c: 149: ANSELB = 0x00;
  6073  1C3F  018D               	clrf	13	;volatile
  6074                           
  6075                           ;main.c: 150: ANSELC = 0x04;
  6076  1C40  3004               	movlw	4
  6077  1C41  008E               	movwf	14	;volatile
  6078                           
  6079                           ;main.c: 153: OSCTUNE = 0;
  6080  1C42  0021               	movlb	1	; select bank1
  6081  1C43  0198               	clrf	24	;volatile
  6082                           
  6083                           ;main.c: 154: OSCCON = 0xFC;
  6084  1C44  30FC               	movlw	252
  6085  1C45  0099               	movwf	25	;volatile
  6086                           
  6087                           ;main.c: 155: ACTCON = 0x90;
  6088  1C46  3090               	movlw	144
  6089  1C47  0027               	movlb	7	; select bank7
  6090  1C48  009B               	movwf	27	;volatile
  6091                           
  6092                           ;main.c: 158: USBGenericOutHandle = 0;
  6093  1C49  0022               	movlb	2	; select bank2
  6094  1C4A  01E9               	clrf	_USBGenericOutHandle^(0+256)
  6095                           
  6096                           ;main.c: 159: USBGenericInHandle = 0;
  6097  1C4B  01E8               	clrf	_USBGenericInHandle^(0+256)
  6098                           
  6099                           ;main.c: 160: WQI = WQX = 0;
  6100  1C4C  0020               	movlb	0	; select bank0
  6101  1C4D  01EE               	clrf	_WQX
  6102  1C4E  0021               	movlb	1	; select bank1
  6103  1C4F  01EF               	clrf	_WQI^(0+128)
  6104                           
  6105                           ;main.c: 162: UserInit();
  6106  1C50  319B  23B6  319C   	fcall	_UserInit
  6107                           
  6108                           ;main.c: 164: USBDeviceInit();
  6109  1C53  3189  2184         	fcall	_USBDeviceInit
  6110  1C55  0008               	return
  6111  1C56                     __end_of_InitializeSystem:	
  6112                           
  6113                           	psect	text13
  6114  1BB6                     __ptext13:	
  6115 ;; *************** function _UserInit *****************
  6116 ;; Defined at:
  6117 ;;		line 170 in file "main.c"
  6118 ;; Parameters:    Size  Location     Type
  6119 ;;		None
  6120 ;; Auto vars:     Size  Location     Type
  6121 ;;		None
  6122 ;; Return value:  Size  Location     Type
  6123 ;;		None               void
  6124 ;; Registers used:
  6125 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6126 ;; Tracked objects:
  6127 ;;		On entry : 0/0
  6128 ;;		On exit  : 0/0
  6129 ;;		Unchanged: 0/0
  6130 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6131 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6132 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6133 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6134 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6135 ;;Total ram usage:        0 bytes
  6136 ;; Hardware stack levels used:    1
  6137 ;; Hardware stack levels required when called:    6
  6138 ;; This function calls:
  6139 ;;		_DetectAsics
  6140 ;;		_InitFAN
  6141 ;;		_InitTempSensor
  6142 ;;		_InitWorkTick
  6143 ;;		_InitResultRx
  6144 ;; This function is called by:
  6145 ;;		_InitializeSystem
  6146 ;; This function uses a non-reentrant model
  6147 ;;
  6148                           
  6149                           
  6150                           ;psect for function _UserInit
  6151  1BB6                     _UserInit:	
  6152                           
  6153                           ;main.c: 171: TRISAbits.TRISA5 = 0; LATAbits.LATA5 = 1;;
  6154                           
  6155                           ;incstack = 0
  6156                           ; Regs used in _UserInit: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6157  1BB6  0021               	movlb	1	; select bank1
  6158  1BB7  128C               	bcf	12,5	;volatile
  6159  1BB8  0022               	movlb	2	; select bank2
  6160  1BB9  168C               	bsf	12,5	;volatile
  6161                           
  6162                           ;main.c: 172: InitTempSensor();
  6163  1BBA  319B  23DE  319B   	fcall	_InitTempSensor
  6164                           
  6165                           ;main.c: 173: InitFAN();
  6166  1BBD  319C  2456  319B   	fcall	_InitFAN
  6167                           
  6168                           ;main.c: 174: InitWorkTick();
  6169  1BC0  319B  23C9  319B   	fcall	_InitWorkTick
  6170                           
  6171                           ;main.c: 176: InitResultRx();
  6172  1BC3  319B  23A3  319B   	fcall	_InitResultRx
  6173                           
  6174                           ;main.c: 177: DetectAsics();
  6175  1BC6  318C  244D         	fcall	_DetectAsics
  6176  1BC8  0008               	return
  6177  1BC9                     __end_of_UserInit:	
  6178                           
  6179                           	psect	text14
  6180  1BA3                     __ptext14:	
  6181 ;; *************** function _InitResultRx *****************
  6182 ;; Defined at:
  6183 ;;		line 313 in file "klondike.c"
  6184 ;; Parameters:    Size  Location     Type
  6185 ;;		None
  6186 ;; Auto vars:     Size  Location     Type
  6187 ;;		None
  6188 ;; Return value:  Size  Location     Type
  6189 ;;		None               void
  6190 ;; Registers used:
  6191 ;;		wreg, status,2
  6192 ;; Tracked objects:
  6193 ;;		On entry : 0/0
  6194 ;;		On exit  : 0/0
  6195 ;;		Unchanged: 0/0
  6196 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6197 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6198 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6199 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6200 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6201 ;;Total ram usage:        0 bytes
  6202 ;; Hardware stack levels used:    1
  6203 ;; Hardware stack levels required when called:    4
  6204 ;; This function calls:
  6205 ;;		Nothing
  6206 ;; This function is called by:
  6207 ;;		_UserInit
  6208 ;; This function uses a non-reentrant model
  6209 ;;
  6210                           
  6211                           
  6212                           ;psect for function _InitResultRx
  6213  1BA3                     _InitResultRx:	
  6214                           
  6215                           ;klondike.c: 314: ResultQC = 0;
  6216                           
  6217                           ;incstack = 0
  6218                           ; Regs used in _InitResultRx: [wreg+status,2]
  6219  1BA3  0022               	movlb	2	; select bank2
  6220  1BA4  01E2               	clrf	_ResultQC^(0+256)
  6221                           
  6222                           ;klondike.c: 315: TXSTAbits.SYNC = 1;
  6223  1BA5  0023               	movlb	3	; select bank3
  6224  1BA6  161E               	bsf	30,4	;volatile
  6225                           
  6226                           ;klondike.c: 316: RCSTAbits.SPEN = 1;
  6227  1BA7  179D               	bsf	29,7	;volatile
  6228                           
  6229                           ;klondike.c: 317: TXSTAbits.CSRC = 0;
  6230  1BA8  139E               	bcf	30,7	;volatile
  6231                           
  6232                           ;klondike.c: 318: BAUDCONbits.SCKP = 0;
  6233  1BA9  121F               	bcf	31,4	;volatile
  6234                           
  6235                           ;klondike.c: 319: BAUDCONbits.BRG16 = 1;
  6236  1BAA  159F               	bsf	31,3	;volatile
  6237                           
  6238                           ;klondike.c: 320: ANSELBbits.ANSB5 = 0;
  6239  1BAB  128D               	bcf	13,5	;volatile
  6240                           
  6241                           ;klondike.c: 322: IOCBPbits.IOCBP7 = 1;
  6242  1BAC  0027               	movlb	7	; select bank7
  6243  1BAD  1794               	bsf	20,7	;volatile
  6244                           
  6245                           ;klondike.c: 323: INTCONbits.IOCIE = 1;
  6246  1BAE  158B               	bsf	11,3	;volatile
  6247                           
  6248                           ;klondike.c: 324: IOCBF = 0;
  6249  1BAF  0196               	clrf	22	;volatile
  6250                           
  6251                           ;klondike.c: 326: INTCONbits.GIE = 1;
  6252  1BB0  178B               	bsf	11,7	;volatile
  6253                           
  6254                           ;klondike.c: 327: RCSTAbits.CREN = 1;
  6255  1BB1  0023               	movlb	3	; select bank3
  6256  1BB2  161D               	bsf	29,4	;volatile
  6257                           
  6258                           ;klondike.c: 328: RCREG = 0xFF;
  6259  1BB3  30FF               	movlw	255
  6260  1BB4  0099               	movwf	25	;volatile
  6261  1BB5  0008               	return
  6262  1BB6                     __end_of_InitResultRx:	
  6263                           
  6264                           	psect	text15
  6265  1BC9                     __ptext15:	
  6266 ;; *************** function _InitWorkTick *****************
  6267 ;; Defined at:
  6268 ;;		line 296 in file "klondike.c"
  6269 ;; Parameters:    Size  Location     Type
  6270 ;;		None
  6271 ;; Auto vars:     Size  Location     Type
  6272 ;;		None
  6273 ;; Return value:  Size  Location     Type
  6274 ;;		None               void
  6275 ;; Registers used:
  6276 ;;		wreg, status,2, status,0
  6277 ;; Tracked objects:
  6278 ;;		On entry : 0/0
  6279 ;;		On exit  : 0/0
  6280 ;;		Unchanged: 0/0
  6281 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6282 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6283 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6284 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6285 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6286 ;;Total ram usage:        0 bytes
  6287 ;; Hardware stack levels used:    1
  6288 ;; Hardware stack levels required when called:    4
  6289 ;; This function calls:
  6290 ;;		Nothing
  6291 ;; This function is called by:
  6292 ;;		_UserInit
  6293 ;; This function uses a non-reentrant model
  6294 ;;
  6295                           
  6296                           
  6297                           ;psect for function _InitWorkTick
  6298  1BC9                     _InitWorkTick:	
  6299                           
  6300                           ;klondike.c: 297: TMR0CS = 0;
  6301                           
  6302                           ;incstack = 0
  6303                           ; Regs used in _InitWorkTick: [wreg+status,2+status,0]
  6304  1BC9  0021               	movlb	1	; select bank1
  6305  1BCA  1295               	bcf	21,5	;volatile
  6306                           
  6307                           ;klondike.c: 298: OPTION_REGbits.PSA = 0;
  6308  1BCB  1195               	bcf	21,3	;volatile
  6309                           
  6310                           ;klondike.c: 299: OPTION_REGbits.PS = 7;
  6311  1BCC  3007               	movlw	7
  6312  1BCD  0495               	iorwf	21,f	;volatile
  6313                           
  6314                           ;klondike.c: 300: TMR0 = HashTime;
  6315  1BCE  0020               	movlb	0	; select bank0
  6316  1BCF  086F               	movf	_HashTime,w
  6317  1BD0  0095               	movwf	21	;volatile
  6318                           
  6319                           ;klondike.c: 303: TRISCbits.TRISC7 = 0;
  6320  1BD1  0021               	movlb	1	; select bank1
  6321  1BD2  138E               	bcf	14,7	;volatile
  6322                           
  6323                           ;klondike.c: 304: TRISCbits.TRISC6 = 0;
  6324  1BD3  130E               	bcf	14,6	;volatile
  6325                           
  6326                           ;klondike.c: 305: TRISCbits.TRISC4 = 0;
  6327  1BD4  120E               	bcf	14,4	;volatile
  6328                           
  6329                           ;klondike.c: 306: TRISCbits.TRISC3 = 0;
  6330  1BD5  118E               	bcf	14,3	;volatile
  6331                           
  6332                           ;klondike.c: 307: LATC = 0xD8;;
  6333  1BD6  30D8               	movlw	216
  6334  1BD7  0022               	movlb	2	; select bank2
  6335  1BD8  008E               	movwf	14	;volatile
  6336                           
  6337                           ;klondike.c: 308: TRISAbits.TRISA4 = 0;
  6338  1BD9  0021               	movlb	1	; select bank1
  6339  1BDA  120C               	bcf	12,4	;volatile
  6340                           
  6341                           ;klondike.c: 309: LATAbits.LATA4 = 1;
  6342  1BDB  0022               	movlb	2	; select bank2
  6343  1BDC  160C               	bsf	12,4	;volatile
  6344  1BDD  0008               	return
  6345  1BDE                     __end_of_InitWorkTick:	
  6346                           
  6347                           	psect	text16
  6348  1BDE                     __ptext16:	
  6349 ;; *************** function _InitTempSensor *****************
  6350 ;; Defined at:
  6351 ;;		line 282 in file "klondike.c"
  6352 ;; Parameters:    Size  Location     Type
  6353 ;;		None
  6354 ;; Auto vars:     Size  Location     Type
  6355 ;;		None
  6356 ;; Return value:  Size  Location     Type
  6357 ;;		None               void
  6358 ;; Registers used:
  6359 ;;		wreg, status,2, status,0
  6360 ;; Tracked objects:
  6361 ;;		On entry : 0/0
  6362 ;;		On exit  : 0/0
  6363 ;;		Unchanged: 0/0
  6364 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6365 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6366 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6367 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6368 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6369 ;;Total ram usage:        1 bytes
  6370 ;; Hardware stack levels used:    1
  6371 ;; Hardware stack levels required when called:    4
  6372 ;; This function calls:
  6373 ;;		Nothing
  6374 ;; This function is called by:
  6375 ;;		_UserInit
  6376 ;; This function uses a non-reentrant model
  6377 ;;
  6378                           
  6379                           
  6380                           ;psect for function _InitTempSensor
  6381  1BDE                     _InitTempSensor:	
  6382                           
  6383                           ;klondike.c: 283: TRISCbits.TRISC2=1;
  6384                           
  6385                           ;incstack = 0
  6386                           ; Regs used in _InitTempSensor: [wreg+status,2+status,0]
  6387  1BDE  0021               	movlb	1	; select bank1
  6388  1BDF  150E               	bsf	14,2	;volatile
  6389                           
  6390                           ;klondike.c: 286: ADCON0bits.CHS = 6;
  6391  1BE0  081D               	movf	29,w	;volatile
  6392  1BE1  3983               	andlw	-125
  6393  1BE2  3818               	iorlw	24
  6394  1BE3  009D               	movwf	29	;volatile
  6395                           
  6396                           ;klondike.c: 287: ADCON0bits.ADON = 1;
  6397  1BE4  141D               	bsf	29,0	;volatile
  6398                           
  6399                           ;klondike.c: 288: ADCON1bits.ADFM = 0;
  6400  1BE5  139E               	bcf	30,7	;volatile
  6401                           
  6402                           ;klondike.c: 289: ADCON1bits.ADCS = 6;
  6403  1BE6  081E               	movf	30,w	;volatile
  6404  1BE7  398F               	andlw	-113
  6405  1BE8  3860               	iorlw	96
  6406  1BE9  009E               	movwf	30	;volatile
  6407                           
  6408                           ;klondike.c: 290: ADCON1bits.ADPREF = 0;
  6409  1BEA  30FC               	movlw	-4
  6410  1BEB  059E               	andwf	30,f	;volatile
  6411                           
  6412                           ;klondike.c: 291: ADCON2bits.TRIGSEL = 0;
  6413  1BEC  308F               	movlw	-113
  6414  1BED  059F               	andwf	31,f	;volatile
  6415                           
  6416                           ;klondike.c: 292: TempTarget = 143;
  6417  1BEE  308F               	movlw	143
  6418  1BEF  0020               	movlb	0	; select bank0
  6419  1BF0  00DE               	movwf	??_InitTempSensor
  6420  1BF1  085E               	movf	??_InitTempSensor,w
  6421  1BF2  0023               	movlb	3	; select bank3
  6422  1BF3  00E4               	movwf	_TempTarget^(0+384)
  6423  1BF4  0008               	return
  6424  1BF5                     __end_of_InitTempSensor:	
  6425                           
  6426                           	psect	text17
  6427  1C56                     __ptext17:	
  6428 ;; *************** function _InitFAN *****************
  6429 ;; Defined at:
  6430 ;;		line 262 in file "klondike.c"
  6431 ;; Parameters:    Size  Location     Type
  6432 ;;		None
  6433 ;; Auto vars:     Size  Location     Type
  6434 ;;		None
  6435 ;; Return value:  Size  Location     Type
  6436 ;;		None               void
  6437 ;; Registers used:
  6438 ;;		wreg, status,2, status,0
  6439 ;; Tracked objects:
  6440 ;;		On entry : 0/0
  6441 ;;		On exit  : 0/0
  6442 ;;		Unchanged: 0/0
  6443 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6444 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6445 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6446 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6447 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6448 ;;Total ram usage:        0 bytes
  6449 ;; Hardware stack levels used:    1
  6450 ;; Hardware stack levels required when called:    4
  6451 ;; This function calls:
  6452 ;;		Nothing
  6453 ;; This function is called by:
  6454 ;;		_UserInit
  6455 ;; This function uses a non-reentrant model
  6456 ;;
  6457                           
  6458                           
  6459                           ;psect for function _InitFAN
  6460  1C56                     _InitFAN:	
  6461                           
  6462                           ;klondike.c: 263: TRISCbits.TRISC5 = 1;
  6463                           
  6464                           ;incstack = 0
  6465                           ; Regs used in _InitFAN: [wreg+status,2+status,0]
  6466  1C56  0021               	movlb	1	; select bank1
  6467  1C57  168E               	bsf	14,5	;volatile
  6468                           
  6469                           ;klondike.c: 264: PWM1CON = 0;
  6470  1C58  002C               	movlb	12	; select bank12
  6471  1C59  0193               	clrf	19	;volatile
  6472                           
  6473                           ;klondike.c: 265: PR2 = 0xFF;
  6474  1C5A  30FF               	movlw	255
  6475  1C5B  0020               	movlb	0	; select bank0
  6476  1C5C  009B               	movwf	27	;volatile
  6477                           
  6478                           ;klondike.c: 266: PWM1CON = 0xC0;
  6479  1C5D  30C0               	movlw	192
  6480  1C5E  002C               	movlb	12	; select bank12
  6481  1C5F  0093               	movwf	19	;volatile
  6482                           
  6483                           ;klondike.c: 267: PWM1DCH = FanLevel = 230;
  6484  1C60  30E6               	movlw	230
  6485  1C61  0023               	movlb	3	; select bank3
  6486  1C62  00E3               	movwf	_FanLevel^(0+384)
  6487  1C63  002C               	movlb	12	; select bank12
  6488  1C64  0092               	movwf	18	;volatile
  6489                           
  6490                           ;klondike.c: 268: PWM1DCL = 0;
  6491  1C65  0191               	clrf	17	;volatile
  6492                           
  6493                           ;klondike.c: 269: TMR2IF = 0;
  6494  1C66  0020               	movlb	0	; select bank0
  6495  1C67  1091               	bcf	17,1	;volatile
  6496                           
  6497                           ;klondike.c: 270: T2CONbits.T2CKPS = 1;
  6498  1C68  081C               	movf	28,w	;volatile
  6499  1C69  39FC               	andlw	-4
  6500  1C6A  3801               	iorlw	1
  6501  1C6B  009C               	movwf	28	;volatile
  6502                           
  6503                           ;klondike.c: 271: TMR2ON = 1;
  6504  1C6C  151C               	bsf	28,2	;volatile
  6505                           
  6506                           ;klondike.c: 272: TRISCbits.TRISC5 = 0;
  6507  1C6D  0021               	movlb	1	; select bank1
  6508  1C6E  128E               	bcf	14,5	;volatile
  6509                           
  6510                           ;klondike.c: 273: PWM1OE=1;
  6511  1C6F  002C               	movlb	12	; select bank12
  6512  1C70  1713               	bsf	19,6	;volatile
  6513  1C71  0008               	return
  6514  1C72                     __end_of_InitFAN:	
  6515                           
  6516                           	psect	text18
  6517  0C4D                     __ptext18:	
  6518 ;; *************** function _DetectAsics *****************
  6519 ;; Defined at:
  6520 ;;		line 148 in file "klondike.c"
  6521 ;; Parameters:    Size  Location     Type
  6522 ;;		None
  6523 ;; Auto vars:     Size  Location     Type
  6524 ;;  x               1   14[BANK1 ] unsigned char 
  6525 ;; Return value:  Size  Location     Type
  6526 ;;		None               void
  6527 ;; Registers used:
  6528 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6529 ;; Tracked objects:
  6530 ;;		On entry : 0/0
  6531 ;;		On exit  : 0/0
  6532 ;;		Unchanged: 0/0
  6533 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6534 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6535 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  6536 ;;      Temps:          0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
  6537 ;;      Totals:         0       0      10       0       0       0       0       0       0       0       0       0       
      +0       0
  6538 ;;Total ram usage:       10 bytes
  6539 ;; Hardware stack levels used:    1
  6540 ;; Hardware stack levels required when called:    5
  6541 ;; This function calls:
  6542 ;;		___awdiv
  6543 ;; This function is called by:
  6544 ;;		_UserInit
  6545 ;; This function uses a non-reentrant model
  6546 ;;
  6547                           
  6548                           
  6549                           ;psect for function _DetectAsics
  6550  0C4D                     _DetectAsics:	
  6551                           
  6552                           ;klondike.c: 149: Status.ChipCount = 16;
  6553                           
  6554                           ;incstack = 0
  6555                           ; Regs used in _DetectAsics: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6556  0C4D  3010               	movlw	16
  6557  0C4E  0021               	movlb	1	; select bank1
  6558  0C4F  00A5               	movwf	??_DetectAsics^(0+128)
  6559  0C50  0825               	movf	??_DetectAsics^(0+128),w
  6560  0C51  0023               	movlb	3	; select bank3
  6561  0C52  00AD               	movwf	(_Status^(0+384)+1)	;volatile
  6562                           
  6563                           ;klondike.c: 152: BankSize = (Status.ChipCount)/2;
  6564  0C53  3002               	movlw	2
  6565  0C54  0020               	movlb	0	; select bank0
  6566  0C55  00DE               	movwf	?___awdiv
  6567  0C56  3000               	movlw	0
  6568  0C57  00DF               	movwf	?___awdiv+1
  6569  0C58  0023               	movlb	3	; select bank3
  6570  0C59  082D               	movf	(_Status^(0+384)+1),w	;volatile
  6571  0C5A  0021               	movlb	1	; select bank1
  6572  0C5B  00A5               	movwf	??_DetectAsics^(0+128)
  6573  0C5C  01A6               	clrf	(??_DetectAsics^(0+128)+1)
  6574  0C5D  0825               	movf	??_DetectAsics^(0+128),w
  6575  0C5E  0020               	movlb	0	; select bank0
  6576  0C5F  00E0               	movwf	?___awdiv+2
  6577  0C60  0021               	movlb	1	; select bank1
  6578  0C61  0826               	movf	(??_DetectAsics+1)^(0+128),w
  6579  0C62  0020               	movlb	0	; select bank0
  6580  0C63  00E1               	movwf	?___awdiv+3
  6581  0C64  3191  2101  318C   	fcall	___awdiv
  6582  0C67  0020               	movlb	0	; select bank0
  6583  0C68  085E               	movf	?___awdiv,w
  6584  0C69  0021               	movlb	1	; select bank1
  6585  0C6A  00A7               	movwf	(??_DetectAsics+2)^(0+128)
  6586  0C6B  0827               	movf	(??_DetectAsics+2)^(0+128),w
  6587  0C6C  0023               	movlb	3	; select bank3
  6588  0C6D  00E5               	movwf	_BankSize^(0+384)
  6589                           
  6590                           ;klondike.c: 153: Status.MaxCount = 16384 / BankSize / 2;
  6591  0C6E  0865               	movf	_BankSize^(0+384),w
  6592  0C6F  0021               	movlb	1	; select bank1
  6593  0C70  00A5               	movwf	??_DetectAsics^(0+128)
  6594  0C71  01A6               	clrf	(??_DetectAsics^(0+128)+1)
  6595  0C72  0825               	movf	??_DetectAsics^(0+128),w
  6596  0C73  0020               	movlb	0	; select bank0
  6597  0C74  00DE               	movwf	?___awdiv
  6598  0C75  0021               	movlb	1	; select bank1
  6599  0C76  0826               	movf	(??_DetectAsics+1)^(0+128),w
  6600  0C77  0020               	movlb	0	; select bank0
  6601  0C78  00DF               	movwf	?___awdiv+1
  6602  0C79  3000               	movlw	0
  6603  0C7A  00E0               	movwf	?___awdiv+2
  6604  0C7B  3040               	movlw	64
  6605  0C7C  00E1               	movwf	?___awdiv+3
  6606  0C7D  3191  2101  318C   	fcall	___awdiv
  6607  0C80  0020               	movlb	0	; select bank0
  6608  0C81  085F               	movf	?___awdiv+1,w
  6609  0C82  0021               	movlb	1	; select bank1
  6610  0C83  01AD               	clrf	(_DetectAsics$2873+1)^(0+128)
  6611  0C84  07AD               	addwf	(_DetectAsics$2873+1)^(0+128),f
  6612  0C85  0020               	movlb	0	; select bank0
  6613  0C86  085E               	movf	?___awdiv,w
  6614  0C87  0021               	movlb	1	; select bank1
  6615  0C88  01AC               	clrf	_DetectAsics$2873^(0+128)
  6616  0C89  07AC               	addwf	_DetectAsics$2873^(0+128),f
  6617                           
  6618                           ;klondike.c: 153: Status.MaxCount = 16384 / BankSize / 2;
  6619  0C8A  3002               	movlw	2
  6620  0C8B  0020               	movlb	0	; select bank0
  6621  0C8C  00DE               	movwf	?___awdiv
  6622  0C8D  3000               	movlw	0
  6623  0C8E  00DF               	movwf	?___awdiv+1
  6624  0C8F  0021               	movlb	1	; select bank1
  6625  0C90  082D               	movf	(_DetectAsics$2873+1)^(0+128),w
  6626  0C91  0020               	movlb	0	; select bank0
  6627  0C92  01E1               	clrf	?___awdiv+3
  6628  0C93  07E1               	addwf	?___awdiv+3,f
  6629  0C94  0021               	movlb	1	; select bank1
  6630  0C95  082C               	movf	_DetectAsics$2873^(0+128),w
  6631  0C96  0020               	movlb	0	; select bank0
  6632  0C97  01E0               	clrf	?___awdiv+2
  6633  0C98  07E0               	addwf	?___awdiv+2,f
  6634  0C99  3191  2101  318C   	fcall	___awdiv
  6635  0C9C  0020               	movlb	0	; select bank0
  6636  0C9D  085F               	movf	?___awdiv+1,w
  6637  0C9E  0023               	movlb	3	; select bank3
  6638  0C9F  01B7               	clrf	((_Status+1)^(0+384)+10)	;volatile
  6639  0CA0  07B7               	addwf	((_Status+1)^(0+384)+10),f	;volatile
  6640  0CA1  0020               	movlb	0	; select bank0
  6641  0CA2  085E               	movf	?___awdiv,w
  6642  0CA3  0023               	movlb	3	; select bank3
  6643  0CA4  01B6               	clrf	(_Status^(0+384)+10)	;volatile
  6644  0CA5  07B6               	addwf	(_Status^(0+384)+10),f	;volatile
  6645                           
  6646                           ;klondike.c: 155: NonceRanges[0] = 0;
  6647  0CA6  3000               	movlw	0
  6648  0CA7  0026               	movlb	6	; select bank6
  6649  0CA8  00A3               	movwf	(_NonceRanges+3)^(0+768)
  6650  0CA9  3000               	movlw	0
  6651  0CAA  00A2               	movwf	(_NonceRanges+2)^(0+768)
  6652  0CAB  3000               	movlw	0
  6653  0CAC  00A1               	movwf	(_NonceRanges+1)^(0+768)
  6654  0CAD  3000               	movlw	0
  6655  0CAE  00A0               	movwf	_NonceRanges^(0+768)
  6656                           
  6657                           ;klondike.c: 156: for(BYTE x = 1; x < BankSize; x++)
  6658  0CAF  0021               	movlb	1	; select bank1
  6659  0CB0  01AE               	clrf	DetectAsics@x^(0+128)
  6660  0CB1  0AAE               	incf	DetectAsics@x^(0+128),f
  6661  0CB2                     l5443:	
  6662  0CB2  0023               	movlb	3	; select bank3
  6663  0CB3  0865               	movf	_BankSize^(0+384),w
  6664  0CB4  0021               	movlb	1	; select bank1
  6665  0CB5  022E               	subwf	DetectAsics@x^(0+128),w
  6666  0CB6  1803               	btfsc	3,0
  6667  0CB7  2CFD               	goto	l5445
  6668                           
  6669                           ;klondike.c: 157: NonceRanges[x] = NonceRanges[x-1] + BankRanges[BankSize-1];
  6670  0CB8  0023               	movlb	3	; select bank3
  6671  0CB9  0865               	movf	_BankSize^(0+384),w
  6672  0CBA  0021               	movlb	1	; select bank1
  6673  0CBB  00A5               	movwf	??_DetectAsics^(0+128)
  6674  0CBC  3001               	movlw	1
  6675  0CBD                     u5295:	
  6676  0CBD  35A5               	lslf	??_DetectAsics^(0+128),f
  6677  0CBE  3EFF               	addlw	-1
  6678  0CBF  1D03               	skipz
  6679  0CC0  2CBD               	goto	u5295
  6680  0CC1  3525               	lslf	??_DetectAsics^(0+128),w
  6681  0CC2  3EFC               	addlw	252
  6682  0CC3  3EA0               	addlw	_BankRanges& (0+255)
  6683  0CC4  0086               	movwf	6
  6684  0CC5  3003               	movlw	3	; select bank7/8
  6685  0CC6  0087               	movwf	7
  6686  0CC7  3F40               	moviw [0]fsr1
  6687  0CC8  00A6               	movwf	(??_DetectAsics+1)^(0+128)
  6688  0CC9  3F41               	moviw [1]fsr1
  6689  0CCA  00A7               	movwf	((??_DetectAsics+1)^(0+128)+1)
  6690  0CCB  3F42               	moviw [2]fsr1
  6691  0CCC  00A8               	movwf	((??_DetectAsics+1)^(0+128)+2)
  6692  0CCD  3F43               	moviw [3]fsr1
  6693  0CCE  00A9               	movwf	((??_DetectAsics+1)^(0+128)+3)
  6694  0CCF  082E               	movf	DetectAsics@x^(0+128),w
  6695  0CD0  00AA               	movwf	(??_DetectAsics+5)^(0+128)
  6696  0CD1  3001               	movlw	1
  6697  0CD2                     u5305:	
  6698  0CD2  35AA               	lslf	(??_DetectAsics+5)^(0+128),f
  6699  0CD3  3EFF               	addlw	-1
  6700  0CD4  1D03               	skipz
  6701  0CD5  2CD2               	goto	u5305
  6702  0CD6  352A               	lslf	(??_DetectAsics+5)^(0+128),w
  6703  0CD7  3EFC               	addlw	252
  6704  0CD8  3E20               	addlw	_NonceRanges& (0+255)
  6705  0CD9  0086               	movwf	6
  6706  0CDA  3003               	movlw	3	; select bank6/7
  6707  0CDB  0087               	movwf	7
  6708  0CDC  3F40               	moviw [0]fsr1
  6709  0CDD  07A6               	addwf	(??_DetectAsics+1)^(0+128),f
  6710  0CDE  3F41               	moviw [1]fsr1
  6711  0CDF  3DA7               	addwfc	((??_DetectAsics+1)^(0+128)+1),f
  6712  0CE0  3F42               	moviw [2]fsr1
  6713  0CE1  3DA8               	addwfc	((??_DetectAsics+1)^(0+128)+2),f
  6714  0CE2  3F43               	moviw [3]fsr1
  6715  0CE3  3DA9               	addwfc	((??_DetectAsics+1)^(0+128)+3),f
  6716  0CE4  082E               	movf	DetectAsics@x^(0+128),w
  6717  0CE5  00AB               	movwf	(??_DetectAsics+6)^(0+128)
  6718  0CE6  3001               	movlw	1
  6719  0CE7                     u5315:	
  6720  0CE7  35AB               	lslf	(??_DetectAsics+6)^(0+128),f
  6721  0CE8  3EFF               	addlw	-1
  6722  0CE9  1D03               	skipz
  6723  0CEA  2CE7               	goto	u5315
  6724  0CEB  352B               	lslf	(??_DetectAsics+6)^(0+128),w
  6725  0CEC  3E20               	addlw	_NonceRanges& (0+255)
  6726  0CED  0086               	movwf	6
  6727  0CEE  3003               	movlw	3	; select bank6/7
  6728  0CEF  0087               	movwf	7
  6729  0CF0  0826               	movf	(??_DetectAsics+1)^(0+128),w
  6730  0CF1  3FC0               	movwi [0]fsr1
  6731  0CF2  0827               	movf	(??_DetectAsics+2)^(0+128),w
  6732  0CF3  3FC1               	movwi [1]fsr1
  6733  0CF4  0828               	movf	(??_DetectAsics+3)^(0+128),w
  6734  0CF5  3FC2               	movwi [2]fsr1
  6735  0CF6  0829               	movf	(??_DetectAsics+4)^(0+128),w
  6736  0CF7  3FC3               	movwi [3]fsr1
  6737  0CF8  3001               	movlw	1
  6738  0CF9  00A5               	movwf	??_DetectAsics^(0+128)
  6739  0CFA  0825               	movf	??_DetectAsics^(0+128),w
  6740  0CFB  07AE               	addwf	DetectAsics@x^(0+128),f
  6741  0CFC  2CB2               	goto	l5443
  6742  0CFD                     l5445:	
  6743                           
  6744                           ;klondike.c: 159: Status.State ='R';
  6745  0CFD  3052               	movlw	82
  6746  0CFE  00A5               	movwf	??_DetectAsics^(0+128)
  6747  0CFF  0825               	movf	??_DetectAsics^(0+128),w
  6748  0D00  0023               	movlb	3	; select bank3
  6749  0D01  00AC               	movwf	_Status^(0+384)	;volatile
  6750                           
  6751                           ;klondike.c: 160: Status.HashCount = 0;
  6752  0D02  01B4               	clrf	(_Status^(0+384)+8)	;volatile
  6753  0D03  01B5               	clrf	((_Status+1)^(0+384)+8)	;volatile
  6754  0D04  0008               	return
  6755  0D05                     __end_of_DetectAsics:	
  6756                           
  6757                           	psect	text19
  6758  1101                     __ptext19:	
  6759 ;; *************** function ___awdiv *****************
  6760 ;; Defined at:
  6761 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.20\sources\pic\awdiv.c"
  6762 ;; Parameters:    Size  Location     Type
  6763 ;;  divisor         2   14[BANK0 ] int 
  6764 ;;  dividend        2   16[BANK0 ] int 
  6765 ;; Auto vars:     Size  Location     Type
  6766 ;;  quotient        2    3[BANK1 ] int 
  6767 ;;  sign            1    2[BANK1 ] unsigned char 
  6768 ;;  counter         1    1[BANK1 ] unsigned char 
  6769 ;; Return value:  Size  Location     Type
  6770 ;;                  2   14[BANK0 ] int 
  6771 ;; Registers used:
  6772 ;;		wreg, status,2, status,0
  6773 ;; Tracked objects:
  6774 ;;		On entry : 0/0
  6775 ;;		On exit  : 0/0
  6776 ;;		Unchanged: 0/0
  6777 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6778 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6779 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  6780 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6781 ;;      Totals:         0       4       5       0       0       0       0       0       0       0       0       0       
      +0       0
  6782 ;;Total ram usage:        9 bytes
  6783 ;; Hardware stack levels used:    1
  6784 ;; Hardware stack levels required when called:    4
  6785 ;; This function calls:
  6786 ;;		Nothing
  6787 ;; This function is called by:
  6788 ;;		_DetectAsics
  6789 ;; This function uses a non-reentrant model
  6790 ;;
  6791                           
  6792                           
  6793                           ;psect for function ___awdiv
  6794  1101                     ___awdiv:	
  6795                           
  6796                           ;incstack = 0
  6797                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  6798  1101  0021               	movlb	1	; select bank1
  6799  1102  01A2               	clrf	___awdiv@sign^(0+128)
  6800  1103  0020               	movlb	0	; select bank0
  6801  1104  1FDF               	btfss	___awdiv@divisor+1,7
  6802  1105  290E               	goto	l5707
  6803  1106  09DE               	comf	___awdiv@divisor,f
  6804  1107  09DF               	comf	___awdiv@divisor+1,f
  6805  1108  0ADE               	incf	___awdiv@divisor,f
  6806  1109  1903               	skipnz
  6807  110A  0ADF               	incf	___awdiv@divisor+1,f
  6808  110B  0021               	movlb	1	; select bank1
  6809  110C  01A2               	clrf	___awdiv@sign^(0+128)
  6810  110D  0AA2               	incf	___awdiv@sign^(0+128),f
  6811  110E                     l5707:	
  6812  110E  0020               	movlb	0	; select bank0
  6813  110F  1FE1               	btfss	___awdiv@dividend+1,7
  6814  1110  291B               	goto	l5713
  6815  1111  09E0               	comf	___awdiv@dividend,f
  6816  1112  09E1               	comf	___awdiv@dividend+1,f
  6817  1113  0AE0               	incf	___awdiv@dividend,f
  6818  1114  1903               	skipnz
  6819  1115  0AE1               	incf	___awdiv@dividend+1,f
  6820  1116  3001               	movlw	1
  6821  1117  0021               	movlb	1	; select bank1
  6822  1118  00A0               	movwf	??___awdiv^(0+128)
  6823  1119  0820               	movf	??___awdiv^(0+128),w
  6824  111A  06A2               	xorwf	___awdiv@sign^(0+128),f
  6825  111B                     l5713:	
  6826  111B  0021               	movlb	1	; select bank1
  6827  111C  01A3               	clrf	___awdiv@quotient^(0+128)
  6828  111D  01A4               	clrf	(___awdiv@quotient+1)^(0+128)
  6829  111E  0020               	movlb	0	; select bank0
  6830  111F  085F               	movf	___awdiv@divisor+1,w
  6831  1120  045E               	iorwf	___awdiv@divisor,w
  6832  1121  1903               	skipnz
  6833  1122  2955               	goto	l5735
  6834  1123  0021               	movlb	1	; select bank1
  6835  1124  01A1               	clrf	___awdiv@counter^(0+128)
  6836  1125  0AA1               	incf	___awdiv@counter^(0+128),f
  6837  1126                     l5723:	
  6838  1126  0020               	movlb	0	; select bank0
  6839  1127  1BDF               	btfsc	___awdiv@divisor+1,7
  6840  1128  2935               	goto	l5725
  6841  1129  3001               	movlw	1
  6842  112A  0020               	movlb	0	; select bank0
  6843  112B                     u5685:	
  6844  112B  35DE               	lslf	___awdiv@divisor,f
  6845  112C  0DDF               	rlf	___awdiv@divisor+1,f
  6846  112D  0B89               	decfsz	9,f
  6847  112E  292B               	goto	u5685
  6848  112F  3001               	movlw	1
  6849  1130  0021               	movlb	1	; select bank1
  6850  1131  00A0               	movwf	??___awdiv^(0+128)
  6851  1132  0820               	movf	??___awdiv^(0+128),w
  6852  1133  07A1               	addwf	___awdiv@counter^(0+128),f
  6853  1134  2926               	goto	l5723
  6854  1135                     l5725:	
  6855  1135  3001               	movlw	1
  6856  1136  0021               	movlb	1	; select bank1
  6857  1137                     u5705:	
  6858  1137  35A3               	lslf	___awdiv@quotient^(0+128),f
  6859  1138  0DA4               	rlf	(___awdiv@quotient+1)^(0+128),f
  6860  1139  0B89               	decfsz	9,f
  6861  113A  2937               	goto	u5705
  6862  113B  0020               	movlb	0	; select bank0
  6863  113C  085F               	movf	___awdiv@divisor+1,w
  6864  113D  0261               	subwf	___awdiv@dividend+1,w
  6865  113E  1D03               	skipz
  6866  113F  2942               	goto	u5715
  6867  1140  085E               	movf	___awdiv@divisor,w
  6868  1141  0260               	subwf	___awdiv@dividend,w
  6869  1142                     u5715:	
  6870  1142  1C03               	skipc
  6871  1143  294A               	goto	l5731
  6872  1144  085E               	movf	___awdiv@divisor,w
  6873  1145  02E0               	subwf	___awdiv@dividend,f
  6874  1146  085F               	movf	___awdiv@divisor+1,w
  6875  1147  3BE1               	subwfb	___awdiv@dividend+1,f
  6876  1148  0021               	movlb	1	; select bank1
  6877  1149  1423               	bsf	___awdiv@quotient^(0+128),0
  6878  114A                     l5731:	
  6879  114A  3001               	movlw	1
  6880  114B  0020               	movlb	0	; select bank0
  6881  114C                     u5725:	
  6882  114C  36DF               	lsrf	___awdiv@divisor+1,f
  6883  114D  0CDE               	rrf	___awdiv@divisor,f
  6884  114E  0B89               	decfsz	9,f
  6885  114F  294C               	goto	u5725
  6886  1150  3001               	movlw	1
  6887  1151  0021               	movlb	1	; select bank1
  6888  1152  02A1               	subwf	___awdiv@counter^(0+128),f
  6889  1153  1D03               	btfss	3,2
  6890  1154  2935               	goto	l5725
  6891  1155                     l5735:	
  6892  1155  0021               	movlb	1	; select bank1
  6893  1156  0822               	movf	___awdiv@sign^(0+128),w
  6894  1157  1903               	btfsc	3,2
  6895  1158  295E               	goto	l5739
  6896  1159  09A3               	comf	___awdiv@quotient^(0+128),f
  6897  115A  09A4               	comf	(___awdiv@quotient+1)^(0+128),f
  6898  115B  0AA3               	incf	___awdiv@quotient^(0+128),f
  6899  115C  1903               	skipnz
  6900  115D  0AA4               	incf	(___awdiv@quotient+1)^(0+128),f
  6901  115E                     l5739:	
  6902  115E  0824               	movf	(___awdiv@quotient+1)^(0+128),w
  6903  115F  0020               	movlb	0	; select bank0
  6904  1160  01DF               	clrf	?___awdiv+1
  6905  1161  07DF               	addwf	?___awdiv+1,f
  6906  1162  0021               	movlb	1	; select bank1
  6907  1163  0823               	movf	___awdiv@quotient^(0+128),w
  6908  1164  0020               	movlb	0	; select bank0
  6909  1165  01DE               	clrf	?___awdiv
  6910  1166  07DE               	addwf	?___awdiv,f
  6911  1167  0008               	return
  6912  1168                     __end_of___awdiv:	
  6913                           
  6914                           	psect	text20
  6915  1003                     __ptext20:	
  6916 ;; *************** function _WorkTick *****************
  6917 ;; Defined at:
  6918 ;;		line 166 in file "klondike.c"
  6919 ;; Parameters:    Size  Location     Type
  6920 ;;		None
  6921 ;; Auto vars:     Size  Location     Type
  6922 ;;		None
  6923 ;; Return value:  Size  Location     Type
  6924 ;;		None               void
  6925 ;; Registers used:
  6926 ;;		wreg, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  6927 ;; Tracked objects:
  6928 ;;		On entry : 0/0
  6929 ;;		On exit  : 0/0
  6930 ;;		Unchanged: 0/0
  6931 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6932 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6933 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6934 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6935 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6936 ;;Total ram usage:        1 bytes
  6937 ;; Hardware stack levels used:    1
  6938 ;; Hardware stack levels required when called:    7
  6939 ;; This function calls:
  6940 ;;		_UpdateFanLevel
  6941 ;; This function is called by:
  6942 ;;		_main
  6943 ;; This function uses a non-reentrant model
  6944 ;;
  6945                           
  6946                           
  6947                           ;psect for function _WorkTick
  6948  1003                     _WorkTick:	
  6949                           
  6950                           ;klondike.c: 167: TMR0 += HashTime;
  6951                           
  6952                           ;incstack = 0
  6953                           ; Regs used in _WorkTick: [wreg+fsr1l+fsr1h+status,2+status,0+btemp+1+pclath+cstack]
  6954  1003  0020               	movlb	0	; select bank0
  6955  1004  086F               	movf	_HashTime,w
  6956  1005  0021               	movlb	1	; select bank1
  6957  1006  00DF               	movwf	??_WorkTick^(0+128)
  6958  1007  085F               	movf	??_WorkTick^(0+128),w
  6959  1008  0020               	movlb	0	; select bank0
  6960  1009  0795               	addwf	21,f	;volatile
  6961                           
  6962                           ;klondike.c: 168: TMR0IF = 0;
  6963  100A  110B               	bcf	11,2	;volatile
  6964                           
  6965                           ;klondike.c: 170: if((Status.State == 'W') && (++Status.HashCount == Status.MaxCount)) {
  6966  100B  0023               	movlb	3	; select bank3
  6967  100C  082C               	movf	_Status^(0+384),w	;volatile
  6968  100D  3A57               	xorlw	87
  6969  100E  1D03               	skipz
  6970  100F  282E               	goto	l6647
  6971  1010  3008               	movlw	8
  6972  1011  3EAC               	addlw	_Status& (0+255)
  6973  1012  0086               	movwf	6
  6974  1013  3001               	movlw	1	; select bank3/4
  6975  1014  0087               	movwf	7
  6976  1015  3001               	movlw	1
  6977  1016  0781               	addwf	1,f
  6978  1017  3141               	addfsr 1,1
  6979  1018  1803               	skipnc
  6980  1019  0A81               	incf	1,f
  6981  101A  317F               	addfsr 1,-1
  6982  101B  3F40               	moviw [0]fsr1
  6983  101C  0636               	xorwf	(_Status^(0+384)+10),w	;volatile
  6984  101D  1D03               	skipz
  6985  101E  2821               	goto	u7225
  6986  101F  3F41               	moviw [1]fsr1
  6987  1020  0637               	xorwf	((_Status+1)^(0+384)+10),w	;volatile
  6988  1021                     u7225:	
  6989  1021  1D03               	skipz
  6990  1022  282E               	goto	l6647
  6991                           
  6992                           ;klondike.c: 171: if(Status.WorkQC > 0) {
  6993  1023  082F               	movf	(_Status^(0+384)+3),w	;volatile
  6994  1024  1903               	btfsc	3,2
  6995  1025  2828               	goto	l6645
  6996                           
  6997                           ;klondike.c: 172: Status.State = 'P';
  6998  1026  3050               	movlw	80
  6999  1027  2829               	goto	L6
  7000  1028                     l6645:	
  7001                           ;klondike.c: 173: }
  7002                           
  7003                           
  7004                           ;klondike.c: 174: else {
  7005                           ;klondike.c: 175: Status.State = 'R';
  7006  1028  3052               	movlw	82
  7007  1029                     L6:	
  7008  1029  0021               	movlb	1	; select bank1
  7009  102A  00DF               	movwf	??_WorkTick^(0+128)
  7010  102B  085F               	movf	??_WorkTick^(0+128),w
  7011  102C  0023               	movlb	3	; select bank3
  7012  102D  00AC               	movwf	_Status^(0+384)	;volatile
  7013  102E                     l6647:	
  7014                           
  7015                           ;klondike.c: 176: }
  7016                           ;klondike.c: 177: }
  7017                           ;klondike.c: 179: if(++SlowTick == 0) {
  7018  102E  3001               	movlw	1
  7019  102F  0021               	movlb	1	; select bank1
  7020  1030  00DF               	movwf	??_WorkTick^(0+128)
  7021  1031  085F               	movf	??_WorkTick^(0+128),w
  7022  1032  0022               	movlb	2	; select bank2
  7023  1033  07E3               	addwf	_SlowTick^(0+256),f
  7024  1034  1D03               	btfss	3,2
  7025  1035  0008               	return
  7026                           
  7027                           ;klondike.c: 180: LATAbits.LATA5 = 0;;
  7028  1036  128C               	bcf	12,5	;volatile
  7029                           
  7030                           ;klondike.c: 181: Status.Temp = ADRESH;
  7031  1037  0021               	movlb	1	; select bank1
  7032  1038  081C               	movf	28,w	;volatile
  7033  1039  00DF               	movwf	??_WorkTick^(0+128)
  7034  103A  085F               	movf	??_WorkTick^(0+128),w
  7035  103B  0023               	movlb	3	; select bank3
  7036  103C  00B1               	movwf	(_Status^(0+384)+5)	;volatile
  7037                           
  7038                           ;klondike.c: 182: ADCON0bits.GO_nDONE = 1;
  7039  103D  0021               	movlb	1	; select bank1
  7040  103E  149D               	bsf	29,1	;volatile
  7041                           
  7042                           ;klondike.c: 183: UpdateFanLevel();
  7043  103F  3186  2651         	fcall	_UpdateFanLevel
  7044  1041  0008               	return
  7045  1042                     __end_of_WorkTick:	
  7046                           
  7047                           	psect	text21
  7048  0651                     __ptext21:	
  7049 ;; *************** function _UpdateFanLevel *****************
  7050 ;; Defined at:
  7051 ;;		line 229 in file "klondike.c"
  7052 ;; Parameters:    Size  Location     Type
  7053 ;;		None
  7054 ;; Auto vars:     Size  Location     Type
  7055 ;;		None
  7056 ;; Return value:  Size  Location     Type
  7057 ;;		None               void
  7058 ;; Registers used:
  7059 ;;		wreg, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  7060 ;; Tracked objects:
  7061 ;;		On entry : 0/0
  7062 ;;		On exit  : 0/0
  7063 ;;		Unchanged: 0/0
  7064 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7065 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7066 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  7067 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  7068 ;;      Totals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
  7069 ;;Total ram usage:        7 bytes
  7070 ;; Hardware stack levels used:    1
  7071 ;; Hardware stack levels required when called:    6
  7072 ;; This function calls:
  7073 ;;		___awtoft
  7074 ;;		___ftadd
  7075 ;;		___ftmul
  7076 ;;		___ftneg
  7077 ;;		___fttol
  7078 ;; This function is called by:
  7079 ;;		_WorkTick
  7080 ;; This function uses a non-reentrant model
  7081 ;;
  7082                           
  7083                           
  7084                           ;psect for function _UpdateFanLevel
  7085  0651                     _UpdateFanLevel:	
  7086                           
  7087                           ;klondike.c: 230: Error = Status.Temp - TempTarget;
  7088                           
  7089                           ;incstack = 0
  7090                           ; Regs used in _UpdateFanLevel: [wreg+fsr1l+fsr1h+status,2+status,0+btemp+1+pclath+cstac
      +                          k]
  7091  0651  0023               	movlb	3	; select bank3
  7092  0652  0864               	movf	_TempTarget^(0+384),w
  7093  0653  0021               	movlb	1	; select bank1
  7094  0654  00D8               	movwf	??_UpdateFanLevel^(0+128)
  7095  0655  01D9               	clrf	(??_UpdateFanLevel^(0+128)+1)
  7096  0656  09D8               	comf	??_UpdateFanLevel^(0+128),f
  7097  0657  09D9               	comf	(??_UpdateFanLevel^(0+128)+1),f
  7098  0658  0AD8               	incf	??_UpdateFanLevel^(0+128),f
  7099  0659  1903               	skipnz
  7100  065A  0AD9               	incf	(??_UpdateFanLevel^(0+128)+1),f
  7101  065B  0023               	movlb	3	; select bank3
  7102  065C  0831               	movf	(_Status^(0+384)+5),w	;volatile
  7103  065D  0021               	movlb	1	; select bank1
  7104  065E  0758               	addwf	??_UpdateFanLevel^(0+128),w
  7105  065F  00DA               	movwf	(??_UpdateFanLevel+2)^(0+128)
  7106  0660  0859               	movf	(??_UpdateFanLevel+1)^(0+128),w
  7107  0661  1803               	skipnc
  7108  0662  0A59               	incf	(??_UpdateFanLevel+1)^(0+128),w
  7109  0663  00DB               	movwf	((??_UpdateFanLevel+2)^(0+128)+1)
  7110  0664  085A               	movf	(??_UpdateFanLevel+2)^(0+128),w
  7111  0665  0023               	movlb	3	; select bank3
  7112  0666  00E1               	movwf	_Error^(0+384)
  7113  0667  0021               	movlb	1	; select bank1
  7114  0668  085B               	movf	(??_UpdateFanLevel+3)^(0+128),w
  7115  0669  0023               	movlb	3	; select bank3
  7116  066A  00E2               	movwf	(_Error+1)^(0+384)
  7117                           
  7118                           ;klondike.c: 231: Step = 1*Error - 0.5*LastError - 8*(LastTemp - Status.Temp);
  7119  066B  0862               	movf	(_Error+1)^(0+384),w
  7120  066C  0021               	movlb	1	; select bank1
  7121  066D  01A6               	clrf	(?___awtoft+1)^(0+128)
  7122  066E  07A6               	addwf	(?___awtoft+1)^(0+128),f
  7123  066F  0023               	movlb	3	; select bank3
  7124  0670  0861               	movf	_Error^(0+384),w
  7125  0671  0021               	movlb	1	; select bank1
  7126  0672  01A5               	clrf	?___awtoft^(0+128)
  7127  0673  07A5               	addwf	?___awtoft^(0+128),f
  7128  0674  319D  2512  3186   	fcall	___awtoft
  7129  0677  0021               	movlb	1	; select bank1
  7130  0678  0825               	movf	?___awtoft^(0+128),w
  7131  0679  00C0               	movwf	(?___ftadd^(0+128)+3)
  7132  067A  0826               	movf	(?___awtoft+1)^(0+128),w
  7133  067B  00C1               	movwf	((?___ftadd+1)^(0+128)+3)
  7134  067C  0827               	movf	(?___awtoft+2)^(0+128),w
  7135  067D  00C2               	movwf	((?___ftadd+2)^(0+128)+3)
  7136  067E  0023               	movlb	3	; select bank3
  7137  067F  0831               	movf	(_Status^(0+384)+5),w	;volatile
  7138  0680  0021               	movlb	1	; select bank1
  7139  0681  00D8               	movwf	??_UpdateFanLevel^(0+128)
  7140  0682  01D9               	clrf	(??_UpdateFanLevel^(0+128)+1)
  7141  0683  09D8               	comf	??_UpdateFanLevel^(0+128),f
  7142  0684  09D9               	comf	(??_UpdateFanLevel^(0+128)+1),f
  7143  0685  0AD8               	incf	??_UpdateFanLevel^(0+128),f
  7144  0686  1903               	skipnz
  7145  0687  0AD9               	incf	(??_UpdateFanLevel^(0+128)+1),f
  7146  0688  0022               	movlb	2	; select bank2
  7147  0689  0860               	movf	_LastTemp^(0+256),w
  7148  068A  0021               	movlb	1	; select bank1
  7149  068B  0758               	addwf	??_UpdateFanLevel^(0+128),w
  7150  068C  00DA               	movwf	(??_UpdateFanLevel+2)^(0+128)
  7151  068D  0859               	movf	(??_UpdateFanLevel+1)^(0+128),w
  7152  068E  1803               	skipnc
  7153  068F  0A59               	incf	(??_UpdateFanLevel+1)^(0+128),w
  7154  0690  00DB               	movwf	((??_UpdateFanLevel+2)^(0+128)+1)
  7155  0691  35DA               	lslf	(??_UpdateFanLevel+2)^(0+128),f
  7156  0692  0DDB               	rlf	((??_UpdateFanLevel+2)^(0+128)+1),f
  7157  0693  35DA               	lslf	(??_UpdateFanLevel+2)^(0+128),f
  7158  0694  0DDB               	rlf	((??_UpdateFanLevel+2)^(0+128)+1),f
  7159  0695  35DA               	lslf	(??_UpdateFanLevel+2)^(0+128),f
  7160  0696  0DDB               	rlf	((??_UpdateFanLevel+2)^(0+128)+1),f
  7161  0697  085A               	movf	(??_UpdateFanLevel+2)^(0+128),w
  7162  0698  00A5               	movwf	?___awtoft^(0+128)
  7163  0699  085B               	movf	(??_UpdateFanLevel+3)^(0+128),w
  7164  069A  00A6               	movwf	(?___awtoft+1)^(0+128)
  7165  069B  319D  2512  3186   	fcall	___awtoft
  7166  069E  0021               	movlb	1	; select bank1
  7167  069F  0825               	movf	?___awtoft^(0+128),w
  7168  06A0  00BA               	movwf	?___ftneg^(0+128)
  7169  06A1  0826               	movf	(?___awtoft+1)^(0+128),w
  7170  06A2  00BB               	movwf	(?___ftneg+1)^(0+128)
  7171  06A3  0827               	movf	(?___awtoft+2)^(0+128),w
  7172  06A4  00BC               	movwf	(?___ftneg+2)^(0+128)
  7173  06A5  319B  235F  3186   	fcall	___ftneg
  7174  06A8  0021               	movlb	1	; select bank1
  7175  06A9  083A               	movf	?___ftneg^(0+128),w
  7176  06AA  00BD               	movwf	?___ftadd^(0+128)
  7177  06AB  083B               	movf	(?___ftneg+1)^(0+128),w
  7178  06AC  00BE               	movwf	(?___ftadd+1)^(0+128)
  7179  06AD  083C               	movf	(?___ftneg+2)^(0+128),w
  7180  06AE  00BF               	movwf	(?___ftadd+2)^(0+128)
  7181  06AF  318D  25F0  3186   	fcall	___ftadd
  7182  06B2  0021               	movlb	1	; select bank1
  7183  06B3  083D               	movf	?___ftadd^(0+128),w
  7184  06B4  00DC               	movwf	_UpdateFanLevel$2876^(0+128)
  7185  06B5  083E               	movf	(?___ftadd+1)^(0+128),w
  7186  06B6  00DD               	movwf	(_UpdateFanLevel$2876+1)^(0+128)
  7187  06B7  083F               	movf	(?___ftadd+2)^(0+128),w
  7188  06B8  00DE               	movwf	(_UpdateFanLevel$2876+2)^(0+128)
  7189                           
  7190                           ;klondike.c: 231: Step = 1*Error - 0.5*LastError - 8*(LastTemp - Status.Temp);
  7191  06B9  085C               	movf	_UpdateFanLevel$2876^(0+128),w
  7192  06BA  00C0               	movwf	(?___ftadd^(0+128)+3)
  7193  06BB  085D               	movf	(_UpdateFanLevel$2876+1)^(0+128),w
  7194  06BC  00C1               	movwf	((?___ftadd+1)^(0+128)+3)
  7195  06BD  085E               	movf	(_UpdateFanLevel$2876+2)^(0+128),w
  7196  06BE  00C2               	movwf	((?___ftadd+2)^(0+128)+3)
  7197  06BF  0023               	movlb	3	; select bank3
  7198  06C0  0850               	movf	(_LastError+1)^(0+384),w
  7199  06C1  0021               	movlb	1	; select bank1
  7200  06C2  01A6               	clrf	(?___awtoft+1)^(0+128)
  7201  06C3  07A6               	addwf	(?___awtoft+1)^(0+128),f
  7202  06C4  0023               	movlb	3	; select bank3
  7203  06C5  084F               	movf	_LastError^(0+384),w
  7204  06C6  0021               	movlb	1	; select bank1
  7205  06C7  01A5               	clrf	?___awtoft^(0+128)
  7206  06C8  07A5               	addwf	?___awtoft^(0+128),f
  7207  06C9  319D  2512  3186   	fcall	___awtoft
  7208  06CC  0021               	movlb	1	; select bank1
  7209  06CD  0825               	movf	?___awtoft^(0+128),w
  7210  06CE  00AD               	movwf	(?___ftmul^(0+128)+3)
  7211  06CF  0826               	movf	(?___awtoft+1)^(0+128),w
  7212  06D0  00AE               	movwf	((?___ftmul+1)^(0+128)+3)
  7213  06D1  0827               	movf	(?___awtoft+2)^(0+128),w
  7214  06D2  00AF               	movwf	((?___ftmul+2)^(0+128)+3)
  7215  06D3  3000               	movlw	0
  7216  06D4  00AA               	movwf	?___ftmul^(0+128)
  7217  06D5  3000               	movlw	0
  7218  06D6  00AB               	movwf	(?___ftmul+1)^(0+128)
  7219  06D7  303F               	movlw	63
  7220  06D8  00AC               	movwf	(?___ftmul+2)^(0+128)
  7221  06D9  318B  2399  3186   	fcall	___ftmul
  7222  06DC  0021               	movlb	1	; select bank1
  7223  06DD  082A               	movf	?___ftmul^(0+128),w
  7224  06DE  00BA               	movwf	?___ftneg^(0+128)
  7225  06DF  082B               	movf	(?___ftmul+1)^(0+128),w
  7226  06E0  00BB               	movwf	(?___ftneg+1)^(0+128)
  7227  06E1  082C               	movf	(?___ftmul+2)^(0+128),w
  7228  06E2  00BC               	movwf	(?___ftneg+2)^(0+128)
  7229  06E3  319B  235F  3186   	fcall	___ftneg
  7230  06E6  0021               	movlb	1	; select bank1
  7231  06E7  083A               	movf	?___ftneg^(0+128),w
  7232  06E8  00BD               	movwf	?___ftadd^(0+128)
  7233  06E9  083B               	movf	(?___ftneg+1)^(0+128),w
  7234  06EA  00BE               	movwf	(?___ftadd+1)^(0+128)
  7235  06EB  083C               	movf	(?___ftneg+2)^(0+128),w
  7236  06EC  00BF               	movwf	(?___ftadd+2)^(0+128)
  7237  06ED  318D  25F0  3186   	fcall	___ftadd
  7238  06F0  0021               	movlb	1	; select bank1
  7239  06F1  083D               	movf	?___ftadd^(0+128),w
  7240  06F2  00CA               	movwf	?___fttol^(0+128)
  7241  06F3  083E               	movf	(?___ftadd+1)^(0+128),w
  7242  06F4  00CB               	movwf	(?___fttol+1)^(0+128)
  7243  06F5  083F               	movf	(?___ftadd+2)^(0+128),w
  7244  06F6  00CC               	movwf	(?___fttol+2)^(0+128)
  7245  06F7  3195  2532  3186   	fcall	___fttol
  7246  06FA  0021               	movlb	1	; select bank1
  7247  06FB  084B               	movf	(?___fttol^(0+128)+1),w
  7248  06FC  0020               	movlb	0	; select bank0
  7249  06FD  01E3               	clrf	_Step+1
  7250  06FE  07E3               	addwf	_Step+1,f
  7251  06FF  0021               	movlb	1	; select bank1
  7252  0700  084A               	movf	?___fttol^(0+128),w
  7253  0701  0020               	movlb	0	; select bank0
  7254  0702  01E2               	clrf	_Step
  7255  0703  07E2               	addwf	_Step,f
  7256                           
  7257                           ;klondike.c: 233: if(FanLevel + Step > 75 && FanLevel + Step <= 255) {
  7258  0704  0023               	movlb	3	; select bank3
  7259  0705  0863               	movf	_FanLevel^(0+384),w
  7260  0706  0020               	movlb	0	; select bank0
  7261  0707  0762               	addwf	_Step,w
  7262  0708  0021               	movlb	1	; select bank1
  7263  0709  00D8               	movwf	??_UpdateFanLevel^(0+128)
  7264  070A  0020               	movlb	0	; select bank0
  7265  070B  0863               	movf	_Step+1,w
  7266  070C  1803               	skipnc
  7267  070D  0A63               	incf	_Step+1,w
  7268  070E  0021               	movlb	1	; select bank1
  7269  070F  00D9               	movwf	(??_UpdateFanLevel^(0+128)+1)
  7270  0710  0859               	movf	(??_UpdateFanLevel+1)^(0+128),w
  7271  0711  3A80               	xorlw	128
  7272  0712  00FF               	movwf	127
  7273  0713  3080               	movlw	128
  7274  0714  027F               	subwf	127,w
  7275  0715  1D03               	skipz
  7276  0716  2F19               	goto	u7255
  7277  0717  304C               	movlw	76
  7278  0718  0258               	subwf	??_UpdateFanLevel^(0+128),w
  7279  0719                     u7255:	
  7280  0719  1C03               	skipc
  7281  071A  2F3A               	goto	l6669
  7282  071B  0023               	movlb	3	; select bank3
  7283  071C  0863               	movf	_FanLevel^(0+384),w
  7284  071D  0020               	movlb	0	; select bank0
  7285  071E  0762               	addwf	_Step,w
  7286  071F  0021               	movlb	1	; select bank1
  7287  0720  00D8               	movwf	??_UpdateFanLevel^(0+128)
  7288  0721  0020               	movlb	0	; select bank0
  7289  0722  0863               	movf	_Step+1,w
  7290  0723  1803               	skipnc
  7291  0724  0A63               	incf	_Step+1,w
  7292  0725  0021               	movlb	1	; select bank1
  7293  0726  00D9               	movwf	(??_UpdateFanLevel^(0+128)+1)
  7294  0727  0859               	movf	(??_UpdateFanLevel+1)^(0+128),w
  7295  0728  3A80               	xorlw	128
  7296  0729  00FF               	movwf	127
  7297  072A  3081               	movlw	129
  7298  072B  027F               	subwf	127,w
  7299  072C  1D03               	skipz
  7300  072D  2F30               	goto	u7265
  7301  072E  3000               	movlw	0
  7302  072F  0258               	subwf	??_UpdateFanLevel^(0+128),w
  7303  0730                     u7265:	
  7304  0730  1803               	skipnc
  7305  0731  2F3A               	goto	l6669
  7306                           
  7307                           ;klondike.c: 234: FanLevel += Step;
  7308  0732  0020               	movlb	0	; select bank0
  7309  0733  0862               	movf	_Step,w
  7310  0734  0021               	movlb	1	; select bank1
  7311  0735  00D8               	movwf	??_UpdateFanLevel^(0+128)
  7312  0736  0858               	movf	??_UpdateFanLevel^(0+128),w
  7313  0737  0023               	movlb	3	; select bank3
  7314  0738  07E3               	addwf	_FanLevel^(0+384),f
  7315                           
  7316                           ;klondike.c: 235: }
  7317  0739  2F70               	goto	l751
  7318  073A                     l6669:	
  7319                           
  7320                           ;klondike.c: 236: else if(FanLevel + Step > 255) {
  7321  073A  0023               	movlb	3	; select bank3
  7322  073B  0863               	movf	_FanLevel^(0+384),w
  7323  073C  0020               	movlb	0	; select bank0
  7324  073D  0762               	addwf	_Step,w
  7325  073E  0021               	movlb	1	; select bank1
  7326  073F  00D8               	movwf	??_UpdateFanLevel^(0+128)
  7327  0740  0020               	movlb	0	; select bank0
  7328  0741  0863               	movf	_Step+1,w
  7329  0742  1803               	skipnc
  7330  0743  0A63               	incf	_Step+1,w
  7331  0744  0021               	movlb	1	; select bank1
  7332  0745  00D9               	movwf	(??_UpdateFanLevel^(0+128)+1)
  7333  0746  0859               	movf	(??_UpdateFanLevel+1)^(0+128),w
  7334  0747  3A80               	xorlw	128
  7335  0748  00FF               	movwf	127
  7336  0749  3081               	movlw	129
  7337  074A  027F               	subwf	127,w
  7338  074B  1D03               	skipz
  7339  074C  2F4F               	goto	u7275
  7340  074D  3000               	movlw	0
  7341  074E  0258               	subwf	??_UpdateFanLevel^(0+128),w
  7342  074F                     u7275:	
  7343  074F  1C03               	skipc
  7344  0750  2F53               	goto	l6673
  7345                           
  7346                           ;klondike.c: 237: FanLevel = 255;
  7347  0751  30FF               	movlw	255
  7348  0752  2F6B               	goto	L7
  7349  0753                     l6673:	
  7350                           ;klondike.c: 238: }
  7351                           
  7352                           
  7353                           ;klondike.c: 239: else if(FanLevel + Step < 75) {
  7354  0753  0023               	movlb	3	; select bank3
  7355  0754  0863               	movf	_FanLevel^(0+384),w
  7356  0755  0020               	movlb	0	; select bank0
  7357  0756  0762               	addwf	_Step,w
  7358  0757  0021               	movlb	1	; select bank1
  7359  0758  00D8               	movwf	??_UpdateFanLevel^(0+128)
  7360  0759  0020               	movlb	0	; select bank0
  7361  075A  0863               	movf	_Step+1,w
  7362  075B  1803               	skipnc
  7363  075C  0A63               	incf	_Step+1,w
  7364  075D  0021               	movlb	1	; select bank1
  7365  075E  00D9               	movwf	(??_UpdateFanLevel^(0+128)+1)
  7366  075F  0859               	movf	(??_UpdateFanLevel+1)^(0+128),w
  7367  0760  3A80               	xorlw	128
  7368  0761  00FF               	movwf	127
  7369  0762  3080               	movlw	128
  7370  0763  027F               	subwf	127,w
  7371  0764  1D03               	skipz
  7372  0765  2F68               	goto	u7285
  7373  0766  304B               	movlw	75
  7374  0767  0258               	subwf	??_UpdateFanLevel^(0+128),w
  7375  0768                     u7285:	
  7376  0768  1803               	skipnc
  7377  0769  2F70               	goto	l751
  7378                           
  7379                           ;klondike.c: 240: FanLevel = 75;
  7380  076A  304B               	movlw	75
  7381  076B                     L7:	
  7382  076B  0021               	movlb	1	; select bank1
  7383  076C  00D8               	movwf	??_UpdateFanLevel^(0+128)
  7384  076D  0858               	movf	??_UpdateFanLevel^(0+128),w
  7385  076E  0023               	movlb	3	; select bank3
  7386  076F  00E3               	movwf	_FanLevel^(0+384)
  7387  0770                     l751:	
  7388                           
  7389                           ;klondike.c: 241: }
  7390                           ;klondike.c: 243: LastTemp = Status.Temp;
  7391  0770  0023               	movlb	3	; select bank3
  7392  0771  0831               	movf	(_Status^(0+384)+5),w	;volatile
  7393  0772  0021               	movlb	1	; select bank1
  7394  0773  00D8               	movwf	??_UpdateFanLevel^(0+128)
  7395  0774  0858               	movf	??_UpdateFanLevel^(0+128),w
  7396  0775  0022               	movlb	2	; select bank2
  7397  0776  00E0               	movwf	_LastTemp^(0+256)
  7398                           
  7399                           ;klondike.c: 244: LastError = Error;
  7400  0777  0023               	movlb	3	; select bank3
  7401  0778  0862               	movf	(_Error+1)^(0+384),w
  7402  0779  01D0               	clrf	(_LastError+1)^(0+384)
  7403  077A  07D0               	addwf	(_LastError+1)^(0+384),f
  7404  077B  0861               	movf	_Error^(0+384),w
  7405  077C  01CF               	clrf	_LastError^(0+384)
  7406  077D  07CF               	addwf	_LastError^(0+384),f
  7407                           
  7408                           ;klondike.c: 246: PWM1DCH = Status.FanSpeed = FanLevel;
  7409  077E  3006               	movlw	6
  7410  077F  3EAC               	addlw	_Status& (0+255)
  7411  0780  0086               	movwf	6
  7412  0781  3001               	movlw	1	; select bank3/4
  7413  0782  0087               	movwf	7
  7414  0783  0863               	movf	_FanLevel^(0+384),w
  7415  0784  3FC0               	movwi [0]fsr1
  7416  0785  002C               	movlb	12	; select bank12
  7417  0786  0092               	movwf	18	;volatile
  7418  0787  0008               	return
  7419  0788                     __end_of_UpdateFanLevel:	
  7420                           
  7421                           	psect	text22
  7422  1532                     __ptext22:	
  7423 ;; *************** function ___fttol *****************
  7424 ;; Defined at:
  7425 ;;		line 45 in file "C:\Program Files (x86)\Microchip\xc8\v1.20\sources\pic\fttol.c"
  7426 ;; Parameters:    Size  Location     Type
  7427 ;;  f1              3   42[BANK1 ] float 
  7428 ;; Auto vars:     Size  Location     Type
  7429 ;;  lval            4   51[BANK1 ] unsigned long 
  7430 ;;  exp1            1   55[BANK1 ] unsigned char 
  7431 ;;  sign1           1   50[BANK1 ] unsigned char 
  7432 ;; Return value:  Size  Location     Type
  7433 ;;                  4   42[BANK1 ] long 
  7434 ;; Registers used:
  7435 ;;		wreg, status,2, status,0
  7436 ;; Tracked objects:
  7437 ;;		On entry : 0/0
  7438 ;;		On exit  : 0/0
  7439 ;;		Unchanged: 0/0
  7440 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7441 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  7442 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
  7443 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  7444 ;;      Totals:         0       0      14       0       0       0       0       0       0       0       0       0       
      +0       0
  7445 ;;Total ram usage:       14 bytes
  7446 ;; Hardware stack levels used:    1
  7447 ;; Hardware stack levels required when called:    4
  7448 ;; This function calls:
  7449 ;;		Nothing
  7450 ;; This function is called by:
  7451 ;;		_UpdateFanLevel
  7452 ;; This function uses a non-reentrant model
  7453 ;;
  7454                           
  7455                           
  7456                           ;psect for function ___fttol
  7457  1532                     ___fttol:	
  7458                           
  7459                           ;incstack = 0
  7460                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  7461  1532  0021               	movlb	1	; select bank1
  7462  1533  084A               	movf	___fttol@f1^(0+128),w
  7463  1534  00CE               	movwf	??___fttol^(0+128)
  7464  1535  084B               	movf	(___fttol@f1+1)^(0+128),w
  7465  1536  00CF               	movwf	(??___fttol^(0+128)+1)
  7466  1537  084C               	movf	(___fttol@f1+2)^(0+128),w
  7467  1538  00D0               	movwf	(??___fttol^(0+128)+2)
  7468  1539  1003               	clrc
  7469  153A  0D4F               	rlf	(??___fttol^(0+128)+1),w
  7470  153B  0D50               	rlf	(??___fttol^(0+128)+2),w
  7471  153C  00D1               	movwf	(??___fttol+3)^(0+128)
  7472  153D  0851               	movf	(??___fttol+3)^(0+128),w
  7473  153E  00D7               	movwf	___fttol@exp1^(0+128)
  7474  153F  08D7               	movf	___fttol@exp1^(0+128),f
  7475  1540  1D03               	skipz
  7476  1541  2D4B               	goto	l6969
  7477  1542  3000               	movlw	0
  7478  1543  00CD               	movwf	(?___fttol+3)^(0+128)
  7479  1544  3000               	movlw	0
  7480  1545  00CC               	movwf	(?___fttol+2)^(0+128)
  7481  1546  3000               	movlw	0
  7482  1547  00CB               	movwf	(?___fttol+1)^(0+128)
  7483  1548  3000               	movlw	0
  7484  1549  00CA               	movwf	?___fttol^(0+128)
  7485  154A  0008               	return
  7486  154B                     l6969:	
  7487  154B  084A               	movf	___fttol@f1^(0+128),w
  7488  154C  00CE               	movwf	??___fttol^(0+128)
  7489  154D  084B               	movf	(___fttol@f1+1)^(0+128),w
  7490  154E  00CF               	movwf	(??___fttol^(0+128)+1)
  7491  154F  084C               	movf	(___fttol@f1+2)^(0+128),w
  7492  1550  00D0               	movwf	(??___fttol^(0+128)+2)
  7493  1551  3017               	movlw	23
  7494  1552                     u7915:	
  7495  1552  36D0               	lsrf	(??___fttol^(0+128)+2),f
  7496  1553  0CCF               	rrf	(??___fttol^(0+128)+1),f
  7497  1554  0CCE               	rrf	??___fttol^(0+128),f
  7498  1555  0B89               	decfsz	9,f
  7499  1556  2D52               	goto	u7915
  7500  1557  084E               	movf	??___fttol^(0+128),w
  7501  1558  00D1               	movwf	(??___fttol+3)^(0+128)
  7502  1559  0851               	movf	(??___fttol+3)^(0+128),w
  7503  155A  00D2               	movwf	___fttol@sign1^(0+128)
  7504  155B  17CB               	bsf	(___fttol@f1^(0+128)+1),7
  7505  155C  30FF               	movlw	255
  7506  155D  05CA               	andwf	___fttol@f1^(0+128),f
  7507  155E  30FF               	movlw	255
  7508  155F  05CB               	andwf	(___fttol@f1+1)^(0+128),f
  7509  1560  3000               	movlw	0
  7510  1561  05CC               	andwf	(___fttol@f1+2)^(0+128),f
  7511  1562  084A               	movf	___fttol@f1^(0+128),w
  7512  1563  00D3               	movwf	___fttol@lval^(0+128)
  7513  1564  084B               	movf	(___fttol@f1+1)^(0+128),w
  7514  1565  00D4               	movwf	(___fttol@lval^(0+128)+1)
  7515  1566  084C               	movf	(___fttol@f1+2)^(0+128),w
  7516  1567  00D5               	movwf	(___fttol@lval^(0+128)+2)
  7517  1568  01D6               	clrf	(___fttol@lval^(0+128)+3)
  7518  1569  308E               	movlw	142
  7519  156A  02D7               	subwf	___fttol@exp1^(0+128),f
  7520  156B  1FD7               	btfss	___fttol@exp1^(0+128),7
  7521  156C  2D89               	goto	l6989
  7522  156D  0857               	movf	___fttol@exp1^(0+128),w
  7523  156E  3A80               	xorlw	128
  7524  156F  3E8F               	addlw	143
  7525  1570  1803               	skipnc
  7526  1571  2D7B               	goto	l6987
  7527  1572  3000               	movlw	0
  7528  1573  00CD               	movwf	(?___fttol+3)^(0+128)
  7529  1574  3000               	movlw	0
  7530  1575  00CC               	movwf	(?___fttol+2)^(0+128)
  7531  1576  3000               	movlw	0
  7532  1577  00CB               	movwf	(?___fttol+1)^(0+128)
  7533  1578  3000               	movlw	0
  7534  1579  00CA               	movwf	?___fttol^(0+128)
  7535  157A  0008               	return
  7536  157B                     l6987:	
  7537  157B  3001               	movlw	1
  7538  157C                     u7945:	
  7539  157C  36D6               	lsrf	(___fttol@lval+3)^(0+128),f
  7540  157D  0CD5               	rrf	(___fttol@lval+2)^(0+128),f
  7541  157E  0CD4               	rrf	(___fttol@lval+1)^(0+128),f
  7542  157F  0CD3               	rrf	___fttol@lval^(0+128),f
  7543  1580  0B89               	decfsz	9,f
  7544  1581  2D7C               	goto	u7945
  7545  1582  3001               	movlw	1
  7546  1583  00CE               	movwf	??___fttol^(0+128)
  7547  1584  084E               	movf	??___fttol^(0+128),w
  7548  1585  07D7               	addwf	___fttol@exp1^(0+128),f
  7549  1586  1903               	btfsc	3,2
  7550  1587  2DA2               	goto	l6999
  7551  1588  2D7B               	goto	l6987
  7552  1589                     l6989:	
  7553  1589  3018               	movlw	24
  7554  158A  0257               	subwf	___fttol@exp1^(0+128),w
  7555  158B  1C03               	skipc
  7556  158C  2D9F               	goto	l6997
  7557  158D  3000               	movlw	0
  7558  158E  00CD               	movwf	(?___fttol+3)^(0+128)
  7559  158F  3000               	movlw	0
  7560  1590  00CC               	movwf	(?___fttol+2)^(0+128)
  7561  1591  3000               	movlw	0
  7562  1592  00CB               	movwf	(?___fttol+1)^(0+128)
  7563  1593  3000               	movlw	0
  7564  1594  00CA               	movwf	?___fttol^(0+128)
  7565  1595  0008               	return
  7566  1596                     l6995:	
  7567  1596  3001               	movlw	1
  7568  1597                     u7975:	
  7569  1597  35D3               	lslf	___fttol@lval^(0+128),f
  7570  1598  0DD4               	rlf	(___fttol@lval+1)^(0+128),f
  7571  1599  0DD5               	rlf	(___fttol@lval+2)^(0+128),f
  7572  159A  0DD6               	rlf	(___fttol@lval+3)^(0+128),f
  7573  159B  0B89               	decfsz	9,f
  7574  159C  2D97               	goto	u7975
  7575  159D  3001               	movlw	1
  7576  159E  02D7               	subwf	___fttol@exp1^(0+128),f
  7577  159F                     l6997:	
  7578  159F  08D7               	movf	___fttol@exp1^(0+128),f
  7579  15A0  1D03               	skipz
  7580  15A1  2D96               	goto	l6995
  7581  15A2                     l6999:	
  7582  15A2  0852               	movf	___fttol@sign1^(0+128),w
  7583  15A3  1903               	btfsc	3,2
  7584  15A4  2DB0               	goto	l7003
  7585  15A5  09D3               	comf	___fttol@lval^(0+128),f
  7586  15A6  09D4               	comf	(___fttol@lval+1)^(0+128),f
  7587  15A7  09D5               	comf	(___fttol@lval+2)^(0+128),f
  7588  15A8  09D6               	comf	(___fttol@lval+3)^(0+128),f
  7589  15A9  0AD3               	incf	___fttol@lval^(0+128),f
  7590  15AA  1903               	skipnz
  7591  15AB  0AD4               	incf	(___fttol@lval+1)^(0+128),f
  7592  15AC  1903               	skipnz
  7593  15AD  0AD5               	incf	(___fttol@lval+2)^(0+128),f
  7594  15AE  1903               	skipnz
  7595  15AF  0AD6               	incf	(___fttol@lval+3)^(0+128),f
  7596  15B0                     l7003:	
  7597  15B0  0856               	movf	(___fttol@lval+3)^(0+128),w
  7598  15B1  00CD               	movwf	(?___fttol+3)^(0+128)
  7599  15B2  0855               	movf	(___fttol@lval+2)^(0+128),w
  7600  15B3  00CC               	movwf	(?___fttol+2)^(0+128)
  7601  15B4  0854               	movf	(___fttol@lval+1)^(0+128),w
  7602  15B5  00CB               	movwf	(?___fttol+1)^(0+128)
  7603  15B6  0853               	movf	___fttol@lval^(0+128),w
  7604  15B7  00CA               	movwf	?___fttol^(0+128)
  7605  15B8  0008               	return
  7606  15B9                     __end_of___fttol:	
  7607                           
  7608                           	psect	text23
  7609  1B5F                     __ptext23:	
  7610 ;; *************** function ___ftneg *****************
  7611 ;; Defined at:
  7612 ;;		line 16 in file "C:\Program Files (x86)\Microchip\xc8\v1.20\sources\pic\ftneg.c"
  7613 ;; Parameters:    Size  Location     Type
  7614 ;;  f1              3   26[BANK1 ] float 
  7615 ;; Auto vars:     Size  Location     Type
  7616 ;;		None
  7617 ;; Return value:  Size  Location     Type
  7618 ;;                  3   26[BANK1 ] float 
  7619 ;; Registers used:
  7620 ;;		wreg
  7621 ;; Tracked objects:
  7622 ;;		On entry : 0/0
  7623 ;;		On exit  : 0/0
  7624 ;;		Unchanged: 0/0
  7625 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7626 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  7627 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7628 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7629 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  7630 ;;Total ram usage:        3 bytes
  7631 ;; Hardware stack levels used:    1
  7632 ;; Hardware stack levels required when called:    4
  7633 ;; This function calls:
  7634 ;;		Nothing
  7635 ;; This function is called by:
  7636 ;;		_UpdateFanLevel
  7637 ;; This function uses a non-reentrant model
  7638 ;;
  7639                           
  7640                           
  7641                           ;psect for function ___ftneg
  7642  1B5F                     ___ftneg:	
  7643                           
  7644                           ;incstack = 0
  7645                           ; Regs used in ___ftneg: [wreg]
  7646  1B5F  0021               	movlb	1	; select bank1
  7647  1B60  083C               	movf	(___ftneg@f1+2)^(0+128),w
  7648  1B61  043B               	iorwf	(___ftneg@f1+1)^(0+128),w
  7649  1B62  043A               	iorwf	___ftneg@f1^(0+128),w
  7650  1B63  1903               	skipnz
  7651  1B64  0008               	return
  7652  1B65  3080               	movlw	128
  7653  1B66  06BC               	xorwf	(___ftneg@f1+2)^(0+128),f
  7654  1B67  0008               	return
  7655  1B68                     __end_of___ftneg:	
  7656                           
  7657                           	psect	text24
  7658  0B99                     __ptext24:	
  7659 ;; *************** function ___ftmul *****************
  7660 ;; Defined at:
  7661 ;;		line 52 in file "C:\Program Files (x86)\Microchip\xc8\v1.20\sources\pic\ftmul.c"
  7662 ;; Parameters:    Size  Location     Type
  7663 ;;  f1              3   10[BANK1 ] float 
  7664 ;;  f2              3   13[BANK1 ] float 
  7665 ;; Auto vars:     Size  Location     Type
  7666 ;;  f3_as_produc    3   21[BANK1 ] unsigned um
  7667 ;;  sign            1   25[BANK1 ] unsigned char 
  7668 ;;  cntr            1   24[BANK1 ] unsigned char 
  7669 ;;  exp             1   20[BANK1 ] unsigned char 
  7670 ;; Return value:  Size  Location     Type
  7671 ;;                  3   10[BANK1 ] float 
  7672 ;; Registers used:
  7673 ;;		wreg, status,2, status,0, pclath, cstack
  7674 ;; Tracked objects:
  7675 ;;		On entry : 0/0
  7676 ;;		On exit  : 0/0
  7677 ;;		Unchanged: 0/0
  7678 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7679 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
  7680 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
  7681 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  7682 ;;      Totals:         0       0      16       0       0       0       0       0       0       0       0       0       
      +0       0
  7683 ;;Total ram usage:       16 bytes
  7684 ;; Hardware stack levels used:    1
  7685 ;; Hardware stack levels required when called:    5
  7686 ;; This function calls:
  7687 ;;		___ftpack
  7688 ;; This function is called by:
  7689 ;;		_UpdateFanLevel
  7690 ;; This function uses a non-reentrant model
  7691 ;;
  7692                           
  7693                           
  7694                           ;psect for function ___ftmul
  7695  0B99                     ___ftmul:	
  7696                           
  7697                           ;incstack = 0
  7698                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  7699  0B99  0021               	movlb	1	; select bank1
  7700  0B9A  082A               	movf	___ftmul@f1^(0+128),w
  7701  0B9B  00B0               	movwf	??___ftmul^(0+128)
  7702  0B9C  082B               	movf	(___ftmul@f1+1)^(0+128),w
  7703  0B9D  00B1               	movwf	(??___ftmul^(0+128)+1)
  7704  0B9E  082C               	movf	(___ftmul@f1+2)^(0+128),w
  7705  0B9F  00B2               	movwf	(??___ftmul^(0+128)+2)
  7706  0BA0  1003               	clrc
  7707  0BA1  0D31               	rlf	(??___ftmul^(0+128)+1),w
  7708  0BA2  0D32               	rlf	(??___ftmul^(0+128)+2),w
  7709  0BA3  00B3               	movwf	(??___ftmul+3)^(0+128)
  7710  0BA4  0833               	movf	(??___ftmul+3)^(0+128),w
  7711  0BA5  00B4               	movwf	___ftmul@exp^(0+128)
  7712  0BA6  08B4               	movf	___ftmul@exp^(0+128),f
  7713  0BA7  1D03               	skipz
  7714  0BA8  2BB0               	goto	l6911
  7715  0BA9  3000               	movlw	0
  7716  0BAA  00AA               	movwf	?___ftmul^(0+128)
  7717  0BAB  3000               	movlw	0
  7718  0BAC  00AB               	movwf	(?___ftmul+1)^(0+128)
  7719  0BAD  3000               	movlw	0
  7720  0BAE  00AC               	movwf	(?___ftmul+2)^(0+128)
  7721  0BAF  0008               	return
  7722  0BB0                     l6911:	
  7723  0BB0  082D               	movf	___ftmul@f2^(0+128),w
  7724  0BB1  00B0               	movwf	??___ftmul^(0+128)
  7725  0BB2  082E               	movf	(___ftmul@f2+1)^(0+128),w
  7726  0BB3  00B1               	movwf	(??___ftmul^(0+128)+1)
  7727  0BB4  082F               	movf	(___ftmul@f2+2)^(0+128),w
  7728  0BB5  00B2               	movwf	(??___ftmul^(0+128)+2)
  7729  0BB6  1003               	clrc
  7730  0BB7  0D31               	rlf	(??___ftmul^(0+128)+1),w
  7731  0BB8  0D32               	rlf	(??___ftmul^(0+128)+2),w
  7732  0BB9  00B3               	movwf	(??___ftmul+3)^(0+128)
  7733  0BBA  0833               	movf	(??___ftmul+3)^(0+128),w
  7734  0BBB  00B9               	movwf	___ftmul@sign^(0+128)
  7735  0BBC  08B9               	movf	___ftmul@sign^(0+128),f
  7736  0BBD  1D03               	skipz
  7737  0BBE  2BC6               	goto	l6917
  7738  0BBF  3000               	movlw	0
  7739  0BC0  00AA               	movwf	?___ftmul^(0+128)
  7740  0BC1  3000               	movlw	0
  7741  0BC2  00AB               	movwf	(?___ftmul+1)^(0+128)
  7742  0BC3  3000               	movlw	0
  7743  0BC4  00AC               	movwf	(?___ftmul+2)^(0+128)
  7744  0BC5  0008               	return
  7745  0BC6                     l6917:	
  7746  0BC6  0839               	movf	___ftmul@sign^(0+128),w
  7747  0BC7  3E7B               	addlw	123
  7748  0BC8  00B0               	movwf	??___ftmul^(0+128)
  7749  0BC9  0830               	movf	??___ftmul^(0+128),w
  7750  0BCA  07B4               	addwf	___ftmul@exp^(0+128),f
  7751  0BCB  082A               	movf	___ftmul@f1^(0+128),w
  7752  0BCC  00B0               	movwf	??___ftmul^(0+128)
  7753  0BCD  082B               	movf	(___ftmul@f1+1)^(0+128),w
  7754  0BCE  00B1               	movwf	(??___ftmul^(0+128)+1)
  7755  0BCF  082C               	movf	(___ftmul@f1+2)^(0+128),w
  7756  0BD0  00B2               	movwf	(??___ftmul^(0+128)+2)
  7757  0BD1  3010               	movlw	16
  7758  0BD2                     u7795:	
  7759  0BD2  36B2               	lsrf	(??___ftmul^(0+128)+2),f
  7760  0BD3  0CB1               	rrf	(??___ftmul^(0+128)+1),f
  7761  0BD4  0CB0               	rrf	??___ftmul^(0+128),f
  7762  0BD5  0B89               	decfsz	9,f
  7763  0BD6  2BD2               	goto	u7795
  7764  0BD7  0830               	movf	??___ftmul^(0+128),w
  7765  0BD8  00B3               	movwf	(??___ftmul+3)^(0+128)
  7766  0BD9  0833               	movf	(??___ftmul+3)^(0+128),w
  7767  0BDA  00B9               	movwf	___ftmul@sign^(0+128)
  7768  0BDB  082D               	movf	___ftmul@f2^(0+128),w
  7769  0BDC  00B0               	movwf	??___ftmul^(0+128)
  7770  0BDD  082E               	movf	(___ftmul@f2+1)^(0+128),w
  7771  0BDE  00B1               	movwf	(??___ftmul^(0+128)+1)
  7772  0BDF  082F               	movf	(___ftmul@f2+2)^(0+128),w
  7773  0BE0  00B2               	movwf	(??___ftmul^(0+128)+2)
  7774  0BE1  3010               	movlw	16
  7775  0BE2                     u7805:	
  7776  0BE2  36B2               	lsrf	(??___ftmul^(0+128)+2),f
  7777  0BE3  0CB1               	rrf	(??___ftmul^(0+128)+1),f
  7778  0BE4  0CB0               	rrf	??___ftmul^(0+128),f
  7779  0BE5  0B89               	decfsz	9,f
  7780  0BE6  2BE2               	goto	u7805
  7781  0BE7  0830               	movf	??___ftmul^(0+128),w
  7782  0BE8  00B3               	movwf	(??___ftmul+3)^(0+128)
  7783  0BE9  0833               	movf	(??___ftmul+3)^(0+128),w
  7784  0BEA  06B9               	xorwf	___ftmul@sign^(0+128),f
  7785  0BEB  3080               	movlw	128
  7786  0BEC  00B0               	movwf	??___ftmul^(0+128)
  7787  0BED  0830               	movf	??___ftmul^(0+128),w
  7788  0BEE  05B9               	andwf	___ftmul@sign^(0+128),f
  7789  0BEF  17AB               	bsf	(___ftmul@f1^(0+128)+1),7
  7790  0BF0  17AE               	bsf	(___ftmul@f2^(0+128)+1),7
  7791  0BF1  30FF               	movlw	255
  7792  0BF2  05AD               	andwf	___ftmul@f2^(0+128),f
  7793  0BF3  30FF               	movlw	255
  7794  0BF4  05AE               	andwf	(___ftmul@f2+1)^(0+128),f
  7795  0BF5  3000               	movlw	0
  7796  0BF6  05AF               	andwf	(___ftmul@f2+2)^(0+128),f
  7797  0BF7  3000               	movlw	0
  7798  0BF8  00B5               	movwf	___ftmul@f3_as_product^(0+128)
  7799  0BF9  3000               	movlw	0
  7800  0BFA  00B6               	movwf	(___ftmul@f3_as_product+1)^(0+128)
  7801  0BFB  3000               	movlw	0
  7802  0BFC  00B7               	movwf	(___ftmul@f3_as_product+2)^(0+128)
  7803  0BFD  3007               	movlw	7
  7804  0BFE  00B0               	movwf	??___ftmul^(0+128)
  7805  0BFF  0830               	movf	??___ftmul^(0+128),w
  7806  0C00  00B8               	movwf	___ftmul@cntr^(0+128)
  7807  0C01                     l6929:	
  7808  0C01  1C2A               	btfss	___ftmul@f1^(0+128),0
  7809  0C02  2C09               	goto	l6933
  7810  0C03  082D               	movf	___ftmul@f2^(0+128),w
  7811  0C04  07B5               	addwf	___ftmul@f3_as_product^(0+128),f
  7812  0C05  082E               	movf	(___ftmul@f2+1)^(0+128),w
  7813  0C06  3DB6               	addwfc	(___ftmul@f3_as_product+1)^(0+128),f
  7814  0C07  082F               	movf	(___ftmul@f2+2)^(0+128),w
  7815  0C08  3DB7               	addwfc	(___ftmul@f3_as_product+2)^(0+128),f
  7816  0C09                     l6933:	
  7817  0C09  3001               	movlw	1
  7818  0C0A                     u7825:	
  7819  0C0A  36AC               	lsrf	(___ftmul@f1+2)^(0+128),f
  7820  0C0B  0CAB               	rrf	(___ftmul@f1+1)^(0+128),f
  7821  0C0C  0CAA               	rrf	___ftmul@f1^(0+128),f
  7822  0C0D  0B89               	decfsz	9,f
  7823  0C0E  2C0A               	goto	u7825
  7824  0C0F  3001               	movlw	1
  7825  0C10                     u7835:	
  7826  0C10  35AD               	lslf	___ftmul@f2^(0+128),f
  7827  0C11  0DAE               	rlf	(___ftmul@f2+1)^(0+128),f
  7828  0C12  0DAF               	rlf	(___ftmul@f2+2)^(0+128),f
  7829  0C13  0B89               	decfsz	9,f
  7830  0C14  2C10               	goto	u7835
  7831  0C15  3001               	movlw	1
  7832  0C16  02B8               	subwf	___ftmul@cntr^(0+128),f
  7833  0C17  1D03               	btfss	3,2
  7834  0C18  2C01               	goto	l6929
  7835  0C19  3009               	movlw	9
  7836  0C1A  00B0               	movwf	??___ftmul^(0+128)
  7837  0C1B  0830               	movf	??___ftmul^(0+128),w
  7838  0C1C  00B8               	movwf	___ftmul@cntr^(0+128)
  7839  0C1D                     l6941:	
  7840  0C1D  1C2A               	btfss	___ftmul@f1^(0+128),0
  7841  0C1E  2C25               	goto	l6945
  7842  0C1F  082D               	movf	___ftmul@f2^(0+128),w
  7843  0C20  07B5               	addwf	___ftmul@f3_as_product^(0+128),f
  7844  0C21  082E               	movf	(___ftmul@f2+1)^(0+128),w
  7845  0C22  3DB6               	addwfc	(___ftmul@f3_as_product+1)^(0+128),f
  7846  0C23  082F               	movf	(___ftmul@f2+2)^(0+128),w
  7847  0C24  3DB7               	addwfc	(___ftmul@f3_as_product+2)^(0+128),f
  7848  0C25                     l6945:	
  7849  0C25  3001               	movlw	1
  7850  0C26                     u7865:	
  7851  0C26  36AC               	lsrf	(___ftmul@f1+2)^(0+128),f
  7852  0C27  0CAB               	rrf	(___ftmul@f1+1)^(0+128),f
  7853  0C28  0CAA               	rrf	___ftmul@f1^(0+128),f
  7854  0C29  0B89               	decfsz	9,f
  7855  0C2A  2C26               	goto	u7865
  7856  0C2B  3001               	movlw	1
  7857  0C2C                     u7875:	
  7858  0C2C  36B7               	lsrf	(___ftmul@f3_as_product+2)^(0+128),f
  7859  0C2D  0CB6               	rrf	(___ftmul@f3_as_product+1)^(0+128),f
  7860  0C2E  0CB5               	rrf	___ftmul@f3_as_product^(0+128),f
  7861  0C2F  0B89               	decfsz	9,f
  7862  0C30  2C2C               	goto	u7875
  7863  0C31  3001               	movlw	1
  7864  0C32  02B8               	subwf	___ftmul@cntr^(0+128),f
  7865  0C33  1D03               	btfss	3,2
  7866  0C34  2C1D               	goto	l6941
  7867  0C35  0835               	movf	___ftmul@f3_as_product^(0+128),w
  7868  0C36  00A0               	movwf	?___ftpack^(0+128)
  7869  0C37  0836               	movf	(___ftmul@f3_as_product+1)^(0+128),w
  7870  0C38  00A1               	movwf	(?___ftpack+1)^(0+128)
  7871  0C39  0837               	movf	(___ftmul@f3_as_product+2)^(0+128),w
  7872  0C3A  00A2               	movwf	(?___ftpack+2)^(0+128)
  7873  0C3B  0834               	movf	___ftmul@exp^(0+128),w
  7874  0C3C  00B0               	movwf	??___ftmul^(0+128)
  7875  0C3D  0830               	movf	??___ftmul^(0+128),w
  7876  0C3E  00A3               	movwf	(?___ftpack^(0+128)+3)
  7877  0C3F  0839               	movf	___ftmul@sign^(0+128),w
  7878  0C40  00B1               	movwf	(??___ftmul+1)^(0+128)
  7879  0C41  0831               	movf	(??___ftmul+1)^(0+128),w
  7880  0C42  00A4               	movwf	(?___ftpack^(0+128)+4)
  7881  0C43  3191  2168         	fcall	___ftpack
  7882  0C45  0021               	movlb	1	; select bank1
  7883  0C46  0820               	movf	?___ftpack^(0+128),w
  7884  0C47  00AA               	movwf	?___ftmul^(0+128)
  7885  0C48  0821               	movf	(?___ftpack+1)^(0+128),w
  7886  0C49  00AB               	movwf	(?___ftmul+1)^(0+128)
  7887  0C4A  0822               	movf	(?___ftpack+2)^(0+128),w
  7888  0C4B  00AC               	movwf	(?___ftmul+2)^(0+128)
  7889  0C4C  0008               	return
  7890  0C4D                     __end_of___ftmul:	
  7891                           
  7892                           	psect	text25
  7893  0DF0                     __ptext25:	
  7894 ;; *************** function ___ftadd *****************
  7895 ;; Defined at:
  7896 ;;		line 87 in file "C:\Program Files (x86)\Microchip\xc8\v1.20\sources\pic\ftadd.c"
  7897 ;; Parameters:    Size  Location     Type
  7898 ;;  f1              3   29[BANK1 ] float 
  7899 ;;  f2              3   32[BANK1 ] float 
  7900 ;; Auto vars:     Size  Location     Type
  7901 ;;  exp1            1   41[BANK1 ] unsigned char 
  7902 ;;  exp2            1   40[BANK1 ] unsigned char 
  7903 ;;  sign            1   39[BANK1 ] unsigned char 
  7904 ;; Return value:  Size  Location     Type
  7905 ;;                  3   29[BANK1 ] float 
  7906 ;; Registers used:
  7907 ;;		wreg, status,2, status,0, pclath, cstack
  7908 ;; Tracked objects:
  7909 ;;		On entry : 0/0
  7910 ;;		On exit  : 0/0
  7911 ;;		Unchanged: 0/0
  7912 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7913 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
  7914 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  7915 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  7916 ;;      Totals:         0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0
  7917 ;;Total ram usage:       13 bytes
  7918 ;; Hardware stack levels used:    1
  7919 ;; Hardware stack levels required when called:    5
  7920 ;; This function calls:
  7921 ;;		___ftpack
  7922 ;; This function is called by:
  7923 ;;		_UpdateFanLevel
  7924 ;; This function uses a non-reentrant model
  7925 ;;
  7926                           
  7927                           
  7928                           ;psect for function ___ftadd
  7929  0DF0                     ___ftadd:	
  7930                           
  7931                           ;incstack = 0
  7932                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  7933  0DF0  0021               	movlb	1	; select bank1
  7934  0DF1  083D               	movf	___ftadd@f1^(0+128),w
  7935  0DF2  00C3               	movwf	??___ftadd^(0+128)
  7936  0DF3  083E               	movf	(___ftadd@f1+1)^(0+128),w
  7937  0DF4  00C4               	movwf	(??___ftadd^(0+128)+1)
  7938  0DF5  083F               	movf	(___ftadd@f1+2)^(0+128),w
  7939  0DF6  00C5               	movwf	(??___ftadd^(0+128)+2)
  7940  0DF7  1003               	clrc
  7941  0DF8  0D44               	rlf	(??___ftadd^(0+128)+1),w
  7942  0DF9  0D45               	rlf	(??___ftadd^(0+128)+2),w
  7943  0DFA  00C6               	movwf	(??___ftadd+3)^(0+128)
  7944  0DFB  0846               	movf	(??___ftadd+3)^(0+128),w
  7945  0DFC  00C9               	movwf	___ftadd@exp1^(0+128)
  7946  0DFD  0840               	movf	___ftadd@f2^(0+128),w
  7947  0DFE  00C3               	movwf	??___ftadd^(0+128)
  7948  0DFF  0841               	movf	(___ftadd@f2+1)^(0+128),w
  7949  0E00  00C4               	movwf	(??___ftadd^(0+128)+1)
  7950  0E01  0842               	movf	(___ftadd@f2+2)^(0+128),w
  7951  0E02  00C5               	movwf	(??___ftadd^(0+128)+2)
  7952  0E03  1003               	clrc
  7953  0E04  0D44               	rlf	(??___ftadd^(0+128)+1),w
  7954  0E05  0D45               	rlf	(??___ftadd^(0+128)+2),w
  7955  0E06  00C6               	movwf	(??___ftadd+3)^(0+128)
  7956  0E07  0846               	movf	(??___ftadd+3)^(0+128),w
  7957  0E08  00C8               	movwf	___ftadd@exp2^(0+128)
  7958  0E09  0849               	movf	___ftadd@exp1^(0+128),w
  7959  0E0A  1903               	btfsc	3,2
  7960  0E0B  2E18               	goto	l6841
  7961  0E0C  0848               	movf	___ftadd@exp2^(0+128),w
  7962  0E0D  0249               	subwf	___ftadd@exp1^(0+128),w
  7963  0E0E  1803               	skipnc
  7964  0E0F  2E1F               	goto	l6845
  7965  0E10  0349               	decf	___ftadd@exp1^(0+128),w
  7966  0E11  3AFF               	xorlw	255
  7967  0E12  0748               	addwf	___ftadd@exp2^(0+128),w
  7968  0E13  00C3               	movwf	??___ftadd^(0+128)
  7969  0E14  3019               	movlw	25
  7970  0E15  0243               	subwf	??___ftadd^(0+128),w
  7971  0E16  1C03               	skipc
  7972  0E17  2E1F               	goto	l6845
  7973  0E18                     l6841:	
  7974  0E18  0840               	movf	___ftadd@f2^(0+128),w
  7975  0E19  00BD               	movwf	?___ftadd^(0+128)
  7976  0E1A  0841               	movf	(___ftadd@f2+1)^(0+128),w
  7977  0E1B  00BE               	movwf	(?___ftadd+1)^(0+128)
  7978  0E1C  0842               	movf	(___ftadd@f2+2)^(0+128),w
  7979  0E1D  00BF               	movwf	(?___ftadd+2)^(0+128)
  7980  0E1E  0008               	return
  7981  0E1F                     l6845:	
  7982  0E1F  0848               	movf	___ftadd@exp2^(0+128),w
  7983  0E20  1903               	btfsc	3,2
  7984  0E21  0008               	return
  7985  0E22  0849               	movf	___ftadd@exp1^(0+128),w
  7986  0E23  0248               	subwf	___ftadd@exp2^(0+128),w
  7987  0E24  1803               	skipnc
  7988  0E25  2E2E               	goto	l6851
  7989  0E26  0348               	decf	___ftadd@exp2^(0+128),w
  7990  0E27  3AFF               	xorlw	255
  7991  0E28  0749               	addwf	___ftadd@exp1^(0+128),w
  7992  0E29  00C3               	movwf	??___ftadd^(0+128)
  7993  0E2A  3019               	movlw	25
  7994  0E2B  0243               	subwf	??___ftadd^(0+128),w
  7995  0E2C  1803               	btfsc	3,0
  7996  0E2D  0008               	return
  7997  0E2E                     l6851:	
  7998  0E2E  3006               	movlw	6
  7999  0E2F  00C3               	movwf	??___ftadd^(0+128)
  8000  0E30  0843               	movf	??___ftadd^(0+128),w
  8001  0E31  00C7               	movwf	___ftadd@sign^(0+128)
  8002  0E32  1BBF               	btfsc	(___ftadd@f1+2)^(0+128),7
  8003  0E33  17C7               	bsf	___ftadd@sign^(0+128),7
  8004  0E34  1BC2               	btfsc	(___ftadd@f2+2)^(0+128),7
  8005  0E35  1747               	bsf	___ftadd@sign^(0+128),6
  8006  0E36  17BE               	bsf	(___ftadd@f1^(0+128)+1),7
  8007  0E37  30FF               	movlw	255
  8008  0E38  05BD               	andwf	___ftadd@f1^(0+128),f
  8009  0E39  30FF               	movlw	255
  8010  0E3A  05BE               	andwf	(___ftadd@f1+1)^(0+128),f
  8011  0E3B  3000               	movlw	0
  8012  0E3C  05BF               	andwf	(___ftadd@f1+2)^(0+128),f
  8013  0E3D  17C1               	bsf	(___ftadd@f2^(0+128)+1),7
  8014  0E3E  30FF               	movlw	255
  8015  0E3F  05C0               	andwf	___ftadd@f2^(0+128),f
  8016  0E40  30FF               	movlw	255
  8017  0E41  05C1               	andwf	(___ftadd@f2+1)^(0+128),f
  8018  0E42  3000               	movlw	0
  8019  0E43  05C2               	andwf	(___ftadd@f2+2)^(0+128),f
  8020  0E44  0848               	movf	___ftadd@exp2^(0+128),w
  8021  0E45  0249               	subwf	___ftadd@exp1^(0+128),w
  8022  0E46  1803               	skipnc
  8023  0E47  2E6A               	goto	l6873
  8024  0E48                     l6863:	
  8025  0E48  3001               	movlw	1
  8026  0E49                     u7635:	
  8027  0E49  35C0               	lslf	___ftadd@f2^(0+128),f
  8028  0E4A  0DC1               	rlf	(___ftadd@f2+1)^(0+128),f
  8029  0E4B  0DC2               	rlf	(___ftadd@f2+2)^(0+128),f
  8030  0E4C  0B89               	decfsz	9,f
  8031  0E4D  2E49               	goto	u7635
  8032  0E4E  3001               	movlw	1
  8033  0E4F  02C8               	subwf	___ftadd@exp2^(0+128),f
  8034  0E50  0848               	movf	___ftadd@exp2^(0+128),w
  8035  0E51  0649               	xorwf	___ftadd@exp1^(0+128),w
  8036  0E52  1903               	skipnz
  8037  0E53  2E65               	goto	l6871
  8038  0E54  3001               	movlw	1
  8039  0E55  02C7               	subwf	___ftadd@sign^(0+128),f
  8040  0E56  0847               	movf	___ftadd@sign^(0+128),w
  8041  0E57  3907               	andlw	7
  8042  0E58  1903               	btfsc	3,2
  8043  0E59  2E65               	goto	l6871
  8044  0E5A  2E48               	goto	l6863
  8045  0E5B                     l6869:	
  8046  0E5B  3001               	movlw	1
  8047  0E5C                     u7665:	
  8048  0E5C  36BF               	lsrf	(___ftadd@f1+2)^(0+128),f
  8049  0E5D  0CBE               	rrf	(___ftadd@f1+1)^(0+128),f
  8050  0E5E  0CBD               	rrf	___ftadd@f1^(0+128),f
  8051  0E5F  0B89               	decfsz	9,f
  8052  0E60  2E5C               	goto	u7665
  8053  0E61  3001               	movlw	1
  8054  0E62  00C3               	movwf	??___ftadd^(0+128)
  8055  0E63  0843               	movf	??___ftadd^(0+128),w
  8056  0E64  07C9               	addwf	___ftadd@exp1^(0+128),f
  8057  0E65                     l6871:	
  8058  0E65  0849               	movf	___ftadd@exp1^(0+128),w
  8059  0E66  0648               	xorwf	___ftadd@exp2^(0+128),w
  8060  0E67  1903               	btfsc	3,2
  8061  0E68  2E8F               	goto	l1112
  8062  0E69  2E5B               	goto	l6869
  8063  0E6A                     l6873:	
  8064  0E6A  0849               	movf	___ftadd@exp1^(0+128),w
  8065  0E6B  0248               	subwf	___ftadd@exp2^(0+128),w
  8066  0E6C  1803               	skipnc
  8067  0E6D  2E8F               	goto	l1112
  8068  0E6E                     l6875:	
  8069  0E6E  3001               	movlw	1
  8070  0E6F                     u7695:	
  8071  0E6F  35BD               	lslf	___ftadd@f1^(0+128),f
  8072  0E70  0DBE               	rlf	(___ftadd@f1+1)^(0+128),f
  8073  0E71  0DBF               	rlf	(___ftadd@f1+2)^(0+128),f
  8074  0E72  0B89               	decfsz	9,f
  8075  0E73  2E6F               	goto	u7695
  8076  0E74  3001               	movlw	1
  8077  0E75  02C9               	subwf	___ftadd@exp1^(0+128),f
  8078  0E76  0848               	movf	___ftadd@exp2^(0+128),w
  8079  0E77  0649               	xorwf	___ftadd@exp1^(0+128),w
  8080  0E78  1903               	skipnz
  8081  0E79  2E8B               	goto	l6883
  8082  0E7A  3001               	movlw	1
  8083  0E7B  02C7               	subwf	___ftadd@sign^(0+128),f
  8084  0E7C  0847               	movf	___ftadd@sign^(0+128),w
  8085  0E7D  3907               	andlw	7
  8086  0E7E  1903               	btfsc	3,2
  8087  0E7F  2E8B               	goto	l6883
  8088  0E80  2E6E               	goto	l6875
  8089  0E81                     l6881:	
  8090  0E81  3001               	movlw	1
  8091  0E82                     u7725:	
  8092  0E82  36C2               	lsrf	(___ftadd@f2+2)^(0+128),f
  8093  0E83  0CC1               	rrf	(___ftadd@f2+1)^(0+128),f
  8094  0E84  0CC0               	rrf	___ftadd@f2^(0+128),f
  8095  0E85  0B89               	decfsz	9,f
  8096  0E86  2E82               	goto	u7725
  8097  0E87  3001               	movlw	1
  8098  0E88  00C3               	movwf	??___ftadd^(0+128)
  8099  0E89  0843               	movf	??___ftadd^(0+128),w
  8100  0E8A  07C8               	addwf	___ftadd@exp2^(0+128),f
  8101  0E8B                     l6883:	
  8102  0E8B  0849               	movf	___ftadd@exp1^(0+128),w
  8103  0E8C  0648               	xorwf	___ftadd@exp2^(0+128),w
  8104  0E8D  1D03               	skipz
  8105  0E8E  2E81               	goto	l6881
  8106  0E8F                     l1112:	
  8107  0E8F  1FC7               	btfss	___ftadd@sign^(0+128),7
  8108  0E90  2EA1               	goto	l6887
  8109  0E91  30FF               	movlw	255
  8110  0E92  06BD               	xorwf	___ftadd@f1^(0+128),f
  8111  0E93  30FF               	movlw	255
  8112  0E94  06BE               	xorwf	(___ftadd@f1+1)^(0+128),f
  8113  0E95  30FF               	movlw	255
  8114  0E96  06BF               	xorwf	(___ftadd@f1+2)^(0+128),f
  8115  0E97  3001               	movlw	1
  8116  0E98  07BD               	addwf	___ftadd@f1^(0+128),f
  8117  0E99  3000               	movlw	0
  8118  0E9A  1803               	skipnc
  8119  0E9B  3001               	movlw	1
  8120  0E9C  07BE               	addwf	(___ftadd@f1+1)^(0+128),f
  8121  0E9D  3000               	movlw	0
  8122  0E9E  1803               	skipnc
  8123  0E9F  3001               	movlw	1
  8124  0EA0  07BF               	addwf	(___ftadd@f1+2)^(0+128),f
  8125  0EA1                     l6887:	
  8126  0EA1  1F47               	btfss	___ftadd@sign^(0+128),6
  8127  0EA2  2EB3               	goto	l6891
  8128  0EA3  30FF               	movlw	255
  8129  0EA4  06C0               	xorwf	___ftadd@f2^(0+128),f
  8130  0EA5  30FF               	movlw	255
  8131  0EA6  06C1               	xorwf	(___ftadd@f2+1)^(0+128),f
  8132  0EA7  30FF               	movlw	255
  8133  0EA8  06C2               	xorwf	(___ftadd@f2+2)^(0+128),f
  8134  0EA9  3001               	movlw	1
  8135  0EAA  07C0               	addwf	___ftadd@f2^(0+128),f
  8136  0EAB  3000               	movlw	0
  8137  0EAC  1803               	skipnc
  8138  0EAD  3001               	movlw	1
  8139  0EAE  07C1               	addwf	(___ftadd@f2+1)^(0+128),f
  8140  0EAF  3000               	movlw	0
  8141  0EB0  1803               	skipnc
  8142  0EB1  3001               	movlw	1
  8143  0EB2  07C2               	addwf	(___ftadd@f2+2)^(0+128),f
  8144  0EB3                     l6891:	
  8145  0EB3  01C7               	clrf	___ftadd@sign^(0+128)
  8146  0EB4  083D               	movf	___ftadd@f1^(0+128),w
  8147  0EB5  07C0               	addwf	___ftadd@f2^(0+128),f
  8148  0EB6  083E               	movf	(___ftadd@f1+1)^(0+128),w
  8149  0EB7  3DC1               	addwfc	(___ftadd@f2+1)^(0+128),f
  8150  0EB8  083F               	movf	(___ftadd@f1+2)^(0+128),w
  8151  0EB9  3DC2               	addwfc	(___ftadd@f2+2)^(0+128),f
  8152  0EBA  1FC2               	btfss	(___ftadd@f2+2)^(0+128),7
  8153  0EBB  2ECE               	goto	l6901
  8154  0EBC  30FF               	movlw	255
  8155  0EBD  06C0               	xorwf	___ftadd@f2^(0+128),f
  8156  0EBE  30FF               	movlw	255
  8157  0EBF  06C1               	xorwf	(___ftadd@f2+1)^(0+128),f
  8158  0EC0  30FF               	movlw	255
  8159  0EC1  06C2               	xorwf	(___ftadd@f2+2)^(0+128),f
  8160  0EC2  3001               	movlw	1
  8161  0EC3  07C0               	addwf	___ftadd@f2^(0+128),f
  8162  0EC4  3000               	movlw	0
  8163  0EC5  1803               	skipnc
  8164  0EC6  3001               	movlw	1
  8165  0EC7  07C1               	addwf	(___ftadd@f2+1)^(0+128),f
  8166  0EC8  3000               	movlw	0
  8167  0EC9  1803               	skipnc
  8168  0ECA  3001               	movlw	1
  8169  0ECB  07C2               	addwf	(___ftadd@f2+2)^(0+128),f
  8170  0ECC  01C7               	clrf	___ftadd@sign^(0+128)
  8171  0ECD  0AC7               	incf	___ftadd@sign^(0+128),f
  8172  0ECE                     l6901:	
  8173  0ECE  0840               	movf	___ftadd@f2^(0+128),w
  8174  0ECF  00A0               	movwf	?___ftpack^(0+128)
  8175  0ED0  0841               	movf	(___ftadd@f2+1)^(0+128),w
  8176  0ED1  00A1               	movwf	(?___ftpack+1)^(0+128)
  8177  0ED2  0842               	movf	(___ftadd@f2+2)^(0+128),w
  8178  0ED3  00A2               	movwf	(?___ftpack+2)^(0+128)
  8179  0ED4  0849               	movf	___ftadd@exp1^(0+128),w
  8180  0ED5  00C3               	movwf	??___ftadd^(0+128)
  8181  0ED6  0843               	movf	??___ftadd^(0+128),w
  8182  0ED7  00A3               	movwf	(?___ftpack^(0+128)+3)
  8183  0ED8  0847               	movf	___ftadd@sign^(0+128),w
  8184  0ED9  00C4               	movwf	(??___ftadd+1)^(0+128)
  8185  0EDA  0844               	movf	(??___ftadd+1)^(0+128),w
  8186  0EDB  00A4               	movwf	(?___ftpack^(0+128)+4)
  8187  0EDC  3191  2168         	fcall	___ftpack
  8188  0EDE  0021               	movlb	1	; select bank1
  8189  0EDF  0820               	movf	?___ftpack^(0+128),w
  8190  0EE0  00BD               	movwf	?___ftadd^(0+128)
  8191  0EE1  0821               	movf	(?___ftpack+1)^(0+128),w
  8192  0EE2  00BE               	movwf	(?___ftadd+1)^(0+128)
  8193  0EE3  0822               	movf	(?___ftpack+2)^(0+128),w
  8194  0EE4  00BF               	movwf	(?___ftadd+2)^(0+128)
  8195  0EE5  0008               	return
  8196  0EE6                     __end_of___ftadd:	
  8197                           
  8198                           	psect	text26
  8199  1D12                     __ptext26:	
  8200 ;; *************** function ___awtoft *****************
  8201 ;; Defined at:
  8202 ;;		line 33 in file "C:\Program Files (x86)\Microchip\xc8\v1.20\sources\pic\awtoft.c"
  8203 ;; Parameters:    Size  Location     Type
  8204 ;;  c               2    5[BANK1 ] int 
  8205 ;; Auto vars:     Size  Location     Type
  8206 ;;  sign            1   17[BANK0 ] unsigned char 
  8207 ;; Return value:  Size  Location     Type
  8208 ;;                  3    5[BANK1 ] float 
  8209 ;; Registers used:
  8210 ;;		wreg, status,2, status,0, pclath, cstack
  8211 ;; Tracked objects:
  8212 ;;		On entry : 0/0
  8213 ;;		On exit  : 0/0
  8214 ;;		Unchanged: 0/0
  8215 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8216 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  8217 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8218 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  8219 ;;      Totals:         0       1       5       0       0       0       0       0       0       0       0       0       
      +0       0
  8220 ;;Total ram usage:        6 bytes
  8221 ;; Hardware stack levels used:    1
  8222 ;; Hardware stack levels required when called:    5
  8223 ;; This function calls:
  8224 ;;		___ftpack
  8225 ;; This function is called by:
  8226 ;;		_UpdateFanLevel
  8227 ;; This function uses a non-reentrant model
  8228 ;;
  8229                           
  8230                           
  8231                           ;psect for function ___awtoft
  8232  1D12                     ___awtoft:	
  8233                           
  8234                           ;incstack = 0
  8235                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
  8236  1D12  0020               	movlb	0	; select bank0
  8237  1D13  01E1               	clrf	___awtoft@sign
  8238  1D14  0021               	movlb	1	; select bank1
  8239  1D15  1FA6               	btfss	(___awtoft@c+1)^(0+128),7
  8240  1D16  2D1F               	goto	l6829
  8241  1D17  09A5               	comf	___awtoft@c^(0+128),f
  8242  1D18  09A6               	comf	(___awtoft@c+1)^(0+128),f
  8243  1D19  0AA5               	incf	___awtoft@c^(0+128),f
  8244  1D1A  1903               	skipnz
  8245  1D1B  0AA6               	incf	(___awtoft@c+1)^(0+128),f
  8246  1D1C  0020               	movlb	0	; select bank0
  8247  1D1D  01E1               	clrf	___awtoft@sign
  8248  1D1E  0AE1               	incf	___awtoft@sign,f
  8249  1D1F                     l6829:	
  8250  1D1F  0021               	movlb	1	; select bank1
  8251  1D20  0825               	movf	___awtoft@c^(0+128),w
  8252  1D21  00A0               	movwf	?___ftpack^(0+128)
  8253  1D22  0826               	movf	(___awtoft@c+1)^(0+128),w
  8254  1D23  00A1               	movwf	(?___ftpack+1)^(0+128)
  8255  1D24  01A2               	clrf	(?___ftpack+2)^(0+128)
  8256  1D25  308E               	movlw	142
  8257  1D26  00A8               	movwf	??___awtoft^(0+128)
  8258  1D27  0828               	movf	??___awtoft^(0+128),w
  8259  1D28  00A3               	movwf	(?___ftpack^(0+128)+3)
  8260  1D29  0020               	movlb	0	; select bank0
  8261  1D2A  0861               	movf	___awtoft@sign,w
  8262  1D2B  0021               	movlb	1	; select bank1
  8263  1D2C  00A9               	movwf	(??___awtoft+1)^(0+128)
  8264  1D2D  0829               	movf	(??___awtoft+1)^(0+128),w
  8265  1D2E  00A4               	movwf	(?___ftpack^(0+128)+4)
  8266  1D2F  3191  2168         	fcall	___ftpack
  8267  1D31  0021               	movlb	1	; select bank1
  8268  1D32  0820               	movf	?___ftpack^(0+128),w
  8269  1D33  00A5               	movwf	?___awtoft^(0+128)
  8270  1D34  0821               	movf	(?___ftpack+1)^(0+128),w
  8271  1D35  00A6               	movwf	(?___awtoft+1)^(0+128)
  8272  1D36  0822               	movf	(?___ftpack+2)^(0+128),w
  8273  1D37  00A7               	movwf	(?___awtoft+2)^(0+128)
  8274  1D38  0008               	return
  8275  1D39                     __end_of___awtoft:	
  8276                           
  8277                           	psect	text27
  8278  1168                     __ptext27:	
  8279 ;; *************** function ___ftpack *****************
  8280 ;; Defined at:
  8281 ;;		line 63 in file "C:\Program Files (x86)\Microchip\xc8\v1.20\sources\pic\float.c"
  8282 ;; Parameters:    Size  Location     Type
  8283 ;;  arg             3    0[BANK1 ] unsigned um
  8284 ;;  exp             1    3[BANK1 ] unsigned char 
  8285 ;;  sign            1    4[BANK1 ] unsigned char 
  8286 ;; Auto vars:     Size  Location     Type
  8287 ;;		None
  8288 ;; Return value:  Size  Location     Type
  8289 ;;                  3    0[BANK1 ] float 
  8290 ;; Registers used:
  8291 ;;		wreg, status,2, status,0
  8292 ;; Tracked objects:
  8293 ;;		On entry : 0/0
  8294 ;;		On exit  : 0/0
  8295 ;;		Unchanged: 0/0
  8296 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8297 ;;      Params:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
  8298 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8299 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8300 ;;      Totals:         0       3       5       0       0       0       0       0       0       0       0       0       
      +0       0
  8301 ;;Total ram usage:        8 bytes
  8302 ;; Hardware stack levels used:    1
  8303 ;; Hardware stack levels required when called:    4
  8304 ;; This function calls:
  8305 ;;		Nothing
  8306 ;; This function is called by:
  8307 ;;		___awtoft
  8308 ;;		___ftadd
  8309 ;;		___ftmul
  8310 ;; This function uses a non-reentrant model
  8311 ;;
  8312                           
  8313                           
  8314                           ;psect for function ___ftpack
  8315  1168                     ___ftpack:	
  8316                           
  8317                           ;incstack = 0
  8318                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  8319  1168  0021               	movlb	1	; select bank1
  8320  1169  0823               	movf	___ftpack@exp^(0+128),w
  8321  116A  1903               	btfsc	3,2
  8322  116B  2971               	goto	l6795
  8323  116C  0822               	movf	(___ftpack@arg+2)^(0+128),w
  8324  116D  0421               	iorwf	(___ftpack@arg+1)^(0+128),w
  8325  116E  0420               	iorwf	___ftpack@arg^(0+128),w
  8326  116F  1D03               	skipz
  8327  1170  2984               	goto	l6801
  8328  1171                     l6795:	
  8329  1171  3000               	movlw	0
  8330  1172  00A0               	movwf	?___ftpack^(0+128)
  8331  1173  3000               	movlw	0
  8332  1174  00A1               	movwf	(?___ftpack+1)^(0+128)
  8333  1175  3000               	movlw	0
  8334  1176  00A2               	movwf	(?___ftpack+2)^(0+128)
  8335  1177  0008               	return
  8336  1178                     l6799:	
  8337  1178  3001               	movlw	1
  8338  1179  0020               	movlb	0	; select bank0
  8339  117A  00DE               	movwf	??___ftpack
  8340  117B  085E               	movf	??___ftpack,w
  8341  117C  0021               	movlb	1	; select bank1
  8342  117D  07A3               	addwf	___ftpack@exp^(0+128),f
  8343  117E  3001               	movlw	1
  8344  117F                     u7445:	
  8345  117F  36A2               	lsrf	(___ftpack@arg+2)^(0+128),f
  8346  1180  0CA1               	rrf	(___ftpack@arg+1)^(0+128),f
  8347  1181  0CA0               	rrf	___ftpack@arg^(0+128),f
  8348  1182  0B89               	decfsz	9,f
  8349  1183  297F               	goto	u7445
  8350  1184                     l6801:	
  8351  1184  30FE               	movlw	254
  8352  1185  0522               	andwf	(___ftpack@arg+2)^(0+128),w
  8353  1186  1903               	btfsc	3,2
  8354  1187  299F               	goto	l1083
  8355  1188  2978               	goto	l6799
  8356  1189                     l6803:	
  8357  1189  3001               	movlw	1
  8358  118A  0020               	movlb	0	; select bank0
  8359  118B  00DE               	movwf	??___ftpack
  8360  118C  085E               	movf	??___ftpack,w
  8361  118D  0021               	movlb	1	; select bank1
  8362  118E  07A3               	addwf	___ftpack@exp^(0+128),f
  8363  118F  3001               	movlw	1
  8364  1190  07A0               	addwf	___ftpack@arg^(0+128),f
  8365  1191  3000               	movlw	0
  8366  1192  1803               	skipnc
  8367  1193  3001               	movlw	1
  8368  1194  07A1               	addwf	(___ftpack@arg+1)^(0+128),f
  8369  1195  3000               	movlw	0
  8370  1196  1803               	skipnc
  8371  1197  3001               	movlw	1
  8372  1198  07A2               	addwf	(___ftpack@arg+2)^(0+128),f
  8373  1199  3001               	movlw	1
  8374  119A                     u7465:	
  8375  119A  36A2               	lsrf	(___ftpack@arg+2)^(0+128),f
  8376  119B  0CA1               	rrf	(___ftpack@arg+1)^(0+128),f
  8377  119C  0CA0               	rrf	___ftpack@arg^(0+128),f
  8378  119D  0B89               	decfsz	9,f
  8379  119E  299A               	goto	u7465
  8380  119F                     l1083:	
  8381  119F  30FF               	movlw	255
  8382  11A0  0522               	andwf	(___ftpack@arg+2)^(0+128),w
  8383  11A1  1903               	btfsc	3,2
  8384  11A2  29AC               	goto	l6811
  8385  11A3  2989               	goto	l6803
  8386  11A4                     l6809:	
  8387  11A4  3001               	movlw	1
  8388  11A5  02A3               	subwf	___ftpack@exp^(0+128),f
  8389  11A6  3001               	movlw	1
  8390  11A7                     u7485:	
  8391  11A7  35A0               	lslf	___ftpack@arg^(0+128),f
  8392  11A8  0DA1               	rlf	(___ftpack@arg+1)^(0+128),f
  8393  11A9  0DA2               	rlf	(___ftpack@arg+2)^(0+128),f
  8394  11AA  0B89               	decfsz	9,f
  8395  11AB  29A7               	goto	u7485
  8396  11AC                     l6811:	
  8397  11AC  1FA1               	btfss	(___ftpack@arg+1)^(0+128),7
  8398  11AD  29A4               	goto	l6809
  8399  11AE  1823               	btfsc	___ftpack@exp^(0+128),0
  8400  11AF  29B6               	goto	l1089
  8401  11B0  30FF               	movlw	255
  8402  11B1  05A0               	andwf	___ftpack@arg^(0+128),f
  8403  11B2  307F               	movlw	127
  8404  11B3  05A1               	andwf	(___ftpack@arg+1)^(0+128),f
  8405  11B4  30FF               	movlw	255
  8406  11B5  05A2               	andwf	(___ftpack@arg+2)^(0+128),f
  8407  11B6                     l1089:	
  8408  11B6  1003               	clrc
  8409  11B7  0CA3               	rrf	___ftpack@exp^(0+128),f
  8410  11B8  0823               	movf	___ftpack@exp^(0+128),w
  8411  11B9  0020               	movlb	0	; select bank0
  8412  11BA  00DE               	movwf	??___ftpack
  8413  11BB  01DF               	clrf	??___ftpack+1
  8414  11BC  01E0               	clrf	??___ftpack+2
  8415  11BD  3010               	movlw	16
  8416  11BE                     u7515:	
  8417  11BE  35DE               	lslf	??___ftpack,f
  8418  11BF  0DDF               	rlf	??___ftpack+1,f
  8419  11C0  0DE0               	rlf	??___ftpack+2,f
  8420  11C1  0B89               	decfsz	9,f
  8421  11C2  29BE               	goto	u7515
  8422  11C3  085E               	movf	??___ftpack,w
  8423  11C4  0021               	movlb	1	; select bank1
  8424  11C5  04A0               	iorwf	___ftpack@arg^(0+128),f
  8425  11C6  0020               	movlb	0	; select bank0
  8426  11C7  085F               	movf	??___ftpack+1,w
  8427  11C8  0021               	movlb	1	; select bank1
  8428  11C9  04A1               	iorwf	(___ftpack@arg+1)^(0+128),f
  8429  11CA  0020               	movlb	0	; select bank0
  8430  11CB  0860               	movf	??___ftpack+2,w
  8431  11CC  0021               	movlb	1	; select bank1
  8432  11CD  04A2               	iorwf	(___ftpack@arg+2)^(0+128),f
  8433  11CE  0824               	movf	___ftpack@sign^(0+128),w
  8434  11CF  1903               	btfsc	3,2
  8435  11D0  0008               	return
  8436  11D1  17A2               	bsf	(___ftpack@arg^(0+128)+2),7
  8437  11D2  0008               	return
  8438  11D3                     __end_of___ftpack:	
  8439                           
  8440                           	psect	text28
  8441  0D05                     __ptext28:	
  8442 ;; *************** function _USBDeviceTasks *****************
  8443 ;; Defined at:
  8444 ;;		line 669 in file "../USB/usb_device.c"
  8445 ;; Parameters:    Size  Location     Type
  8446 ;;		None
  8447 ;; Auto vars:     Size  Location     Type
  8448 ;;  i               1   31[BANK1 ] unsigned char 
  8449 ;; Return value:  Size  Location     Type
  8450 ;;		None               void
  8451 ;; Registers used:
  8452 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  8453 ;; Tracked objects:
  8454 ;;		On entry : 0/0
  8455 ;;		On exit  : 0/0
  8456 ;;		Unchanged: 0/0
  8457 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8458 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8459 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  8460 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  8461 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  8462 ;;Total ram usage:        3 bytes
  8463 ;; Hardware stack levels used:    1
  8464 ;; Hardware stack levels required when called:   12
  8465 ;; This function calls:
  8466 ;;		_USBDeviceInit
  8467 ;;		_USBWakeFromSuspend
  8468 ;;		_USBSuspend
  8469 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
  8470 ;;		_USBCtrlEPAllowStatusStage
  8471 ;;		_USBStallHandler
  8472 ;;		_USBCtrlEPService
  8473 ;; This function is called by:
  8474 ;;		_main
  8475 ;; This function uses a non-reentrant model
  8476 ;;
  8477                           
  8478                           
  8479                           ;psect for function _USBDeviceTasks
  8480  0D05                     _USBDeviceTasks:	
  8481                           
  8482                           ;usb_device.c: 735: }
  8483                           ;usb_device.c: 757: if(USBDeviceState == DETACHED_STATE)
  8484                           
  8485                           ;usb_device.c: 734: return;
  8486                           
  8487                           ;usb_device.c: 733: PIR2bits.USBIF = 0;;
  8488                           
  8489                           ;usb_device.c: 705: USBDeviceState = DETACHED_STATE;
  8490                           
  8491                           ;usb_device.c: 702: UIE = 0;
  8492                           
  8493                           ;usb_device.c: 697: {
  8494                           ;usb_device.c: 699: UCON = 0;
  8495                           
  8496                           ;usb_device.c: 670: BYTE i;
  8497                           ;usb_device.c: 696: if (1 != 1)
  8498                           
  8499                           ;incstack = 0
  8500                           ; Regs used in _USBDeviceTasks: [allreg]
  8501  0D05  0021               	movlb	1	; select bank1
  8502  0D06  08E3               	movf	_USBDeviceState^(0+128),f
  8503  0D07  1D03               	skipz
  8504  0D08  2D19               	goto	l6169
  8505                           
  8506                           ;usb_device.c: 758: {
  8507                           ;usb_device.c: 760: UCON = 0;
  8508  0D09  003D               	movlb	29	; select bank29
  8509  0D0A  018E               	clrf	14	;volatile
  8510                           
  8511                           ;usb_device.c: 763: UIE = 0;
  8512  0D0B  0192               	clrf	18	;volatile
  8513                           
  8514                           ;usb_device.c: 767: { UCFG = 0x10 | 0x00 | 0x04 | 0x02; UEIE = 0x9F; UIE = 0x39 | 0x40 |
      +                           0x02; };
  8515  0D0C  3016               	movlw	22
  8516  0D0D  0091               	movwf	17	;volatile
  8517  0D0E  309F               	movlw	159
  8518  0D0F  0097               	movwf	23	;volatile
  8519  0D10  307B               	movlw	123
  8520  0D11  0092               	movwf	18	;volatile
  8521  0D12                     l140:	
  8522                           ;usb_device.c: 770: while(!UCONbits.USBEN){UCONbits.USBEN = 1;}
  8523                           
  8524  0D12  198E               	btfsc	14,3	;volatile
  8525  0D13  2D16               	goto	l142
  8526  0D14  158E               	bsf	14,3	;volatile
  8527  0D15  2D12               	goto	l140
  8528  0D16                     l142:	
  8529                           
  8530                           ;usb_device.c: 773: USBDeviceState = ATTACHED_STATE;
  8531  0D16  0021               	movlb	1	; select bank1
  8532  0D17  01E3               	clrf	_USBDeviceState^(0+128)
  8533  0D18  0AE3               	incf	_USBDeviceState^(0+128),f
  8534  0D19                     l6169:	
  8535                           
  8536                           ;usb_device.c: 778: }
  8537                           ;usb_device.c: 781: if(USBDeviceState == ATTACHED_STATE)
  8538  0D19  0863               	movf	_USBDeviceState^(0+128),w
  8539  0D1A  3A01               	xorlw	1
  8540  0D1B  1D03               	skipz
  8541  0D1C  2D29               	goto	l6181
  8542                           
  8543                           ;usb_device.c: 782: {
  8544                           ;usb_device.c: 792: if(!UCONbits.SE0)
  8545  0D1D  003D               	movlb	29	; select bank29
  8546  0D1E  1A8E               	btfsc	14,5	;volatile
  8547  0D1F  2D29               	goto	l6181
  8548                           
  8549                           ;usb_device.c: 793: {
  8550                           ;usb_device.c: 794: UIR = 0;;
  8551  0D20  0190               	clrf	16	;volatile
  8552                           
  8553                           ;usb_device.c: 796: UIE=0;
  8554  0D21  0192               	clrf	18	;volatile
  8555                           
  8556                           ;usb_device.c: 798: UIEbits.URSTIE = 1;
  8557  0D22  1412               	bsf	18,0	;volatile
  8558                           
  8559                           ;usb_device.c: 799: UIEbits.IDLEIE = 1;
  8560  0D23  1612               	bsf	18,4	;volatile
  8561                           
  8562                           ;usb_device.c: 800: USBDeviceState = POWERED_STATE;
  8563  0D24  3002               	movlw	2
  8564  0D25  0021               	movlb	1	; select bank1
  8565  0D26  00BD               	movwf	??_USBDeviceTasks^(0+128)
  8566  0D27  083D               	movf	??_USBDeviceTasks^(0+128),w
  8567  0D28  00E3               	movwf	_USBDeviceState^(0+128)
  8568  0D29                     l6181:	
  8569                           
  8570                           ;usb_device.c: 801: }
  8571                           ;usb_device.c: 802: }
  8572                           ;usb_device.c: 818: if(UIRbits.ACTVIF && UIEbits.ACTVIE)
  8573  0D29  003D               	movlb	29	; select bank29
  8574  0D2A  1910               	btfsc	16,2	;volatile
  8575  0D2B  1D12               	btfss	18,2	;volatile
  8576  0D2C  2D36               	goto	l6189
  8577                           
  8578                           ;usb_device.c: 819: {
  8579                           ;usb_device.c: 820: (UIR &= 0xFB);
  8580  0D2D  30FB               	movlw	251
  8581  0D2E  0021               	movlb	1	; select bank1
  8582  0D2F  00BD               	movwf	??_USBDeviceTasks^(0+128)
  8583  0D30  083D               	movf	??_USBDeviceTasks^(0+128),w
  8584  0D31  003D               	movlb	29	; select bank29
  8585  0D32  0590               	andwf	16,f	;volatile
  8586                           
  8587                           ;usb_device.c: 824: USBWakeFromSuspend();
  8588  0D33  319C  240C  318D   	fcall	_USBWakeFromSuspend
  8589  0D36                     l6189:	
  8590                           
  8591                           ;usb_device.c: 826: }
  8592                           ;usb_device.c: 831: if(UCONbits.SUSPND==1)
  8593  0D36  003D               	movlb	29	; select bank29
  8594  0D37  1C8E               	btfss	14,1	;volatile
  8595  0D38  2D3C               	goto	l146
  8596                           
  8597                           ;usb_device.c: 832: {
  8598                           ;usb_device.c: 833: PIR2bits.USBIF = 0;;
  8599  0D39  0020               	movlb	0	; select bank0
  8600  0D3A  1112               	bcf	18,2	;volatile
  8601                           
  8602                           ;usb_device.c: 834: return;
  8603  0D3B  0008               	return
  8604  0D3C                     l146:	
  8605                           
  8606                           ;usb_device.c: 835: }
  8607                           ;usb_device.c: 847: if(UIRbits.URSTIF && UIEbits.URSTIE)
  8608  0D3C  1810               	btfsc	16,0	;volatile
  8609  0D3D  1C12               	btfss	18,0	;volatile
  8610  0D3E  2D4C               	goto	l6201
  8611                           
  8612                           ;usb_device.c: 848: {
  8613                           ;usb_device.c: 849: USBDeviceInit();
  8614  0D3F  3189  2184  318D   	fcall	_USBDeviceInit
  8615                           
  8616                           ;usb_device.c: 853: ;
  8617                           ;usb_device.c: 855: USBDeviceState = DEFAULT_STATE;
  8618  0D42  3004               	movlw	4
  8619  0D43  0021               	movlb	1	; select bank1
  8620  0D44  00BD               	movwf	??_USBDeviceTasks^(0+128)
  8621  0D45  083D               	movf	??_USBDeviceTasks^(0+128),w
  8622  0D46  00E3               	movwf	_USBDeviceState^(0+128)
  8623                           
  8624                           ;usb_device.c: 865: (UIR &= 0xFE);
  8625  0D47  30FE               	movlw	254
  8626  0D48  00BD               	movwf	??_USBDeviceTasks^(0+128)
  8627  0D49  083D               	movf	??_USBDeviceTasks^(0+128),w
  8628  0D4A  003D               	movlb	29	; select bank29
  8629  0D4B  0590               	andwf	16,f	;volatile
  8630  0D4C                     l6201:	
  8631                           
  8632                           ;usb_device.c: 866: }
  8633                           ;usb_device.c: 871: if(UIRbits.IDLEIF && UIEbits.IDLEIE)
  8634  0D4C  1A10               	btfsc	16,4	;volatile
  8635  0D4D  1E12               	btfss	18,4	;volatile
  8636  0D4E  2D58               	goto	l6209
  8637                           
  8638                           ;usb_device.c: 872: {
  8639                           ;usb_device.c: 877: USBSuspend();
  8640  0D4F  319C  2424  318D   	fcall	_USBSuspend
  8641                           
  8642                           ;usb_device.c: 880: (UIR &= 0xEF);
  8643  0D52  30EF               	movlw	239
  8644  0D53  0021               	movlb	1	; select bank1
  8645  0D54  00BD               	movwf	??_USBDeviceTasks^(0+128)
  8646  0D55  083D               	movf	??_USBDeviceTasks^(0+128),w
  8647  0D56  003D               	movlb	29	; select bank29
  8648  0D57  0590               	andwf	16,f	;volatile
  8649  0D58                     l6209:	
  8650                           
  8651                           ;usb_device.c: 881: }
  8652                           ;usb_device.c: 883: if(UIRbits.SOFIF)
  8653  0D58  1F10               	btfss	16,6	;volatile
  8654  0D59  2D7B               	goto	l6225
  8655                           
  8656                           ;usb_device.c: 884: {
  8657                           ;usb_device.c: 885: if(UIEbits.SOFIE)
  8658  0D5A  1F12               	btfss	18,6	;volatile
  8659  0D5B  2D69               	goto	l6215
  8660                           
  8661                           ;usb_device.c: 886: {
  8662                           ;usb_device.c: 887: USER_USB_CALLBACK_EVENT_HANDLER(EVENT_SOF,0,1);
  8663  0D5C  3073               	movlw	115
  8664  0D5D  0021               	movlb	1	; select bank1
  8665  0D5E  00AC               	movwf	?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)
  8666  0D5F  3000               	movlw	0
  8667  0D60  00AD               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)+1)
  8668  0D61  01AE               	clrf	(?_USER_USB_CALLBACK_EVENT_HANDLER+2)^(0+128)
  8669  0D62  3001               	movlw	1
  8670  0D63  00AF               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)+3)
  8671  0D64  3000               	movlw	0
  8672  0D65  00B0               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)+4)
  8673  0D66  319D  25F4  318D   	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
  8674  0D69                     l6215:	
  8675                           
  8676                           ;usb_device.c: 888: }
  8677                           ;usb_device.c: 889: (UIR &= 0xBF);
  8678  0D69  30BF               	movlw	191
  8679  0D6A  0021               	movlb	1	; select bank1
  8680  0D6B  00BD               	movwf	??_USBDeviceTasks^(0+128)
  8681  0D6C  083D               	movf	??_USBDeviceTasks^(0+128),w
  8682  0D6D  003D               	movlb	29	; select bank29
  8683  0D6E  0590               	andwf	16,f	;volatile
  8684                           
  8685                           ;usb_device.c: 914: if(USBStatusStageTimeoutCounter != 0u)
  8686  0D6F  0022               	movlb	2	; select bank2
  8687  0D70  086C               	movf	_USBStatusStageTimeoutCounter^(0+256),w
  8688  0D71  1903               	btfsc	3,2
  8689  0D72  2D75               	goto	l6221
  8690                           
  8691                           ;usb_device.c: 915: {
  8692                           ;usb_device.c: 916: USBStatusStageTimeoutCounter--;
  8693  0D73  3001               	movlw	1
  8694  0D74  02EC               	subwf	_USBStatusStageTimeoutCounter^(0+256),f
  8695  0D75                     l6221:	
  8696                           
  8697                           ;usb_device.c: 917: }
  8698                           ;usb_device.c: 923: if(USBStatusStageTimeoutCounter == 0)
  8699  0D75  08EC               	movf	_USBStatusStageTimeoutCounter^(0+256),f
  8700  0D76  1D03               	skipz
  8701  0D77  2D7B               	goto	l6225
  8702                           
  8703                           ;usb_device.c: 924: {
  8704                           ;usb_device.c: 925: USBCtrlEPAllowStatusStage();
  8705  0D78  3191  21D3  318D   	fcall	_USBCtrlEPAllowStatusStage
  8706  0D7B                     l6225:	
  8707                           
  8708                           ;usb_device.c: 926: }
  8709                           ;usb_device.c: 928: }
  8710                           ;usb_device.c: 930: if(UIRbits.STALLIF && UIEbits.STALLIE)
  8711  0D7B  003D               	movlb	29	; select bank29
  8712  0D7C  1A90               	btfsc	16,5	;volatile
  8713  0D7D  1E92               	btfss	18,5	;volatile
  8714  0D7E  2D82               	goto	l6231
  8715                           
  8716                           ;usb_device.c: 931: {
  8717                           ;usb_device.c: 932: USBStallHandler();
  8718  0D7F  319C  24ED  318D   	fcall	_USBStallHandler
  8719  0D82                     l6231:	
  8720                           
  8721                           ;usb_device.c: 933: }
  8722                           ;usb_device.c: 935: if(UIRbits.UERRIF && UIEbits.UERRIE)
  8723  0D82  003D               	movlb	29	; select bank29
  8724  0D83  1890               	btfsc	16,1	;volatile
  8725  0D84  1C92               	btfss	18,1	;volatile
  8726  0D85  2D95               	goto	l6239
  8727                           
  8728                           ;usb_device.c: 936: {
  8729                           ;usb_device.c: 937: USER_USB_CALLBACK_EVENT_HANDLER(EVENT_BUS_ERROR,0,1);
  8730  0D86  30FF               	movlw	255
  8731  0D87  0021               	movlb	1	; select bank1
  8732  0D88  00AC               	movwf	?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)
  8733  0D89  307F               	movlw	127
  8734  0D8A  00AD               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)+1)
  8735  0D8B  01AE               	clrf	(?_USER_USB_CALLBACK_EVENT_HANDLER+2)^(0+128)
  8736  0D8C  3001               	movlw	1
  8737  0D8D  00AF               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)+3)
  8738  0D8E  3000               	movlw	0
  8739  0D8F  00B0               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)+4)
  8740  0D90  319D  25F4  318D   	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
  8741                           
  8742                           ;usb_device.c: 938: UEIR = 0;;
  8743  0D93  003D               	movlb	29	; select bank29
  8744  0D94  0193               	clrf	19	;volatile
  8745  0D95                     l6239:	
  8746                           
  8747                           ;usb_device.c: 946: }
  8748                           ;usb_device.c: 953: if(USBDeviceState < DEFAULT_STATE)
  8749  0D95  3004               	movlw	4
  8750  0D96  0021               	movlb	1	; select bank1
  8751  0D97  0263               	subwf	_USBDeviceState^(0+128),w
  8752  0D98  1803               	skipnc
  8753  0D99  2D9D               	goto	l155
  8754                           
  8755                           ;usb_device.c: 954: {
  8756                           ;usb_device.c: 955: PIR2bits.USBIF = 0;;
  8757  0D9A  0020               	movlb	0	; select bank0
  8758  0D9B  1112               	bcf	18,2	;volatile
  8759                           
  8760                           ;usb_device.c: 956: return;
  8761  0D9C  0008               	return
  8762  0D9D                     l155:	
  8763                           
  8764                           ;usb_device.c: 957: }
  8765                           ;usb_device.c: 962: if(UIEbits.TRNIE)
  8766  0D9D  003D               	movlb	29	; select bank29
  8767  0D9E  1D92               	btfss	18,3	;volatile
  8768  0D9F  2DED               	goto	l156
  8769                           
  8770                           ;usb_device.c: 963: {
  8771                           ;usb_device.c: 964: for(i = 0; i < 4u; i++)
  8772  0DA0  0021               	movlb	1	; select bank1
  8773  0DA1  01BF               	clrf	USBDeviceTasks@i^(0+128)
  8774  0DA2  2DE6               	goto	L9
  8775  0DA3                     l6249:	
  8776                           
  8777                           ;usb_device.c: 967: {
  8778                           ;usb_device.c: 969: USTATcopy.Val = USTAT;
  8779  0DA3  080F               	movf	15,w	;volatile
  8780  0DA4  0021               	movlb	1	; select bank1
  8781  0DA5  00BD               	movwf	??_USBDeviceTasks^(0+128)
  8782  0DA6  083D               	movf	??_USBDeviceTasks^(0+128),w
  8783  0DA7  00EE               	movwf	_USTATcopy^(0+128)
  8784                           
  8785                           ;usb_device.c: 970: endpoint_number = USTATcopy.endpoint_number;
  8786  0DA8  0C6E               	rrf	_USTATcopy^(0+128),w
  8787  0DA9  00BD               	movwf	??_USBDeviceTasks^(0+128)
  8788  0DAA  0CBD               	rrf	??_USBDeviceTasks^(0+128),f
  8789  0DAB  0C3D               	rrf	??_USBDeviceTasks^(0+128),w
  8790  0DAC  390F               	andlw	15
  8791  0DAD  00BE               	movwf	(??_USBDeviceTasks+1)^(0+128)
  8792  0DAE  083E               	movf	(??_USBDeviceTasks+1)^(0+128),w
  8793  0DAF  00E5               	movwf	_endpoint_number^(0+128)
  8794                           
  8795                           ;usb_device.c: 972: (UIR &= 0xF7);
  8796  0DB0  30F7               	movlw	247
  8797  0DB1  00BD               	movwf	??_USBDeviceTasks^(0+128)
  8798  0DB2  083D               	movf	??_USBDeviceTasks^(0+128),w
  8799  0DB3  003D               	movlb	29	; select bank29
  8800  0DB4  0590               	andwf	16,f	;volatile
  8801                           
  8802                           ;usb_device.c: 977: if(USTATcopy.direction == 0)
  8803  0DB5  0021               	movlb	1	; select bank1
  8804  0DB6  196E               	btfsc	_USTATcopy^(0+128),2
  8805  0DB7  2DBB               	goto	l6259
  8806                           
  8807                           ;usb_device.c: 978: {
  8808                           ;usb_device.c: 979: ep_data_out[endpoint_number].bits.ping_pong_state ^= 1;
  8809  0DB8  0865               	movf	_endpoint_number^(0+128),w
  8810  0DB9  3ED3               	addlw	_ep_data_out& (0+255)
  8811  0DBA  2DBD               	goto	L8
  8812  0DBB                     l6259:	
  8813                           ;usb_device.c: 980: }
  8814                           
  8815                           
  8816                           ;usb_device.c: 981: else
  8817                           ;usb_device.c: 982: {
  8818                           ;usb_device.c: 983: ep_data_in[endpoint_number].bits.ping_pong_state ^= 1;
  8819  0DBB  0865               	movf	_endpoint_number^(0+128),w
  8820  0DBC  3ED1               	addlw	_ep_data_in& (0+255)
  8821  0DBD                     L8:	
  8822  0DBD  0086               	movwf	6
  8823  0DBE  3001               	movlw	1	; select bank3/4
  8824  0DBF  0087               	movwf	7
  8825  0DC0  0801               	movf	1,w
  8826  0DC1  3901               	andlw	1
  8827  0DC2  00BD               	movwf	??_USBDeviceTasks^(0+128)
  8828  0DC3  3001               	movlw	1
  8829  0DC4  06BD               	xorwf	??_USBDeviceTasks^(0+128),f
  8830  0DC5  0801               	movf	1,w
  8831  0DC6  063D               	xorwf	??_USBDeviceTasks^(0+128),w
  8832  0DC7  39FE               	andlw	-2
  8833  0DC8  063D               	xorwf	??_USBDeviceTasks^(0+128),w
  8834  0DC9  0081               	movwf	1
  8835                           
  8836                           ;usb_device.c: 984: }
  8837                           ;usb_device.c: 989: if(endpoint_number == 0)
  8838  0DCA  08E5               	movf	_endpoint_number^(0+128),f
  8839  0DCB  1D03               	skipz
  8840  0DCC  2DD1               	goto	l6265
  8841                           
  8842                           ;usb_device.c: 990: {
  8843                           ;usb_device.c: 991: USBCtrlEPService();
  8844  0DCD  3187  2788  318D   	fcall	_USBCtrlEPService
  8845                           
  8846                           ;usb_device.c: 992: }
  8847  0DD0  2DE1               	goto	l6267
  8848  0DD1                     l6265:	
  8849                           
  8850                           ;usb_device.c: 993: else
  8851                           ;usb_device.c: 994: {
  8852                           ;usb_device.c: 995: USER_USB_CALLBACK_EVENT_HANDLER(EVENT_TRANSFER,(BYTE*)&USTATcopy.Val
      +                          ,0);
  8853  0DD1  3072               	movlw	114
  8854  0DD2  0021               	movlb	1	; select bank1
  8855  0DD3  00AC               	movwf	?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)
  8856  0DD4  3000               	movlw	0
  8857  0DD5  00AD               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)+1)
  8858  0DD6  30EE               	movlw	_USTATcopy& (0+255)
  8859  0DD7  00BD               	movwf	??_USBDeviceTasks^(0+128)
  8860  0DD8  083D               	movf	??_USBDeviceTasks^(0+128),w
  8861  0DD9  00AE               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER+2)^(0+128)
  8862  0DDA  3000               	movlw	0
  8863  0DDB  00AF               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)+3)
  8864  0DDC  3000               	movlw	0
  8865  0DDD  00B0               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)+4)
  8866  0DDE  319D  25F4  318D   	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
  8867  0DE1                     l6267:	
  8868                           ;usb_device.c: 998: else
  8869                           ;usb_device.c: 999: break;
  8870                           
  8871                           ;usb_device.c: 996: }
  8872                           ;usb_device.c: 997: }
  8873                           
  8874  0DE1  3001               	movlw	1
  8875  0DE2  0021               	movlb	1	; select bank1
  8876  0DE3  00BD               	movwf	??_USBDeviceTasks^(0+128)
  8877  0DE4  083D               	movf	??_USBDeviceTasks^(0+128),w
  8878  0DE5  07BF               	addwf	USBDeviceTasks@i^(0+128),f
  8879  0DE6                     L9:	
  8880  0DE6  3004               	movlw	4
  8881  0DE7  023F               	subwf	USBDeviceTasks@i^(0+128),w
  8882  0DE8  1803               	btfsc	3,0
  8883  0DE9  2DED               	goto	l156
  8884                           
  8885                           ;usb_device.c: 965: {
  8886                           ;usb_device.c: 966: if(UIRbits.TRNIF)
  8887  0DEA  003D               	movlb	29	; select bank29
  8888  0DEB  1990               	btfsc	16,3	;volatile
  8889  0DEC  2DA3               	goto	l6249
  8890  0DED                     l156:	
  8891                           
  8892                           ;usb_device.c: 1000: }
  8893                           ;usb_device.c: 1001: }
  8894                           ;usb_device.c: 1003: PIR2bits.USBIF = 0;;
  8895  0DED  0020               	movlb	0	; select bank0
  8896  0DEE  1112               	bcf	18,2	;volatile
  8897  0DEF  0008               	return
  8898  0DF0                     __end_of_USBDeviceTasks:	
  8899                           
  8900                           	psect	text29
  8901  0788                     __ptext29:	
  8902 ;; *************** function _USBCtrlEPService *****************
  8903 ;; Defined at:
  8904 ;;		line 2523 in file "../USB/usb_device.c"
  8905 ;; Parameters:    Size  Location     Type
  8906 ;;		None
  8907 ;; Auto vars:     Size  Location     Type
  8908 ;;  setup_cnt       1   28[BANK1 ] unsigned char 
  8909 ;; Return value:  Size  Location     Type
  8910 ;;		None               void
  8911 ;; Registers used:
  8912 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  8913 ;; Tracked objects:
  8914 ;;		On entry : 0/0
  8915 ;;		On exit  : 0/0
  8916 ;;		Unchanged: 0/0
  8917 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8918 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8919 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  8920 ;;      Temps:          0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  8921 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  8922 ;;Total ram usage:        4 bytes
  8923 ;; Hardware stack levels used:    1
  8924 ;; Hardware stack levels required when called:   11
  8925 ;; This function calls:
  8926 ;;		_USBCtrlTrfSetupHandler
  8927 ;;		_USBCtrlTrfOutHandler
  8928 ;;		_USBCtrlTrfInHandler
  8929 ;; This function is called by:
  8930 ;;		_USBDeviceTasks
  8931 ;; This function uses a non-reentrant model
  8932 ;;
  8933                           
  8934                           
  8935                           ;psect for function _USBCtrlEPService
  8936  0788                     _USBCtrlEPService:	
  8937                           
  8938                           ;usb_device.c: 2528: USBStatusStageTimeoutCounter = (BYTE)40;
  8939                           
  8940                           ;incstack = 0
  8941                           ; Regs used in _USBCtrlEPService: [allreg]
  8942  0788  3028               	movlw	40
  8943  0789  0021               	movlb	1	; select bank1
  8944  078A  00B9               	movwf	??_USBCtrlEPService^(0+128)
  8945  078B  0839               	movf	??_USBCtrlEPService^(0+128),w
  8946  078C  0022               	movlb	2	; select bank2
  8947  078D  00EC               	movwf	_USBStatusStageTimeoutCounter^(0+256)
  8948                           
  8949                           ;usb_device.c: 2532: if((USTATcopy.Val & ~0x02) == 0x00)
  8950  078E  0021               	movlb	1	; select bank1
  8951  078F  086E               	movf	_USTATcopy^(0+128),w
  8952  0790  39FD               	andlw	253
  8953  0791  1D03               	btfss	3,2
  8954  0792  2FF1               	goto	l6349
  8955                           
  8956                           ;usb_device.c: 2533: {
  8957                           ;usb_device.c: 2536: pBDTEntryEP0OutCurrent = (volatile BDT_ENTRY*)&BDT[(USTATcopy.Val &
      +                           0x7E)>>1];
  8958  0793  366E               	lsrf	_USTATcopy^(0+128),w
  8959  0794  393F               	andlw	63
  8960  0795  00B9               	movwf	??_USBCtrlEPService^(0+128)
  8961  0796  3001               	movlw	1
  8962  0797                     u6785:	
  8963  0797  35B9               	lslf	??_USBCtrlEPService^(0+128),f
  8964  0798  3EFF               	addlw	-1
  8965  0799  1D03               	skipz
  8966  079A  2F97               	goto	u6785
  8967  079B  3539               	lslf	??_USBCtrlEPService^(0+128),w
  8968  079C  3E20               	addlw	32
  8969  079D  00BA               	movwf	(??_USBCtrlEPService+1)^(0+128)
  8970  079E  083A               	movf	(??_USBCtrlEPService+1)^(0+128),w
  8971  079F  00E6               	movwf	_pBDTEntryEP0OutCurrent^(0+128)
  8972                           
  8973                           ;usb_device.c: 2544: pBDTEntryEP0OutNext = pBDTEntryEP0OutCurrent;
  8974  07A0  0866               	movf	_pBDTEntryEP0OutCurrent^(0+128),w
  8975  07A1  00B9               	movwf	??_USBCtrlEPService^(0+128)
  8976  07A2  0839               	movf	??_USBCtrlEPService^(0+128),w
  8977  07A3  0020               	movlb	0	; select bank0
  8978  07A4  00EA               	movwf	_pBDTEntryEP0OutNext
  8979                           
  8980                           ;usb_device.c: 2546: ((BYTE_VAL*)&pBDTEntryEP0OutNext)->Val ^= 0x0004;
  8981  07A5  3004               	movlw	4
  8982  07A6  0021               	movlb	1	; select bank1
  8983  07A7  00B9               	movwf	??_USBCtrlEPService^(0+128)
  8984  07A8  0839               	movf	??_USBCtrlEPService^(0+128),w
  8985  07A9  0020               	movlb	0	; select bank0
  8986  07AA  06EA               	xorwf	_pBDTEntryEP0OutNext,f
  8987                           
  8988                           ;usb_device.c: 2549: if(pBDTEntryEP0OutCurrent->STAT.PID == 0xD)
  8989  07AB  0021               	movlb	1	; select bank1
  8990  07AC  0866               	movf	_pBDTEntryEP0OutCurrent^(0+128),w
  8991  07AD  0086               	movwf	6
  8992  07AE  0187               	clrf	7
  8993  07AF  0C01               	rrf	1,w
  8994  07B0  0C89               	rrf	9,f
  8995  07B1  390F               	andlw	15
  8996  07B2  3A0D               	xorlw	13
  8997  07B3  1D03               	skipz
  8998  07B4  2FEE               	goto	l6347
  8999                           
  9000                           ;usb_device.c: 2550: {
  9001                           ;usb_device.c: 2551: unsigned char setup_cnt;
  9002                           ;usb_device.c: 2557: for(setup_cnt = 0; setup_cnt < 8u; setup_cnt++)
  9003  07B5  01BC               	clrf	USBCtrlEPService@setup_cnt^(0+128)
  9004  07B6  3008               	movlw	8
  9005  07B7  023C               	subwf	USBCtrlEPService@setup_cnt^(0+128),w
  9006  07B8  1803               	btfsc	3,0
  9007  07B9  2FDF               	goto	l6343
  9008  07BA                     l6337:	
  9009                           
  9010                           ;usb_device.c: 2558: {
  9011                           ;usb_device.c: 2559: *(BYTE*)((BYTE*)&SetupPkt + setup_cnt) = *(BYTE*)((void *)(pBDTEntr
      +                          yEP0OutCurrent->ADR));
  9012  07BA  0866               	movf	_pBDTEntryEP0OutCurrent^(0+128),w
  9013  07BB  3E02               	addlw	2
  9014  07BC  0086               	movwf	6
  9015  07BD  0187               	clrf	7
  9016  07BE  3F40               	moviw [0]fsr1
  9017  07BF  00B9               	movwf	??_USBCtrlEPService^(0+128)
  9018  07C0  3F41               	moviw [1]fsr1
  9019  07C1  00BA               	movwf	(??_USBCtrlEPService^(0+128)+1)
  9020  07C2  0839               	movf	??_USBCtrlEPService^(0+128),w
  9021  07C3  0086               	movwf	6
  9022  07C4  083A               	movf	(??_USBCtrlEPService+1)^(0+128),w
  9023  07C5  0087               	movwf	7
  9024  07C6  0801               	movf	1,w
  9025  07C7  00BB               	movwf	(??_USBCtrlEPService+2)^(0+128)
  9026  07C8  083C               	movf	USBCtrlEPService@setup_cnt^(0+128),w
  9027  07C9  3E40               	addlw	64
  9028  07CA  0086               	movwf	6
  9029  07CB  0187               	clrf	7
  9030  07CC  083B               	movf	(??_USBCtrlEPService+2)^(0+128),w
  9031  07CD  0081               	movwf	1
  9032                           
  9033                           ;usb_device.c: 2560: pBDTEntryEP0OutCurrent->ADR++;
  9034  07CE  0866               	movf	_pBDTEntryEP0OutCurrent^(0+128),w
  9035  07CF  3E02               	addlw	2
  9036  07D0  0086               	movwf	6
  9037  07D1  0187               	clrf	7
  9038  07D2  3001               	movlw	1
  9039  07D3  0781               	addwf	1,f
  9040  07D4  3141               	addfsr 1,1
  9041  07D5  1803               	skipnc
  9042  07D6  0A81               	incf	1,f
  9043  07D7  3001               	movlw	1
  9044  07D8  00B9               	movwf	??_USBCtrlEPService^(0+128)
  9045  07D9  0839               	movf	??_USBCtrlEPService^(0+128),w
  9046  07DA  07BC               	addwf	USBCtrlEPService@setup_cnt^(0+128),f
  9047  07DB  3008               	movlw	8
  9048  07DC  023C               	subwf	USBCtrlEPService@setup_cnt^(0+128),w
  9049  07DD  1C03               	skipc
  9050  07DE  2FBA               	goto	l6337
  9051  07DF                     l6343:	
  9052                           
  9053                           ;usb_device.c: 2561: }
  9054                           ;usb_device.c: 2562: pBDTEntryEP0OutCurrent->ADR = (((WORD)(&SetupPkt))& 0x7FFF);
  9055  07DF  3040               	movlw	64
  9056  07E0  00B9               	movwf	??_USBCtrlEPService^(0+128)
  9057  07E1  3000               	movlw	0
  9058  07E2  00BA               	movwf	(??_USBCtrlEPService^(0+128)+1)
  9059  07E3  0866               	movf	_pBDTEntryEP0OutCurrent^(0+128),w
  9060  07E4  3E02               	addlw	2
  9061  07E5  0086               	movwf	6
  9062  07E6  0187               	clrf	7
  9063  07E7  0839               	movf	??_USBCtrlEPService^(0+128),w
  9064  07E8  3FC0               	movwi [0]fsr1
  9065  07E9  083A               	movf	(??_USBCtrlEPService+1)^(0+128),w
  9066  07EA  3FC1               	movwi [1]fsr1
  9067                           
  9068                           ;usb_device.c: 2565: USBCtrlTrfSetupHandler();
  9069  07EB  319E  2633         	fcall	_USBCtrlTrfSetupHandler
  9070                           
  9071                           ;usb_device.c: 2566: }
  9072  07ED  0008               	return
  9073  07EE                     l6347:	
  9074                           
  9075                           ;usb_device.c: 2567: else
  9076                           ;usb_device.c: 2568: {
  9077                           ;usb_device.c: 2570: USBCtrlTrfOutHandler();
  9078  07EE  319D  258A         	fcall	_USBCtrlTrfOutHandler
  9079                           
  9080                           ;usb_device.c: 2571: }
  9081                           ;usb_device.c: 2572: }
  9082  07F0  0008               	return
  9083  07F1                     l6349:	
  9084                           
  9085                           ;usb_device.c: 2573: else if((USTATcopy.Val & ~0x02) == 0x04)
  9086  07F1  30FD               	movlw	253
  9087  07F2  0021               	movlb	1	; select bank1
  9088  07F3  056E               	andwf	_USTATcopy^(0+128),w
  9089  07F4  00B9               	movwf	??_USBCtrlEPService^(0+128)
  9090  07F5  0839               	movf	??_USBCtrlEPService^(0+128),w
  9091  07F6  3A04               	xorlw	4
  9092  07F7  1D03               	skipz
  9093  07F8  0008               	return
  9094                           
  9095                           ;usb_device.c: 2574: {
  9096                           ;usb_device.c: 2577: USBCtrlTrfInHandler();
  9097  07F9  3190  209B         	fcall	_USBCtrlTrfInHandler
  9098  07FB  0008               	return
  9099  07FC                     __end_of_USBCtrlEPService:	
  9100                           
  9101                           	psect	text30
  9102  109B                     __ptext30:	
  9103 ;; *************** function _USBCtrlTrfInHandler *****************
  9104 ;; Defined at:
  9105 ;;		line 2748 in file "../USB/usb_device.c"
  9106 ;; Parameters:    Size  Location     Type
  9107 ;;		None
  9108 ;; Auto vars:     Size  Location     Type
  9109 ;;  lastDTS         1   17[BANK0 ] unsigned char 
  9110 ;; Return value:  Size  Location     Type
  9111 ;;		None               void
  9112 ;; Registers used:
  9113 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9114 ;; Tracked objects:
  9115 ;;		On entry : 0/0
  9116 ;;		On exit  : 0/0
  9117 ;;		Unchanged: 0/0
  9118 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9119 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9120 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9121 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  9122 ;;      Totals:         0       1       2       0       0       0       0       0       0       0       0       0       
      +0       0
  9123 ;;Total ram usage:        3 bytes
  9124 ;; Hardware stack levels used:    1
  9125 ;; Hardware stack levels required when called:    5
  9126 ;; This function calls:
  9127 ;;		_USBCtrlTrfTxService
  9128 ;; This function is called by:
  9129 ;;		_USBCtrlEPService
  9130 ;; This function uses a non-reentrant model
  9131 ;;
  9132                           
  9133                           
  9134                           ;psect for function _USBCtrlTrfInHandler
  9135  109B                     _USBCtrlTrfInHandler:	
  9136                           
  9137                           ;usb_device.c: 2749: BYTE lastDTS;
  9138                           ;usb_device.c: 2751: lastDTS = pBDTEntryIn[0]->STAT.DTS;
  9139                           
  9140                           ;incstack = 0
  9141                           ; Regs used in _USBCtrlTrfInHandler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9142  109B  0021               	movlb	1	; select bank1
  9143  109C  0860               	movf	_pBDTEntryIn^(0+128),w
  9144  109D  0086               	movwf	6
  9145  109E  0187               	clrf	7
  9146  109F  3000               	movlw	0
  9147  10A0  1B01               	btfsc	1,6
  9148  10A1  3001               	movlw	1
  9149  10A2  0020               	movlb	0	; select bank0
  9150  10A3  00E1               	movwf	USBCtrlTrfInHandler@lastDTS
  9151                           
  9152                           ;usb_device.c: 2754: ((BYTE_VAL*)&pBDTEntryIn[0])->Val ^= 0x0004;
  9153  10A4  3004               	movlw	4
  9154  10A5  0021               	movlb	1	; select bank1
  9155  10A6  00A0               	movwf	??_USBCtrlTrfInHandler^(0+128)
  9156  10A7  0820               	movf	??_USBCtrlTrfInHandler^(0+128),w
  9157  10A8  06E0               	xorwf	_pBDTEntryIn^(0+128),f
  9158                           
  9159                           ;usb_device.c: 2759: if(USBDeviceState == ADR_PENDING_STATE)
  9160  10A9  0863               	movf	_USBDeviceState^(0+128),w
  9161  10AA  3A08               	xorlw	8
  9162  10AB  1D03               	skipz
  9163  10AC  28BB               	goto	l315
  9164                           
  9165                           ;usb_device.c: 2760: {
  9166                           ;usb_device.c: 2761: UADDR = SetupPkt.bDevADR.Val;
  9167  10AD  0020               	movlb	0	; select bank0
  9168  10AE  0842               	movf	66,w	;volatile
  9169  10AF  003D               	movlb	29	; select bank29
  9170  10B0  0096               	movwf	22	;volatile
  9171                           
  9172                           ;usb_device.c: 2762: if(UADDR != 0u)
  9173  10B1  0816               	movf	22,w	;volatile
  9174  10B2  1903               	btfsc	3,2
  9175  10B3  28B6               	goto	l4817
  9176                           
  9177                           ;usb_device.c: 2763: {
  9178                           ;usb_device.c: 2764: USBDeviceState=ADDRESS_STATE;
  9179  10B4  3010               	movlw	16
  9180  10B5  28B7               	goto	L10
  9181  10B6                     l4817:	
  9182                           ;usb_device.c: 2765: }
  9183                           
  9184                           
  9185                           ;usb_device.c: 2766: else
  9186                           ;usb_device.c: 2767: {
  9187                           ;usb_device.c: 2768: USBDeviceState=DEFAULT_STATE;
  9188  10B6  3004               	movlw	4
  9189  10B7                     L10:	
  9190  10B7  0021               	movlb	1	; select bank1
  9191  10B8  00A0               	movwf	??_USBCtrlTrfInHandler^(0+128)
  9192  10B9  0820               	movf	??_USBCtrlTrfInHandler^(0+128),w
  9193  10BA  00E3               	movwf	_USBDeviceState^(0+128)
  9194  10BB                     l315:	
  9195                           
  9196                           ;usb_device.c: 2769: }
  9197                           ;usb_device.c: 2770: }
  9198                           ;usb_device.c: 2773: if(controlTransferState == 1)
  9199  10BB  0020               	movlb	0	; select bank0
  9200  10BC  0869               	movf	_controlTransferState,w
  9201  10BD  3A01               	xorlw	1
  9202  10BE  1D03               	skipz
  9203  10BF  28F4               	goto	l318
  9204                           
  9205                           ;usb_device.c: 2774: {
  9206                           ;usb_device.c: 2775: pBDTEntryIn[0]->ADR = (((WORD)(CtrlTrfData))& 0x7FFF);
  9207  10C0  3048               	movlw	72
  9208  10C1  0021               	movlb	1	; select bank1
  9209  10C2  00A0               	movwf	??_USBCtrlTrfInHandler^(0+128)
  9210  10C3  3000               	movlw	0
  9211  10C4  00A1               	movwf	(??_USBCtrlTrfInHandler^(0+128)+1)
  9212  10C5  0860               	movf	_pBDTEntryIn^(0+128),w
  9213  10C6  3E02               	addlw	2
  9214  10C7  0086               	movwf	6
  9215  10C8  0187               	clrf	7
  9216  10C9  0820               	movf	??_USBCtrlTrfInHandler^(0+128),w
  9217  10CA  3FC0               	movwi [0]fsr1
  9218  10CB  0821               	movf	(??_USBCtrlTrfInHandler+1)^(0+128),w
  9219  10CC  3FC1               	movwi [1]fsr1
  9220                           
  9221                           ;usb_device.c: 2776: USBCtrlTrfTxService();
  9222  10CD  3194  24AE  3190   	fcall	_USBCtrlTrfTxService
  9223                           
  9224                           ;usb_device.c: 2782: if(shortPacketStatus == 2)
  9225  10D0  0020               	movlb	0	; select bank0
  9226  10D1  086D               	movf	_shortPacketStatus,w
  9227  10D2  3A02               	xorlw	2
  9228  10D3  1D03               	skipz
  9229  10D4  28DE               	goto	l4827
  9230                           
  9231                           ;usb_device.c: 2783: {
  9232                           ;usb_device.c: 2786: pBDTEntryIn[0]->STAT.Val = 0x80|0x04;
  9233  10D5  3084               	movlw	132
  9234  10D6  0021               	movlb	1	; select bank1
  9235  10D7  00A0               	movwf	??_USBCtrlTrfInHandler^(0+128)
  9236  10D8  0860               	movf	_pBDTEntryIn^(0+128),w
  9237  10D9  0086               	movwf	6
  9238  10DA  0187               	clrf	7
  9239  10DB  0820               	movf	??_USBCtrlTrfInHandler^(0+128),w
  9240  10DC  0081               	movwf	1
  9241                           
  9242                           ;usb_device.c: 2787: }
  9243  10DD  0008               	return
  9244  10DE                     l4827:	
  9245                           
  9246                           ;usb_device.c: 2788: else
  9247                           ;usb_device.c: 2789: {
  9248                           ;usb_device.c: 2790: if(lastDTS == 0)
  9249  10DE  0020               	movlb	0	; select bank0
  9250  10DF  08E1               	movf	USBCtrlTrfInHandler@lastDTS,f
  9251  10E0  1D03               	skipz
  9252  10E1  28EB               	goto	l4831
  9253                           
  9254                           ;usb_device.c: 2791: {
  9255                           ;usb_device.c: 2792: pBDTEntryIn[0]->STAT.Val = 0x80|0x40|(0x08 & 0x08);
  9256  10E2  30C8               	movlw	200
  9257  10E3  0021               	movlb	1	; select bank1
  9258  10E4  00A0               	movwf	??_USBCtrlTrfInHandler^(0+128)
  9259  10E5  0860               	movf	_pBDTEntryIn^(0+128),w
  9260  10E6  0086               	movwf	6
  9261  10E7  0187               	clrf	7
  9262  10E8  0820               	movf	??_USBCtrlTrfInHandler^(0+128),w
  9263  10E9  0081               	movwf	1
  9264                           
  9265                           ;usb_device.c: 2793: }
  9266  10EA  0008               	return
  9267  10EB                     l4831:	
  9268                           
  9269                           ;usb_device.c: 2794: else
  9270                           ;usb_device.c: 2795: {
  9271                           ;usb_device.c: 2796: pBDTEntryIn[0]->STAT.Val = 0x80|0x00|(0x08 & 0x08);
  9272  10EB  3088               	movlw	136
  9273  10EC  0021               	movlb	1	; select bank1
  9274  10ED  00A0               	movwf	??_USBCtrlTrfInHandler^(0+128)
  9275  10EE  0860               	movf	_pBDTEntryIn^(0+128),w
  9276  10EF  0086               	movwf	6
  9277  10F0  0187               	clrf	7
  9278  10F1  0820               	movf	??_USBCtrlTrfInHandler^(0+128),w
  9279  10F2  0081               	movwf	1
  9280                           
  9281                           ;usb_device.c: 2797: }
  9282                           ;usb_device.c: 2798: }
  9283                           ;usb_device.c: 2799: }
  9284  10F3  0008               	return
  9285  10F4                     l318:	
  9286                           
  9287                           ;usb_device.c: 2800: else
  9288                           ;usb_device.c: 2801: {
  9289                           ;usb_device.c: 2805: if(outPipes[0].info.bits.busy == 1)
  9290  10F4  0023               	movlb	3	; select bank3
  9291  10F5  1FC9               	btfss	(_outPipes^(0+384)+2),7
  9292  10F6  28FE               	goto	l4839
  9293                           
  9294                           ;usb_device.c: 2806: {
  9295                           ;usb_device.c: 2807: if(outPipes[0].pFunc != (0))
  9296  10F7  084C               	movf	(_outPipes+5)^(0+384),w
  9297  10F8  1903               	btfsc	3,2
  9298  10F9  28FD               	goto	l4837
  9299                           
  9300                           ;usb_device.c: 2808: {
  9301                           ;usb_device.c: 2809: outPipes[0].pFunc();
  9302  10FA  084C               	movf	(_outPipes+5)^(0+384),w
  9303  10FB  3190  289B         	ljmp	$	;if you get stuck here, you called an invalid pointer
  9304  10FD                     l4837:	
  9305                           
  9306                           ;usb_device.c: 2810: }
  9307                           ;usb_device.c: 2811: outPipes[0].info.bits.busy = 0;
  9308  10FD  13C9               	bcf	(_outPipes^(0+384)+2),7
  9309  10FE                     l4839:	
  9310                           
  9311                           ;usb_device.c: 2812: }
  9312                           ;usb_device.c: 2814: controlTransferState = 0;
  9313  10FE  0020               	movlb	0	; select bank0
  9314  10FF  01E9               	clrf	_controlTransferState
  9315  1100  0008               	return
  9316  1101                     __end_of_USBCtrlTrfInHandler:	
  9317                           
  9318                           	psect	text31
  9319  1D8A                     __ptext31:	
  9320 ;; *************** function _USBCtrlTrfOutHandler *****************
  9321 ;; Defined at:
  9322 ;;		line 2695 in file "../USB/usb_device.c"
  9323 ;; Parameters:    Size  Location     Type
  9324 ;;		None
  9325 ;; Auto vars:     Size  Location     Type
  9326 ;;		None
  9327 ;; Return value:  Size  Location     Type
  9328 ;;		None               void
  9329 ;; Registers used:
  9330 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9331 ;; Tracked objects:
  9332 ;;		On entry : 0/0
  9333 ;;		On exit  : 0/0
  9334 ;;		Unchanged: 0/0
  9335 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9336 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9337 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9338 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  9339 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  9340 ;;Total ram usage:        2 bytes
  9341 ;; Hardware stack levels used:    1
  9342 ;; Hardware stack levels required when called:    6
  9343 ;; This function calls:
  9344 ;;		_USBCtrlTrfRxService
  9345 ;; This function is called by:
  9346 ;;		_USBCtrlEPService
  9347 ;; This function uses a non-reentrant model
  9348 ;;
  9349                           
  9350                           
  9351                           ;psect for function _USBCtrlTrfOutHandler
  9352  1D8A                     _USBCtrlTrfOutHandler:	
  9353                           
  9354                           ;usb_device.c: 2696: if(controlTransferState == 2)
  9355                           
  9356                           ;incstack = 0
  9357                           ; Regs used in _USBCtrlTrfOutHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9358  1D8A  0020               	movlb	0	; select bank0
  9359  1D8B  0869               	movf	_controlTransferState,w
  9360  1D8C  3A02               	xorlw	2
  9361  1D8D  1D03               	skipz
  9362  1D8E  2D92               	goto	l4799
  9363                           
  9364                           ;usb_device.c: 2697: {
  9365                           ;usb_device.c: 2698: USBCtrlTrfRxService();
  9366  1D8F  318A  2234         	fcall	_USBCtrlTrfRxService
  9367                           
  9368                           ;usb_device.c: 2699: }
  9369  1D91  0008               	return
  9370  1D92                     l4799:	
  9371                           
  9372                           ;usb_device.c: 2700: else
  9373                           ;usb_device.c: 2701: {
  9374                           ;usb_device.c: 2704: controlTransferState = 0;
  9375  1D92  0020               	movlb	0	; select bank0
  9376  1D93  01E9               	clrf	_controlTransferState
  9377                           
  9378                           ;usb_device.c: 2711: if(BothEP0OutUOWNsSet == FALSE)
  9379  1D94  0022               	movlb	2	; select bank2
  9380  1D95  08DD               	movf	_BothEP0OutUOWNsSet^(0+256),f
  9381  1D96  1D03               	skipz
  9382  1D97  2DBA               	goto	l4805
  9383                           
  9384                           ;usb_device.c: 2712: {
  9385                           ;usb_device.c: 2713: pBDTEntryEP0OutNext->CNT = 8;
  9386  1D98  3008               	movlw	8
  9387  1D99  0021               	movlb	1	; select bank1
  9388  1D9A  00A2               	movwf	??_USBCtrlTrfOutHandler^(0+128)
  9389  1D9B  0020               	movlb	0	; select bank0
  9390  1D9C  0A6A               	incf	_pBDTEntryEP0OutNext,w
  9391  1D9D  0086               	movwf	6
  9392  1D9E  0187               	clrf	7
  9393  1D9F  0021               	movlb	1	; select bank1
  9394  1DA0  0822               	movf	??_USBCtrlTrfOutHandler^(0+128),w
  9395  1DA1  0081               	movwf	1
  9396                           
  9397                           ;usb_device.c: 2714: pBDTEntryEP0OutNext->ADR = (((WORD)(&SetupPkt))& 0x7FFF);
  9398  1DA2  3040               	movlw	64
  9399  1DA3  00A2               	movwf	??_USBCtrlTrfOutHandler^(0+128)
  9400  1DA4  3000               	movlw	0
  9401  1DA5  00A3               	movwf	(??_USBCtrlTrfOutHandler^(0+128)+1)
  9402  1DA6  0020               	movlb	0	; select bank0
  9403  1DA7  086A               	movf	_pBDTEntryEP0OutNext,w
  9404  1DA8  3E02               	addlw	2
  9405  1DA9  0086               	movwf	6
  9406  1DAA  0187               	clrf	7
  9407  1DAB  0021               	movlb	1	; select bank1
  9408  1DAC  0822               	movf	??_USBCtrlTrfOutHandler^(0+128),w
  9409  1DAD  3FC0               	movwi [0]fsr1
  9410  1DAE  0823               	movf	(??_USBCtrlTrfOutHandler+1)^(0+128),w
  9411  1DAF  3FC1               	movwi [1]fsr1
  9412                           
  9413                           ;usb_device.c: 2715: pBDTEntryEP0OutNext->STAT.Val = 0x80|0x00|(0x08 & 0x08)|0x04;
  9414  1DB0  308C               	movlw	140
  9415  1DB1  00A2               	movwf	??_USBCtrlTrfOutHandler^(0+128)
  9416  1DB2  0020               	movlb	0	; select bank0
  9417  1DB3  086A               	movf	_pBDTEntryEP0OutNext,w
  9418  1DB4  0086               	movwf	6
  9419  1DB5  0187               	clrf	7
  9420  1DB6  0021               	movlb	1	; select bank1
  9421  1DB7  0822               	movf	??_USBCtrlTrfOutHandler^(0+128),w
  9422  1DB8  0081               	movwf	1
  9423                           
  9424                           ;usb_device.c: 2716: }
  9425  1DB9  0008               	return
  9426  1DBA                     l4805:	
  9427                           
  9428                           ;usb_device.c: 2717: else
  9429                           ;usb_device.c: 2718: {
  9430                           ;usb_device.c: 2719: BothEP0OutUOWNsSet = FALSE;
  9431  1DBA  0022               	movlb	2	; select bank2
  9432  1DBB  01DD               	clrf	_BothEP0OutUOWNsSet^(0+256)
  9433  1DBC  0008               	return
  9434  1DBD                     __end_of_USBCtrlTrfOutHandler:	
  9435                           
  9436                           	psect	text32
  9437  0A34                     __ptext32:	
  9438 ;; *************** function _USBCtrlTrfRxService *****************
  9439 ;; Defined at:
  9440 ;;		line 2019 in file "../USB/usb_device.c"
  9441 ;; Parameters:    Size  Location     Type
  9442 ;;		None
  9443 ;; Auto vars:     Size  Location     Type
  9444 ;;  byteToRead      1    1[BANK1 ] unsigned char 
  9445 ;;  i               1    0[BANK1 ] unsigned char 
  9446 ;; Return value:  Size  Location     Type
  9447 ;;		None               void
  9448 ;; Registers used:
  9449 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9450 ;; Tracked objects:
  9451 ;;		On entry : 0/0
  9452 ;;		On exit  : 0/0
  9453 ;;		Unchanged: 0/0
  9454 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9455 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9456 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  9457 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9458 ;;      Totals:         0       2       2       0       0       0       0       0       0       0       0       0       
      +0       0
  9459 ;;Total ram usage:        4 bytes
  9460 ;; Hardware stack levels used:    1
  9461 ;; Hardware stack levels required when called:    5
  9462 ;; This function calls:
  9463 ;;		_USBCtrlEPAllowStatusStage
  9464 ;; This function is called by:
  9465 ;;		_USBCtrlTrfOutHandler
  9466 ;; This function uses a non-reentrant model
  9467 ;;
  9468                           
  9469                           
  9470                           ;psect for function _USBCtrlTrfRxService
  9471  0A34                     _USBCtrlTrfRxService:	
  9472                           
  9473                           ;usb_device.c: 2020: BYTE byteToRead;
  9474                           ;usb_device.c: 2021: BYTE i;
  9475                           ;usb_device.c: 2025: byteToRead = pBDTEntryEP0OutCurrent->CNT;
  9476                           
  9477                           ;incstack = 0
  9478                           ; Regs used in _USBCtrlTrfRxService: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9479  0A34  0021               	movlb	1	; select bank1
  9480  0A35  0866               	movf	_pBDTEntryEP0OutCurrent^(0+128),w
  9481  0A36  0086               	movwf	6
  9482  0A37  0187               	clrf	7
  9483  0A38  3F41               	moviw [1]fsr1
  9484  0A39  00A1               	movwf	USBCtrlTrfRxService@byteToRead^(0+128)
  9485                           
  9486                           ;usb_device.c: 2031: if(byteToRead > outPipes[0].wCount.Val)
  9487  0A3A  0821               	movf	USBCtrlTrfRxService@byteToRead^(0+128),w
  9488  0A3B  0020               	movlb	0	; select bank0
  9489  0A3C  00E0               	movwf	??_USBCtrlTrfRxService
  9490  0A3D  01E1               	clrf	??_USBCtrlTrfRxService+1
  9491  0A3E  0861               	movf	??_USBCtrlTrfRxService+1,w
  9492  0A3F  0023               	movlb	3	; select bank3
  9493  0A40  024B               	subwf	((_outPipes+1)^(0+384)+3),w
  9494  0A41  1D03               	skipz
  9495  0A42  2A47               	goto	u4095
  9496  0A43  0020               	movlb	0	; select bank0
  9497  0A44  0860               	movf	??_USBCtrlTrfRxService,w
  9498  0A45  0023               	movlb	3	; select bank3
  9499  0A46  024A               	subwf	(_outPipes^(0+384)+3),w
  9500  0A47                     u4095:	
  9501  0A47  1803               	skipnc
  9502  0A48  2A4F               	goto	l4623
  9503                           
  9504                           ;usb_device.c: 2032: {
  9505                           ;usb_device.c: 2033: byteToRead = outPipes[0].wCount.Val;
  9506  0A49  084A               	movf	(_outPipes^(0+384)+3),w
  9507  0A4A  0020               	movlb	0	; select bank0
  9508  0A4B  00E0               	movwf	??_USBCtrlTrfRxService
  9509  0A4C  0860               	movf	??_USBCtrlTrfRxService,w
  9510  0A4D  0021               	movlb	1	; select bank1
  9511  0A4E  00A1               	movwf	USBCtrlTrfRxService@byteToRead^(0+128)
  9512  0A4F                     l4623:	
  9513                           
  9514                           ;usb_device.c: 2034: }
  9515                           ;usb_device.c: 2036: outPipes[0].wCount.Val = outPipes[0].wCount.Val - byteToRead;
  9516  0A4F  3003               	movlw	3
  9517  0A50  3EC7               	addlw	_outPipes& (0+255)
  9518  0A51  0086               	movwf	6
  9519  0A52  3001               	movlw	1	; select bank3/4
  9520  0A53  0087               	movwf	7
  9521  0A54  0021               	movlb	1	; select bank1
  9522  0A55  0821               	movf	USBCtrlTrfRxService@byteToRead^(0+128),w
  9523  0A56  0020               	movlb	0	; select bank0
  9524  0A57  00E0               	movwf	??_USBCtrlTrfRxService
  9525  0A58  01E1               	clrf	??_USBCtrlTrfRxService+1
  9526  0A59  09E0               	comf	??_USBCtrlTrfRxService,f
  9527  0A5A  09E1               	comf	??_USBCtrlTrfRxService+1,f
  9528  0A5B  0AE0               	incf	??_USBCtrlTrfRxService,f
  9529  0A5C  1903               	skipnz
  9530  0A5D  0AE1               	incf	??_USBCtrlTrfRxService+1,f
  9531  0A5E  3F40               	moviw [0]fsr1
  9532  0A5F  0760               	addwf	??_USBCtrlTrfRxService,w
  9533  0A60  0023               	movlb	3	; select bank3
  9534  0A61  00CA               	movwf	(_outPipes^(0+384)+3)
  9535  0A62  3F41               	moviw [1]fsr1
  9536  0A63  0020               	movlb	0	; select bank0
  9537  0A64  3D61               	addwfc	??_USBCtrlTrfRxService+1,w
  9538  0A65  0023               	movlb	3	; select bank3
  9539  0A66  00CB               	movwf	(_outPipes^(0+384)+4)
  9540                           
  9541                           ;usb_device.c: 2040: for(i=0;i<byteToRead;i++)
  9542  0A67  0021               	movlb	1	; select bank1
  9543  0A68  01A0               	clrf	USBCtrlTrfRxService@i^(0+128)
  9544  0A69                     l4633:	
  9545  0A69  0821               	movf	USBCtrlTrfRxService@byteToRead^(0+128),w
  9546  0A6A  0220               	subwf	USBCtrlTrfRxService@i^(0+128),w
  9547  0A6B  1803               	btfsc	3,0
  9548  0A6C  2A87               	goto	l4635
  9549                           
  9550                           ;usb_device.c: 2041: {
  9551                           ;usb_device.c: 2042: *outPipes[0].pDst.bRam++ = CtrlTrfData[i];
  9552  0A6D  0820               	movf	USBCtrlTrfRxService@i^(0+128),w
  9553  0A6E  3E48               	addlw	72
  9554  0A6F  0086               	movwf	6
  9555  0A70  0187               	clrf	7
  9556  0A71  0801               	movf	1,w
  9557  0A72  0020               	movlb	0	; select bank0
  9558  0A73  00E0               	movwf	??_USBCtrlTrfRxService
  9559  0A74  0023               	movlb	3	; select bank3
  9560  0A75  0847               	movf	_outPipes^(0+384),w
  9561  0A76  0086               	movwf	6
  9562  0A77  0187               	clrf	7
  9563  0A78  0020               	movlb	0	; select bank0
  9564  0A79  0860               	movf	??_USBCtrlTrfRxService,w
  9565  0A7A  0081               	movwf	1
  9566  0A7B  3001               	movlw	1
  9567  0A7C  00E0               	movwf	??_USBCtrlTrfRxService
  9568  0A7D  0860               	movf	??_USBCtrlTrfRxService,w
  9569  0A7E  0023               	movlb	3	; select bank3
  9570  0A7F  07C7               	addwf	_outPipes^(0+384),f
  9571  0A80  3001               	movlw	1
  9572  0A81  0020               	movlb	0	; select bank0
  9573  0A82  00E0               	movwf	??_USBCtrlTrfRxService
  9574  0A83  0860               	movf	??_USBCtrlTrfRxService,w
  9575  0A84  0021               	movlb	1	; select bank1
  9576  0A85  07A0               	addwf	USBCtrlTrfRxService@i^(0+128),f
  9577  0A86  2A69               	goto	l4633
  9578  0A87                     l4635:	
  9579                           
  9580                           ;usb_device.c: 2043: }
  9581                           ;usb_device.c: 2047: if(outPipes[0].wCount.Val > 0)
  9582  0A87  3003               	movlw	3
  9583  0A88  3EC7               	addlw	_outPipes& (0+255)
  9584  0A89  0086               	movwf	6
  9585  0A8A  3001               	movlw	1	; select bank3/4
  9586  0A8B  0087               	movwf	7
  9587  0A8C  0016               	moviw fsr1++
  9588  0A8D  0401               	iorwf	1,w
  9589  0A8E  1903               	skipnz
  9590  0A8F  2ABC               	goto	l4643
  9591                           
  9592                           ;usb_device.c: 2048: {
  9593                           ;usb_device.c: 2049: pBDTEntryEP0OutNext->CNT = 8;
  9594  0A90  3008               	movlw	8
  9595  0A91  0020               	movlb	0	; select bank0
  9596  0A92  00E0               	movwf	??_USBCtrlTrfRxService
  9597  0A93  0A6A               	incf	_pBDTEntryEP0OutNext,w
  9598  0A94  0086               	movwf	6
  9599  0A95  0187               	clrf	7
  9600  0A96  0860               	movf	??_USBCtrlTrfRxService,w
  9601  0A97  0081               	movwf	1
  9602                           
  9603                           ;usb_device.c: 2050: pBDTEntryEP0OutNext->ADR = (((WORD)(&CtrlTrfData))& 0x7FFF);
  9604  0A98  3048               	movlw	72
  9605  0A99  00E0               	movwf	??_USBCtrlTrfRxService
  9606  0A9A  3000               	movlw	0
  9607  0A9B  00E1               	movwf	??_USBCtrlTrfRxService+1
  9608  0A9C  086A               	movf	_pBDTEntryEP0OutNext,w
  9609  0A9D  3E02               	addlw	2
  9610  0A9E  0086               	movwf	6
  9611  0A9F  0187               	clrf	7
  9612  0AA0  0860               	movf	??_USBCtrlTrfRxService,w
  9613  0AA1  3FC0               	movwi [0]fsr1
  9614  0AA2  0861               	movf	??_USBCtrlTrfRxService+1,w
  9615  0AA3  3FC1               	movwi [1]fsr1
  9616                           
  9617                           ;usb_device.c: 2051: if(pBDTEntryEP0OutCurrent->STAT.DTS == 0)
  9618  0AA4  0021               	movlb	1	; select bank1
  9619  0AA5  0866               	movf	_pBDTEntryEP0OutCurrent^(0+128),w
  9620  0AA6  0086               	movwf	6
  9621  0AA7  0187               	clrf	7
  9622  0AA8  1B01               	btfsc	1,6
  9623  0AA9  2AB3               	goto	l4641
  9624                           
  9625                           ;usb_device.c: 2052: {
  9626                           ;usb_device.c: 2053: pBDTEntryEP0OutNext->STAT.Val = 0x80|0x40|(0x08 & 0x08);
  9627  0AAA  30C8               	movlw	200
  9628  0AAB  0020               	movlb	0	; select bank0
  9629  0AAC  00E0               	movwf	??_USBCtrlTrfRxService
  9630  0AAD  086A               	movf	_pBDTEntryEP0OutNext,w
  9631  0AAE  0086               	movwf	6
  9632  0AAF  0187               	clrf	7
  9633  0AB0  0860               	movf	??_USBCtrlTrfRxService,w
  9634  0AB1  0081               	movwf	1
  9635                           
  9636                           ;usb_device.c: 2054: }
  9637  0AB2  0008               	return
  9638  0AB3                     l4641:	
  9639                           
  9640                           ;usb_device.c: 2055: else
  9641                           ;usb_device.c: 2056: {
  9642                           ;usb_device.c: 2057: pBDTEntryEP0OutNext->STAT.Val = 0x80|0x00|(0x08 & 0x08);
  9643  0AB3  3088               	movlw	136
  9644  0AB4  0020               	movlb	0	; select bank0
  9645  0AB5  00E0               	movwf	??_USBCtrlTrfRxService
  9646  0AB6  086A               	movf	_pBDTEntryEP0OutNext,w
  9647  0AB7  0086               	movwf	6
  9648  0AB8  0187               	clrf	7
  9649  0AB9  0860               	movf	??_USBCtrlTrfRxService,w
  9650  0ABA  0081               	movwf	1
  9651                           
  9652                           ;usb_device.c: 2058: }
  9653                           ;usb_device.c: 2059: }
  9654  0ABB  0008               	return
  9655  0ABC                     l4643:	
  9656                           
  9657                           ;usb_device.c: 2060: else
  9658                           ;usb_device.c: 2061: {
  9659                           ;usb_device.c: 2065: pBDTEntryEP0OutNext->CNT = 8;
  9660  0ABC  3008               	movlw	8
  9661  0ABD  0020               	movlb	0	; select bank0
  9662  0ABE  00E0               	movwf	??_USBCtrlTrfRxService
  9663  0ABF  0A6A               	incf	_pBDTEntryEP0OutNext,w
  9664  0AC0  0086               	movwf	6
  9665  0AC1  0187               	clrf	7
  9666  0AC2  0860               	movf	??_USBCtrlTrfRxService,w
  9667  0AC3  0081               	movwf	1
  9668                           
  9669                           ;usb_device.c: 2066: pBDTEntryEP0OutNext->ADR = (((WORD)(&SetupPkt))& 0x7FFF);
  9670  0AC4  3040               	movlw	64
  9671  0AC5  00E0               	movwf	??_USBCtrlTrfRxService
  9672  0AC6  3000               	movlw	0
  9673  0AC7  00E1               	movwf	??_USBCtrlTrfRxService+1
  9674  0AC8  086A               	movf	_pBDTEntryEP0OutNext,w
  9675  0AC9  3E02               	addlw	2
  9676  0ACA  0086               	movwf	6
  9677  0ACB  0187               	clrf	7
  9678  0ACC  0860               	movf	??_USBCtrlTrfRxService,w
  9679  0ACD  3FC0               	movwi [0]fsr1
  9680  0ACE  0861               	movf	??_USBCtrlTrfRxService+1,w
  9681  0ACF  3FC1               	movwi [1]fsr1
  9682                           
  9683                           ;usb_device.c: 2070: pBDTEntryEP0OutNext->STAT.Val = 0x80|0x04;
  9684  0AD0  3084               	movlw	132
  9685  0AD1  00E0               	movwf	??_USBCtrlTrfRxService
  9686  0AD2  086A               	movf	_pBDTEntryEP0OutNext,w
  9687  0AD3  0086               	movwf	6
  9688  0AD4  0187               	clrf	7
  9689  0AD5  0860               	movf	??_USBCtrlTrfRxService,w
  9690  0AD6  0081               	movwf	1
  9691                           
  9692                           ;usb_device.c: 2077: if(outPipes[0].pFunc != (0))
  9693  0AD7  0023               	movlb	3	; select bank3
  9694  0AD8  084C               	movf	(_outPipes+5)^(0+384),w
  9695  0AD9  1903               	btfsc	3,2
  9696  0ADA  2ADE               	goto	l4649
  9697                           
  9698                           ;usb_device.c: 2078: {
  9699                           ;usb_device.c: 2084: outPipes[0].pFunc();
  9700  0ADB  084C               	movf	(_outPipes+5)^(0+384),w
  9701  0ADC  318A  2A34         	ljmp	$	;if you get stuck here, you called an invalid pointer
  9702  0ADE                     l4649:	
  9703                           
  9704                           ;usb_device.c: 2089: }
  9705                           ;usb_device.c: 2090: outPipes[0].info.bits.busy = 0;
  9706  0ADE  13C9               	bcf	(_outPipes^(0+384)+2),7
  9707                           
  9708                           ;usb_device.c: 2104: if(USBDeferStatusStagePacket == FALSE)
  9709  0ADF  0020               	movlb	0	; select bank0
  9710  0AE0  08E8               	movf	_USBDeferStatusStagePacket,f
  9711  0AE1  1D03               	skipz
  9712  0AE2  0008               	return
  9713                           
  9714                           ;usb_device.c: 2105: {
  9715                           ;usb_device.c: 2106: USBCtrlEPAllowStatusStage();
  9716  0AE3  3191  21D3         	fcall	_USBCtrlEPAllowStatusStage
  9717  0AE5  0008               	return
  9718  0AE6                     __end_of_USBCtrlTrfRxService:	
  9719                           
  9720                           	psect	text33
  9721  1E33                     __ptext33:	
  9722 ;; *************** function _USBCtrlTrfSetupHandler *****************
  9723 ;; Defined at:
  9724 ;;		line 2623 in file "../USB/usb_device.c"
  9725 ;; Parameters:    Size  Location     Type
  9726 ;;		None
  9727 ;; Auto vars:     Size  Location     Type
  9728 ;;		None
  9729 ;; Return value:  Size  Location     Type
  9730 ;;		None               void
  9731 ;; Registers used:
  9732 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  9733 ;; Tracked objects:
  9734 ;;		On entry : 0/0
  9735 ;;		On exit  : 0/0
  9736 ;;		Unchanged: 0/0
  9737 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9738 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9739 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9740 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  9741 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  9742 ;;Total ram usage:        1 bytes
  9743 ;; Hardware stack levels used:    1
  9744 ;; Hardware stack levels required when called:   10
  9745 ;; This function calls:
  9746 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
  9747 ;;		_USBCtrlEPServiceComplete
  9748 ;;		_USBCheckStdRequest
  9749 ;; This function is called by:
  9750 ;;		_USBCtrlEPService
  9751 ;; This function uses a non-reentrant model
  9752 ;;
  9753                           
  9754                           
  9755                           ;psect for function _USBCtrlTrfSetupHandler
  9756  1E33                     _USBCtrlTrfSetupHandler:	
  9757                           
  9758                           ;usb_device.c: 2627: shortPacketStatus = 0;
  9759                           
  9760                           ;incstack = 0
  9761                           ; Regs used in _USBCtrlTrfSetupHandler: [allreg]
  9762  1E33  0020               	movlb	0	; select bank0
  9763  1E34  01ED               	clrf	_shortPacketStatus
  9764                           
  9765                           ;usb_device.c: 2628: USBDeferStatusStagePacket = FALSE;
  9766  1E35  01E8               	clrf	_USBDeferStatusStagePacket	;volatile
  9767                           
  9768                           ;usb_device.c: 2629: USBDeferINDataStagePackets = FALSE;
  9769  1E36  0022               	movlb	2	; select bank2
  9770  1E37  01E6               	clrf	_USBDeferINDataStagePackets^(0+256)	;volatile
  9771                           
  9772                           ;usb_device.c: 2630: USBDeferOUTDataStagePackets = FALSE;
  9773  1E38  01E7               	clrf	_USBDeferOUTDataStagePackets^(0+256)	;volatile
  9774                           
  9775                           ;usb_device.c: 2631: BothEP0OutUOWNsSet = FALSE;
  9776  1E39  01DD               	clrf	_BothEP0OutUOWNsSet^(0+256)
  9777                           
  9778                           ;usb_device.c: 2632: controlTransferState = 0;
  9779  1E3A  0020               	movlb	0	; select bank0
  9780  1E3B  01E9               	clrf	_controlTransferState
  9781                           
  9782                           ;usb_device.c: 2641: pBDTEntryIn[0]->STAT.Val &= ~(0x80);
  9783  1E3C  307F               	movlw	127
  9784  1E3D  0021               	movlb	1	; select bank1
  9785  1E3E  00B8               	movwf	??_USBCtrlTrfSetupHandler^(0+128)
  9786  1E3F  0860               	movf	_pBDTEntryIn^(0+128),w
  9787  1E40  0086               	movwf	6
  9788  1E41  0187               	clrf	7
  9789  1E42  0838               	movf	??_USBCtrlTrfSetupHandler^(0+128),w
  9790  1E43  0581               	andwf	1,f
  9791                           
  9792                           ;usb_device.c: 2642: ((BYTE_VAL*)&pBDTEntryIn[0])->Val ^= 0x0004;
  9793  1E44  3004               	movlw	4
  9794  1E45  00B8               	movwf	??_USBCtrlTrfSetupHandler^(0+128)
  9795  1E46  0838               	movf	??_USBCtrlTrfSetupHandler^(0+128),w
  9796  1E47  06E0               	xorwf	_pBDTEntryIn^(0+128),f
  9797                           
  9798                           ;usb_device.c: 2643: pBDTEntryIn[0]->STAT.Val &= ~(0x80);
  9799  1E48  307F               	movlw	127
  9800  1E49  00B8               	movwf	??_USBCtrlTrfSetupHandler^(0+128)
  9801  1E4A  0860               	movf	_pBDTEntryIn^(0+128),w
  9802  1E4B  0086               	movwf	6
  9803  1E4C  0187               	clrf	7
  9804  1E4D  0838               	movf	??_USBCtrlTrfSetupHandler^(0+128),w
  9805  1E4E  0581               	andwf	1,f
  9806                           
  9807                           ;usb_device.c: 2644: ((BYTE_VAL*)&pBDTEntryIn[0])->Val ^= 0x0004;
  9808  1E4F  3004               	movlw	4
  9809  1E50  00B8               	movwf	??_USBCtrlTrfSetupHandler^(0+128)
  9810  1E51  0838               	movf	??_USBCtrlTrfSetupHandler^(0+128),w
  9811  1E52  06E0               	xorwf	_pBDTEntryIn^(0+128),f
  9812                           
  9813                           ;usb_device.c: 2645: pBDTEntryEP0OutNext->STAT.Val &= ~(0x80);
  9814  1E53  307F               	movlw	127
  9815  1E54  00B8               	movwf	??_USBCtrlTrfSetupHandler^(0+128)
  9816  1E55  0020               	movlb	0	; select bank0
  9817  1E56  086A               	movf	_pBDTEntryEP0OutNext,w
  9818  1E57  0086               	movwf	6
  9819  1E58  0187               	clrf	7
  9820  1E59  0021               	movlb	1	; select bank1
  9821  1E5A  0838               	movf	??_USBCtrlTrfSetupHandler^(0+128),w
  9822  1E5B  0581               	andwf	1,f
  9823                           
  9824                           ;usb_device.c: 2647: inPipes[0].info.Val = 0;
  9825  1E5C  01E9               	clrf	(_inPipes^(0+128)+2)
  9826                           
  9827                           ;usb_device.c: 2648: inPipes[0].wCount.Val = 0;
  9828  1E5D  01EA               	clrf	(_inPipes^(0+128)+3)
  9829  1E5E  01EB               	clrf	((_inPipes+1)^(0+128)+3)
  9830                           
  9831                           ;usb_device.c: 2649: outPipes[0].info.Val = 0;
  9832  1E5F  0023               	movlb	3	; select bank3
  9833  1E60  01C9               	clrf	(_outPipes^(0+384)+2)
  9834                           
  9835                           ;usb_device.c: 2650: outPipes[0].wCount.Val = 0;
  9836  1E61  01CA               	clrf	(_outPipes^(0+384)+3)
  9837  1E62  01CB               	clrf	((_outPipes+1)^(0+384)+3)
  9838                           
  9839                           ;usb_device.c: 2656: USBCheckStdRequest();
  9840  1E63  3190  2042  319E   	fcall	_USBCheckStdRequest
  9841                           
  9842                           ;usb_device.c: 2657: USER_USB_CALLBACK_EVENT_HANDLER(EVENT_EP0_REQUEST,0,0);
  9843  1E66  3003               	movlw	3
  9844  1E67  0021               	movlb	1	; select bank1
  9845  1E68  00AC               	movwf	?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)
  9846  1E69  3000               	movlw	0
  9847  1E6A  00AD               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)+1)
  9848  1E6B  01AE               	clrf	(?_USER_USB_CALLBACK_EVENT_HANDLER+2)^(0+128)
  9849  1E6C  3000               	movlw	0
  9850  1E6D  00AF               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)+3)
  9851  1E6E  3000               	movlw	0
  9852  1E6F  00B0               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)+4)
  9853  1E70  319D  25F4  319E   	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
  9854                           
  9855                           ;usb_device.c: 2670: USBCtrlEPServiceComplete();
  9856  1E73  3195  25B9         	fcall	_USBCtrlEPServiceComplete
  9857  1E75  0008               	return
  9858  1E76                     __end_of_USBCtrlTrfSetupHandler:	
  9859                           
  9860                           	psect	text34
  9861  1042                     __ptext34:	
  9862 ;; *************** function _USBCheckStdRequest *****************
  9863 ;; Defined at:
  9864 ;;		line 2839 in file "../USB/usb_device.c"
  9865 ;; Parameters:    Size  Location     Type
  9866 ;;		None
  9867 ;; Auto vars:     Size  Location     Type
  9868 ;;		None
  9869 ;; Return value:  Size  Location     Type
  9870 ;;		None               void
  9871 ;; Registers used:
  9872 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  9873 ;; Tracked objects:
  9874 ;;		On entry : 0/0
  9875 ;;		On exit  : 0/0
  9876 ;;		Unchanged: 0/0
  9877 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9878 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9879 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9880 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  9881 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  9882 ;;Total ram usage:        1 bytes
  9883 ;; Hardware stack levels used:    1
  9884 ;; Hardware stack levels required when called:    9
  9885 ;; This function calls:
  9886 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
  9887 ;;		_USBStdSetCfgHandler
  9888 ;;		_USBStdGetDscHandler
  9889 ;;		_USBStdGetStatusHandler
  9890 ;;		_USBStdFeatureReqHandler
  9891 ;; This function is called by:
  9892 ;;		_USBCtrlTrfSetupHandler
  9893 ;; This function uses a non-reentrant model
  9894 ;;
  9895                           
  9896                           
  9897                           ;psect for function _USBCheckStdRequest
  9898  1042                     _USBCheckStdRequest:	
  9899                           
  9900                           ;usb_device.c: 2840: if(SetupPkt.RequestType != (0x00>>5)) return;
  9901                           
  9902                           ;incstack = 0
  9903                           ; Regs used in _USBCheckStdRequest: [allreg]
  9904  1042  0020               	movlb	0	; select bank0
  9905  1043  0E40               	swapf	64,w	;volatile
  9906  1044  0C89               	rrf	9,f
  9907  1045  3903               	andlw	3
  9908  1046  3A00               	xorlw	0
  9909  1047  1D03               	btfss	3,2
  9910  1048  0008               	return
  9911  1049  288F               	goto	l6551
  9912  104A                     l332:	
  9913                           ;usb_device.c: 2843: {
  9914                           ;usb_device.c: 2844: case 5:
  9915                           
  9916                           ;usb_device.c: 2842: switch(SetupPkt.bRequest)
  9917                           
  9918                           
  9919                           ;usb_device.c: 2845: inPipes[0].info.bits.busy = 1;
  9920  104A  0021               	movlb	1	; select bank1
  9921  104B  17E9               	bsf	(_inPipes^(0+128)+2),7
  9922                           
  9923                           ;usb_device.c: 2846: USBDeviceState = ADR_PENDING_STATE;
  9924  104C  3008               	movlw	8
  9925  104D  00B7               	movwf	??_USBCheckStdRequest^(0+128)
  9926  104E  0837               	movf	??_USBCheckStdRequest^(0+128),w
  9927  104F  00E3               	movwf	_USBDeviceState^(0+128)
  9928                           
  9929                           ;usb_device.c: 2848: break;
  9930  1050  0008               	return
  9931  1051                     l6521:	
  9932                           ;usb_device.c: 2849: case 6:
  9933                           
  9934                           
  9935                           ;usb_device.c: 2850: USBStdGetDscHandler();
  9936  1051  3193  232C         	fcall	_USBStdGetDscHandler
  9937                           
  9938                           ;usb_device.c: 2851: break;
  9939  1053  0008               	return
  9940  1054                     l6523:	
  9941                           ;usb_device.c: 2852: case 9:
  9942                           
  9943                           
  9944                           ;usb_device.c: 2853: USBStdSetCfgHandler();
  9945  1054  3193  23AB         	fcall	_USBStdSetCfgHandler
  9946                           
  9947                           ;usb_device.c: 2854: break;
  9948  1056  0008               	return
  9949  1057                     l6525:	
  9950                           ;usb_device.c: 2855: case 8:
  9951                           
  9952                           
  9953                           ;usb_device.c: 2856: inPipes[0].pSrc.bRam = (BYTE*)&USBActiveConfiguration;
  9954  1057  30EC               	movlw	low _USBActiveConfiguration
  9955  1058  0021               	movlb	1	; select bank1
  9956  1059  00E7               	movwf	_inPipes^(0+128)
  9957  105A  3000               	movlw	high _USBActiveConfiguration
  9958  105B  00E8               	movwf	(_inPipes+1)^(0+128)
  9959                           
  9960                           ;usb_device.c: 2857: inPipes[0].info.bits.ctrl_trf_mem = 0x01;
  9961  105C  1469               	bsf	(_inPipes^(0+128)+2),0
  9962                           
  9963                           ;usb_device.c: 2858: inPipes[0].wCount.v[0] = 1;
  9964  105D  01EA               	clrf	(_inPipes^(0+128)+3)
  9965  105E  0AEA               	incf	(_inPipes^(0+128)+3),f
  9966                           
  9967                           ;usb_device.c: 2859: inPipes[0].info.bits.busy = 1;
  9968  105F  17E9               	bsf	(_inPipes^(0+128)+2),7
  9969                           
  9970                           ;usb_device.c: 2860: break;
  9971  1060  0008               	return
  9972  1061                     l6533:	
  9973                           ;usb_device.c: 2861: case 0:
  9974                           
  9975                           
  9976                           ;usb_device.c: 2862: USBStdGetStatusHandler();
  9977  1061  319F  2756         	fcall	_USBStdGetStatusHandler
  9978                           
  9979                           ;usb_device.c: 2863: break;
  9980  1063  0008               	return
  9981  1064                     l6535:	
  9982                           ;usb_device.c: 2864: case 1:
  9983                           
  9984                           
  9985                           ;usb_device.c: 2865: case 3:
  9986                           ;usb_device.c: 2866: USBStdFeatureReqHandler();
  9987  1064  318E  26E6         	fcall	_USBStdFeatureReqHandler
  9988                           
  9989                           ;usb_device.c: 2867: break;
  9990  1066  0008               	return
  9991  1067                     l6537:	
  9992                           ;usb_device.c: 2868: case 10:
  9993                           
  9994                           
  9995                           ;usb_device.c: 2869: inPipes[0].pSrc.bRam = (BYTE*)&USBAlternateInterface[SetupPkt.bIntf
      +                          ID];
  9996  1067  0020               	movlb	0	; select bank0
  9997  1068  0844               	movf	68,w	;volatile
  9998  1069  3EED               	addlw	_USBAlternateInterface& (0+255)
  9999  106A  0021               	movlb	1	; select bank1
 10000  106B  00E7               	movwf	_inPipes^(0+128)
 10001  106C  3000               	movlw	0
 10002  106D  00E8               	movwf	(_inPipes+1)^(0+128)
 10003                           
 10004                           ;usb_device.c: 2870: inPipes[0].info.bits.ctrl_trf_mem = 0x01;
 10005  106E  1469               	bsf	(_inPipes^(0+128)+2),0
 10006                           
 10007                           ;usb_device.c: 2871: inPipes[0].wCount.v[0] = 1;
 10008  106F  01EA               	clrf	(_inPipes^(0+128)+3)
 10009  1070  0AEA               	incf	(_inPipes^(0+128)+3),f
 10010                           
 10011                           ;usb_device.c: 2872: inPipes[0].info.bits.busy = 1;
 10012  1071  17E9               	bsf	(_inPipes^(0+128)+2),7
 10013                           
 10014                           ;usb_device.c: 2873: break;
 10015  1072  0008               	return
 10016  1073                     l341:	
 10017                           ;usb_device.c: 2874: case 11:
 10018                           
 10019                           
 10020                           ;usb_device.c: 2875: inPipes[0].info.bits.busy = 1;
 10021  1073  0021               	movlb	1	; select bank1
 10022  1074  17E9               	bsf	(_inPipes^(0+128)+2),7
 10023                           
 10024                           ;usb_device.c: 2876: USBAlternateInterface[SetupPkt.bIntfID] = SetupPkt.bAltID;
 10025  1075  0020               	movlb	0	; select bank0
 10026  1076  0842               	movf	66,w	;volatile
 10027  1077  0021               	movlb	1	; select bank1
 10028  1078  00B7               	movwf	??_USBCheckStdRequest^(0+128)
 10029  1079  0020               	movlb	0	; select bank0
 10030  107A  0844               	movf	68,w	;volatile
 10031  107B  3EED               	addlw	_USBAlternateInterface& (0+255)
 10032  107C  0086               	movwf	6
 10033  107D  0187               	clrf	7
 10034  107E  0021               	movlb	1	; select bank1
 10035  107F  0837               	movf	??_USBCheckStdRequest^(0+128),w
 10036  1080  0081               	movwf	1
 10037                           
 10038                           ;usb_device.c: 2877: break;
 10039  1081  0008               	return
 10040  1082                     l6547:	
 10041                           ;usb_device.c: 2878: case 7:
 10042                           
 10043                           
 10044                           ;usb_device.c: 2879: USER_USB_CALLBACK_EVENT_HANDLER(EVENT_SET_DESCRIPTOR,0,0);
 10045  1082  3002               	movlw	2
 10046  1083  0021               	movlb	1	; select bank1
 10047  1084  00AC               	movwf	?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)
 10048  1085  3000               	movlw	0
 10049  1086  00AD               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)+1)
 10050  1087  01AE               	clrf	(?_USER_USB_CALLBACK_EVENT_HANDLER+2)^(0+128)
 10051  1088  3000               	movlw	0
 10052  1089  00AF               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)+3)
 10053  108A  3000               	movlw	0
 10054  108B  00B0               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)+4)
 10055  108C  319D  25F4         	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
 10056                           
 10057                           ;usb_device.c: 2884: }
 10058                           
 10059                           ;usb_device.c: 2883: break;
 10060                           
 10061                           ;usb_device.c: 2882: default:
 10062                           
 10063                           ;usb_device.c: 2881: case 12:
 10064                           
 10065                           ;usb_device.c: 2880: break;
 10066  108E  0008               	return
 10067  108F                     l6551:	
 10068  108F  0020               	movlb	0	; select bank0
 10069  1090  0841               	movf	65,w	;volatile
 10070                           
 10071                           ; Switch size 1, requested type "space"
 10072                           ; Number of cases is 11, Range of values is 0 to 12
 10073                           ; switch strategies available:
 10074                           ; Name         Instructions Cycles
 10075                           ; direct_byte           32     6 (fixed)
 10076                           ; simple_byte           34    18 (average)
 10077                           ; jumptable            260     6 (fixed)
 10078                           ; rangetable            17     4 (fixed)
 10079                           ; spacedrange           31     6 (fixed)
 10080                           ; locatedrange          13     3 (fixed)
 10081                           ;	Chosen strategy is direct_byte
 10082  1091  0084               	movwf	4
 10083  1092  300D               	movlw	13
 10084  1093  0204               	subwf	4,w
 10085  1094  1803               	skipnc
 10086  1095  0008               	return
 10087  1096  3198               	movlp	high S7071
 10088  1097  3504               	lslf	4,w
 10089  1098  3E00               	addlw	low S7071
 10090  1099  0082               	movwf	2
 10091  109A                     l330:	
 10092  109A  0008               	return
 10093  109B                     __end_of_USBCheckStdRequest:	
 10094                           
 10095                           	psect	swtext1
 10096  1800                     __pswtext1:	
 10097  1800                     S7071:	
 10098  1800  3190  2861         	ljmp	l6533
 10099  1802  3190  2864         	ljmp	l6535
 10100  1804  3190  289A         	ljmp	l330
 10101  1806  3190  2864         	ljmp	l6535
 10102  1808  3190  289A         	ljmp	l330
 10103  180A  3190  284A         	ljmp	l332
 10104  180C  3190  2851         	ljmp	l6521
 10105  180E  3190  2882         	ljmp	l6547
 10106  1810  3190  2857         	ljmp	l6525
 10107  1812  3190  2854         	ljmp	l6523
 10108  1814  3190  2867         	ljmp	l6537
 10109  1816  3190  2873         	ljmp	l341
 10110  1818  3190  289A         	ljmp	l330
 10111                           
 10112                           	psect	text35
 10113  0EE6                     __ptext35:	
 10114 ;; *************** function _USBStdFeatureReqHandler *****************
 10115 ;; Defined at:
 10116 ;;		line 2907 in file "../USB/usb_device.c"
 10117 ;; Parameters:    Size  Location     Type
 10118 ;;		None
 10119 ;; Auto vars:     Size  Location     Type
 10120 ;;  pUEP            2   19[BANK1 ] PTR unsigned char 
 10121 ;;		 -> UEP0(1), 
 10122 ;;  p               1   22[BANK1 ] PTR struct __BDT
 10123 ;;		 -> NULL(0), BDT(32), 
 10124 ;;  current_ep_d    1   21[BANK1 ] struct .
 10125 ;; Return value:  Size  Location     Type
 10126 ;;		None               void
 10127 ;; Registers used:
 10128 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10129 ;; Tracked objects:
 10130 ;;		On entry : 0/0
 10131 ;;		On exit  : 0/0
 10132 ;;		Unchanged: 0/0
 10133 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10134 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10135 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
 10136 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
 10137 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
 10138 ;;Total ram usage:        6 bytes
 10139 ;; Hardware stack levels used:    1
 10140 ;; Hardware stack levels required when called:    8
 10141 ;; This function calls:
 10142 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 10143 ;; This function is called by:
 10144 ;;		_USBCheckStdRequest
 10145 ;; This function uses a non-reentrant model
 10146 ;;
 10147                           
 10148                           
 10149                           ;psect for function _USBStdFeatureReqHandler
 10150  0EE6                     _USBStdFeatureReqHandler:	
 10151                           
 10152                           ;usb_device.c: 2908: BDT_ENTRY *p;
 10153                           ;usb_device.c: 2909: EP_STATUS current_ep_data;
 10154                           ;usb_device.c: 2913: unsigned char* pUEP;
 10155                           ;usb_device.c: 2951: if((SetupPkt.bFeature == 1)&&
 10156                           ;usb_device.c: 2952: (SetupPkt.Recipient == (0x00)))
 10157                           
 10158                           ;incstack = 0
 10159                           ; Regs used in _USBStdFeatureReqHandler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10160  0EE6  0020               	movlb	0	; select bank0
 10161  0EE7  0842               	movf	66,w	;volatile
 10162  0EE8  3A01               	xorlw	1
 10163  0EE9  1D03               	skipz
 10164  0EEA  2EFD               	goto	l6569
 10165  0EEB  0840               	movf	64,w	;volatile
 10166  0EEC  391F               	andlw	31
 10167  0EED  3800               	iorlw	0
 10168  0EEE  1D03               	skipz
 10169  0EEF  2EFD               	goto	l6569
 10170                           
 10171                           ;usb_device.c: 2953: {
 10172                           ;usb_device.c: 2954: inPipes[0].info.bits.busy = 1;
 10173  0EF0  0021               	movlb	1	; select bank1
 10174  0EF1  17E9               	bsf	(_inPipes^(0+128)+2),7
 10175                           
 10176                           ;usb_device.c: 2955: if(SetupPkt.bRequest == 3)
 10177  0EF2  0020               	movlb	0	; select bank0
 10178  0EF3  0841               	movf	65,w	;volatile
 10179  0EF4  3A03               	xorlw	3
 10180  0EF5  1D03               	skipz
 10181  0EF6  2EFB               	goto	l6567
 10182                           
 10183                           ;usb_device.c: 2956: RemoteWakeup = TRUE;
 10184  0EF7  0022               	movlb	2	; select bank2
 10185  0EF8  01E1               	clrf	_RemoteWakeup^(0+256)
 10186  0EF9  0AE1               	incf	_RemoteWakeup^(0+256),f
 10187  0EFA  2EFD               	goto	l6569
 10188  0EFB                     l6567:	
 10189                           
 10190                           ;usb_device.c: 2957: else
 10191                           ;usb_device.c: 2958: RemoteWakeup = FALSE;
 10192  0EFB  0022               	movlb	2	; select bank2
 10193  0EFC  01E1               	clrf	_RemoteWakeup^(0+256)
 10194  0EFD                     l6569:	
 10195                           
 10196                           ;usb_device.c: 2959: }
 10197                           ;usb_device.c: 2962: if((SetupPkt.bFeature == 0)&&
 10198                           ;usb_device.c: 2963: (SetupPkt.Recipient == (0x02))&&
 10199                           ;usb_device.c: 2964: (SetupPkt.EPNum != 0) && (SetupPkt.EPNum <= 1)&&
 10200                           ;usb_device.c: 2965: (USBDeviceState == CONFIGURED_STATE))
 10201  0EFD  0020               	movlb	0	; select bank0
 10202  0EFE  0842               	movf	66,w
 10203  0EFF  1D03               	skipz
 10204  0F00  0008               	return
 10205  0F01  0840               	movf	64,w	;volatile
 10206  0F02  391F               	andlw	31
 10207  0F03  3A02               	xorlw	2
 10208  0F04  1D03               	skipz
 10209  0F05  0008               	return
 10210  0F06  0844               	movf	68,w	;volatile
 10211  0F07  390F               	andlw	15
 10212  0F08  3A00               	xorlw	0
 10213  0F09  1903               	skipnz
 10214  0F0A  0008               	return
 10215  0F0B  0844               	movf	68,w	;volatile
 10216  0F0C  390F               	andlw	15
 10217  0F0D  0021               	movlb	1	; select bank1
 10218  0F0E  00B1               	movwf	??_USBStdFeatureReqHandler^(0+128)
 10219  0F0F  3002               	movlw	2
 10220  0F10  0231               	subwf	??_USBStdFeatureReqHandler^(0+128),w
 10221  0F11  1803               	skipnc
 10222  0F12  0008               	return
 10223  0F13  0863               	movf	_USBDeviceState^(0+128),w
 10224  0F14  3A20               	xorlw	32
 10225  0F15  1D03               	skipz
 10226  0F16  0008               	return
 10227                           
 10228                           ;usb_device.c: 2966: {
 10229                           ;usb_device.c: 2969: inPipes[0].info.bits.busy = 1;
 10230  0F17  17E9               	bsf	(_inPipes^(0+128)+2),7
 10231                           
 10232                           ;usb_device.c: 2972: if(SetupPkt.EPDir == 0)
 10233  0F18  0020               	movlb	0	; select bank0
 10234  0F19  1BC4               	btfsc	68,7	;volatile
 10235  0F1A  2F2B               	goto	l6583
 10236                           
 10237                           ;usb_device.c: 2973: {
 10238                           ;usb_device.c: 2974: p = (BDT_ENTRY*)pBDTEntryOut[SetupPkt.EPNum];
 10239  0F1B  0844               	movf	68,w	;volatile
 10240  0F1C  390F               	andlw	15
 10241  0F1D  3E59               	addlw	_pBDTEntryOut& (0+255)
 10242  0F1E  0086               	movwf	6
 10243  0F1F  3001               	movlw	1	; select bank2/3
 10244  0F20  0087               	movwf	7
 10245  0F21  0801               	movf	1,w
 10246  0F22  0021               	movlb	1	; select bank1
 10247  0F23  00B1               	movwf	??_USBStdFeatureReqHandler^(0+128)
 10248  0F24  0831               	movf	??_USBStdFeatureReqHandler^(0+128),w
 10249  0F25  00B6               	movwf	USBStdFeatureReqHandler@p^(0+128)
 10250                           
 10251                           ;usb_device.c: 2975: current_ep_data.Val = ep_data_out[SetupPkt.EPNum].Val;
 10252  0F26  0020               	movlb	0	; select bank0
 10253  0F27  0844               	movf	68,w	;volatile
 10254  0F28  390F               	andlw	15
 10255  0F29  3ED3               	addlw	_ep_data_out& (0+255)
 10256  0F2A  2F3A               	goto	L11
 10257  0F2B                     l6583:	
 10258                           ;usb_device.c: 2976: }
 10259                           
 10260                           
 10261                           ;usb_device.c: 2977: else
 10262                           ;usb_device.c: 2978: {
 10263                           ;usb_device.c: 2979: p = (BDT_ENTRY*)pBDTEntryIn[SetupPkt.EPNum];
 10264  0F2B  0020               	movlb	0	; select bank0
 10265  0F2C  0844               	movf	68,w	;volatile
 10266  0F2D  390F               	andlw	15
 10267  0F2E  3EE0               	addlw	_pBDTEntryIn& (0+255)
 10268  0F2F  0086               	movwf	6
 10269  0F30  0187               	clrf	7
 10270  0F31  0801               	movf	1,w
 10271  0F32  0021               	movlb	1	; select bank1
 10272  0F33  00B1               	movwf	??_USBStdFeatureReqHandler^(0+128)
 10273  0F34  0831               	movf	??_USBStdFeatureReqHandler^(0+128),w
 10274  0F35  00B6               	movwf	USBStdFeatureReqHandler@p^(0+128)
 10275                           
 10276                           ;usb_device.c: 2980: current_ep_data.Val = ep_data_in[SetupPkt.EPNum].Val;
 10277  0F36  0020               	movlb	0	; select bank0
 10278  0F37  0844               	movf	68,w	;volatile
 10279  0F38  390F               	andlw	15
 10280  0F39  3ED1               	addlw	_ep_data_in& (0+255)
 10281  0F3A                     L11:	
 10282  0F3A  0086               	movwf	6
 10283  0F3B  3001               	movlw	1	; select bank3/4
 10284  0F3C  0087               	movwf	7
 10285  0F3D  0801               	movf	1,w
 10286  0F3E  0021               	movlb	1	; select bank1
 10287  0F3F  00B1               	movwf	??_USBStdFeatureReqHandler^(0+128)
 10288  0F40  0831               	movf	??_USBStdFeatureReqHandler^(0+128),w
 10289  0F41  00B5               	movwf	USBStdFeatureReqHandler@current_ep_data^(0+128)
 10290                           
 10291                           ;usb_device.c: 2981: }
 10292                           ;usb_device.c: 2987: if(current_ep_data.bits.ping_pong_state == 0)
 10293  0F42  1835               	btfsc	USBStdFeatureReqHandler@current_ep_data^(0+128),0
 10294  0F43  2F49               	goto	l353
 10295                           
 10296                           ;usb_device.c: 2988: {
 10297                           ;usb_device.c: 2989: {((BYTE_VAL*)&p)->Val &= ~0x0004;};
 10298  0F44  30FB               	movlw	251
 10299  0F45  00B1               	movwf	??_USBStdFeatureReqHandler^(0+128)
 10300  0F46  0831               	movf	??_USBStdFeatureReqHandler^(0+128),w
 10301  0F47  05B6               	andwf	USBStdFeatureReqHandler@p^(0+128),f
 10302                           
 10303                           ;usb_device.c: 2990: }
 10304  0F48  2F4A               	goto	l354
 10305  0F49                     l353:	
 10306                           
 10307                           ;usb_device.c: 2991: else
 10308                           ;usb_device.c: 2992: {
 10309                           ;usb_device.c: 2993: {((BYTE_VAL*)&p)->Val |= 0x0004;};
 10310  0F49  1536               	bsf	USBStdFeatureReqHandler@p^(0+128),2
 10311  0F4A                     l354:	
 10312                           
 10313                           ;usb_device.c: 2994: }
 10314                           ;usb_device.c: 2999: if(SetupPkt.EPDir == 0)
 10315  0F4A  0020               	movlb	0	; select bank0
 10316  0F4B  1BC4               	btfsc	68,7	;volatile
 10317  0F4C  2F58               	goto	l6591
 10318                           
 10319                           ;usb_device.c: 3000: {
 10320                           ;usb_device.c: 3001: pBDTEntryOut[SetupPkt.EPNum] = (volatile BDT_ENTRY *)p;
 10321  0F4D  0021               	movlb	1	; select bank1
 10322  0F4E  0836               	movf	USBStdFeatureReqHandler@p^(0+128),w
 10323  0F4F  00B1               	movwf	??_USBStdFeatureReqHandler^(0+128)
 10324  0F50  0020               	movlb	0	; select bank0
 10325  0F51  0844               	movf	68,w	;volatile
 10326  0F52  390F               	andlw	15
 10327  0F53  3E59               	addlw	_pBDTEntryOut& (0+255)
 10328  0F54  0086               	movwf	6
 10329  0F55  3001               	movlw	1	; select bank2/3
 10330  0F56  0087               	movwf	7
 10331  0F57  2F61               	goto	L12
 10332  0F58                     l6591:	
 10333                           ;usb_device.c: 3002: }
 10334                           
 10335                           
 10336                           ;usb_device.c: 3003: else
 10337                           ;usb_device.c: 3004: {
 10338                           ;usb_device.c: 3005: pBDTEntryIn[SetupPkt.EPNum] = (volatile BDT_ENTRY *)p;
 10339  0F58  0021               	movlb	1	; select bank1
 10340  0F59  0836               	movf	USBStdFeatureReqHandler@p^(0+128),w
 10341  0F5A  00B1               	movwf	??_USBStdFeatureReqHandler^(0+128)
 10342  0F5B  0020               	movlb	0	; select bank0
 10343  0F5C  0844               	movf	68,w	;volatile
 10344  0F5D  390F               	andlw	15
 10345  0F5E  3EE0               	addlw	_pBDTEntryIn& (0+255)
 10346  0F5F  0086               	movwf	6
 10347  0F60  0187               	clrf	7
 10348  0F61                     L12:	
 10349  0F61  0021               	movlb	1	; select bank1
 10350  0F62  0831               	movf	??_USBStdFeatureReqHandler^(0+128),w
 10351  0F63  0081               	movwf	1
 10352                           
 10353                           ;usb_device.c: 3006: }
 10354                           ;usb_device.c: 3009: if(SetupPkt.bRequest == 3)
 10355  0F64  0020               	movlb	0	; select bank0
 10356  0F65  0841               	movf	65,w	;volatile
 10357  0F66  3A03               	xorlw	3
 10358  0F67  1D03               	skipz
 10359  0F68  2F86               	goto	l6603
 10360                           
 10361                           ;usb_device.c: 3010: {
 10362                           ;usb_device.c: 3011: if(p->STAT.UOWN == 1)
 10363  0F69  0021               	movlb	1	; select bank1
 10364  0F6A  0836               	movf	USBStdFeatureReqHandler@p^(0+128),w
 10365  0F6B  0086               	movwf	6
 10366  0F6C  0187               	clrf	7
 10367  0F6D  1F81               	btfss	1,7
 10368  0F6E  2F7D               	goto	l358
 10369                           
 10370                           ;usb_device.c: 3012: {
 10371                           ;usb_device.c: 3015: if(SetupPkt.EPDir == 0)
 10372  0F6F  0020               	movlb	0	; select bank0
 10373  0F70  1BC4               	btfsc	68,7	;volatile
 10374  0F71  2F76               	goto	l6601
 10375                           
 10376                           ;usb_device.c: 3016: {
 10377                           ;usb_device.c: 3017: ep_data_out[SetupPkt.EPNum].bits.transfer_terminated = 1;
 10378  0F72  0844               	movf	68,w	;volatile
 10379  0F73  390F               	andlw	15
 10380  0F74  3ED3               	addlw	_ep_data_out& (0+255)
 10381  0F75  2F79               	goto	L13
 10382  0F76                     l6601:	
 10383                           ;usb_device.c: 3018: }
 10384                           
 10385                           
 10386                           ;usb_device.c: 3019: else
 10387                           ;usb_device.c: 3020: {
 10388                           ;usb_device.c: 3021: ep_data_in[SetupPkt.EPNum].bits.transfer_terminated = 1;
 10389  0F76  0844               	movf	68,w	;volatile
 10390  0F77  390F               	andlw	15
 10391  0F78  3ED1               	addlw	_ep_data_in& (0+255)
 10392  0F79                     L13:	
 10393  0F79  0086               	movwf	6
 10394  0F7A  3001               	movlw	1	; select bank3/4
 10395  0F7B  0087               	movwf	7
 10396  0F7C  1481               	bsf	1,1
 10397  0F7D                     l358:	
 10398                           
 10399                           ;usb_device.c: 3022: }
 10400                           ;usb_device.c: 3023: }
 10401                           ;usb_device.c: 3026: p->STAT.Val |= 0x80|0x04;
 10402  0F7D  3084               	movlw	132
 10403  0F7E  0021               	movlb	1	; select bank1
 10404  0F7F  00B1               	movwf	??_USBStdFeatureReqHandler^(0+128)
 10405  0F80  0836               	movf	USBStdFeatureReqHandler@p^(0+128),w
 10406  0F81  0086               	movwf	6
 10407  0F82  0187               	clrf	7
 10408  0F83  0831               	movf	??_USBStdFeatureReqHandler^(0+128),w
 10409  0F84  0481               	iorwf	1,f
 10410                           
 10411                           ;usb_device.c: 3027: }
 10412  0F85  0008               	return
 10413  0F86                     l6603:	
 10414                           
 10415                           ;usb_device.c: 3028: else
 10416                           ;usb_device.c: 3029: {
 10417                           ;usb_device.c: 3033: ((BYTE_VAL*)&p)->Val ^= 0x0004;;
 10418  0F86  3004               	movlw	4
 10419  0F87  0021               	movlb	1	; select bank1
 10420  0F88  00B1               	movwf	??_USBStdFeatureReqHandler^(0+128)
 10421  0F89  0831               	movf	??_USBStdFeatureReqHandler^(0+128),w
 10422  0F8A  06B6               	xorwf	USBStdFeatureReqHandler@p^(0+128),f
 10423                           
 10424                           ;usb_device.c: 3035: if(p->STAT.UOWN == 1)
 10425  0F8B  0836               	movf	USBStdFeatureReqHandler@p^(0+128),w
 10426  0F8C  0086               	movwf	6
 10427  0F8D  0187               	clrf	7
 10428  0F8E  1F81               	btfss	1,7
 10429  0F8F  2FAB               	goto	l6613
 10430                           
 10431                           ;usb_device.c: 3036: {
 10432                           ;usb_device.c: 3039: p->STAT.Val &= (~0x80);
 10433  0F90  307F               	movlw	127
 10434  0F91  00B1               	movwf	??_USBStdFeatureReqHandler^(0+128)
 10435  0F92  0836               	movf	USBStdFeatureReqHandler@p^(0+128),w
 10436  0F93  0086               	movwf	6
 10437  0F94  0187               	clrf	7
 10438  0F95  0831               	movf	??_USBStdFeatureReqHandler^(0+128),w
 10439  0F96  0581               	andwf	1,f
 10440                           
 10441                           ;usb_device.c: 3040: p->STAT.Val |= 0x40;
 10442  0F97  0836               	movf	USBStdFeatureReqHandler@p^(0+128),w
 10443  0F98  0086               	movwf	6
 10444  0F99  0187               	clrf	7
 10445  0F9A  1701               	bsf	1,6
 10446                           
 10447                           ;usb_device.c: 3041: USER_USB_CALLBACK_EVENT_HANDLER(EVENT_TRANSFER_TERMINATED,p,sizeof(
      +                          p));
 10448  0F9B  3005               	movlw	5
 10449  0F9C  00AC               	movwf	?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)
 10450  0F9D  3000               	movlw	0
 10451  0F9E  00AD               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)+1)
 10452  0F9F  0836               	movf	USBStdFeatureReqHandler@p^(0+128),w
 10453  0FA0  00B1               	movwf	??_USBStdFeatureReqHandler^(0+128)
 10454  0FA1  0831               	movf	??_USBStdFeatureReqHandler^(0+128),w
 10455  0FA2  00AE               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER+2)^(0+128)
 10456  0FA3  3001               	movlw	1
 10457  0FA4  00AF               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)+3)
 10458  0FA5  3000               	movlw	0
 10459  0FA6  00B0               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)+4)
 10460  0FA7  319D  25F4  318E   	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
 10461                           
 10462                           ;usb_device.c: 3042: }
 10463  0FAA  2FB0               	goto	l6615
 10464  0FAB                     l6613:	
 10465                           
 10466                           ;usb_device.c: 3043: else
 10467                           ;usb_device.c: 3044: {
 10468                           ;usb_device.c: 3046: p->STAT.Val |= 0x40;
 10469  0FAB  0021               	movlb	1	; select bank1
 10470  0FAC  0836               	movf	USBStdFeatureReqHandler@p^(0+128),w
 10471  0FAD  0086               	movwf	6
 10472  0FAE  0187               	clrf	7
 10473  0FAF  1701               	bsf	1,6
 10474  0FB0                     l6615:	
 10475                           
 10476                           ;usb_device.c: 3047: }
 10477                           ;usb_device.c: 3051: ((BYTE_VAL*)&p)->Val ^= 0x0004;;
 10478  0FB0  3004               	movlw	4
 10479  0FB1  0021               	movlb	1	; select bank1
 10480  0FB2  00B1               	movwf	??_USBStdFeatureReqHandler^(0+128)
 10481  0FB3  0831               	movf	??_USBStdFeatureReqHandler^(0+128),w
 10482  0FB4  06B6               	xorwf	USBStdFeatureReqHandler@p^(0+128),f
 10483                           
 10484                           ;usb_device.c: 3057: if((current_ep_data.bits.transfer_terminated != 0) || (p->STAT.UOWN
      +                           == 1))
 10485  0FB5  18B5               	btfsc	USBStdFeatureReqHandler@current_ep_data^(0+128),1
 10486  0FB6  2FBC               	goto	l366
 10487  0FB7  0836               	movf	USBStdFeatureReqHandler@p^(0+128),w
 10488  0FB8  0086               	movwf	6
 10489  0FB9  0187               	clrf	7
 10490  0FBA  1F81               	btfss	1,7
 10491  0FBB  2FE2               	goto	l6627
 10492  0FBC                     l366:	
 10493                           
 10494                           ;usb_device.c: 3058: {
 10495                           ;usb_device.c: 3059: if(SetupPkt.EPDir == 0)
 10496  0FBC  0020               	movlb	0	; select bank0
 10497  0FBD  1BC4               	btfsc	68,7	;volatile
 10498  0FBE  2FC3               	goto	l6623
 10499                           
 10500                           ;usb_device.c: 3060: {
 10501                           ;usb_device.c: 3061: ep_data_out[SetupPkt.EPNum].bits.transfer_terminated = 0;
 10502  0FBF  0844               	movf	68,w	;volatile
 10503  0FC0  390F               	andlw	15
 10504  0FC1  3ED3               	addlw	_ep_data_out& (0+255)
 10505  0FC2  2FC6               	goto	L14
 10506  0FC3                     l6623:	
 10507                           ;usb_device.c: 3062: }
 10508                           
 10509                           
 10510                           ;usb_device.c: 3063: else
 10511                           ;usb_device.c: 3064: {
 10512                           ;usb_device.c: 3065: ep_data_in[SetupPkt.EPNum].bits.transfer_terminated = 0;
 10513  0FC3  0844               	movf	68,w	;volatile
 10514  0FC4  390F               	andlw	15
 10515  0FC5  3ED1               	addlw	_ep_data_in& (0+255)
 10516  0FC6                     L14:	
 10517  0FC6  0086               	movwf	6
 10518  0FC7  3001               	movlw	1	; select bank3/4
 10519  0FC8  0087               	movwf	7
 10520  0FC9  1081               	bcf	1,1
 10521                           
 10522                           ;usb_device.c: 3066: }
 10523                           ;usb_device.c: 3068: p->STAT.Val &= ~(0x80 | 0x40 | 0x04);
 10524  0FCA  303B               	movlw	59
 10525  0FCB  0021               	movlb	1	; select bank1
 10526  0FCC  00B1               	movwf	??_USBStdFeatureReqHandler^(0+128)
 10527  0FCD  0836               	movf	USBStdFeatureReqHandler@p^(0+128),w
 10528  0FCE  0086               	movwf	6
 10529  0FCF  0187               	clrf	7
 10530  0FD0  0831               	movf	??_USBStdFeatureReqHandler^(0+128),w
 10531  0FD1  0581               	andwf	1,f
 10532                           
 10533                           ;usb_device.c: 3071: USER_USB_CALLBACK_EVENT_HANDLER(EVENT_TRANSFER_TERMINATED,p,sizeof(
      +                          p));
 10534  0FD2  3005               	movlw	5
 10535  0FD3  00AC               	movwf	?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)
 10536  0FD4  3000               	movlw	0
 10537  0FD5  00AD               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)+1)
 10538  0FD6  0836               	movf	USBStdFeatureReqHandler@p^(0+128),w
 10539  0FD7  00B1               	movwf	??_USBStdFeatureReqHandler^(0+128)
 10540  0FD8  0831               	movf	??_USBStdFeatureReqHandler^(0+128),w
 10541  0FD9  00AE               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER+2)^(0+128)
 10542  0FDA  3001               	movlw	1
 10543  0FDB  00AF               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)+3)
 10544  0FDC  3000               	movlw	0
 10545  0FDD  00B0               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)+4)
 10546  0FDE  319D  25F4  318E   	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
 10547                           
 10548                           ;usb_device.c: 3072: }
 10549  0FE1  2FEA               	goto	l6629
 10550  0FE2                     l6627:	
 10551                           
 10552                           ;usb_device.c: 3073: else
 10553                           ;usb_device.c: 3074: {
 10554                           ;usb_device.c: 3076: p->STAT.Val &= ~(0x80 | 0x40 | 0x04);
 10555  0FE2  303B               	movlw	59
 10556  0FE3  0021               	movlb	1	; select bank1
 10557  0FE4  00B1               	movwf	??_USBStdFeatureReqHandler^(0+128)
 10558  0FE5  0836               	movf	USBStdFeatureReqHandler@p^(0+128),w
 10559  0FE6  0086               	movwf	6
 10560  0FE7  0187               	clrf	7
 10561  0FE8  0831               	movf	??_USBStdFeatureReqHandler^(0+128),w
 10562  0FE9  0581               	andwf	1,f
 10563  0FEA                     l6629:	
 10564                           
 10565                           ;usb_device.c: 3077: }
 10566                           ;usb_device.c: 3124: pUEP = (unsigned char*)(&UEP0+SetupPkt.EPNum);
 10567  0FEA  0020               	movlb	0	; select bank0
 10568  0FEB  0844               	movf	68,w	;volatile
 10569  0FEC  390F               	andlw	15
 10570  0FED  3E98               	addlw	152
 10571  0FEE  0021               	movlb	1	; select bank1
 10572  0FEF  00B1               	movwf	??_USBStdFeatureReqHandler^(0+128)
 10573  0FF0  01B2               	clrf	(??_USBStdFeatureReqHandler^(0+128)+1)
 10574  0FF1  300E               	movlw	14
 10575  0FF2  3DB2               	addwfc	(??_USBStdFeatureReqHandler^(0+128)+1),f
 10576  0FF3  0831               	movf	??_USBStdFeatureReqHandler^(0+128),w
 10577  0FF4  00B3               	movwf	USBStdFeatureReqHandler@pUEP^(0+128)
 10578  0FF5  0832               	movf	(??_USBStdFeatureReqHandler+1)^(0+128),w
 10579  0FF6  00B4               	movwf	(USBStdFeatureReqHandler@pUEP+1)^(0+128)
 10580                           
 10581                           ;usb_device.c: 3128: *pUEP &= ~0x0001;
 10582  0FF7  30FE               	movlw	254
 10583  0FF8  00B1               	movwf	??_USBStdFeatureReqHandler^(0+128)
 10584  0FF9  0833               	movf	USBStdFeatureReqHandler@pUEP^(0+128),w
 10585  0FFA  0086               	movwf	6
 10586  0FFB  0834               	movf	(USBStdFeatureReqHandler@pUEP+1)^(0+128),w
 10587  0FFC  0087               	movwf	7
 10588  0FFD  0831               	movf	??_USBStdFeatureReqHandler^(0+128),w
 10589  0FFE  0581               	andwf	1,f
 10590  0FFF  0008               	return
 10591  1000                     __end_of_USBStdFeatureReqHandler:	
 10592                           
 10593                           	psect	text36
 10594  1F56                     __ptext36:	
 10595 ;; *************** function _USBStdGetStatusHandler *****************
 10596 ;; Defined at:
 10597 ;;		line 2283 in file "../USB/usb_device.c"
 10598 ;; Parameters:    Size  Location     Type
 10599 ;;		None
 10600 ;; Auto vars:     Size  Location     Type
 10601 ;;  p               1   15[BANK0 ] PTR struct __BDT
 10602 ;;		 -> NULL(0), BDT(32), 
 10603 ;; Return value:  Size  Location     Type
 10604 ;;		None               void
 10605 ;; Registers used:
 10606 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 10607 ;; Tracked objects:
 10608 ;;		On entry : 0/0
 10609 ;;		On exit  : 0/0
 10610 ;;		Unchanged: 0/0
 10611 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10612 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10613 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10614 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10615 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10616 ;;Total ram usage:        2 bytes
 10617 ;; Hardware stack levels used:    1
 10618 ;; Hardware stack levels required when called:    4
 10619 ;; This function calls:
 10620 ;;		Nothing
 10621 ;; This function is called by:
 10622 ;;		_USBCheckStdRequest
 10623 ;; This function uses a non-reentrant model
 10624 ;;
 10625                           
 10626                           
 10627                           ;psect for function _USBStdGetStatusHandler
 10628  1F56                     _USBStdGetStatusHandler:	
 10629                           
 10630                           ;usb_device.c: 2284: CtrlTrfData[0] = 0;
 10631                           
 10632                           ;incstack = 0
 10633                           ; Regs used in _USBStdGetStatusHandler: [wreg-fsr1h+status,2+status,0]
 10634  1F56  0020               	movlb	0	; select bank0
 10635  1F57  01C8               	clrf	72	;volatile
 10636                           
 10637                           ;usb_device.c: 2285: CtrlTrfData[1] = 0;
 10638  1F58  3000               	movlw	0
 10639  1F59  00C9               	movwf	73	;volatile
 10640                           
 10641                           ;usb_device.c: 2287: switch(SetupPkt.Recipient)
 10642  1F5A  2F8E               	goto	l6481
 10643  1F5B                     l271:	
 10644                           ;usb_device.c: 2288: {
 10645                           ;usb_device.c: 2289: case (0x00):
 10646                           
 10647                           
 10648                           ;usb_device.c: 2295: if(1 == 1)
 10649  1F5B  0021               	movlb	1	; select bank1
 10650  1F5C  17E9               	bsf	(_inPipes^(0+128)+2),7
 10651                           
 10652                           ;usb_device.c: 2296: {
 10653                           ;usb_device.c: 2297: CtrlTrfData[0]|=0x01;
 10654  1F5D  0020               	movlb	0	; select bank0
 10655  1F5E  1448               	bsf	72,0	;volatile
 10656                           
 10657                           ;usb_device.c: 2298: }
 10658                           ;usb_device.c: 2300: if(RemoteWakeup == TRUE)
 10659  1F5F  0022               	movlb	2	; select bank2
 10660  1F60  0861               	movf	_RemoteWakeup^(0+256),w
 10661  1F61  3A01               	xorlw	1
 10662  1F62  1D03               	skipz
 10663  1F63  2F9A               	goto	l274
 10664                           
 10665                           ;usb_device.c: 2301: {
 10666                           ;usb_device.c: 2302: CtrlTrfData[0]|=0x02;
 10667  1F64  0020               	movlb	0	; select bank0
 10668  1F65  14C8               	bsf	72,1	;volatile
 10669                           
 10670                           ;usb_device.c: 2303: }
 10671                           ;usb_device.c: 2304: break;
 10672  1F66  2F9A               	goto	l274
 10673  1F67                     l275:	
 10674                           ;usb_device.c: 2305: case (0x01):
 10675                           
 10676                           
 10677                           ;usb_device.c: 2306: inPipes[0].info.bits.busy = 1;
 10678  1F67  0021               	movlb	1	; select bank1
 10679  1F68  17E9               	bsf	(_inPipes^(0+128)+2),7
 10680                           
 10681                           ;usb_device.c: 2307: break;
 10682  1F69  2F9A               	goto	l274
 10683  1F6A                     l276:	
 10684                           ;usb_device.c: 2308: case (0x02):
 10685                           
 10686                           
 10687                           ;usb_device.c: 2309: inPipes[0].info.bits.busy = 1;
 10688  1F6A  0021               	movlb	1	; select bank1
 10689  1F6B  17E9               	bsf	(_inPipes^(0+128)+2),7
 10690                           
 10691                           ;usb_device.c: 2313: {
 10692                           ;usb_device.c: 2314: BDT_ENTRY *p;
 10693                           ;usb_device.c: 2316: if(SetupPkt.EPDir == 0)
 10694  1F6C  0020               	movlb	0	; select bank0
 10695  1F6D  1BC4               	btfsc	68,7	;volatile
 10696  1F6E  2F76               	goto	l6471
 10697                           
 10698                           ;usb_device.c: 2317: {
 10699                           ;usb_device.c: 2318: p = (BDT_ENTRY*)pBDTEntryOut[SetupPkt.EPNum];
 10700  1F6F  0844               	movf	68,w	;volatile
 10701  1F70  390F               	andlw	15
 10702  1F71  3E59               	addlw	_pBDTEntryOut& (0+255)
 10703  1F72  0086               	movwf	6
 10704  1F73  3001               	movlw	1	; select bank2/3
 10705  1F74  0087               	movwf	7
 10706  1F75  2F7B               	goto	L15
 10707  1F76                     l6471:	
 10708                           ;usb_device.c: 2319: }
 10709                           
 10710                           
 10711                           ;usb_device.c: 2320: else
 10712                           ;usb_device.c: 2321: {
 10713                           ;usb_device.c: 2322: p = (BDT_ENTRY*)pBDTEntryIn[SetupPkt.EPNum];
 10714  1F76  0844               	movf	68,w	;volatile
 10715  1F77  390F               	andlw	15
 10716  1F78  3EE0               	addlw	_pBDTEntryIn& (0+255)
 10717  1F79  0086               	movwf	6
 10718  1F7A  0187               	clrf	7
 10719  1F7B                     L15:	
 10720  1F7B  0801               	movf	1,w
 10721  1F7C  00DE               	movwf	??_USBStdGetStatusHandler
 10722  1F7D  085E               	movf	??_USBStdGetStatusHandler,w
 10723  1F7E  00DF               	movwf	USBStdGetStatusHandler@p
 10724                           
 10725                           ;usb_device.c: 2323: }
 10726                           ;usb_device.c: 2325: if((p->STAT.UOWN == 1) && (p->STAT.BSTALL == 1))
 10727  1F7F  085F               	movf	USBStdGetStatusHandler@p,w
 10728  1F80  0086               	movwf	6
 10729  1F81  0187               	clrf	7
 10730  1F82  1F81               	btfss	1,7
 10731  1F83  2F9A               	goto	l274
 10732  1F84  085F               	movf	USBStdGetStatusHandler@p,w
 10733  1F85  0086               	movwf	6
 10734  1F86  0187               	clrf	7
 10735  1F87  1D01               	btfss	1,2
 10736  1F88  2F9A               	goto	l274
 10737                           
 10738                           ;usb_device.c: 2326: CtrlTrfData[0]=0x01;
 10739  1F89  3001               	movlw	1
 10740  1F8A  00DE               	movwf	??_USBStdGetStatusHandler
 10741  1F8B  085E               	movf	??_USBStdGetStatusHandler,w
 10742  1F8C  00C8               	movwf	72	;volatile
 10743                           
 10744                           ;usb_device.c: 2328: }
 10745                           ;usb_device.c: 2329: }
 10746                           
 10747                           ;usb_device.c: 2327: break;
 10748  1F8D  2F9A               	goto	l274
 10749  1F8E                     l6481:	
 10750  1F8E  0840               	movf	64,w	;volatile
 10751  1F8F  391F               	andlw	31
 10752                           
 10753                           ; Switch size 1, requested type "space"
 10754                           ; Number of cases is 3, Range of values is 0 to 2
 10755                           ; switch strategies available:
 10756                           ; Name         Instructions Cycles
 10757                           ; simple_byte           10     6 (average)
 10758                           ; direct_byte           12     6 (fixed)
 10759                           ; jumptable            260     6 (fixed)
 10760                           ; rangetable             7     4 (fixed)
 10761                           ; spacedrange           11     6 (fixed)
 10762                           ; locatedrange           3     3 (fixed)
 10763                           ;	Chosen strategy is simple_byte
 10764  1F90  3A00               	xorlw	0	; case 0
 10765  1F91  1903               	skipnz
 10766  1F92  2F5B               	goto	l271
 10767  1F93  3A01               	xorlw	1	; case 1
 10768  1F94  1903               	skipnz
 10769  1F95  2F67               	goto	l275
 10770  1F96  3A03               	xorlw	3	; case 2
 10771  1F97  1903               	skipnz
 10772  1F98  2F6A               	goto	l276
 10773  1F99  2F9A               	goto	l274
 10774  1F9A                     l274:	
 10775                           
 10776                           ;usb_device.c: 2331: if(inPipes[0].info.bits.busy == 1)
 10777  1F9A  0021               	movlb	1	; select bank1
 10778  1F9B  1FE9               	btfss	(_inPipes^(0+128)+2),7
 10779  1F9C  0008               	return
 10780                           
 10781                           ;usb_device.c: 2332: {
 10782                           ;usb_device.c: 2333: inPipes[0].pSrc.bRam = (BYTE*)&CtrlTrfData;
 10783  1F9D  3048               	movlw	72
 10784  1F9E  00E7               	movwf	_inPipes^(0+128)
 10785  1F9F  3000               	movlw	0
 10786  1FA0  00E8               	movwf	(_inPipes+1)^(0+128)
 10787                           
 10788                           ;usb_device.c: 2334: inPipes[0].info.bits.ctrl_trf_mem = 0x01;
 10789  1FA1  1469               	bsf	(_inPipes^(0+128)+2),0
 10790                           
 10791                           ;usb_device.c: 2335: inPipes[0].wCount.v[0] = 2;
 10792  1FA2  3002               	movlw	2
 10793  1FA3  0020               	movlb	0	; select bank0
 10794  1FA4  00DE               	movwf	??_USBStdGetStatusHandler
 10795  1FA5  085E               	movf	??_USBStdGetStatusHandler,w
 10796  1FA6  0021               	movlb	1	; select bank1
 10797  1FA7  00EA               	movwf	(_inPipes^(0+128)+3)
 10798  1FA8  0008               	return
 10799  1FA9                     __end_of_USBStdGetStatusHandler:	
 10800                           
 10801                           	psect	text37
 10802  132C                     __ptext37:	
 10803 ;; *************** function _USBStdGetDscHandler *****************
 10804 ;; Defined at:
 10805 ;;		line 2207 in file "../USB/usb_device.c"
 10806 ;; Parameters:    Size  Location     Type
 10807 ;;		None
 10808 ;; Auto vars:     Size  Location     Type
 10809 ;;		None
 10810 ;; Return value:  Size  Location     Type
 10811 ;;		None               void
 10812 ;; Registers used:
 10813 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
 10814 ;; Tracked objects:
 10815 ;;		On entry : 0/0
 10816 ;;		On exit  : 0/0
 10817 ;;		Unchanged: 0/0
 10818 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10819 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10820 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10821 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10822 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10823 ;;Total ram usage:        3 bytes
 10824 ;; Hardware stack levels used:    1
 10825 ;; Hardware stack levels required when called:    4
 10826 ;; This function calls:
 10827 ;;		Nothing
 10828 ;; This function is called by:
 10829 ;;		_USBCheckStdRequest
 10830 ;; This function uses a non-reentrant model
 10831 ;;
 10832                           
 10833                           
 10834                           ;psect for function _USBStdGetDscHandler
 10835  132C                     _USBStdGetDscHandler:	
 10836                           
 10837                           ;usb_device.c: 2208: if(SetupPkt.bmRequestType == 0x80)
 10838                           
 10839                           ;incstack = 0
 10840                           ; Regs used in _USBStdGetDscHandler: [wreg-fsr0h+status,2+status,0+pclath]
 10841  132C  0020               	movlb	0	; select bank0
 10842  132D  0840               	movf	64,w	;volatile
 10843  132E  3A80               	xorlw	128
 10844  132F  1D03               	skipz
 10845  1330  0008               	return
 10846                           
 10847                           ;usb_device.c: 2209: {
 10848                           ;usb_device.c: 2210: inPipes[0].info.Val = 0x00 | 0x80 | 0x40;
 10849  1331  30C0               	movlw	192
 10850  1332  00DE               	movwf	??_USBStdGetDscHandler
 10851  1333  085E               	movf	??_USBStdGetDscHandler,w
 10852  1334  0021               	movlb	1	; select bank1
 10853  1335  00E9               	movwf	(_inPipes^(0+128)+2)
 10854                           
 10855                           ;usb_device.c: 2212: switch(SetupPkt.bDescriptorType)
 10856  1336  2B9E               	goto	l4739
 10857  1337                     l4719:	
 10858                           ;usb_device.c: 2213: {
 10859                           ;usb_device.c: 2214: case 0x01:
 10860                           
 10861                           
 10862                           ;usb_device.c: 2218: inPipes[0].pSrc.bRom = (const BYTE*)&device_dsc;
 10863  1337  308D               	movlw	low (_device_dsc| (0+32768))
 10864  1338  0021               	movlb	1	; select bank1
 10865  1339  00E7               	movwf	_inPipes^(0+128)
 10866  133A  3088               	movlw	high (_device_dsc| (0+32768))
 10867  133B  00E8               	movwf	(_inPipes+1)^(0+128)
 10868                           
 10869                           ;usb_device.c: 2220: inPipes[0].wCount.Val = sizeof(device_dsc);
 10870  133C  3012               	movlw	18
 10871  133D  00EA               	movwf	(_inPipes^(0+128)+3)
 10872  133E  3000               	movlw	0
 10873  133F  00EB               	movwf	(_inPipes^(0+128)+4)
 10874                           
 10875                           ;usb_device.c: 2221: break;
 10876  1340  0008               	return
 10877  1341                     l4721:	
 10878                           ;usb_device.c: 2222: case 0x02:
 10879                           
 10880                           
 10881                           ;usb_device.c: 2226: inPipes[0].pSrc.bRom = *(USB_CD_Ptr+SetupPkt.bDscIndex);
 10882  1341  3004               	movlw	low (_USB_CD_Ptr| (0+32768))
 10883  1342  0084               	movwf	4
 10884  1343  3088               	movlw	high (_USB_CD_Ptr| (0+32768))
 10885  1344  0085               	movwf	5
 10886  1345  0020               	movlb	0	; select bank0
 10887  1346  0842               	movf	66,w	;volatile
 10888  1347  0784               	addwf	4,f
 10889  1348  1803               	skipnc
 10890  1349  0A85               	incf	5,f
 10891  134A  3F00               	moviw [0]fsr0
 10892  134B  0021               	movlb	1	; select bank1
 10893  134C  00E7               	movwf	_inPipes^(0+128)
 10894  134D  3088               	movlw	(high __stringtab)| (0+128)
 10895  134E  00E8               	movwf	(_inPipes+1)^(0+128)
 10896                           
 10897                           ;usb_device.c: 2232: inPipes[0].wCount.byte.LB = *(inPipes[0].pSrc.bRom+2);
 10898  134F  0868               	movf	(_inPipes+1)^(0+128),w
 10899  1350  0020               	movlb	0	; select bank0
 10900  1351  00DF               	movwf	??_USBStdGetDscHandler+1
 10901  1352  0021               	movlb	1	; select bank1
 10902  1353  0867               	movf	_inPipes^(0+128),w
 10903  1354  0020               	movlb	0	; select bank0
 10904  1355  00DE               	movwf	??_USBStdGetDscHandler
 10905  1356  3002               	movlw	2
 10906  1357  075E               	addwf	??_USBStdGetDscHandler,w
 10907  1358  0084               	movwf	4
 10908  1359  085F               	movf	??_USBStdGetDscHandler+1,w
 10909  135A  1803               	skipnc
 10910  135B  0A5F               	incf	??_USBStdGetDscHandler+1,w
 10911  135C  0085               	movwf	5
 10912  135D  0800               	movf	0,w	;code access
 10913  135E  00E0               	movwf	??_USBStdGetDscHandler+2
 10914  135F  0860               	movf	??_USBStdGetDscHandler+2,w
 10915  1360  0021               	movlb	1	; select bank1
 10916  1361  00EA               	movwf	(_inPipes^(0+128)+3)
 10917                           
 10918                           ;usb_device.c: 2233: inPipes[0].wCount.byte.HB = *(inPipes[0].pSrc.bRom+3);
 10919  1362  0868               	movf	(_inPipes+1)^(0+128),w
 10920  1363  0020               	movlb	0	; select bank0
 10921  1364  00DF               	movwf	??_USBStdGetDscHandler+1
 10922  1365  0021               	movlb	1	; select bank1
 10923  1366  0867               	movf	_inPipes^(0+128),w
 10924  1367  0020               	movlb	0	; select bank0
 10925  1368  00DE               	movwf	??_USBStdGetDscHandler
 10926  1369  3003               	movlw	3
 10927  136A  075E               	addwf	??_USBStdGetDscHandler,w
 10928  136B  0084               	movwf	4
 10929  136C  085F               	movf	??_USBStdGetDscHandler+1,w
 10930  136D  1803               	skipnc
 10931  136E  0A5F               	incf	??_USBStdGetDscHandler+1,w
 10932  136F  0085               	movwf	5
 10933  1370  0800               	movf	0,w	;code access
 10934  1371  00E0               	movwf	??_USBStdGetDscHandler+2
 10935  1372  0860               	movf	??_USBStdGetDscHandler+2,w
 10936  1373  0021               	movlb	1	; select bank1
 10937  1374  00EB               	movwf	(_inPipes^(0+128)+4)
 10938                           
 10939                           ;usb_device.c: 2234: break;
 10940  1375  0008               	return
 10941  1376                     l4727:	
 10942                           ;usb_device.c: 2235: case 0x03:
 10943                           
 10944                           
 10945                           ;usb_device.c: 2239: if(SetupPkt.bDscIndex<3)
 10946  1376  3003               	movlw	3
 10947  1377  0020               	movlb	0	; select bank0
 10948  1378  0242               	subwf	66,w	;volatile
 10949  1379  1803               	skipnc
 10950  137A  2B98               	goto	l4733
 10951                           
 10952                           ;usb_device.c: 2240: {
 10953                           ;usb_device.c: 2242: inPipes[0].pSrc.bRom = *(USB_SD_Ptr+SetupPkt.bDscIndex);
 10954  137B  3001               	movlw	low (_USB_SD_Ptr| (0+32768))
 10955  137C  0084               	movwf	4
 10956  137D  3088               	movlw	high (_USB_SD_Ptr| (0+32768))
 10957  137E  0085               	movwf	5
 10958  137F  0842               	movf	66,w	;volatile
 10959  1380  0784               	addwf	4,f
 10960  1381  1803               	skipnc
 10961  1382  0A85               	incf	5,f
 10962  1383  3F00               	moviw [0]fsr0
 10963  1384  0021               	movlb	1	; select bank1
 10964  1385  00E7               	movwf	_inPipes^(0+128)
 10965  1386  3088               	movlw	(high __stringtab)| (0+128)
 10966  1387  00E8               	movwf	(_inPipes+1)^(0+128)
 10967                           
 10968                           ;usb_device.c: 2244: inPipes[0].wCount.Val = *inPipes[0].pSrc.bRom;
 10969  1388  0867               	movf	_inPipes^(0+128),w
 10970  1389  0084               	movwf	4
 10971  138A  0868               	movf	(_inPipes+1)^(0+128),w
 10972  138B  0085               	movwf	5
 10973  138C  0800               	movf	0,w	;code access
 10974  138D  0020               	movlb	0	; select bank0
 10975  138E  00DE               	movwf	??_USBStdGetDscHandler
 10976  138F  01DF               	clrf	??_USBStdGetDscHandler+1
 10977  1390  085E               	movf	??_USBStdGetDscHandler,w
 10978  1391  0021               	movlb	1	; select bank1
 10979  1392  00EA               	movwf	(_inPipes^(0+128)+3)
 10980  1393  0020               	movlb	0	; select bank0
 10981  1394  085F               	movf	??_USBStdGetDscHandler+1,w
 10982  1395  0021               	movlb	1	; select bank1
 10983  1396  00EB               	movwf	((_inPipes+1)^(0+128)+3)
 10984                           
 10985                           ;usb_device.c: 2245: }
 10986  1397  0008               	return
 10987  1398                     l4733:	
 10988                           
 10989                           ;usb_device.c: 2255: else
 10990                           ;usb_device.c: 2256: {
 10991                           ;usb_device.c: 2257: inPipes[0].info.Val = 0;
 10992  1398  0021               	movlb	1	; select bank1
 10993  1399  01E9               	clrf	(_inPipes^(0+128)+2)
 10994                           
 10995                           ;usb_device.c: 2258: }
 10996                           ;usb_device.c: 2259: break;
 10997  139A  0008               	return
 10998  139B                     l4735:	
 10999                           ;usb_device.c: 2260: default:
 11000                           
 11001                           
 11002                           ;usb_device.c: 2261: inPipes[0].info.Val = 0;
 11003  139B  0021               	movlb	1	; select bank1
 11004  139C  01E9               	clrf	(_inPipes^(0+128)+2)
 11005                           
 11006                           ;usb_device.c: 2263: }
 11007                           
 11008                           ;usb_device.c: 2262: break;
 11009  139D  0008               	return
 11010  139E                     l4739:	
 11011  139E  0020               	movlb	0	; select bank0
 11012  139F  0843               	movf	67,w	;volatile
 11013                           
 11014                           ; Switch size 1, requested type "space"
 11015                           ; Number of cases is 3, Range of values is 1 to 3
 11016                           ; switch strategies available:
 11017                           ; Name         Instructions Cycles
 11018                           ; simple_byte           10     6 (average)
 11019                           ; direct_byte           15     9 (fixed)
 11020                           ; jumptable            263     9 (fixed)
 11021                           ;	Chosen strategy is simple_byte
 11022  13A0  3A01               	xorlw	1	; case 1
 11023  13A1  1903               	skipnz
 11024  13A2  2B37               	goto	l4719
 11025  13A3  3A03               	xorlw	3	; case 2
 11026  13A4  1903               	skipnz
 11027  13A5  2B41               	goto	l4721
 11028  13A6  3A01               	xorlw	1	; case 3
 11029  13A7  1903               	skipnz
 11030  13A8  2B76               	goto	l4727
 11031  13A9  2B9B               	goto	l4735
 11032  13AA  0008               	return
 11033  13AB                     __end_of_USBStdGetDscHandler:	
 11034                           
 11035                           	psect	text38
 11036  13AB                     __ptext38:	
 11037 ;; *************** function _USBStdSetCfgHandler *****************
 11038 ;; Defined at:
 11039 ;;		line 2132 in file "../USB/usb_device.c"
 11040 ;; Parameters:    Size  Location     Type
 11041 ;;		None
 11042 ;; Auto vars:     Size  Location     Type
 11043 ;;  p               2   18[BANK1 ] PTR unsigned char 
 11044 ;;		 -> UEP1(1), 
 11045 ;;  i               1   20[BANK1 ] unsigned char 
 11046 ;;  i               1   21[BANK1 ] unsigned char 
 11047 ;; Return value:  Size  Location     Type
 11048 ;;		None               void
 11049 ;; Registers used:
 11050 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11051 ;; Tracked objects:
 11052 ;;		On entry : 0/0
 11053 ;;		On exit  : 0/0
 11054 ;;		Unchanged: 0/0
 11055 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11056 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11057 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
 11058 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 11059 ;;      Totals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
 11060 ;;Total ram usage:        5 bytes
 11061 ;; Hardware stack levels used:    1
 11062 ;; Hardware stack levels required when called:    8
 11063 ;; This function calls:
 11064 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 11065 ;;		_memset
 11066 ;; This function is called by:
 11067 ;;		_USBCheckStdRequest
 11068 ;; This function uses a non-reentrant model
 11069 ;;
 11070                           
 11071                           
 11072                           ;psect for function _USBStdSetCfgHandler
 11073  13AB                     _USBStdSetCfgHandler:	
 11074                           
 11075                           ;usb_device.c: 2133: BYTE i;
 11076                           ;usb_device.c: 2136: inPipes[0].info.bits.busy = 1;
 11077                           
 11078                           ;incstack = 0
 11079                           ; Regs used in _USBStdSetCfgHandler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11080  13AB  0021               	movlb	1	; select bank1
 11081  13AC  17E9               	bsf	(_inPipes^(0+128)+2),7
 11082                           
 11083                           ;usb_device.c: 2139: { BYTE i; BYTE* p = (BYTE*)&UEP1; for(i=0;i<1;i++) *p++ = 0; };
 11084  13AD  300E               	movlw	14
 11085  13AE  00B3               	movwf	(USBStdSetCfgHandler@p+1)^(0+128)
 11086  13AF  3099               	movlw	153
 11087  13B0  00B2               	movwf	USBStdSetCfgHandler@p^(0+128)
 11088  13B1  01B4               	clrf	USBStdSetCfgHandler@i_1089^(0+128)
 11089  13B2  0834               	movf	USBStdSetCfgHandler@i_1089^(0+128),w
 11090  13B3  1D03               	skipz
 11091  13B4  2BC5               	goto	l6425
 11092  13B5                     l6417:	
 11093  13B5  0832               	movf	USBStdSetCfgHandler@p^(0+128),w
 11094  13B6  0086               	movwf	6
 11095  13B7  0833               	movf	(USBStdSetCfgHandler@p+1)^(0+128),w
 11096  13B8  0087               	movwf	7
 11097  13B9  0181               	clrf	1
 11098  13BA  3001               	movlw	1
 11099  13BB  07B2               	addwf	USBStdSetCfgHandler@p^(0+128),f
 11100  13BC  3000               	movlw	0
 11101  13BD  3DB3               	addwfc	(USBStdSetCfgHandler@p+1)^(0+128),f
 11102  13BE  3001               	movlw	1
 11103  13BF  00B1               	movwf	??_USBStdSetCfgHandler^(0+128)
 11104  13C0  0831               	movf	??_USBStdSetCfgHandler^(0+128),w
 11105  13C1  07B4               	addwf	USBStdSetCfgHandler@i_1089^(0+128),f
 11106  13C2  0834               	movf	USBStdSetCfgHandler@i_1089^(0+128),w
 11107  13C3  1903               	btfsc	3,2
 11108  13C4  2BB5               	goto	l6417
 11109  13C5                     l6425:	
 11110                           
 11111                           ;usb_device.c: 2142: memset((void*)&BDT[0], 0x00, sizeof(BDT));
 11112  13C5  3000               	movlw	0
 11113  13C6  0020               	movlb	0	; select bank0
 11114  13C7  00DE               	movwf	?_memset
 11115  13C8  3000               	movlw	0
 11116  13C9  00DF               	movwf	?_memset+1
 11117  13CA  3020               	movlw	32
 11118  13CB  00E0               	movwf	?_memset+2
 11119  13CC  3000               	movlw	0
 11120  13CD  00E1               	movwf	?_memset+3
 11121  13CE  3020               	movlw	32
 11122  13CF  319C  24CC  3193   	fcall	_memset
 11123                           
 11124                           ;usb_device.c: 2145: UCONbits.PPBRST = 1;
 11125  13D2  003D               	movlb	29	; select bank29
 11126  13D3  170E               	bsf	14,6	;volatile
 11127                           
 11128                           ;usb_device.c: 2150: for(i = 0; i < (BYTE)(1+1u); i++)
 11129  13D4  0021               	movlb	1	; select bank1
 11130  13D5  01B5               	clrf	USBStdSetCfgHandler@i^(0+128)
 11131  13D6  3002               	movlw	2
 11132  13D7  0235               	subwf	USBStdSetCfgHandler@i^(0+128),w
 11133  13D8  1803               	btfsc	3,0
 11134  13D9  2BEE               	goto	l6441
 11135  13DA                     l6435:	
 11136                           
 11137                           ;usb_device.c: 2151: {
 11138                           ;usb_device.c: 2152: ep_data_in[i].Val = 0u;
 11139  13DA  0835               	movf	USBStdSetCfgHandler@i^(0+128),w
 11140  13DB  3ED1               	addlw	_ep_data_in& (0+255)
 11141  13DC  0086               	movwf	6
 11142  13DD  3001               	movlw	1	; select bank3/4
 11143  13DE  0087               	movwf	7
 11144  13DF  0181               	clrf	1
 11145                           
 11146                           ;usb_device.c: 2153: ep_data_out[i].Val = 0u;
 11147  13E0  0835               	movf	USBStdSetCfgHandler@i^(0+128),w
 11148  13E1  3ED3               	addlw	_ep_data_out& (0+255)
 11149  13E2  0086               	movwf	6
 11150  13E3  3001               	movlw	1	; select bank3/4
 11151  13E4  0087               	movwf	7
 11152  13E5  0181               	clrf	1
 11153  13E6  3001               	movlw	1
 11154  13E7  00B1               	movwf	??_USBStdSetCfgHandler^(0+128)
 11155  13E8  0831               	movf	??_USBStdSetCfgHandler^(0+128),w
 11156  13E9  07B5               	addwf	USBStdSetCfgHandler@i^(0+128),f
 11157  13EA  3002               	movlw	2
 11158  13EB  0235               	subwf	USBStdSetCfgHandler@i^(0+128),w
 11159  13EC  1C03               	skipc
 11160  13ED  2BDA               	goto	l6435
 11161  13EE                     l6441:	
 11162                           
 11163                           ;usb_device.c: 2154: }
 11164                           ;usb_device.c: 2157: memset((void*)&USBAlternateInterface,0x00,1);
 11165  13EE  3000               	movlw	0
 11166  13EF  0020               	movlb	0	; select bank0
 11167  13F0  00DE               	movwf	?_memset
 11168  13F1  3000               	movlw	0
 11169  13F2  00DF               	movwf	?_memset+1
 11170  13F3  3001               	movlw	1
 11171  13F4  00E0               	movwf	?_memset+2
 11172  13F5  3000               	movlw	0
 11173  13F6  00E1               	movwf	?_memset+3
 11174  13F7  30ED               	movlw	_USBAlternateInterface& (0+255)
 11175  13F8  319C  24CC  3193   	fcall	_memset
 11176                           
 11177                           ;usb_device.c: 2160: UCONbits.PPBRST = 0;
 11178  13FB  003D               	movlb	29	; select bank29
 11179  13FC  130E               	bcf	14,6	;volatile
 11180                           
 11181                           ;usb_device.c: 2162: pBDTEntryIn[0] = (volatile BDT_ENTRY*)&BDT[2];
 11182  13FD  3028               	movlw	40
 11183  13FE  0021               	movlb	1	; select bank1
 11184  13FF  00B1               	movwf	??_USBStdSetCfgHandler^(0+128)
 11185  1400  0831               	movf	??_USBStdSetCfgHandler^(0+128),w
 11186  1401  00E0               	movwf	_pBDTEntryIn^(0+128)
 11187                           
 11188                           ;usb_device.c: 2165: pBDTEntryEP0OutCurrent = (volatile BDT_ENTRY*)&BDT[0];
 11189  1402  3020               	movlw	32
 11190  1403  00B1               	movwf	??_USBStdSetCfgHandler^(0+128)
 11191  1404  0831               	movf	??_USBStdSetCfgHandler^(0+128),w
 11192  1405  00E6               	movwf	_pBDTEntryEP0OutCurrent^(0+128)
 11193                           
 11194                           ;usb_device.c: 2166: pBDTEntryEP0OutNext = pBDTEntryEP0OutCurrent;
 11195  1406  0866               	movf	_pBDTEntryEP0OutCurrent^(0+128),w
 11196  1407  00B1               	movwf	??_USBStdSetCfgHandler^(0+128)
 11197  1408  0831               	movf	??_USBStdSetCfgHandler^(0+128),w
 11198  1409  0020               	movlb	0	; select bank0
 11199  140A  00EA               	movwf	_pBDTEntryEP0OutNext
 11200                           
 11201                           ;usb_device.c: 2169: USBActiveConfiguration = SetupPkt.bConfigurationValue;
 11202  140B  0842               	movf	66,w	;volatile
 11203  140C  0021               	movlb	1	; select bank1
 11204  140D  00B1               	movwf	??_USBStdSetCfgHandler^(0+128)
 11205  140E  0831               	movf	??_USBStdSetCfgHandler^(0+128),w
 11206  140F  00EC               	movwf	_USBActiveConfiguration^(0+128)
 11207                           
 11208                           ;usb_device.c: 2172: if(USBActiveConfiguration == 0)
 11209  1410  08EC               	movf	_USBActiveConfiguration^(0+128),f
 11210  1411  1D03               	skipz
 11211  1412  2C18               	goto	l6457
 11212                           
 11213                           ;usb_device.c: 2173: {
 11214                           ;usb_device.c: 2175: USBDeviceState = ADDRESS_STATE;
 11215  1413  3010               	movlw	16
 11216  1414  00B1               	movwf	??_USBStdSetCfgHandler^(0+128)
 11217  1415  0831               	movf	??_USBStdSetCfgHandler^(0+128),w
 11218  1416  00E3               	movwf	_USBDeviceState^(0+128)
 11219                           
 11220                           ;usb_device.c: 2176: }
 11221  1417  0008               	return
 11222  1418                     l6457:	
 11223                           
 11224                           ;usb_device.c: 2177: else
 11225                           ;usb_device.c: 2178: {
 11226                           ;usb_device.c: 2180: USER_USB_CALLBACK_EVENT_HANDLER(EVENT_CONFIGURED,(void*)&USBActiveC
      +                          onfiguration,1);
 11227  1418  3001               	movlw	1
 11228  1419  00AC               	movwf	?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)
 11229  141A  3000               	movlw	0
 11230  141B  00AD               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)+1)
 11231  141C  30EC               	movlw	_USBActiveConfiguration& (0+255)
 11232  141D  00B1               	movwf	??_USBStdSetCfgHandler^(0+128)
 11233  141E  0831               	movf	??_USBStdSetCfgHandler^(0+128),w
 11234  141F  00AE               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER+2)^(0+128)
 11235  1420  3001               	movlw	1
 11236  1421  00AF               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)+3)
 11237  1422  3000               	movlw	0
 11238  1423  00B0               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)+4)
 11239  1424  319D  25F4         	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
 11240                           
 11241                           ;usb_device.c: 2185: USBDeviceState = CONFIGURED_STATE;
 11242  1426  3020               	movlw	32
 11243  1427  0021               	movlb	1	; select bank1
 11244  1428  00B1               	movwf	??_USBStdSetCfgHandler^(0+128)
 11245  1429  0831               	movf	??_USBStdSetCfgHandler^(0+128),w
 11246  142A  00E3               	movwf	_USBDeviceState^(0+128)
 11247  142B  0008               	return
 11248  142C                     __end_of_USBStdSetCfgHandler:	
 11249                           
 11250                           	psect	text39
 11251  1CCC                     __ptext39:	
 11252 ;; *************** function _memset *****************
 11253 ;; Defined at:
 11254 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.20\sources\common\memset.c"
 11255 ;; Parameters:    Size  Location     Type
 11256 ;;  p1              1    wreg     PTR void 
 11257 ;;		 -> USBAlternateInterface(1), BDT(32), 
 11258 ;;  c               2   14[BANK0 ] int 
 11259 ;;  n               2   16[BANK0 ] unsigned int 
 11260 ;; Auto vars:     Size  Location     Type
 11261 ;;  p1              1    1[BANK1 ] PTR void 
 11262 ;;		 -> USBAlternateInterface(1), BDT(32), 
 11263 ;;  p               1    2[BANK1 ] PTR unsigned char 
 11264 ;;		 -> USBAlternateInterface(1), BDT(32), 
 11265 ;; Return value:  Size  Location     Type
 11266 ;;                  1    wreg      PTR void 
 11267 ;; Registers used:
 11268 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11269 ;; Tracked objects:
 11270 ;;		On entry : 0/0
 11271 ;;		On exit  : 0/0
 11272 ;;		Unchanged: 0/0
 11273 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11274 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11275 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
 11276 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 11277 ;;      Totals:         0       4       3       0       0       0       0       0       0       0       0       0       
      +0       0
 11278 ;;Total ram usage:        7 bytes
 11279 ;; Hardware stack levels used:    1
 11280 ;; Hardware stack levels required when called:    4
 11281 ;; This function calls:
 11282 ;;		Nothing
 11283 ;; This function is called by:
 11284 ;;		_USBStdSetCfgHandler
 11285 ;; This function uses a non-reentrant model
 11286 ;;
 11287                           
 11288                           
 11289                           ;psect for function _memset
 11290  1CCC                     _memset:	
 11291                           
 11292                           ;incstack = 0
 11293                           ; Regs used in _memset: [wreg+fsr1l+fsr1h+status,2+status,0]
 11294                           ;memset@p1 stored from wreg
 11295  1CCC  0021               	movlb	1	; select bank1
 11296  1CCD  00A1               	movwf	memset@p1^(0+128)
 11297  1CCE  0821               	movf	memset@p1^(0+128),w
 11298  1CCF  00A0               	movwf	??_memset^(0+128)
 11299  1CD0  0820               	movf	??_memset^(0+128),w
 11300  1CD1  00A2               	movwf	memset@p^(0+128)
 11301  1CD2                     l4713:	
 11302  1CD2  3001               	movlw	1
 11303  1CD3  0020               	movlb	0	; select bank0
 11304  1CD4  02E0               	subwf	memset@n,f
 11305  1CD5  3000               	movlw	0
 11306  1CD6  3BE1               	subwfb	memset@n+1,f
 11307  1CD7  30FF               	movlw	255
 11308  1CD8  0661               	xorwf	memset@n+1,w
 11309  1CD9  1D03               	skipz
 11310  1CDA  2CDD               	goto	u4205
 11311  1CDB  30FF               	movlw	255
 11312  1CDC  0660               	xorwf	memset@n,w
 11313  1CDD                     u4205:	
 11314  1CDD  1903               	btfsc	3,2
 11315  1CDE  0008               	return
 11316  1CDF  0020               	movlb	0	; select bank0
 11317  1CE0  085E               	movf	memset@c,w
 11318  1CE1  0021               	movlb	1	; select bank1
 11319  1CE2  00A0               	movwf	??_memset^(0+128)
 11320  1CE3  0822               	movf	memset@p^(0+128),w
 11321  1CE4  0086               	movwf	6
 11322  1CE5  0187               	clrf	7
 11323  1CE6  0820               	movf	??_memset^(0+128),w
 11324  1CE7  0081               	movwf	1
 11325  1CE8  3001               	movlw	1
 11326  1CE9  00A0               	movwf	??_memset^(0+128)
 11327  1CEA  0820               	movf	??_memset^(0+128),w
 11328  1CEB  07A2               	addwf	memset@p^(0+128),f
 11329  1CEC  2CD2               	goto	l4713
 11330  1CED                     __end_of_memset:	
 11331                           ;	Return value of _memset is never used
 11332                           
 11333                           
 11334                           	psect	text40
 11335  15B9                     __ptext40:	
 11336 ;; *************** function _USBCtrlEPServiceComplete *****************
 11337 ;; Defined at:
 11338 ;;		line 1786 in file "../USB/usb_device.c"
 11339 ;; Parameters:    Size  Location     Type
 11340 ;;		None
 11341 ;; Auto vars:     Size  Location     Type
 11342 ;;		None
 11343 ;; Return value:  Size  Location     Type
 11344 ;;		None               void
 11345 ;; Registers used:
 11346 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11347 ;; Tracked objects:
 11348 ;;		On entry : 0/0
 11349 ;;		On exit  : 0/0
 11350 ;;		Unchanged: 0/0
 11351 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11352 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11353 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11354 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
 11355 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
 11356 ;;Total ram usage:        2 bytes
 11357 ;; Hardware stack levels used:    1
 11358 ;; Hardware stack levels required when called:    6
 11359 ;; This function calls:
 11360 ;;		_USBCtrlEPAllowStatusStage
 11361 ;;		_USBCtrlEPAllowDataStage
 11362 ;; This function is called by:
 11363 ;;		_USBCtrlTrfSetupHandler
 11364 ;; This function uses a non-reentrant model
 11365 ;;
 11366                           
 11367                           
 11368                           ;psect for function _USBCtrlEPServiceComplete
 11369  15B9                     _USBCtrlEPServiceComplete:	
 11370                           
 11371                           ;usb_device.c: 1791: UCONbits.PKTDIS = 0;
 11372                           
 11373                           ;incstack = 0
 11374                           ; Regs used in _USBCtrlEPServiceComplete: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11375  15B9  003D               	movlb	29	; select bank29
 11376  15BA  120E               	bcf	14,4	;volatile
 11377                           
 11378                           ;usb_device.c: 1797: if(inPipes[0].info.bits.busy == 0)
 11379  15BB  0021               	movlb	1	; select bank1
 11380  15BC  1BE9               	btfsc	(_inPipes^(0+128)+2),7
 11381  15BD  2DFA               	goto	l208
 11382                           
 11383                           ;usb_device.c: 1798: {
 11384                           ;usb_device.c: 1799: if(outPipes[0].info.bits.busy == 1)
 11385  15BE  0023               	movlb	3	; select bank3
 11386  15BF  1FC9               	btfss	(_outPipes^(0+384)+2),7
 11387  15C0  2DD1               	goto	l4585
 11388                           
 11389                           ;usb_device.c: 1800: {
 11390                           ;usb_device.c: 1801: controlTransferState = 2;
 11391  15C1  3002               	movlw	2
 11392  15C2  0021               	movlb	1	; select bank1
 11393  15C3  00A2               	movwf	??_USBCtrlEPServiceComplete^(0+128)
 11394  15C4  0822               	movf	??_USBCtrlEPServiceComplete^(0+128),w
 11395  15C5  0020               	movlb	0	; select bank0
 11396  15C6  00E9               	movwf	_controlTransferState
 11397                           
 11398                           ;usb_device.c: 1812: if(USBDeferOUTDataStagePackets == FALSE)
 11399  15C7  0022               	movlb	2	; select bank2
 11400  15C8  08E7               	movf	_USBDeferOUTDataStagePackets^(0+256),f
 11401  15C9  1D03               	skipz
 11402  15CA  2DCD               	goto	l4581
 11403                           
 11404                           ;usb_device.c: 1813: {
 11405                           ;usb_device.c: 1814: USBCtrlEPAllowDataStage();
 11406  15CB  319F  27A9         	fcall	_USBCtrlEPAllowDataStage
 11407  15CD                     l4581:	
 11408                           
 11409                           ;usb_device.c: 1815: }
 11410                           ;usb_device.c: 1819: USBStatusStageEnabledFlag2 = FALSE;
 11411  15CD  0022               	movlb	2	; select bank2
 11412  15CE  01EB               	clrf	_USBStatusStageEnabledFlag2^(0+256)	;volatile
 11413                           
 11414                           ;usb_device.c: 1820: USBStatusStageEnabledFlag1 = FALSE;
 11415  15CF  01EA               	clrf	_USBStatusStageEnabledFlag1^(0+256)	;volatile
 11416                           
 11417                           ;usb_device.c: 1821: }
 11418  15D0  0008               	return
 11419  15D1                     l4585:	
 11420                           
 11421                           ;usb_device.c: 1822: else
 11422                           ;usb_device.c: 1823: {
 11423                           ;usb_device.c: 1828: pBDTEntryEP0OutNext->CNT = 8;
 11424  15D1  3008               	movlw	8
 11425  15D2  0021               	movlb	1	; select bank1
 11426  15D3  00A2               	movwf	??_USBCtrlEPServiceComplete^(0+128)
 11427  15D4  0020               	movlb	0	; select bank0
 11428  15D5  0A6A               	incf	_pBDTEntryEP0OutNext,w
 11429  15D6  0086               	movwf	6
 11430  15D7  0187               	clrf	7
 11431  15D8  0021               	movlb	1	; select bank1
 11432  15D9  0822               	movf	??_USBCtrlEPServiceComplete^(0+128),w
 11433  15DA  0081               	movwf	1
 11434                           
 11435                           ;usb_device.c: 1829: pBDTEntryEP0OutNext->ADR = (((WORD)(&SetupPkt))& 0x7FFF);
 11436  15DB  3040               	movlw	64
 11437  15DC  00A2               	movwf	??_USBCtrlEPServiceComplete^(0+128)
 11438  15DD  3000               	movlw	0
 11439  15DE  00A3               	movwf	(??_USBCtrlEPServiceComplete^(0+128)+1)
 11440  15DF  0020               	movlb	0	; select bank0
 11441  15E0  086A               	movf	_pBDTEntryEP0OutNext,w
 11442  15E1  3E02               	addlw	2
 11443  15E2  0086               	movwf	6
 11444  15E3  0187               	clrf	7
 11445  15E4  0021               	movlb	1	; select bank1
 11446  15E5  0822               	movf	??_USBCtrlEPServiceComplete^(0+128),w
 11447  15E6  3FC0               	movwi [0]fsr1
 11448  15E7  0823               	movf	(??_USBCtrlEPServiceComplete+1)^(0+128),w
 11449  15E8  3FC1               	movwi [1]fsr1
 11450                           
 11451                           ;usb_device.c: 1830: pBDTEntryEP0OutNext->STAT.Val = 0x80|0x00|(0x08 & 0x08)|0x04;
 11452  15E9  308C               	movlw	140
 11453  15EA  00A2               	movwf	??_USBCtrlEPServiceComplete^(0+128)
 11454  15EB  0020               	movlb	0	; select bank0
 11455  15EC  086A               	movf	_pBDTEntryEP0OutNext,w
 11456  15ED  0086               	movwf	6
 11457  15EE  0187               	clrf	7
 11458  15EF  0021               	movlb	1	; select bank1
 11459  15F0  0822               	movf	??_USBCtrlEPServiceComplete^(0+128),w
 11460  15F1  0081               	movwf	1
 11461                           
 11462                           ;usb_device.c: 1831: pBDTEntryIn[0]->STAT.Val = 0x80|0x04;
 11463  15F2  3084               	movlw	132
 11464  15F3  00A2               	movwf	??_USBCtrlEPServiceComplete^(0+128)
 11465  15F4  0860               	movf	_pBDTEntryIn^(0+128),w
 11466  15F5  0086               	movwf	6
 11467  15F6  0187               	clrf	7
 11468  15F7  0822               	movf	??_USBCtrlEPServiceComplete^(0+128),w
 11469  15F8  0081               	movwf	1
 11470                           
 11471                           ;usb_device.c: 1832: }
 11472                           ;usb_device.c: 1833: }
 11473  15F9  0008               	return
 11474  15FA                     l208:	
 11475                           
 11476                           ;usb_device.c: 1834: else
 11477                           ;usb_device.c: 1835: {
 11478                           ;usb_device.c: 1836: if(SetupPkt.DataDir == (0x80>>7))
 11479  15FA  0020               	movlb	0	; select bank0
 11480  15FB  1FC0               	btfss	64,7	;volatile
 11481  15FC  2E10               	goto	l4601
 11482                           
 11483                           ;usb_device.c: 1837: {
 11484                           ;usb_device.c: 1838: controlTransferState = 1;
 11485  15FD  01E9               	clrf	_controlTransferState
 11486  15FE  0AE9               	incf	_controlTransferState,f
 11487                           
 11488                           ;usb_device.c: 1852: if(USBDeferINDataStagePackets == FALSE)
 11489  15FF  0022               	movlb	2	; select bank2
 11490  1600  08E6               	movf	_USBDeferINDataStagePackets^(0+256),f
 11491  1601  1D03               	skipz
 11492  1602  2E06               	goto	l4593
 11493                           
 11494                           ;usb_device.c: 1853: {
 11495                           ;usb_device.c: 1854: USBCtrlEPAllowDataStage();
 11496  1603  319F  27A9  3195   	fcall	_USBCtrlEPAllowDataStage
 11497  1606                     l4593:	
 11498                           
 11499                           ;usb_device.c: 1855: }
 11500                           ;usb_device.c: 1877: USBStatusStageEnabledFlag2 = FALSE;
 11501  1606  0022               	movlb	2	; select bank2
 11502  1607  01EB               	clrf	_USBStatusStageEnabledFlag2^(0+256)	;volatile
 11503                           
 11504                           ;usb_device.c: 1878: USBStatusStageEnabledFlag1 = FALSE;
 11505  1608  01EA               	clrf	_USBStatusStageEnabledFlag1^(0+256)	;volatile
 11506                           
 11507                           ;usb_device.c: 1879: if(USBDeferStatusStagePacket == FALSE)
 11508  1609  0020               	movlb	0	; select bank0
 11509  160A  08E8               	movf	_USBDeferStatusStagePacket,f
 11510  160B  1D03               	skipz
 11511  160C  0008               	return
 11512                           
 11513                           ;usb_device.c: 1880: {
 11514                           ;usb_device.c: 1881: USBCtrlEPAllowStatusStage();
 11515  160D  3191  21D3         	fcall	_USBCtrlEPAllowStatusStage
 11516                           
 11517                           ;usb_device.c: 1882: }
 11518                           ;usb_device.c: 1883: }
 11519  160F  0008               	return
 11520  1610                     l4601:	
 11521                           
 11522                           ;usb_device.c: 1884: else
 11523                           ;usb_device.c: 1885: {
 11524                           ;usb_device.c: 1896: controlTransferState = 2;
 11525  1610  3002               	movlw	2
 11526  1611  0021               	movlb	1	; select bank1
 11527  1612  00A2               	movwf	??_USBCtrlEPServiceComplete^(0+128)
 11528  1613  0822               	movf	??_USBCtrlEPServiceComplete^(0+128),w
 11529  1614  0020               	movlb	0	; select bank0
 11530  1615  00E9               	movwf	_controlTransferState
 11531                           
 11532                           ;usb_device.c: 1899: pBDTEntryEP0OutNext->CNT = 8;
 11533  1616  3008               	movlw	8
 11534  1617  0021               	movlb	1	; select bank1
 11535  1618  00A2               	movwf	??_USBCtrlEPServiceComplete^(0+128)
 11536  1619  0020               	movlb	0	; select bank0
 11537  161A  0A6A               	incf	_pBDTEntryEP0OutNext,w
 11538  161B  0086               	movwf	6
 11539  161C  0187               	clrf	7
 11540  161D  0021               	movlb	1	; select bank1
 11541  161E  0822               	movf	??_USBCtrlEPServiceComplete^(0+128),w
 11542  161F  0081               	movwf	1
 11543                           
 11544                           ;usb_device.c: 1900: pBDTEntryEP0OutNext->ADR = (((WORD)(&SetupPkt))& 0x7FFF);
 11545  1620  3040               	movlw	64
 11546  1621  00A2               	movwf	??_USBCtrlEPServiceComplete^(0+128)
 11547  1622  3000               	movlw	0
 11548  1623  00A3               	movwf	(??_USBCtrlEPServiceComplete^(0+128)+1)
 11549  1624  0020               	movlb	0	; select bank0
 11550  1625  086A               	movf	_pBDTEntryEP0OutNext,w
 11551  1626  3E02               	addlw	2
 11552  1627  0086               	movwf	6
 11553  1628  0187               	clrf	7
 11554  1629  0021               	movlb	1	; select bank1
 11555  162A  0822               	movf	??_USBCtrlEPServiceComplete^(0+128),w
 11556  162B  3FC0               	movwi [0]fsr1
 11557  162C  0823               	movf	(??_USBCtrlEPServiceComplete+1)^(0+128),w
 11558  162D  3FC1               	movwi [1]fsr1
 11559                           
 11560                           ;usb_device.c: 1901: pBDTEntryEP0OutNext->STAT.Val = 0x80|0x04;
 11561  162E  3084               	movlw	132
 11562  162F  00A2               	movwf	??_USBCtrlEPServiceComplete^(0+128)
 11563  1630  0020               	movlb	0	; select bank0
 11564  1631  086A               	movf	_pBDTEntryEP0OutNext,w
 11565  1632  0086               	movwf	6
 11566  1633  0187               	clrf	7
 11567  1634  0021               	movlb	1	; select bank1
 11568  1635  0822               	movf	??_USBCtrlEPServiceComplete^(0+128),w
 11569  1636  0081               	movwf	1
 11570                           
 11571                           ;usb_device.c: 1904: USBStatusStageEnabledFlag2 = FALSE;
 11572  1637  0022               	movlb	2	; select bank2
 11573  1638  01EB               	clrf	_USBStatusStageEnabledFlag2^(0+256)	;volatile
 11574                           
 11575                           ;usb_device.c: 1905: USBStatusStageEnabledFlag1 = FALSE;
 11576  1639  01EA               	clrf	_USBStatusStageEnabledFlag1^(0+256)	;volatile
 11577                           
 11578                           ;usb_device.c: 1906: if(USBDeferStatusStagePacket == FALSE)
 11579  163A  0020               	movlb	0	; select bank0
 11580  163B  08E8               	movf	_USBDeferStatusStagePacket,f
 11581  163C  1D03               	skipz
 11582  163D  0008               	return
 11583                           
 11584                           ;usb_device.c: 1907: {
 11585                           ;usb_device.c: 1908: USBCtrlEPAllowStatusStage();
 11586  163E  3191  21D3         	fcall	_USBCtrlEPAllowStatusStage
 11587  1640  0008               	return
 11588  1641                     __end_of_USBCtrlEPServiceComplete:	
 11589                           
 11590                           	psect	text41
 11591  1FA9                     __ptext41:	
 11592 ;; *************** function _USBCtrlEPAllowDataStage *****************
 11593 ;; Defined at:
 11594 ;;		line 1660 in file "../USB/usb_device.c"
 11595 ;; Parameters:    Size  Location     Type
 11596 ;;		None
 11597 ;; Auto vars:     Size  Location     Type
 11598 ;;		None
 11599 ;; Return value:  Size  Location     Type
 11600 ;;		None               void
 11601 ;; Registers used:
 11602 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11603 ;; Tracked objects:
 11604 ;;		On entry : 0/0
 11605 ;;		On exit  : 0/0
 11606 ;;		Unchanged: 0/0
 11607 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11608 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11609 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11610 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
 11611 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
 11612 ;;Total ram usage:        2 bytes
 11613 ;; Hardware stack levels used:    1
 11614 ;; Hardware stack levels required when called:    5
 11615 ;; This function calls:
 11616 ;;		_USBCtrlTrfTxService
 11617 ;; This function is called by:
 11618 ;;		_USBCtrlEPServiceComplete
 11619 ;; This function uses a non-reentrant model
 11620 ;;
 11621                           
 11622                           
 11623                           ;psect for function _USBCtrlEPAllowDataStage
 11624  1FA9                     _USBCtrlEPAllowDataStage:	
 11625                           
 11626                           ;usb_device.c: 1661: USBDeferINDataStagePackets = FALSE;
 11627                           
 11628                           ;incstack = 0
 11629                           ; Regs used in _USBCtrlEPAllowDataStage: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11630  1FA9  0022               	movlb	2	; select bank2
 11631  1FAA  01E6               	clrf	_USBDeferINDataStagePackets^(0+256)	;volatile
 11632                           
 11633                           ;usb_device.c: 1662: USBDeferOUTDataStagePackets = FALSE;
 11634  1FAB  01E7               	clrf	_USBDeferOUTDataStagePackets^(0+256)	;volatile
 11635                           
 11636                           ;usb_device.c: 1664: if(controlTransferState == 2)
 11637  1FAC  0020               	movlb	0	; select bank0
 11638  1FAD  0869               	movf	_controlTransferState,w
 11639  1FAE  3A02               	xorlw	2
 11640  1FAF  1D03               	skipz
 11641  1FB0  2FD3               	goto	l4519
 11642                           
 11643                           ;usb_device.c: 1665: {
 11644                           ;usb_device.c: 1667: pBDTEntryEP0OutNext->CNT = 8;
 11645  1FB1  3008               	movlw	8
 11646  1FB2  0021               	movlb	1	; select bank1
 11647  1FB3  00A0               	movwf	??_USBCtrlEPAllowDataStage^(0+128)
 11648  1FB4  0020               	movlb	0	; select bank0
 11649  1FB5  0A6A               	incf	_pBDTEntryEP0OutNext,w
 11650  1FB6  0086               	movwf	6
 11651  1FB7  0187               	clrf	7
 11652  1FB8  0021               	movlb	1	; select bank1
 11653  1FB9  0820               	movf	??_USBCtrlEPAllowDataStage^(0+128),w
 11654  1FBA  0081               	movwf	1
 11655                           
 11656                           ;usb_device.c: 1668: pBDTEntryEP0OutNext->ADR = (((WORD)(&CtrlTrfData))& 0x7FFF);
 11657  1FBB  3048               	movlw	72
 11658  1FBC  00A0               	movwf	??_USBCtrlEPAllowDataStage^(0+128)
 11659  1FBD  3000               	movlw	0
 11660  1FBE  00A1               	movwf	(??_USBCtrlEPAllowDataStage^(0+128)+1)
 11661  1FBF  0020               	movlb	0	; select bank0
 11662  1FC0  086A               	movf	_pBDTEntryEP0OutNext,w
 11663  1FC1  3E02               	addlw	2
 11664  1FC2  0086               	movwf	6
 11665  1FC3  0187               	clrf	7
 11666  1FC4  0021               	movlb	1	; select bank1
 11667  1FC5  0820               	movf	??_USBCtrlEPAllowDataStage^(0+128),w
 11668  1FC6  3FC0               	movwi [0]fsr1
 11669  1FC7  0821               	movf	(??_USBCtrlEPAllowDataStage+1)^(0+128),w
 11670  1FC8  3FC1               	movwi [1]fsr1
 11671                           
 11672                           ;usb_device.c: 1669: pBDTEntryEP0OutNext->STAT.Val = 0x80|0x40|(0x08 & 0x08);
 11673  1FC9  30C8               	movlw	200
 11674  1FCA  00A0               	movwf	??_USBCtrlEPAllowDataStage^(0+128)
 11675  1FCB  0020               	movlb	0	; select bank0
 11676  1FCC  086A               	movf	_pBDTEntryEP0OutNext,w
 11677  1FCD  0086               	movwf	6
 11678  1FCE  0187               	clrf	7
 11679  1FCF  0021               	movlb	1	; select bank1
 11680  1FD0  0820               	movf	??_USBCtrlEPAllowDataStage^(0+128),w
 11681  1FD1  0081               	movwf	1
 11682                           
 11683                           ;usb_device.c: 1670: }
 11684  1FD2  0008               	return
 11685  1FD3                     l4519:	
 11686                           
 11687                           ;usb_device.c: 1671: else
 11688                           ;usb_device.c: 1672: {
 11689                           ;usb_device.c: 1675: if(SetupPkt.wLength < inPipes[0].wCount.Val)
 11690  1FD3  0021               	movlb	1	; select bank1
 11691  1FD4  086B               	movf	((_inPipes+1)^(0+128)+3),w
 11692  1FD5  0020               	movlb	0	; select bank0
 11693  1FD6  0247               	subwf	71,w	;volatile
 11694  1FD7  1D03               	skipz
 11695  1FD8  2FDD               	goto	u3955
 11696  1FD9  0021               	movlb	1	; select bank1
 11697  1FDA  086A               	movf	(_inPipes^(0+128)+3),w
 11698  1FDB  0020               	movlb	0	; select bank0
 11699  1FDC  0246               	subwf	70,w	;volatile
 11700  1FDD                     u3955:	
 11701  1FDD  1803               	skipnc
 11702  1FDE  2FE8               	goto	l4523
 11703                           
 11704                           ;usb_device.c: 1676: {
 11705                           ;usb_device.c: 1677: inPipes[0].wCount.Val = SetupPkt.wLength;
 11706  1FDF  0847               	movf	71,w	;volatile
 11707  1FE0  0021               	movlb	1	; select bank1
 11708  1FE1  01EB               	clrf	((_inPipes+1)^(0+128)+3)
 11709  1FE2  07EB               	addwf	((_inPipes+1)^(0+128)+3),f
 11710  1FE3  0020               	movlb	0	; select bank0
 11711  1FE4  0846               	movf	70,w	;volatile
 11712  1FE5  0021               	movlb	1	; select bank1
 11713  1FE6  01EA               	clrf	(_inPipes^(0+128)+3)
 11714  1FE7  07EA               	addwf	(_inPipes^(0+128)+3),f
 11715  1FE8                     l4523:	
 11716                           
 11717                           ;usb_device.c: 1678: }
 11718                           ;usb_device.c: 1679: USBCtrlTrfTxService();
 11719  1FE8  3194  24AE  319F   	fcall	_USBCtrlTrfTxService
 11720                           
 11721                           ;usb_device.c: 1684: pBDTEntryIn[0]->ADR = (((WORD)(&CtrlTrfData))& 0x7FFF);
 11722  1FEB  3048               	movlw	72
 11723  1FEC  0021               	movlb	1	; select bank1
 11724  1FED  00A0               	movwf	??_USBCtrlEPAllowDataStage^(0+128)
 11725  1FEE  3000               	movlw	0
 11726  1FEF  00A1               	movwf	(??_USBCtrlEPAllowDataStage^(0+128)+1)
 11727  1FF0  0860               	movf	_pBDTEntryIn^(0+128),w
 11728  1FF1  3E02               	addlw	2
 11729  1FF2  0086               	movwf	6
 11730  1FF3  0187               	clrf	7
 11731  1FF4  0820               	movf	??_USBCtrlEPAllowDataStage^(0+128),w
 11732  1FF5  3FC0               	movwi [0]fsr1
 11733  1FF6  0821               	movf	(??_USBCtrlEPAllowDataStage+1)^(0+128),w
 11734  1FF7  3FC1               	movwi [1]fsr1
 11735                           
 11736                           ;usb_device.c: 1685: pBDTEntryIn[0]->STAT.Val = 0x80|0x40|(0x08 & 0x08);
 11737  1FF8  30C8               	movlw	200
 11738  1FF9  00A0               	movwf	??_USBCtrlEPAllowDataStage^(0+128)
 11739  1FFA  0860               	movf	_pBDTEntryIn^(0+128),w
 11740  1FFB  0086               	movwf	6
 11741  1FFC  0187               	clrf	7
 11742  1FFD  0820               	movf	??_USBCtrlEPAllowDataStage^(0+128),w
 11743  1FFE  0081               	movwf	1
 11744  1FFF  0008               	return
 11745  2000                     __end_of_USBCtrlEPAllowDataStage:	
 11746                           
 11747                           	psect	text42
 11748  14AE                     __ptext42:	
 11749 ;; *************** function _USBCtrlTrfTxService *****************
 11750 ;; Defined at:
 11751 ;;		line 1938 in file "../USB/usb_device.c"
 11752 ;; Parameters:    Size  Location     Type
 11753 ;;		None
 11754 ;; Auto vars:     Size  Location     Type
 11755 ;;  byteToSend      1   16[BANK0 ] unsigned char 
 11756 ;; Return value:  Size  Location     Type
 11757 ;;		None               void
 11758 ;; Registers used:
 11759 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
 11760 ;; Tracked objects:
 11761 ;;		On entry : 0/0
 11762 ;;		On exit  : 0/0
 11763 ;;		Unchanged: 0/0
 11764 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11765 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11766 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11767 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11768 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11769 ;;Total ram usage:        3 bytes
 11770 ;; Hardware stack levels used:    1
 11771 ;; Hardware stack levels required when called:    4
 11772 ;; This function calls:
 11773 ;;		Nothing
 11774 ;; This function is called by:
 11775 ;;		_USBCtrlEPAllowDataStage
 11776 ;;		_USBCtrlTrfInHandler
 11777 ;; This function uses a non-reentrant model
 11778 ;;
 11779                           
 11780                           
 11781                           ;psect for function _USBCtrlTrfTxService
 11782  14AE                     _USBCtrlTrfTxService:	
 11783                           
 11784                           ;usb_device.c: 1939: BYTE byteToSend;
 11785                           ;usb_device.c: 1943: byteToSend = 8;
 11786                           
 11787                           ;incstack = 0
 11788                           ; Regs used in _USBCtrlTrfTxService: [wreg-fsr1h+status,2+status,0+pclath]
 11789  14AE  3008               	movlw	8
 11790  14AF  0020               	movlb	0	; select bank0
 11791  14B0  00DE               	movwf	??_USBCtrlTrfTxService
 11792  14B1  085E               	movf	??_USBCtrlTrfTxService,w
 11793  14B2  00E0               	movwf	USBCtrlTrfTxService@byteToSend
 11794                           
 11795                           ;usb_device.c: 1944: if(inPipes[0].wCount.Val < (BYTE)8)
 11796  14B3  3000               	movlw	0
 11797  14B4  0021               	movlb	1	; select bank1
 11798  14B5  026B               	subwf	((_inPipes+1)^(0+128)+3),w
 11799  14B6  3008               	movlw	8
 11800  14B7  1903               	skipnz
 11801  14B8  026A               	subwf	(_inPipes^(0+128)+3),w
 11802  14B9  1803               	skipnc
 11803  14BA  2CCE               	goto	l4541
 11804                           
 11805                           ;usb_device.c: 1945: {
 11806                           ;usb_device.c: 1946: byteToSend = inPipes[0].wCount.Val;
 11807  14BB  086A               	movf	(_inPipes^(0+128)+3),w
 11808  14BC  0020               	movlb	0	; select bank0
 11809  14BD  00DE               	movwf	??_USBCtrlTrfTxService
 11810  14BE  085E               	movf	??_USBCtrlTrfTxService,w
 11811  14BF  00E0               	movwf	USBCtrlTrfTxService@byteToSend
 11812                           
 11813                           ;usb_device.c: 1953: if(shortPacketStatus == 0)
 11814  14C0  08ED               	movf	_shortPacketStatus,f
 11815  14C1  1D03               	skipz
 11816  14C2  2CC6               	goto	l4537
 11817                           
 11818                           ;usb_device.c: 1954: {
 11819                           ;usb_device.c: 1955: shortPacketStatus = 1;
 11820  14C3  01ED               	clrf	_shortPacketStatus
 11821  14C4  0AED               	incf	_shortPacketStatus,f
 11822                           
 11823                           ;usb_device.c: 1956: }
 11824  14C5  2CCE               	goto	l4541
 11825  14C6                     l4537:	
 11826                           
 11827                           ;usb_device.c: 1957: else if(shortPacketStatus == 1)
 11828  14C6  086D               	movf	_shortPacketStatus,w
 11829  14C7  3A01               	xorlw	1
 11830  14C8  1D03               	skipz
 11831  14C9  2CCE               	goto	l4541
 11832                           
 11833                           ;usb_device.c: 1958: {
 11834                           ;usb_device.c: 1959: shortPacketStatus = 2;
 11835  14CA  3002               	movlw	2
 11836  14CB  00DE               	movwf	??_USBCtrlTrfTxService
 11837  14CC  085E               	movf	??_USBCtrlTrfTxService,w
 11838  14CD  00ED               	movwf	_shortPacketStatus
 11839  14CE                     l4541:	
 11840                           
 11841                           ;usb_device.c: 1960: }
 11842                           ;usb_device.c: 1961: }
 11843                           ;usb_device.c: 1965: inPipes[0].wCount.Val = inPipes[0].wCount.Val - byteToSend;
 11844  14CE  3003               	movlw	3
 11845  14CF  3EE7               	addlw	_inPipes& (0+255)
 11846  14D0  0086               	movwf	6
 11847  14D1  0187               	clrf	7
 11848  14D2  0020               	movlb	0	; select bank0
 11849  14D3  0860               	movf	USBCtrlTrfTxService@byteToSend,w
 11850  14D4  00DE               	movwf	??_USBCtrlTrfTxService
 11851  14D5  01DF               	clrf	??_USBCtrlTrfTxService+1
 11852  14D6  09DE               	comf	??_USBCtrlTrfTxService,f
 11853  14D7  09DF               	comf	??_USBCtrlTrfTxService+1,f
 11854  14D8  0ADE               	incf	??_USBCtrlTrfTxService,f
 11855  14D9  1903               	skipnz
 11856  14DA  0ADF               	incf	??_USBCtrlTrfTxService+1,f
 11857  14DB  3F40               	moviw [0]fsr1
 11858  14DC  075E               	addwf	??_USBCtrlTrfTxService,w
 11859  14DD  0021               	movlb	1	; select bank1
 11860  14DE  00EA               	movwf	(_inPipes^(0+128)+3)
 11861  14DF  3F41               	moviw [1]fsr1
 11862  14E0  0020               	movlb	0	; select bank0
 11863  14E1  3D5F               	addwfc	??_USBCtrlTrfTxService+1,w
 11864  14E2  0021               	movlb	1	; select bank1
 11865  14E3  00EB               	movwf	(_inPipes^(0+128)+4)
 11866                           
 11867                           ;usb_device.c: 1970: pBDTEntryIn[0]->CNT = byteToSend;
 11868  14E4  0020               	movlb	0	; select bank0
 11869  14E5  0860               	movf	USBCtrlTrfTxService@byteToSend,w
 11870  14E6  00DE               	movwf	??_USBCtrlTrfTxService
 11871  14E7  0021               	movlb	1	; select bank1
 11872  14E8  0A60               	incf	_pBDTEntryIn^(0+128),w
 11873  14E9  0086               	movwf	6
 11874  14EA  0187               	clrf	7
 11875  14EB  0020               	movlb	0	; select bank0
 11876  14EC  085E               	movf	??_USBCtrlTrfTxService,w
 11877  14ED  0081               	movwf	1
 11878                           
 11879                           ;usb_device.c: 1974: pDst = ( BYTE*)CtrlTrfData;
 11880  14EE  3048               	movlw	72
 11881  14EF  00DE               	movwf	??_USBCtrlTrfTxService
 11882  14F0  085E               	movf	??_USBCtrlTrfTxService,w
 11883  14F1  00EB               	movwf	_pDst
 11884                           
 11885                           ;usb_device.c: 1975: if(inPipes[0].info.bits.ctrl_trf_mem == 0x00)
 11886  14F2  0021               	movlb	1	; select bank1
 11887  14F3  1C69               	btfss	(_inPipes^(0+128)+2),0
 11888  14F4  2D0F               	goto	l4559
 11889  14F5  2D2D               	goto	l4569
 11890  14F6                     l4551:	
 11891                           ;usb_device.c: 1976: {
 11892                           ;usb_device.c: 1977: while(byteToSend)
 11893                           
 11894                           
 11895                           ;usb_device.c: 1978: {
 11896                           ;usb_device.c: 1979: *pDst++ = *inPipes[0].pSrc.bRom++;
 11897  14F6  0021               	movlb	1	; select bank1
 11898  14F7  0867               	movf	_inPipes^(0+128),w
 11899  14F8  0084               	movwf	4
 11900  14F9  0868               	movf	(_inPipes+1)^(0+128),w
 11901  14FA  0085               	movwf	5
 11902  14FB  0800               	movf	0,w	;code access
 11903  14FC  0020               	movlb	0	; select bank0
 11904  14FD  00DE               	movwf	??_USBCtrlTrfTxService
 11905  14FE  086B               	movf	_pDst,w
 11906  14FF  0086               	movwf	6
 11907  1500  0187               	clrf	7
 11908  1501  085E               	movf	??_USBCtrlTrfTxService,w
 11909  1502  0081               	movwf	1
 11910  1503  3001               	movlw	1
 11911  1504  0021               	movlb	1	; select bank1
 11912  1505  07E7               	addwf	_inPipes^(0+128),f
 11913  1506  3000               	movlw	0
 11914  1507  3DE8               	addwfc	(_inPipes+1)^(0+128),f
 11915  1508  3001               	movlw	1
 11916  1509  0020               	movlb	0	; select bank0
 11917  150A  00DE               	movwf	??_USBCtrlTrfTxService
 11918  150B  085E               	movf	??_USBCtrlTrfTxService,w
 11919  150C  07EB               	addwf	_pDst,f
 11920                           
 11921                           ;usb_device.c: 1980: byteToSend--;
 11922  150D  3001               	movlw	1
 11923  150E  02E0               	subwf	USBCtrlTrfTxService@byteToSend,f
 11924  150F                     l4559:	
 11925  150F  0020               	movlb	0	; select bank0
 11926  1510  08E0               	movf	USBCtrlTrfTxService@byteToSend,f
 11927  1511  1903               	btfsc	3,2
 11928  1512  0008               	return
 11929  1513  2CF6               	goto	l4551
 11930  1514                     l4561:	
 11931                           ;usb_device.c: 1983: else
 11932                           ;usb_device.c: 1984: {
 11933                           ;usb_device.c: 1985: while(byteToSend)
 11934                           
 11935                           ;usb_device.c: 1981: }
 11936                           ;usb_device.c: 1982: }
 11937                           
 11938                           
 11939                           ;usb_device.c: 1986: {
 11940                           ;usb_device.c: 1987: *pDst++ = *inPipes[0].pSrc.bRam++;
 11941  1514  0021               	movlb	1	; select bank1
 11942  1515  0867               	movf	_inPipes^(0+128),w
 11943  1516  0084               	movwf	4
 11944  1517  0868               	movf	(_inPipes+1)^(0+128),w
 11945  1518  0085               	movwf	5
 11946  1519  0800               	movf	0,w	;code access
 11947  151A  0020               	movlb	0	; select bank0
 11948  151B  00DE               	movwf	??_USBCtrlTrfTxService
 11949  151C  086B               	movf	_pDst,w
 11950  151D  0086               	movwf	6
 11951  151E  0187               	clrf	7
 11952  151F  085E               	movf	??_USBCtrlTrfTxService,w
 11953  1520  0081               	movwf	1
 11954  1521  3001               	movlw	1
 11955  1522  0021               	movlb	1	; select bank1
 11956  1523  07E7               	addwf	_inPipes^(0+128),f
 11957  1524  3000               	movlw	0
 11958  1525  3DE8               	addwfc	(_inPipes+1)^(0+128),f
 11959  1526  3001               	movlw	1
 11960  1527  0020               	movlb	0	; select bank0
 11961  1528  00DE               	movwf	??_USBCtrlTrfTxService
 11962  1529  085E               	movf	??_USBCtrlTrfTxService,w
 11963  152A  07EB               	addwf	_pDst,f
 11964                           
 11965                           ;usb_device.c: 1988: byteToSend--;
 11966  152B  3001               	movlw	1
 11967  152C  02E0               	subwf	USBCtrlTrfTxService@byteToSend,f
 11968  152D                     l4569:	
 11969  152D  0020               	movlb	0	; select bank0
 11970  152E  08E0               	movf	USBCtrlTrfTxService@byteToSend,f
 11971  152F  1903               	btfsc	3,2
 11972  1530  0008               	return
 11973  1531  2D14               	goto	l4561
 11974  1532                     __end_of_USBCtrlTrfTxService:	
 11975                           
 11976                           	psect	text43
 11977  11D3                     __ptext43:	
 11978 ;; *************** function _USBCtrlEPAllowStatusStage *****************
 11979 ;; Defined at:
 11980 ;;		line 1590 in file "../USB/usb_device.c"
 11981 ;; Parameters:    Size  Location     Type
 11982 ;;		None
 11983 ;; Auto vars:     Size  Location     Type
 11984 ;;		None
 11985 ;; Return value:  Size  Location     Type
 11986 ;;		None               void
 11987 ;; Registers used:
 11988 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11989 ;; Tracked objects:
 11990 ;;		On entry : 0/0
 11991 ;;		On exit  : 0/0
 11992 ;;		Unchanged: 0/0
 11993 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11994 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11995 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11996 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11997 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11998 ;;Total ram usage:        2 bytes
 11999 ;; Hardware stack levels used:    1
 12000 ;; Hardware stack levels required when called:    4
 12001 ;; This function calls:
 12002 ;;		Nothing
 12003 ;; This function is called by:
 12004 ;;		_USBDeviceTasks
 12005 ;;		_USBCtrlEPServiceComplete
 12006 ;;		_USBCtrlTrfRxService
 12007 ;; This function uses a non-reentrant model
 12008 ;;
 12009                           
 12010                           
 12011                           ;psect for function _USBCtrlEPAllowStatusStage
 12012  11D3                     _USBCtrlEPAllowStatusStage:	
 12013                           
 12014                           ;usb_device.c: 1596: if(USBStatusStageEnabledFlag1 == FALSE)
 12015                           
 12016                           ;incstack = 0
 12017                           ; Regs used in _USBCtrlEPAllowStatusStage: [wreg+fsr1l+fsr1h+status,2+status,0]
 12018  11D3  0022               	movlb	2	; select bank2
 12019  11D4  08EA               	movf	_USBStatusStageEnabledFlag1^(0+256),f
 12020  11D5  1D03               	skipz
 12021  11D6  0008               	return
 12022                           
 12023                           ;usb_device.c: 1597: {
 12024                           ;usb_device.c: 1598: USBStatusStageEnabledFlag1 = TRUE;
 12025  11D7  3001               	movlw	1
 12026  11D8  0020               	movlb	0	; select bank0
 12027  11D9  00DE               	movwf	??_USBCtrlEPAllowStatusStage
 12028  11DA  085E               	movf	??_USBCtrlEPAllowStatusStage,w
 12029  11DB  0022               	movlb	2	; select bank2
 12030  11DC  00EA               	movwf	_USBStatusStageEnabledFlag1^(0+256)	;volatile
 12031                           
 12032                           ;usb_device.c: 1599: if(USBStatusStageEnabledFlag2 == FALSE)
 12033  11DD  08EB               	movf	_USBStatusStageEnabledFlag2^(0+256),f
 12034  11DE  1D03               	skipz
 12035  11DF  0008               	return
 12036                           
 12037                           ;usb_device.c: 1600: {
 12038                           ;usb_device.c: 1601: USBStatusStageEnabledFlag2 = TRUE;
 12039  11E0  3001               	movlw	1
 12040  11E1  0020               	movlb	0	; select bank0
 12041  11E2  00DE               	movwf	??_USBCtrlEPAllowStatusStage
 12042  11E3  085E               	movf	??_USBCtrlEPAllowStatusStage,w
 12043  11E4  0022               	movlb	2	; select bank2
 12044  11E5  00EB               	movwf	_USBStatusStageEnabledFlag2^(0+256)	;volatile
 12045                           
 12046                           ;usb_device.c: 1605: if(controlTransferState == 2)
 12047  11E6  0020               	movlb	0	; select bank0
 12048  11E7  0869               	movf	_controlTransferState,w
 12049  11E8  3A02               	xorlw	2
 12050  11E9  1D03               	skipz
 12051  11EA  29FB               	goto	l4379
 12052                           
 12053                           ;usb_device.c: 1606: {
 12054                           ;usb_device.c: 1607: pBDTEntryIn[0]->CNT = 0;
 12055  11EB  0021               	movlb	1	; select bank1
 12056  11EC  0A60               	incf	_pBDTEntryIn^(0+128),w
 12057  11ED  0086               	movwf	6
 12058  11EE  0187               	clrf	7
 12059  11EF  0181               	clrf	1
 12060                           
 12061                           ;usb_device.c: 1608: pBDTEntryIn[0]->STAT.Val = 0x80|0x40|(0x08 & 0x08);
 12062  11F0  30C8               	movlw	200
 12063  11F1  0020               	movlb	0	; select bank0
 12064  11F2  00DE               	movwf	??_USBCtrlEPAllowStatusStage
 12065  11F3  0021               	movlb	1	; select bank1
 12066  11F4  0860               	movf	_pBDTEntryIn^(0+128),w
 12067  11F5  0086               	movwf	6
 12068  11F6  0187               	clrf	7
 12069  11F7  0020               	movlb	0	; select bank0
 12070  11F8  085E               	movf	??_USBCtrlEPAllowStatusStage,w
 12071  11F9  0081               	movwf	1
 12072                           
 12073                           ;usb_device.c: 1609: }
 12074  11FA  0008               	return
 12075  11FB                     l4379:	
 12076                           
 12077                           ;usb_device.c: 1610: else if(controlTransferState == 1)
 12078  11FB  0869               	movf	_controlTransferState,w
 12079  11FC  3A01               	xorlw	1
 12080  11FD  1D03               	skipz
 12081  11FE  0008               	return
 12082                           
 12083                           ;usb_device.c: 1611: {
 12084                           ;usb_device.c: 1612: BothEP0OutUOWNsSet = FALSE;
 12085  11FF  0022               	movlb	2	; select bank2
 12086  1200  01DD               	clrf	_BothEP0OutUOWNsSet^(0+256)
 12087                           
 12088                           ;usb_device.c: 1617: pBDTEntryEP0OutCurrent->CNT = 8;
 12089  1201  3008               	movlw	8
 12090  1202  0020               	movlb	0	; select bank0
 12091  1203  00DE               	movwf	??_USBCtrlEPAllowStatusStage
 12092  1204  0021               	movlb	1	; select bank1
 12093  1205  0A66               	incf	_pBDTEntryEP0OutCurrent^(0+128),w
 12094  1206  0086               	movwf	6
 12095  1207  0187               	clrf	7
 12096  1208  0020               	movlb	0	; select bank0
 12097  1209  085E               	movf	??_USBCtrlEPAllowStatusStage,w
 12098  120A  0081               	movwf	1
 12099                           
 12100                           ;usb_device.c: 1618: pBDTEntryEP0OutCurrent->ADR = (((WORD)(&SetupPkt))& 0x7FFF);
 12101  120B  3040               	movlw	64
 12102  120C  00DE               	movwf	??_USBCtrlEPAllowStatusStage
 12103  120D  3000               	movlw	0
 12104  120E  00DF               	movwf	??_USBCtrlEPAllowStatusStage+1
 12105  120F  0021               	movlb	1	; select bank1
 12106  1210  0866               	movf	_pBDTEntryEP0OutCurrent^(0+128),w
 12107  1211  3E02               	addlw	2
 12108  1212  0086               	movwf	6
 12109  1213  0187               	clrf	7
 12110  1214  0020               	movlb	0	; select bank0
 12111  1215  085E               	movf	??_USBCtrlEPAllowStatusStage,w
 12112  1216  3FC0               	movwi [0]fsr1
 12113  1217  085F               	movf	??_USBCtrlEPAllowStatusStage+1,w
 12114  1218  3FC1               	movwi [1]fsr1
 12115                           
 12116                           ;usb_device.c: 1619: pBDTEntryEP0OutCurrent->STAT.Val = 0x80|0x04;
 12117  1219  3084               	movlw	132
 12118  121A  00DE               	movwf	??_USBCtrlEPAllowStatusStage
 12119  121B  0021               	movlb	1	; select bank1
 12120  121C  0866               	movf	_pBDTEntryEP0OutCurrent^(0+128),w
 12121  121D  0086               	movwf	6
 12122  121E  0187               	clrf	7
 12123  121F  0020               	movlb	0	; select bank0
 12124  1220  085E               	movf	??_USBCtrlEPAllowStatusStage,w
 12125  1221  0081               	movwf	1
 12126                           
 12127                           ;usb_device.c: 1620: BothEP0OutUOWNsSet = TRUE;
 12128  1222  0022               	movlb	2	; select bank2
 12129  1223  01DD               	clrf	_BothEP0OutUOWNsSet^(0+256)
 12130  1224  0ADD               	incf	_BothEP0OutUOWNsSet^(0+256),f
 12131                           
 12132                           ;usb_device.c: 1624: pBDTEntryEP0OutNext->CNT = 8;
 12133  1225  3008               	movlw	8
 12134  1226  0020               	movlb	0	; select bank0
 12135  1227  00DE               	movwf	??_USBCtrlEPAllowStatusStage
 12136  1228  0A6A               	incf	_pBDTEntryEP0OutNext,w
 12137  1229  0086               	movwf	6
 12138  122A  0187               	clrf	7
 12139  122B  085E               	movf	??_USBCtrlEPAllowStatusStage,w
 12140  122C  0081               	movwf	1
 12141                           
 12142                           ;usb_device.c: 1625: pBDTEntryEP0OutNext->ADR = (((WORD)(&SetupPkt))& 0x7FFF);
 12143  122D  3040               	movlw	64
 12144  122E  00DE               	movwf	??_USBCtrlEPAllowStatusStage
 12145  122F  3000               	movlw	0
 12146  1230  00DF               	movwf	??_USBCtrlEPAllowStatusStage+1
 12147  1231  086A               	movf	_pBDTEntryEP0OutNext,w
 12148  1232  3E02               	addlw	2
 12149  1233  0086               	movwf	6
 12150  1234  0187               	clrf	7
 12151  1235  085E               	movf	??_USBCtrlEPAllowStatusStage,w
 12152  1236  3FC0               	movwi [0]fsr1
 12153  1237  085F               	movf	??_USBCtrlEPAllowStatusStage+1,w
 12154  1238  3FC1               	movwi [1]fsr1
 12155                           
 12156                           ;usb_device.c: 1626: pBDTEntryEP0OutNext->STAT.Val = 0x80;
 12157  1239  3080               	movlw	128
 12158  123A  00DE               	movwf	??_USBCtrlEPAllowStatusStage
 12159  123B  086A               	movf	_pBDTEntryEP0OutNext,w
 12160  123C  0086               	movwf	6
 12161  123D  0187               	clrf	7
 12162  123E  085E               	movf	??_USBCtrlEPAllowStatusStage,w
 12163  123F  0081               	movwf	1
 12164  1240  0008               	return
 12165  1241                     __end_of_USBCtrlEPAllowStatusStage:	
 12166                           
 12167                           	psect	text44
 12168  1CED                     __ptext44:	
 12169 ;; *************** function _USBStallHandler *****************
 12170 ;; Defined at:
 12171 ;;		line 2356 in file "../USB/usb_device.c"
 12172 ;; Parameters:    Size  Location     Type
 12173 ;;		None
 12174 ;; Auto vars:     Size  Location     Type
 12175 ;;		None
 12176 ;; Return value:  Size  Location     Type
 12177 ;;		None               void
 12178 ;; Registers used:
 12179 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12180 ;; Tracked objects:
 12181 ;;		On entry : 0/0
 12182 ;;		On exit  : 0/0
 12183 ;;		Unchanged: 0/0
 12184 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12185 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12186 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12187 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12188 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12189 ;;Total ram usage:        1 bytes
 12190 ;; Hardware stack levels used:    1
 12191 ;; Hardware stack levels required when called:    4
 12192 ;; This function calls:
 12193 ;;		Nothing
 12194 ;; This function is called by:
 12195 ;;		_USBDeviceTasks
 12196 ;; This function uses a non-reentrant model
 12197 ;;
 12198                           
 12199                           
 12200                           ;psect for function _USBStallHandler
 12201  1CED                     _USBStallHandler:	
 12202                           
 12203                           ;usb_device.c: 2368: if(UEP0bits.EPSTALL == 1)
 12204                           
 12205                           ;incstack = 0
 12206                           ; Regs used in _USBStallHandler: [wreg+fsr1l+fsr1h+status,2+status,0]
 12207  1CED  003D               	movlb	29	; select bank29
 12208  1CEE  1C18               	btfss	24,0	;volatile
 12209  1CEF  2D0B               	goto	l4407
 12210                           
 12211                           ;usb_device.c: 2369: {
 12212                           ;usb_device.c: 2371: if((pBDTEntryEP0OutCurrent->STAT.Val == 0x80) && (pBDTEntryIn[0]->S
      +                          TAT.Val == (0x80|0x04)))
 12213  1CF0  0021               	movlb	1	; select bank1
 12214  1CF1  0866               	movf	_pBDTEntryEP0OutCurrent^(0+128),w
 12215  1CF2  0086               	movwf	6
 12216  1CF3  0187               	clrf	7
 12217  1CF4  0801               	movf	1,w
 12218  1CF5  3A80               	xorlw	128
 12219  1CF6  1D03               	skipz
 12220  1CF7  2D09               	goto	l4405
 12221  1CF8  0860               	movf	_pBDTEntryIn^(0+128),w
 12222  1CF9  0086               	movwf	6
 12223  1CFA  0187               	clrf	7
 12224  1CFB  0801               	movf	1,w
 12225  1CFC  3A84               	xorlw	132
 12226  1CFD  1D03               	skipz
 12227  1CFE  2D09               	goto	l4405
 12228                           
 12229                           ;usb_device.c: 2372: {
 12230                           ;usb_device.c: 2374: pBDTEntryEP0OutCurrent->STAT.Val = 0x80|0x00|(0x08 & 0x08)|0x04;
 12231  1CFF  308C               	movlw	140
 12232  1D00  0020               	movlb	0	; select bank0
 12233  1D01  00DE               	movwf	??_USBStallHandler
 12234  1D02  0021               	movlb	1	; select bank1
 12235  1D03  0866               	movf	_pBDTEntryEP0OutCurrent^(0+128),w
 12236  1D04  0086               	movwf	6
 12237  1D05  0187               	clrf	7
 12238  1D06  0020               	movlb	0	; select bank0
 12239  1D07  085E               	movf	??_USBStallHandler,w
 12240  1D08  0081               	movwf	1
 12241  1D09                     l4405:	
 12242                           
 12243                           ;usb_device.c: 2375: }
 12244                           ;usb_device.c: 2376: UEP0bits.EPSTALL = 0;
 12245  1D09  003D               	movlb	29	; select bank29
 12246  1D0A  1018               	bcf	24,0	;volatile
 12247  1D0B                     l4407:	
 12248                           
 12249                           ;usb_device.c: 2377: }
 12250                           ;usb_device.c: 2379: (UIR &= 0xDF);
 12251  1D0B  30DF               	movlw	223
 12252  1D0C  0020               	movlb	0	; select bank0
 12253  1D0D  00DE               	movwf	??_USBStallHandler
 12254  1D0E  085E               	movf	??_USBStallHandler,w
 12255  1D0F  003D               	movlb	29	; select bank29
 12256  1D10  0590               	andwf	16,f	;volatile
 12257  1D11  0008               	return
 12258  1D12                     __end_of_USBStallHandler:	
 12259                           
 12260                           	psect	text45
 12261  1C24                     __ptext45:	
 12262 ;; *************** function _USBSuspend *****************
 12263 ;; Defined at:
 12264 ;;		line 2399 in file "../USB/usb_device.c"
 12265 ;; Parameters:    Size  Location     Type
 12266 ;;		None
 12267 ;; Auto vars:     Size  Location     Type
 12268 ;;		None
 12269 ;; Return value:  Size  Location     Type
 12270 ;;		None               void
 12271 ;; Registers used:
 12272 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
 12273 ;; Tracked objects:
 12274 ;;		On entry : 0/0
 12275 ;;		On exit  : 0/0
 12276 ;;		Unchanged: 0/0
 12277 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12278 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12279 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12280 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 12281 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 12282 ;;Total ram usage:        1 bytes
 12283 ;; Hardware stack levels used:    1
 12284 ;; Hardware stack levels required when called:    8
 12285 ;; This function calls:
 12286 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 12287 ;; This function is called by:
 12288 ;;		_USBDeviceTasks
 12289 ;; This function uses a non-reentrant model
 12290 ;;
 12291                           
 12292                           
 12293                           ;psect for function _USBSuspend
 12294  1C24                     _USBSuspend:	
 12295                           
 12296                           ;usb_device.c: 2423: UIEbits.ACTVIE = 1;
 12297                           
 12298                           ;incstack = 0
 12299                           ; Regs used in _USBSuspend: [allreg]
 12300  1C24  003D               	movlb	29	; select bank29
 12301  1C25  1512               	bsf	18,2	;volatile
 12302                           
 12303                           ;usb_device.c: 2424: (UIR &= 0xEF);
 12304  1C26  30EF               	movlw	239
 12305  1C27  0021               	movlb	1	; select bank1
 12306  1C28  00B1               	movwf	??_USBSuspend^(0+128)
 12307  1C29  0831               	movf	??_USBSuspend^(0+128),w
 12308  1C2A  003D               	movlb	29	; select bank29
 12309  1C2B  0590               	andwf	16,f	;volatile
 12310                           
 12311                           ;usb_device.c: 2427: UCONbits.SUSPND = 1;
 12312  1C2C  148E               	bsf	14,1	;volatile
 12313                           
 12314                           ;usb_device.c: 2430: USBBusIsSuspended = TRUE;
 12315  1C2D  0022               	movlb	2	; select bank2
 12316  1C2E  01E5               	clrf	_USBBusIsSuspended^(0+256)
 12317  1C2F  0AE5               	incf	_USBBusIsSuspended^(0+256),f
 12318                           
 12319                           ;usb_device.c: 2437: USER_USB_CALLBACK_EVENT_HANDLER(EVENT_SUSPEND,0,0);
 12320  1C30  3075               	movlw	117
 12321  1C31  0021               	movlb	1	; select bank1
 12322  1C32  00AC               	movwf	?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)
 12323  1C33  3000               	movlw	0
 12324  1C34  00AD               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)+1)
 12325  1C35  01AE               	clrf	(?_USER_USB_CALLBACK_EVENT_HANDLER+2)^(0+128)
 12326  1C36  3000               	movlw	0
 12327  1C37  00AF               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)+3)
 12328  1C38  3000               	movlw	0
 12329  1C39  00B0               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)+4)
 12330  1C3A  319D  25F4         	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
 12331  1C3C  0008               	return
 12332  1C3D                     __end_of_USBSuspend:	
 12333                           
 12334                           	psect	text46
 12335  1C0C                     __ptext46:	
 12336 ;; *************** function _USBWakeFromSuspend *****************
 12337 ;; Defined at:
 12338 ;;		line 2456 in file "../USB/usb_device.c"
 12339 ;; Parameters:    Size  Location     Type
 12340 ;;		None
 12341 ;; Auto vars:     Size  Location     Type
 12342 ;;		None
 12343 ;; Return value:  Size  Location     Type
 12344 ;;		None               void
 12345 ;; Registers used:
 12346 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
 12347 ;; Tracked objects:
 12348 ;;		On entry : 0/0
 12349 ;;		On exit  : 0/0
 12350 ;;		Unchanged: 0/0
 12351 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12352 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12353 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12354 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 12355 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 12356 ;;Total ram usage:        1 bytes
 12357 ;; Hardware stack levels used:    1
 12358 ;; Hardware stack levels required when called:    8
 12359 ;; This function calls:
 12360 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 12361 ;; This function is called by:
 12362 ;;		_USBDeviceTasks
 12363 ;; This function uses a non-reentrant model
 12364 ;;
 12365                           
 12366                           
 12367                           ;psect for function _USBWakeFromSuspend
 12368  1C0C                     _USBWakeFromSuspend:	
 12369                           
 12370                           ;usb_device.c: 2457: USBBusIsSuspended = FALSE;
 12371                           
 12372                           ;incstack = 0
 12373                           ; Regs used in _USBWakeFromSuspend: [allreg]
 12374  1C0C  0022               	movlb	2	; select bank2
 12375  1C0D  01E5               	clrf	_USBBusIsSuspended^(0+256)
 12376                           
 12377                           ;usb_device.c: 2463: USER_USB_CALLBACK_EVENT_HANDLER(EVENT_RESUME,0,0);
 12378  1C0E  3074               	movlw	116
 12379  1C0F  0021               	movlb	1	; select bank1
 12380  1C10  00AC               	movwf	?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)
 12381  1C11  3000               	movlw	0
 12382  1C12  00AD               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)+1)
 12383  1C13  01AE               	clrf	(?_USER_USB_CALLBACK_EVENT_HANDLER+2)^(0+128)
 12384  1C14  3000               	movlw	0
 12385  1C15  00AF               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)+3)
 12386  1C16  3000               	movlw	0
 12387  1C17  00B0               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)+4)
 12388  1C18  319D  25F4         	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
 12389                           
 12390                           ;usb_device.c: 2470: UCONbits.SUSPND = 0;
 12391  1C1A  003D               	movlb	29	; select bank29
 12392  1C1B  108E               	bcf	14,1	;volatile
 12393                           
 12394                           ;usb_device.c: 2475: UIEbits.ACTVIE = 0;
 12395  1C1C  1112               	bcf	18,2	;volatile
 12396                           
 12397                           ;usb_device.c: 2495: {
 12398                           ;usb_device.c: 2496: (UIR &= 0xFB);
 12399  1C1D  30FB               	movlw	251
 12400  1C1E  0021               	movlb	1	; select bank1
 12401  1C1F  00B1               	movwf	??_USBWakeFromSuspend^(0+128)
 12402  1C20  0831               	movf	??_USBWakeFromSuspend^(0+128),w
 12403  1C21  003D               	movlb	29	; select bank29
 12404  1C22  0590               	andwf	16,f	;volatile
 12405  1C23  0008               	return
 12406  1C24                     __end_of_USBWakeFromSuspend:	
 12407                           
 12408                           	psect	text47
 12409  1DF4                     __ptext47:	
 12410 ;; *************** function _USER_USB_CALLBACK_EVENT_HANDLER *****************
 12411 ;; Defined at:
 12412 ;;		line 630 in file "main.c"
 12413 ;; Parameters:    Size  Location     Type
 12414 ;;  event           2   12[BANK1 ] int 
 12415 ;;  pdata           1   14[BANK1 ] PTR void 
 12416 ;;		 -> USTATcopy(1), USBActiveConfiguration(1), NULL(0), BDT(32), 
 12417 ;;  size            2   15[BANK1 ] unsigned short 
 12418 ;; Auto vars:     Size  Location     Type
 12419 ;;		None
 12420 ;; Return value:  Size  Location     Type
 12421 ;;                  1    wreg      enum E5
 12422 ;; Registers used:
 12423 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12424 ;; Tracked objects:
 12425 ;;		On entry : 0/0
 12426 ;;		On exit  : 0/0
 12427 ;;		Unchanged: 0/0
 12428 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12429 ;;      Params:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
 12430 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12431 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12432 ;;      Totals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
 12433 ;;Total ram usage:        5 bytes
 12434 ;; Hardware stack levels used:    1
 12435 ;; Hardware stack levels required when called:    7
 12436 ;; This function calls:
 12437 ;;		_USBCBSuspend
 12438 ;;		_USBCBWakeFromSuspend
 12439 ;;		_USBCB_SOF_Handler
 12440 ;;		_USBCBErrorHandler
 12441 ;;		_USBCBCheckOtherReq
 12442 ;;		_USBCBStdSetDscHandler
 12443 ;;		_USBCBInitEP
 12444 ;; This function is called by:
 12445 ;;		_USBDeviceTasks
 12446 ;;		_USBStdSetCfgHandler
 12447 ;;		_USBSuspend
 12448 ;;		_USBWakeFromSuspend
 12449 ;;		_USBCtrlTrfSetupHandler
 12450 ;;		_USBCheckStdRequest
 12451 ;;		_USBStdFeatureReqHandler
 12452 ;; This function uses a non-reentrant model
 12453 ;;
 12454                           
 12455                           
 12456                           ;psect for function _USER_USB_CALLBACK_EVENT_HANDLER
 12457  1DF4                     _USER_USB_CALLBACK_EVENT_HANDLER:	
 12458                           
 12459                           ;main.c: 631: switch( event )
 12460                           
 12461                           ;incstack = 0
 12462                           ; Regs used in _USER_USB_CALLBACK_EVENT_HANDLER: [wreg-fsr1h+status,2+status,0+pclath+cs
      +                          tack]
 12463  1DF4  2E0A               	goto	l6309
 12464  1DF5                     l6293:	
 12465                           ;main.c: 636: case EVENT_SOF:
 12466                           
 12467                           ;main.c: 635: break;
 12468                           
 12469                           ;main.c: 632: {
 12470                           ;main.c: 633: case EVENT_TRANSFER:
 12471                           
 12472                           
 12473                           ;main.c: 637: USBCB_SOF_Handler();
 12474  1DF5  3188  20AF         	fcall	_USBCB_SOF_Handler
 12475                           
 12476                           ;main.c: 638: break;
 12477  1DF7  0008               	return
 12478  1DF8                     l6295:	
 12479                           ;main.c: 639: case EVENT_SUSPEND:
 12480                           
 12481                           
 12482                           ;main.c: 640: USBCBSuspend();
 12483  1DF8  3190  2001         	fcall	_USBCBSuspend
 12484                           
 12485                           ;main.c: 641: break;
 12486  1DFA  0008               	return
 12487  1DFB                     l6297:	
 12488                           ;main.c: 642: case EVENT_RESUME:
 12489                           
 12490                           
 12491                           ;main.c: 643: USBCBWakeFromSuspend();
 12492  1DFB  3190  2002         	fcall	_USBCBWakeFromSuspend
 12493                           
 12494                           ;main.c: 644: break;
 12495  1DFD  0008               	return
 12496  1DFE                     l6299:	
 12497                           ;main.c: 645: case EVENT_CONFIGURED:
 12498                           
 12499                           
 12500                           ;main.c: 646: USBCBInitEP();
 12501  1DFE  319C  248F         	fcall	_USBCBInitEP
 12502                           
 12503                           ;main.c: 647: break;
 12504  1E00  0008               	return
 12505  1E01                     l6301:	
 12506                           ;main.c: 648: case EVENT_SET_DESCRIPTOR:
 12507                           
 12508                           
 12509                           ;main.c: 649: USBCBStdSetDscHandler();
 12510  1E01  3180  2003         	fcall	_USBCBStdSetDscHandler
 12511                           
 12512                           ;main.c: 650: break;
 12513  1E03  0008               	return
 12514  1E04                     l6303:	
 12515                           ;main.c: 651: case EVENT_EP0_REQUEST:
 12516                           
 12517                           
 12518                           ;main.c: 652: USBCBCheckOtherReq();
 12519  1E04  3187  27FC         	fcall	_USBCBCheckOtherReq
 12520                           
 12521                           ;main.c: 653: break;
 12522  1E06  0008               	return
 12523  1E07                     l6305:	
 12524                           ;main.c: 654: case EVENT_BUS_ERROR:
 12525                           
 12526                           
 12527                           ;main.c: 655: USBCBErrorHandler();
 12528  1E07  3188  20B0         	fcall	_USBCBErrorHandler
 12529                           
 12530                           ;main.c: 669: }
 12531                           
 12532                           ;main.c: 668: break;
 12533                           
 12534                           ;main.c: 667: default:
 12535                           
 12536                           ;main.c: 666: break;
 12537                           
 12538                           ;main.c: 657: case EVENT_TRANSFER_TERMINATED:
 12539                           
 12540                           ;main.c: 656: break;
 12541  1E09  0008               	return
 12542  1E0A                     l6309:	
 12543                           
 12544                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 12545                           ; Switch size 1, requested type "space"
 12546                           ; Number of cases is 2, Range of values is 0 to 127
 12547                           ; switch strategies available:
 12548                           ; Name         Instructions Cycles
 12549                           ; simple_byte            7     4 (average)
 12550                           ; direct_byte          262     6 (fixed)
 12551                           ; jumptable            260     6 (fixed)
 12552                           ; rangetable           132     6 (fixed)
 12553                           ; spacedrange          261     8 (fixed)
 12554                           ; locatedrange         128     3 (fixed)
 12555                           ;	Chosen strategy is simple_byte
 12556  1E0A  0021               	movlb	1	; select bank1
 12557  1E0B  082D               	movf	(USER_USB_CALLBACK_EVENT_HANDLER@event+1)^(0+128),w
 12558  1E0C  3A00               	xorlw	0	; case 0
 12559  1E0D  1903               	skipnz
 12560  1E0E  2E13               	goto	l7073
 12561  1E0F  3A7F               	xorlw	127	; case 127
 12562  1E10  1903               	skipnz
 12563  1E11  2E2D               	goto	l7075
 12564  1E12  2E32               	goto	l936
 12565  1E13                     l7073:	
 12566                           
 12567                           ; Switch size 1, requested type "space"
 12568                           ; Number of cases is 8, Range of values is 1 to 117
 12569                           ; switch strategies available:
 12570                           ; Name         Instructions Cycles
 12571                           ; simple_byte           25    13 (average)
 12572                           ; direct_byte          243     9 (fixed)
 12573                           ; jumptable            263     9 (fixed)
 12574                           ;	Chosen strategy is simple_byte
 12575  1E13  082C               	movf	USER_USB_CALLBACK_EVENT_HANDLER@event^(0+128),w
 12576  1E14  3A01               	xorlw	1	; case 1
 12577  1E15  1903               	skipnz
 12578  1E16  2DFE               	goto	l6299
 12579  1E17  3A03               	xorlw	3	; case 2
 12580  1E18  1903               	skipnz
 12581  1E19  2E01               	goto	l6301
 12582  1E1A  3A01               	xorlw	1	; case 3
 12583  1E1B  1903               	skipnz
 12584  1E1C  2E04               	goto	l6303
 12585  1E1D  3A06               	xorlw	6	; case 5
 12586  1E1E  1903               	skipnz
 12587  1E1F  2E32               	goto	l936
 12588  1E20  3A77               	xorlw	119	; case 114
 12589  1E21  1903               	skipnz
 12590  1E22  2E32               	goto	l936
 12591  1E23  3A01               	xorlw	1	; case 115
 12592  1E24  1903               	skipnz
 12593  1E25  2DF5               	goto	l6293
 12594  1E26  3A07               	xorlw	7	; case 116
 12595  1E27  1903               	skipnz
 12596  1E28  2DFB               	goto	l6297
 12597  1E29  3A01               	xorlw	1	; case 117
 12598  1E2A  1903               	skipnz
 12599  1E2B  2DF8               	goto	l6295
 12600  1E2C  2E32               	goto	l936
 12601  1E2D                     l7075:	
 12602                           
 12603                           ; Switch size 1, requested type "space"
 12604                           ; Number of cases is 1, Range of values is 255 to 255
 12605                           ; switch strategies available:
 12606                           ; Name         Instructions Cycles
 12607                           ; simple_byte            4     3 (average)
 12608                           ; direct_byte            7     5 (fixed)
 12609                           ; jumptable            263     9 (fixed)
 12610                           ;	Chosen strategy is simple_byte
 12611  1E2D  082C               	movf	USER_USB_CALLBACK_EVENT_HANDLER@event^(0+128),w
 12612  1E2E  3AFF               	xorlw	255	; case 255
 12613  1E2F  1903               	skipnz
 12614  1E30  2E07               	goto	l6305
 12615  1E31  2E32               	goto	l936
 12616  1E32                     l936:	
 12617                           ;main.c: 670: return TRUE;
 12618                           ;	Return value of _USER_USB_CALLBACK_EVENT_HANDLER is never used
 12619                           
 12620  1E32  0008               	return
 12621  1E33                     __end_of_USER_USB_CALLBACK_EVENT_HANDLER:	
 12622                           
 12623                           	psect	text48
 12624  1C8F                     __ptext48:	
 12625 ;; *************** function _USBCBInitEP *****************
 12626 ;; Defined at:
 12627 ;;		line 460 in file "main.c"
 12628 ;; Parameters:    Size  Location     Type
 12629 ;;		None
 12630 ;; Auto vars:     Size  Location     Type
 12631 ;;		None
 12632 ;; Return value:  Size  Location     Type
 12633 ;;		None               void
 12634 ;; Registers used:
 12635 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12636 ;; Tracked objects:
 12637 ;;		On entry : 0/0
 12638 ;;		On exit  : 0/0
 12639 ;;		Unchanged: 0/0
 12640 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12641 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12642 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12643 ;;      Temps:          0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
 12644 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
 12645 ;;Total ram usage:        3 bytes
 12646 ;; Hardware stack levels used:    1
 12647 ;; Hardware stack levels required when called:    6
 12648 ;; This function calls:
 12649 ;;		_USBEnableEndpoint
 12650 ;;		_USBTransferOnePacket
 12651 ;; This function is called by:
 12652 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 12653 ;; This function uses a non-reentrant model
 12654 ;;
 12655                           
 12656                           
 12657                           ;psect for function _USBCBInitEP
 12658  1C8F                     _USBCBInitEP:	
 12659                           
 12660                           ;main.c: 462: USBEnableEndpoint(1,0x04|0x02|0x10|0x08);
 12661                           
 12662                           ;incstack = 0
 12663                           ; Regs used in _USBCBInitEP: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12664  1C8F  301E               	movlw	30
 12665  1C90  0021               	movlb	1	; select bank1
 12666  1C91  00A9               	movwf	??_USBCBInitEP^(0+128)
 12667  1C92  0829               	movf	??_USBCBInitEP^(0+128),w
 12668  1C93  0020               	movlb	0	; select bank0
 12669  1C94  00E1               	movwf	?_USBEnableEndpoint
 12670  1C95  3001               	movlw	1
 12671  1C96  319D  2560  319C   	fcall	_USBEnableEndpoint
 12672                           
 12673                           ;main.c: 464: USBGenericOutHandle = USBTransferOnePacket(1,0,(BYTE*)&OUTPacket,64);
 12674  1C99  0021               	movlb	1	; select bank1
 12675  1C9A  01A0               	clrf	?_USBTransferOnePacket^(0+128)
 12676  1C9B  30A0               	movlw	160
 12677  1C9C  00A9               	movwf	??_USBCBInitEP^(0+128)
 12678  1C9D  0829               	movf	??_USBCBInitEP^(0+128),w
 12679  1C9E  00A1               	movwf	(?_USBTransferOnePacket+1)^(0+128)
 12680  1C9F  3040               	movlw	64
 12681  1CA0  00AA               	movwf	(??_USBCBInitEP+1)^(0+128)
 12682  1CA1  082A               	movf	(??_USBCBInitEP+1)^(0+128),w
 12683  1CA2  00A2               	movwf	(?_USBTransferOnePacket^(0+128)+2)
 12684  1CA3  3001               	movlw	1
 12685  1CA4  319F  2708         	fcall	_USBTransferOnePacket
 12686  1CA6  0021               	movlb	1	; select bank1
 12687  1CA7  00AB               	movwf	(??_USBCBInitEP+2)^(0+128)
 12688  1CA8  082B               	movf	(??_USBCBInitEP+2)^(0+128),w
 12689  1CA9  0022               	movlb	2	; select bank2
 12690  1CAA  00E9               	movwf	_USBGenericOutHandle^(0+256)
 12691  1CAB  0008               	return
 12692  1CAC                     __end_of_USBCBInitEP:	
 12693                           
 12694                           	psect	text49
 12695  1F08                     __ptext49:	
 12696 ;; *************** function _USBTransferOnePacket *****************
 12697 ;; Defined at:
 12698 ;;		line 1173 in file "../USB/usb_device.c"
 12699 ;; Parameters:    Size  Location     Type
 12700 ;;  ep              1    wreg     unsigned char 
 12701 ;;  dir             1    0[BANK1 ] unsigned char 
 12702 ;;  data            1    1[BANK1 ] PTR unsigned char 
 12703 ;;		 -> INPacket(64), OUTPacket(64), 
 12704 ;;  len             1    2[BANK1 ] unsigned char 
 12705 ;; Auto vars:     Size  Location     Type
 12706 ;;  ep              1    5[BANK1 ] unsigned char 
 12707 ;;  handle          1    6[BANK1 ] PTR volatile struct __BD
 12708 ;;		 -> NULL(0), BDT(32), 
 12709 ;; Return value:  Size  Location     Type
 12710 ;;                  1    wreg      PTR void 
 12711 ;; Registers used:
 12712 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12713 ;; Tracked objects:
 12714 ;;		On entry : 0/0
 12715 ;;		On exit  : 0/0
 12716 ;;		Unchanged: 0/0
 12717 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12718 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
 12719 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
 12720 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
 12721 ;;      Totals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
 12722 ;;Total ram usage:        7 bytes
 12723 ;; Hardware stack levels used:    1
 12724 ;; Hardware stack levels required when called:    4
 12725 ;; This function calls:
 12726 ;;		Nothing
 12727 ;; This function is called by:
 12728 ;;		_ProcessIO
 12729 ;;		_USBCBInitEP
 12730 ;; This function uses a non-reentrant model
 12731 ;;
 12732                           
 12733                           
 12734                           ;psect for function _USBTransferOnePacket
 12735  1F08                     _USBTransferOnePacket:	
 12736                           
 12737                           ;incstack = 0
 12738                           ; Regs used in _USBTransferOnePacket: [wreg+fsr1l+fsr1h+status,2+status,0]
 12739                           ;USBTransferOnePacket@ep stored from wreg
 12740  1F08  0021               	movlb	1	; select bank1
 12741  1F09  00A5               	movwf	USBTransferOnePacket@ep^(0+128)
 12742                           
 12743                           ;usb_device.c: 1174: volatile BDT_ENTRY* handle;
 12744                           ;usb_device.c: 1177: if(dir != 0)
 12745  1F0A  0820               	movf	USBTransferOnePacket@dir^(0+128),w
 12746  1F0B  1903               	btfsc	3,2
 12747  1F0C  2F12               	goto	l6385
 12748                           
 12749                           ;usb_device.c: 1178: {
 12750                           ;usb_device.c: 1180: handle = pBDTEntryIn[ep];
 12751  1F0D  0825               	movf	USBTransferOnePacket@ep^(0+128),w
 12752  1F0E  3EE0               	addlw	_pBDTEntryIn& (0+255)
 12753  1F0F  0086               	movwf	6
 12754  1F10  0187               	clrf	7
 12755  1F11  2F17               	goto	L16
 12756  1F12                     l6385:	
 12757                           ;usb_device.c: 1181: }
 12758                           
 12759                           
 12760                           ;usb_device.c: 1182: else
 12761                           ;usb_device.c: 1183: {
 12762                           ;usb_device.c: 1185: handle = pBDTEntryOut[ep];
 12763  1F12  0825               	movf	USBTransferOnePacket@ep^(0+128),w
 12764  1F13  3E59               	addlw	_pBDTEntryOut& (0+255)
 12765  1F14  0086               	movwf	6
 12766  1F15  3001               	movlw	1	; select bank2/3
 12767  1F16  0087               	movwf	7
 12768  1F17                     L16:	
 12769  1F17  0801               	movf	1,w
 12770  1F18  00A3               	movwf	??_USBTransferOnePacket^(0+128)
 12771  1F19  0823               	movf	??_USBTransferOnePacket^(0+128),w
 12772  1F1A  00A6               	movwf	USBTransferOnePacket@handle^(0+128)
 12773                           
 12774                           ;usb_device.c: 1186: }
 12775                           ;usb_device.c: 1190: if(handle == 0)
 12776  1F1B  08A6               	movf	USBTransferOnePacket@handle^(0+128),f
 12777  1F1C  1D03               	skipz
 12778  1F1D  2F20               	goto	l6393
 12779                           
 12780                           ;usb_device.c: 1191: {
 12781                           ;usb_device.c: 1192: return 0;
 12782  1F1E  3000               	movlw	0
 12783  1F1F  0008               	return
 12784  1F20                     l6393:	
 12785                           
 12786                           ;usb_device.c: 1193: }
 12787                           ;usb_device.c: 1206: handle->ADR = (((WORD)(data))& 0x7FFF);
 12788  1F20  0821               	movf	USBTransferOnePacket@data^(0+128),w
 12789  1F21  00A3               	movwf	??_USBTransferOnePacket^(0+128)
 12790  1F22  3002               	movlw	2
 12791  1F23  00A4               	movwf	(??_USBTransferOnePacket^(0+128)+1)
 12792  1F24  0826               	movf	USBTransferOnePacket@handle^(0+128),w
 12793  1F25  3E02               	addlw	2
 12794  1F26  0086               	movwf	6
 12795  1F27  0187               	clrf	7
 12796  1F28  0823               	movf	??_USBTransferOnePacket^(0+128),w
 12797  1F29  3FC0               	movwi [0]fsr1
 12798  1F2A  0824               	movf	(??_USBTransferOnePacket+1)^(0+128),w
 12799  1F2B  3FC1               	movwi [1]fsr1
 12800                           
 12801                           ;usb_device.c: 1207: handle->CNT = len;
 12802  1F2C  0822               	movf	USBTransferOnePacket@len^(0+128),w
 12803  1F2D  00A3               	movwf	??_USBTransferOnePacket^(0+128)
 12804  1F2E  0A26               	incf	USBTransferOnePacket@handle^(0+128),w
 12805  1F2F  0086               	movwf	6
 12806  1F30  0187               	clrf	7
 12807  1F31  0823               	movf	??_USBTransferOnePacket^(0+128),w
 12808  1F32  0081               	movwf	1
 12809                           
 12810                           ;usb_device.c: 1208: handle->STAT.Val &= 0x40;
 12811  1F33  3040               	movlw	64
 12812  1F34  00A3               	movwf	??_USBTransferOnePacket^(0+128)
 12813  1F35  0826               	movf	USBTransferOnePacket@handle^(0+128),w
 12814  1F36  0086               	movwf	6
 12815  1F37  0187               	clrf	7
 12816  1F38  0823               	movf	??_USBTransferOnePacket^(0+128),w
 12817  1F39  0581               	andwf	1,f
 12818                           
 12819                           ;usb_device.c: 1209: handle->STAT.Val |= 0x80 | (0x08 & 0x08);
 12820  1F3A  3088               	movlw	136
 12821  1F3B  00A3               	movwf	??_USBTransferOnePacket^(0+128)
 12822  1F3C  0826               	movf	USBTransferOnePacket@handle^(0+128),w
 12823  1F3D  0086               	movwf	6
 12824  1F3E  0187               	clrf	7
 12825  1F3F  0823               	movf	??_USBTransferOnePacket^(0+128),w
 12826  1F40  0481               	iorwf	1,f
 12827                           
 12828                           ;usb_device.c: 1212: if(dir != 0)
 12829  1F41  0820               	movf	USBTransferOnePacket@dir^(0+128),w
 12830  1F42  1903               	btfsc	3,2
 12831  1F43  2F4B               	goto	l6403
 12832                           
 12833                           ;usb_device.c: 1213: {
 12834                           ;usb_device.c: 1215: ((BYTE_VAL*)&pBDTEntryIn[ep])->Val ^= 0x0004;;
 12835  1F44  3004               	movlw	4
 12836  1F45  00A3               	movwf	??_USBTransferOnePacket^(0+128)
 12837  1F46  0825               	movf	USBTransferOnePacket@ep^(0+128),w
 12838  1F47  3EE0               	addlw	_pBDTEntryIn& (0+255)
 12839  1F48  0086               	movwf	6
 12840  1F49  0187               	clrf	7
 12841  1F4A  2F52               	goto	L17
 12842  1F4B                     l6403:	
 12843                           ;usb_device.c: 1216: }
 12844                           
 12845                           
 12846                           ;usb_device.c: 1217: else
 12847                           ;usb_device.c: 1218: {
 12848                           ;usb_device.c: 1220: ((BYTE_VAL*)&pBDTEntryOut[ep])->Val ^= 0x0004;;
 12849  1F4B  3004               	movlw	4
 12850  1F4C  00A3               	movwf	??_USBTransferOnePacket^(0+128)
 12851  1F4D  0825               	movf	USBTransferOnePacket@ep^(0+128),w
 12852  1F4E  3E59               	addlw	_pBDTEntryOut& (0+255)
 12853  1F4F  0086               	movwf	6
 12854  1F50  3001               	movlw	1	; select bank2/3
 12855  1F51  0087               	movwf	7
 12856  1F52                     L17:	
 12857  1F52  0823               	movf	??_USBTransferOnePacket^(0+128),w
 12858  1F53  0681               	xorwf	1,f
 12859                           
 12860                           ;usb_device.c: 1221: }
 12861                           ;usb_device.c: 1222: return (void*)handle;
 12862  1F54  0826               	movf	USBTransferOnePacket@handle^(0+128),w
 12863  1F55  0008               	return
 12864  1F56                     __end_of_USBTransferOnePacket:	
 12865                           
 12866                           	psect	text50
 12867  1D60                     __ptext50:	
 12868 ;; *************** function _USBEnableEndpoint *****************
 12869 ;; Defined at:
 12870 ;;		line 1056 in file "../USB/usb_device.c"
 12871 ;; Parameters:    Size  Location     Type
 12872 ;;  ep              1    wreg     unsigned char 
 12873 ;;  options         1   17[BANK0 ] unsigned char 
 12874 ;; Auto vars:     Size  Location     Type
 12875 ;;  ep              1    8[BANK1 ] unsigned char 
 12876 ;;  p               2    6[BANK1 ] PTR unsigned char 
 12877 ;;		 -> UEP0(1), 
 12878 ;; Return value:  Size  Location     Type
 12879 ;;		None               void
 12880 ;; Registers used:
 12881 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12882 ;; Tracked objects:
 12883 ;;		On entry : 0/0
 12884 ;;		On exit  : 0/0
 12885 ;;		Unchanged: 0/0
 12886 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12887 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12888 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
 12889 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
 12890 ;;      Totals:         0       1       5       0       0       0       0       0       0       0       0       0       
      +0       0
 12891 ;;Total ram usage:        6 bytes
 12892 ;; Hardware stack levels used:    1
 12893 ;; Hardware stack levels required when called:    5
 12894 ;; This function calls:
 12895 ;;		_USBConfigureEndpoint
 12896 ;; This function is called by:
 12897 ;;		_USBCBInitEP
 12898 ;; This function uses a non-reentrant model
 12899 ;;
 12900                           
 12901                           
 12902                           ;psect for function _USBEnableEndpoint
 12903  1D60                     _USBEnableEndpoint:	
 12904                           
 12905                           ;incstack = 0
 12906                           ; Regs used in _USBEnableEndpoint: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12907                           ;USBEnableEndpoint@ep stored from wreg
 12908  1D60  0021               	movlb	1	; select bank1
 12909  1D61  00A8               	movwf	USBEnableEndpoint@ep^(0+128)
 12910                           
 12911                           ;usb_device.c: 1057: unsigned char* p;
 12912                           ;usb_device.c: 1061: if(options & 0x04)
 12913  1D62  0020               	movlb	0	; select bank0
 12914  1D63  1D61               	btfss	USBEnableEndpoint@options,2
 12915  1D64  2D6B               	goto	l6357
 12916                           
 12917                           ;usb_device.c: 1062: {
 12918                           ;usb_device.c: 1063: USBConfigureEndpoint(ep, 0);
 12919  1D65  01DE               	clrf	?_USBConfigureEndpoint
 12920  1D66  0021               	movlb	1	; select bank1
 12921  1D67  0828               	movf	USBEnableEndpoint@ep^(0+128),w
 12922  1D68  319E  26BB  319D   	fcall	_USBConfigureEndpoint
 12923  1D6B                     l6357:	
 12924                           
 12925                           ;usb_device.c: 1064: }
 12926                           ;usb_device.c: 1065: if(options & 0x02)
 12927  1D6B  0020               	movlb	0	; select bank0
 12928  1D6C  1CE1               	btfss	USBEnableEndpoint@options,1
 12929  1D6D  2D74               	goto	l6361
 12930                           
 12931                           ;usb_device.c: 1066: {
 12932                           ;usb_device.c: 1067: USBConfigureEndpoint(ep, 1);
 12933  1D6E  01DE               	clrf	?_USBConfigureEndpoint
 12934  1D6F  0ADE               	incf	?_USBConfigureEndpoint,f
 12935  1D70  0021               	movlb	1	; select bank1
 12936  1D71  0828               	movf	USBEnableEndpoint@ep^(0+128),w
 12937  1D72  319E  26BB         	fcall	_USBConfigureEndpoint
 12938  1D74                     l6361:	
 12939                           
 12940                           ;usb_device.c: 1068: }
 12941                           ;usb_device.c: 1076: p = (unsigned char*)(&UEP0+ep);
 12942  1D74  0021               	movlb	1	; select bank1
 12943  1D75  0828               	movf	USBEnableEndpoint@ep^(0+128),w
 12944  1D76  3E98               	addlw	152
 12945  1D77  00A4               	movwf	??_USBEnableEndpoint^(0+128)
 12946  1D78  01A5               	clrf	(??_USBEnableEndpoint^(0+128)+1)
 12947  1D79  300E               	movlw	14
 12948  1D7A  3DA5               	addwfc	(??_USBEnableEndpoint^(0+128)+1),f
 12949  1D7B  0824               	movf	??_USBEnableEndpoint^(0+128),w
 12950  1D7C  00A6               	movwf	USBEnableEndpoint@p^(0+128)
 12951  1D7D  0825               	movf	(??_USBEnableEndpoint+1)^(0+128),w
 12952  1D7E  00A7               	movwf	(USBEnableEndpoint@p+1)^(0+128)
 12953                           
 12954                           ;usb_device.c: 1078: *p = options;
 12955  1D7F  0020               	movlb	0	; select bank0
 12956  1D80  0861               	movf	USBEnableEndpoint@options,w
 12957  1D81  0021               	movlb	1	; select bank1
 12958  1D82  00A4               	movwf	??_USBEnableEndpoint^(0+128)
 12959  1D83  0826               	movf	USBEnableEndpoint@p^(0+128),w
 12960  1D84  0086               	movwf	6
 12961  1D85  0827               	movf	(USBEnableEndpoint@p+1)^(0+128),w
 12962  1D86  0087               	movwf	7
 12963  1D87  0824               	movf	??_USBEnableEndpoint^(0+128),w
 12964  1D88  0081               	movwf	1
 12965  1D89  0008               	return
 12966  1D8A                     __end_of_USBEnableEndpoint:	
 12967                           
 12968                           	psect	text51
 12969  1EBB                     __ptext51:	
 12970 ;; *************** function _USBConfigureEndpoint *****************
 12971 ;; Defined at:
 12972 ;;		line 1713 in file "../USB/usb_device.c"
 12973 ;; Parameters:    Size  Location     Type
 12974 ;;  EPNum           1    wreg     unsigned char 
 12975 ;;  direction       1   14[BANK0 ] unsigned char 
 12976 ;; Auto vars:     Size  Location     Type
 12977 ;;  EPNum           1   15[BANK0 ] unsigned char 
 12978 ;;  handle          1   16[BANK0 ] PTR volatile struct __BD
 12979 ;;		 -> BDT(32), 
 12980 ;; Return value:  Size  Location     Type
 12981 ;;		None               void
 12982 ;; Registers used:
 12983 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12984 ;; Tracked objects:
 12985 ;;		On entry : 0/0
 12986 ;;		On exit  : 0/0
 12987 ;;		Unchanged: 0/0
 12988 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12989 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12990 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12991 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
 12992 ;;      Totals:         0       3       4       0       0       0       0       0       0       0       0       0       
      +0       0
 12993 ;;Total ram usage:        7 bytes
 12994 ;; Hardware stack levels used:    1
 12995 ;; Hardware stack levels required when called:    4
 12996 ;; This function calls:
 12997 ;;		Nothing
 12998 ;; This function is called by:
 12999 ;;		_USBEnableEndpoint
 13000 ;; This function uses a non-reentrant model
 13001 ;;
 13002                           
 13003                           
 13004                           ;psect for function _USBConfigureEndpoint
 13005  1EBB                     _USBConfigureEndpoint:	
 13006                           
 13007                           ;incstack = 0
 13008                           ; Regs used in _USBConfigureEndpoint: [wreg+fsr1l+fsr1h+status,2+status,0]
 13009                           ;USBConfigureEndpoint@EPNum stored from wreg
 13010  1EBB  0020               	movlb	0	; select bank0
 13011  1EBC  00DF               	movwf	USBConfigureEndpoint@EPNum
 13012                           
 13013                           ;usb_device.c: 1714: volatile BDT_ENTRY* handle;
 13014                           ;usb_device.c: 1718: handle = (volatile BDT_ENTRY*)&BDT[0];
 13015  1EBD  3020               	movlw	32
 13016  1EBE  0021               	movlb	1	; select bank1
 13017  1EBF  00A0               	movwf	??_USBConfigureEndpoint^(0+128)
 13018  1EC0  0820               	movf	??_USBConfigureEndpoint^(0+128),w
 13019  1EC1  0020               	movlb	0	; select bank0
 13020  1EC2  00E0               	movwf	USBConfigureEndpoint@handle
 13021                           
 13022                           ;usb_device.c: 1719: handle += (4*EPNum+2*direction+0u);
 13023  1EC3  085E               	movf	USBConfigureEndpoint@direction,w
 13024  1EC4  0021               	movlb	1	; select bank1
 13025  1EC5  00A0               	movwf	??_USBConfigureEndpoint^(0+128)
 13026  1EC6  3001               	movlw	1
 13027  1EC7                     u6855:	
 13028  1EC7  35A0               	lslf	??_USBConfigureEndpoint^(0+128),f
 13029  1EC8  0B89               	decfsz	9,f
 13030  1EC9  2EC7               	goto	u6855
 13031  1ECA  0020               	movlb	0	; select bank0
 13032  1ECB  085F               	movf	USBConfigureEndpoint@EPNum,w
 13033  1ECC  0021               	movlb	1	; select bank1
 13034  1ECD  00A1               	movwf	(??_USBConfigureEndpoint+1)^(0+128)
 13035  1ECE  3001               	movlw	1
 13036  1ECF                     u6865:	
 13037  1ECF  35A1               	lslf	(??_USBConfigureEndpoint+1)^(0+128),f
 13038  1ED0  3EFF               	addlw	-1
 13039  1ED1  1D03               	skipz
 13040  1ED2  2ECF               	goto	u6865
 13041  1ED3  3521               	lslf	(??_USBConfigureEndpoint+1)^(0+128),w
 13042  1ED4  0720               	addwf	??_USBConfigureEndpoint^(0+128),w
 13043  1ED5  00A2               	movwf	(??_USBConfigureEndpoint+2)^(0+128)
 13044  1ED6  3001               	movlw	1
 13045  1ED7                     u6875:	
 13046  1ED7  35A2               	lslf	(??_USBConfigureEndpoint+2)^(0+128),f
 13047  1ED8  3EFF               	addlw	-1
 13048  1ED9  1D03               	skipz
 13049  1EDA  2ED7               	goto	u6875
 13050  1EDB  3522               	lslf	(??_USBConfigureEndpoint+2)^(0+128),w
 13051  1EDC  00A3               	movwf	(??_USBConfigureEndpoint+3)^(0+128)
 13052  1EDD  0823               	movf	(??_USBConfigureEndpoint+3)^(0+128),w
 13053  1EDE  0020               	movlb	0	; select bank0
 13054  1EDF  07E0               	addwf	USBConfigureEndpoint@handle,f
 13055                           
 13056                           ;usb_device.c: 1721: handle->STAT.UOWN = 0;
 13057  1EE0  0860               	movf	USBConfigureEndpoint@handle,w
 13058  1EE1  0086               	movwf	6
 13059  1EE2  0187               	clrf	7
 13060  1EE3  1381               	bcf	1,7
 13061                           
 13062                           ;usb_device.c: 1726: if(direction == 0)
 13063  1EE4  08DE               	movf	USBConfigureEndpoint@direction,f
 13064  1EE5  1D03               	skipz
 13065  1EE6  2EF1               	goto	l6375
 13066                           
 13067                           ;usb_device.c: 1727: {
 13068                           ;usb_device.c: 1728: pBDTEntryOut[EPNum] = handle;
 13069  1EE7  0860               	movf	USBConfigureEndpoint@handle,w
 13070  1EE8  0021               	movlb	1	; select bank1
 13071  1EE9  00A0               	movwf	??_USBConfigureEndpoint^(0+128)
 13072  1EEA  0020               	movlb	0	; select bank0
 13073  1EEB  085F               	movf	USBConfigureEndpoint@EPNum,w
 13074  1EEC  3E59               	addlw	_pBDTEntryOut& (0+255)
 13075  1EED  0086               	movwf	6
 13076  1EEE  3001               	movlw	1	; select bank2/3
 13077  1EEF  0087               	movwf	7
 13078  1EF0  2EFA               	goto	L18
 13079  1EF1                     l6375:	
 13080                           ;usb_device.c: 1729: }
 13081                           
 13082                           
 13083                           ;usb_device.c: 1730: else
 13084                           ;usb_device.c: 1731: {
 13085                           ;usb_device.c: 1732: pBDTEntryIn[EPNum] = handle;
 13086  1EF1  0020               	movlb	0	; select bank0
 13087  1EF2  0860               	movf	USBConfigureEndpoint@handle,w
 13088  1EF3  0021               	movlb	1	; select bank1
 13089  1EF4  00A0               	movwf	??_USBConfigureEndpoint^(0+128)
 13090  1EF5  0020               	movlb	0	; select bank0
 13091  1EF6  085F               	movf	USBConfigureEndpoint@EPNum,w
 13092  1EF7  3EE0               	addlw	_pBDTEntryIn& (0+255)
 13093  1EF8  0086               	movwf	6
 13094  1EF9  0187               	clrf	7
 13095  1EFA                     L18:	
 13096  1EFA  0021               	movlb	1	; select bank1
 13097  1EFB  0820               	movf	??_USBConfigureEndpoint^(0+128),w
 13098  1EFC  0081               	movwf	1
 13099                           
 13100                           ;usb_device.c: 1733: }
 13101                           ;usb_device.c: 1736: handle->STAT.DTS = 0;
 13102  1EFD  0020               	movlb	0	; select bank0
 13103  1EFE  0860               	movf	USBConfigureEndpoint@handle,w
 13104  1EFF  0086               	movwf	6
 13105  1F00  0187               	clrf	7
 13106  1F01  1301               	bcf	1,6
 13107                           
 13108                           ;usb_device.c: 1737: (handle+1)->STAT.DTS = 1;
 13109  1F02  0860               	movf	USBConfigureEndpoint@handle,w
 13110  1F03  3E04               	addlw	4
 13111  1F04  0086               	movwf	6
 13112  1F05  0187               	clrf	7
 13113  1F06  1701               	bsf	1,6
 13114  1F07  0008               	return
 13115  1F08                     __end_of_USBConfigureEndpoint:	
 13116                           
 13117                           	psect	text52
 13118  0003                     __ptext52:	
 13119 ;; *************** function _USBCBStdSetDscHandler *****************
 13120 ;; Defined at:
 13121 ;;		line 434 in file "main.c"
 13122 ;; Parameters:    Size  Location     Type
 13123 ;;		None
 13124 ;; Auto vars:     Size  Location     Type
 13125 ;;		None
 13126 ;; Return value:  Size  Location     Type
 13127 ;;		None               void
 13128 ;; Registers used:
 13129 ;;		None
 13130 ;; Tracked objects:
 13131 ;;		On entry : 0/0
 13132 ;;		On exit  : 0/0
 13133 ;;		Unchanged: 0/0
 13134 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13135 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13136 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13137 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13138 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13139 ;;Total ram usage:        0 bytes
 13140 ;; Hardware stack levels used:    1
 13141 ;; Hardware stack levels required when called:    4
 13142 ;; This function calls:
 13143 ;;		Nothing
 13144 ;; This function is called by:
 13145 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 13146 ;; This function uses a non-reentrant model
 13147 ;;
 13148                           
 13149                           
 13150                           ;psect for function _USBCBStdSetDscHandler
 13151  0003                     _USBCBStdSetDscHandler:	
 13152                           
 13153                           ;incstack = 0
 13154                           ; Regs used in _USBCBStdSetDscHandler: []
 13155  0003  0008               	return
 13156  0004                     __end_of_USBCBStdSetDscHandler:	
 13157                           
 13158                           	psect	text53
 13159  07FC                     __ptext53:	
 13160 ;; *************** function _USBCBCheckOtherReq *****************
 13161 ;; Defined at:
 13162 ;;		line 409 in file "main.c"
 13163 ;; Parameters:    Size  Location     Type
 13164 ;;		None
 13165 ;; Auto vars:     Size  Location     Type
 13166 ;;		None
 13167 ;; Return value:  Size  Location     Type
 13168 ;;		None               void
 13169 ;; Registers used:
 13170 ;;		status,2, status,0, pclath, cstack
 13171 ;; Tracked objects:
 13172 ;;		On entry : 0/0
 13173 ;;		On exit  : 0/0
 13174 ;;		Unchanged: 0/0
 13175 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13176 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13177 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13178 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13179 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13180 ;;Total ram usage:        0 bytes
 13181 ;; Hardware stack levels used:    1
 13182 ;; Hardware stack levels required when called:    5
 13183 ;; This function calls:
 13184 ;;		_USBCheckVendorRequest
 13185 ;; This function is called by:
 13186 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 13187 ;; This function uses a non-reentrant model
 13188 ;;
 13189                           
 13190                           
 13191                           ;psect for function _USBCBCheckOtherReq
 13192  07FC                     _USBCBCheckOtherReq:	
 13193                           
 13194                           ;main.c: 410: USBCheckVendorRequest();
 13195                           
 13196                           ;incstack = 0
 13197                           ; Regs used in _USBCBCheckOtherReq: [status,2+status,0+pclath+cstack]
 13198  07FC  3180  2002         	fcall	_USBCheckVendorRequest
 13199  07FE  0008               	return
 13200  07FF                     __end_of_USBCBCheckOtherReq:	
 13201                           
 13202                           	psect	text54
 13203  0002                     __ptext54:	
 13204 ;; *************** function _USBCheckVendorRequest *****************
 13205 ;; Defined at:
 13206 ;;		line 248 in file "../USB/usb_function_generic.c"
 13207 ;; Parameters:    Size  Location     Type
 13208 ;;		None
 13209 ;; Auto vars:     Size  Location     Type
 13210 ;;		None
 13211 ;; Return value:  Size  Location     Type
 13212 ;;		None               void
 13213 ;; Registers used:
 13214 ;;		None
 13215 ;; Tracked objects:
 13216 ;;		On entry : 0/0
 13217 ;;		On exit  : 0/0
 13218 ;;		Unchanged: 0/0
 13219 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13220 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13221 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13222 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13223 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13224 ;;Total ram usage:        0 bytes
 13225 ;; Hardware stack levels used:    1
 13226 ;; Hardware stack levels required when called:    4
 13227 ;; This function calls:
 13228 ;;		Nothing
 13229 ;; This function is called by:
 13230 ;;		_USBCBCheckOtherReq
 13231 ;; This function uses a non-reentrant model
 13232 ;;
 13233                           
 13234                           
 13235                           ;psect for function _USBCheckVendorRequest
 13236  0002                     _USBCheckVendorRequest:	
 13237                           
 13238                           ;incstack = 0
 13239                           ; Regs used in _USBCheckVendorRequest: []
 13240  0002  0008               	return
 13241  0003                     __end_of_USBCheckVendorRequest:	
 13242                           
 13243                           	psect	text55
 13244  08B0                     __ptext55:	
 13245 ;; *************** function _USBCBErrorHandler *****************
 13246 ;; Defined at:
 13247 ;;		line 358 in file "main.c"
 13248 ;; Parameters:    Size  Location     Type
 13249 ;;		None
 13250 ;; Auto vars:     Size  Location     Type
 13251 ;;		None
 13252 ;; Return value:  Size  Location     Type
 13253 ;;		None               void
 13254 ;; Registers used:
 13255 ;;		None
 13256 ;; Tracked objects:
 13257 ;;		On entry : 0/0
 13258 ;;		On exit  : 0/0
 13259 ;;		Unchanged: 0/0
 13260 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13261 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13262 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13263 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13264 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13265 ;;Total ram usage:        0 bytes
 13266 ;; Hardware stack levels used:    1
 13267 ;; Hardware stack levels required when called:    4
 13268 ;; This function calls:
 13269 ;;		Nothing
 13270 ;; This function is called by:
 13271 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 13272 ;; This function uses a non-reentrant model
 13273 ;;
 13274                           
 13275                           
 13276                           ;psect for function _USBCBErrorHandler
 13277  08B0                     _USBCBErrorHandler:	
 13278                           
 13279                           ;incstack = 0
 13280                           ; Regs used in _USBCBErrorHandler: []
 13281  08B0  0008               	return
 13282  08B1                     __end_of_USBCBErrorHandler:	
 13283                           
 13284                           	psect	text56
 13285  08AF                     __ptext56:	
 13286 ;; *************** function _USBCB_SOF_Handler *****************
 13287 ;; Defined at:
 13288 ;;		line 335 in file "main.c"
 13289 ;; Parameters:    Size  Location     Type
 13290 ;;		None
 13291 ;; Auto vars:     Size  Location     Type
 13292 ;;		None
 13293 ;; Return value:  Size  Location     Type
 13294 ;;		None               void
 13295 ;; Registers used:
 13296 ;;		None
 13297 ;; Tracked objects:
 13298 ;;		On entry : 0/0
 13299 ;;		On exit  : 0/0
 13300 ;;		Unchanged: 0/0
 13301 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13302 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13303 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13304 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13305 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13306 ;;Total ram usage:        0 bytes
 13307 ;; Hardware stack levels used:    1
 13308 ;; Hardware stack levels required when called:    4
 13309 ;; This function calls:
 13310 ;;		Nothing
 13311 ;; This function is called by:
 13312 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 13313 ;; This function uses a non-reentrant model
 13314 ;;
 13315                           
 13316                           
 13317                           ;psect for function _USBCB_SOF_Handler
 13318  08AF                     _USBCB_SOF_Handler:	
 13319                           
 13320                           ;incstack = 0
 13321                           ; Regs used in _USBCB_SOF_Handler: []
 13322  08AF  0008               	return
 13323  08B0                     __end_of_USBCB_SOF_Handler:	
 13324                           
 13325                           	psect	text57
 13326  1002                     __ptext57:	
 13327 ;; *************** function _USBCBWakeFromSuspend *****************
 13328 ;; Defined at:
 13329 ;;		line 305 in file "main.c"
 13330 ;; Parameters:    Size  Location     Type
 13331 ;;		None
 13332 ;; Auto vars:     Size  Location     Type
 13333 ;;		None
 13334 ;; Return value:  Size  Location     Type
 13335 ;;		None               void
 13336 ;; Registers used:
 13337 ;;		None
 13338 ;; Tracked objects:
 13339 ;;		On entry : 0/0
 13340 ;;		On exit  : 0/0
 13341 ;;		Unchanged: 0/0
 13342 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13343 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13344 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13345 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13346 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13347 ;;Total ram usage:        0 bytes
 13348 ;; Hardware stack levels used:    1
 13349 ;; Hardware stack levels required when called:    4
 13350 ;; This function calls:
 13351 ;;		Nothing
 13352 ;; This function is called by:
 13353 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 13354 ;;		_USBCBSendResume
 13355 ;; This function uses a non-reentrant model
 13356 ;;
 13357                           
 13358                           
 13359                           ;psect for function _USBCBWakeFromSuspend
 13360  1002                     _USBCBWakeFromSuspend:	
 13361                           
 13362                           ;incstack = 0
 13363                           ; Regs used in _USBCBWakeFromSuspend: []
 13364  1002  0008               	return
 13365  1003                     __end_of_USBCBWakeFromSuspend:	
 13366                           
 13367                           	psect	text58
 13368  1001                     __ptext58:	
 13369 ;; *************** function _USBCBSuspend *****************
 13370 ;; Defined at:
 13371 ;;		line 264 in file "main.c"
 13372 ;; Parameters:    Size  Location     Type
 13373 ;;		None
 13374 ;; Auto vars:     Size  Location     Type
 13375 ;;		None
 13376 ;; Return value:  Size  Location     Type
 13377 ;;		None               void
 13378 ;; Registers used:
 13379 ;;		None
 13380 ;; Tracked objects:
 13381 ;;		On entry : 0/0
 13382 ;;		On exit  : 0/0
 13383 ;;		Unchanged: 0/0
 13384 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13385 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13386 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13387 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13388 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13389 ;;Total ram usage:        0 bytes
 13390 ;; Hardware stack levels used:    1
 13391 ;; Hardware stack levels required when called:    4
 13392 ;; This function calls:
 13393 ;;		Nothing
 13394 ;; This function is called by:
 13395 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 13396 ;; This function uses a non-reentrant model
 13397 ;;
 13398                           
 13399                           
 13400                           ;psect for function _USBCBSuspend
 13401  1001                     _USBCBSuspend:	
 13402                           
 13403                           ;incstack = 0
 13404                           ; Regs used in _USBCBSuspend: []
 13405  1001  0008               	return
 13406  1002                     __end_of_USBCBSuspend:	
 13407                           
 13408                           	psect	text59
 13409  0984                     __ptext59:	
 13410 ;; *************** function _USBDeviceInit *****************
 13411 ;; Defined at:
 13412 ;;		line 467 in file "../USB/usb_device.c"
 13413 ;; Parameters:    Size  Location     Type
 13414 ;;		None
 13415 ;; Auto vars:     Size  Location     Type
 13416 ;;  p               2    0[BANK1 ] PTR unsigned char 
 13417 ;;		 -> UEP1(1), 
 13418 ;;  i               1    2[BANK1 ] unsigned char 
 13419 ;;  i               1    3[BANK1 ] unsigned char 
 13420 ;; Return value:  Size  Location     Type
 13421 ;;		None               void
 13422 ;; Registers used:
 13423 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13424 ;; Tracked objects:
 13425 ;;		On entry : 0/0
 13426 ;;		On exit  : 0/0
 13427 ;;		Unchanged: 0/0
 13428 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13429 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13430 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
 13431 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13432 ;;      Totals:         0       2       4       0       0       0       0       0       0       0       0       0       
      +0       0
 13433 ;;Total ram usage:        6 bytes
 13434 ;; Hardware stack levels used:    1
 13435 ;; Hardware stack levels required when called:    4
 13436 ;; This function calls:
 13437 ;;		Nothing
 13438 ;; This function is called by:
 13439 ;;		_USBDeviceTasks
 13440 ;;		_InitializeSystem
 13441 ;; This function uses a non-reentrant model
 13442 ;;
 13443                           
 13444                           
 13445                           ;psect for function _USBDeviceInit
 13446  0984                     _USBDeviceInit:	
 13447                           
 13448                           ;usb_device.c: 468: BYTE i;
 13449                           ;usb_device.c: 470: {PIE2bits.USBIE = 0;};
 13450                           
 13451                           ;incstack = 0
 13452                           ; Regs used in _USBDeviceInit: [wreg+fsr1l+fsr1h+status,2+status,0]
 13453  0984  0021               	movlb	1	; select bank1
 13454  0985  1112               	bcf	18,2	;volatile
 13455                           
 13456                           ;usb_device.c: 473: UEIR = 0;;
 13457  0986  003D               	movlb	29	; select bank29
 13458  0987  0193               	clrf	19	;volatile
 13459                           
 13460                           ;usb_device.c: 476: UIR = 0;;
 13461  0988  0190               	clrf	16	;volatile
 13462                           
 13463                           ;usb_device.c: 479: UEP0 = 0;
 13464  0989  0198               	clrf	24	;volatile
 13465                           
 13466                           ;usb_device.c: 481: { BYTE i; BYTE* p = (BYTE*)&UEP1; for(i=0;i<1;i++) *p++ = 0; };
 13467  098A  300E               	movlw	14
 13468  098B  0021               	movlb	1	; select bank1
 13469  098C  00A1               	movwf	(USBDeviceInit@p+1)^(0+128)
 13470  098D  3099               	movlw	153
 13471  098E  00A0               	movwf	USBDeviceInit@p^(0+128)
 13472  098F  01A2               	clrf	USBDeviceInit@i_718^(0+128)
 13473  0990  0822               	movf	USBDeviceInit@i_718^(0+128),w
 13474  0991  1D03               	skipz
 13475  0992  29A5               	goto	l4143
 13476  0993                     l4135:	
 13477  0993  0820               	movf	USBDeviceInit@p^(0+128),w
 13478  0994  0086               	movwf	6
 13479  0995  0821               	movf	(USBDeviceInit@p+1)^(0+128),w
 13480  0996  0087               	movwf	7
 13481  0997  0181               	clrf	1
 13482  0998  3001               	movlw	1
 13483  0999  07A0               	addwf	USBDeviceInit@p^(0+128),f
 13484  099A  3000               	movlw	0
 13485  099B  3DA1               	addwfc	(USBDeviceInit@p+1)^(0+128),f
 13486  099C  3001               	movlw	1
 13487  099D  0020               	movlb	0	; select bank0
 13488  099E  00DE               	movwf	??_USBDeviceInit
 13489  099F  085E               	movf	??_USBDeviceInit,w
 13490  09A0  0021               	movlb	1	; select bank1
 13491  09A1  07A2               	addwf	USBDeviceInit@i_718^(0+128),f
 13492  09A2  0822               	movf	USBDeviceInit@i_718^(0+128),w
 13493  09A3  1903               	btfsc	3,2
 13494  09A4  2993               	goto	l4135
 13495  09A5                     l4143:	
 13496                           
 13497                           ;usb_device.c: 483: { UCFG = 0x10 | 0x00 | 0x04 | 0x02; UEIE = 0x9F; UIE = 0x39 | 0x40 |
      +                           0x02; };
 13498  09A5  3016               	movlw	22
 13499  09A6  003D               	movlb	29	; select bank29
 13500  09A7  0091               	movwf	17	;volatile
 13501  09A8  309F               	movlw	159
 13502  09A9  0097               	movwf	23	;volatile
 13503  09AA  307B               	movlw	123
 13504  09AB  0092               	movwf	18	;volatile
 13505                           
 13506                           ;usb_device.c: 486: ;
 13507                           ;usb_device.c: 489: ;
 13508                           ;usb_device.c: 492: for(i=0;i<(sizeof(BDT)/sizeof(BDT_ENTRY));i++)
 13509  09AC  0021               	movlb	1	; select bank1
 13510  09AD  01A3               	clrf	USBDeviceInit@i^(0+128)
 13511  09AE  3008               	movlw	8
 13512  09AF  0223               	subwf	USBDeviceInit@i^(0+128),w
 13513  09B0  1803               	btfsc	3,0
 13514  09B1  29CD               	goto	l128
 13515  09B2                     l4151:	
 13516                           
 13517                           ;usb_device.c: 493: {
 13518                           ;usb_device.c: 494: BDT[i].Val = 0x00;
 13519  09B2  0823               	movf	USBDeviceInit@i^(0+128),w
 13520  09B3  0020               	movlb	0	; select bank0
 13521  09B4  00DE               	movwf	??_USBDeviceInit
 13522  09B5  3001               	movlw	1
 13523  09B6                     u3335:	
 13524  09B6  35DE               	lslf	??_USBDeviceInit,f
 13525  09B7  3EFF               	addlw	-1
 13526  09B8  1D03               	skipz
 13527  09B9  29B6               	goto	u3335
 13528  09BA  355E               	lslf	??_USBDeviceInit,w
 13529  09BB  3E20               	addlw	32
 13530  09BC  0086               	movwf	6
 13531  09BD  0187               	clrf	7
 13532  09BE  3000               	movlw	0
 13533  09BF  3FC0               	movwi [0]fsr1
 13534  09C0  3000               	movlw	0
 13535  09C1  3FC1               	movwi [1]fsr1
 13536  09C2  3FC2               	movwi [2]fsr1
 13537  09C3  3FC3               	movwi [3]fsr1
 13538  09C4  3001               	movlw	1
 13539  09C5  00DE               	movwf	??_USBDeviceInit
 13540  09C6  085E               	movf	??_USBDeviceInit,w
 13541  09C7  0021               	movlb	1	; select bank1
 13542  09C8  07A3               	addwf	USBDeviceInit@i^(0+128),f
 13543  09C9  3008               	movlw	8
 13544  09CA  0223               	subwf	USBDeviceInit@i^(0+128),w
 13545  09CB  1C03               	skipc
 13546  09CC  29B2               	goto	l4151
 13547  09CD                     l128:	
 13548                           
 13549                           ;usb_device.c: 495: }
 13550                           ;usb_device.c: 498: UCONbits.PPBRST = 1;
 13551  09CD  003D               	movlb	29	; select bank29
 13552  09CE  170E               	bsf	14,6	;volatile
 13553                           
 13554                           ;usb_device.c: 501: UADDR = 0x00;
 13555  09CF  0196               	clrf	22	;volatile
 13556                           
 13557                           ;usb_device.c: 504: UCONbits.PKTDIS = 0;
 13558  09D0  120E               	bcf	14,4	;volatile
 13559                           
 13560                           ;usb_device.c: 507: UCONbits.PPBRST = 0;
 13561  09D1  130E               	bcf	14,6	;volatile
 13562  09D2                     l4171:	
 13563                           ;usb_device.c: 510: while(UIRbits.TRNIF == 1)
 13564                           
 13565  09D2  003D               	movlb	29	; select bank29
 13566  09D3  1D90               	btfss	16,3	;volatile
 13567  09D4  29E2               	goto	l4173
 13568                           
 13569                           ;usb_device.c: 511: {
 13570                           ;usb_device.c: 512: (UIR &= 0xF7);
 13571  09D5  30F7               	movlw	247
 13572  09D6  0020               	movlb	0	; select bank0
 13573  09D7  00DE               	movwf	??_USBDeviceInit
 13574  09D8  085E               	movf	??_USBDeviceInit,w
 13575  09D9  003D               	movlb	29	; select bank29
 13576  09DA  0590               	andwf	16,f	;volatile
 13577                           
 13578                           ;usb_device.c: 514: inPipes[0].info.Val = 0;
 13579  09DB  0021               	movlb	1	; select bank1
 13580  09DC  01E9               	clrf	(_inPipes^(0+128)+2)
 13581                           
 13582                           ;usb_device.c: 515: outPipes[0].info.Val = 0;
 13583  09DD  0023               	movlb	3	; select bank3
 13584  09DE  01C9               	clrf	(_outPipes^(0+384)+2)
 13585                           
 13586                           ;usb_device.c: 516: outPipes[0].wCount.Val = 0;
 13587  09DF  01CA               	clrf	(_outPipes^(0+384)+3)
 13588  09E0  01CB               	clrf	((_outPipes+1)^(0+384)+3)
 13589  09E1  29D2               	goto	l4171
 13590  09E2                     l4173:	
 13591                           
 13592                           ;usb_device.c: 517: }
 13593                           ;usb_device.c: 521: USBStatusStageEnabledFlag1 = TRUE;
 13594  09E2  3001               	movlw	1
 13595  09E3  0020               	movlb	0	; select bank0
 13596  09E4  00DE               	movwf	??_USBDeviceInit
 13597  09E5  085E               	movf	??_USBDeviceInit,w
 13598  09E6  0022               	movlb	2	; select bank2
 13599  09E7  00EA               	movwf	_USBStatusStageEnabledFlag1^(0+256)	;volatile
 13600                           
 13601                           ;usb_device.c: 522: USBStatusStageEnabledFlag2 = TRUE;
 13602  09E8  3001               	movlw	1
 13603  09E9  0020               	movlb	0	; select bank0
 13604  09EA  00DE               	movwf	??_USBDeviceInit
 13605  09EB  085E               	movf	??_USBDeviceInit,w
 13606  09EC  0022               	movlb	2	; select bank2
 13607  09ED  00EB               	movwf	_USBStatusStageEnabledFlag2^(0+256)	;volatile
 13608                           
 13609                           ;usb_device.c: 524: USBDeferINDataStagePackets = FALSE;
 13610  09EE  01E6               	clrf	_USBDeferINDataStagePackets^(0+256)	;volatile
 13611                           
 13612                           ;usb_device.c: 525: USBDeferOUTDataStagePackets = FALSE;
 13613  09EF  01E7               	clrf	_USBDeferOUTDataStagePackets^(0+256)	;volatile
 13614                           
 13615                           ;usb_device.c: 526: USBBusIsSuspended = FALSE;
 13616  09F0  01E5               	clrf	_USBBusIsSuspended^(0+256)
 13617                           
 13618                           ;usb_device.c: 530: for(i = 0; i < (BYTE)(1+1u); i++)
 13619  09F1  0021               	movlb	1	; select bank1
 13620  09F2  01A3               	clrf	USBDeviceInit@i^(0+128)
 13621  09F3  3002               	movlw	2
 13622  09F4  0223               	subwf	USBDeviceInit@i^(0+128),w
 13623  09F5  1803               	btfsc	3,0
 13624  09F6  2A18               	goto	l4191
 13625  09F7                     l4185:	
 13626                           
 13627                           ;usb_device.c: 531: {
 13628                           ;usb_device.c: 532: pBDTEntryIn[i] = 0u;
 13629  09F7  0823               	movf	USBDeviceInit@i^(0+128),w
 13630  09F8  3EE0               	addlw	_pBDTEntryIn& (0+255)
 13631  09F9  0086               	movwf	6
 13632  09FA  0187               	clrf	7
 13633  09FB  0181               	clrf	1
 13634                           
 13635                           ;usb_device.c: 533: pBDTEntryOut[i] = 0u;
 13636  09FC  0823               	movf	USBDeviceInit@i^(0+128),w
 13637  09FD  3E59               	addlw	_pBDTEntryOut& (0+255)
 13638  09FE  0086               	movwf	6
 13639  09FF  3001               	movlw	1	; select bank2/3
 13640  0A00  0087               	movwf	7
 13641  0A01  0181               	clrf	1
 13642                           
 13643                           ;usb_device.c: 534: ep_data_in[i].Val = 0u;
 13644  0A02  0823               	movf	USBDeviceInit@i^(0+128),w
 13645  0A03  3ED1               	addlw	_ep_data_in& (0+255)
 13646  0A04  0086               	movwf	6
 13647  0A05  3001               	movlw	1	; select bank3/4
 13648  0A06  0087               	movwf	7
 13649  0A07  0181               	clrf	1
 13650                           
 13651                           ;usb_device.c: 535: ep_data_out[i].Val = 0u;
 13652  0A08  0823               	movf	USBDeviceInit@i^(0+128),w
 13653  0A09  3ED3               	addlw	_ep_data_out& (0+255)
 13654  0A0A  0086               	movwf	6
 13655  0A0B  3001               	movlw	1	; select bank3/4
 13656  0A0C  0087               	movwf	7
 13657  0A0D  0181               	clrf	1
 13658  0A0E  3001               	movlw	1
 13659  0A0F  0020               	movlb	0	; select bank0
 13660  0A10  00DE               	movwf	??_USBDeviceInit
 13661  0A11  085E               	movf	??_USBDeviceInit,w
 13662  0A12  0021               	movlb	1	; select bank1
 13663  0A13  07A3               	addwf	USBDeviceInit@i^(0+128),f
 13664  0A14  3002               	movlw	2
 13665  0A15  0223               	subwf	USBDeviceInit@i^(0+128),w
 13666  0A16  1C03               	skipc
 13667  0A17  29F7               	goto	l4185
 13668  0A18                     l4191:	
 13669                           
 13670                           ;usb_device.c: 536: }
 13671                           ;usb_device.c: 539: pBDTEntryIn[0] = (volatile BDT_ENTRY*)&BDT[2];
 13672  0A18  3028               	movlw	40
 13673  0A19  0020               	movlb	0	; select bank0
 13674  0A1A  00DE               	movwf	??_USBDeviceInit
 13675  0A1B  085E               	movf	??_USBDeviceInit,w
 13676  0A1C  0021               	movlb	1	; select bank1
 13677  0A1D  00E0               	movwf	_pBDTEntryIn^(0+128)
 13678                           
 13679                           ;usb_device.c: 541: UEP0 = 0x06|0x10;
 13680  0A1E  3016               	movlw	22
 13681  0A1F  003D               	movlb	29	; select bank29
 13682  0A20  0098               	movwf	24	;volatile
 13683                           
 13684                           ;usb_device.c: 543: BDT[0].ADR = (((WORD)(&SetupPkt))& 0x7FFF);
 13685  0A21  3040               	movlw	64
 13686  0A22  0020               	movlb	0	; select bank0
 13687  0A23  00DE               	movwf	??_USBDeviceInit
 13688  0A24  3000               	movlw	0
 13689  0A25  00DF               	movwf	??_USBDeviceInit+1
 13690  0A26  085E               	movf	??_USBDeviceInit,w
 13691  0A27  00A2               	movwf	34	;volatile
 13692  0A28  085F               	movf	??_USBDeviceInit+1,w
 13693  0A29  00A3               	movwf	35	;volatile
 13694                           
 13695                           ;usb_device.c: 544: BDT[0].CNT = 8;
 13696  0A2A  3008               	movlw	8
 13697  0A2B  00A1               	movwf	33	;volatile
 13698                           
 13699                           ;usb_device.c: 545: BDT[0].STAT.Val = 0x80|0x00|0x04;
 13700  0A2C  3084               	movlw	132
 13701  0A2D  00DE               	movwf	??_USBDeviceInit
 13702  0A2E  085E               	movf	??_USBDeviceInit,w
 13703  0A2F  00A0               	movwf	32	;volatile
 13704                           
 13705                           ;usb_device.c: 548: USBActiveConfiguration = 0;
 13706  0A30  0021               	movlb	1	; select bank1
 13707  0A31  01EC               	clrf	_USBActiveConfiguration^(0+128)
 13708                           
 13709                           ;usb_device.c: 551: USBDeviceState = DETACHED_STATE;
 13710  0A32  01E3               	clrf	_USBDeviceState^(0+128)
 13711  0A33  0008               	return
 13712  0A34                     __end_of_USBDeviceInit:	
 13713                           
 13714                           	psect	intentry
 13715  0004                     __pintentry:	
 13716 ;; *************** function _ISRCode *****************
 13717 ;; Defined at:
 13718 ;;		line 70 in file "main.c"
 13719 ;; Parameters:    Size  Location     Type
 13720 ;;		None
 13721 ;; Auto vars:     Size  Location     Type
 13722 ;;		None
 13723 ;; Return value:  Size  Location     Type
 13724 ;;		None               void
 13725 ;; Registers used:
 13726 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
 13727 ;; Tracked objects:
 13728 ;;		On entry : 0/0
 13729 ;;		On exit  : 0/0
 13730 ;;		Unchanged: 0/0
 13731 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13732 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13733 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13734 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13735 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13736 ;;Total ram usage:        1 bytes
 13737 ;; Hardware stack levels used:    1
 13738 ;; Hardware stack levels required when called:    3
 13739 ;; This function calls:
 13740 ;;		_ResultRx
 13741 ;; This function is called by:
 13742 ;;		Interrupt level 1
 13743 ;; This function uses a non-reentrant model
 13744 ;;
 13745                           
 13746  0004                     _ISRCode:	
 13747                           
 13748                           ;incstack = 0
 13749                           ; Regs used in _ISRCode: [wreg-fsr1h+status,2+status,0+btemp+1+pclath+cstack]
 13750  0004  3180               	pagesel	$
 13751  0005  0020               	movlb	0	; select bank0
 13752  0006  087F               	movf	127,w
 13753  0007  00DD               	movwf	??_ISRCode
 13754                           
 13755                           ;main.c: 72: if(IOCBF)
 13756  0008  0027               	movlb	7	; select bank7
 13757  0009  0816               	movf	22,w	;volatile
 13758  000A  1903               	btfsc	3,2
 13759  000B  280E               	goto	i1l852
 13760                           
 13761                           ;main.c: 73: ResultRx();
 13762  000C  318A  22E6         	fcall	_ResultRx
 13763  000E                     i1l852:	
 13764  000E  0020               	movlb	0	; select bank0
 13765  000F  085D               	movf	??_ISRCode,w
 13766  0010  00FF               	movwf	127
 13767  0011  0009               	retfie
 13768  0012                     __end_of_ISRCode:	
 13769                           
 13770                           	psect	text61
 13771  0AE6                     __ptext61:	
 13772 ;; *************** function _ResultRx *****************
 13773 ;; Defined at:
 13774 ;;		line 191 in file "klondike.c"
 13775 ;; Parameters:    Size  Location     Type
 13776 ;;		None
 13777 ;; Auto vars:     Size  Location     Type
 13778 ;;		None
 13779 ;; Return value:  Size  Location     Type
 13780 ;;		None               void
 13781 ;; Registers used:
 13782 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
 13783 ;; Tracked objects:
 13784 ;;		On entry : 0/0
 13785 ;;		On exit  : 0/0
 13786 ;;		Unchanged: 0/0
 13787 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13788 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13789 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13790 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13791 ;;      Totals:         2       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13792 ;;Total ram usage:        7 bytes
 13793 ;; Hardware stack levels used:    1
 13794 ;; Hardware stack levels required when called:    2
 13795 ;; This function calls:
 13796 ;;		i1_SendCmdReply
 13797 ;;		i1___bmul
 13798 ;; This function is called by:
 13799 ;;		_ISRCode
 13800 ;; This function uses a non-reentrant model
 13801 ;;
 13802                           
 13803                           
 13804                           ;psect for function _ResultRx
 13805  0AE6                     _ResultRx:	
 13806                           
 13807                           ;klondike.c: 192: TimeOut = 0;
 13808                           
 13809                           ;incstack = 0
 13810                           ; Regs used in _ResultRx: [wreg-fsr1h+status,2+status,0+btemp+1+pclath+cstack]
 13811  0AE6  0022               	movlb	2	; select bank2
 13812  0AE7  01E4               	clrf	_TimeOut^(0+256)
 13813                           
 13814                           ;klondike.c: 193: ResultPos++;
 13815  0AE8  3001               	movlw	1
 13816  0AE9  0020               	movlb	0	; select bank0
 13817  0AEA  00D8               	movwf	??_ResultRx
 13818  0AEB  0858               	movf	??_ResultRx,w
 13819  0AEC  07E7               	addwf	_ResultPos,f
 13820                           
 13821                           ;klondike.c: 195: if(ResultPos == 2)
 13822  0AED  0867               	movf	_ResultPos,w
 13823  0AEE  3A02               	xorlw	2
 13824  0AEF  1903               	btfsc	3,2
 13825                           
 13826                           ;klondike.c: 196: ResultPos = 0;
 13827  0AF0  01E7               	clrf	_ResultPos
 13828  0AF1                     i1l6047:	
 13829                           ;klondike.c: 198: while(ResultQC < 4) {
 13830                           
 13831  0AF1  3004               	movlw	4
 13832  0AF2  0022               	movlb	2	; select bank2
 13833  0AF3  0262               	subwf	_ResultQC^(0+256),w
 13834  0AF4  1803               	btfsc	3,0
 13835  0AF5  2B3B               	goto	i1l6049
 13836                           
 13837                           ;klondike.c: 199: if(RCIF) {
 13838  0AF6  0020               	movlb	0	; select bank0
 13839  0AF7  1E91               	btfss	17,5	;volatile
 13840  0AF8  2B1C               	goto	i1l6039
 13841                           
 13842                           ;klondike.c: 200: ResultQue[ResultPos][2+ResultQC++] = RCREG;
 13843  0AF9  0023               	movlb	3	; select bank3
 13844  0AFA  0819               	movf	25,w	;volatile
 13845  0AFB  0020               	movlb	0	; select bank0
 13846  0AFC  00D8               	movwf	??_ResultRx
 13847  0AFD  3002               	movlw	2
 13848  0AFE  0022               	movlb	2	; select bank2
 13849  0AFF  0762               	addwf	_ResultQC^(0+256),w
 13850  0B00  0020               	movlb	0	; select bank0
 13851  0B01  00D9               	movwf	??_ResultRx+1
 13852  0B02  30D5               	movlw	_ResultQue& (0+255)
 13853  0B03  0759               	addwf	??_ResultRx+1,w
 13854  0B04  00DA               	movwf	??_ResultRx+2
 13855  0B05  3006               	movlw	6
 13856  0B06  00DB               	movwf	??_ResultRx+3
 13857  0B07  085B               	movf	??_ResultRx+3,w
 13858  0B08  00F0               	movwf	?i1___bmul
 13859  0B09  0867               	movf	_ResultPos,w
 13860  0B0A  319B  2380  318A   	fcall	i1___bmul
 13861  0B0D  0020               	movlb	0	; select bank0
 13862  0B0E  075A               	addwf	??_ResultRx+2,w
 13863  0B0F  00DC               	movwf	??_ResultRx+4
 13864  0B10  085C               	movf	??_ResultRx+4,w
 13865  0B11  0086               	movwf	6
 13866  0B12  3001               	movlw	1	; select bank3/4
 13867  0B13  0087               	movwf	7
 13868  0B14  0858               	movf	??_ResultRx,w
 13869  0B15  0081               	movwf	1
 13870  0B16  3001               	movlw	1
 13871  0B17  00D8               	movwf	??_ResultRx
 13872  0B18  0858               	movf	??_ResultRx,w
 13873  0B19  0022               	movlb	2	; select bank2
 13874  0B1A  07E2               	addwf	_ResultQC^(0+256),f
 13875                           
 13876                           ;klondike.c: 201: TimeOut = 0;
 13877  0B1B  01E4               	clrf	_TimeOut^(0+256)
 13878  0B1C                     i1l6039:	
 13879                           
 13880                           ;klondike.c: 202: }
 13881                           ;klondike.c: 203: if(TimeOut++ > 32) {
 13882  0B1C  3001               	movlw	1
 13883  0B1D  0020               	movlb	0	; select bank0
 13884  0B1E  00D8               	movwf	??_ResultRx
 13885  0B1F  0858               	movf	??_ResultRx,w
 13886  0B20  0022               	movlb	2	; select bank2
 13887  0B21  07E4               	addwf	_TimeOut^(0+256),f
 13888  0B22  3022               	movlw	34
 13889  0B23  0264               	subwf	_TimeOut^(0+256),w
 13890  0B24  1C03               	skipc
 13891  0B25  2B2D               	goto	i1l741
 13892                           
 13893                           ;klondike.c: 204: Status.Noise++;
 13894  0B26  3001               	movlw	1
 13895  0B27  0020               	movlb	0	; select bank0
 13896  0B28  00D8               	movwf	??_ResultRx
 13897  0B29  0858               	movf	??_ResultRx,w
 13898  0B2A  0023               	movlb	3	; select bank3
 13899  0B2B  07B8               	addwf	(_Status^(0+384)+12),f	;volatile
 13900                           
 13901                           ;klondike.c: 205: goto outrx;
 13902  0B2C  2B91               	goto	i1l6059
 13903  0B2D                     i1l741:	
 13904                           
 13905                           ;klondike.c: 206: }
 13906                           ;klondike.c: 207: if(RCSTAbits.OERR) {
 13907  0B2D  0023               	movlb	3	; select bank3
 13908  0B2E  1C9D               	btfss	29,1	;volatile
 13909  0B2F  2AF1               	goto	i1l6047
 13910                           
 13911                           ;klondike.c: 208: if(Status.State == 'W') {
 13912  0B30  082C               	movf	_Status^(0+384),w	;volatile
 13913  0B31  3A57               	xorlw	87
 13914  0B32  1D03               	skipz
 13915  0B33  2B91               	goto	i1l6059
 13916                           
 13917                           ;klondike.c: 209: Status.ErrorCount++;
 13918  0B34  3001               	movlw	1
 13919  0B35  0020               	movlb	0	; select bank0
 13920  0B36  00D8               	movwf	??_ResultRx
 13921  0B37  0858               	movf	??_ResultRx,w
 13922  0B38  0023               	movlb	3	; select bank3
 13923  0B39  07B3               	addwf	(_Status^(0+384)+7),f	;volatile
 13924                           
 13925                           ;klondike.c: 210: }
 13926                           ;klondike.c: 211: goto outrx;
 13927  0B3A  2B91               	goto	i1l6059
 13928  0B3B                     i1l6049:	
 13929                           
 13930                           ;klondike.c: 212: }
 13931                           ;klondike.c: 213: }
 13932                           ;klondike.c: 215: if(Status.State == 'W') {
 13933  0B3B  0023               	movlb	3	; select bank3
 13934  0B3C  082C               	movf	_Status^(0+384),w	;volatile
 13935  0B3D  3A57               	xorlw	87
 13936  0B3E  1D03               	skipz
 13937  0B3F  2B91               	goto	i1l6059
 13938                           
 13939                           ;klondike.c: 216: ResultQue[ResultPos][0] = '=';
 13940  0B40  303D               	movlw	61
 13941  0B41  0020               	movlb	0	; select bank0
 13942  0B42  00D8               	movwf	??_ResultRx
 13943  0B43  3006               	movlw	6
 13944  0B44  00D9               	movwf	??_ResultRx+1
 13945  0B45  0859               	movf	??_ResultRx+1,w
 13946  0B46  00F0               	movwf	?i1___bmul
 13947  0B47  0867               	movf	_ResultPos,w
 13948  0B48  319B  2380  318A   	fcall	i1___bmul
 13949  0B4B  3ED5               	addlw	_ResultQue& (0+255)
 13950  0B4C  0086               	movwf	6
 13951  0B4D  3001               	movlw	1	; select bank3/4
 13952  0B4E  0087               	movwf	7
 13953  0B4F  0020               	movlb	0	; select bank0
 13954  0B50  0858               	movf	??_ResultRx,w
 13955  0B51  0081               	movwf	1
 13956                           
 13957                           ;klondike.c: 217: ResultQue[ResultPos][1] = Status.WorkID;
 13958  0B52  0023               	movlb	3	; select bank3
 13959  0B53  0830               	movf	(_Status^(0+384)+4),w	;volatile
 13960  0B54  0020               	movlb	0	; select bank0
 13961  0B55  00D8               	movwf	??_ResultRx
 13962  0B56  3006               	movlw	6
 13963  0B57  00D9               	movwf	??_ResultRx+1
 13964  0B58  0859               	movf	??_ResultRx+1,w
 13965  0B59  00F0               	movwf	?i1___bmul
 13966  0B5A  0867               	movf	_ResultPos,w
 13967  0B5B  319B  2380  318A   	fcall	i1___bmul
 13968  0B5E  0020               	movlb	0	; select bank0
 13969  0B5F  00DA               	movwf	??_ResultRx+2
 13970  0B60  0A5A               	incf	??_ResultRx+2,w
 13971  0B61  3ED5               	addlw	_ResultQue& (0+255)
 13972  0B62  0086               	movwf	6
 13973  0B63  3001               	movlw	1	; select bank3/4
 13974  0B64  0087               	movwf	7
 13975  0B65  0858               	movf	??_ResultRx,w
 13976  0B66  0081               	movwf	1
 13977                           
 13978                           ;klondike.c: 218: SendCmdReply(&ResultQue[ResultPos], &ResultQue[ResultPos]+1, sizeof(Re
      +                          sultQue[ResultPos])-1);
 13979  0B67  3006               	movlw	6
 13980  0B68  00D8               	movwf	??_ResultRx
 13981  0B69  0858               	movf	??_ResultRx,w
 13982  0B6A  00F0               	movwf	?i1___bmul
 13983  0B6B  0867               	movf	_ResultPos,w
 13984  0B6C  319B  2380  318A   	fcall	i1___bmul
 13985  0B6F  3ED5               	addlw	_ResultQue& (0+255)
 13986  0B70  0020               	movlb	0	; select bank0
 13987  0B71  00D9               	movwf	??_ResultRx+1
 13988  0B72  0859               	movf	??_ResultRx+1,w
 13989  0B73  00FC               	movwf	_ResultRx$3156
 13990                           
 13991                           ;klondike.c: 218: SendCmdReply(&ResultQue[ResultPos], &ResultQue[ResultPos]+1, sizeof(Re
      +                          sultQue[ResultPos])-1);
 13992  0B74  3006               	movlw	6
 13993  0B75  00D8               	movwf	??_ResultRx
 13994  0B76  0858               	movf	??_ResultRx,w
 13995  0B77  00F0               	movwf	?i1___bmul
 13996  0B78  0867               	movf	_ResultPos,w
 13997  0B79  319B  2380  318A   	fcall	i1___bmul
 13998  0B7C  0020               	movlb	0	; select bank0
 13999  0B7D  00D9               	movwf	??_ResultRx+1
 14000  0B7E  0A59               	incf	??_ResultRx+1,w
 14001  0B7F  3ED5               	addlw	_ResultQue& (0+255)
 14002  0B80  00DA               	movwf	??_ResultRx+2
 14003  0B81  085A               	movf	??_ResultRx+2,w
 14004  0B82  00FD               	movwf	_ResultRx$3157
 14005                           
 14006                           ;klondike.c: 218: SendCmdReply(&ResultQue[ResultPos], &ResultQue[ResultPos]+1, sizeof(Re
      +                          sultQue[ResultPos])-1);
 14007  0B83  087C               	movf	_ResultRx$3156,w
 14008  0B84  00F6               	movwf	?i1_SendCmdReply
 14009  0B85  3001               	movlw	1
 14010  0B86  00F7               	movwf	?i1_SendCmdReply+1
 14011  0B87  087D               	movf	_ResultRx$3157,w
 14012  0B88  00F8               	movwf	?i1_SendCmdReply+2
 14013  0B89  3001               	movlw	1
 14014  0B8A  00F9               	movwf	?i1_SendCmdReply+3
 14015  0B8B  3005               	movlw	5
 14016  0B8C  00D8               	movwf	??_ResultRx
 14017  0B8D  0858               	movf	??_ResultRx,w
 14018  0B8E  00FA               	movwf	?i1_SendCmdReply+4
 14019  0B8F  3196  2641         	fcall	i1_SendCmdReply
 14020  0B91                     i1l6059:	
 14021                           ;klondike.c: 219: }
 14022                           ;klondike.c: 221: outrx:
 14023                           
 14024                           
 14025                           ;klondike.c: 222: { RCSTAbits.SPEN = 0; RCSTAbits.SPEN = 1; };
 14026  0B91  0023               	movlb	3	; select bank3
 14027  0B92  139D               	bcf	29,7	;volatile
 14028  0B93  179D               	bsf	29,7	;volatile
 14029                           
 14030                           ;klondike.c: 223: ResultQC = 0;
 14031  0B94  0022               	movlb	2	; select bank2
 14032  0B95  01E2               	clrf	_ResultQC^(0+256)
 14033                           
 14034                           ;klondike.c: 224: IOCBF = 0;
 14035  0B96  0027               	movlb	7	; select bank7
 14036  0B97  0196               	clrf	22	;volatile
 14037  0B98  0008               	return
 14038  0B99                     __end_of_ResultRx:	
 14039                           
 14040                           	psect	text62
 14041  1641                     __ptext62:	
 14042 ;; *************** function i1_SendCmdReply *****************
 14043 ;; Defined at:
 14044 ;;		line 208 in file "main.c"
 14045 ;; Parameters:    Size  Location     Type
 14046 ;;  SendCmdReply    2    6[COMMON] PTR unsigned char 
 14047 ;;		 -> ResultQue(12), OUTPacket(64), 
 14048 ;;  SendCmdReply    2    8[COMMON] PTR unsigned char 
 14049 ;;		 -> ResultQue(12), Cfg(6), ID(12), Status(13), 
 14050 ;;  SendCmdReply    1   10[COMMON] unsigned char 
 14051 ;; Auto vars:     Size  Location     Type
 14052 ;;  SendCmdReply    1   11[COMMON] unsigned char 
 14053 ;; Return value:  Size  Location     Type
 14054 ;;		None               void
 14055 ;; Registers used:
 14056 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
 14057 ;; Tracked objects:
 14058 ;;		On entry : 0/0
 14059 ;;		On exit  : 0/0
 14060 ;;		Unchanged: 0/0
 14061 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14062 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14063 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14064 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14065 ;;      Totals:         6       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14066 ;;Total ram usage:       14 bytes
 14067 ;; Hardware stack levels used:    1
 14068 ;; Hardware stack levels required when called:    1
 14069 ;; This function calls:
 14070 ;;		i1___wmul
 14071 ;;		i1___bmul
 14072 ;; This function is called by:
 14073 ;;		_ResultRx
 14074 ;; This function uses a non-reentrant model
 14075 ;;
 14076                           
 14077                           
 14078                           ;psect for function i1_SendCmdReply
 14079  1641                     i1_SendCmdReply:	
 14080                           
 14081                           ;main.c: 209: if(WQI*15 + count + 2 < 64) {
 14082                           
 14083                           ;incstack = 0
 14084                           ; Regs used in i1_SendCmdReply: [wreg-fsr1h+status,2+status,0+btemp+1+pclath+cstack]
 14085  1641  087A               	movf	i1SendCmdReply@count,w
 14086  1642  0020               	movlb	0	; select bank0
 14087  1643  00D0               	movwf	??i1_SendCmdReply
 14088  1644  01D1               	clrf	??i1_SendCmdReply+1
 14089  1645  0021               	movlb	1	; select bank1
 14090  1646  086F               	movf	_WQI^(0+128),w
 14091  1647  0020               	movlb	0	; select bank0
 14092  1648  00D2               	movwf	??i1_SendCmdReply+2
 14093  1649  01D3               	clrf	??i1_SendCmdReply+3
 14094  164A  0852               	movf	??i1_SendCmdReply+2,w
 14095  164B  00F0               	movwf	?i1___wmul
 14096  164C  0853               	movf	??i1_SendCmdReply+3,w
 14097  164D  00F1               	movwf	?i1___wmul+1
 14098  164E  300F               	movlw	15
 14099  164F  00F2               	movwf	?i1___wmul+2
 14100  1650  3000               	movlw	0
 14101  1651  00F3               	movwf	?i1___wmul+3
 14102  1652  319C  2472  3196   	fcall	i1___wmul
 14103  1655  0020               	movlb	0	; select bank0
 14104  1656  0850               	movf	??i1_SendCmdReply,w
 14105  1657  0770               	addwf	?i1___wmul,w
 14106  1658  00D4               	movwf	??i1_SendCmdReply+4
 14107  1659  0851               	movf	??i1_SendCmdReply+1,w
 14108  165A  3D71               	addwfc	?i1___wmul+1,w
 14109  165B  00D5               	movwf	??i1_SendCmdReply+5
 14110  165C  0854               	movf	??i1_SendCmdReply+4,w
 14111  165D  3E02               	addlw	2
 14112  165E  00D6               	movwf	??i1_SendCmdReply+6
 14113  165F  3000               	movlw	0
 14114  1660  3D55               	addwfc	??i1_SendCmdReply+5,w
 14115  1661  00D7               	movwf	??i1_SendCmdReply+7
 14116  1662  0857               	movf	??i1_SendCmdReply+7,w
 14117  1663  3A80               	xorlw	128
 14118  1664  00FF               	movwf	127
 14119  1665  3080               	movlw	128
 14120  1666  027F               	subwf	127,w
 14121  1667  1D03               	skipz
 14122  1668  2E6B               	goto	u641_25
 14123  1669  3040               	movlw	64
 14124  166A  0256               	subwf	??i1_SendCmdReply+6,w
 14125  166B                     u641_25:	
 14126  166B  1803               	skipnc
 14127  166C  0008               	return
 14128                           
 14129                           ;main.c: 210: INPacket[WQI*15] = cmd[0];
 14130  166D  0876               	movf	i1SendCmdReply@cmd,w
 14131  166E  0086               	movwf	6
 14132  166F  0877               	movf	i1SendCmdReply@cmd+1,w
 14133  1670  0087               	movwf	7
 14134  1671  0801               	movf	1,w
 14135  1672  0020               	movlb	0	; select bank0
 14136  1673  00D0               	movwf	??i1_SendCmdReply
 14137  1674  300F               	movlw	15
 14138  1675  00D1               	movwf	??i1_SendCmdReply+1
 14139  1676  0851               	movf	??i1_SendCmdReply+1,w
 14140  1677  00F0               	movwf	?i1___bmul
 14141  1678  0021               	movlb	1	; select bank1
 14142  1679  086F               	movf	_WQI^(0+128),w
 14143  167A  319B  2380  3196   	fcall	i1___bmul
 14144  167D  3E20               	addlw	32
 14145  167E  0086               	movwf	6
 14146  167F  3002               	movlw	2	; select bank4/5
 14147  1680  0087               	movwf	7
 14148  1681  0020               	movlb	0	; select bank0
 14149  1682  0850               	movf	??i1_SendCmdReply,w
 14150  1683  0081               	movwf	1
 14151                           
 14152                           ;main.c: 211: INPacket[WQI*15 + 1] = SlaveAddress;
 14153  1684  0021               	movlb	1	; select bank1
 14154  1685  0862               	movf	_SlaveAddress^(0+128),w
 14155  1686  0020               	movlb	0	; select bank0
 14156  1687  00D0               	movwf	??i1_SendCmdReply
 14157  1688  300F               	movlw	15
 14158  1689  00D1               	movwf	??i1_SendCmdReply+1
 14159  168A  0851               	movf	??i1_SendCmdReply+1,w
 14160  168B  00F0               	movwf	?i1___bmul
 14161  168C  0021               	movlb	1	; select bank1
 14162  168D  086F               	movf	_WQI^(0+128),w
 14163  168E  319B  2380  3196   	fcall	i1___bmul
 14164  1691  0020               	movlb	0	; select bank0
 14165  1692  00D2               	movwf	??i1_SendCmdReply+2
 14166  1693  0A52               	incf	??i1_SendCmdReply+2,w
 14167  1694  3E20               	addlw	32
 14168  1695  0086               	movwf	6
 14169  1696  3002               	movlw	2	; select bank4/5
 14170  1697  0087               	movwf	7
 14171  1698  0850               	movf	??i1_SendCmdReply,w
 14172  1699  0081               	movwf	1
 14173                           
 14174                           ;main.c: 212: for(BYTE n = 0; n < count; n++)
 14175  169A  01FB               	clrf	i1SendCmdReply@n
 14176  169B                     i1l6021:	
 14177  169B  087A               	movf	i1SendCmdReply@count,w
 14178  169C  027B               	subwf	i1SendCmdReply@n,w
 14179  169D  1803               	btfsc	3,0
 14180  169E  2ECB               	goto	i1l6023
 14181                           
 14182                           ;main.c: 213: INPacket[WQI*15 + n + 2] = data[n];
 14183  169F  0879               	movf	i1SendCmdReply@data+1,w
 14184  16A0  00D1               	movwf	??i1_SendCmdReply+1
 14185  16A1  0878               	movf	i1SendCmdReply@data,w
 14186  16A2  00D0               	movwf	??i1_SendCmdReply
 14187  16A3  087B               	movf	i1SendCmdReply@n,w
 14188  16A4  0750               	addwf	??i1_SendCmdReply,w
 14189  16A5  0084               	movwf	4
 14190  16A6  0851               	movf	??i1_SendCmdReply+1,w
 14191  16A7  1803               	skipnc
 14192  16A8  0A51               	incf	??i1_SendCmdReply+1,w
 14193  16A9  0085               	movwf	5
 14194  16AA  0800               	movf	0,w	;code access
 14195  16AB  00D2               	movwf	??i1_SendCmdReply+2
 14196  16AC  0021               	movlb	1	; select bank1
 14197  16AD  086F               	movf	_WQI^(0+128),w
 14198  16AE  0020               	movlb	0	; select bank0
 14199  16AF  00D3               	movwf	??i1_SendCmdReply+3
 14200  16B0  01D4               	clrf	??i1_SendCmdReply+4
 14201  16B1  0853               	movf	??i1_SendCmdReply+3,w
 14202  16B2  00F0               	movwf	?i1___wmul
 14203  16B3  0854               	movf	??i1_SendCmdReply+4,w
 14204  16B4  00F1               	movwf	?i1___wmul+1
 14205  16B5  300F               	movlw	15
 14206  16B6  00F2               	movwf	?i1___wmul+2
 14207  16B7  3000               	movlw	0
 14208  16B8  00F3               	movwf	?i1___wmul+3
 14209  16B9  319C  2472  3196   	fcall	i1___wmul
 14210  16BC  0870               	movf	?i1___wmul,w
 14211  16BD  077B               	addwf	i1SendCmdReply@n,w
 14212  16BE  3E02               	addlw	2
 14213  16BF  3E20               	addlw	32
 14214  16C0  0086               	movwf	6
 14215  16C1  3002               	movlw	2	; select bank4/5
 14216  16C2  0087               	movwf	7
 14217  16C3  0020               	movlb	0	; select bank0
 14218  16C4  0852               	movf	??i1_SendCmdReply+2,w
 14219  16C5  0081               	movwf	1
 14220  16C6  3001               	movlw	1
 14221  16C7  00D0               	movwf	??i1_SendCmdReply
 14222  16C8  0850               	movf	??i1_SendCmdReply,w
 14223  16C9  07FB               	addwf	i1SendCmdReply@n,f
 14224  16CA  2E9B               	goto	i1l6021
 14225  16CB                     i1l6023:	
 14226                           
 14227                           ;main.c: 214: WQI = (WQI+1) & 3;
 14228  16CB  0021               	movlb	1	; select bank1
 14229  16CC  0A6F               	incf	_WQI^(0+128),w
 14230  16CD  3903               	andlw	3
 14231  16CE  0020               	movlb	0	; select bank0
 14232  16CF  00D0               	movwf	??i1_SendCmdReply
 14233  16D0  0850               	movf	??i1_SendCmdReply,w
 14234  16D1  0021               	movlb	1	; select bank1
 14235  16D2  00EF               	movwf	_WQI^(0+128)
 14236  16D3  0008               	return
 14237  16D4                     __end_ofi1_SendCmdReply:	
 14238                           
 14239                           	psect	text63
 14240  1B80                     __ptext63:	
 14241 ;; *************** function i1___bmul *****************
 14242 ;; Defined at:
 14243 ;;		line 3 in file "C:\Program Files (x86)\Microchip\xc8\v1.20\sources\pic\bmul.c"
 14244 ;; Parameters:    Size  Location     Type
 14245 ;;  __bmul          1    wreg     unsigned char 
 14246 ;;  __bmul          1    0[COMMON] unsigned char 
 14247 ;; Auto vars:     Size  Location     Type
 14248 ;;  __bmul          1    2[COMMON] unsigned char 
 14249 ;;  __bmul          1    3[COMMON] unsigned char 
 14250 ;; Return value:  Size  Location     Type
 14251 ;;                  1    wreg      unsigned char 
 14252 ;; Registers used:
 14253 ;;		wreg, status,2, status,0
 14254 ;; Tracked objects:
 14255 ;;		On entry : 0/0
 14256 ;;		On exit  : 0/0
 14257 ;;		Unchanged: 0/0
 14258 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14259 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14260 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14261 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14262 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14263 ;;Total ram usage:        4 bytes
 14264 ;; Hardware stack levels used:    1
 14265 ;; This function calls:
 14266 ;;		Nothing
 14267 ;; This function is called by:
 14268 ;;		_ResultRx
 14269 ;;		i1_SendCmdReply
 14270 ;; This function uses a non-reentrant model
 14271 ;;
 14272                           
 14273                           
 14274                           ;psect for function i1___bmul
 14275  1B80                     i1___bmul:	
 14276                           
 14277                           ;incstack = 0
 14278                           ; Regs used in i1___bmul: [wreg+status,2+status,0]
 14279                           ;i1___bmul@multiplier stored from wreg
 14280  1B80  00F2               	movwf	i1___bmul@multiplier
 14281  1B81  01F3               	clrf	i1___bmul@product
 14282  1B82                     i1l5997:	
 14283  1B82  1C72               	btfss	i1___bmul@multiplier,0
 14284  1B83  2B88               	goto	i1l6001
 14285  1B84  0870               	movf	i1___bmul@multiplicand,w
 14286  1B85  00F1               	movwf	??i1___bmul
 14287  1B86  0871               	movf	??i1___bmul,w
 14288  1B87  07F3               	addwf	i1___bmul@product,f
 14289  1B88                     i1l6001:	
 14290  1B88  1003               	clrc
 14291  1B89  0DF0               	rlf	i1___bmul@multiplicand,f
 14292  1B8A  1003               	clrc
 14293  1B8B  0CF2               	rrf	i1___bmul@multiplier,f
 14294  1B8C  08F2               	movf	i1___bmul@multiplier,f
 14295  1B8D  1D03               	skipz
 14296  1B8E  2B82               	goto	i1l5997
 14297  1B8F  0873               	movf	i1___bmul@product,w
 14298  1B90  0008               	return
 14299  1B91                     __end_ofi1___bmul:	
 14300                           
 14301                           	psect	text64
 14302  1C72                     __ptext64:	
 14303 ;; *************** function i1___wmul *****************
 14304 ;; Defined at:
 14305 ;;		line 3 in file "C:\Program Files (x86)\Microchip\xc8\v1.20\sources\pic\wmul.c"
 14306 ;; Parameters:    Size  Location     Type
 14307 ;;  __wmul          2    0[COMMON] unsigned int 
 14308 ;;  __wmul          2    2[COMMON] unsigned int 
 14309 ;; Auto vars:     Size  Location     Type
 14310 ;;  __wmul          2    4[COMMON] unsigned int 
 14311 ;; Return value:  Size  Location     Type
 14312 ;;                  2    0[COMMON] unsigned int 
 14313 ;; Registers used:
 14314 ;;		wreg, status,2, status,0
 14315 ;; Tracked objects:
 14316 ;;		On entry : 0/0
 14317 ;;		On exit  : 0/0
 14318 ;;		Unchanged: 0/0
 14319 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14320 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14321 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14322 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14323 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14324 ;;Total ram usage:        6 bytes
 14325 ;; Hardware stack levels used:    1
 14326 ;; This function calls:
 14327 ;;		Nothing
 14328 ;; This function is called by:
 14329 ;;		i1_SendCmdReply
 14330 ;; This function uses a non-reentrant model
 14331 ;;
 14332                           
 14333                           
 14334                           ;psect for function i1___wmul
 14335  1C72                     i1___wmul:	
 14336                           
 14337                           ;incstack = 0
 14338                           ; Regs used in i1___wmul: [wreg+status,2+status,0]
 14339  1C72  01F4               	clrf	i1___wmul@product
 14340  1C73  01F5               	clrf	i1___wmul@product+1
 14341  1C74                     i1l5985:	
 14342  1C74  1C70               	btfss	i1___wmul@multiplier,0
 14343  1C75  2C7A               	goto	i1l1295
 14344  1C76  0872               	movf	i1___wmul@multiplicand,w
 14345  1C77  07F4               	addwf	i1___wmul@product,f
 14346  1C78  0873               	movf	i1___wmul@multiplicand+1,w
 14347  1C79  3DF5               	addwfc	i1___wmul@product+1,f
 14348  1C7A                     i1l1295:	
 14349  1C7A  3001               	movlw	1
 14350  1C7B                     u636_25:	
 14351  1C7B  35F2               	lslf	i1___wmul@multiplicand,f
 14352  1C7C  0DF3               	rlf	i1___wmul@multiplicand+1,f
 14353  1C7D  0B89               	decfsz	9,f
 14354  1C7E  2C7B               	goto	u636_25
 14355  1C7F  3001               	movlw	1
 14356  1C80                     u637_25:	
 14357  1C80  36F1               	lsrf	i1___wmul@multiplier+1,f
 14358  1C81  0CF0               	rrf	i1___wmul@multiplier,f
 14359  1C82  0B89               	decfsz	9,f
 14360  1C83  2C80               	goto	u637_25
 14361  1C84  0871               	movf	i1___wmul@multiplier+1,w
 14362  1C85  0470               	iorwf	i1___wmul@multiplier,w
 14363  1C86  1D03               	skipz
 14364  1C87  2C74               	goto	i1l5985
 14365  1C88  0875               	movf	i1___wmul@product+1,w
 14366  1C89  01F1               	clrf	?i1___wmul+1
 14367  1C8A  07F1               	addwf	?i1___wmul+1,f
 14368  1C8B  0874               	movf	i1___wmul@product,w
 14369  1C8C  01F0               	clrf	?i1___wmul
 14370  1C8D  07F0               	addwf	?i1___wmul,f
 14371  1C8E  0008               	return
 14372  1C8F                     __end_ofi1___wmul:	
 14373  007E                     btemp	set	126	;btemp
 14374  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    174
    Data        72
    BSS         152
    Persistent  3
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            32     18      32
    BANK1            80     64      80
    BANK2            80     57      80
    BANK3            80      0      70
    BANK4            16      0      16
    BANK5            16      0       0
    BANK6            80      0      56
    BANK7            80      0      32
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           28      0       0
    BANK11            0      0       0
    BANK12            0      0       0

Pointer List with Targets:

    ResultRx$3157	PTR unsigned char  size(1) Largest target is 12
		 -> ResultQue(BANK3[12]), 

    ResultRx$3156	PTR unsigned char  size(1) Largest target is 12
		 -> ResultQue(BANK3[12]), 

    ResultRx$3113	PTR unsigned char  size(1) Largest target is 12
		 -> ResultQue(BANK3[12]), 

    ResultRx$3112	PTR unsigned char  size(1) Largest target is 12
		 -> ResultQue(BANK3[12]), 

    ResultRx$2875	PTR unsigned char  size(1) Largest target is 12
		 -> ResultQue(BANK3[12]), 

    ResultRx$2874	PTR unsigned char  size(1) Largest target is 12
		 -> ResultQue(BANK3[12]), 

    ?___ftpack	float  size(1) Largest target is 0

    ?___fttol	long  size(1) Largest target is 0

    ?___ftadd	float  size(1) Largest target is 0

    ?___ftmul	float  size(1) Largest target is 0

    ?___ftneg	float  size(1) Largest target is 0

    ?___awtoft	float  size(1) Largest target is 0

    ?___awdiv	int  size(1) Largest target is 0

    ?___lwdiv	unsigned int  size(1) Largest target is 0

    ?___wmul	unsigned int  size(1) Largest target is 0

    ?_rotate	unsigned long  size(1) Largest target is 0

    ?_memset	PTR void  size(1) Largest target is 32
		 -> USBAlternateInterface(BANK1[1]), BDT(BANK0[32]), 

    ?_USBTransferOnePacket	PTR void  size(1) Largest target is 32
		 -> NULL(NULL[0]), BDT(BANK0[32]), 

    USER_USB_CALLBACK_EVENT_HANDLER@pdata	PTR void  size(1) Largest target is 32
		 -> USTATcopy(BANK1[1]), USBActiveConfiguration(BANK1[1]), NULL(NULL[0]), BDT(BANK0[32]), 

    memset@p1	PTR void  size(1) Largest target is 32
		 -> USBAlternateInterface(BANK1[1]), BDT(BANK0[32]), 

    memset@p	PTR unsigned char  size(1) Largest target is 32
		 -> USBAlternateInterface(BANK1[1]), BDT(BANK0[32]), 

    SendCmdReply@data	PTR unsigned char  size(2) Largest target is 13
		 -> ResultQue(BANK3[12]), Cfg(BANK3[6]), ID(CODE[12]), Status(BANK3[13]), 

    SendCmdReply@cmd	PTR unsigned char  size(2) Largest target is 64
		 -> ResultQue(BANK3[12]), OUTPacket(BANK5[64]), 

    USBGenericInHandle	PTR void  size(1) Largest target is 32
		 -> NULL(NULL[0]), BDT(BANK0[32]), 

    USBGenericOutHandle	PTR void  size(1) Largest target is 32
		 -> NULL(NULL[0]), BDT(BANK0[32]), 

    ProcessCmd@cmd	PTR unsigned char  size(1) Largest target is 64
		 -> OUTPacket(BANK5[64]), 

    I2CInBuf	PTR unsigned char  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    AsicPreCalc@work	PTR struct _worktask size(2) Largest target is 180
		 -> WorkQue(BIGRAM[180]), 

    SendAsicData@work	PTR struct _worktask size(2) Largest target is 180
		 -> WorkQue(BIGRAM[180]), 

    USBStdFeatureReqHandler@pUEP	PTR unsigned char  size(2) Largest target is 1
		 -> UEP0(BITSFR29[1]), 

    USBStdFeatureReqHandler@p	PTR struct __BDT size(1) Largest target is 32
		 -> NULL(NULL[0]), BDT(BANK0[32]), 

    USBStdGetStatusHandler@p	PTR struct __BDT size(1) Largest target is 32
		 -> NULL(NULL[0]), BDT(BANK0[32]), 

    USB_SD_Ptr	const PTR const unsigned char [3] size(1) Largest target is 52
		 -> sd002(CODE[52]), sd001(CODE[52]), sd000(CODE[4]), 

    USB_CD_Ptr	const PTR const unsigned char [1] size(1) Largest target is 32
		 -> configDescriptor1(CODE[32]), 

    sp__memset	PTR void  size(1) Largest target is 32
		 -> USBAlternateInterface(BANK1[1]), BDT(BANK0[32]), 

    USBStdSetCfgHandler@p	PTR unsigned char  size(2) Largest target is 1
		 -> UEP1(BITSFR29[1]), 

    pDst	PTR unsigned char  size(1) Largest target is 8
		 -> CtrlTrfData(BANK0[8]), NULL(NULL[0]), 

    USBConfigureEndpoint@handle	PTR volatile struct __BDT size(1) Largest target is 32
		 -> BDT(BANK0[32]), 

    pBDTEntryEP0OutCurrent	PTR volatile struct __BDT size(1) Largest target is 32
		 -> NULL(NULL[0]), BDT(BANK0[32]), 

    pBDTEntryEP0OutNext	PTR volatile struct __BDT size(1) Largest target is 32
		 -> NULL(NULL[0]), BDT(BANK0[32]), 

    USBTransferOnePacket@data	PTR unsigned char  size(1) Largest target is 64
		 -> INPacket(BANK4[64]), OUTPacket(BANK5[64]), 

    sp__USBTransferOnePacket	PTR void  size(1) Largest target is 32
		 -> NULL(NULL[0]), BDT(BANK0[32]), 

    USBTransferOnePacket@handle	PTR volatile struct __BDT size(1) Largest target is 32
		 -> NULL(NULL[0]), BDT(BANK0[32]), 

    USBEnableEndpoint@p	PTR unsigned char  size(2) Largest target is 1
		 -> UEP0(BITSFR29[1]), 

    pBDTEntryOut	PTR volatile struct __BDT[2] size(1) Largest target is 32
		 -> NULL(NULL[0]), BDT(BANK0[32]), 

    pBDTEntryIn	PTR volatile struct __BDT[2] size(1) Largest target is 32
		 -> NULL(NULL[0]), BDT(BANK0[32]), 

    S118$pFunc	PTR FTN()void  size(1) Largest target is 0

    outPipes.pFunc	PTR FTN()void  size(1) Largest target is 0

    S108$wRam	PTR unsigned short  size(1) Largest target is 0

    outPipes.pDst.wRam	PTR unsigned short  size(1) Largest target is 0

    S108$bRam	PTR unsigned char  size(1) Largest target is 0

    outPipes.pDst.bRam	PTR unsigned char  size(1) Largest target is 0

    S66$wRom	PTR const unsigned short  size(1) Largest target is 0

    inPipes.pSrc.wRom	PTR const unsigned short  size(1) Largest target is 0

    S66$wRam	PTR unsigned short  size(1) Largest target is 0

    inPipes.pSrc.wRam	PTR unsigned short  size(1) Largest target is 0

    S66$bRom	PTR const unsigned char  size(1) Largest target is 0

    inPipes.pSrc.bRom	PTR const unsigned char  size(1) Largest target is 0

    S66$bRam	PTR unsigned char  size(1) Largest target is 0

    inPipes.pSrc.bRam	PTR unsigned char  size(1) Largest target is 0

    USBDeviceInit@p	PTR unsigned char  size(2) Largest target is 1
		 -> UEP1(BITSFR29[1]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISRCode in COMMON

    _ISRCode->_ResultRx
    _ResultRx->i1_SendCmdReply
    i1_SendCmdReply->i1___wmul

Critical Paths under _main in BANK0

    _ProcessIO->___bmul
    _ProcessCmd->___lwdiv
    _ProcessCmd->___wmul
    _SendCmdReply->___bmul
    _SendCmdReply->___wmul
    _AsicPushWork->___wmul
    _AsicPreCalc->___wmul
    _SendAsicData->___wmul
    _DetectAsics->___awdiv
    _UpdateFanLevel->___awtoft
    ___fttol->___awtoft
    ___ftneg->___awtoft
    ___ftmul->___awtoft
    ___ftadd->___awtoft
    ___awtoft->___ftpack
    _USBCtrlEPService->_USBCtrlTrfInHandler
    _USBCtrlTrfInHandler->_USBCtrlTrfTxService
    _USBCtrlTrfOutHandler->_USBCtrlTrfRxService
    _USBCtrlTrfRxService->_USBCtrlEPAllowStatusStage
    _USBStdSetCfgHandler->_memset
    _USBCtrlEPAllowDataStage->_USBCtrlTrfTxService
    _USBCBInitEP->_USBEnableEndpoint
    _USBTransferOnePacket->___bmul
    _USBEnableEndpoint->_USBConfigureEndpoint

Critical Paths under _ISRCode in BANK0

    _ISRCode->_ResultRx
    _ResultRx->i1_SendCmdReply

Critical Paths under _main in BANK1

    _main->_WorkTick
    _ProcessIO->_ProcessCmd
    _ProcessCmd->_AsicPushWork
    _SendCmdReply->___wmul
    _AsicPushWork->_AsicPreCalc
    _AsicPreCalc->_rotate
    _SendAsicData->___wmul
    _UserInit->_DetectAsics
    _DetectAsics->___awdiv
    _WorkTick->_UpdateFanLevel
    _UpdateFanLevel->___fttol
    ___fttol->___ftadd
    ___ftneg->___ftmul
    ___ftmul->___awtoft
    ___ftadd->___ftneg
    ___awtoft->___ftpack
    _USBDeviceTasks->_USBCtrlEPService
    _USBCtrlEPService->_USBCtrlTrfSetupHandler
    _USBCtrlTrfOutHandler->_USBCtrlTrfRxService
    _USBCtrlTrfSetupHandler->_USBCheckStdRequest
    _USBCheckStdRequest->_USBStdFeatureReqHandler
    _USBStdFeatureReqHandler->_USER_USB_CALLBACK_EVENT_HANDLER
    _USBStdSetCfgHandler->_USER_USB_CALLBACK_EVENT_HANDLER
    _USBCtrlEPServiceComplete->_USBCtrlEPAllowDataStage
    _USBSuspend->_USER_USB_CALLBACK_EVENT_HANDLER
    _USBWakeFromSuspend->_USER_USB_CALLBACK_EVENT_HANDLER
    _USER_USB_CALLBACK_EVENT_HANDLER->_USBCBInitEP
    _USBCBInitEP->_USBEnableEndpoint
    _USBEnableEndpoint->_USBConfigureEndpoint

Critical Paths under _ISRCode in BANK1

    None.

Critical Paths under _main in BANK2

    _AsicPushWork->_AsicPreCalc

Critical Paths under _ISRCode in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISRCode in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISRCode in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISRCode in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISRCode in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISRCode in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISRCode in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISRCode in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISRCode in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISRCode in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISRCode in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   18078
                     _USBDeviceTasks
                       _AsicPushWork
                           _WorkTick
                   _InitializeSystem
                          _ProcessIO
 ---------------------------------------------------------------------------------
 (1) _ProcessIO                                            8     8      0    3460
                                             37 BANK1      8     8      0
               _USBTransferOnePacket
                         _ProcessCmd
                             ___bmul
 ---------------------------------------------------------------------------------
 (2) _ProcessCmd                                           7     7      0    2854
                                             30 BANK1      7     7      0
                       _AsicPushWork
                       _SendCmdReply
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     162
                                             14 BANK0      4     0      4
                                              0 BANK1      4     4      0
 ---------------------------------------------------------------------------------
 (3) _SendCmdReply                                        14     9      5     340
                                              2 BANK1     14     9      5
                             ___bmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               4     3      1      92
                                             14 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (3) _AsicPushWork                                         5     5      0    1972
                                             25 BANK1      5     5      0
                       _SendAsicData
                        _AsicPreCalc
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4      92
                                             14 BANK0      4     0      4
                                              0 BANK1      2     2      0
 ---------------------------------------------------------------------------------
 (4) _AsicPreCalc                                         69    67      2    1836
                                             13 BANK1     12    10      2
                                              0 BANK2     57    57      0
                             _rotate
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (5) _rotate                                              13     8      5      88
                                              0 BANK1     13     8      5
 ---------------------------------------------------------------------------------
 (4) _SendAsicData                                         6     4      2      44
                                              2 BANK1      6     4      2
                             _Send32
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (5) _Send32                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _InitializeSystem                                     0     0      0     663
                      _USBDeviceInit
                           _UserInit
 ---------------------------------------------------------------------------------
 (2) _UserInit                                             0     0      0     391
                        _DetectAsics
                            _InitFAN
                     _InitTempSensor
                       _InitWorkTick
                       _InitResultRx
 ---------------------------------------------------------------------------------
 (3) _InitResultRx                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _InitWorkTick                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _InitTempSensor                                       1     1      0       0
                                             14 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _InitFAN                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _DetectAsics                                         10    10      0     391
                                              5 BANK1     10    10      0
                            ___awdiv
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              9     5      4     300
                                             14 BANK0      4     0      4
                                              0 BANK1      5     5      0
 ---------------------------------------------------------------------------------
 (1) _WorkTick                                             1     1      0    3252
                                             63 BANK1      1     1      0
                     _UpdateFanLevel
 ---------------------------------------------------------------------------------
 (2) _UpdateFanLevel                                       7     7      0    3252
                                             56 BANK1      7     7      0
                           ___awtoft
                            ___ftadd
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             14    10      4     371
                                             42 BANK1     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3      65
                                             26 BANK1      3     0      3
                           ___awtoft (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             16    10      6     800
                                             10 BANK1     16    10      6
                           ___ftpack
                           ___awtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             13     7      6    1537
                                             29 BANK1     13     7      6
                           ___ftpack
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             6     3      3     445
                                             17 BANK0      1     1      0
                                              5 BANK1      5     2      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5     312
                                             14 BANK0      3     3      0
                                              0 BANK1      5     0      5
 ---------------------------------------------------------------------------------
 (1) _USBDeviceTasks                                       3     3      0    8731
                                             29 BANK1      3     3      0
                      _USBDeviceInit
                 _USBWakeFromSuspend
                         _USBSuspend
    _USER_USB_CALLBACK_EVENT_HANDLER
          _USBCtrlEPAllowStatusStage
                    _USBStallHandler
                   _USBCtrlEPService
 ---------------------------------------------------------------------------------
 (2) _USBCtrlEPService                                     4     4      0    5370
                                             25 BANK1      4     4      0
             _USBCtrlTrfSetupHandler
               _USBCtrlTrfOutHandler
                _USBCtrlTrfInHandler
 ---------------------------------------------------------------------------------
 (3) _USBCtrlTrfInHandler                                  3     3      0     115
                                             17 BANK0      1     1      0
                                              0 BANK1      2     2      0
                _USBCtrlTrfTxService
 ---------------------------------------------------------------------------------
 (3) _USBCtrlTrfOutHandler                                 2     2      0     114
                                              2 BANK1      2     2      0
                _USBCtrlTrfRxService
 ---------------------------------------------------------------------------------
 (4) _USBCtrlTrfRxService                                  4     4      0     114
                                             16 BANK0      2     2      0
                                              0 BANK1      2     2      0
          _USBCtrlEPAllowStatusStage
 ---------------------------------------------------------------------------------
 (3) _USBCtrlTrfSetupHandler                               1     1      0    5042
                                             24 BANK1      1     1      0
    _USER_USB_CALLBACK_EVENT_HANDLER
           _USBCtrlEPServiceComplete
                 _USBCheckStdRequest
 ---------------------------------------------------------------------------------
 (4) _USBCheckStdRequest                                   1     1      0    3943
                                             23 BANK1      1     1      0
    _USER_USB_CALLBACK_EVENT_HANDLER
                _USBStdSetCfgHandler
                _USBStdGetDscHandler
             _USBStdGetStatusHandler
            _USBStdFeatureReqHandler
 ---------------------------------------------------------------------------------
 (5) _USBStdFeatureReqHandler                              6     6      0    1530
                                             17 BANK1      6     6      0
    _USER_USB_CALLBACK_EVENT_HANDLER
 ---------------------------------------------------------------------------------
 (5) _USBStdGetStatusHandler                               2     2      0      68
                                             14 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (5) _USBStdGetDscHandler                                  3     3      0       0
                                             14 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) _USBStdSetCfgHandler                                  5     5      0    1338
                                             17 BANK1      5     5      0
    _USER_USB_CALLBACK_EVENT_HANDLER
                             _memset
 ---------------------------------------------------------------------------------
 (6) _memset                                               7     3      4      96
                                             14 BANK0      4     0      4
                                              0 BANK1      3     3      0
 ---------------------------------------------------------------------------------
 (4) _USBCtrlEPServiceComplete                             2     2      0      92
                                              2 BANK1      2     2      0
          _USBCtrlEPAllowStatusStage
            _USBCtrlEPAllowDataStage
 ---------------------------------------------------------------------------------
 (5) _USBCtrlEPAllowDataStage                              2     2      0      92
                                              0 BANK1      2     2      0
                _USBCtrlTrfTxService
 ---------------------------------------------------------------------------------
 (4) _USBCtrlTrfTxService                                  3     3      0      92
                                             14 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) _USBCtrlEPAllowStatusStage                            2     2      0       0
                                             14 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _USBStallHandler                                      1     1      0       0
                                             14 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _USBSuspend                                           1     1      0    1007
                                             17 BANK1      1     1      0
    _USER_USB_CALLBACK_EVENT_HANDLER
 ---------------------------------------------------------------------------------
 (2) _USBWakeFromSuspend                                   1     1      0    1007
                                             17 BANK1      1     1      0
    _USER_USB_CALLBACK_EVENT_HANDLER
 ---------------------------------------------------------------------------------
 (6) _USER_USB_CALLBACK_EVENT_HANDLER                      5     0      5    1007
                                             12 BANK1      5     0      5
                       _USBCBSuspend
               _USBCBWakeFromSuspend
                  _USBCB_SOF_Handler
                  _USBCBErrorHandler
                 _USBCBCheckOtherReq
              _USBCBStdSetDscHandler
                        _USBCBInitEP
 ---------------------------------------------------------------------------------
 (7) _USBCBInitEP                                          3     3      0     976
                                              9 BANK1      3     3      0
                  _USBEnableEndpoint
               _USBTransferOnePacket
 ---------------------------------------------------------------------------------
 (2) _USBTransferOnePacket                                 7     4      3     440
                                              0 BANK1      7     4      3
                             ___bmul (ARG)
 ---------------------------------------------------------------------------------
 (8) _USBEnableEndpoint                                    6     5      1     536
                                             17 BANK0      1     0      1
                                              4 BANK1      5     5      0
               _USBConfigureEndpoint
 ---------------------------------------------------------------------------------
 (9) _USBConfigureEndpoint                                 7     6      1     316
                                             14 BANK0      3     2      1
                                              0 BANK1      4     4      0
 ---------------------------------------------------------------------------------
 (7) _USBCBStdSetDscHandler                                0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _USBCBCheckOtherReq                                   0     0      0       0
              _USBCheckVendorRequest
 ---------------------------------------------------------------------------------
 (8) _USBCheckVendorRequest                                0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _USBCBErrorHandler                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _USBCB_SOF_Handler                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _USBCBWakeFromSuspend                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _USBCBSuspend                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _USBDeviceInit                                        6     6      0     272
                                             14 BANK0      2     2      0
                                              0 BANK1      4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _ISRCode                                             1     1      0    1273
                                             13 BANK0      1     1      0
                           _ResultRx
 ---------------------------------------------------------------------------------
 (11) _ResultRx                                            7     7      0    1273
                                             12 COMMON     2     2      0
                                              8 BANK0      5     5      0
                     i1_SendCmdReply
                           i1___bmul
 ---------------------------------------------------------------------------------
 (12) i1_SendCmdReply                                     14     9      5    1027
                                              6 COMMON     6     1      5
                                              0 BANK0      8     8      0
                           i1___wmul
                           i1___bmul
 ---------------------------------------------------------------------------------
 (12) i1___bmul                                            4     3      1     212
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (13) i1___wmul                                            6     2      4     300
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _USBDeviceTasks
     _USBDeviceInit
     _USBWakeFromSuspend
       _USER_USB_CALLBACK_EVENT_HANDLER
         _USBCBSuspend
         _USBCBWakeFromSuspend
         _USBCB_SOF_Handler
         _USBCBErrorHandler
         _USBCBCheckOtherReq
           _USBCheckVendorRequest
         _USBCBStdSetDscHandler
         _USBCBInitEP
           _USBEnableEndpoint
             _USBConfigureEndpoint
           _USBTransferOnePacket
             ___bmul (ARG)
     _USBSuspend
       _USER_USB_CALLBACK_EVENT_HANDLER
         _USBCBSuspend
         _USBCBWakeFromSuspend
         _USBCB_SOF_Handler
         _USBCBErrorHandler
         _USBCBCheckOtherReq
           _USBCheckVendorRequest
         _USBCBStdSetDscHandler
         _USBCBInitEP
           _USBEnableEndpoint
             _USBConfigureEndpoint
           _USBTransferOnePacket
             ___bmul (ARG)
     _USER_USB_CALLBACK_EVENT_HANDLER
       _USBCBSuspend
       _USBCBWakeFromSuspend
       _USBCB_SOF_Handler
       _USBCBErrorHandler
       _USBCBCheckOtherReq
         _USBCheckVendorRequest
       _USBCBStdSetDscHandler
       _USBCBInitEP
         _USBEnableEndpoint
           _USBConfigureEndpoint
         _USBTransferOnePacket
           ___bmul (ARG)
     _USBCtrlEPAllowStatusStage
     _USBStallHandler
     _USBCtrlEPService
       _USBCtrlTrfSetupHandler
         _USER_USB_CALLBACK_EVENT_HANDLER
           _USBCBSuspend
           _USBCBWakeFromSuspend
           _USBCB_SOF_Handler
           _USBCBErrorHandler
           _USBCBCheckOtherReq
             _USBCheckVendorRequest
           _USBCBStdSetDscHandler
           _USBCBInitEP
             _USBEnableEndpoint
               _USBConfigureEndpoint
             _USBTransferOnePacket
               ___bmul (ARG)
         _USBCtrlEPServiceComplete
           _USBCtrlEPAllowStatusStage
           _USBCtrlEPAllowDataStage
             _USBCtrlTrfTxService
         _USBCheckStdRequest
           _USER_USB_CALLBACK_EVENT_HANDLER
             _USBCBSuspend
             _USBCBWakeFromSuspend
             _USBCB_SOF_Handler
             _USBCBErrorHandler
             _USBCBCheckOtherReq
               _USBCheckVendorRequest
             _USBCBStdSetDscHandler
             _USBCBInitEP
               _USBEnableEndpoint
                 _USBConfigureEndpoint
               _USBTransferOnePacket
                 ___bmul (ARG)
           _USBStdSetCfgHandler
             _USER_USB_CALLBACK_EVENT_HANDLER
               _USBCBSuspend
               _USBCBWakeFromSuspend
               _USBCB_SOF_Handler
               _USBCBErrorHandler
               _USBCBCheckOtherReq
                 _USBCheckVendorRequest
               _USBCBStdSetDscHandler
               _USBCBInitEP
                 _USBEnableEndpoint
                   _USBConfigureEndpoint
                 _USBTransferOnePacket
                   ___bmul (ARG)
             _memset
           _USBStdGetDscHandler
           _USBStdGetStatusHandler
           _USBStdFeatureReqHandler
             _USER_USB_CALLBACK_EVENT_HANDLER
               _USBCBSuspend
               _USBCBWakeFromSuspend
               _USBCB_SOF_Handler
               _USBCBErrorHandler
               _USBCBCheckOtherReq
                 _USBCheckVendorRequest
               _USBCBStdSetDscHandler
               _USBCBInitEP
                 _USBEnableEndpoint
                   _USBConfigureEndpoint
                 _USBTransferOnePacket
                   ___bmul (ARG)
       _USBCtrlTrfOutHandler
         _USBCtrlTrfRxService
           _USBCtrlEPAllowStatusStage
       _USBCtrlTrfInHandler
         _USBCtrlTrfTxService
   _AsicPushWork
     _SendAsicData
       _Send32
       ___wmul (ARG)
     _AsicPreCalc
       _rotate
       ___wmul (ARG)
     ___wmul
   _WorkTick
     _UpdateFanLevel
       ___awtoft
         ___ftpack
       ___ftadd
         ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___ftpack
           ___awtoft (ARG)
             ___ftpack
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___ftpack
             ___awtoft (ARG)
               ___ftpack
       ___ftmul
         ___ftpack
         ___awtoft (ARG)
           ___ftpack
       ___ftneg
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___ftpack
           ___awtoft (ARG)
             ___ftpack
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___ftpack
             ___awtoft (ARG)
               ___ftpack
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___ftpack
               ___awtoft (ARG)
                 ___ftpack
         ___ftmul (ARG)
           ___ftpack
           ___awtoft (ARG)
             ___ftpack
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___ftpack
             ___awtoft (ARG)
               ___ftpack
   _InitializeSystem
     _USBDeviceInit
     _UserInit
       _DetectAsics
         ___awdiv
       _InitFAN
       _InitTempSensor
       _InitWorkTick
       _InitResultRx
   _ProcessIO
     _USBTransferOnePacket
       ___bmul (ARG)
     _ProcessCmd
       _AsicPushWork
         _SendAsicData
           _Send32
           ___wmul (ARG)
         _AsicPreCalc
           _rotate
           ___wmul (ARG)
         ___wmul
       _SendCmdReply
         ___bmul
         ___wmul
       ___lwdiv
       ___wmul
     ___bmul

 _ISRCode (ROOT)
   _ResultRx
     i1_SendCmdReply
       i1___wmul
       i1___bmul
     i1___bmul

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0      11       3        0.0%
BITBANK0            20      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               20     12      20       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     40      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50     39      50       9      100.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      46      11       87.5%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            10      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               10      0      10      13      100.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            10      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               10      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0      38      17       70.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0      20      19       40.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     17C      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              1C      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BANK11               0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BANK12               0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     18D      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.20 build 52243 
Symbol Table                                                                                   Fri Oct 25 04:23:59 2013

                              _USB_SD_Ptr 0801                                         pc 0002  
                          ___bmul@product 0060                               _SSPSTATbits 0214  
                                      _ID 089F                    ?_USBCheckVendorRequest 0070  
                            ___awdiv@sign 00A2                             _USBDeviceInit 0984  
                     ___wmul@multiplicand 0060                          i1___wmul@product 0074  
                            ___ftadd@exp1 00C9                              ___ftadd@exp2 00C8  
                     __end_of_AsicPreCalc 04E1                                       LATC 010E  
                              _BankRanges 03A0      USER_USB_CALLBACK_EVENT_HANDLER@event 00AC  
    USER_USB_CALLBACK_EVENT_HANDLER@pdata 00AE                              ___ftadd@sign 00C7  
                     __end_of_DetectAsics 0D05                                       l140 0D12  
                                     l142 0D16                                       l128 09CD  
                                     l208 15FA                                       l330 109A  
                                     l146 0D3C                                       l315 10BB  
                                     l155 0D9D                                       l332 104A  
                                     l156 0DED                                       l341 1073  
             __end_of_USBStdGetDscHandler 13AB                                       l318 10F4  
                                     l271 1F5B                                       l353 0F49  
                                     l274 1F9A                                       l354 0F4A  
                                     l275 1F67                                       l276 1F6A  
                                     l701 0566                                       l366 0FBC  
                                     l358 0F7D                                       l702 0578  
                                     l703 0583                                       l751 0770  
                                     _BDT 0020                                       l695 064E  
                                     l855 1BF8                                       l936 1E32  
                                     _GIE 005F                                       _PR2 001B  
                                     _UIE 0E92                                       _UIR 0E90  
                                     _Cfg 01C1                                       _WQI 00EF  
                                     _WQX 006E                                       _buf 0260  
                              _USBSuspend 1C24                                       _ptr 006C  
                    USBStdSetCfgHandler@i 00B5                      USBStdSetCfgHandler@p 00B2  
                                     wreg 0009                            _USBDeviceTasks 0D05  
                          _USBDeviceState 00E3                    ??_USBCBWakeFromSuspend 005E  
                                    S7071 1800                     ??_USBCtrlTrfRxService 0060  
                USBEnableEndpoint@options 0061                                      INDF1 0001  
                            __CFG_LVP$OFF 0000                                      FSR1H 0007  
                                    FSR1L 0006                                      l1112 0E8F  
                                    l1083 119F                                      l1089 11B6  
                                    l1295 1D46                USBConfigureEndpoint@handle 0060  
                                    l4151 09B2                                      l4143 09A5  
                                    l4135 0993                                      l5023 0063  
                                    l5017 0028                                      l4171 09D2  
                                    l4173 09E2                                      l4405 1D09  
                                    l4191 0A18                                      l4407 1D0B  
                                    l4185 09F7                                      l4601 1610  
                                    l6201 0D4C                                      l5401 17C8  
                                    l5321 0528                                      l4523 1FE8  
                                    l7003 15B0                                      l5403 17FA  
                                    l5331 0540                                      l6301 1E01  
                                    l4541 14CE                                      l6221 0D75  
                                    l5309 04E4                                      l6303 1E04  
                                    l4551 14F6                                      l4519 1FD3  
                                    l4623 0A4F                                      l6231 0D82  
                                    l6215 0D69                                      l5351 05A3  
                                    l5335 0541                                      l6305 1E07  
                                    l4561 1514                                      l4537 14C6  
                                    l4713 1CD2                                      l4721 1341  
                                    l4641 0AB3                                      l4633 0A69  
                                    l6225 0D7B                                      l6209 0D58  
                                    l5329 052F                                      l6403 1F4B  
                                    l4379 11FB                                      l4643 0ABC  
                                    l4635 0A87                                      l5443 0CB2  
                                    l6309 1E0A                                      l4581 15CD  
                                    l4733 1398                                      l4805 1DBA  
                                    l6181 0D29                                      l5445 0CFD  
                                    l5365 0618                                      l5357 05E6  
                                    l5373 0635                                      l4559 150F  
                                    l4735 139B                                      l4727 1376  
                                    l4719 1337                                      l4831 10EB  
                                    l6343 07DF                                      l6239 0D95  
                                    l5359 05F7                                      l6361 1D74  
                                    l7073 1E13                                      l4569 152D  
                                    l4593 1606                                      l4585 15D1  
                                    l6441 13EE                                      l6425 13C5  
                                    l6417 13B5                                      l6601 0F76  
                                    l6521 1051                                      l4649 0ADE  
                                    l4817 10B6                                      l6337 07BA  
                                    l6265 0DD1                                      l6249 0DA3  
                                    l6169 0D19                                      l5713 111B  
                                    l7075 1E2D                                      l6435 13DA  
                                    l4739 139E                                      l6603 0F86  
                                    l6523 1054                                      l4827 10DE  
                                    l6347 07EE                                      l6267 0DE1  
                                    l6259 0DBB                                      l5731 114A  
                                    l5723 1126                                      l5707 110E  
                                    l6357 1D6B                                      l6293 1DF5  
                                    l6613 0FAB                                      l6533 1061  
                                    l6525 1057                                      l4837 10FD  
                                    l6349 07F1                                      l6189 0D36  
                                    l5725 1135                                      l6375 1EF1  
                                    l6295 1DF8                                      l6471 1F76  
                                    l6623 0FC3                                      l6615 0FB0  
                                    l6535 1064                                      l6551 108F  
                                    l4839 10FE                                      l5735 1155  
                                    l6393 1F20                                      l6385 1F12  
                                    l6297 1DFB                                      l6457 1418  
                                    l6481 1F8E                                      l6537 1067  
                                    l6801 1184                                      l5761 1B9A  
                                    l6713 1C08                                      l6299 1DFE  
                                    l6627 0FE2                                      l6547 1082  
                                    l6811 11AC                                      l6803 1189  
                                    l5739 115E                                      l6629 0FEA  
                                    l6901 0ECE                                      l6645 1028  
                                    l5757 1B94                                      l6741 12CD  
                                    l6709 1C00                                      l6591 0F58  
                                    l6583 0F2B                                      l6567 0EFB  
                                    l4799 1D92                                      l6911 0BB0  
                                    l6647 102E                                      l6569 0EFD  
                                    l6809 11A4                                      l6841 0E18  
                                    l6673 0753                                      l6753 1300  
                                    l6851 0E2E                                      l5963 1EA5  
                                    l5955 1E81                                      l6755 1303  
                                    l6747 12E8                                      l6739 12CA  
                                    l6829 1D1F                                      l6845 0E1F  
                                    l6941 0C1D                                      l6933 0C09  
                                    l6917 0BC6                                      l6669 073A  
                                    l5973 1D3C                                      l5957 1E90  
                                    l6871 0E65                                      l6863 0E48  
                                    l5967 1EB0                                      l6881 0E81  
                                    l6873 0E6A                                      l6945 0C25  
                                    l6929 0C01                                      l6795 1171  
                                    l6891 0EB3                                      l6883 0E8B  
                                    l6875 0E6E                                      l6869 0E5B  
                                    l6799 1178                                      l6887 0EA1  
                                    l6969 154B                                      l6995 1596  
                                    l6987 157B                                      l6997 159F  
                                    l6989 1589                                      l6999 15A2  
                                    _LATC 010E                                      u5100 0517  
                                    u4205 1CDD                                      u3335 09B6  
                                    u5130 0556                                      u5205 059B  
                                    u4095 0A47                                      u5215 05AD  
                                    u5305 0CD2                                      u5315 0CE7  
                                    u5235 1798                                      u4605 0049  
                                    u4560 1DD0                                      u4705 0192  
                                    u4570 1DE1                                      u4715 01E2  
                                    u4635 006D                                      u5195 0594  
                                    u4580 001E                                      _RCIF 008D  
                                    u4565 1DCB                                      u4805 038E  
                                    u4725 0246                                      u4645 0085  
                                    u6325 1D48                                      u5295 0CBD  
                                    u4575 1DDD                                      u4815 03B9  
                                    u4735 025E                                      u4655 00AF  
                                    u6335 1D4D                                      u6255 1E86  
                                    u7225 1021                                      u5705 1137  
                                    u4825 03EF                                      u4745 0276  
                                    u4665 00E4                                      u3955 1FDD  
                                    u5715 1142                                      u4835 0407  
                                    u4755 028E                                      u4675 0118  
                                    u6275 1E92                                      u5725 114C  
                                    u4845 0466                                      u4765 02A7  
                                    u4685 014C                                      u6285 1E9D  
                                    u7255 0719                                      u4855 0481  
                                    u4775 02D5                                      u4695 0164  
                                    u6295 1EA7                     ??_USBCtrlTrfTxService 005E  
                                    u7265 0730                                      u4865 0499  
                                    u4785 0325                                      u7515 11BE  
                                    u7275 074F                                      u4875 04B1  
                                    u4795 0376                                      u7445 117F  
                                    u7285 0768                                      u5685 112B  
                                    u4885 04C9                                      _UCFG 0E91  
                                    u7465 119A                                      u7635 0E49  
                                    _UEP0 0E98                                      u7485 11A7  
                                    u7725 0E82                                      u7805 0BE2  
                                    _UEP1 0E99                                      u6855 1EC7  
                                    u6865 1ECF                                      u6785 0797  
                                    u7665 0E5C                                      u7825 0C0A  
                                    u6875 1ED7                                      u7835 0C10  
                                    u7915 1552                                      _UEIE 0E97  
                                    u7695 0E6F                                      u7865 0C26  
                                    u7945 157C                                      u7875 0C2C  
                                    u7795 0BD2                                      u7975 1597  
                                    _UEIR 0E93                                      _UCON 0E8E  
                                    _TMR0 0015                           __end_of_ISRCode 0012  
                                    _Step 0062    USBStdFeatureReqHandler@current_ep_data 00B5  
                                    _pDst 006B                                      _main 1BF5  
                            ___ftpack@arg 00A0                              ___ftpack@exp 00A3  
                                    fsr0h 0005                                      fsr1h 0007  
                                    fsr0l 0004                                      indf0 0000  
                                    indf1 0001                                      fsr1l 0006  
                                    btemp 007E                      __end_of_AsicPushWork 14AE  
                                    start 0012                             __CFG_IESO$OFF 0000  
                      _USBCBCheckOtherReq 07FC                __end_of_USBCheckStdRequest 109B  
                  ??_USBCtrlTrfOutHandler 00A2                         ___bmul@multiplier 0061  
                            ___ftmul@cntr 00B8                              ___ftmul@sign 00B9  
               ??_USBStdFeatureReqHandler 00B1                           __end_of_InitFAN 1C72  
                ??_USBStdGetStatusHandler 005E                              ___fttol@exp1 00D7  
                            ___fttol@lval 00D3                            ?_USBDeviceInit 0070  
                           ?_InitResultRx 0070                       ?_USBCBCheckOtherReq 0070  
                         i1SendCmdReply@n 007B                                     ?_main 0070  
                         __end_of___awdiv 1168                           __end_of___ftadd 0EE6  
                           __CFG_WDTE$OFF 0000         __size_of_USBCtrlEPServiceComplete 0088  
                         __end_of___ftneg 1B68                           __end_of___ftmul 0C4D  
                         ___awdiv@divisor 005E                    __end_of_USBDeviceTasks 0DF0  
                         __end_of___fttol 15B9                 ?_USBCtrlEPServiceComplete 0070  
                                   _IOCBF 0396                           __end_of___lwdiv 1EBB  
                                   i1l741 0B2D                                     i1l852 000E  
                                   _UADDR 0E96                           ___awdiv@counter 00A1  
                                   _RCREG 0199                             ?_InitWorkTick 0070  
                                   _TMR1H 0017                                     _TMR1L 0016  
                                   _USTAT 0E8F        __size_of_USBCtrlEPAllowStatusStage 006E  
                           __CFG_PWRTE$ON 0000                                     _Error 01E1  
                          __CFG_FCMEN$OFF 0000           __end_of_USBCtrlEPAllowDataStage 2000  
                                   _sd000 08AB                                     _sd001 0805  
                                   _sd002 0839                             ___awtoft@sign 0061  
                           ___ftpack@sign 00A4                      ??_USBCBCheckOtherReq 005E  
                        __end_ofi1___bmul 1B91                          __end_ofi1___wmul 1C8F  
                        ??i1_SendCmdReply 0050                                     status 0003  
                     i1___wmul@multiplier 0070                                     wtemp0 007E  
            __size_of_USBStdSetCfgHandler 0081                            __CFG_MCLRE$OFF 0000  
                         __initialization 1241                               _AsicPreCalc 0014  
                            __end_of_main 1C0C                               _DetectAsics 0C4D  
                          ??_InitResultRx 005E                 __size_of_USBCtrlEPService 0074  
                                  ??_main 0062                             ___fttol@sign1 00D2  
                          ??_InitWorkTick 005E                 __size_of_InitializeSystem 0019  
                         ?_USBDeviceTasks 0070                               ?_USBSuspend 0070  
                        __end_of_ResultRx 0B99                                 ??_ISRCode 005D  
                          _InitTempSensor 1BDE                          __end_of_UserInit 1BC9  
                                  _I2CCmd 0064                                    _ACTCON 039B  
                                  _ADRESH 009C                          ___awdiv@dividend 0060  
                        __end_of___awtoft 1D39                                    _ANSELA 018C  
                                  _ANSELB 018D                                    _ANSELC 018E  
                        __end_of___ftpack 11D3                          __end_of_WorkTick 1042  
                                  _IOCAF3 1C9B                                    _T1GSPM 00CC  
                                  i1l1295 1C7A                                    i1l6001 1B88  
                                  i1l6021 169B                                    i1l6023 16CB  
                                  i1l6039 0B1C                                    i1l6047 0AF1  
                                  i1l6049 0B3B                                    i1l6059 0B91  
                                  i1l5985 1C74                                    i1l5997 1B82  
                                  u641_25 166B                                    _OSCCON 0099  
                                  u636_25 1C7B                                    u637_25 1C80  
                                  _TMR1GE 00CF                                    _TMR0IF 005A  
                                  _TMR0CS 04AD                                    _TMR1IE 0488  
                                  _TMR1IF 0088                                    _PWM1OE 309E  
                                  _TMR2IF 0089                                    _TMR1ON 00C0  
                                  _TMR2ON 00E2                                    _SSP1EN 10AD  
                                  _SSP1IF 008B                                    _SSPADD 0212  
                                  _SSPBUF 0211                                 ??_InitFAN 005E  
                              _TempTarget 01E4                                    _Send32 08D8  
                       _shortPacketStatus 006D                             ?_SendCmdReply 00A2  
                         USBDeviceTasks@i 00BF                             ?_SendAsicData 00A2  
             USBStdFeatureReqHandler@pUEP 00B3                  USBTransferOnePacket@data 00A1  
              USBCtrlTrfInHandler@lastDTS 0061                                    _Status 01AC  
                         ??_USBDeviceInit 005E                                    ___bmul 1B91  
                                  ___wmul 1D39                                 ??___awdiv 00A0  
                               ??___ftadd 00C3                                 ??___ftneg 0062  
                               ??___ftmul 00B0                                 ??___fttol 00CE  
                            ?_USBCBInitEP 0070                                 ??___lwdiv 00A0  
                       _USBEnableEndpoint 1D60           __size_of_USBStdGetStatusHandler 0053  
                                  _memset 1CCC                          ___awdiv@quotient 00A3  
                              _ProcessCmd 04E1                        ?_USBEnableEndpoint 0061  
                                  _rotate 1DBD                     _USBCBStdSetDscHandler 0003  
                   ___ftmul@f3_as_product 00B5             __size_of_USBTransferOnePacket 004E  
                      __size_of_ProcessIO 007C                    __end_of_InitTempSensor 1BF5  
                     ??_USBEnableEndpoint 00A4                               _CtrlTrfData 0048  
                   __size_of_AsicPushWork 0082                      _controlTransferState 0069  
                 __end_of__initialization 12AD                                ___ftadd@f1 00BD  
                              ___ftadd@f2 00C0                  __size_of_USBStallHandler 0025  
                          ??_SendCmdReply 00A7                                ___ftneg@f1 00BA  
                              ___awtoft@c 00A5                       ___bmul@multiplicand 005E  
                          ??_SendAsicData 00A4                       __size_of_USBSuspend 0019  
                              ___ftmul@f1 00AA                                ___ftmul@f2 00AD  
                 ??_USBCheckVendorRequest 005E                                ___fttol@f1 00CA  
                          __pcstackCOMMON 0070                 __end_of_USBEnableEndpoint 1D8A  
                           __end_of_sd000 08AF                             __end_of_sd001 0839  
                           __end_of_sd002 086D                              __pidataBANK0 07FF  
                            __pidataBANK3 08B1                              __pidataBANK7 1CAC  
                       _USBCB_SOF_Handler 08AF          __size_of_USBCtrlEPAllowDataStage 0057  
           __size_of_USBConfigureEndpoint 004D               __end_of_USBCtrlTrfInHandler 1101  
                      ?_USBCB_SOF_Handler 0070                                __end_of_ID 08AB  
                               ?i1___bmul 0070                                 ?i1___wmul 0070  
                          _OPTION_REGbits 0095                              _AsicPushWork 142C  
                         ?_InitTempSensor 0070                       i1SendCmdReply@count 007A  
                     ??_USBCB_SOF_Handler 005E                  ??_USBCtrlTrfSetupHandler 00B8  
                        i1___bmul@product 0073                    _USBStdGetStatusHandler 1F56  
                    __end_of_InitResultRx 1BB6                                __pbssBANK0 0062  
                              __pbssBANK1 00E0                                __pbssBANK2 0159  
                              __pbssBANK3 01C7                                __pbssBANK4 0260  
                              __pbssBANK6 0320                         i1SendCmdReply@cmd 0076  
                    __end_of_InitWorkTick 1BDE               __size_of_USBWakeFromSuspend 0018  
                             _pBDTEntryIn 00E0                         __end_of_ProcessIO 132C  
        __end_of_USBCtrlEPServiceComplete 1641                                   ?_Send32 0070  
               __end_of_USBCB_SOF_Handler 08B0                                __pmaintext 1BF5  
                    USBCtrlTrfRxService@i 00A0                                 ?_ResultRx 0070  
                                 ?___bmul 005E                                   ?___wmul 005E  
                              __pintentry 0004                                 ?_UserInit 0070  
                                 _I2CAddr 015E                                   ?_memset 005E  
                  ?_USBCBStdSetDscHandler 0070                                _device_dsc 088D  
                               ?___awtoft 00A5                                 ?___ftpack 00A0  
                        _USBCtrlEPService 0788                                 ?_WorkTick 0070  
                             ?_ProcessCmd 0070                                ??i1___bmul 0071  
                              _ep_data_in 01D1                                   ?_rotate 00A0  
                              ??i1___wmul 0074                          _InitializeSystem 1C3D  
                             _NonceRanges 0320               __end_of_USBCtrlTrfRxService 0AE6  
                      _USBCheckStdRequest 1042                         _configDescriptor1 086D  
             __end_of_USBCtrlTrfTxService 1532                       _USBStdSetCfgHandler 13AB  
                                 _ISRCode 0004                                   _PWM1DCH 0612  
                                 _PWM1DCL 0611                                   _OSCTUNE 0098  
                                 _PWM1CON 0613                                   _TMR1GIE 048F  
                                 _TMR1GIF 008F                       ?_USBCheckStdRequest 0070  
            __size_of_USBStdGetDscHandler 007F                                   _UIEbits 0E92  
           __size_of_USBCBWakeFromSuspend 0001                                __stringtab 0800  
                                 _UIRbits 0E90                                   _InitFAN 1C56  
                    ?_USBStdSetCfgHandler 0070                           __size_of_Send32 00AC  
                                 _TimeOut 0164                                ??_ResultRx 0058  
              __size_of_USBEnableEndpoint 002A                              ?_AsicPreCalc 00AD  
                            ?_DetectAsics 0070                      ??_USBCheckStdRequest 00B7  
                         __size_of___bmul 0012             __size_of_USBCtrlTrfOutHandler 0033  
                                 ___awdiv 1101                                   ___ftadd 0DF0  
                                 ___ftneg 1B5F                          ??_USBDeviceTasks 00BD  
                         __size_of___wmul 0027                                   _WorkNow 00E4  
                                 ___ftmul 0B99                                   _WorkQue 233C  
                                 ___fttol 1532                                   ___lwdiv 1E76  
                       ??_USBStallHandler 005E                                ??_UserInit 0062  
                              ??___awtoft 00A8                                ??___ftpack 005E  
                         __size_of_memset 0021                                ??_WorkTick 00DF  
               __end_of_configDescriptor1 088D                      __size_of_USBCBInitEP 001D  
                                 __ptext1 12B0                                   __ptext2 04E1  
                                 __ptext3 1E76                                   __ptext4 1769  
                                 __ptext5 1B91                                   __ptext6 142C  
                                 __ptext7 1D39                                   __ptext8 0014  
                                 __ptext9 1DBD                                   _inPipes 00E7  
                 __size_of_UpdateFanLevel 0137                          _DetectAsics$2873 00AC  
             _USBDeferOUTDataStagePackets 0167                           __size_of_rotate 0037  
                               _T1CONbits 0018                              ??_USBSuspend 00B1  
                               _T2CONbits 001C                         _USBCBErrorHandler 08B0  
                    __end_of_SendCmdReply 1800                       i1___bmul@multiplier 0072  
                               _IOCBPbits 0394                      __end_of_SendAsicData 1769  
                      ?_USBCBErrorHandler 0070                             ?_USBCBSuspend 0070  
                      __end_of_USB_CD_Ptr 0805           __size_of_USBCtrlTrfSetupHandler 0043  
                                 clrloop0 1B75                      end_of_initialization 12AD  
                          _ProcessIO$2411 00CB                            _ProcessIO$2377 00C9  
             __size_of_USBCBCheckOtherReq 0003                        __end_of_USB_SD_Ptr 0804  
                     _pBDTEntryEP0OutNext 006A                                   init_ram 1B68  
                     ??_USBCBErrorHandler 005E                                   memset@c 005E  
                                 memset@n 0060                                   memset@p 00A2  
                                 initloop 1B69                       __size_of_ProcessCmd 0170  
                ?_USBStdFeatureReqHandler 0070                     ??_USBStdSetCfgHandler 00B1  
                        SendCmdReply@data 00A4                __size_of_USBCB_SOF_Handler 0001  
                      __end_of_USBSuspend 1C3D                   _USBCtrlEPAllowDataStage 1FA9  
                               _RCSTAbits 019D                                   rotate@x 00A0  
                                 rotate@y 00A4                           AsicPreCalc@work 00AD  
                _USBCtrlEPServiceComplete 15B9                     i1___wmul@multiplicand 0072  
              _USBStatusStageEnabledFlag1 016A                _USBStatusStageEnabledFlag2 016B  
                      USBEnableEndpoint@p 00A6                 __end_of_USBCBErrorHandler 08B1  
                        __CFG_FOSC$INTOSC 0000                     __size_of_InitResultRx 0013  
                               _TRISAbits 008C                                 _TRISBbits 008D  
                               _TRISCbits 008E                            ??_USBCBSuspend 005E  
                      _BothEP0OutUOWNsSet 015D                 USBStdSetCfgHandler@i_1089 00B4  
                               _OUTPacket 02A0                 USBConfigureEndpoint@EPNum 005F  
              ?_USBCtrlEPAllowStatusStage 0070                     __size_of_InitWorkTick 0015  
     USER_USB_CALLBACK_EVENT_HANDLER@size 00AF                                 _USTATcopy 00EE  
            __end_of_USBTransferOnePacket 1F56                                 _TXSTAbits 019E  
                           _PrecalcHashes 0340                               ___ftmul@exp 00B4  
                      USBDeviceInit@i_718 00A2                            __end_of_Send32 0984  
                  _USBCtrlTrfSetupHandler 1E33            __size_of_USBCheckVendorRequest 0001  
           __end_of_USBCheckVendorRequest 0003                   __size_ofi1_SendCmdReply 0093  
                          __end_of___bmul 1BA3                     __end_of_USBDeviceInit 0A34  
                            _InitResultRx 1BA3                            __end_of___wmul 1D60  
                        ??_InitTempSensor 005E                               _BAUDCONbits 019F  
                          __end_of_memset 1CED                         _USBBusIsSuspended 0165  
                          __end_of_rotate 1DF4                              _InitWorkTick 1BC9  
                       __size_ofi1___bmul 0011                                 _LastError 01CF  
                     start_initialization 1241                         __size_ofi1___wmul 001D  
                 ?_USBStdGetStatusHandler 0070             USBCtrlTrfRxService@byteToRead 00A1  
            __end_of_USBConfigureEndpoint 1F08           __end_of_USBStdFeatureReqHandler 1000  
       __end_of_USBCtrlEPAllowStatusStage 1241                  __end_of_USBCtrlEPService 07FC  
                        SendAsicData@work 00A2                  __end_of_InitializeSystem 1C56  
               ??_USBCtrlEPAllowDataStage 00A0                            USBDeviceInit@i 00A3  
                                ??_Send32 005E                            USBDeviceInit@p 00A0  
                  _pBDTEntryEP0OutCurrent 00E6                   USBTransferOnePacket@dir 00A0  
                 USBTransferOnePacket@len 00A2                   ??_USBCBStdSetDscHandler 005E  
                                ??___bmul 005F                                 _ResultPos 0067  
                               _ResultQue 01D5                                  ??___wmul 0062  
                     _USBStdGetDscHandler 132C                                 _ProcessIO 12B0  
                             __pdataBANK0 006F                               __pdataBANK3 01A0  
                             __pdataBANK7 03A0                         __size_of_ResultRx 00B3  
                    __size_of_AsicPreCalc 04CD                                  ??_memset 00A0  
                    __size_of_DetectAsics 00B8                              ??_ProcessCmd 00BE  
                   __size_of_SendCmdReply 0097                            _UpdateFanLevel 0651  
                                ??_rotate 00A5                __size_of_USBCBErrorHandler 0001  
                   __size_of_SendAsicData 0095                         __size_of_UserInit 0013  
                  _USBActiveConfiguration 00EC            __end_of_USBStdGetStatusHandler 1FA9  
                       __size_of___awtoft 0027                         __size_of___ftpack 006B  
                             __pbssBIGRAM 233C                         __size_of_WorkTick 003F  
                           __pcstackBANK0 0050                             __pcstackBANK1 00A0  
                           __pcstackBANK2 0120              __size_of_USBCtrlTrfInHandler 0066  
                                ?_ISRCode 0070                      ?_USBStdGetDscHandler 0070  
                      i1SendCmdReply@data 0078                             _ResultRx$3156 007C  
                           _ResultRx$3157 007D                __end_of_USBWakeFromSuspend 1C24  
                         _USBStallHandler 1CED                              _pBDTEntryOut 0159  
                                ?_InitFAN 0070                              _send32_count 016F  
                               __pnvBANK3 01E3                        __end_of_ProcessCmd 0651  
                        ___lwdiv@dividend 0060                              _SendCmdReply 1769  
                            _SendAsicData 16D4                      __end_of_USBCBSuspend 1002  
            __end_of_USBCBWakeFromSuspend 1003                                  ?___awdiv 005E  
                                ?___ftadd 00BD                                  ?___ftneg 00BA  
                              ?_ProcessIO 0070                                  ?___ftmul 00AA  
                                ?___fttol 00CA                                  ?___lwdiv 005E  
                  __end_of_UpdateFanLevel 0788                              AsicPreCalc@K 0120  
                            AsicPreCalc@m 012C                              AsicPreCalc@n 0158  
                            AsicPreCalc@x 0154                              AsicPreCalc@y 0150  
                            AsicPreCalc@z 014C                                 __pstrings 0800  
              USBCBSendResume@delay_count 01CD                                 __pswtext1 1800  
                    _USBTransferOnePacket 1F08                                  _I2CInBuf 015F  
                            DetectAsics@x 00AE                                  _I2CCount 0065  
                                _I2CState 0066                                 _last_bit0 016D  
                               _last_bit1 016E              __end_of_USBCtrlTrfOutHandler 1DBD  
                   ??_USBStdGetDscHandler 005E                               _ep_data_out 01D3  
                        ___lwdiv@quotient 00A1              __size_of_USBCtrlTrfRxService 00B2  
           USBConfigureEndpoint@direction 005E              __size_of_USBCtrlTrfTxService 0084  
                          ___wmul@product 00A0                                  _LATAbits 010C  
                                _LATCbits 010E                ??_USBCtrlEPServiceComplete 00A2  
                               clear_ram0 1B74                                  _PIE2bits 0092  
                   i1___bmul@multiplicand 0070                           SendCmdReply@cmd 00A2  
                                _PIR2bits 0012                                  _INPacket 0220  
               USBCtrlEPService@setup_cnt 00BC                                  _UEP0bits 0E98  
              _USBDeferINDataStagePackets 0166                            i1_SendCmdReply 1641  
                           ??_USBCBInitEP 00A9               __size_of_USBCheckStdRequest 0059  
                                _UCONbits 0E8E                           ?_UpdateFanLevel 0070  
                     _UpdateFanLevel$2876 00DC                      _USBConfigureEndpoint 1EBB  
                           ProcessCmd@cmd 00C4          __size_of_USBStdFeatureReqHandler 011A  
                                i1___bmul 1B80                                _ADCON0bits 009D  
                              _ADCON1bits 009E                                _ADCON2bits 009F  
                       ___wmul@multiplier 005E                     ?_USBTransferOnePacket 00A0  
                                i1___wmul 1C72                                  _BankSize 01E5  
                                _FanLevel 01E3                              _RemoteWakeup 0161  
                                _ClockCfg 01B9                __end_of_USBCBCheckOtherReq 07FF  
                                _HashTime 006F                   __end_of_USBStallHandler 1D12  
                        __size_of_ISRCode 000E               ??_USBCtrlEPAllowStatusStage 005E  
             __end_of_USBStdSetCfgHandler 142C                                  _LastTemp 0160  
                            _SlaveAddress 00E2                        __end_of_device_dsc 089F  
                 ?_USBCtrlTrfSetupHandler 0070                          __size_of_InitFAN 001C  
                 USBStdGetStatusHandler@p 005F                    __end_ofi1_SendCmdReply 16D4  
                  USBTransferOnePacket@ep 00A5                                  _ResultQC 0162  
                                _ResultRx 0AE6                                  _SetupPkt 0040  
                                _SlowTick 0163                               ??_ProcessIO 00C5  
                   ?_USBConfigureEndpoint 005E                                  _UserInit 1BB6  
                        __size_of___awdiv 0067                          __size_of___ftadd 00F6  
                        __size_of___ftneg 0009                          __size_of___ftmul 00B4  
                        __size_of___fttol 0087                          __size_of___lwdiv 0045  
                                ___awtoft 1D12                                  ___ftpack 1168  
                                _WorkTick 1003                        __end_of__stringtab 0801  
                              _ANSELBbits 018D                       __end_of_USBCBInitEP 1CAC  
                           ?_AsicPushWork 0070                               _send32_data 015B  
                 __size_of_USBDeviceTasks 00EB                           ___lwdiv@divisor 005E  
                         ___lwdiv@counter 00A3                                  __ptext10 16D4  
                                __ptext11 08D8                                  __ptext20 1003  
                                __ptext12 1C3D                                  __ptext21 0651  
                                __ptext13 1BB6                                _T1GCONbits 0019  
                                __ptext30 109B                                  __ptext22 1532  
                                __ptext14 1BA3                                  __ptext31 1D8A  
                                __ptext23 1B5F                                  __ptext15 1BC9  
                                __ptext40 15B9                                  __ptext32 0A34  
                                __ptext24 0B99                                  __ptext16 1BDE  
                                __ptext41 1FA9                                  __ptext33 1E33  
                                __ptext25 0DF0                                  __ptext17 1C56  
                                __ptext50 1D60                                  __ptext42 14AE  
                                __ptext34 1042                                  __ptext26 1D12  
                                __ptext18 0C4D                                  __ptext51 1EBB  
                                __ptext43 11D3                                  __ptext35 0EE6  
                                __ptext27 1168                                  __ptext19 1101  
                                __ptext52 0003                                  __ptext44 1CED  
                                __ptext36 1F56                                  __ptext28 0D05  
                                __ptext61 0AE6                                  __ptext53 07FC  
                                __ptext45 1C24                                  __ptext37 132C  
                                __ptext29 0788                                  __ptext62 1641  
                                __ptext54 0002                                  __ptext46 1C0C  
                                __ptext38 13AB                                  __ptext63 1B80  
                                __ptext55 08B0                                  __ptext47 1DF4  
                                __ptext39 1CCC                                  __ptext64 1C72  
                                __ptext56 08AF                                  __ptext48 1C8F  
                                __ptext57 1002                                  __ptext49 1F08  
                                __ptext58 1001                                  __ptext59 0984  
                    _USBCBWakeFromSuspend 1002            __end_of_USBCtrlTrfSetupHandler 1E76  
                           __size_of_main 0017                         ?_USBCtrlEPService 0070  
                   __size_of_USBCBSuspend 0001                         ?_InitializeSystem 0070  
                      ??_USBCtrlEPService 00B9                       _USBGenericOutHandle 0169  
                     _USBCtrlTrfInHandler 109B                           ?i1_SendCmdReply 0076  
                      ??_InitializeSystem 0062                                  _outPipes 01C7  
                    _USBCtrlTrfOutHandler 1D8A                 _USBCtrlEPAllowStatusStage 11D3  
          __size_of_USBCBStdSetDscHandler 0001             __end_of_USBCBStdSetDscHandler 0004  
                  ??_USBTransferOnePacket 00A3                     _USBCheckVendorRequest 0002  
                          ??_AsicPushWork 00B9                 _USBDeferStatusStagePacket 0068  
                              _INTCONbits 000B                        _USBGenericInHandle 0168  
                    ?_USBCtrlTrfInHandler 0070             USBCtrlTrfTxService@byteToSend 0060  
                                memset@p1 00A1                              _USBCBSuspend 1001  
                        ?_USBStallHandler 0070                  USBStdFeatureReqHandler@p 00B6  
                   ?_USBCBWakeFromSuspend 0070                                  intlevel1 0000  
                  __size_of_USBDeviceInit 00B0   __end_of_USER_USB_CALLBACK_EVENT_HANDLER 1E33  
__size_of_USER_USB_CALLBACK_EVENT_HANDLER 003F         ??_USER_USB_CALLBACK_EVENT_HANDLER 0062  
        ?_USER_USB_CALLBACK_EVENT_HANDLER 00AC           _USER_USB_CALLBACK_EVENT_HANDLER 1DF4  
                        AsicPreCalc@F3347 01A0                                  next_word 08DD  
                       SendCmdReply@count 00A6                             SendCmdReply@n 00AF  
                           ??_AsicPreCalc 00AF                           _ProcessCmd$2059 00C2  
                           ??_DetectAsics 00A5                    ??_USBConfigureEndpoint 00A0  
                   ?_USBCtrlTrfOutHandler 0070                      __CFG_CPUDIV$NOCLKDIV 0000  
                     _USBCtrlTrfRxService 0A34                               _USBCBInitEP 1C8F  
                      _USBWakeFromSuspend 1C0C                   _USBStdFeatureReqHandler 0EE6  
                     _USBCtrlTrfTxService 14AE                       ?_USBWakeFromSuspend 0070  
                   ??_USBCtrlTrfInHandler 00A0                     _USBAlternateInterface 00ED  
                             _SSPCON1bits 0215                               _SSPCON2bits 0216  
                     USBEnableEndpoint@ep 00A8                               _SSPCON3bits 0217  
                         _endpoint_number 00E5                   __size_of_InitTempSensor 0017  
                    ?_USBCtrlTrfRxService 0070                  ?_USBCtrlEPAllowDataStage 0070  
                    ?_USBCtrlTrfTxService 0070              _USBStatusStageTimeoutCounter 016C  
                    ??_USBWakeFromSuspend 00B1                USBTransferOnePacket@handle 00A6  
                        ??_UpdateFanLevel 00D8                                _USB_CD_Ptr 0804  
