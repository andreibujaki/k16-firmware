

Microchip Technology PIC LITE Macro Assembler V1.20 build 52243 
                                                                                               Wed Oct 23 12:58:25 2013

Microchip Technology Omniscient Code Generator (Lite mode) build 52243
     1                           	processor	16LF1459
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	idataBANK3,global,class=CODE,delta=2
     7                           	psect	idataBANK6,global,class=CODE,delta=2
     8                           	psect	strings,global,class=STRING,delta=2
     9                           	psect	nvBANK2,global,class=BANK2,space=1,delta=1
    10                           	psect	cinit,global,class=CODE,merge=1,delta=2
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    15                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    16                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    17                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    18                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    19                           	psect	bssBANK6,global,class=BANK6,space=1,delta=1
    20                           	psect	dataBANK6,global,class=BANK6,space=1,delta=1
    21                           	psect	clrtext,global,class=CODE,delta=2
    22                           	psect	inittext,global,class=CODE,delta=2
    23                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    24                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    25                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    26                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    27                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    28                           	psect	text1,local,class=CODE,merge=1,delta=2
    29                           	psect	text2,local,class=CODE,merge=1,delta=2
    30                           	psect	text3,local,class=CODE,merge=1,delta=2
    31                           	psect	text4,local,class=CODE,merge=1,delta=2
    32                           	psect	text5,local,class=CODE,merge=1,delta=2
    33                           	psect	text6,local,class=CODE,merge=1,delta=2
    34                           	psect	text7,local,class=CODE,merge=1,delta=2
    35                           	psect	text8,local,class=CODE,merge=1,delta=2
    36                           	psect	text9,local,class=CODE,merge=1,delta=2
    37                           	psect	text10,local,class=CODE,merge=1,delta=2
    38                           	psect	text11,local,class=CODE,merge=1,delta=2
    39                           	psect	text12,local,class=CODE,merge=1,delta=2
    40                           	psect	text13,local,class=CODE,merge=1,delta=2
    41                           	psect	text14,local,class=CODE,merge=1,delta=2
    42                           	psect	text15,local,class=CODE,merge=1,delta=2
    43                           	psect	text16,local,class=CODE,merge=1,delta=2
    44                           	psect	text17,local,class=CODE,merge=1,delta=2
    45                           	psect	text18,local,class=CODE,merge=1,delta=2
    46                           	psect	text19,local,class=CODE,merge=1,delta=2
    47                           	psect	text20,local,class=CODE,merge=1,delta=2
    48                           	psect	text21,local,class=CODE,merge=1,delta=2
    49                           	psect	text22,local,class=CODE,merge=1,delta=2
    50                           	psect	text23,local,class=CODE,merge=1,delta=2
    51                           	psect	text24,local,class=CODE,merge=1,delta=2
    52                           	psect	text25,local,class=CODE,merge=1,delta=2
    53                           	psect	text26,local,class=CODE,merge=1,delta=2
    54                           	psect	text27,local,class=CODE,merge=1,delta=2
    55                           	psect	swtext1,local,class=CONST,delta=2
    56                           	psect	text28,local,class=CODE,merge=1,delta=2
    57                           	psect	text29,local,class=CODE,merge=1,delta=2
    58                           	psect	text30,local,class=CODE,merge=1,delta=2
    59                           	psect	text31,local,class=CODE,merge=1,delta=2
    60                           	psect	text32,local,class=CODE,merge=1,delta=2
    61                           	psect	text33,local,class=CODE,merge=1,delta=2
    62                           	psect	text34,local,class=CODE,merge=1,delta=2
    63                           	psect	text35,local,class=CODE,merge=1,delta=2
    64                           	psect	text36,local,class=CODE,merge=1,delta=2
    65                           	psect	text37,local,class=CODE,merge=1,delta=2
    66                           	psect	text38,local,class=CODE,merge=1,delta=2
    67                           	psect	text39,local,class=CODE,merge=1,delta=2
    68                           	psect	text40,local,class=CODE,merge=1,delta=2
    69                           	psect	text41,local,class=CODE,merge=1,delta=2
    70                           	psect	text42,local,class=CODE,merge=1,delta=2
    71                           	psect	text43,local,class=CODE,merge=1,delta=2
    72                           	psect	text44,local,class=CODE,merge=1,delta=2
    73                           	psect	text45,local,class=CODE,merge=1,delta=2
    74                           	psect	text46,local,class=CODE,merge=1,delta=2
    75                           	psect	text47,local,class=CODE,merge=1,delta=2
    76                           	psect	text48,local,class=CODE,merge=1,delta=2
    77                           	psect	text49,local,class=CODE,merge=1,delta=2
    78                           	psect	text50,local,class=CODE,merge=1,delta=2
    79                           	psect	text51,local,class=CODE,merge=1,delta=2
    80                           	psect	text52,local,class=CODE,merge=1,delta=2
    81                           	psect	intentry,global,class=CODE,delta=2
    82                           	psect	text54,local,class=CODE,merge=1,delta=2
    83                           	psect	text55,local,class=CODE,merge=1,delta=2
    84                           	psect	text56,local,class=CODE,merge=1,delta=2
    85                           	psect	text57,local,class=CODE,merge=1,delta=2
    86                           	dabs	1,0x620,48
    87                           	dabs	1,0x5A0,80
    88                           	dabs	1,0x53C,52
    89                           	dabs	1,0x20,32,_BDT
    90                           	dabs	1,0x48,8,_CtrlTrfData
    91                           	dabs	1,0x40,8,_SetupPkt
    92                           	dabs	1,0x220,64,_INPacket
    93                           	dabs	1,0x2A0,64,_OUTPacket
    94                           	dabs	1,0x233C,0,_WorkQue
    95                           	dabs	1,0x7E,2
    96  0000                     	;# 
    97  0001                     	;# 
    98  0002                     	;# 
    99  0003                     	;# 
   100  0004                     	;# 
   101  0005                     	;# 
   102  0006                     	;# 
   103  0007                     	;# 
   104  0008                     	;# 
   105  0009                     	;# 
   106  000A                     	;# 
   107  000B                     	;# 
   108  000C                     	;# 
   109  000D                     	;# 
   110  000E                     	;# 
   111  0011                     	;# 
   112  0012                     	;# 
   113  0015                     	;# 
   114  0016                     	;# 
   115  0016                     	;# 
   116  0017                     	;# 
   117  0018                     	;# 
   118  0019                     	;# 
   119  001A                     	;# 
   120  001B                     	;# 
   121  001C                     	;# 
   122  008C                     	;# 
   123  008D                     	;# 
   124  008E                     	;# 
   125  0091                     	;# 
   126  0092                     	;# 
   127  0095                     	;# 
   128  0096                     	;# 
   129  0097                     	;# 
   130  0098                     	;# 
   131  0099                     	;# 
   132  009A                     	;# 
   133  009B                     	;# 
   134  009B                     	;# 
   135  009C                     	;# 
   136  009D                     	;# 
   137  009E                     	;# 
   138  009F                     	;# 
   139  010C                     	;# 
   140  010D                     	;# 
   141  010E                     	;# 
   142  0111                     	;# 
   143  0112                     	;# 
   144  0113                     	;# 
   145  0114                     	;# 
   146  0115                     	;# 
   147  0116                     	;# 
   148  0117                     	;# 
   149  0118                     	;# 
   150  0119                     	;# 
   151  011D                     	;# 
   152  018C                     	;# 
   153  018D                     	;# 
   154  018E                     	;# 
   155  0191                     	;# 
   156  0191                     	;# 
   157  0192                     	;# 
   158  0193                     	;# 
   159  0193                     	;# 
   160  0194                     	;# 
   161  0195                     	;# 
   162  0196                     	;# 
   163  0199                     	;# 
   164  019A                     	;# 
   165  019B                     	;# 
   166  019C                     	;# 
   167  019D                     	;# 
   168  019E                     	;# 
   169  019F                     	;# 
   170  020C                     	;# 
   171  020D                     	;# 
   172  0211                     	;# 
   173  0211                     	;# 
   174  0212                     	;# 
   175  0212                     	;# 
   176  0213                     	;# 
   177  0213                     	;# 
   178  0214                     	;# 
   179  0214                     	;# 
   180  0215                     	;# 
   181  0215                     	;# 
   182  0215                     	;# 
   183  0216                     	;# 
   184  0216                     	;# 
   185  0217                     	;# 
   186  0217                     	;# 
   187  0391                     	;# 
   188  0392                     	;# 
   189  0393                     	;# 
   190  0394                     	;# 
   191  0395                     	;# 
   192  0396                     	;# 
   193  039A                     	;# 
   194  039B                     	;# 
   195  0611                     	;# 
   196  0612                     	;# 
   197  0613                     	;# 
   198  0613                     	;# 
   199  0614                     	;# 
   200  0615                     	;# 
   201  0616                     	;# 
   202  0616                     	;# 
   203  0691                     	;# 
   204  0692                     	;# 
   205  0693                     	;# 
   206  0694                     	;# 
   207  0695                     	;# 
   208  0E8E                     	;# 
   209  0E8F                     	;# 
   210  0E90                     	;# 
   211  0E91                     	;# 
   212  0E92                     	;# 
   213  0E93                     	;# 
   214  0E94                     	;# 
   215  0E94                     	;# 
   216  0E95                     	;# 
   217  0E96                     	;# 
   218  0E97                     	;# 
   219  0E98                     	;# 
   220  0E99                     	;# 
   221  0E9A                     	;# 
   222  0E9B                     	;# 
   223  0E9C                     	;# 
   224  0E9D                     	;# 
   225  0E9E                     	;# 
   226  0E9F                     	;# 
   227  0FE4                     	;# 
   228  0FE5                     	;# 
   229  0FE6                     	;# 
   230  0FE7                     	;# 
   231  0FE8                     	;# 
   232  0FE9                     	;# 
   233  0FEA                     	;# 
   234  0FEB                     	;# 
   235  0FED                     	;# 
   236  0FEE                     	;# 
   237  0FEF                     	;# 
   238  0000                     	;# 
   239  0001                     	;# 
   240  0002                     	;# 
   241  0003                     	;# 
   242  0004                     	;# 
   243  0005                     	;# 
   244  0006                     	;# 
   245  0007                     	;# 
   246  0008                     	;# 
   247  0009                     	;# 
   248  000A                     	;# 
   249  000B                     	;# 
   250  000C                     	;# 
   251  000D                     	;# 
   252  000E                     	;# 
   253  0011                     	;# 
   254  0012                     	;# 
   255  0015                     	;# 
   256  0016                     	;# 
   257  0016                     	;# 
   258  0017                     	;# 
   259  0018                     	;# 
   260  0019                     	;# 
   261  001A                     	;# 
   262  001B                     	;# 
   263  001C                     	;# 
   264  008C                     	;# 
   265  008D                     	;# 
   266  008E                     	;# 
   267  0091                     	;# 
   268  0092                     	;# 
   269  0095                     	;# 
   270  0096                     	;# 
   271  0097                     	;# 
   272  0098                     	;# 
   273  0099                     	;# 
   274  009A                     	;# 
   275  009B                     	;# 
   276  009B                     	;# 
   277  009C                     	;# 
   278  009D                     	;# 
   279  009E                     	;# 
   280  009F                     	;# 
   281  010C                     	;# 
   282  010D                     	;# 
   283  010E                     	;# 
   284  0111                     	;# 
   285  0112                     	;# 
   286  0113                     	;# 
   287  0114                     	;# 
   288  0115                     	;# 
   289  0116                     	;# 
   290  0117                     	;# 
   291  0118                     	;# 
   292  0119                     	;# 
   293  011D                     	;# 
   294  018C                     	;# 
   295  018D                     	;# 
   296  018E                     	;# 
   297  0191                     	;# 
   298  0191                     	;# 
   299  0192                     	;# 
   300  0193                     	;# 
   301  0193                     	;# 
   302  0194                     	;# 
   303  0195                     	;# 
   304  0196                     	;# 
   305  0199                     	;# 
   306  019A                     	;# 
   307  019B                     	;# 
   308  019C                     	;# 
   309  019D                     	;# 
   310  019E                     	;# 
   311  019F                     	;# 
   312  020C                     	;# 
   313  020D                     	;# 
   314  0211                     	;# 
   315  0211                     	;# 
   316  0212                     	;# 
   317  0212                     	;# 
   318  0213                     	;# 
   319  0213                     	;# 
   320  0214                     	;# 
   321  0214                     	;# 
   322  0215                     	;# 
   323  0215                     	;# 
   324  0215                     	;# 
   325  0216                     	;# 
   326  0216                     	;# 
   327  0217                     	;# 
   328  0217                     	;# 
   329  0391                     	;# 
   330  0392                     	;# 
   331  0393                     	;# 
   332  0394                     	;# 
   333  0395                     	;# 
   334  0396                     	;# 
   335  039A                     	;# 
   336  039B                     	;# 
   337  0611                     	;# 
   338  0612                     	;# 
   339  0613                     	;# 
   340  0613                     	;# 
   341  0614                     	;# 
   342  0615                     	;# 
   343  0616                     	;# 
   344  0616                     	;# 
   345  0691                     	;# 
   346  0692                     	;# 
   347  0693                     	;# 
   348  0694                     	;# 
   349  0695                     	;# 
   350  0E8E                     	;# 
   351  0E8F                     	;# 
   352  0E90                     	;# 
   353  0E91                     	;# 
   354  0E92                     	;# 
   355  0E93                     	;# 
   356  0E94                     	;# 
   357  0E94                     	;# 
   358  0E95                     	;# 
   359  0E96                     	;# 
   360  0E97                     	;# 
   361  0E98                     	;# 
   362  0E99                     	;# 
   363  0E9A                     	;# 
   364  0E9B                     	;# 
   365  0E9C                     	;# 
   366  0E9D                     	;# 
   367  0E9E                     	;# 
   368  0E9F                     	;# 
   369  0FE4                     	;# 
   370  0FE5                     	;# 
   371  0FE6                     	;# 
   372  0FE7                     	;# 
   373  0FE8                     	;# 
   374  0FE9                     	;# 
   375  0FEA                     	;# 
   376  0FEB                     	;# 
   377  0FED                     	;# 
   378  0FEE                     	;# 
   379  0FEF                     	;# 
   380  0000                     	;# 
   381  0001                     	;# 
   382  0002                     	;# 
   383  0003                     	;# 
   384  0004                     	;# 
   385  0005                     	;# 
   386  0006                     	;# 
   387  0007                     	;# 
   388  0008                     	;# 
   389  0009                     	;# 
   390  000A                     	;# 
   391  000B                     	;# 
   392  000C                     	;# 
   393  000D                     	;# 
   394  000E                     	;# 
   395  0011                     	;# 
   396  0012                     	;# 
   397  0015                     	;# 
   398  0016                     	;# 
   399  0016                     	;# 
   400  0017                     	;# 
   401  0018                     	;# 
   402  0019                     	;# 
   403  001A                     	;# 
   404  001B                     	;# 
   405  001C                     	;# 
   406  008C                     	;# 
   407  008D                     	;# 
   408  008E                     	;# 
   409  0091                     	;# 
   410  0092                     	;# 
   411  0095                     	;# 
   412  0096                     	;# 
   413  0097                     	;# 
   414  0098                     	;# 
   415  0099                     	;# 
   416  009A                     	;# 
   417  009B                     	;# 
   418  009B                     	;# 
   419  009C                     	;# 
   420  009D                     	;# 
   421  009E                     	;# 
   422  009F                     	;# 
   423  010C                     	;# 
   424  010D                     	;# 
   425  010E                     	;# 
   426  0111                     	;# 
   427  0112                     	;# 
   428  0113                     	;# 
   429  0114                     	;# 
   430  0115                     	;# 
   431  0116                     	;# 
   432  0117                     	;# 
   433  0118                     	;# 
   434  0119                     	;# 
   435  011D                     	;# 
   436  018C                     	;# 
   437  018D                     	;# 
   438  018E                     	;# 
   439  0191                     	;# 
   440  0191                     	;# 
   441  0192                     	;# 
   442  0193                     	;# 
   443  0193                     	;# 
   444  0194                     	;# 
   445  0195                     	;# 
   446  0196                     	;# 
   447  0199                     	;# 
   448  019A                     	;# 
   449  019B                     	;# 
   450  019C                     	;# 
   451  019D                     	;# 
   452  019E                     	;# 
   453  019F                     	;# 
   454  020C                     	;# 
   455  020D                     	;# 
   456  0211                     	;# 
   457  0211                     	;# 
   458  0212                     	;# 
   459  0212                     	;# 
   460  0213                     	;# 
   461  0213                     	;# 
   462  0214                     	;# 
   463  0214                     	;# 
   464  0215                     	;# 
   465  0215                     	;# 
   466  0215                     	;# 
   467  0216                     	;# 
   468  0216                     	;# 
   469  0217                     	;# 
   470  0217                     	;# 
   471  0391                     	;# 
   472  0392                     	;# 
   473  0393                     	;# 
   474  0394                     	;# 
   475  0395                     	;# 
   476  0396                     	;# 
   477  039A                     	;# 
   478  039B                     	;# 
   479  0611                     	;# 
   480  0612                     	;# 
   481  0613                     	;# 
   482  0613                     	;# 
   483  0614                     	;# 
   484  0615                     	;# 
   485  0616                     	;# 
   486  0616                     	;# 
   487  0691                     	;# 
   488  0692                     	;# 
   489  0693                     	;# 
   490  0694                     	;# 
   491  0695                     	;# 
   492  0E8E                     	;# 
   493  0E8F                     	;# 
   494  0E90                     	;# 
   495  0E91                     	;# 
   496  0E92                     	;# 
   497  0E93                     	;# 
   498  0E94                     	;# 
   499  0E94                     	;# 
   500  0E95                     	;# 
   501  0E96                     	;# 
   502  0E97                     	;# 
   503  0E98                     	;# 
   504  0E99                     	;# 
   505  0E9A                     	;# 
   506  0E9B                     	;# 
   507  0E9C                     	;# 
   508  0E9D                     	;# 
   509  0E9E                     	;# 
   510  0E9F                     	;# 
   511  0FE4                     	;# 
   512  0FE5                     	;# 
   513  0FE6                     	;# 
   514  0FE7                     	;# 
   515  0FE8                     	;# 
   516  0FE9                     	;# 
   517  0FEA                     	;# 
   518  0FEB                     	;# 
   519  0FED                     	;# 
   520  0FEE                     	;# 
   521  0FEF                     	;# 
   522  0000                     	;# 
   523  0001                     	;# 
   524  0002                     	;# 
   525  0003                     	;# 
   526  0004                     	;# 
   527  0005                     	;# 
   528  0006                     	;# 
   529  0007                     	;# 
   530  0008                     	;# 
   531  0009                     	;# 
   532  000A                     	;# 
   533  000B                     	;# 
   534  000C                     	;# 
   535  000D                     	;# 
   536  000E                     	;# 
   537  0011                     	;# 
   538  0012                     	;# 
   539  0015                     	;# 
   540  0016                     	;# 
   541  0016                     	;# 
   542  0017                     	;# 
   543  0018                     	;# 
   544  0019                     	;# 
   545  001A                     	;# 
   546  001B                     	;# 
   547  001C                     	;# 
   548  008C                     	;# 
   549  008D                     	;# 
   550  008E                     	;# 
   551  0091                     	;# 
   552  0092                     	;# 
   553  0095                     	;# 
   554  0096                     	;# 
   555  0097                     	;# 
   556  0098                     	;# 
   557  0099                     	;# 
   558  009A                     	;# 
   559  009B                     	;# 
   560  009B                     	;# 
   561  009C                     	;# 
   562  009D                     	;# 
   563  009E                     	;# 
   564  009F                     	;# 
   565  010C                     	;# 
   566  010D                     	;# 
   567  010E                     	;# 
   568  0111                     	;# 
   569  0112                     	;# 
   570  0113                     	;# 
   571  0114                     	;# 
   572  0115                     	;# 
   573  0116                     	;# 
   574  0117                     	;# 
   575  0118                     	;# 
   576  0119                     	;# 
   577  011D                     	;# 
   578  018C                     	;# 
   579  018D                     	;# 
   580  018E                     	;# 
   581  0191                     	;# 
   582  0191                     	;# 
   583  0192                     	;# 
   584  0193                     	;# 
   585  0193                     	;# 
   586  0194                     	;# 
   587  0195                     	;# 
   588  0196                     	;# 
   589  0199                     	;# 
   590  019A                     	;# 
   591  019B                     	;# 
   592  019C                     	;# 
   593  019D                     	;# 
   594  019E                     	;# 
   595  019F                     	;# 
   596  020C                     	;# 
   597  020D                     	;# 
   598  0211                     	;# 
   599  0211                     	;# 
   600  0212                     	;# 
   601  0212                     	;# 
   602  0213                     	;# 
   603  0213                     	;# 
   604  0214                     	;# 
   605  0214                     	;# 
   606  0215                     	;# 
   607  0215                     	;# 
   608  0215                     	;# 
   609  0216                     	;# 
   610  0216                     	;# 
   611  0217                     	;# 
   612  0217                     	;# 
   613  0391                     	;# 
   614  0392                     	;# 
   615  0393                     	;# 
   616  0394                     	;# 
   617  0395                     	;# 
   618  0396                     	;# 
   619  039A                     	;# 
   620  039B                     	;# 
   621  0611                     	;# 
   622  0612                     	;# 
   623  0613                     	;# 
   624  0613                     	;# 
   625  0614                     	;# 
   626  0615                     	;# 
   627  0616                     	;# 
   628  0616                     	;# 
   629  0691                     	;# 
   630  0692                     	;# 
   631  0693                     	;# 
   632  0694                     	;# 
   633  0695                     	;# 
   634  0E8E                     	;# 
   635  0E8F                     	;# 
   636  0E90                     	;# 
   637  0E91                     	;# 
   638  0E92                     	;# 
   639  0E93                     	;# 
   640  0E94                     	;# 
   641  0E94                     	;# 
   642  0E95                     	;# 
   643  0E96                     	;# 
   644  0E97                     	;# 
   645  0E98                     	;# 
   646  0E99                     	;# 
   647  0E9A                     	;# 
   648  0E9B                     	;# 
   649  0E9C                     	;# 
   650  0E9D                     	;# 
   651  0E9E                     	;# 
   652  0E9F                     	;# 
   653  0FE4                     	;# 
   654  0FE5                     	;# 
   655  0FE6                     	;# 
   656  0FE7                     	;# 
   657  0FE8                     	;# 
   658  0FE9                     	;# 
   659  0FEA                     	;# 
   660  0FEB                     	;# 
   661  0FED                     	;# 
   662  0FEE                     	;# 
   663  0FEF                     	;# 
   664  0000                     	;# 
   665  0001                     	;# 
   666  0002                     	;# 
   667  0003                     	;# 
   668  0004                     	;# 
   669  0005                     	;# 
   670  0006                     	;# 
   671  0007                     	;# 
   672  0008                     	;# 
   673  0009                     	;# 
   674  000A                     	;# 
   675  000B                     	;# 
   676  000C                     	;# 
   677  000D                     	;# 
   678  000E                     	;# 
   679  0011                     	;# 
   680  0012                     	;# 
   681  0015                     	;# 
   682  0016                     	;# 
   683  0016                     	;# 
   684  0017                     	;# 
   685  0018                     	;# 
   686  0019                     	;# 
   687  001A                     	;# 
   688  001B                     	;# 
   689  001C                     	;# 
   690  008C                     	;# 
   691  008D                     	;# 
   692  008E                     	;# 
   693  0091                     	;# 
   694  0092                     	;# 
   695  0095                     	;# 
   696  0096                     	;# 
   697  0097                     	;# 
   698  0098                     	;# 
   699  0099                     	;# 
   700  009A                     	;# 
   701  009B                     	;# 
   702  009B                     	;# 
   703  009C                     	;# 
   704  009D                     	;# 
   705  009E                     	;# 
   706  009F                     	;# 
   707  010C                     	;# 
   708  010D                     	;# 
   709  010E                     	;# 
   710  0111                     	;# 
   711  0112                     	;# 
   712  0113                     	;# 
   713  0114                     	;# 
   714  0115                     	;# 
   715  0116                     	;# 
   716  0117                     	;# 
   717  0118                     	;# 
   718  0119                     	;# 
   719  011D                     	;# 
   720  018C                     	;# 
   721  018D                     	;# 
   722  018E                     	;# 
   723  0191                     	;# 
   724  0191                     	;# 
   725  0192                     	;# 
   726  0193                     	;# 
   727  0193                     	;# 
   728  0194                     	;# 
   729  0195                     	;# 
   730  0196                     	;# 
   731  0199                     	;# 
   732  019A                     	;# 
   733  019B                     	;# 
   734  019C                     	;# 
   735  019D                     	;# 
   736  019E                     	;# 
   737  019F                     	;# 
   738  020C                     	;# 
   739  020D                     	;# 
   740  0211                     	;# 
   741  0211                     	;# 
   742  0212                     	;# 
   743  0212                     	;# 
   744  0213                     	;# 
   745  0213                     	;# 
   746  0214                     	;# 
   747  0214                     	;# 
   748  0215                     	;# 
   749  0215                     	;# 
   750  0215                     	;# 
   751  0216                     	;# 
   752  0216                     	;# 
   753  0217                     	;# 
   754  0217                     	;# 
   755  0391                     	;# 
   756  0392                     	;# 
   757  0393                     	;# 
   758  0394                     	;# 
   759  0395                     	;# 
   760  0396                     	;# 
   761  039A                     	;# 
   762  039B                     	;# 
   763  0611                     	;# 
   764  0612                     	;# 
   765  0613                     	;# 
   766  0613                     	;# 
   767  0614                     	;# 
   768  0615                     	;# 
   769  0616                     	;# 
   770  0616                     	;# 
   771  0691                     	;# 
   772  0692                     	;# 
   773  0693                     	;# 
   774  0694                     	;# 
   775  0695                     	;# 
   776  0E8E                     	;# 
   777  0E8F                     	;# 
   778  0E90                     	;# 
   779  0E91                     	;# 
   780  0E92                     	;# 
   781  0E93                     	;# 
   782  0E94                     	;# 
   783  0E94                     	;# 
   784  0E95                     	;# 
   785  0E96                     	;# 
   786  0E97                     	;# 
   787  0E98                     	;# 
   788  0E99                     	;# 
   789  0E9A                     	;# 
   790  0E9B                     	;# 
   791  0E9C                     	;# 
   792  0E9D                     	;# 
   793  0E9E                     	;# 
   794  0E9F                     	;# 
   795  0FE4                     	;# 
   796  0FE5                     	;# 
   797  0FE6                     	;# 
   798  0FE7                     	;# 
   799  0FE8                     	;# 
   800  0FE9                     	;# 
   801  0FEA                     	;# 
   802  0FEB                     	;# 
   803  0FED                     	;# 
   804  0FEE                     	;# 
   805  0FEF                     	;# 
   806  0000                     	;# 
   807  0001                     	;# 
   808  0002                     	;# 
   809  0003                     	;# 
   810  0004                     	;# 
   811  0005                     	;# 
   812  0006                     	;# 
   813  0007                     	;# 
   814  0008                     	;# 
   815  0009                     	;# 
   816  000A                     	;# 
   817  000B                     	;# 
   818  000C                     	;# 
   819  000D                     	;# 
   820  000E                     	;# 
   821  0011                     	;# 
   822  0012                     	;# 
   823  0015                     	;# 
   824  0016                     	;# 
   825  0016                     	;# 
   826  0017                     	;# 
   827  0018                     	;# 
   828  0019                     	;# 
   829  001A                     	;# 
   830  001B                     	;# 
   831  001C                     	;# 
   832  008C                     	;# 
   833  008D                     	;# 
   834  008E                     	;# 
   835  0091                     	;# 
   836  0092                     	;# 
   837  0095                     	;# 
   838  0096                     	;# 
   839  0097                     	;# 
   840  0098                     	;# 
   841  0099                     	;# 
   842  009A                     	;# 
   843  009B                     	;# 
   844  009B                     	;# 
   845  009C                     	;# 
   846  009D                     	;# 
   847  009E                     	;# 
   848  009F                     	;# 
   849  010C                     	;# 
   850  010D                     	;# 
   851  010E                     	;# 
   852  0111                     	;# 
   853  0112                     	;# 
   854  0113                     	;# 
   855  0114                     	;# 
   856  0115                     	;# 
   857  0116                     	;# 
   858  0117                     	;# 
   859  0118                     	;# 
   860  0119                     	;# 
   861  011D                     	;# 
   862  018C                     	;# 
   863  018D                     	;# 
   864  018E                     	;# 
   865  0191                     	;# 
   866  0191                     	;# 
   867  0192                     	;# 
   868  0193                     	;# 
   869  0193                     	;# 
   870  0194                     	;# 
   871  0195                     	;# 
   872  0196                     	;# 
   873  0199                     	;# 
   874  019A                     	;# 
   875  019B                     	;# 
   876  019C                     	;# 
   877  019D                     	;# 
   878  019E                     	;# 
   879  019F                     	;# 
   880  020C                     	;# 
   881  020D                     	;# 
   882  0211                     	;# 
   883  0211                     	;# 
   884  0212                     	;# 
   885  0212                     	;# 
   886  0213                     	;# 
   887  0213                     	;# 
   888  0214                     	;# 
   889  0214                     	;# 
   890  0215                     	;# 
   891  0215                     	;# 
   892  0215                     	;# 
   893  0216                     	;# 
   894  0216                     	;# 
   895  0217                     	;# 
   896  0217                     	;# 
   897  0391                     	;# 
   898  0392                     	;# 
   899  0393                     	;# 
   900  0394                     	;# 
   901  0395                     	;# 
   902  0396                     	;# 
   903  039A                     	;# 
   904  039B                     	;# 
   905  0611                     	;# 
   906  0612                     	;# 
   907  0613                     	;# 
   908  0613                     	;# 
   909  0614                     	;# 
   910  0615                     	;# 
   911  0616                     	;# 
   912  0616                     	;# 
   913  0691                     	;# 
   914  0692                     	;# 
   915  0693                     	;# 
   916  0694                     	;# 
   917  0695                     	;# 
   918  0E8E                     	;# 
   919  0E8F                     	;# 
   920  0E90                     	;# 
   921  0E91                     	;# 
   922  0E92                     	;# 
   923  0E93                     	;# 
   924  0E94                     	;# 
   925  0E94                     	;# 
   926  0E95                     	;# 
   927  0E96                     	;# 
   928  0E97                     	;# 
   929  0E98                     	;# 
   930  0E99                     	;# 
   931  0E9A                     	;# 
   932  0E9B                     	;# 
   933  0E9C                     	;# 
   934  0E9D                     	;# 
   935  0E9E                     	;# 
   936  0E9F                     	;# 
   937  0FE4                     	;# 
   938  0FE5                     	;# 
   939  0FE6                     	;# 
   940  0FE7                     	;# 
   941  0FE8                     	;# 
   942  0FE9                     	;# 
   943  0FEA                     	;# 
   944  0FEB                     	;# 
   945  0FED                     	;# 
   946  0FEE                     	;# 
   947  0FEF                     	;# 
   948  0000                     	;# 
   949  0001                     	;# 
   950  0002                     	;# 
   951  0003                     	;# 
   952  0004                     	;# 
   953  0005                     	;# 
   954  0006                     	;# 
   955  0007                     	;# 
   956  0008                     	;# 
   957  0009                     	;# 
   958  000A                     	;# 
   959  000B                     	;# 
   960  000C                     	;# 
   961  000D                     	;# 
   962  000E                     	;# 
   963  0011                     	;# 
   964  0012                     	;# 
   965  0015                     	;# 
   966  0016                     	;# 
   967  0016                     	;# 
   968  0017                     	;# 
   969  0018                     	;# 
   970  0019                     	;# 
   971  001A                     	;# 
   972  001B                     	;# 
   973  001C                     	;# 
   974  008C                     	;# 
   975  008D                     	;# 
   976  008E                     	;# 
   977  0091                     	;# 
   978  0092                     	;# 
   979  0095                     	;# 
   980  0096                     	;# 
   981  0097                     	;# 
   982  0098                     	;# 
   983  0099                     	;# 
   984  009A                     	;# 
   985  009B                     	;# 
   986  009B                     	;# 
   987  009C                     	;# 
   988  009D                     	;# 
   989  009E                     	;# 
   990  009F                     	;# 
   991  010C                     	;# 
   992  010D                     	;# 
   993  010E                     	;# 
   994  0111                     	;# 
   995  0112                     	;# 
   996  0113                     	;# 
   997  0114                     	;# 
   998  0115                     	;# 
   999  0116                     	;# 
  1000  0117                     	;# 
  1001  0118                     	;# 
  1002  0119                     	;# 
  1003  011D                     	;# 
  1004  018C                     	;# 
  1005  018D                     	;# 
  1006  018E                     	;# 
  1007  0191                     	;# 
  1008  0191                     	;# 
  1009  0192                     	;# 
  1010  0193                     	;# 
  1011  0193                     	;# 
  1012  0194                     	;# 
  1013  0195                     	;# 
  1014  0196                     	;# 
  1015  0199                     	;# 
  1016  019A                     	;# 
  1017  019B                     	;# 
  1018  019C                     	;# 
  1019  019D                     	;# 
  1020  019E                     	;# 
  1021  019F                     	;# 
  1022  020C                     	;# 
  1023  020D                     	;# 
  1024  0211                     	;# 
  1025  0211                     	;# 
  1026  0212                     	;# 
  1027  0212                     	;# 
  1028  0213                     	;# 
  1029  0213                     	;# 
  1030  0214                     	;# 
  1031  0214                     	;# 
  1032  0215                     	;# 
  1033  0215                     	;# 
  1034  0215                     	;# 
  1035  0216                     	;# 
  1036  0216                     	;# 
  1037  0217                     	;# 
  1038  0217                     	;# 
  1039  0391                     	;# 
  1040  0392                     	;# 
  1041  0393                     	;# 
  1042  0394                     	;# 
  1043  0395                     	;# 
  1044  0396                     	;# 
  1045  039A                     	;# 
  1046  039B                     	;# 
  1047  0611                     	;# 
  1048  0612                     	;# 
  1049  0613                     	;# 
  1050  0613                     	;# 
  1051  0614                     	;# 
  1052  0615                     	;# 
  1053  0616                     	;# 
  1054  0616                     	;# 
  1055  0691                     	;# 
  1056  0692                     	;# 
  1057  0693                     	;# 
  1058  0694                     	;# 
  1059  0695                     	;# 
  1060  0E8E                     	;# 
  1061  0E8F                     	;# 
  1062  0E90                     	;# 
  1063  0E91                     	;# 
  1064  0E92                     	;# 
  1065  0E93                     	;# 
  1066  0E94                     	;# 
  1067  0E94                     	;# 
  1068  0E95                     	;# 
  1069  0E96                     	;# 
  1070  0E97                     	;# 
  1071  0E98                     	;# 
  1072  0E99                     	;# 
  1073  0E9A                     	;# 
  1074  0E9B                     	;# 
  1075  0E9C                     	;# 
  1076  0E9D                     	;# 
  1077  0E9E                     	;# 
  1078  0E9F                     	;# 
  1079  0FE4                     	;# 
  1080  0FE5                     	;# 
  1081  0FE6                     	;# 
  1082  0FE7                     	;# 
  1083  0FE8                     	;# 
  1084  0FE9                     	;# 
  1085  0FEA                     	;# 
  1086  0FEB                     	;# 
  1087  0FED                     	;# 
  1088  0FEE                     	;# 
  1089  0FEF                     	;# 
  1090  0000                     	;# 
  1091  0001                     	;# 
  1092  0002                     	;# 
  1093  0003                     	;# 
  1094  0004                     	;# 
  1095  0005                     	;# 
  1096  0006                     	;# 
  1097  0007                     	;# 
  1098  0008                     	;# 
  1099  0009                     	;# 
  1100  000A                     	;# 
  1101  000B                     	;# 
  1102  000C                     	;# 
  1103  000D                     	;# 
  1104  000E                     	;# 
  1105  0011                     	;# 
  1106  0012                     	;# 
  1107  0015                     	;# 
  1108  0016                     	;# 
  1109  0016                     	;# 
  1110  0017                     	;# 
  1111  0018                     	;# 
  1112  0019                     	;# 
  1113  001A                     	;# 
  1114  001B                     	;# 
  1115  001C                     	;# 
  1116  008C                     	;# 
  1117  008D                     	;# 
  1118  008E                     	;# 
  1119  0091                     	;# 
  1120  0092                     	;# 
  1121  0095                     	;# 
  1122  0096                     	;# 
  1123  0097                     	;# 
  1124  0098                     	;# 
  1125  0099                     	;# 
  1126  009A                     	;# 
  1127  009B                     	;# 
  1128  009B                     	;# 
  1129  009C                     	;# 
  1130  009D                     	;# 
  1131  009E                     	;# 
  1132  009F                     	;# 
  1133  010C                     	;# 
  1134  010D                     	;# 
  1135  010E                     	;# 
  1136  0111                     	;# 
  1137  0112                     	;# 
  1138  0113                     	;# 
  1139  0114                     	;# 
  1140  0115                     	;# 
  1141  0116                     	;# 
  1142  0117                     	;# 
  1143  0118                     	;# 
  1144  0119                     	;# 
  1145  011D                     	;# 
  1146  018C                     	;# 
  1147  018D                     	;# 
  1148  018E                     	;# 
  1149  0191                     	;# 
  1150  0191                     	;# 
  1151  0192                     	;# 
  1152  0193                     	;# 
  1153  0193                     	;# 
  1154  0194                     	;# 
  1155  0195                     	;# 
  1156  0196                     	;# 
  1157  0199                     	;# 
  1158  019A                     	;# 
  1159  019B                     	;# 
  1160  019C                     	;# 
  1161  019D                     	;# 
  1162  019E                     	;# 
  1163  019F                     	;# 
  1164  020C                     	;# 
  1165  020D                     	;# 
  1166  0211                     	;# 
  1167  0211                     	;# 
  1168  0212                     	;# 
  1169  0212                     	;# 
  1170  0213                     	;# 
  1171  0213                     	;# 
  1172  0214                     	;# 
  1173  0214                     	;# 
  1174  0215                     	;# 
  1175  0215                     	;# 
  1176  0215                     	;# 
  1177  0216                     	;# 
  1178  0216                     	;# 
  1179  0217                     	;# 
  1180  0217                     	;# 
  1181  0391                     	;# 
  1182  0392                     	;# 
  1183  0393                     	;# 
  1184  0394                     	;# 
  1185  0395                     	;# 
  1186  0396                     	;# 
  1187  039A                     	;# 
  1188  039B                     	;# 
  1189  0611                     	;# 
  1190  0612                     	;# 
  1191  0613                     	;# 
  1192  0613                     	;# 
  1193  0614                     	;# 
  1194  0615                     	;# 
  1195  0616                     	;# 
  1196  0616                     	;# 
  1197  0691                     	;# 
  1198  0692                     	;# 
  1199  0693                     	;# 
  1200  0694                     	;# 
  1201  0695                     	;# 
  1202  0E8E                     	;# 
  1203  0E8F                     	;# 
  1204  0E90                     	;# 
  1205  0E91                     	;# 
  1206  0E92                     	;# 
  1207  0E93                     	;# 
  1208  0E94                     	;# 
  1209  0E94                     	;# 
  1210  0E95                     	;# 
  1211  0E96                     	;# 
  1212  0E97                     	;# 
  1213  0E98                     	;# 
  1214  0E99                     	;# 
  1215  0E9A                     	;# 
  1216  0E9B                     	;# 
  1217  0E9C                     	;# 
  1218  0E9D                     	;# 
  1219  0E9E                     	;# 
  1220  0E9F                     	;# 
  1221  0FE4                     	;# 
  1222  0FE5                     	;# 
  1223  0FE6                     	;# 
  1224  0FE7                     	;# 
  1225  0FE8                     	;# 
  1226  0FE9                     	;# 
  1227  0FEA                     	;# 
  1228  0FEB                     	;# 
  1229  0FED                     	;# 
  1230  0FEE                     	;# 
  1231  0FEF                     	;_WorkQue
  1232                           
  1233                           	psect	idataBANK1
  1234  07FF                     __pidataBANK1:	
  1235                           
  1236                           ;initializer for _HashTime
  1237  07FF  34DC               	retlw	220
  1238                           
  1239                           	psect	idataBANK2
  1240  1FD1                     __pidataBANK2:	
  1241                           
  1242                           ;initializer for _Status
  1243  1FD1  3449               	retlw	73
  1244  1FD2  3400               	retlw	0
  1245  1FD3  3400               	retlw	0
  1246  1FD4  3400               	retlw	0
  1247  1FD5  3400               	retlw	0
  1248  1FD6  3400               	retlw	0
  1249  1FD7  3400               	retlw	0
  1250  1FD8  3400               	retlw	0
  1251  1FD9  3400               	retlw	0
  1252  1FDA  3400               	retlw	0
  1253  1FDB  3400               	retlw	0
  1254  1FDC  3440               	retlw	64
  1255  1FDD  3400               	retlw	0
  1256                           
  1257                           	psect	idataBANK3
  1258  10CF                     __pidataBANK3:	
  1259                           
  1260                           ;initializer for AsicPreCalc@F3345
  1261  10CF  3498               	retlw	152
  1262  10D0  342F               	retlw	47
  1263  10D1  348A               	retlw	138
  1264  10D2  3442               	retlw	66
  1265  10D3  3491               	retlw	145
  1266  10D4  3444               	retlw	68
  1267  10D5  3437               	retlw	55
  1268  10D6  3471               	retlw	113
  1269  10D7  34CF               	retlw	207
  1270  10D8  34FB               	retlw	251
  1271  10D9  34C0               	retlw	192
  1272  10DA  34B5               	retlw	181
  1273                           
  1274                           ;initializer for _ClockCfg
  1275  10DB  3407               	retlw	7
  1276  10DC  3400               	retlw	0
  1277  10DD  3437               	retlw	55
  1278  10DE  3405               	retlw	5
  1279  10DF  3472               	retlw	114
  1280  10E0  3401               	retlw	1
  1281  10E1  3400               	retlw	0
  1282  10E2  3400               	retlw	0
  1283                           
  1284                           ;initializer for _Cfg
  1285  10E3  344D               	retlw	77
  1286  10E4  3401               	retlw	1
  1287  10E5  343C               	retlw	60
  1288  10E6  3450               	retlw	80
  1289  10E7  34FF               	retlw	255
  1290  10E8  3400               	retlw	0
  1291                           
  1292                           	psect	idataBANK6
  1293  1121                     __pidataBANK6:	
  1294                           
  1295                           ;initializer for _BankRanges
  1296  1121  3400               	retlw	0
  1297  1122  3400               	retlw	0
  1298  1123  3400               	retlw	0
  1299  1124  3400               	retlw	0
  1300  1125  3400               	retlw	0
  1301  1126  3400               	retlw	0
  1302  1127  3400               	retlw	0
  1303  1128  3440               	retlw	64
  1304  1129  34AA               	retlw	170
  1305  112A  34AA               	retlw	170
  1306  112B  34AA               	retlw	170
  1307  112C  342A               	retlw	42
  1308  112D  3400               	retlw	0
  1309  112E  3400               	retlw	0
  1310  112F  3400               	retlw	0
  1311  1130  3420               	retlw	32
  1312  1131  3499               	retlw	153
  1313  1132  3499               	retlw	153
  1314  1133  3499               	retlw	153
  1315  1134  3419               	retlw	25
  1316  1135  3455               	retlw	85
  1317  1136  3455               	retlw	85
  1318  1137  3455               	retlw	85
  1319  1138  3415               	retlw	21
  1320  1139  3492               	retlw	146
  1321  113A  3424               	retlw	36
  1322  113B  3449               	retlw	73
  1323  113C  3412               	retlw	18
  1324  113D  3400               	retlw	0
  1325  113E  3400               	retlw	0
  1326  113F  3400               	retlw	0
  1327  1140  3410               	retlw	16
  1328                           
  1329                           	psect	strings
  1330  0800                     __pstrings:	
  1331  0800                     __stringtab:	
  1332  0800  3400               	retlw	0
  1333  0801                     __end_of__stringtab:	
  1334  0801                     _USB_SD_Ptr:	
  1335  0801  34AB               	retlw	(_sd000| (0+32768))& (0+255)
  1336  0802  3405               	retlw	(_sd001| (0+32768))& (0+255)
  1337  0803  3439               	retlw	(_sd002| (0+32768))& (0+255)
  1338  0804                     __end_of_USB_SD_Ptr:	
  1339  0804                     _USB_CD_Ptr:	
  1340  0804  346D               	retlw	(_configDescriptor1| (0+32768))& (0+255)
  1341  0805                     __end_of_USB_CD_Ptr:	
  1342  0805                     _sd001:	
  1343  0805  3434               	retlw	52
  1344  0806  3403               	retlw	3
  1345  0807  344B               	retlw	75
  1346  0808  3400               	retlw	0
  1347  0809  346C               	retlw	108
  1348  080A  3400               	retlw	0
  1349  080B  346F               	retlw	111
  1350  080C  3400               	retlw	0
  1351  080D  346E               	retlw	110
  1352  080E  3400               	retlw	0
  1353  080F  3464               	retlw	100
  1354  0810  3400               	retlw	0
  1355  0811  3469               	retlw	105
  1356  0812  3400               	retlw	0
  1357  0813  346B               	retlw	107
  1358  0814  3400               	retlw	0
  1359  0815  3465               	retlw	101
  1360  0816  3400               	retlw	0
  1361  0817  3420               	retlw	32
  1362  0818  3400               	retlw	0
  1363  0819  3450               	retlw	80
  1364  081A  3400               	retlw	0
  1365  081B  3472               	retlw	114
  1366  081C  3400               	retlw	0
  1367  081D  346F               	retlw	111
  1368  081E  3400               	retlw	0
  1369  081F  346A               	retlw	106
  1370  0820  3400               	retlw	0
  1371  0821  3465               	retlw	101
  1372  0822  3400               	retlw	0
  1373  0823  3463               	retlw	99
  1374  0824  3400               	retlw	0
  1375  0825  3474               	retlw	116
  1376  0826  3400               	retlw	0
  1377  0827  3400               	retlw	0
  1378  0828  3400               	retlw	0
  1379  0829  3400               	retlw	0
  1380  082A  3400               	retlw	0
  1381  082B  3400               	retlw	0
  1382  082C  3400               	retlw	0
  1383  082D  3400               	retlw	0
  1384  082E  3400               	retlw	0
  1385  082F  3400               	retlw	0
  1386  0830  3400               	retlw	0
  1387  0831  3400               	retlw	0
  1388  0832  3400               	retlw	0
  1389  0833  3400               	retlw	0
  1390  0834  3400               	retlw	0
  1391  0835  3400               	retlw	0
  1392  0836  3400               	retlw	0
  1393  0837  3400               	retlw	0
  1394  0838  3400               	retlw	0
  1395  0839                     __end_of_sd001:	
  1396  0839                     _sd002:	
  1397  0839  3434               	retlw	52
  1398  083A  3403               	retlw	3
  1399  083B  344B               	retlw	75
  1400  083C  3400               	retlw	0
  1401  083D  3431               	retlw	49
  1402  083E  3400               	retlw	0
  1403  083F  3436               	retlw	54
  1404  0840  3400               	retlw	0
  1405  0841  3400               	retlw	0
  1406  0842  3400               	retlw	0
  1407  0843  3400               	retlw	0
  1408  0844  3400               	retlw	0
  1409  0845  3400               	retlw	0
  1410  0846  3400               	retlw	0
  1411  0847  3400               	retlw	0
  1412  0848  3400               	retlw	0
  1413  0849  3400               	retlw	0
  1414  084A  3400               	retlw	0
  1415  084B  3400               	retlw	0
  1416  084C  3400               	retlw	0
  1417  084D  3400               	retlw	0
  1418  084E  3400               	retlw	0
  1419  084F  3400               	retlw	0
  1420  0850  3400               	retlw	0
  1421  0851  3400               	retlw	0
  1422  0852  3400               	retlw	0
  1423  0853  3400               	retlw	0
  1424  0854  3400               	retlw	0
  1425  0855  3400               	retlw	0
  1426  0856  3400               	retlw	0
  1427  0857  3400               	retlw	0
  1428  0858  3400               	retlw	0
  1429  0859  3400               	retlw	0
  1430  085A  3400               	retlw	0
  1431  085B  3400               	retlw	0
  1432  085C  3400               	retlw	0
  1433  085D  3400               	retlw	0
  1434  085E  3400               	retlw	0
  1435  085F  3400               	retlw	0
  1436  0860  3400               	retlw	0
  1437  0861  3400               	retlw	0
  1438  0862  3400               	retlw	0
  1439  0863  3400               	retlw	0
  1440  0864  3400               	retlw	0
  1441  0865  3400               	retlw	0
  1442  0866  3400               	retlw	0
  1443  0867  3400               	retlw	0
  1444  0868  3400               	retlw	0
  1445  0869  3400               	retlw	0
  1446  086A  3400               	retlw	0
  1447  086B  3400               	retlw	0
  1448  086C  3400               	retlw	0
  1449  086D                     __end_of_sd002:	
  1450  086D                     _configDescriptor1:	
  1451  086D  3409               	retlw	9
  1452  086E  3402               	retlw	2
  1453  086F  3420               	retlw	32
  1454  0870  3400               	retlw	0
  1455  0871  3401               	retlw	1
  1456  0872  3401               	retlw	1
  1457  0873  3400               	retlw	0
  1458  0874  34C0               	retlw	192
  1459  0875  3432               	retlw	50
  1460  0876  3409               	retlw	9
  1461  0877  3404               	retlw	4
  1462  0878  3400               	retlw	0
  1463  0879  3400               	retlw	0
  1464  087A  3402               	retlw	2
  1465  087B  34FF               	retlw	255
  1466  087C  34FF               	retlw	255
  1467  087D  34FF               	retlw	255
  1468  087E  3400               	retlw	0
  1469  087F  3407               	retlw	7
  1470  0880  3405               	retlw	5
  1471  0881  3401               	retlw	1
  1472  0882  3402               	retlw	2
  1473  0883  3440               	retlw	64
  1474  0884  3400               	retlw	0
  1475  0885  3401               	retlw	1
  1476  0886  3407               	retlw	7
  1477  0887  3405               	retlw	5
  1478  0888  3481               	retlw	129
  1479  0889  3402               	retlw	2
  1480  088A  3440               	retlw	64
  1481  088B  3400               	retlw	0
  1482  088C  3401               	retlw	1
  1483  088D                     __end_of_configDescriptor1:	
  1484  088D                     _device_dsc:	
  1485  088D  3412               	retlw	18
  1486  088E  3401               	retlw	1
  1487  088F  3400               	retlw	0
  1488  0890  3402               	retlw	2
  1489  0891  3400               	retlw	0
  1490  0892  3400               	retlw	0
  1491  0893  3400               	retlw	0
  1492  0894  3408               	retlw	8
  1493  0895  34D8               	retlw	216
  1494  0896  3404               	retlw	4
  1495  0897  340A               	retlw	10
  1496  0898  34F6               	retlw	246
  1497  0899  3400               	retlw	0
  1498  089A  3400               	retlw	0
  1499  089B  3401               	retlw	1
  1500  089C  3402               	retlw	2
  1501  089D  3400               	retlw	0
  1502  089E  3401               	retlw	1
  1503  089F                     __end_of_device_dsc:	
  1504  089F                     _ID:	
  1505  089F  3410               	retlw	16
  1506  08A0  344B               	retlw	75
  1507  08A1  3431               	retlw	49
  1508  08A2  3436               	retlw	54
  1509  08A3  3400               	retlw	0
  1510  08A4  3400               	retlw	0
  1511  08A5  3400               	retlw	0
  1512  08A6  3400               	retlw	0
  1513  08A7  34EF               	retlw	239
  1514  08A8  34BE               	retlw	190
  1515  08A9  34AD               	retlw	173
  1516  08AA  34DE               	retlw	222
  1517  08AB                     __end_of_ID:	
  1518  08AB                     _sd000:	
  1519  08AB  3404               	retlw	4
  1520  08AC  3403               	retlw	3
  1521  08AD  3409               	retlw	9
  1522  08AE  3404               	retlw	4
  1523  08AF                     __end_of_sd000:	
  1524                           
  1525                           	psect	nvBANK2
  1526  016D                     __pnvBANK2:	
  1527  016D                     _BankSize:	
  1528  016D                     	ds	1
  1529  000B                     _INTCONbits	set	11
  1530  0012                     _PIR2bits	set	18
  1531  001B                     _PR2	set	27
  1532  0018                     _T1CONbits	set	24
  1533  0019                     _T1GCONbits	set	25
  1534  001C                     _T2CONbits	set	28
  1535  0015                     _TMR0	set	21
  1536  0017                     _TMR1H	set	23
  1537  0016                     _TMR1L	set	22
  1538  005F                     _GIE	set	95
  1539  008D                     _RCIF	set	141
  1540  008B                     _SSP1IF	set	139
  1541  00CC                     _T1GSPM	set	204
  1542  005A                     _TMR0IF	set	90
  1543  00CF                     _TMR1GE	set	207
  1544  008F                     _TMR1GIF	set	143
  1545  0088                     _TMR1IF	set	136
  1546  00C0                     _TMR1ON	set	192
  1547  0089                     _TMR2IF	set	137
  1548  00E2                     _TMR2ON	set	226
  1549  009D                     _ADCON0bits	set	157
  1550  009E                     _ADCON1bits	set	158
  1551  009F                     _ADCON2bits	set	159
  1552  009C                     _ADRESH	set	156
  1553  0095                     _OPTION_REGbits	set	149
  1554  0099                     _OSCCON	set	153
  1555  0098                     _OSCTUNE	set	152
  1556  0092                     _PIE2bits	set	146
  1557  008C                     _TRISAbits	set	140
  1558  008D                     _TRISBbits	set	141
  1559  008E                     _TRISCbits	set	142
  1560  04AD                     _TMR0CS	set	1197
  1561  048F                     _TMR1GIE	set	1167
  1562  0488                     _TMR1IE	set	1160
  1563  010C                     _LATAbits	set	268
  1564  010E                     _LATC	set	270
  1565  010E                     _LATCbits	set	270
  1566  018C                     _ANSELA	set	396
  1567  018D                     _ANSELB	set	397
  1568  018D                     _ANSELBbits	set	397
  1569  018E                     _ANSELC	set	398
  1570  019F                     _BAUDCONbits	set	415
  1571  0199                     _RCREG	set	409
  1572  019D                     _RCSTAbits	set	413
  1573  019E                     _TXSTAbits	set	414
  1574  0212                     _SSPADD	set	530
  1575  0211                     _SSPBUF	set	529
  1576  0215                     _SSPCON1bits	set	533
  1577  0216                     _SSPCON2bits	set	534
  1578  0217                     _SSPCON3bits	set	535
  1579  0214                     _SSPSTATbits	set	532
  1580  10AD                     _SSP1EN	set	4269
  1581  039B                     _ACTCON	set	923
  1582  0396                     _IOCBF	set	918
  1583  0394                     _IOCBPbits	set	916
  1584  1C9B                     _IOCAF3	set	7323
  1585  0613                     _PWM1CON	set	1555
  1586  0612                     _PWM1DCH	set	1554
  1587  0611                     _PWM1DCL	set	1553
  1588  309E                     _PWM1OE	set	12446
  1589  0E96                     _UADDR	set	3734
  1590  0E91                     _UCFG	set	3729
  1591  0E8E                     _UCON	set	3726
  1592  0E8E                     _UCONbits	set	3726
  1593  0E97                     _UEIE	set	3735
  1594  0E93                     _UEIR	set	3731
  1595  0E98                     _UEP0bits	set	3736
  1596  0E92                     _UIE	set	3730
  1597  0E92                     _UIEbits	set	3730
  1598  0E90                     _UIR	set	3728
  1599  0E90                     _UIRbits	set	3728
  1600  0E8F                     _USTAT	set	3727
  1601  0E98                     _UEP0	set	3736
  1602  0E99                     _UEP1	set	3737
  1603                           
  1604                           ; #config settings
  1605  0000                     
  1606                           	psect	cinit
  1607  1708                     start_initialization:	
  1608  1708                     __initialization:		;BIGRAM
  1609                           
  1610                           ; Clear objects allocated to BIGRAM
  1611  1708  303C               	movlw	low (0+9020)
  1612  1709  0084               	movwf	4
  1613  170A  3023               	movlw	high (0+9020)
  1614  170B  0085               	movwf	5
  1615  170C  30B4               	movlw	180
  1616  170D  00FE               	movwf	btemp
  1617  170E  3000               	movlw	0
  1618  170F  00FF               	movwf	btemp+1
  1619  1710  319F  27C5  3197   	fcall	clear_ram0
  1620                           
  1621                           ; Clear objects allocated to BANK0
  1622  1713  3062               	movlw	low __pbssBANK0
  1623  1714  0084               	movwf	4
  1624  1715  3000               	movlw	high __pbssBANK0
  1625  1716  0085               	movwf	5
  1626  1717  300E               	movlw	14
  1627  1718  00FE               	movwf	btemp
  1628  1719  3000               	movlw	0
  1629  171A  00FF               	movwf	btemp+1
  1630  171B  319F  27C5  3197   	fcall	clear_ram0
  1631                           
  1632                           ; Clear objects allocated to BANK1
  1633  171E  30CD               	movlw	low __pbssBANK1
  1634  171F  0084               	movwf	4
  1635  1720  3000               	movlw	high __pbssBANK1
  1636  1721  0085               	movwf	5
  1637  1722  3022               	movlw	34
  1638  1723  00FE               	movwf	btemp
  1639  1724  3000               	movlw	0
  1640  1725  00FF               	movwf	btemp+1
  1641  1726  319F  27C5  3197   	fcall	clear_ram0
  1642                           
  1643                           ; Clear objects allocated to BANK2
  1644  1729  0022               	movlb	2	; select bank2
  1645  172A  01E6               	clrf	__pbssBANK2& (0+127)
  1646  172B  01E7               	clrf	(__pbssBANK2+1)& (0+127)
  1647  172C  01E8               	clrf	(__pbssBANK2+2)& (0+127)
  1648  172D  01E9               	clrf	(__pbssBANK2+3)& (0+127)
  1649  172E  01EA               	clrf	(__pbssBANK2+4)& (0+127)
  1650  172F  01EB               	clrf	(__pbssBANK2+5)& (0+127)
  1651  1730  01EC               	clrf	(__pbssBANK2+6)& (0+127)
  1652                           
  1653                           ; Clear objects allocated to BANK3
  1654  1731  30A0               	movlw	low __pbssBANK3
  1655  1732  0084               	movwf	4
  1656  1733  3001               	movlw	high __pbssBANK3
  1657  1734  0085               	movwf	5
  1658  1735  302A               	movlw	42
  1659  1736  00FE               	movwf	btemp
  1660  1737  3000               	movlw	0
  1661  1738  00FF               	movwf	btemp+1
  1662  1739  319F  27C5  3197   	fcall	clear_ram0
  1663                           
  1664                           ; Clear objects allocated to BANK4
  1665  173C  3060               	movlw	low __pbssBANK4
  1666  173D  0084               	movwf	4
  1667  173E  3002               	movlw	high __pbssBANK4
  1668  173F  0085               	movwf	5
  1669  1740  3010               	movlw	16
  1670  1741  00FE               	movwf	btemp
  1671  1742  3000               	movlw	0
  1672  1743  00FF               	movwf	btemp+1
  1673  1744  319F  27C5  3197   	fcall	clear_ram0
  1674                           
  1675                           ; Clear objects allocated to BANK6
  1676  1747  3020               	movlw	low __pbssBANK6
  1677  1748  0084               	movwf	4
  1678  1749  3003               	movlw	high __pbssBANK6
  1679  174A  0085               	movwf	5
  1680  174B  3020               	movlw	32
  1681  174C  00FE               	movwf	btemp
  1682  174D  3000               	movlw	0
  1683  174E  00FF               	movwf	btemp+1
  1684  174F  319F  27C5  3197   	fcall	clear_ram0
  1685                           
  1686                           ; Initialize objects allocated to BANK1
  1687  1752  0021               	movlb	1	; select bank1
  1688  1753  3187  27FF  3197   	fcall	__pidataBANK1	;fetch initializer
  1689  1756  00EF               	movwf	__pdataBANK1& (0+127)
  1690                           
  1691                           ; Initialize objects allocated to BANK2
  1692  1757  30D1               	movlw	low __pidataBANK2
  1693  1758  0084               	movwf	4
  1694  1759  309F               	movlw	(high __pidataBANK2)| (0+128)
  1695  175A  0085               	movwf	5
  1696  175B  3059               	movlw	low __pdataBANK2
  1697  175C  0086               	movwf	6
  1698  175D  3001               	movlw	high __pdataBANK2
  1699  175E  0087               	movwf	7
  1700  175F  3000               	movlw	0
  1701  1760  00FF               	movwf	btemp+1
  1702  1761  300D               	movlw	13
  1703  1762  319F  27B9  3197   	fcall	init_ram
  1704                           
  1705                           ; Initialize objects allocated to BANK3
  1706  1765  30CF               	movlw	low __pidataBANK3
  1707  1766  0084               	movwf	4
  1708  1767  3090               	movlw	(high __pidataBANK3)| (0+128)
  1709  1768  0085               	movwf	5
  1710  1769  30CA               	movlw	low __pdataBANK3
  1711  176A  0086               	movwf	6
  1712  176B  3001               	movlw	high __pdataBANK3
  1713  176C  0087               	movwf	7
  1714  176D  3000               	movlw	0
  1715  176E  00FF               	movwf	btemp+1
  1716  176F  301A               	movlw	26
  1717  1770  319F  27B9  3197   	fcall	init_ram
  1718                           
  1719                           ; Initialize objects allocated to BANK6
  1720  1773  3021               	movlw	low __pidataBANK6
  1721  1774  0084               	movwf	4
  1722  1775  3091               	movlw	(high __pidataBANK6)| (0+128)
  1723  1776  0085               	movwf	5
  1724  1777  3040               	movlw	low __pdataBANK6
  1725  1778  0086               	movwf	6
  1726  1779  3003               	movlw	high __pdataBANK6
  1727  177A  0087               	movwf	7
  1728  177B  3000               	movlw	0
  1729  177C  00FF               	movwf	btemp+1
  1730  177D  3020               	movlw	32
  1731  177E  319F  27B9         	fcall	init_ram
  1732  1780                     end_of_initialization:	
  1733                           ;End of C runtime variable initialization code
  1734                           
  1735  1780                     __end_of__initialization:	
  1736  1780  0020               	movlb	0
  1737  1781  3190  2887         	ljmp	_main	;jump to C main() function
  1738                           
  1739                           	psect	bssBANK0
  1740  0062                     __pbssBANK0:	
  1741  0062                     _I2CAddr:	
  1742  0062                     	ds	1
  1743  0063                     _I2CCmd:	
  1744  0063                     	ds	1
  1745  0064                     _I2CCount:	
  1746  0064                     	ds	1
  1747  0065                     _I2CState:	
  1748  0065                     	ds	1
  1749  0066                     _ResultPos:	
  1750  0066                     	ds	1
  1751  0067                     _ResultQC:	
  1752  0067                     	ds	1
  1753  0068                     _USBDeferINDataStagePackets:	
  1754  0068                     	ds	1
  1755  0069                     _USBDeferOUTDataStagePackets:	
  1756  0069                     	ds	1
  1757  006A                     _USBDeferStatusStagePacket:	
  1758  006A                     	ds	1
  1759  006B                     _controlTransferState:	
  1760  006B                     	ds	1
  1761  006C                     _pBDTEntryEP0OutNext:	
  1762  006C                     	ds	1
  1763  006D                     _pDst:	
  1764  006D                     	ds	1
  1765  006E                     _ptr:	
  1766  006E                     	ds	1
  1767  006F                     _shortPacketStatus:	
  1768  006F                     	ds	1
  1769                           
  1770                           	psect	bssBANK1
  1771  00CD                     __pbssBANK1:	
  1772  00CD                     _ep_data_in:	
  1773  00CD                     	ds	2
  1774  00CF                     _ep_data_out:	
  1775  00CF                     	ds	2
  1776  00D1                     _pBDTEntryIn:	
  1777  00D1                     	ds	2
  1778  00D3                     _pBDTEntryOut:	
  1779  00D3                     	ds	2
  1780  00D5                     _BothEP0OutUOWNsSet:	
  1781  00D5                     	ds	1
  1782  00D6                     _I2CInBuf:	
  1783  00D6                     	ds	1
  1784  00D7                     _RemoteWakeup:	
  1785  00D7                     	ds	1
  1786  00D8                     _SlaveAddress:	
  1787  00D8                     	ds	1
  1788  00D9                     _SlowTick:	
  1789  00D9                     	ds	1
  1790  00DA                     _TimeOut:	
  1791  00DA                     	ds	1
  1792  00DB                     _USBBusIsSuspended:	
  1793  00DB                     	ds	1
  1794  00DC                     _USBDeviceState:	
  1795  00DC                     	ds	1
  1796  00DD                     _USBGenericInHandle:	
  1797  00DD                     	ds	1
  1798  00DE                     _USBGenericOutHandle:	
  1799  00DE                     	ds	1
  1800  00DF                     _USBStatusStageEnabledFlag1:	
  1801  00DF                     	ds	1
  1802  00E0                     _USBStatusStageEnabledFlag2:	
  1803  00E0                     	ds	1
  1804  00E1                     _USBStatusStageTimeoutCounter:	
  1805  00E1                     	ds	1
  1806  00E2                     _WorkNow:	
  1807  00E2                     	ds	1
  1808  00E3                     _endpoint_number:	
  1809  00E3                     	ds	1
  1810  00E4                     _pBDTEntryEP0OutCurrent:	
  1811  00E4                     	ds	1
  1812  00E5                     _inPipes:	
  1813  00E5                     	ds	5
  1814  00EA                     _USBActiveConfiguration:	
  1815  00EA                     	ds	1
  1816  00EB                     _USBAlternateInterface:	
  1817  00EB                     	ds	1
  1818  00EC                     _USTATcopy:	
  1819  00EC                     	ds	1
  1820  00ED                     _WQI:	
  1821  00ED                     	ds	1
  1822  00EE                     _WQX:	
  1823  00EE                     	ds	1
  1824                           
  1825                           	psect	dataBANK1
  1826  00EF                     __pdataBANK1:	
  1827  00EF                     _HashTime:	
  1828  00EF                     	ds	1
  1829                           
  1830                           	psect	bssBANK2
  1831  0166                     __pbssBANK2:	
  1832  0166                     USBCBSendResume@delay_count:	
  1833  0166                     	ds	2
  1834  0168                     _send32_data:	
  1835  0168                     	ds	2
  1836  016A                     _last_bit0:	
  1837  016A                     	ds	1
  1838  016B                     _last_bit1:	
  1839  016B                     	ds	1
  1840  016C                     _send32_count:	
  1841  016C                     	ds	1
  1842                           
  1843                           	psect	dataBANK2
  1844  0159                     __pdataBANK2:	
  1845  0159                     _Status:	
  1846  0159                     	ds	13
  1847                           
  1848                           	psect	bssBANK3
  1849  01A0                     __pbssBANK3:	
  1850  01A0                     _outPipes:	
  1851  01A0                     	ds	6
  1852  01A6                     _PrecalcHashes:	
  1853  01A6                     	ds	24
  1854  01BE                     _ResultQue:	
  1855  01BE                     	ds	12
  1856                           
  1857                           	psect	dataBANK3
  1858  01CA                     __pdataBANK3:	
  1859  01CA                     AsicPreCalc@F3345:	
  1860  01CA                     	ds	12
  1861  01D6                     _ClockCfg:	
  1862  01D6                     	ds	8
  1863  01DE                     _Cfg:	
  1864  01DE                     	ds	6
  1865                           
  1866                           	psect	bssBANK4
  1867  0260                     __pbssBANK4:	
  1868  0260                     _buf:	
  1869  0260                     	ds	16
  1870                           
  1871                           	psect	bssBANK6
  1872  0320                     __pbssBANK6:	
  1873  0320                     _NonceRanges:	
  1874  0320                     	ds	32
  1875                           
  1876                           	psect	dataBANK6
  1877  0340                     __pdataBANK6:	
  1878  0340                     _BankRanges:	
  1879  0340                     	ds	32
  1880                           
  1881                           	psect	clrtext
  1882  1FC5                     clear_ram0:	
  1883                           ;	Called with FSR0 containing the base address, and
  1884                           ;	btemp/btemp+1 has the size to clear
  1885                           
  1886  1FC5  0064               	clrwdt	;clear the watchdog before getting into this loop
  1887  1FC6                     clrloop0:	
  1888  1FC6  0180               	clrf	0	;clear RAM location pointed to by FSR
  1889  1FC7  3101               	addfsr 0,1
  1890  1FC8  3001               	movlw	1
  1891  1FC9  02FE               	subwf	126,f
  1892  1FCA  3000               	movlw	0
  1893  1FCB  3BFF               	subwfb	127,f
  1894  1FCC  087F               	movf	127,w
  1895  1FCD  047E               	iorwf	126,w
  1896  1FCE  1903               	btfsc	3,2
  1897  1FCF  3400               	retlw	0	;all done for this memory range, return
  1898  1FD0  2FC6               	goto	clrloop0	;have we reached the end yet?
  1899                           
  1900                           	psect	inittext
  1901  1FB9                     init_ram:	
  1902  1FB9  00FE               	movwf	126
  1903  1FBA                     initloop:	
  1904  1FBA  0012               	moviw fsr0++
  1905  1FBB  001E               	movwi fsr1++
  1906  1FBC  3001               	movlw	1
  1907  1FBD  02FE               	subwf	126,f
  1908  1FBE  3000               	movlw	0
  1909  1FBF  3BFF               	subwfb	127,f
  1910  1FC0  087F               	movf	127,w
  1911  1FC1  047E               	iorwf	126,w
  1912  1FC2  1903               	btfsc	3,2
  1913  1FC3  3400               	retlw	0
  1914  1FC4  2FBA               	goto	initloop
  1915                           
  1916                           	psect	cstackBANK2
  1917  0120                     __pcstackBANK2:	
  1918  0120                     AsicPreCalc@K:	
  1919                           
  1920                           ; 12 bytes @ 0x0
  1921  0120                     	ds	12
  1922  012C                     AsicPreCalc@m:	
  1923                           
  1924                           ; 32 bytes @ 0xC
  1925  012C                     	ds	32
  1926  014C                     AsicPreCalc@z:	
  1927                           
  1928                           ; 4 bytes @ 0x2C
  1929  014C                     	ds	4
  1930  0150                     AsicPreCalc@y:	
  1931                           
  1932                           ; 4 bytes @ 0x30
  1933  0150                     	ds	4
  1934  0154                     AsicPreCalc@x:	
  1935                           
  1936                           ; 4 bytes @ 0x34
  1937  0154                     	ds	4
  1938  0158                     AsicPreCalc@n:	
  1939                           
  1940                           ; 1 bytes @ 0x38
  1941  0158                     	ds	1
  1942                           
  1943                           	psect	cstackBANK1
  1944  00A0                     __pcstackBANK1:	
  1945  00A0                     ??_USBConfigureEndpoint:	
  1946  00A0                     ??_USBCtrlTrfInHandler:	
  1947                           ; 0 bytes @ 0x0
  1948                           
  1949  00A0                     ??_USBCtrlEPAllowDataStage:	
  1950                           ; 0 bytes @ 0x0
  1951                           
  1952  00A0                     ?_memset:	
  1953                           ; 0 bytes @ 0x0
  1954                           
  1955  00A0                     ?_USBTransferOnePacket:	
  1956                           ; 1 bytes @ 0x0
  1957                           
  1958  00A0                     ?___awdiv:	
  1959                           ; 1 bytes @ 0x0
  1960                           
  1961  00A0                     ?___lwdiv:	
  1962                           ; 2 bytes @ 0x0
  1963                           
  1964  00A0                     ?___wmul:	
  1965                           ; 2 bytes @ 0x0
  1966                           
  1967  00A0                     ?_rotate:	
  1968                           ; 2 bytes @ 0x0
  1969                           
  1970  00A0                     USBTransferOnePacket@dir:	
  1971                           ; 4 bytes @ 0x0
  1972                           
  1973  00A0                     USBCtrlTrfRxService@i:	
  1974                           ; 1 bytes @ 0x0
  1975                           
  1976  00A0                     USBDeviceInit@p:	
  1977                           ; 1 bytes @ 0x0
  1978                           
  1979  00A0                     ___awdiv@divisor:	
  1980                           ; 2 bytes @ 0x0
  1981                           
  1982  00A0                     ___lwdiv@divisor:	
  1983                           ; 2 bytes @ 0x0
  1984                           
  1985  00A0                     memset@c:	
  1986                           ; 2 bytes @ 0x0
  1987                           
  1988  00A0                     ___wmul@multiplier:	
  1989                           ; 2 bytes @ 0x0
  1990                           
  1991  00A0                     rotate@x:	
  1992                           ; 2 bytes @ 0x0
  1993                           
  1994                           
  1995                           ; 4 bytes @ 0x0
  1996  00A0                     	ds	1
  1997  00A1                     USBTransferOnePacket@data:	
  1998  00A1                     USBCtrlTrfRxService@byteToRead:	
  1999                           ; 1 bytes @ 0x1
  2000                           
  2001                           
  2002                           ; 1 bytes @ 0x1
  2003  00A1                     	ds	1
  2004  00A2                     ??_USBCtrlTrfOutHandler:	
  2005  00A2                     ??_USBCtrlEPServiceComplete:	
  2006                           ; 0 bytes @ 0x2
  2007                           
  2008  00A2                     USBDeviceInit@i_718:	
  2009                           ; 0 bytes @ 0x2
  2010                           
  2011  00A2                     USBTransferOnePacket@len:	
  2012                           ; 1 bytes @ 0x2
  2013                           
  2014  00A2                     ___awdiv@dividend:	
  2015                           ; 1 bytes @ 0x2
  2016                           
  2017  00A2                     ___lwdiv@dividend:	
  2018                           ; 2 bytes @ 0x2
  2019                           
  2020  00A2                     memset@n:	
  2021                           ; 2 bytes @ 0x2
  2022                           
  2023  00A2                     ___wmul@multiplicand:	
  2024                           ; 2 bytes @ 0x2
  2025                           
  2026                           
  2027                           ; 2 bytes @ 0x2
  2028  00A2                     	ds	1
  2029  00A3                     ??_USBTransferOnePacket:	
  2030  00A3                     USBDeviceInit@i:	
  2031                           ; 0 bytes @ 0x3
  2032                           
  2033                           
  2034                           ; 1 bytes @ 0x3
  2035  00A3                     	ds	1
  2036  00A4                     ?_SendCmdReply:	
  2037  00A4                     ?_USBEnableEndpoint:	
  2038                           ; 0 bytes @ 0x4
  2039                           
  2040  00A4                     ?_SendAsicData:	
  2041                           ; 0 bytes @ 0x4
  2042                           
  2043  00A4                     USBEnableEndpoint@options:	
  2044                           ; 0 bytes @ 0x4
  2045                           
  2046  00A4                     rotate@y:	
  2047                           ; 1 bytes @ 0x4
  2048                           
  2049  00A4                     ___awdiv@counter:	
  2050                           ; 1 bytes @ 0x4
  2051                           
  2052  00A4                     SendAsicData@work:	
  2053                           ; 1 bytes @ 0x4
  2054                           
  2055  00A4                     SendCmdReply@cmd:	
  2056                           ; 2 bytes @ 0x4
  2057                           
  2058                           
  2059                           ; 2 bytes @ 0x4
  2060  00A4                     	ds	1
  2061  00A5                     ??_USBEnableEndpoint:	
  2062  00A5                     ??_rotate:	
  2063                           ; 0 bytes @ 0x5
  2064                           
  2065  00A5                     USBTransferOnePacket@ep:	
  2066                           ; 0 bytes @ 0x5
  2067                           
  2068  00A5                     ___awdiv@sign:	
  2069                           ; 1 bytes @ 0x5
  2070                           
  2071                           
  2072                           ; 1 bytes @ 0x5
  2073  00A5                     	ds	1
  2074  00A6                     ??_SendAsicData:	
  2075  00A6                     USBTransferOnePacket@handle:	
  2076                           ; 0 bytes @ 0x6
  2077                           
  2078  00A6                     SendCmdReply@data:	
  2079                           ; 1 bytes @ 0x6
  2080                           
  2081  00A6                     ___awdiv@quotient:	
  2082                           ; 2 bytes @ 0x6
  2083                           
  2084                           
  2085                           ; 2 bytes @ 0x6
  2086  00A6                     	ds	1
  2087  00A7                     USBEnableEndpoint@p:	
  2088                           
  2089                           ; 2 bytes @ 0x7
  2090  00A7                     	ds	1
  2091  00A8                     ??_DetectAsics:	
  2092  00A8                     SendCmdReply@count:	
  2093                           ; 0 bytes @ 0x8
  2094                           
  2095                           
  2096                           ; 1 bytes @ 0x8
  2097  00A8                     	ds	1
  2098  00A9                     ??_SendCmdReply:	
  2099  00A9                     USBEnableEndpoint@ep:	
  2100                           ; 0 bytes @ 0x9
  2101                           
  2102                           
  2103                           ; 1 bytes @ 0x9
  2104  00A9                     	ds	1
  2105  00AA                     ??_USBCBInitEP:	
  2106                           
  2107                           ; 0 bytes @ 0xA
  2108  00AA                     	ds	3
  2109  00AD                     ?_AsicPreCalc:	
  2110  00AD                     ?_USER_USB_CALLBACK_EVENT_HANDLER:	
  2111                           ; 0 bytes @ 0xD
  2112                           
  2113  00AD                     AsicPreCalc@work:	
  2114                           ; 1 bytes @ 0xD
  2115                           
  2116  00AD                     USER_USB_CALLBACK_EVENT_HANDLER@event:	
  2117                           ; 2 bytes @ 0xD
  2118                           
  2119                           
  2120                           ; 2 bytes @ 0xD
  2121  00AD                     	ds	2
  2122  00AF                     ??_AsicPreCalc:	
  2123  00AF                     USER_USB_CALLBACK_EVENT_HANDLER@pdata:	
  2124                           ; 0 bytes @ 0xF
  2125                           
  2126                           
  2127                           ; 1 bytes @ 0xF
  2128  00AF                     	ds	1
  2129  00B0                     USER_USB_CALLBACK_EVENT_HANDLER@size:	
  2130                           
  2131                           ; 2 bytes @ 0x10
  2132  00B0                     	ds	1
  2133  00B1                     SendCmdReply@n:	
  2134                           
  2135                           ; 1 bytes @ 0x11
  2136  00B1                     	ds	1
  2137  00B2                     ??_USBWakeFromSuspend:	
  2138  00B2                     ??_USBSuspend:	
  2139                           ; 0 bytes @ 0x12
  2140                           
  2141  00B2                     ??_USBStdFeatureReqHandler:	
  2142                           ; 0 bytes @ 0x12
  2143                           
  2144  00B2                     ??_USBStdSetCfgHandler:	
  2145                           ; 0 bytes @ 0x12
  2146                           
  2147                           
  2148                           ; 0 bytes @ 0x12
  2149  00B2                     	ds	1
  2150  00B3                     USBStdSetCfgHandler@p:	
  2151                           
  2152                           ; 2 bytes @ 0x13
  2153  00B3                     	ds	1
  2154  00B4                     USBStdFeatureReqHandler@pUEP:	
  2155                           
  2156                           ; 2 bytes @ 0x14
  2157  00B4                     	ds	1
  2158  00B5                     USBStdSetCfgHandler@i_1089:	
  2159                           
  2160                           ; 1 bytes @ 0x15
  2161  00B5                     	ds	1
  2162  00B6                     USBStdSetCfgHandler@i:	
  2163  00B6                     USBStdFeatureReqHandler@current_ep_data:	
  2164                           ; 1 bytes @ 0x16
  2165                           
  2166                           
  2167                           ; 1 bytes @ 0x16
  2168  00B6                     	ds	1
  2169  00B7                     USBStdFeatureReqHandler@p:	
  2170                           
  2171                           ; 1 bytes @ 0x17
  2172  00B7                     	ds	1
  2173  00B8                     ??_USBCheckStdRequest:	
  2174                           
  2175                           ; 0 bytes @ 0x18
  2176  00B8                     	ds	1
  2177  00B9                     ??_USBCtrlTrfSetupHandler:	
  2178  00B9                     ??_AsicPushWork:	
  2179                           ; 0 bytes @ 0x19
  2180                           
  2181                           
  2182                           ; 0 bytes @ 0x19
  2183  00B9                     	ds	1
  2184  00BA                     ??_USBCtrlEPService:	
  2185                           
  2186                           ; 0 bytes @ 0x1A
  2187  00BA                     	ds	3
  2188  00BD                     USBCtrlEPService@setup_cnt:	
  2189                           
  2190                           ; 1 bytes @ 0x1D
  2191  00BD                     	ds	1
  2192  00BE                     ??_USBDeviceTasks:	
  2193  00BE                     ??_ProcessCmd:	
  2194                           ; 0 bytes @ 0x1E
  2195                           
  2196                           
  2197                           ; 0 bytes @ 0x1E
  2198  00BE                     	ds	2
  2199  00C0                     USBDeviceTasks@i:	
  2200                           
  2201                           ; 1 bytes @ 0x20
  2202  00C0                     	ds	2
  2203  00C2                     _ProcessCmd$2049:	
  2204                           
  2205                           ; 2 bytes @ 0x22
  2206  00C2                     	ds	2
  2207  00C4                     ProcessCmd@cmd:	
  2208                           
  2209                           ; 1 bytes @ 0x24
  2210  00C4                     	ds	1
  2211  00C5                     ??_ProcessIO:	
  2212                           
  2213                           ; 0 bytes @ 0x25
  2214  00C5                     	ds	4
  2215  00C9                     _ProcessIO$2366:	
  2216                           
  2217                           ; 2 bytes @ 0x29
  2218  00C9                     	ds	2
  2219  00CB                     _ProcessIO$2400:	
  2220                           
  2221                           ; 2 bytes @ 0x2B
  2222  00CB                     	ds	2
  2223                           
  2224                           	psect	cstackCOMMON
  2225  0070                     __pcstackCOMMON:	
  2226  0070                     ?_USBWakeFromSuspend:	
  2227  0070                     ?_USBSuspend:	
  2228                           ; 0 bytes @ 0x0
  2229                           
  2230  0070                     ?_USBCtrlEPAllowStatusStage:	
  2231                           ; 0 bytes @ 0x0
  2232                           
  2233  0070                     ?_USBStallHandler:	
  2234                           ; 0 bytes @ 0x0
  2235                           
  2236  0070                     ?_USBCtrlEPService:	
  2237                           ; 0 bytes @ 0x0
  2238                           
  2239  0070                     ?_USBCtrlTrfTxService:	
  2240                           ; 0 bytes @ 0x0
  2241                           
  2242  0070                     ?_USBCtrlTrfSetupHandler:	
  2243                           ; 0 bytes @ 0x0
  2244                           
  2245  0070                     ?_USBCtrlTrfOutHandler:	
  2246                           ; 0 bytes @ 0x0
  2247                           
  2248  0070                     ?_USBCtrlTrfInHandler:	
  2249                           ; 0 bytes @ 0x0
  2250                           
  2251  0070                     ?_USBCheckStdRequest:	
  2252                           ; 0 bytes @ 0x0
  2253                           
  2254  0070                     ?_USBStdFeatureReqHandler:	
  2255                           ; 0 bytes @ 0x0
  2256                           
  2257  0070                     ?_Send32:	
  2258                           ; 0 bytes @ 0x0
  2259                           
  2260  0070                     ?_AsicPushWork:	
  2261                           ; 0 bytes @ 0x0
  2262                           
  2263  0070                     ?_InitializeSystem:	
  2264                           ; 0 bytes @ 0x0
  2265                           
  2266  0070                     ?_ProcessIO:	
  2267                           ; 0 bytes @ 0x0
  2268                           
  2269  0070                     ?_UserInit:	
  2270                           ; 0 bytes @ 0x0
  2271                           
  2272  0070                     ?_USBDeviceInit:	
  2273                           ; 0 bytes @ 0x0
  2274                           
  2275  0070                     ?_USBDeviceTasks:	
  2276                           ; 0 bytes @ 0x0
  2277                           
  2278  0070                     ?_USBCtrlEPAllowDataStage:	
  2279                           ; 0 bytes @ 0x0
  2280                           
  2281  0070                     ?_USBCtrlEPServiceComplete:	
  2282                           ; 0 bytes @ 0x0
  2283                           
  2284  0070                     ?_USBCtrlTrfRxService:	
  2285                           ; 0 bytes @ 0x0
  2286                           
  2287  0070                     ?_USBStdSetCfgHandler:	
  2288                           ; 0 bytes @ 0x0
  2289                           
  2290  0070                     ?_USBStdGetDscHandler:	
  2291                           ; 0 bytes @ 0x0
  2292                           
  2293  0070                     ?_USBStdGetStatusHandler:	
  2294                           ; 0 bytes @ 0x0
  2295                           
  2296  0070                     ?_USBCheckVendorRequest:	
  2297                           ; 0 bytes @ 0x0
  2298                           
  2299  0070                     ?_ProcessCmd:	
  2300                           ; 0 bytes @ 0x0
  2301                           
  2302  0070                     ?_DetectAsics:	
  2303                           ; 0 bytes @ 0x0
  2304                           
  2305  0070                     ?_WorkTick:	
  2306                           ; 0 bytes @ 0x0
  2307                           
  2308  0070                     ?_ResultRx:	
  2309                           ; 0 bytes @ 0x0
  2310                           
  2311  0070                     ?_InitFAN:	
  2312                           ; 0 bytes @ 0x0
  2313                           
  2314  0070                     ?_InitTempSensor:	
  2315                           ; 0 bytes @ 0x0
  2316                           
  2317  0070                     ?_InitWorkTick:	
  2318                           ; 0 bytes @ 0x0
  2319                           
  2320  0070                     ?_InitResultRx:	
  2321                           ; 0 bytes @ 0x0
  2322                           
  2323  0070                     ?_ISRCode:	
  2324                           ; 0 bytes @ 0x0
  2325                           
  2326  0070                     ?_USBCBSuspend:	
  2327                           ; 0 bytes @ 0x0
  2328                           
  2329  0070                     ?_USBCBWakeFromSuspend:	
  2330                           ; 0 bytes @ 0x0
  2331                           
  2332  0070                     ?_USBCB_SOF_Handler:	
  2333                           ; 0 bytes @ 0x0
  2334                           
  2335  0070                     ?_USBCBErrorHandler:	
  2336                           ; 0 bytes @ 0x0
  2337                           
  2338  0070                     ?_USBCBCheckOtherReq:	
  2339                           ; 0 bytes @ 0x0
  2340                           
  2341  0070                     ?_USBCBStdSetDscHandler:	
  2342                           ; 0 bytes @ 0x0
  2343                           
  2344  0070                     ?_USBCBInitEP:	
  2345                           ; 0 bytes @ 0x0
  2346                           
  2347  0070                     ?i1___bmul:	
  2348                           ; 0 bytes @ 0x0
  2349                           
  2350  0070                     ?_main:	
  2351                           ; 1 bytes @ 0x0
  2352                           
  2353  0070                     ?i1___wmul:	
  2354                           ; 2 bytes @ 0x0
  2355                           
  2356  0070                     i1___bmul@multiplicand:	
  2357                           ; 2 bytes @ 0x0
  2358                           
  2359  0070                     i1___wmul@multiplier:	
  2360                           ; 1 bytes @ 0x0
  2361                           
  2362                           
  2363                           ; 2 bytes @ 0x0
  2364  0070                     	ds	1
  2365  0071                     ??i1___bmul:	
  2366                           
  2367                           ; 0 bytes @ 0x1
  2368  0071                     	ds	1
  2369  0072                     i1___bmul@multiplier:	
  2370  0072                     i1___wmul@multiplicand:	
  2371                           ; 1 bytes @ 0x2
  2372                           
  2373                           
  2374                           ; 2 bytes @ 0x2
  2375  0072                     	ds	1
  2376  0073                     i1___bmul@product:	
  2377                           
  2378                           ; 1 bytes @ 0x3
  2379  0073                     	ds	1
  2380  0074                     ??i1___wmul:	
  2381  0074                     i1___wmul@product:	
  2382                           ; 0 bytes @ 0x4
  2383                           
  2384                           
  2385                           ; 2 bytes @ 0x4
  2386  0074                     	ds	2
  2387  0076                     ?i1_SendCmdReply:	
  2388  0076                     i1SendCmdReply@cmd:	
  2389                           ; 0 bytes @ 0x6
  2390                           
  2391                           
  2392                           ; 2 bytes @ 0x6
  2393  0076                     	ds	2
  2394  0078                     i1SendCmdReply@data:	
  2395                           
  2396                           ; 2 bytes @ 0x8
  2397  0078                     	ds	2
  2398  007A                     i1SendCmdReply@count:	
  2399                           
  2400                           ; 1 bytes @ 0xA
  2401  007A                     	ds	1
  2402  007B                     i1SendCmdReply@n:	
  2403                           
  2404                           ; 1 bytes @ 0xB
  2405  007B                     	ds	1
  2406  007C                     _ResultRx$3072:	
  2407                           
  2408                           ; 1 bytes @ 0xC
  2409  007C                     	ds	1
  2410  007D                     _ResultRx$3073:	
  2411                           
  2412                           ; 1 bytes @ 0xD
  2413  007D                     	ds	1
  2414                           
  2415                           	psect	cstackBANK0
  2416  0050                     __pcstackBANK0:	
  2417  0050                     ??i1_SendCmdReply:	
  2418                           
  2419                           ; 0 bytes @ 0x0
  2420  0050                     	ds	8
  2421  0058                     ??_ResultRx:	
  2422                           
  2423                           ; 0 bytes @ 0x8
  2424  0058                     	ds	5
  2425  005D                     ??_ISRCode:	
  2426                           
  2427                           ; 0 bytes @ 0xD
  2428  005D                     	ds	1
  2429  005E                     ??_USBCtrlEPAllowStatusStage:	
  2430  005E                     ??_USBStallHandler:	
  2431                           ; 0 bytes @ 0xE
  2432                           
  2433  005E                     ?_USBConfigureEndpoint:	
  2434                           ; 0 bytes @ 0xE
  2435                           
  2436  005E                     ??_USBCtrlTrfTxService:	
  2437                           ; 0 bytes @ 0xE
  2438                           
  2439  005E                     ??_memset:	
  2440                           ; 0 bytes @ 0xE
  2441                           
  2442  005E                     ??_Send32:	
  2443                           ; 0 bytes @ 0xE
  2444                           
  2445  005E                     ??_USBDeviceInit:	
  2446                           ; 0 bytes @ 0xE
  2447                           
  2448  005E                     ??_USBStdGetDscHandler:	
  2449                           ; 0 bytes @ 0xE
  2450                           
  2451  005E                     ??_USBStdGetStatusHandler:	
  2452                           ; 0 bytes @ 0xE
  2453                           
  2454  005E                     ??_USBCheckVendorRequest:	
  2455                           ; 0 bytes @ 0xE
  2456                           
  2457  005E                     ??_WorkTick:	
  2458                           ; 0 bytes @ 0xE
  2459                           
  2460  005E                     ??_InitFAN:	
  2461                           ; 0 bytes @ 0xE
  2462                           
  2463  005E                     ??_InitTempSensor:	
  2464                           ; 0 bytes @ 0xE
  2465                           
  2466  005E                     ??_InitWorkTick:	
  2467                           ; 0 bytes @ 0xE
  2468                           
  2469  005E                     ??_InitResultRx:	
  2470                           ; 0 bytes @ 0xE
  2471                           
  2472  005E                     ??_USBCBSuspend:	
  2473                           ; 0 bytes @ 0xE
  2474                           
  2475  005E                     ??_USBCBWakeFromSuspend:	
  2476                           ; 0 bytes @ 0xE
  2477                           
  2478  005E                     ??_USBCB_SOF_Handler:	
  2479                           ; 0 bytes @ 0xE
  2480                           
  2481  005E                     ??_USBCBErrorHandler:	
  2482                           ; 0 bytes @ 0xE
  2483                           
  2484  005E                     ??_USBCBCheckOtherReq:	
  2485                           ; 0 bytes @ 0xE
  2486                           
  2487  005E                     ??_USBCBStdSetDscHandler:	
  2488                           ; 0 bytes @ 0xE
  2489                           
  2490  005E                     ??___awdiv:	
  2491                           ; 0 bytes @ 0xE
  2492                           
  2493  005E                     ??___lwdiv:	
  2494                           ; 0 bytes @ 0xE
  2495                           
  2496  005E                     ??___wmul:	
  2497                           ; 0 bytes @ 0xE
  2498                           
  2499  005E                     ?___bmul:	
  2500                           ; 0 bytes @ 0xE
  2501                           
  2502  005E                     USBConfigureEndpoint@direction:	
  2503                           ; 1 bytes @ 0xE
  2504                           
  2505  005E                     ___bmul@multiplicand:	
  2506                           ; 1 bytes @ 0xE
  2507                           
  2508  005E                     ___wmul@product:	
  2509                           ; 1 bytes @ 0xE
  2510                           
  2511                           
  2512                           ; 2 bytes @ 0xE
  2513  005E                     	ds	1
  2514  005F                     ??___bmul:	
  2515  005F                     USBConfigureEndpoint@EPNum:	
  2516                           ; 0 bytes @ 0xF
  2517                           
  2518  005F                     USBStdGetStatusHandler@p:	
  2519                           ; 1 bytes @ 0xF
  2520                           
  2521  005F                     ___lwdiv@counter:	
  2522                           ; 1 bytes @ 0xF
  2523                           
  2524  005F                     memset@p1:	
  2525                           ; 1 bytes @ 0xF
  2526                           
  2527  005F                     _DetectAsics$2853:	
  2528                           ; 1 bytes @ 0xF
  2529                           
  2530                           
  2531                           ; 2 bytes @ 0xF
  2532  005F                     	ds	1
  2533  0060                     ??_USBCtrlTrfRxService:	
  2534  0060                     USBConfigureEndpoint@handle:	
  2535                           ; 0 bytes @ 0x10
  2536                           
  2537  0060                     USBCtrlTrfTxService@byteToSend:	
  2538                           ; 1 bytes @ 0x10
  2539                           
  2540  0060                     ___bmul@product:	
  2541                           ; 1 bytes @ 0x10
  2542                           
  2543  0060                     memset@p:	
  2544                           ; 1 bytes @ 0x10
  2545                           
  2546  0060                     ___lwdiv@quotient:	
  2547                           ; 1 bytes @ 0x10
  2548                           
  2549                           
  2550                           ; 2 bytes @ 0x10
  2551  0060                     	ds	1
  2552  0061                     USBCtrlTrfInHandler@lastDTS:	
  2553  0061                     DetectAsics@x:	
  2554                           ; 1 bytes @ 0x11
  2555                           
  2556  0061                     ___bmul@multiplier:	
  2557                           ; 1 bytes @ 0x11
  2558                           
  2559                           
  2560                           ; 1 bytes @ 0x11
  2561  0061                     	ds	1
  2562  0062                     ??_USER_USB_CALLBACK_EVENT_HANDLER:	
  2563  0062                     ??_InitializeSystem:	
  2564                           ; 0 bytes @ 0x12
  2565                           
  2566  0062                     ??_UserInit:	
  2567                           ; 0 bytes @ 0x12
  2568                           
  2569  0062                     ??_main:	
  2570                           ; 0 bytes @ 0x12
  2571                           
  2572                           
  2573                           	psect	maintext
  2574  1087                     __pmaintext:	
  2575                           ; 0 bytes @ 0x12
  2576 ;;
  2577 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2578 ;;
  2579 ;; *************** function _main *****************
  2580 ;; Defined at:
  2581 ;;		line 98 in file "main.c"
  2582 ;; Parameters:    Size  Location     Type
  2583 ;;		None
  2584 ;; Auto vars:     Size  Location     Type
  2585 ;;		None
  2586 ;; Return value:  Size  Location     Type
  2587 ;;                  2  832[COMMON] int 
  2588 ;; Registers used:
  2589 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  2590 ;; Tracked objects:
  2591 ;;		On entry : 17F/0
  2592 ;;		On exit  : 0/0
  2593 ;;		Unchanged: 0/0
  2594 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2595 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2596 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2597 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2598 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2599 ;;Total ram usage:        0 bytes
  2600 ;; Hardware stack levels required when called:   13
  2601 ;; This function calls:
  2602 ;;		_USBDeviceTasks
  2603 ;;		_AsicPushWork
  2604 ;;		_WorkTick
  2605 ;;		_InitializeSystem
  2606 ;;		_ProcessIO
  2607 ;; This function is called by:
  2608 ;;		Startup code after reset
  2609 ;; This function uses a non-reentrant model
  2610 ;;
  2611                           
  2612                           
  2613                           ;psect for function _main
  2614  1087                     _main:	
  2615                           
  2616                           ;main.c: 99: InitializeSystem();
  2617                           
  2618                           ;incstack = 0
  2619                           ; Regs used in _main: [allreg]
  2620  1087  3190  2070  3190   	fcall	_InitializeSystem
  2621  108A                     l833:	
  2622                           ;main.c: 101: while(1)
  2623                           
  2624                           
  2625                           ;main.c: 102: {
  2626                           ;main.c: 119: USBDeviceTasks();
  2627  108A  318F  2716  3190   	fcall	_USBDeviceTasks
  2628                           
  2629                           ;main.c: 133: if(TMR0IF)
  2630  108D  1D0B               	btfss	11,2	;volatile
  2631  108E  2892               	goto	l6453
  2632                           
  2633                           ;main.c: 134: WorkTick();
  2634  108F  3192  223F  3190   	fcall	_WorkTick
  2635  1092                     l6453:	
  2636                           
  2637                           ;main.c: 136: if(Status.State == 'P'){
  2638  1092  0022               	movlb	2	; select bank2
  2639  1093  0859               	movf	_Status^(0+256),w	;volatile
  2640  1094  3A50               	xorlw	80
  2641  1095  1D03               	skipz
  2642  1096  289A               	goto	l6457
  2643                           
  2644                           ;main.c: 137: AsicPushWork();
  2645  1097  3195  25B7  3190   	fcall	_AsicPushWork
  2646  109A                     l6457:	
  2647                           
  2648                           ;main.c: 138: }
  2649                           ;main.c: 140: ProcessIO();
  2650  109A  3196  2625  3190   	fcall	_ProcessIO
  2651  109D  288A               	goto	l833
  2652  109E                     __end_of_main:	
  2653                           
  2654                           	psect	text1
  2655  1625                     __ptext1:	
  2656 ;; *************** function _ProcessIO *****************
  2657 ;; Defined at:
  2658 ;;		line 182 in file "main.c"
  2659 ;; Parameters:    Size  Location     Type
  2660 ;;		None
  2661 ;; Auto vars:     Size  Location     Type
  2662 ;;		None
  2663 ;; Return value:  Size  Location     Type
  2664 ;;		None               void
  2665 ;; Registers used:
  2666 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  2667 ;; Tracked objects:
  2668 ;;		On entry : 0/0
  2669 ;;		On exit  : 0/0
  2670 ;;		Unchanged: 0/0
  2671 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2672 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2673 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  2674 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  2675 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0
  2676 ;;Total ram usage:        8 bytes
  2677 ;; Hardware stack levels used:    1
  2678 ;; Hardware stack levels required when called:    8
  2679 ;; This function calls:
  2680 ;;		_USBTransferOnePacket
  2681 ;;		_ProcessCmd
  2682 ;;		___bmul
  2683 ;; This function is called by:
  2684 ;;		_main
  2685 ;; This function uses a non-reentrant model
  2686 ;;
  2687                           
  2688                           
  2689                           ;psect for function _ProcessIO
  2690  1625                     _ProcessIO:	
  2691                           
  2692                           ;main.c: 184: if((USBDeviceState < CONFIGURED_STATE)||(UCONbits.SUSPND==1)) return;
  2693                           
  2694                           ;incstack = 0
  2695                           ; Regs used in _ProcessIO: [wreg-fsr1h+status,2+status,0+btemp+1+pclath+cstack]
  2696  1625  3020               	movlw	32
  2697  1626  0021               	movlb	1	; select bank1
  2698  1627  025C               	subwf	_USBDeviceState^(0+128),w
  2699  1628  1C03               	skipc
  2700  1629  0008               	return
  2701  162A  003D               	movlb	29	; select bank29
  2702  162B  188E               	btfsc	14,1	;volatile
  2703  162C  0008               	return
  2704                           
  2705                           ;main.c: 193: if(!(USBGenericOutHandle==0?0:((volatile BDT_ENTRY*)USBGenericOutHandle)->
      +                          STAT.UOWN)) {
  2706  162D  0021               	movlb	1	; select bank1
  2707  162E  085E               	movf	_USBGenericOutHandle^(0+128),w
  2708  162F  1903               	btfsc	3,2
  2709  1630  2E3E               	goto	l6483
  2710  1631  085E               	movf	_USBGenericOutHandle^(0+128),w
  2711  1632  0086               	movwf	6
  2712  1633  0187               	clrf	7
  2713  1634  0D01               	rlf	1,w
  2714  1635  0D01               	rlf	1,w
  2715  1636  3901               	andlw	1
  2716  1637  00C5               	movwf	??_ProcessIO^(0+128)
  2717  1638  01C6               	clrf	(??_ProcessIO^(0+128)+1)
  2718  1639  0845               	movf	??_ProcessIO^(0+128),w
  2719  163A  00C9               	movwf	_ProcessIO$2366^(0+128)
  2720  163B  0846               	movf	(??_ProcessIO+1)^(0+128),w
  2721  163C  00CA               	movwf	(_ProcessIO$2366+1)^(0+128)
  2722  163D  2E40               	goto	l6485
  2723  163E                     l6483:	
  2724  163E  01C9               	clrf	_ProcessIO$2366^(0+128)
  2725  163F  01CA               	clrf	(_ProcessIO$2366+1)^(0+128)
  2726  1640                     l6485:	
  2727  1640  084A               	movf	(_ProcessIO$2366+1)^(0+128),w
  2728  1641  0449               	iorwf	_ProcessIO$2366^(0+128),w
  2729  1642  1D03               	skipz
  2730  1643  2E5A               	goto	l6491
  2731                           
  2732                           ;main.c: 197: ProcessCmd(OUTPacket);
  2733  1644  30A0               	movlw	160
  2734  1645  3184  24E1  3196   	fcall	_ProcessCmd
  2735                           
  2736                           ;main.c: 198: USBGenericOutHandle = USBTransferOnePacket(1,0,(BYTE*)&OUTPacket,64);
  2737  1648  0021               	movlb	1	; select bank1
  2738  1649  01A0               	clrf	?_USBTransferOnePacket^(0+128)
  2739  164A  30A0               	movlw	160
  2740  164B  00C5               	movwf	??_ProcessIO^(0+128)
  2741  164C  0845               	movf	??_ProcessIO^(0+128),w
  2742  164D  00A1               	movwf	(?_USBTransferOnePacket+1)^(0+128)
  2743  164E  3040               	movlw	64
  2744  164F  00C6               	movwf	(??_ProcessIO+1)^(0+128)
  2745  1650  0846               	movf	(??_ProcessIO+1)^(0+128),w
  2746  1651  00A2               	movwf	(?_USBTransferOnePacket^(0+128)+2)
  2747  1652  3001               	movlw	1
  2748  1653  3193  2344  3196   	fcall	_USBTransferOnePacket
  2749  1656  0021               	movlb	1	; select bank1
  2750  1657  00C7               	movwf	(??_ProcessIO+2)^(0+128)
  2751  1658  0847               	movf	(??_ProcessIO+2)^(0+128),w
  2752  1659  00DE               	movwf	_USBGenericOutHandle^(0+128)
  2753  165A                     l6491:	
  2754                           
  2755                           ;main.c: 199: }
  2756                           ;main.c: 201: if(WQI != WQX && !(USBGenericInHandle==0?0:((volatile BDT_ENTRY*)USBGeneri
      +                          cInHandle)->STAT.UOWN)) {
  2757  165A  086D               	movf	_WQI^(0+128),w
  2758  165B  066E               	xorwf	_WQX^(0+128),w
  2759  165C  1903               	skipnz
  2760  165D  0008               	return
  2761  165E  085D               	movf	_USBGenericInHandle^(0+128),w
  2762  165F  1903               	btfsc	3,2
  2763  1660  2E6E               	goto	l6497
  2764  1661  085D               	movf	_USBGenericInHandle^(0+128),w
  2765  1662  0086               	movwf	6
  2766  1663  0187               	clrf	7
  2767  1664  0D01               	rlf	1,w
  2768  1665  0D01               	rlf	1,w
  2769  1666  3901               	andlw	1
  2770  1667  00C5               	movwf	??_ProcessIO^(0+128)
  2771  1668  01C6               	clrf	(??_ProcessIO^(0+128)+1)
  2772  1669  0845               	movf	??_ProcessIO^(0+128),w
  2773  166A  00CB               	movwf	_ProcessIO$2400^(0+128)
  2774  166B  0846               	movf	(??_ProcessIO+1)^(0+128),w
  2775  166C  00CC               	movwf	(_ProcessIO$2400+1)^(0+128)
  2776  166D  2E70               	goto	l6499
  2777  166E                     l6497:	
  2778  166E  01CB               	clrf	_ProcessIO$2400^(0+128)
  2779  166F  01CC               	clrf	(_ProcessIO$2400+1)^(0+128)
  2780  1670                     l6499:	
  2781  1670  084C               	movf	(_ProcessIO$2400+1)^(0+128),w
  2782  1671  044B               	iorwf	_ProcessIO$2400^(0+128),w
  2783  1672  1D03               	skipz
  2784  1673  0008               	return
  2785                           
  2786                           ;main.c: 202: USBGenericInHandle = USBTransferOnePacket(1,1,(BYTE*)&INPacket[WQX*15],15);
  2787  1674  01A0               	clrf	?_USBTransferOnePacket^(0+128)
  2788  1675  0AA0               	incf	?_USBTransferOnePacket^(0+128),f
  2789  1676  300F               	movlw	15
  2790  1677  00C5               	movwf	??_ProcessIO^(0+128)
  2791  1678  0845               	movf	??_ProcessIO^(0+128),w
  2792  1679  0020               	movlb	0	; select bank0
  2793  167A  00DE               	movwf	?___bmul
  2794  167B  0021               	movlb	1	; select bank1
  2795  167C  086E               	movf	_WQX^(0+128),w
  2796  167D  3190  201F  3196   	fcall	___bmul
  2797  1680  3E20               	addlw	32
  2798  1681  0021               	movlb	1	; select bank1
  2799  1682  00C6               	movwf	(??_ProcessIO+1)^(0+128)
  2800  1683  0846               	movf	(??_ProcessIO+1)^(0+128),w
  2801  1684  00A1               	movwf	(?_USBTransferOnePacket+1)^(0+128)
  2802  1685  300F               	movlw	15
  2803  1686  00C7               	movwf	(??_ProcessIO+2)^(0+128)
  2804  1687  0847               	movf	(??_ProcessIO+2)^(0+128),w
  2805  1688  00A2               	movwf	(?_USBTransferOnePacket^(0+128)+2)
  2806  1689  3001               	movlw	1
  2807  168A  3193  2344         	fcall	_USBTransferOnePacket
  2808  168C  0021               	movlb	1	; select bank1
  2809  168D  00C8               	movwf	(??_ProcessIO+3)^(0+128)
  2810  168E  0848               	movf	(??_ProcessIO+3)^(0+128),w
  2811  168F  00DD               	movwf	_USBGenericInHandle^(0+128)
  2812                           
  2813                           ;main.c: 203: WQX = (WQX+1) & 3;
  2814  1690  0A6E               	incf	_WQX^(0+128),w
  2815  1691  3903               	andlw	3
  2816  1692  00C5               	movwf	??_ProcessIO^(0+128)
  2817  1693  0845               	movf	??_ProcessIO^(0+128),w
  2818  1694  00EE               	movwf	_WQX^(0+128)
  2819  1695  0008               	return
  2820  1696                     __end_of_ProcessIO:	
  2821                           
  2822                           	psect	text2
  2823  04E1                     __ptext2:	
  2824 ;; *************** function _ProcessCmd *****************
  2825 ;; Defined at:
  2826 ;;		line 44 in file "klondike.c"
  2827 ;; Parameters:    Size  Location     Type
  2828 ;;  cmd             1    wreg     PTR unsigned char 
  2829 ;;		 -> OUTPacket(64), 
  2830 ;; Auto vars:     Size  Location     Type
  2831 ;;  cmd             1   36[BANK1 ] PTR unsigned char 
  2832 ;;		 -> OUTPacket(64), 
  2833 ;; Return value:  Size  Location     Type
  2834 ;;		None               void
  2835 ;; Registers used:
  2836 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  2837 ;; Tracked objects:
  2838 ;;		On entry : 0/0
  2839 ;;		On exit  : 0/0
  2840 ;;		Unchanged: 0/0
  2841 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2842 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2843 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  2844 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  2845 ;;      Totals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
  2846 ;;Total ram usage:        7 bytes
  2847 ;; Hardware stack levels used:    1
  2848 ;; Hardware stack levels required when called:    7
  2849 ;; This function calls:
  2850 ;;		_AsicPushWork
  2851 ;;		_SendCmdReply
  2852 ;;		___lwdiv
  2853 ;;		___wmul
  2854 ;; This function is called by:
  2855 ;;		_ProcessIO
  2856 ;; This function uses a non-reentrant model
  2857 ;;
  2858                           
  2859                           
  2860                           ;psect for function _ProcessCmd
  2861  04E1                     _ProcessCmd:	
  2862                           
  2863                           ;incstack = 0
  2864                           ; Regs used in _ProcessCmd: [wreg-fsr1h+status,2+status,0+btemp+1+pclath+cstack]
  2865                           ;ProcessCmd@cmd stored from wreg
  2866  04E1  0021               	movlb	1	; select bank1
  2867  04E2  00C4               	movwf	ProcessCmd@cmd^(0+128)
  2868                           
  2869                           ;klondike.c: 47: switch(cmd[0]) {
  2870  04E3  2E29               	goto	l6371
  2871  04E4                     l6307:	
  2872                           ;klondike.c: 48: case 'W':
  2873                           
  2874                           
  2875                           ;klondike.c: 49: if( Status.WorkQC < 4-1 ) {
  2876  04E4  3003               	movlw	3
  2877  04E5  0022               	movlb	2	; select bank2
  2878  04E6  025C               	subwf	(_Status^(0+256)+3),w	;volatile
  2879  04E7  1803               	skipnc
  2880  04E8  2E15               	goto	L4
  2881                           
  2882                           ;klondike.c: 50: WorkQue[ (WorkNow + Status.WorkQC++) & 4-1 ] = *(WORKTASK *)(cmd+2);
  2883  04E9  0021               	movlb	1	; select bank1
  2884  04EA  0844               	movf	ProcessCmd@cmd^(0+128),w
  2885  04EB  3E02               	addlw	2
  2886  04EC  0086               	movwf	6
  2887  04ED  3002               	movlw	2	; select bank4/5
  2888  04EE  0087               	movwf	7
  2889  04EF  0862               	movf	_WorkNow^(0+128),w
  2890  04F0  0022               	movlb	2	; select bank2
  2891  04F1  075C               	addwf	(_Status^(0+256)+3),w	;volatile
  2892  04F2  0021               	movlb	1	; select bank1
  2893  04F3  00BE               	movwf	??_ProcessCmd^(0+128)
  2894  04F4  01BF               	clrf	(??_ProcessCmd^(0+128)+1)
  2895  04F5  0DBF               	rlf	(??_ProcessCmd+1)^(0+128),f
  2896  04F6  3003               	movlw	3
  2897  04F7  053E               	andwf	??_ProcessCmd^(0+128),w
  2898  04F8  00A0               	movwf	?___wmul^(0+128)
  2899  04F9  3000               	movlw	0
  2900  04FA  053F               	andwf	(??_ProcessCmd+1)^(0+128),w
  2901  04FB  00A1               	movwf	(?___wmul+1)^(0+128)
  2902  04FC  302D               	movlw	45
  2903  04FD  00A2               	movwf	(?___wmul^(0+128)+2)
  2904  04FE  3000               	movlw	0
  2905  04FF  00A3               	movwf	(?___wmul^(0+128)+3)
  2906  0500  3191  2187  3184   	fcall	___wmul
  2907  0503  303C               	movlw	60
  2908  0504  0021               	movlb	1	; select bank1
  2909  0505  00C0               	movwf	(??_ProcessCmd+2)^(0+128)
  2910  0506  3023               	movlw	35
  2911  0507  00C1               	movwf	((??_ProcessCmd+2)^(0+128)+1)
  2912  0508  0820               	movf	?___wmul^(0+128),w
  2913  0509  0740               	addwf	(??_ProcessCmd+2)^(0+128),w
  2914  050A  0084               	movwf	4
  2915  050B  0821               	movf	(?___wmul+1)^(0+128),w
  2916  050C  3D41               	addwfc	(??_ProcessCmd+3)^(0+128),w
  2917  050D  0085               	movwf	5
  2918  050E  302D               	movlw	45
  2919  050F  00FF               	movwf	127
  2920  0510                     u6410:	
  2921  0510  0016               	moviw fsr1++
  2922  0511  001A               	movwi fsr0++
  2923  0512  0BFF               	decfsz	127,f
  2924  0513  2D10               	goto	u6410
  2925  0514  3001               	movlw	1
  2926  0515  00BE               	movwf	??_ProcessCmd^(0+128)
  2927  0516  083E               	movf	??_ProcessCmd^(0+128),w
  2928  0517  0022               	movlb	2	; select bank2
  2929  0518  07DC               	addwf	(_Status^(0+256)+3),f	;volatile
  2930                           
  2931                           ;klondike.c: 51: if(Status.State == 'R') {
  2932  0519  0859               	movf	_Status^(0+256),w	;volatile
  2933  051A  3A52               	xorlw	82
  2934  051B  1D03               	skipz
  2935  051C  2E15               	goto	L4
  2936                           
  2937                           ;klondike.c: 52: AsicPushWork();
  2938  051D  3195  25B7  3184   	fcall	_AsicPushWork
  2939  0520  2E15               	goto	L4
  2940  0521                     l6319:	
  2941                           ;klondike.c: 58: case 'A':
  2942                           
  2943                           ;klondike.c: 57: break;
  2944                           
  2945                           ;klondike.c: 56: Status.Noise = Status.ErrorCount = 0;
  2946                           
  2947                           ;klondike.c: 53: }
  2948                           ;klondike.c: 54: }
  2949                           ;klondike.c: 55: SendCmdReply(cmd, (char *)&Status, sizeof(Status));
  2950                           
  2951                           
  2952                           ;klondike.c: 59: Status.WorkQC = WorkNow = 0;
  2953  0521  0021               	movlb	1	; select bank1
  2954  0522  01E2               	clrf	_WorkNow^(0+128)
  2955  0523  0022               	movlb	2	; select bank2
  2956  0524  01DC               	clrf	(_Status^(0+256)+3)	;volatile
  2957                           
  2958                           ;klondike.c: 60: Status.State = 'R';
  2959  0525  3052               	movlw	82
  2960  0526  0021               	movlb	1	; select bank1
  2961  0527  2E11               	goto	L3
  2962  0528                     l6327:	
  2963                           ;klondike.c: 64: case 'I':
  2964                           
  2965                           ;klondike.c: 63: break;
  2966                           
  2967                           ;klondike.c: 62: Status.Noise = Status.ErrorCount = 0;
  2968                           
  2969                           ;klondike.c: 61: SendCmdReply(cmd, (char *)&Status, sizeof(Status));
  2970                           
  2971                           
  2972                           ;klondike.c: 65: SendCmdReply(cmd, (char *)&ID, sizeof(ID));
  2973  0528  0021               	movlb	1	; select bank1
  2974  0529  0844               	movf	ProcessCmd@cmd^(0+128),w
  2975  052A  00A4               	movwf	?_SendCmdReply^(0+128)
  2976  052B  3002               	movlw	2
  2977  052C  00A5               	movwf	(?_SendCmdReply+1)^(0+128)
  2978  052D  309F               	movlw	low (_ID| (0+32768))
  2979  052E  00A6               	movwf	(?_SendCmdReply+2)^(0+128)
  2980  052F  3088               	movlw	high (_ID| (0+32768))
  2981  0530  00A7               	movwf	(?_SendCmdReply+3)^(0+128)
  2982  0531  300C               	movlw	12
  2983  0532  00BE               	movwf	??_ProcessCmd^(0+128)
  2984  0533  083E               	movf	??_ProcessCmd^(0+128),w
  2985  0534  00A8               	movwf	(?_SendCmdReply^(0+128)+4)
  2986  0535  318A  2283  3184   	fcall	_SendCmdReply
  2987                           
  2988                           ;klondike.c: 66: break;
  2989  0538  2E42               	goto	l681
  2990  0539                     l6329:	
  2991                           ;klondike.c: 67: case 'S':
  2992                           
  2993  0539  2E15               	goto	L4
  2994  053A                     l6333:	
  2995                           ;klondike.c: 71: case 'C':
  2996                           
  2997                           ;klondike.c: 70: break;
  2998                           
  2999                           ;klondike.c: 69: Status.Noise = Status.ErrorCount = 0;
  3000                           
  3001                           ;klondike.c: 68: SendCmdReply(cmd, (char *)&Status, sizeof(Status));
  3002                           
  3003                           
  3004                           ;klondike.c: 72: if( *(WORD *)&cmd[2] != 0 ) {
  3005  053A  0021               	movlb	1	; select bank1
  3006  053B  0844               	movf	ProcessCmd@cmd^(0+128),w
  3007  053C  3E02               	addlw	2
  3008  053D  0086               	movwf	6
  3009  053E  3002               	movlw	2	; select bank4/5
  3010  053F  0087               	movwf	7
  3011  0540  0016               	moviw fsr1++
  3012  0541  0401               	iorwf	1,w
  3013  0542  1903               	skipnz
  3014  0543  2DDA               	goto	l6355
  3015                           
  3016                           ;klondike.c: 73: Cfg = *(WORKCFG *)(cmd+2);
  3017  0544  0844               	movf	ProcessCmd@cmd^(0+128),w
  3018  0545  3E02               	addlw	2
  3019  0546  0086               	movwf	6
  3020  0547  3002               	movlw	2	; select bank4/5
  3021  0548  0087               	movwf	7
  3022  0549  30DE               	movlw	low _Cfg
  3023  054A  0084               	movwf	4
  3024  054B  3001               	movlw	high _Cfg
  3025  054C  0085               	movwf	5
  3026  054D  3006               	movlw	6
  3027  054E  00FF               	movwf	127
  3028  054F                     u6440:	
  3029  054F  0016               	moviw fsr1++
  3030  0550  001A               	movwi fsr0++
  3031  0551  0BFF               	decfsz	127,f
  3032  0552  2D4F               	goto	u6440
  3033                           
  3034                           ;klondike.c: 74: if(Cfg.HashClock < 128)
  3035  0553  3000               	movlw	0
  3036  0554  0023               	movlb	3	; select bank3
  3037  0555  025F               	subwf	(_Cfg+1)^(0+384),w
  3038  0556  3080               	movlw	128
  3039  0557  1903               	skipnz
  3040  0558  025E               	subwf	_Cfg^(0+384),w
  3041  0559  1803               	skipnc
  3042  055A  2D5F               	goto	l687
  3043                           
  3044                           ;klondike.c: 75: Cfg.HashClock = 128;
  3045  055B  3080               	movlw	128
  3046  055C  00DE               	movwf	_Cfg^(0+384)
  3047  055D  3000               	movlw	0
  3048  055E  00DF               	movwf	(_Cfg^(0+384)+1)
  3049  055F                     l687:	
  3050                           
  3051                           ;klondike.c: 76: if(Cfg.HashClock <= 250 && Cfg.HashClock >= 450/2)
  3052  055F  3000               	movlw	0
  3053  0560  025F               	subwf	(_Cfg+1)^(0+384),w
  3054  0561  30FB               	movlw	251
  3055  0562  1903               	skipnz
  3056  0563  025E               	subwf	_Cfg^(0+384),w
  3057  0564  1803               	skipnc
  3058  0565  2D71               	goto	l688
  3059  0566  3000               	movlw	0
  3060  0567  025F               	subwf	(_Cfg+1)^(0+384),w
  3061  0568  30E1               	movlw	225
  3062  0569  1903               	skipnz
  3063  056A  025E               	subwf	_Cfg^(0+384),w
  3064  056B  1C03               	skipc
  3065  056C  2D71               	goto	l688
  3066                           
  3067                           ;klondike.c: 77: Cfg.HashClock = 450/2-1;
  3068  056D  30E0               	movlw	224
  3069  056E  00DE               	movwf	_Cfg^(0+384)
  3070  056F  3000               	movlw	0
  3071  0570  00DF               	movwf	(_Cfg^(0+384)+1)
  3072  0571                     l688:	
  3073                           
  3074                           ;klondike.c: 78: if(Cfg.HashClock >= 450)
  3075  0571  3001               	movlw	1
  3076  0572  025F               	subwf	(_Cfg+1)^(0+384),w
  3077  0573  30C2               	movlw	194
  3078  0574  1903               	skipnz
  3079  0575  025E               	subwf	_Cfg^(0+384),w
  3080  0576  1C03               	skipc
  3081  0577  2D7C               	goto	l689
  3082                           
  3083                           ;klondike.c: 79: Cfg.HashClock = 450-1;
  3084  0578  30C1               	movlw	193
  3085  0579  00DE               	movwf	_Cfg^(0+384)
  3086  057A  3001               	movlw	1
  3087  057B  00DF               	movwf	(_Cfg^(0+384)+1)
  3088  057C                     l689:	
  3089                           
  3090                           ;klondike.c: 80: if(Cfg.HashClock <= 250)
  3091  057C  3000               	movlw	0
  3092  057D  025F               	subwf	(_Cfg+1)^(0+384),w
  3093  057E  30FB               	movlw	251
  3094  057F  1903               	skipnz
  3095  0580  025E               	subwf	_Cfg^(0+384),w
  3096  0581  1803               	skipnc
  3097  0582  2D9C               	goto	l6349
  3098                           
  3099                           ;klondike.c: 81: ClockCfg[0] = (((DWORD)Cfg.HashClock*2) << 18) | 0x00030017;
  3100  0583  085E               	movf	_Cfg^(0+384),w
  3101  0584  0021               	movlb	1	; select bank1
  3102  0585  00BE               	movwf	??_ProcessCmd^(0+128)
  3103  0586  0023               	movlb	3	; select bank3
  3104  0587  085F               	movf	(_Cfg+1)^(0+384),w
  3105  0588  0021               	movlb	1	; select bank1
  3106  0589  00BF               	movwf	(??_ProcessCmd^(0+128)+1)
  3107  058A  01C0               	clrf	(??_ProcessCmd^(0+128)+2)
  3108  058B  01C1               	clrf	(??_ProcessCmd^(0+128)+3)
  3109  058C  3001               	movlw	1
  3110  058D                     u6505:	
  3111  058D  35BE               	lslf	??_ProcessCmd^(0+128),f
  3112  058E  0DBF               	rlf	(??_ProcessCmd^(0+128)+1),f
  3113  058F  0DC0               	rlf	(??_ProcessCmd^(0+128)+2),f
  3114  0590  0DC1               	rlf	(??_ProcessCmd^(0+128)+3),f
  3115  0591  0B89               	decfsz	9,f
  3116  0592  2D8D               	goto	u6505
  3117  0593  3012               	movlw	18
  3118  0594                     u6515:	
  3119  0594  35BE               	lslf	??_ProcessCmd^(0+128),f
  3120  0595  0DBF               	rlf	(??_ProcessCmd^(0+128)+1),f
  3121  0596  0DC0               	rlf	(??_ProcessCmd^(0+128)+2),f
  3122  0597  0DC1               	rlf	(??_ProcessCmd^(0+128)+3),f
  3123  0598  0B89               	decfsz	9,f
  3124  0599  2D94               	goto	u6515
  3125  059A  3017               	movlw	23
  3126  059B  2DAD               	goto	L1
  3127  059C                     l6349:	
  3128                           
  3129                           ;klondike.c: 82: else
  3130                           ;klondike.c: 83: ClockCfg[0] = ((DWORD)Cfg.HashClock << 18) | 0x00030007;
  3131  059C  085E               	movf	_Cfg^(0+384),w
  3132  059D  0021               	movlb	1	; select bank1
  3133  059E  00BE               	movwf	??_ProcessCmd^(0+128)
  3134  059F  0023               	movlb	3	; select bank3
  3135  05A0  085F               	movf	(_Cfg+1)^(0+384),w
  3136  05A1  0021               	movlb	1	; select bank1
  3137  05A2  00BF               	movwf	(??_ProcessCmd^(0+128)+1)
  3138  05A3  01C0               	clrf	(??_ProcessCmd^(0+128)+2)
  3139  05A4  01C1               	clrf	(??_ProcessCmd^(0+128)+3)
  3140  05A5  3012               	movlw	18
  3141  05A6                     u6525:	
  3142  05A6  35BE               	lslf	??_ProcessCmd^(0+128),f
  3143  05A7  0DBF               	rlf	(??_ProcessCmd^(0+128)+1),f
  3144  05A8  0DC0               	rlf	(??_ProcessCmd^(0+128)+2),f
  3145  05A9  0DC1               	rlf	(??_ProcessCmd^(0+128)+3),f
  3146  05AA  0B89               	decfsz	9,f
  3147  05AB  2DA6               	goto	u6525
  3148  05AC  3007               	movlw	7
  3149  05AD                     L1:	
  3150  05AD  043E               	iorwf	??_ProcessCmd^(0+128),w
  3151  05AE  0023               	movlb	3	; select bank3
  3152  05AF  00D6               	movwf	_ClockCfg^(0+384)
  3153  05B0  3000               	movlw	0
  3154  05B1  0021               	movlb	1	; select bank1
  3155  05B2  043F               	iorwf	(??_ProcessCmd+1)^(0+128),w
  3156  05B3  0023               	movlb	3	; select bank3
  3157  05B4  00D7               	movwf	(_ClockCfg+1)^(0+384)
  3158  05B5  3003               	movlw	3
  3159  05B6  0021               	movlb	1	; select bank1
  3160  05B7  0440               	iorwf	(??_ProcessCmd+2)^(0+128),w
  3161  05B8  0023               	movlb	3	; select bank3
  3162  05B9  00D8               	movwf	(_ClockCfg+2)^(0+384)
  3163  05BA  3000               	movlw	0
  3164  05BB  0021               	movlb	1	; select bank1
  3165  05BC  0441               	iorwf	(??_ProcessCmd+3)^(0+128),w
  3166  05BD  0023               	movlb	3	; select bank3
  3167  05BE  00D9               	movwf	(_ClockCfg+3)^(0+384)
  3168                           
  3169                           ;klondike.c: 84: HashTime = 256 - ((WORD)12300/Cfg.HashClock);
  3170  05BF  085F               	movf	(_Cfg+1)^(0+384),w
  3171  05C0  0021               	movlb	1	; select bank1
  3172  05C1  01A1               	clrf	(?___lwdiv+1)^(0+128)
  3173  05C2  07A1               	addwf	(?___lwdiv+1)^(0+128),f
  3174  05C3  0023               	movlb	3	; select bank3
  3175  05C4  085E               	movf	_Cfg^(0+384),w
  3176  05C5  0021               	movlb	1	; select bank1
  3177  05C6  01A0               	clrf	?___lwdiv^(0+128)
  3178  05C7  07A0               	addwf	?___lwdiv^(0+128),f
  3179  05C8  300C               	movlw	12
  3180  05C9  00A2               	movwf	(?___lwdiv^(0+128)+2)
  3181  05CA  3030               	movlw	48
  3182  05CB  00A3               	movwf	(?___lwdiv^(0+128)+3)
  3183  05CC  3192  22FF  3184   	fcall	___lwdiv
  3184  05CF  0021               	movlb	1	; select bank1
  3185  05D0  0820               	movf	?___lwdiv^(0+128),w
  3186  05D1  3AFF               	xorlw	255
  3187  05D2  3E01               	addlw	1
  3188  05D3  00BE               	movwf	??_ProcessCmd^(0+128)
  3189  05D4  083E               	movf	??_ProcessCmd^(0+128),w
  3190  05D5  00EF               	movwf	_HashTime^(0+128)
  3191                           
  3192                           ;klondike.c: 85: PWM1DCH = Cfg.FanTarget;
  3193  05D6  0023               	movlb	3	; select bank3
  3194  05D7  0862               	movf	(_Cfg^(0+384)+4),w
  3195  05D8  002C               	movlb	12	; select bank12
  3196  05D9  0092               	movwf	18	;volatile
  3197  05DA                     l6355:	
  3198                           
  3199                           ;klondike.c: 86: }
  3200                           ;klondike.c: 87: SendCmdReply(cmd, (char *)&Cfg, sizeof(Cfg));
  3201  05DA  0021               	movlb	1	; select bank1
  3202  05DB  0844               	movf	ProcessCmd@cmd^(0+128),w
  3203  05DC  00A4               	movwf	?_SendCmdReply^(0+128)
  3204  05DD  3002               	movlw	2
  3205  05DE  00A5               	movwf	(?_SendCmdReply+1)^(0+128)
  3206  05DF  30DE               	movlw	low _Cfg
  3207  05E0  00A6               	movwf	(?_SendCmdReply+2)^(0+128)
  3208  05E1  3001               	movlw	high _Cfg
  3209  05E2  00A7               	movwf	(?_SendCmdReply+3)^(0+128)
  3210  05E3  3006               	movlw	6
  3211  05E4  00BE               	movwf	??_ProcessCmd^(0+128)
  3212  05E5  083E               	movf	??_ProcessCmd^(0+128),w
  3213  05E6  00A8               	movwf	(?_SendCmdReply^(0+128)+4)
  3214  05E7  318A  2283  3184   	fcall	_SendCmdReply
  3215                           
  3216                           ;klondike.c: 88: break;
  3217  05EA  2E42               	goto	l681
  3218  05EB                     l6357:	
  3219                           ;klondike.c: 89: case 'E':
  3220                           
  3221                           
  3222                           ;klondike.c: 90: LATAbits.LATA4 = (cmd[2] == '1');
  3223  05EB  0021               	movlb	1	; select bank1
  3224  05EC  0844               	movf	ProcessCmd@cmd^(0+128),w
  3225  05ED  3E02               	addlw	2
  3226  05EE  0086               	movwf	6
  3227  05EF  3002               	movlw	2	; select bank4/5
  3228  05F0  0087               	movwf	7
  3229  05F1  0801               	movf	1,w
  3230  05F2  3A31               	xorlw	49
  3231  05F3  3000               	movlw	0
  3232  05F4  1903               	skipnz
  3233  05F5  3001               	movlw	1
  3234  05F6  00BE               	movwf	??_ProcessCmd^(0+128)
  3235  05F7  0EBE               	swapf	??_ProcessCmd^(0+128),f
  3236  05F8  0022               	movlb	2	; select bank2
  3237  05F9  080C               	movf	12,w	;volatile
  3238  05FA  0021               	movlb	1	; select bank1
  3239  05FB  063E               	xorwf	??_ProcessCmd^(0+128),w
  3240  05FC  39EF               	andlw	-17
  3241  05FD  063E               	xorwf	??_ProcessCmd^(0+128),w
  3242  05FE  0022               	movlb	2	; select bank2
  3243  05FF  008C               	movwf	12	;volatile
  3244                           
  3245                           ;klondike.c: 91: Status.State = (cmd[2] == '1') ? 'R' : 'D';
  3246  0600  0021               	movlb	1	; select bank1
  3247  0601  0844               	movf	ProcessCmd@cmd^(0+128),w
  3248  0602  3E02               	addlw	2
  3249  0603  0086               	movwf	6
  3250  0604  3002               	movlw	2	; select bank4/5
  3251  0605  0087               	movwf	7
  3252  0606  0801               	movf	1,w
  3253  0607  3A31               	xorlw	49
  3254  0608  1903               	skipnz
  3255  0609  2E0C               	goto	l6363
  3256  060A  3044               	movlw	68
  3257  060B  2E0D               	goto	L2
  3258  060C                     l6363:	
  3259  060C  3052               	movlw	82
  3260  060D                     L2:	
  3261  060D  00C2               	movwf	_ProcessCmd$2049^(0+128)
  3262  060E  3000               	movlw	0
  3263  060F  00C3               	movwf	(_ProcessCmd$2049^(0+128)+1)
  3264  0610  0842               	movf	_ProcessCmd$2049^(0+128),w
  3265  0611                     L3:	
  3266  0611  00BE               	movwf	??_ProcessCmd^(0+128)
  3267  0612  083E               	movf	??_ProcessCmd^(0+128),w
  3268  0613  0022               	movlb	2	; select bank2
  3269  0614  00D9               	movwf	_Status^(0+256)	;volatile
  3270  0615                     L4:	
  3271                           
  3272                           ;klondike.c: 92: SendCmdReply(cmd, (char *)&Status, sizeof(Status));
  3273  0615  0021               	movlb	1	; select bank1
  3274  0616  0844               	movf	ProcessCmd@cmd^(0+128),w
  3275  0617  00A4               	movwf	?_SendCmdReply^(0+128)
  3276  0618  3002               	movlw	2
  3277  0619  00A5               	movwf	(?_SendCmdReply+1)^(0+128)
  3278  061A  3059               	movlw	low _Status
  3279  061B  00A6               	movwf	(?_SendCmdReply+2)^(0+128)
  3280  061C  3001               	movlw	high _Status
  3281  061D  00A7               	movwf	(?_SendCmdReply+3)^(0+128)
  3282  061E  300D               	movlw	13
  3283  061F  00BE               	movwf	??_ProcessCmd^(0+128)
  3284  0620  083E               	movf	??_ProcessCmd^(0+128),w
  3285  0621  00A8               	movwf	(?_SendCmdReply^(0+128)+4)
  3286  0622  318A  2283  3184   	fcall	_SendCmdReply
  3287                           
  3288                           ;klondike.c: 93: Status.Noise = Status.ErrorCount = 0;
  3289  0625  0022               	movlb	2	; select bank2
  3290  0626  01E0               	clrf	(_Status^(0+256)+7)	;volatile
  3291  0627  01E5               	clrf	(_Status^(0+256)+12)	;volatile
  3292                           
  3293                           ;klondike.c: 103: }
  3294                           
  3295                           ;klondike.c: 102: break;
  3296                           
  3297                           ;klondike.c: 101: default:
  3298                           
  3299                           ;klondike.c: 94: break;
  3300  0628  2E42               	goto	l681
  3301  0629                     l6371:	
  3302  0629  0021               	movlb	1	; select bank1
  3303  062A  0844               	movf	ProcessCmd@cmd^(0+128),w
  3304  062B  0086               	movwf	6
  3305  062C  3002               	movlw	2	; select bank4/5
  3306  062D  0087               	movwf	7
  3307  062E  0801               	movf	1,w
  3308                           
  3309                           ; Switch size 1, requested type "space"
  3310                           ; Number of cases is 6, Range of values is 65 to 87
  3311                           ; switch strategies available:
  3312                           ; Name         Instructions Cycles
  3313                           ; simple_byte           19    10 (average)
  3314                           ; direct_byte           55     9 (fixed)
  3315                           ; jumptable            263     9 (fixed)
  3316                           ;	Chosen strategy is simple_byte
  3317  062F  3A41               	xorlw	65	; case 65
  3318  0630  1903               	skipnz
  3319  0631  2D21               	goto	l6319
  3320  0632  3A02               	xorlw	2	; case 67
  3321  0633  1903               	skipnz
  3322  0634  2D3A               	goto	l6333
  3323  0635  3A06               	xorlw	6	; case 69
  3324  0636  1903               	skipnz
  3325  0637  2DEB               	goto	l6357
  3326  0638  3A0C               	xorlw	12	; case 73
  3327  0639  1903               	skipnz
  3328  063A  2D28               	goto	l6327
  3329  063B  3A1A               	xorlw	26	; case 83
  3330  063C  1903               	skipnz
  3331  063D  2D39               	goto	l6329
  3332  063E  3A04               	xorlw	4	; case 87
  3333  063F  1903               	skipnz
  3334  0640  2CE4               	goto	l6307
  3335  0641  2E42               	goto	l681
  3336  0642                     l681:	
  3337                           
  3338                           ;klondike.c: 104: LATAbits.LATA5 = 1;;
  3339  0642  0022               	movlb	2	; select bank2
  3340  0643  168C               	bsf	12,5	;volatile
  3341  0644  0008               	return
  3342  0645                     __end_of_ProcessCmd:	
  3343                           
  3344                           	psect	text3
  3345  12FF                     __ptext3:	
  3346 ;; *************** function ___lwdiv *****************
  3347 ;; Defined at:
  3348 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.20\sources\pic\lwdiv.c"
  3349 ;; Parameters:    Size  Location     Type
  3350 ;;  divisor         2    0[BANK1 ] unsigned int 
  3351 ;;  dividend        2    2[BANK1 ] unsigned int 
  3352 ;; Auto vars:     Size  Location     Type
  3353 ;;  quotient        2   16[BANK0 ] unsigned int 
  3354 ;;  counter         1   15[BANK0 ] unsigned char 
  3355 ;; Return value:  Size  Location     Type
  3356 ;;                  2    0[BANK1 ] unsigned int 
  3357 ;; Registers used:
  3358 ;;		wreg, status,2, status,0
  3359 ;; Tracked objects:
  3360 ;;		On entry : 0/0
  3361 ;;		On exit  : 0/0
  3362 ;;		Unchanged: 0/0
  3363 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3364 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  3365 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3366 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3367 ;;      Totals:         0       4       4       0       0       0       0       0       0       0       0       0       
      +0       0
  3368 ;;Total ram usage:        8 bytes
  3369 ;; Hardware stack levels used:    1
  3370 ;; Hardware stack levels required when called:    4
  3371 ;; This function calls:
  3372 ;;		Nothing
  3373 ;; This function is called by:
  3374 ;;		_ProcessCmd
  3375 ;; This function uses a non-reentrant model
  3376 ;;
  3377                           
  3378                           
  3379                           ;psect for function ___lwdiv
  3380  12FF                     ___lwdiv:	
  3381                           
  3382                           ;incstack = 0
  3383                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  3384  12FF  0020               	movlb	0	; select bank0
  3385  1300  01E0               	clrf	___lwdiv@quotient
  3386  1301  01E1               	clrf	___lwdiv@quotient+1
  3387  1302  0021               	movlb	1	; select bank1
  3388  1303  0821               	movf	(___lwdiv@divisor+1)^(0+128),w
  3389  1304  0420               	iorwf	___lwdiv@divisor^(0+128),w
  3390  1305  1903               	skipnz
  3391  1306  2B39               	goto	l6615
  3392  1307  0020               	movlb	0	; select bank0
  3393  1308  01DF               	clrf	___lwdiv@counter
  3394  1309  0ADF               	incf	___lwdiv@counter,f
  3395  130A                     l6603:	
  3396  130A  0021               	movlb	1	; select bank1
  3397  130B  1BA1               	btfsc	(___lwdiv@divisor+1)^(0+128),7
  3398  130C  2B19               	goto	l6605
  3399  130D  3001               	movlw	1
  3400  130E  0021               	movlb	1	; select bank1
  3401  130F                     u6905:	
  3402  130F  35A0               	lslf	___lwdiv@divisor^(0+128),f
  3403  1310  0DA1               	rlf	(___lwdiv@divisor+1)^(0+128),f
  3404  1311  0B89               	decfsz	9,f
  3405  1312  2B0F               	goto	u6905
  3406  1313  3001               	movlw	1
  3407  1314  0020               	movlb	0	; select bank0
  3408  1315  00DE               	movwf	??___lwdiv
  3409  1316  085E               	movf	??___lwdiv,w
  3410  1317  07DF               	addwf	___lwdiv@counter,f
  3411  1318  2B0A               	goto	l6603
  3412  1319                     l6605:	
  3413  1319  3001               	movlw	1
  3414  131A  0020               	movlb	0	; select bank0
  3415  131B                     u6925:	
  3416  131B  35E0               	lslf	___lwdiv@quotient,f
  3417  131C  0DE1               	rlf	___lwdiv@quotient+1,f
  3418  131D  0B89               	decfsz	9,f
  3419  131E  2B1B               	goto	u6925
  3420  131F  0021               	movlb	1	; select bank1
  3421  1320  0821               	movf	(___lwdiv@divisor+1)^(0+128),w
  3422  1321  0223               	subwf	(___lwdiv@dividend+1)^(0+128),w
  3423  1322  1D03               	skipz
  3424  1323  2B26               	goto	u6935
  3425  1324  0820               	movf	___lwdiv@divisor^(0+128),w
  3426  1325  0222               	subwf	___lwdiv@dividend^(0+128),w
  3427  1326                     u6935:	
  3428  1326  1C03               	skipc
  3429  1327  2B2E               	goto	l6611
  3430  1328  0820               	movf	___lwdiv@divisor^(0+128),w
  3431  1329  02A2               	subwf	___lwdiv@dividend^(0+128),f
  3432  132A  0821               	movf	(___lwdiv@divisor+1)^(0+128),w
  3433  132B  3BA3               	subwfb	(___lwdiv@dividend+1)^(0+128),f
  3434  132C  0020               	movlb	0	; select bank0
  3435  132D  1460               	bsf	___lwdiv@quotient,0
  3436  132E                     l6611:	
  3437  132E  3001               	movlw	1
  3438  132F  0021               	movlb	1	; select bank1
  3439  1330                     u6945:	
  3440  1330  36A1               	lsrf	(___lwdiv@divisor+1)^(0+128),f
  3441  1331  0CA0               	rrf	___lwdiv@divisor^(0+128),f
  3442  1332  0B89               	decfsz	9,f
  3443  1333  2B30               	goto	u6945
  3444  1334  3001               	movlw	1
  3445  1335  0020               	movlb	0	; select bank0
  3446  1336  02DF               	subwf	___lwdiv@counter,f
  3447  1337  1D03               	btfss	3,2
  3448  1338  2B19               	goto	l6605
  3449  1339                     l6615:	
  3450  1339  0020               	movlb	0	; select bank0
  3451  133A  0861               	movf	___lwdiv@quotient+1,w
  3452  133B  0021               	movlb	1	; select bank1
  3453  133C  01A1               	clrf	(?___lwdiv+1)^(0+128)
  3454  133D  07A1               	addwf	(?___lwdiv+1)^(0+128),f
  3455  133E  0020               	movlb	0	; select bank0
  3456  133F  0860               	movf	___lwdiv@quotient,w
  3457  1340  0021               	movlb	1	; select bank1
  3458  1341  01A0               	clrf	?___lwdiv^(0+128)
  3459  1342  07A0               	addwf	?___lwdiv^(0+128),f
  3460  1343  0008               	return
  3461  1344                     __end_of___lwdiv:	
  3462                           
  3463                           	psect	text4
  3464  0A83                     __ptext4:	
  3465 ;; *************** function _SendCmdReply *****************
  3466 ;; Defined at:
  3467 ;;		line 208 in file "main.c"
  3468 ;; Parameters:    Size  Location     Type
  3469 ;;  cmd             2    4[BANK1 ] PTR unsigned char 
  3470 ;;		 -> ResultQue(12), OUTPacket(64), 
  3471 ;;  data            2    6[BANK1 ] PTR unsigned char 
  3472 ;;		 -> ResultQue(12), Cfg(6), ID(12), Status(13), 
  3473 ;;  count           1    8[BANK1 ] unsigned char 
  3474 ;; Auto vars:     Size  Location     Type
  3475 ;;  n               1   17[BANK1 ] unsigned char 
  3476 ;; Return value:  Size  Location     Type
  3477 ;;		None               void
  3478 ;; Registers used:
  3479 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  3480 ;; Tracked objects:
  3481 ;;		On entry : 0/0
  3482 ;;		On exit  : 0/0
  3483 ;;		Unchanged: 0/0
  3484 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3485 ;;      Params:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
  3486 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  3487 ;;      Temps:          0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0
  3488 ;;      Totals:         0       0      14       0       0       0       0       0       0       0       0       0       
      +0       0
  3489 ;;Total ram usage:       14 bytes
  3490 ;; Hardware stack levels used:    1
  3491 ;; Hardware stack levels required when called:    5
  3492 ;; This function calls:
  3493 ;;		___bmul
  3494 ;;		___wmul
  3495 ;; This function is called by:
  3496 ;;		_ProcessCmd
  3497 ;; This function uses a non-reentrant model
  3498 ;;
  3499                           
  3500                           
  3501                           ;psect for function _SendCmdReply
  3502  0A83                     _SendCmdReply:	
  3503                           
  3504                           ;main.c: 209: if(WQI*15 + count + 2 < 64) {
  3505                           
  3506                           ;incstack = 0
  3507                           ; Regs used in _SendCmdReply: [wreg-fsr1h+status,2+status,0+btemp+1+pclath+cstack]
  3508  0A83  0021               	movlb	1	; select bank1
  3509  0A84  0828               	movf	SendCmdReply@count^(0+128),w
  3510  0A85  00A9               	movwf	??_SendCmdReply^(0+128)
  3511  0A86  01AA               	clrf	(??_SendCmdReply^(0+128)+1)
  3512  0A87  086D               	movf	_WQI^(0+128),w
  3513  0A88  00AB               	movwf	(??_SendCmdReply+2)^(0+128)
  3514  0A89  01AC               	clrf	((??_SendCmdReply+2)^(0+128)+1)
  3515  0A8A  082B               	movf	(??_SendCmdReply+2)^(0+128),w
  3516  0A8B  00A0               	movwf	?___wmul^(0+128)
  3517  0A8C  082C               	movf	(??_SendCmdReply+3)^(0+128),w
  3518  0A8D  00A1               	movwf	(?___wmul+1)^(0+128)
  3519  0A8E  300F               	movlw	15
  3520  0A8F  00A2               	movwf	(?___wmul^(0+128)+2)
  3521  0A90  3000               	movlw	0
  3522  0A91  00A3               	movwf	(?___wmul^(0+128)+3)
  3523  0A92  3191  2187  318A   	fcall	___wmul
  3524  0A95  0021               	movlb	1	; select bank1
  3525  0A96  0829               	movf	??_SendCmdReply^(0+128),w
  3526  0A97  0720               	addwf	?___wmul^(0+128),w
  3527  0A98  00AD               	movwf	(??_SendCmdReply+4)^(0+128)
  3528  0A99  082A               	movf	(??_SendCmdReply+1)^(0+128),w
  3529  0A9A  3D21               	addwfc	(?___wmul+1)^(0+128),w
  3530  0A9B  00AE               	movwf	(??_SendCmdReply+5)^(0+128)
  3531  0A9C  082D               	movf	(??_SendCmdReply+4)^(0+128),w
  3532  0A9D  3E02               	addlw	2
  3533  0A9E  00AF               	movwf	(??_SendCmdReply+6)^(0+128)
  3534  0A9F  3000               	movlw	0
  3535  0AA0  3D2E               	addwfc	(??_SendCmdReply+5)^(0+128),w
  3536  0AA1  00B0               	movwf	(??_SendCmdReply+7)^(0+128)
  3537  0AA2  0830               	movf	(??_SendCmdReply+7)^(0+128),w
  3538  0AA3  3A80               	xorlw	128
  3539  0AA4  00FF               	movwf	127
  3540  0AA5  3080               	movlw	128
  3541  0AA6  027F               	subwf	127,w
  3542  0AA7  1D03               	skipz
  3543  0AA8  2AAB               	goto	u6545
  3544  0AA9  3040               	movlw	64
  3545  0AAA  022F               	subwf	(??_SendCmdReply+6)^(0+128),w
  3546  0AAB                     u6545:	
  3547  0AAB  1803               	skipnc
  3548  0AAC  0008               	return
  3549                           
  3550                           ;main.c: 210: INPacket[WQI*15] = cmd[0];
  3551  0AAD  0021               	movlb	1	; select bank1
  3552  0AAE  0824               	movf	SendCmdReply@cmd^(0+128),w
  3553  0AAF  0086               	movwf	6
  3554  0AB0  0825               	movf	(SendCmdReply@cmd+1)^(0+128),w
  3555  0AB1  0087               	movwf	7
  3556  0AB2  0801               	movf	1,w
  3557  0AB3  00A9               	movwf	??_SendCmdReply^(0+128)
  3558  0AB4  300F               	movlw	15
  3559  0AB5  00AA               	movwf	(??_SendCmdReply+1)^(0+128)
  3560  0AB6  082A               	movf	(??_SendCmdReply+1)^(0+128),w
  3561  0AB7  0020               	movlb	0	; select bank0
  3562  0AB8  00DE               	movwf	?___bmul
  3563  0AB9  0021               	movlb	1	; select bank1
  3564  0ABA  086D               	movf	_WQI^(0+128),w
  3565  0ABB  3190  201F  318A   	fcall	___bmul
  3566  0ABE  3E20               	addlw	32
  3567  0ABF  0086               	movwf	6
  3568  0AC0  3002               	movlw	2	; select bank4/5
  3569  0AC1  0087               	movwf	7
  3570  0AC2  0021               	movlb	1	; select bank1
  3571  0AC3  0829               	movf	??_SendCmdReply^(0+128),w
  3572  0AC4  0081               	movwf	1
  3573                           
  3574                           ;main.c: 211: INPacket[WQI*15 + 1] = SlaveAddress;
  3575  0AC5  0858               	movf	_SlaveAddress^(0+128),w
  3576  0AC6  00A9               	movwf	??_SendCmdReply^(0+128)
  3577  0AC7  300F               	movlw	15
  3578  0AC8  00AA               	movwf	(??_SendCmdReply+1)^(0+128)
  3579  0AC9  082A               	movf	(??_SendCmdReply+1)^(0+128),w
  3580  0ACA  0020               	movlb	0	; select bank0
  3581  0ACB  00DE               	movwf	?___bmul
  3582  0ACC  0021               	movlb	1	; select bank1
  3583  0ACD  086D               	movf	_WQI^(0+128),w
  3584  0ACE  3190  201F  318A   	fcall	___bmul
  3585  0AD1  0021               	movlb	1	; select bank1
  3586  0AD2  00AB               	movwf	(??_SendCmdReply+2)^(0+128)
  3587  0AD3  0A2B               	incf	(??_SendCmdReply+2)^(0+128),w
  3588  0AD4  3E20               	addlw	32
  3589  0AD5  0086               	movwf	6
  3590  0AD6  3002               	movlw	2	; select bank4/5
  3591  0AD7  0087               	movwf	7
  3592  0AD8  0829               	movf	??_SendCmdReply^(0+128),w
  3593  0AD9  0081               	movwf	1
  3594                           
  3595                           ;main.c: 212: for(BYTE n = 0; n < count; n++)
  3596  0ADA  01B1               	clrf	SendCmdReply@n^(0+128)
  3597  0ADB                     l6399:	
  3598  0ADB  0828               	movf	SendCmdReply@count^(0+128),w
  3599  0ADC  0231               	subwf	SendCmdReply@n^(0+128),w
  3600  0ADD  1803               	btfsc	3,0
  3601  0ADE  2B09               	goto	l6401
  3602                           
  3603                           ;main.c: 213: INPacket[WQI*15 + n + 2] = data[n];
  3604  0ADF  0827               	movf	(SendCmdReply@data+1)^(0+128),w
  3605  0AE0  00AA               	movwf	(??_SendCmdReply^(0+128)+1)
  3606  0AE1  0826               	movf	SendCmdReply@data^(0+128),w
  3607  0AE2  00A9               	movwf	??_SendCmdReply^(0+128)
  3608  0AE3  0831               	movf	SendCmdReply@n^(0+128),w
  3609  0AE4  0729               	addwf	??_SendCmdReply^(0+128),w
  3610  0AE5  0084               	movwf	4
  3611  0AE6  082A               	movf	(??_SendCmdReply^(0+128)+1),w
  3612  0AE7  1803               	skipnc
  3613  0AE8  0A2A               	incf	(??_SendCmdReply^(0+128)+1),w
  3614  0AE9  0085               	movwf	5
  3615  0AEA  0800               	movf	0,w	;code access
  3616  0AEB  00AB               	movwf	(??_SendCmdReply+2)^(0+128)
  3617  0AEC  086D               	movf	_WQI^(0+128),w
  3618  0AED  00AC               	movwf	(??_SendCmdReply+3)^(0+128)
  3619  0AEE  01AD               	clrf	((??_SendCmdReply+3)^(0+128)+1)
  3620  0AEF  082C               	movf	(??_SendCmdReply+3)^(0+128),w
  3621  0AF0  00A0               	movwf	?___wmul^(0+128)
  3622  0AF1  082D               	movf	(??_SendCmdReply+4)^(0+128),w
  3623  0AF2  00A1               	movwf	(?___wmul+1)^(0+128)
  3624  0AF3  300F               	movlw	15
  3625  0AF4  00A2               	movwf	(?___wmul^(0+128)+2)
  3626  0AF5  3000               	movlw	0
  3627  0AF6  00A3               	movwf	(?___wmul^(0+128)+3)
  3628  0AF7  3191  2187  318A   	fcall	___wmul
  3629  0AFA  0021               	movlb	1	; select bank1
  3630  0AFB  0820               	movf	?___wmul^(0+128),w
  3631  0AFC  0731               	addwf	SendCmdReply@n^(0+128),w
  3632  0AFD  3E02               	addlw	2
  3633  0AFE  3E20               	addlw	32
  3634  0AFF  0086               	movwf	6
  3635  0B00  3002               	movlw	2	; select bank4/5
  3636  0B01  0087               	movwf	7
  3637  0B02  082B               	movf	(??_SendCmdReply+2)^(0+128),w
  3638  0B03  0081               	movwf	1
  3639  0B04  3001               	movlw	1
  3640  0B05  00A9               	movwf	??_SendCmdReply^(0+128)
  3641  0B06  0829               	movf	??_SendCmdReply^(0+128),w
  3642  0B07  07B1               	addwf	SendCmdReply@n^(0+128),f
  3643  0B08  2ADB               	goto	l6399
  3644  0B09                     l6401:	
  3645                           
  3646                           ;main.c: 214: WQI = (WQI+1) & 3;
  3647  0B09  0A6D               	incf	_WQI^(0+128),w
  3648  0B0A  3903               	andlw	3
  3649  0B0B  00A9               	movwf	??_SendCmdReply^(0+128)
  3650  0B0C  0829               	movf	??_SendCmdReply^(0+128),w
  3651  0B0D  00ED               	movwf	_WQI^(0+128)
  3652  0B0E  0008               	return
  3653  0B0F                     __end_of_SendCmdReply:	
  3654                           
  3655                           	psect	text5
  3656  101F                     __ptext5:	
  3657 ;; *************** function ___bmul *****************
  3658 ;; Defined at:
  3659 ;;		line 3 in file "C:\Program Files (x86)\Microchip\xc8\v1.20\sources\pic\bmul.c"
  3660 ;; Parameters:    Size  Location     Type
  3661 ;;  multiplier      1    wreg     unsigned char 
  3662 ;;  multiplicand    1   14[BANK0 ] unsigned char 
  3663 ;; Auto vars:     Size  Location     Type
  3664 ;;  multiplier      1   17[BANK0 ] unsigned char 
  3665 ;;  product         1   16[BANK0 ] unsigned char 
  3666 ;; Return value:  Size  Location     Type
  3667 ;;                  1    wreg      unsigned char 
  3668 ;; Registers used:
  3669 ;;		wreg, status,2, status,0
  3670 ;; Tracked objects:
  3671 ;;		On entry : 0/0
  3672 ;;		On exit  : 0/0
  3673 ;;		Unchanged: 0/0
  3674 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3675 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3676 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3677 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3678 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3679 ;;Total ram usage:        4 bytes
  3680 ;; Hardware stack levels used:    1
  3681 ;; Hardware stack levels required when called:    4
  3682 ;; This function calls:
  3683 ;;		Nothing
  3684 ;; This function is called by:
  3685 ;;		_ResultRx
  3686 ;;		_ProcessIO
  3687 ;;		_SendCmdReply
  3688 ;;		i1_SendCmdReply
  3689 ;; This function uses a non-reentrant model
  3690 ;;
  3691                           
  3692                           
  3693                           ;psect for function ___bmul
  3694  101F                     ___bmul:	
  3695                           
  3696                           ;incstack = 0
  3697                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  3698                           ;___bmul@multiplier stored from wreg
  3699  101F  0020               	movlb	0	; select bank0
  3700  1020  00E1               	movwf	___bmul@multiplier
  3701  1021  01E0               	clrf	___bmul@product
  3702  1022                     l6579:	
  3703  1022  1C61               	btfss	___bmul@multiplier,0
  3704  1023  2828               	goto	l6583
  3705  1024  085E               	movf	___bmul@multiplicand,w
  3706  1025  00DF               	movwf	??___bmul
  3707  1026  085F               	movf	??___bmul,w
  3708  1027  07E0               	addwf	___bmul@product,f
  3709  1028                     l6583:	
  3710  1028  1003               	clrc
  3711  1029  0DDE               	rlf	___bmul@multiplicand,f
  3712  102A  1003               	clrc
  3713  102B  0CE1               	rrf	___bmul@multiplier,f
  3714  102C  08E1               	movf	___bmul@multiplier,f
  3715  102D  1D03               	skipz
  3716  102E  2822               	goto	l6579
  3717  102F  0860               	movf	___bmul@product,w
  3718  1030  0008               	return
  3719  1031                     __end_of___bmul:	
  3720                           
  3721                           	psect	text6
  3722  15B7                     __ptext6:	
  3723 ;; *************** function _AsicPushWork *****************
  3724 ;; Defined at:
  3725 ;;		line 108 in file "klondike.c"
  3726 ;; Parameters:    Size  Location     Type
  3727 ;;		None
  3728 ;; Auto vars:     Size  Location     Type
  3729 ;;		None
  3730 ;; Return value:  Size  Location     Type
  3731 ;;		None               void
  3732 ;; Registers used:
  3733 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  3734 ;; Tracked objects:
  3735 ;;		On entry : 0/0
  3736 ;;		On exit  : 0/0
  3737 ;;		Unchanged: 0/0
  3738 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3739 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3740 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3741 ;;      Temps:          0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
  3742 ;;      Totals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
  3743 ;;Total ram usage:        5 bytes
  3744 ;; Hardware stack levels used:    1
  3745 ;; Hardware stack levels required when called:    6
  3746 ;; This function calls:
  3747 ;;		_SendAsicData
  3748 ;;		_AsicPreCalc
  3749 ;;		___wmul
  3750 ;; This function is called by:
  3751 ;;		_ProcessCmd
  3752 ;;		_main
  3753 ;; This function uses a non-reentrant model
  3754 ;;
  3755                           
  3756                           
  3757                           ;psect for function _AsicPushWork
  3758  15B7                     _AsicPushWork:	
  3759                           
  3760                           ;klondike.c: 109: AsicPreCalc(&WorkQue[WorkNow]);
  3761                           
  3762                           ;incstack = 0
  3763                           ; Regs used in _AsicPushWork: [wreg-fsr1h+status,2+status,0+btemp+1+pclath+cstack]
  3764  15B7  0021               	movlb	1	; select bank1
  3765  15B8  0862               	movf	_WorkNow^(0+128),w
  3766  15B9  00B9               	movwf	??_AsicPushWork^(0+128)
  3767  15BA  01BA               	clrf	(??_AsicPushWork^(0+128)+1)
  3768  15BB  0839               	movf	??_AsicPushWork^(0+128),w
  3769  15BC  00A0               	movwf	?___wmul^(0+128)
  3770  15BD  083A               	movf	(??_AsicPushWork+1)^(0+128),w
  3771  15BE  00A1               	movwf	(?___wmul+1)^(0+128)
  3772  15BF  302D               	movlw	45
  3773  15C0  00A2               	movwf	(?___wmul^(0+128)+2)
  3774  15C1  3000               	movlw	0
  3775  15C2  00A3               	movwf	(?___wmul^(0+128)+3)
  3776  15C3  3191  2187  3195   	fcall	___wmul
  3777  15C6  303C               	movlw	60
  3778  15C7  0021               	movlb	1	; select bank1
  3779  15C8  00BB               	movwf	(??_AsicPushWork+2)^(0+128)
  3780  15C9  3023               	movlw	35
  3781  15CA  00BC               	movwf	((??_AsicPushWork+2)^(0+128)+1)
  3782  15CB  0820               	movf	?___wmul^(0+128),w
  3783  15CC  073B               	addwf	(??_AsicPushWork+2)^(0+128),w
  3784  15CD  00AD               	movwf	?_AsicPreCalc^(0+128)
  3785  15CE  0821               	movf	(?___wmul+1)^(0+128),w
  3786  15CF  3D3C               	addwfc	(??_AsicPushWork+3)^(0+128),w
  3787  15D0  00AE               	movwf	(?_AsicPreCalc+1)^(0+128)
  3788  15D1  3180  2014  3195   	fcall	_AsicPreCalc
  3789                           
  3790                           ;klondike.c: 110: Status.WorkID = WorkQue[WorkNow].WorkID;
  3791  15D4  0021               	movlb	1	; select bank1
  3792  15D5  0862               	movf	_WorkNow^(0+128),w
  3793  15D6  00B9               	movwf	??_AsicPushWork^(0+128)
  3794  15D7  01BA               	clrf	(??_AsicPushWork^(0+128)+1)
  3795  15D8  0839               	movf	??_AsicPushWork^(0+128),w
  3796  15D9  00A0               	movwf	?___wmul^(0+128)
  3797  15DA  083A               	movf	(??_AsicPushWork+1)^(0+128),w
  3798  15DB  00A1               	movwf	(?___wmul+1)^(0+128)
  3799  15DC  302D               	movlw	45
  3800  15DD  00A2               	movwf	(?___wmul^(0+128)+2)
  3801  15DE  3000               	movlw	0
  3802  15DF  00A3               	movwf	(?___wmul^(0+128)+3)
  3803  15E0  3191  2187  3195   	fcall	___wmul
  3804  15E3  303C               	movlw	60
  3805  15E4  0021               	movlb	1	; select bank1
  3806  15E5  00BB               	movwf	(??_AsicPushWork+2)^(0+128)
  3807  15E6  3023               	movlw	35
  3808  15E7  00BC               	movwf	((??_AsicPushWork+2)^(0+128)+1)
  3809  15E8  0820               	movf	?___wmul^(0+128),w
  3810  15E9  073B               	addwf	(??_AsicPushWork+2)^(0+128),w
  3811  15EA  0086               	movwf	6
  3812  15EB  0821               	movf	(?___wmul+1)^(0+128),w
  3813  15EC  3D3C               	addwfc	(??_AsicPushWork+3)^(0+128),w
  3814  15ED  0087               	movwf	7
  3815  15EE  0801               	movf	1,w
  3816  15EF  00BD               	movwf	(??_AsicPushWork+4)^(0+128)
  3817  15F0  083D               	movf	(??_AsicPushWork+4)^(0+128),w
  3818  15F1  0022               	movlb	2	; select bank2
  3819  15F2  00DD               	movwf	(_Status^(0+256)+4)	;volatile
  3820                           
  3821                           ;klondike.c: 111: SendAsicData(&WorkQue[WorkNow]);
  3822  15F3  0021               	movlb	1	; select bank1
  3823  15F4  0862               	movf	_WorkNow^(0+128),w
  3824  15F5  00B9               	movwf	??_AsicPushWork^(0+128)
  3825  15F6  01BA               	clrf	(??_AsicPushWork^(0+128)+1)
  3826  15F7  0839               	movf	??_AsicPushWork^(0+128),w
  3827  15F8  00A0               	movwf	?___wmul^(0+128)
  3828  15F9  083A               	movf	(??_AsicPushWork+1)^(0+128),w
  3829  15FA  00A1               	movwf	(?___wmul+1)^(0+128)
  3830  15FB  302D               	movlw	45
  3831  15FC  00A2               	movwf	(?___wmul^(0+128)+2)
  3832  15FD  3000               	movlw	0
  3833  15FE  00A3               	movwf	(?___wmul^(0+128)+3)
  3834  15FF  3191  2187  3195   	fcall	___wmul
  3835  1602  303C               	movlw	60
  3836  1603  0021               	movlb	1	; select bank1
  3837  1604  00BB               	movwf	(??_AsicPushWork+2)^(0+128)
  3838  1605  3023               	movlw	35
  3839  1606  00BC               	movwf	((??_AsicPushWork+2)^(0+128)+1)
  3840  1607  0820               	movf	?___wmul^(0+128),w
  3841  1608  073B               	addwf	(??_AsicPushWork+2)^(0+128),w
  3842  1609  00A4               	movwf	?_SendAsicData^(0+128)
  3843  160A  0821               	movf	(?___wmul+1)^(0+128),w
  3844  160B  3D3C               	addwfc	(??_AsicPushWork+3)^(0+128),w
  3845  160C  00A5               	movwf	(?_SendAsicData+1)^(0+128)
  3846  160D  3187  2758         	fcall	_SendAsicData
  3847                           
  3848                           ;klondike.c: 112: WorkNow = (WorkNow+1) & 4-1;
  3849  160F  0021               	movlb	1	; select bank1
  3850  1610  0A62               	incf	_WorkNow^(0+128),w
  3851  1611  3903               	andlw	3
  3852  1612  00B9               	movwf	??_AsicPushWork^(0+128)
  3853  1613  0839               	movf	??_AsicPushWork^(0+128),w
  3854  1614  00E2               	movwf	_WorkNow^(0+128)
  3855                           
  3856                           ;klondike.c: 113: Status.HashCount = 0;
  3857  1615  0022               	movlb	2	; select bank2
  3858  1616  01E1               	clrf	(_Status^(0+256)+8)	;volatile
  3859  1617  01E2               	clrf	((_Status+1)^(0+256)+8)	;volatile
  3860                           
  3861                           ;klondike.c: 114: TMR0 = HashTime;
  3862  1618  0021               	movlb	1	; select bank1
  3863  1619  086F               	movf	_HashTime^(0+128),w
  3864  161A  0020               	movlb	0	; select bank0
  3865  161B  0095               	movwf	21	;volatile
  3866                           
  3867                           ;klondike.c: 115: Status.State = 'W';
  3868  161C  3057               	movlw	87
  3869  161D  0021               	movlb	1	; select bank1
  3870  161E  00B9               	movwf	??_AsicPushWork^(0+128)
  3871  161F  0839               	movf	??_AsicPushWork^(0+128),w
  3872  1620  0022               	movlb	2	; select bank2
  3873  1621  00D9               	movwf	_Status^(0+256)	;volatile
  3874                           
  3875                           ;klondike.c: 116: Status.WorkQC--;
  3876  1622  3001               	movlw	1
  3877  1623  02DC               	subwf	(_Status^(0+256)+3),f	;volatile
  3878  1624  0008               	return
  3879  1625                     __end_of_AsicPushWork:	
  3880                           
  3881                           	psect	text7
  3882  1187                     __ptext7:	
  3883 ;; *************** function ___wmul *****************
  3884 ;; Defined at:
  3885 ;;		line 3 in file "C:\Program Files (x86)\Microchip\xc8\v1.20\sources\pic\wmul.c"
  3886 ;; Parameters:    Size  Location     Type
  3887 ;;  multiplier      2    0[BANK1 ] unsigned int 
  3888 ;;  multiplicand    2    2[BANK1 ] unsigned int 
  3889 ;; Auto vars:     Size  Location     Type
  3890 ;;  product         2   14[BANK0 ] unsigned int 
  3891 ;; Return value:  Size  Location     Type
  3892 ;;                  2    0[BANK1 ] unsigned int 
  3893 ;; Registers used:
  3894 ;;		wreg, status,2, status,0
  3895 ;; Tracked objects:
  3896 ;;		On entry : 0/0
  3897 ;;		On exit  : 0/0
  3898 ;;		Unchanged: 0/0
  3899 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3900 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  3901 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3902 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3903 ;;      Totals:         0       2       4       0       0       0       0       0       0       0       0       0       
      +0       0
  3904 ;;Total ram usage:        6 bytes
  3905 ;; Hardware stack levels used:    1
  3906 ;; Hardware stack levels required when called:    4
  3907 ;; This function calls:
  3908 ;;		Nothing
  3909 ;; This function is called by:
  3910 ;;		_ProcessCmd
  3911 ;;		_AsicPushWork
  3912 ;;		_SendCmdReply
  3913 ;; This function uses a non-reentrant model
  3914 ;;
  3915                           
  3916                           
  3917                           ;psect for function ___wmul
  3918  1187                     ___wmul:	
  3919                           
  3920                           ;incstack = 0
  3921                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  3922  1187  0020               	movlb	0	; select bank0
  3923  1188  01DE               	clrf	___wmul@product
  3924  1189  01DF               	clrf	___wmul@product+1
  3925  118A                     l6621:	
  3926  118A  0021               	movlb	1	; select bank1
  3927  118B  1C20               	btfss	___wmul@multiplier^(0+128),0
  3928  118C  2994               	goto	l1273
  3929  118D  0822               	movf	___wmul@multiplicand^(0+128),w
  3930  118E  0020               	movlb	0	; select bank0
  3931  118F  07DE               	addwf	___wmul@product,f
  3932  1190  0021               	movlb	1	; select bank1
  3933  1191  0823               	movf	(___wmul@multiplicand+1)^(0+128),w
  3934  1192  0020               	movlb	0	; select bank0
  3935  1193  3DDF               	addwfc	___wmul@product+1,f
  3936  1194                     l1273:	
  3937  1194  3001               	movlw	1
  3938  1195  0021               	movlb	1	; select bank1
  3939  1196                     u6975:	
  3940  1196  35A2               	lslf	___wmul@multiplicand^(0+128),f
  3941  1197  0DA3               	rlf	(___wmul@multiplicand+1)^(0+128),f
  3942  1198  0B89               	decfsz	9,f
  3943  1199  2996               	goto	u6975
  3944  119A  3001               	movlw	1
  3945  119B                     u6985:	
  3946  119B  36A1               	lsrf	(___wmul@multiplier+1)^(0+128),f
  3947  119C  0CA0               	rrf	___wmul@multiplier^(0+128),f
  3948  119D  0B89               	decfsz	9,f
  3949  119E  299B               	goto	u6985
  3950  119F  0821               	movf	(___wmul@multiplier+1)^(0+128),w
  3951  11A0  0420               	iorwf	___wmul@multiplier^(0+128),w
  3952  11A1  1D03               	skipz
  3953  11A2  298A               	goto	l6621
  3954  11A3  0020               	movlb	0	; select bank0
  3955  11A4  085F               	movf	___wmul@product+1,w
  3956  11A5  0021               	movlb	1	; select bank1
  3957  11A6  01A1               	clrf	(?___wmul+1)^(0+128)
  3958  11A7  07A1               	addwf	(?___wmul+1)^(0+128),f
  3959  11A8  0020               	movlb	0	; select bank0
  3960  11A9  085E               	movf	___wmul@product,w
  3961  11AA  0021               	movlb	1	; select bank1
  3962  11AB  01A0               	clrf	?___wmul^(0+128)
  3963  11AC  07A0               	addwf	?___wmul^(0+128),f
  3964  11AD  0008               	return
  3965  11AE                     __end_of___wmul:	
  3966                           
  3967                           	psect	text8
  3968  0014                     __ptext8:	
  3969 ;; *************** function _AsicPreCalc *****************
  3970 ;; Defined at:
  3971 ;;		line 318 in file "asic.c"
  3972 ;; Parameters:    Size  Location     Type
  3973 ;;  work            2   13[BANK1 ] PTR struct _worktask
  3974 ;;		 -> WorkQue(180), 
  3975 ;; Auto vars:     Size  Location     Type
  3976 ;;  m              32   12[BANK2 ] unsigned long [8]
  3977 ;;  K              12    0[BANK2 ] unsigned long [3]
  3978 ;;  x               4   52[BANK2 ] unsigned long 
  3979 ;;  y               4   48[BANK2 ] unsigned long 
  3980 ;;  z               4   44[BANK2 ] unsigned long 
  3981 ;;  n               1   56[BANK2 ] unsigned char 
  3982 ;; Return value:  Size  Location     Type
  3983 ;;		None               void
  3984 ;; Registers used:
  3985 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  3986 ;; Tracked objects:
  3987 ;;		On entry : 0/0
  3988 ;;		On exit  : 0/0
  3989 ;;		Unchanged: 0/0
  3990 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3991 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  3992 ;;      Locals:         0       0       0      57       0       0       0       0       0       0       0       0       
      +0       0
  3993 ;;      Temps:          0       0      10       0       0       0       0       0       0       0       0       0       
      +0       0
  3994 ;;      Totals:         0       0      12      57       0       0       0       0       0       0       0       0       
      +0       0
  3995 ;;Total ram usage:       69 bytes
  3996 ;; Hardware stack levels used:    1
  3997 ;; Hardware stack levels required when called:    5
  3998 ;; This function calls:
  3999 ;;		_rotate
  4000 ;; This function is called by:
  4001 ;;		_AsicPushWork
  4002 ;; This function uses a non-reentrant model
  4003 ;;
  4004                           
  4005                           
  4006                           ;psect for function _AsicPreCalc
  4007  0014                     _AsicPreCalc:	
  4008                           
  4009                           ;asic.c: 319: DWORD K[3] = { 0x428a2f98, 0x71374491, 0xb5c0fbcf };
  4010                           
  4011                           ;incstack = 0
  4012                           ; Regs used in _AsicPreCalc: [wreg-fsr1h+status,2+status,0+btemp+1+pclath+cstack]
  4013  0014  30CA               	movlw	low AsicPreCalc@F3345
  4014  0015  0086               	movwf	6
  4015  0016  3001               	movlw	high AsicPreCalc@F3345
  4016  0017  0087               	movwf	7
  4017  0018  3020               	movlw	low AsicPreCalc@K
  4018  0019  0084               	movwf	4
  4019  001A  3001               	movlw	high AsicPreCalc@K
  4020  001B  0085               	movwf	5
  4021  001C  300C               	movlw	12
  4022  001D  00FF               	movwf	127
  4023  001E                     u3960:	
  4024  001E  0016               	moviw fsr1++
  4025  001F  001A               	movwi fsr0++
  4026  0020  0BFF               	decfsz	127,f
  4027  0021  281E               	goto	u3960
  4028                           
  4029                           ;asic.c: 320: DWORD x, y, z;
  4030                           ;asic.c: 321: DWORD m[8];
  4031                           ;asic.c: 322: BYTE n;
  4032                           ;asic.c: 324: for(n = 0; n < 8; n++)
  4033  0022  0022               	movlb	2	; select bank2
  4034  0023  01D8               	clrf	AsicPreCalc@n^(0+256)
  4035  0024  3008               	movlw	8
  4036  0025  0258               	subwf	AsicPreCalc@n^(0+256),w
  4037  0026  1803               	btfsc	3,0
  4038  0027  2863               	goto	l4541
  4039  0028                     l4535:	
  4040                           
  4041                           ;asic.c: 325: m[n] = work->MidState[n];
  4042  0028  0858               	movf	AsicPreCalc@n^(0+256),w
  4043  0029  0021               	movlb	1	; select bank1
  4044  002A  00AF               	movwf	??_AsicPreCalc^(0+128)
  4045  002B  01B0               	clrf	(??_AsicPreCalc^(0+128)+1)
  4046  002C  35AF               	lslf	??_AsicPreCalc^(0+128),f
  4047  002D  0DB0               	rlf	(??_AsicPreCalc^(0+128)+1),f
  4048  002E  35AF               	lslf	??_AsicPreCalc^(0+128),f
  4049  002F  0DB0               	rlf	(??_AsicPreCalc^(0+128)+1),f
  4050  0030  082F               	movf	??_AsicPreCalc^(0+128),w
  4051  0031  3E01               	addlw	1
  4052  0032  00B1               	movwf	(??_AsicPreCalc+2)^(0+128)
  4053  0033  3000               	movlw	0
  4054  0034  3D30               	addwfc	(??_AsicPreCalc+1)^(0+128),w
  4055  0035  00B2               	movwf	(??_AsicPreCalc+3)^(0+128)
  4056  0036  0831               	movf	(??_AsicPreCalc+2)^(0+128),w
  4057  0037  072D               	addwf	AsicPreCalc@work^(0+128),w
  4058  0038  0086               	movwf	6
  4059  0039  0832               	movf	(??_AsicPreCalc+3)^(0+128),w
  4060  003A  3D2E               	addwfc	(AsicPreCalc@work+1)^(0+128),w
  4061  003B  0087               	movwf	7
  4062  003C  3F40               	moviw [0]fsr1
  4063  003D  00B3               	movwf	(??_AsicPreCalc+4)^(0+128)
  4064  003E  3F41               	moviw [1]fsr1
  4065  003F  00B4               	movwf	((??_AsicPreCalc+4)^(0+128)+1)
  4066  0040  3F42               	moviw [2]fsr1
  4067  0041  00B5               	movwf	((??_AsicPreCalc+4)^(0+128)+2)
  4068  0042  3F43               	moviw [3]fsr1
  4069  0043  00B6               	movwf	((??_AsicPreCalc+4)^(0+128)+3)
  4070  0044  0022               	movlb	2	; select bank2
  4071  0045  0858               	movf	AsicPreCalc@n^(0+256),w
  4072  0046  0021               	movlb	1	; select bank1
  4073  0047  00B7               	movwf	(??_AsicPreCalc+8)^(0+128)
  4074  0048  3001               	movlw	1
  4075  0049                     u3985:	
  4076  0049  35B7               	lslf	(??_AsicPreCalc+8)^(0+128),f
  4077  004A  3EFF               	addlw	-1
  4078  004B  1D03               	skipz
  4079  004C  2849               	goto	u3985
  4080  004D  3537               	lslf	(??_AsicPreCalc+8)^(0+128),w
  4081  004E  3E2C               	addlw	AsicPreCalc@m& (0+255)
  4082  004F  0086               	movwf	6
  4083  0050  3001               	movlw	1	; select bank2/3
  4084  0051  0087               	movwf	7
  4085  0052  0833               	movf	(??_AsicPreCalc+4)^(0+128),w
  4086  0053  3FC0               	movwi [0]fsr1
  4087  0054  0834               	movf	(??_AsicPreCalc+5)^(0+128),w
  4088  0055  3FC1               	movwi [1]fsr1
  4089  0056  0835               	movf	(??_AsicPreCalc+6)^(0+128),w
  4090  0057  3FC2               	movwi [2]fsr1
  4091  0058  0836               	movf	(??_AsicPreCalc+7)^(0+128),w
  4092  0059  3FC3               	movwi [3]fsr1
  4093  005A  3001               	movlw	1
  4094  005B  00AF               	movwf	??_AsicPreCalc^(0+128)
  4095  005C  082F               	movf	??_AsicPreCalc^(0+128),w
  4096  005D  0022               	movlb	2	; select bank2
  4097  005E  07D8               	addwf	AsicPreCalc@n^(0+256),f
  4098  005F  3008               	movlw	8
  4099  0060  0258               	subwf	AsicPreCalc@n^(0+256),w
  4100  0061  1C03               	skipc
  4101  0062  2828               	goto	l4535
  4102  0063                     l4541:	
  4103                           
  4104                           ;asic.c: 327: for(n = 0; n < 3; n++) {
  4105  0063  01D8               	clrf	AsicPreCalc@n^(0+256)
  4106  0064                     L5:	
  4107  0064  3003               	movlw	3
  4108  0065  0258               	subwf	AsicPreCalc@n^(0+256),w
  4109  0066  1803               	btfsc	3,0
  4110  0067  0008               	return
  4111                           
  4112                           ;asic.c: 329: x = m[5-n] ^ m[6-n];
  4113  0068  0358               	decf	AsicPreCalc@n^(0+256),w
  4114  0069  3AFF               	xorlw	255
  4115  006A  0021               	movlb	1	; select bank1
  4116  006B  00AF               	movwf	??_AsicPreCalc^(0+128)
  4117  006C  3001               	movlw	1
  4118  006D                     u4015:	
  4119  006D  35AF               	lslf	??_AsicPreCalc^(0+128),f
  4120  006E  3EFF               	addlw	-1
  4121  006F  1D03               	skipz
  4122  0070  286D               	goto	u4015
  4123  0071  352F               	lslf	??_AsicPreCalc^(0+128),w
  4124  0072  3E18               	addlw	24
  4125  0073  3E2C               	addlw	AsicPreCalc@m& (0+255)
  4126  0074  0086               	movwf	6
  4127  0075  3001               	movlw	1	; select bank2/3
  4128  0076  0087               	movwf	7
  4129  0077  3F40               	moviw [0]fsr1
  4130  0078  00B0               	movwf	(??_AsicPreCalc+1)^(0+128)
  4131  0079  3F41               	moviw [1]fsr1
  4132  007A  00B1               	movwf	((??_AsicPreCalc+1)^(0+128)+1)
  4133  007B  3F42               	moviw [2]fsr1
  4134  007C  00B2               	movwf	((??_AsicPreCalc+1)^(0+128)+2)
  4135  007D  3F43               	moviw [3]fsr1
  4136  007E  00B3               	movwf	((??_AsicPreCalc+1)^(0+128)+3)
  4137  007F  0022               	movlb	2	; select bank2
  4138  0080  0358               	decf	AsicPreCalc@n^(0+256),w
  4139  0081  3AFF               	xorlw	255
  4140  0082  0021               	movlb	1	; select bank1
  4141  0083  00B4               	movwf	(??_AsicPreCalc+5)^(0+128)
  4142  0084  3001               	movlw	1
  4143  0085                     u4025:	
  4144  0085  35B4               	lslf	(??_AsicPreCalc+5)^(0+128),f
  4145  0086  3EFF               	addlw	-1
  4146  0087  1D03               	skipz
  4147  0088  2885               	goto	u4025
  4148  0089  3534               	lslf	(??_AsicPreCalc+5)^(0+128),w
  4149  008A  3E14               	addlw	20
  4150  008B  3E2C               	addlw	AsicPreCalc@m& (0+255)
  4151  008C  0086               	movwf	6
  4152  008D  3001               	movlw	1	; select bank2/3
  4153  008E  0087               	movwf	7
  4154  008F  3F40               	moviw [0]fsr1
  4155  0090  00B5               	movwf	(??_AsicPreCalc+6)^(0+128)
  4156  0091  3F41               	moviw [1]fsr1
  4157  0092  00B6               	movwf	((??_AsicPreCalc+6)^(0+128)+1)
  4158  0093  3F42               	moviw [2]fsr1
  4159  0094  00B7               	movwf	((??_AsicPreCalc+6)^(0+128)+2)
  4160  0095  3F43               	moviw [3]fsr1
  4161  0096  00B8               	movwf	((??_AsicPreCalc+6)^(0+128)+3)
  4162  0097  0830               	movf	(??_AsicPreCalc+1)^(0+128),w
  4163  0098  0635               	xorwf	(??_AsicPreCalc+6)^(0+128),w
  4164  0099  0022               	movlb	2	; select bank2
  4165  009A  00D4               	movwf	AsicPreCalc@x^(0+256)
  4166  009B  0021               	movlb	1	; select bank1
  4167  009C  0831               	movf	(??_AsicPreCalc+2)^(0+128),w
  4168  009D  0636               	xorwf	(??_AsicPreCalc+7)^(0+128),w
  4169  009E  0022               	movlb	2	; select bank2
  4170  009F  00D5               	movwf	(AsicPreCalc@x+1)^(0+256)
  4171  00A0  0021               	movlb	1	; select bank1
  4172  00A1  0832               	movf	(??_AsicPreCalc+3)^(0+128),w
  4173  00A2  0637               	xorwf	(??_AsicPreCalc+8)^(0+128),w
  4174  00A3  0022               	movlb	2	; select bank2
  4175  00A4  00D6               	movwf	(AsicPreCalc@x+2)^(0+256)
  4176  00A5  0021               	movlb	1	; select bank1
  4177  00A6  0833               	movf	(??_AsicPreCalc+4)^(0+128),w
  4178  00A7  0638               	xorwf	(??_AsicPreCalc+9)^(0+128),w
  4179  00A8  0022               	movlb	2	; select bank2
  4180  00A9  00D7               	movwf	(AsicPreCalc@x+3)^(0+256)
  4181                           
  4182                           ;asic.c: 330: x = x & m[4-n];
  4183  00AA  0358               	decf	AsicPreCalc@n^(0+256),w
  4184  00AB  3AFF               	xorlw	255
  4185  00AC  0021               	movlb	1	; select bank1
  4186  00AD  00AF               	movwf	??_AsicPreCalc^(0+128)
  4187  00AE  3001               	movlw	1
  4188  00AF                     u4035:	
  4189  00AF  35AF               	lslf	??_AsicPreCalc^(0+128),f
  4190  00B0  3EFF               	addlw	-1
  4191  00B1  1D03               	skipz
  4192  00B2  28AF               	goto	u4035
  4193  00B3  352F               	lslf	??_AsicPreCalc^(0+128),w
  4194  00B4  3E10               	addlw	16
  4195  00B5  3E2C               	addlw	AsicPreCalc@m& (0+255)
  4196  00B6  0086               	movwf	6
  4197  00B7  3001               	movlw	1	; select bank2/3
  4198  00B8  0087               	movwf	7
  4199  00B9  0022               	movlb	2	; select bank2
  4200  00BA  0854               	movf	AsicPreCalc@x^(0+256),w
  4201  00BB  0501               	andwf	1,w
  4202  00BC  0021               	movlb	1	; select bank1
  4203  00BD  00B0               	movwf	(??_AsicPreCalc+1)^(0+128)
  4204  00BE  3141               	addfsr 1,1
  4205  00BF  0022               	movlb	2	; select bank2
  4206  00C0  0855               	movf	(AsicPreCalc@x+1)^(0+256),w
  4207  00C1  0501               	andwf	1,w
  4208  00C2  0021               	movlb	1	; select bank1
  4209  00C3  00B1               	movwf	((??_AsicPreCalc+1)^(0+128)+1)
  4210  00C4  3141               	addfsr 1,1
  4211  00C5  0022               	movlb	2	; select bank2
  4212  00C6  0856               	movf	(AsicPreCalc@x+2)^(0+256),w
  4213  00C7  0501               	andwf	1,w
  4214  00C8  0021               	movlb	1	; select bank1
  4215  00C9  00B2               	movwf	((??_AsicPreCalc+1)^(0+128)+2)
  4216  00CA  3141               	addfsr 1,1
  4217  00CB  0022               	movlb	2	; select bank2
  4218  00CC  0857               	movf	(AsicPreCalc@x+3)^(0+256),w
  4219  00CD  0501               	andwf	1,w
  4220  00CE  0021               	movlb	1	; select bank1
  4221  00CF  00B3               	movwf	((??_AsicPreCalc+1)^(0+128)+3)
  4222  00D0  0833               	movf	(??_AsicPreCalc+4)^(0+128),w
  4223  00D1  0022               	movlb	2	; select bank2
  4224  00D2  00D7               	movwf	(AsicPreCalc@x+3)^(0+256)
  4225  00D3  0021               	movlb	1	; select bank1
  4226  00D4  0832               	movf	(??_AsicPreCalc+3)^(0+128),w
  4227  00D5  0022               	movlb	2	; select bank2
  4228  00D6  00D6               	movwf	(AsicPreCalc@x+2)^(0+256)
  4229  00D7  0021               	movlb	1	; select bank1
  4230  00D8  0831               	movf	(??_AsicPreCalc+2)^(0+128),w
  4231  00D9  0022               	movlb	2	; select bank2
  4232  00DA  00D5               	movwf	(AsicPreCalc@x+1)^(0+256)
  4233  00DB  0021               	movlb	1	; select bank1
  4234  00DC  0830               	movf	(??_AsicPreCalc+1)^(0+128),w
  4235  00DD  0022               	movlb	2	; select bank2
  4236  00DE  00D4               	movwf	AsicPreCalc@x^(0+256)
  4237                           
  4238                           ;asic.c: 331: x = m[6-n] ^ x;
  4239  00DF  0358               	decf	AsicPreCalc@n^(0+256),w
  4240  00E0  3AFF               	xorlw	255
  4241  00E1  0021               	movlb	1	; select bank1
  4242  00E2  00AF               	movwf	??_AsicPreCalc^(0+128)
  4243  00E3  3001               	movlw	1
  4244  00E4                     u4045:	
  4245  00E4  35AF               	lslf	??_AsicPreCalc^(0+128),f
  4246  00E5  3EFF               	addlw	-1
  4247  00E6  1D03               	skipz
  4248  00E7  28E4               	goto	u4045
  4249  00E8  352F               	lslf	??_AsicPreCalc^(0+128),w
  4250  00E9  3E18               	addlw	24
  4251  00EA  3E2C               	addlw	AsicPreCalc@m& (0+255)
  4252  00EB  0086               	movwf	6
  4253  00EC  3001               	movlw	1	; select bank2/3
  4254  00ED  0087               	movwf	7
  4255  00EE  0022               	movlb	2	; select bank2
  4256  00EF  0854               	movf	AsicPreCalc@x^(0+256),w
  4257  00F0  0601               	xorwf	1,w
  4258  00F1  0021               	movlb	1	; select bank1
  4259  00F2  00B0               	movwf	(??_AsicPreCalc+1)^(0+128)
  4260  00F3  3141               	addfsr 1,1
  4261  00F4  0022               	movlb	2	; select bank2
  4262  00F5  0855               	movf	(AsicPreCalc@x+1)^(0+256),w
  4263  00F6  0601               	xorwf	1,w
  4264  00F7  0021               	movlb	1	; select bank1
  4265  00F8  00B1               	movwf	((??_AsicPreCalc+1)^(0+128)+1)
  4266  00F9  3141               	addfsr 1,1
  4267  00FA  0022               	movlb	2	; select bank2
  4268  00FB  0856               	movf	(AsicPreCalc@x+2)^(0+256),w
  4269  00FC  0601               	xorwf	1,w
  4270  00FD  0021               	movlb	1	; select bank1
  4271  00FE  00B2               	movwf	((??_AsicPreCalc+1)^(0+128)+2)
  4272  00FF  3141               	addfsr 1,1
  4273  0100  0022               	movlb	2	; select bank2
  4274  0101  0857               	movf	(AsicPreCalc@x+3)^(0+256),w
  4275  0102  0601               	xorwf	1,w
  4276  0103  0021               	movlb	1	; select bank1
  4277  0104  00B3               	movwf	((??_AsicPreCalc+1)^(0+128)+3)
  4278  0105  0833               	movf	(??_AsicPreCalc+4)^(0+128),w
  4279  0106  0022               	movlb	2	; select bank2
  4280  0107  00D7               	movwf	(AsicPreCalc@x+3)^(0+256)
  4281  0108  0021               	movlb	1	; select bank1
  4282  0109  0832               	movf	(??_AsicPreCalc+3)^(0+128),w
  4283  010A  0022               	movlb	2	; select bank2
  4284  010B  00D6               	movwf	(AsicPreCalc@x+2)^(0+256)
  4285  010C  0021               	movlb	1	; select bank1
  4286  010D  0831               	movf	(??_AsicPreCalc+2)^(0+128),w
  4287  010E  0022               	movlb	2	; select bank2
  4288  010F  00D5               	movwf	(AsicPreCalc@x+1)^(0+256)
  4289  0110  0021               	movlb	1	; select bank1
  4290  0111  0830               	movf	(??_AsicPreCalc+1)^(0+128),w
  4291  0112  0022               	movlb	2	; select bank2
  4292  0113  00D4               	movwf	AsicPreCalc@x^(0+256)
  4293                           
  4294                           ;asic.c: 332: x += K[n];
  4295  0114  0858               	movf	AsicPreCalc@n^(0+256),w
  4296  0115  0021               	movlb	1	; select bank1
  4297  0116  00AF               	movwf	??_AsicPreCalc^(0+128)
  4298  0117  3001               	movlw	1
  4299  0118                     u4055:	
  4300  0118  35AF               	lslf	??_AsicPreCalc^(0+128),f
  4301  0119  3EFF               	addlw	-1
  4302  011A  1D03               	skipz
  4303  011B  2918               	goto	u4055
  4304  011C  352F               	lslf	??_AsicPreCalc^(0+128),w
  4305  011D  3E20               	addlw	AsicPreCalc@K& (0+255)
  4306  011E  0086               	movwf	6
  4307  011F  3001               	movlw	1	; select bank2/3
  4308  0120  0087               	movwf	7
  4309  0121  3F40               	moviw [0]fsr1
  4310  0122  0022               	movlb	2	; select bank2
  4311  0123  07D4               	addwf	AsicPreCalc@x^(0+256),f
  4312  0124  3F41               	moviw [1]fsr1
  4313  0125  3DD5               	addwfc	(AsicPreCalc@x+1)^(0+256),f
  4314  0126  3F42               	moviw [2]fsr1
  4315  0127  3DD6               	addwfc	(AsicPreCalc@x+2)^(0+256),f
  4316  0128  3F43               	moviw [3]fsr1
  4317  0129  3DD7               	addwfc	(AsicPreCalc@x+3)^(0+256),f
  4318                           
  4319                           ;asic.c: 333: x += work->Merkle[n];
  4320  012A  0858               	movf	AsicPreCalc@n^(0+256),w
  4321  012B  0021               	movlb	1	; select bank1
  4322  012C  00AF               	movwf	??_AsicPreCalc^(0+128)
  4323  012D  01B0               	clrf	(??_AsicPreCalc^(0+128)+1)
  4324  012E  35AF               	lslf	??_AsicPreCalc^(0+128),f
  4325  012F  0DB0               	rlf	(??_AsicPreCalc^(0+128)+1),f
  4326  0130  35AF               	lslf	??_AsicPreCalc^(0+128),f
  4327  0131  0DB0               	rlf	(??_AsicPreCalc^(0+128)+1),f
  4328  0132  082F               	movf	??_AsicPreCalc^(0+128),w
  4329  0133  3E21               	addlw	33
  4330  0134  00B1               	movwf	(??_AsicPreCalc+2)^(0+128)
  4331  0135  3000               	movlw	0
  4332  0136  3D30               	addwfc	(??_AsicPreCalc+1)^(0+128),w
  4333  0137  00B2               	movwf	(??_AsicPreCalc+3)^(0+128)
  4334  0138  0831               	movf	(??_AsicPreCalc+2)^(0+128),w
  4335  0139  072D               	addwf	AsicPreCalc@work^(0+128),w
  4336  013A  0086               	movwf	6
  4337  013B  0832               	movf	(??_AsicPreCalc+3)^(0+128),w
  4338  013C  3D2E               	addwfc	(AsicPreCalc@work+1)^(0+128),w
  4339  013D  0087               	movwf	7
  4340  013E  3F40               	moviw [0]fsr1
  4341  013F  0022               	movlb	2	; select bank2
  4342  0140  07D4               	addwf	AsicPreCalc@x^(0+256),f
  4343  0141  3F41               	moviw [1]fsr1
  4344  0142  3DD5               	addwfc	(AsicPreCalc@x+1)^(0+256),f
  4345  0143  3F42               	moviw [2]fsr1
  4346  0144  3DD6               	addwfc	(AsicPreCalc@x+2)^(0+256),f
  4347  0145  3F43               	moviw [3]fsr1
  4348  0146  3DD7               	addwfc	(AsicPreCalc@x+3)^(0+256),f
  4349                           
  4350                           ;asic.c: 334: x += m[7-n];
  4351  0147  0358               	decf	AsicPreCalc@n^(0+256),w
  4352  0148  3AFF               	xorlw	255
  4353  0149  0021               	movlb	1	; select bank1
  4354  014A  00AF               	movwf	??_AsicPreCalc^(0+128)
  4355  014B  3001               	movlw	1
  4356  014C                     u4065:	
  4357  014C  35AF               	lslf	??_AsicPreCalc^(0+128),f
  4358  014D  3EFF               	addlw	-1
  4359  014E  1D03               	skipz
  4360  014F  294C               	goto	u4065
  4361  0150  352F               	lslf	??_AsicPreCalc^(0+128),w
  4362  0151  3E1C               	addlw	28
  4363  0152  3E2C               	addlw	AsicPreCalc@m& (0+255)
  4364  0153  0086               	movwf	6
  4365  0154  3001               	movlw	1	; select bank2/3
  4366  0155  0087               	movwf	7
  4367  0156  3F40               	moviw [0]fsr1
  4368  0157  0022               	movlb	2	; select bank2
  4369  0158  07D4               	addwf	AsicPreCalc@x^(0+256),f
  4370  0159  3F41               	moviw [1]fsr1
  4371  015A  3DD5               	addwfc	(AsicPreCalc@x+1)^(0+256),f
  4372  015B  3F42               	moviw [2]fsr1
  4373  015C  3DD6               	addwfc	(AsicPreCalc@x+2)^(0+256),f
  4374  015D  3F43               	moviw [3]fsr1
  4375  015E  3DD7               	addwfc	(AsicPreCalc@x+3)^(0+256),f
  4376                           
  4377                           ;asic.c: 335: y = rotate(m[4-n], 26);
  4378  015F  0358               	decf	AsicPreCalc@n^(0+256),w
  4379  0160  3AFF               	xorlw	255
  4380  0161  0021               	movlb	1	; select bank1
  4381  0162  00AF               	movwf	??_AsicPreCalc^(0+128)
  4382  0163  3001               	movlw	1
  4383  0164                     u4075:	
  4384  0164  35AF               	lslf	??_AsicPreCalc^(0+128),f
  4385  0165  3EFF               	addlw	-1
  4386  0166  1D03               	skipz
  4387  0167  2964               	goto	u4075
  4388  0168  352F               	lslf	??_AsicPreCalc^(0+128),w
  4389  0169  3E10               	addlw	16
  4390  016A  3E2C               	addlw	AsicPreCalc@m& (0+255)
  4391  016B  0086               	movwf	6
  4392  016C  3001               	movlw	1	; select bank2/3
  4393  016D  0087               	movwf	7
  4394  016E  3F40               	moviw [0]fsr1
  4395  016F  00A0               	movwf	?_rotate^(0+128)
  4396  0170  3F41               	moviw [1]fsr1
  4397  0171  00A1               	movwf	(?_rotate+1)^(0+128)
  4398  0172  3F42               	moviw [2]fsr1
  4399  0173  00A2               	movwf	(?_rotate+2)^(0+128)
  4400  0174  3F43               	moviw [3]fsr1
  4401  0175  00A3               	movwf	(?_rotate+3)^(0+128)
  4402  0176  301A               	movlw	26
  4403  0177  00B0               	movwf	(??_AsicPreCalc+1)^(0+128)
  4404  0178  0830               	movf	(??_AsicPreCalc+1)^(0+128),w
  4405  0179  00A4               	movwf	(?_rotate^(0+128)+4)
  4406  017A  3192  2208  3180   	fcall	_rotate
  4407  017D  0021               	movlb	1	; select bank1
  4408  017E  0823               	movf	(?_rotate+3)^(0+128),w
  4409  017F  0022               	movlb	2	; select bank2
  4410  0180  00D3               	movwf	(AsicPreCalc@y+3)^(0+256)
  4411  0181  0021               	movlb	1	; select bank1
  4412  0182  0822               	movf	(?_rotate+2)^(0+128),w
  4413  0183  0022               	movlb	2	; select bank2
  4414  0184  00D2               	movwf	(AsicPreCalc@y+2)^(0+256)
  4415  0185  0021               	movlb	1	; select bank1
  4416  0186  0821               	movf	(?_rotate+1)^(0+128),w
  4417  0187  0022               	movlb	2	; select bank2
  4418  0188  00D1               	movwf	(AsicPreCalc@y+1)^(0+256)
  4419  0189  0021               	movlb	1	; select bank1
  4420  018A  0820               	movf	?_rotate^(0+128),w
  4421  018B  0022               	movlb	2	; select bank2
  4422  018C  00D0               	movwf	AsicPreCalc@y^(0+256)
  4423                           
  4424                           ;asic.c: 336: z = rotate(m[4-n], 21);
  4425  018D  0358               	decf	AsicPreCalc@n^(0+256),w
  4426  018E  3AFF               	xorlw	255
  4427  018F  0021               	movlb	1	; select bank1
  4428  0190  00AF               	movwf	??_AsicPreCalc^(0+128)
  4429  0191  3001               	movlw	1
  4430  0192                     u4085:	
  4431  0192  35AF               	lslf	??_AsicPreCalc^(0+128),f
  4432  0193  3EFF               	addlw	-1
  4433  0194  1D03               	skipz
  4434  0195  2992               	goto	u4085
  4435  0196  352F               	lslf	??_AsicPreCalc^(0+128),w
  4436  0197  3E10               	addlw	16
  4437  0198  3E2C               	addlw	AsicPreCalc@m& (0+255)
  4438  0199  0086               	movwf	6
  4439  019A  3001               	movlw	1	; select bank2/3
  4440  019B  0087               	movwf	7
  4441  019C  3F40               	moviw [0]fsr1
  4442  019D  00A0               	movwf	?_rotate^(0+128)
  4443  019E  3F41               	moviw [1]fsr1
  4444  019F  00A1               	movwf	(?_rotate+1)^(0+128)
  4445  01A0  3F42               	moviw [2]fsr1
  4446  01A1  00A2               	movwf	(?_rotate+2)^(0+128)
  4447  01A2  3F43               	moviw [3]fsr1
  4448  01A3  00A3               	movwf	(?_rotate+3)^(0+128)
  4449  01A4  3015               	movlw	21
  4450  01A5  00B0               	movwf	(??_AsicPreCalc+1)^(0+128)
  4451  01A6  0830               	movf	(??_AsicPreCalc+1)^(0+128),w
  4452  01A7  00A4               	movwf	(?_rotate^(0+128)+4)
  4453  01A8  3192  2208  3180   	fcall	_rotate
  4454  01AB  0021               	movlb	1	; select bank1
  4455  01AC  0823               	movf	(?_rotate+3)^(0+128),w
  4456  01AD  0022               	movlb	2	; select bank2
  4457  01AE  00CF               	movwf	(AsicPreCalc@z+3)^(0+256)
  4458  01AF  0021               	movlb	1	; select bank1
  4459  01B0  0822               	movf	(?_rotate+2)^(0+128),w
  4460  01B1  0022               	movlb	2	; select bank2
  4461  01B2  00CE               	movwf	(AsicPreCalc@z+2)^(0+256)
  4462  01B3  0021               	movlb	1	; select bank1
  4463  01B4  0821               	movf	(?_rotate+1)^(0+128),w
  4464  01B5  0022               	movlb	2	; select bank2
  4465  01B6  00CD               	movwf	(AsicPreCalc@z+1)^(0+256)
  4466  01B7  0021               	movlb	1	; select bank1
  4467  01B8  0820               	movf	?_rotate^(0+128),w
  4468  01B9  0022               	movlb	2	; select bank2
  4469  01BA  00CC               	movwf	AsicPreCalc@z^(0+256)
  4470                           
  4471                           ;asic.c: 337: z = y^z;
  4472  01BB  0850               	movf	AsicPreCalc@y^(0+256),w
  4473  01BC  064C               	xorwf	AsicPreCalc@z^(0+256),w
  4474  01BD  0021               	movlb	1	; select bank1
  4475  01BE  00AF               	movwf	??_AsicPreCalc^(0+128)
  4476  01BF  0022               	movlb	2	; select bank2
  4477  01C0  0851               	movf	(AsicPreCalc@y+1)^(0+256),w
  4478  01C1  064D               	xorwf	(AsicPreCalc@z+1)^(0+256),w
  4479  01C2  0021               	movlb	1	; select bank1
  4480  01C3  00B0               	movwf	(??_AsicPreCalc^(0+128)+1)
  4481  01C4  0022               	movlb	2	; select bank2
  4482  01C5  0852               	movf	(AsicPreCalc@y+2)^(0+256),w
  4483  01C6  064E               	xorwf	(AsicPreCalc@z+2)^(0+256),w
  4484  01C7  0021               	movlb	1	; select bank1
  4485  01C8  00B1               	movwf	(??_AsicPreCalc^(0+128)+2)
  4486  01C9  0022               	movlb	2	; select bank2
  4487  01CA  0853               	movf	(AsicPreCalc@y+3)^(0+256),w
  4488  01CB  064F               	xorwf	(AsicPreCalc@z+3)^(0+256),w
  4489  01CC  0021               	movlb	1	; select bank1
  4490  01CD  00B2               	movwf	(??_AsicPreCalc^(0+128)+3)
  4491  01CE  0832               	movf	(??_AsicPreCalc+3)^(0+128),w
  4492  01CF  0022               	movlb	2	; select bank2
  4493  01D0  00CF               	movwf	(AsicPreCalc@z+3)^(0+256)
  4494  01D1  0021               	movlb	1	; select bank1
  4495  01D2  0831               	movf	(??_AsicPreCalc+2)^(0+128),w
  4496  01D3  0022               	movlb	2	; select bank2
  4497  01D4  00CE               	movwf	(AsicPreCalc@z+2)^(0+256)
  4498  01D5  0021               	movlb	1	; select bank1
  4499  01D6  0830               	movf	(??_AsicPreCalc+1)^(0+128),w
  4500  01D7  0022               	movlb	2	; select bank2
  4501  01D8  00CD               	movwf	(AsicPreCalc@z+1)^(0+256)
  4502  01D9  0021               	movlb	1	; select bank1
  4503  01DA  082F               	movf	??_AsicPreCalc^(0+128),w
  4504  01DB  0022               	movlb	2	; select bank2
  4505  01DC  00CC               	movwf	AsicPreCalc@z^(0+256)
  4506                           
  4507                           ;asic.c: 338: y = rotate(m[4-n], 7);
  4508  01DD  0358               	decf	AsicPreCalc@n^(0+256),w
  4509  01DE  3AFF               	xorlw	255
  4510  01DF  0021               	movlb	1	; select bank1
  4511  01E0  00AF               	movwf	??_AsicPreCalc^(0+128)
  4512  01E1  3001               	movlw	1
  4513  01E2                     u4095:	
  4514  01E2  35AF               	lslf	??_AsicPreCalc^(0+128),f
  4515  01E3  3EFF               	addlw	-1
  4516  01E4  1D03               	skipz
  4517  01E5  29E2               	goto	u4095
  4518  01E6  352F               	lslf	??_AsicPreCalc^(0+128),w
  4519  01E7  3E10               	addlw	16
  4520  01E8  3E2C               	addlw	AsicPreCalc@m& (0+255)
  4521  01E9  0086               	movwf	6
  4522  01EA  3001               	movlw	1	; select bank2/3
  4523  01EB  0087               	movwf	7
  4524  01EC  3F40               	moviw [0]fsr1
  4525  01ED  00A0               	movwf	?_rotate^(0+128)
  4526  01EE  3F41               	moviw [1]fsr1
  4527  01EF  00A1               	movwf	(?_rotate+1)^(0+128)
  4528  01F0  3F42               	moviw [2]fsr1
  4529  01F1  00A2               	movwf	(?_rotate+2)^(0+128)
  4530  01F2  3F43               	moviw [3]fsr1
  4531  01F3  00A3               	movwf	(?_rotate+3)^(0+128)
  4532  01F4  3007               	movlw	7
  4533  01F5  00B0               	movwf	(??_AsicPreCalc+1)^(0+128)
  4534  01F6  0830               	movf	(??_AsicPreCalc+1)^(0+128),w
  4535  01F7  00A4               	movwf	(?_rotate^(0+128)+4)
  4536  01F8  3192  2208  3180   	fcall	_rotate
  4537  01FB  0021               	movlb	1	; select bank1
  4538  01FC  0823               	movf	(?_rotate+3)^(0+128),w
  4539  01FD  0022               	movlb	2	; select bank2
  4540  01FE  00D3               	movwf	(AsicPreCalc@y+3)^(0+256)
  4541  01FF  0021               	movlb	1	; select bank1
  4542  0200  0822               	movf	(?_rotate+2)^(0+128),w
  4543  0201  0022               	movlb	2	; select bank2
  4544  0202  00D2               	movwf	(AsicPreCalc@y+2)^(0+256)
  4545  0203  0021               	movlb	1	; select bank1
  4546  0204  0821               	movf	(?_rotate+1)^(0+128),w
  4547  0205  0022               	movlb	2	; select bank2
  4548  0206  00D1               	movwf	(AsicPreCalc@y+1)^(0+256)
  4549  0207  0021               	movlb	1	; select bank1
  4550  0208  0820               	movf	?_rotate^(0+128),w
  4551  0209  0022               	movlb	2	; select bank2
  4552  020A  00D0               	movwf	AsicPreCalc@y^(0+256)
  4553                           
  4554                           ;asic.c: 339: z = y^z;
  4555  020B  0850               	movf	AsicPreCalc@y^(0+256),w
  4556  020C  064C               	xorwf	AsicPreCalc@z^(0+256),w
  4557  020D  0021               	movlb	1	; select bank1
  4558  020E  00AF               	movwf	??_AsicPreCalc^(0+128)
  4559  020F  0022               	movlb	2	; select bank2
  4560  0210  0851               	movf	(AsicPreCalc@y+1)^(0+256),w
  4561  0211  064D               	xorwf	(AsicPreCalc@z+1)^(0+256),w
  4562  0212  0021               	movlb	1	; select bank1
  4563  0213  00B0               	movwf	(??_AsicPreCalc^(0+128)+1)
  4564  0214  0022               	movlb	2	; select bank2
  4565  0215  0852               	movf	(AsicPreCalc@y+2)^(0+256),w
  4566  0216  064E               	xorwf	(AsicPreCalc@z+2)^(0+256),w
  4567  0217  0021               	movlb	1	; select bank1
  4568  0218  00B1               	movwf	(??_AsicPreCalc^(0+128)+2)
  4569  0219  0022               	movlb	2	; select bank2
  4570  021A  0853               	movf	(AsicPreCalc@y+3)^(0+256),w
  4571  021B  064F               	xorwf	(AsicPreCalc@z+3)^(0+256),w
  4572  021C  0021               	movlb	1	; select bank1
  4573  021D  00B2               	movwf	(??_AsicPreCalc^(0+128)+3)
  4574  021E  0832               	movf	(??_AsicPreCalc+3)^(0+128),w
  4575  021F  0022               	movlb	2	; select bank2
  4576  0220  00CF               	movwf	(AsicPreCalc@z+3)^(0+256)
  4577  0221  0021               	movlb	1	; select bank1
  4578  0222  0831               	movf	(??_AsicPreCalc+2)^(0+128),w
  4579  0223  0022               	movlb	2	; select bank2
  4580  0224  00CE               	movwf	(AsicPreCalc@z+2)^(0+256)
  4581  0225  0021               	movlb	1	; select bank1
  4582  0226  0830               	movf	(??_AsicPreCalc+1)^(0+128),w
  4583  0227  0022               	movlb	2	; select bank2
  4584  0228  00CD               	movwf	(AsicPreCalc@z+1)^(0+256)
  4585  0229  0021               	movlb	1	; select bank1
  4586  022A  082F               	movf	??_AsicPreCalc^(0+128),w
  4587  022B  0022               	movlb	2	; select bank2
  4588  022C  00CC               	movwf	AsicPreCalc@z^(0+256)
  4589                           
  4590                           ;asic.c: 340: m[7-n] = z+x;
  4591  022D  084C               	movf	AsicPreCalc@z^(0+256),w
  4592  022E  0754               	addwf	AsicPreCalc@x^(0+256),w
  4593  022F  0021               	movlb	1	; select bank1
  4594  0230  00AF               	movwf	??_AsicPreCalc^(0+128)
  4595  0231  0022               	movlb	2	; select bank2
  4596  0232  084D               	movf	(AsicPreCalc@z+1)^(0+256),w
  4597  0233  3D55               	addwfc	(AsicPreCalc@x+1)^(0+256),w
  4598  0234  0021               	movlb	1	; select bank1
  4599  0235  00B0               	movwf	(??_AsicPreCalc^(0+128)+1)
  4600  0236  0022               	movlb	2	; select bank2
  4601  0237  084E               	movf	(AsicPreCalc@z+2)^(0+256),w
  4602  0238  3D56               	addwfc	(AsicPreCalc@x+2)^(0+256),w
  4603  0239  0021               	movlb	1	; select bank1
  4604  023A  00B1               	movwf	(??_AsicPreCalc^(0+128)+2)
  4605  023B  0022               	movlb	2	; select bank2
  4606  023C  084F               	movf	(AsicPreCalc@z+3)^(0+256),w
  4607  023D  3D57               	addwfc	(AsicPreCalc@x+3)^(0+256),w
  4608  023E  0021               	movlb	1	; select bank1
  4609  023F  00B2               	movwf	(??_AsicPreCalc^(0+128)+3)
  4610  0240  0022               	movlb	2	; select bank2
  4611  0241  0358               	decf	AsicPreCalc@n^(0+256),w
  4612  0242  3AFF               	xorlw	255
  4613  0243  0021               	movlb	1	; select bank1
  4614  0244  00B3               	movwf	(??_AsicPreCalc+4)^(0+128)
  4615  0245  3001               	movlw	1
  4616  0246                     u4105:	
  4617  0246  35B3               	lslf	(??_AsicPreCalc+4)^(0+128),f
  4618  0247  3EFF               	addlw	-1
  4619  0248  1D03               	skipz
  4620  0249  2A46               	goto	u4105
  4621  024A  3533               	lslf	(??_AsicPreCalc+4)^(0+128),w
  4622  024B  3E1C               	addlw	28
  4623  024C  3E2C               	addlw	AsicPreCalc@m& (0+255)
  4624  024D  0086               	movwf	6
  4625  024E  3001               	movlw	1	; select bank2/3
  4626  024F  0087               	movwf	7
  4627  0250  082F               	movf	??_AsicPreCalc^(0+128),w
  4628  0251  3FC0               	movwi [0]fsr1
  4629  0252  0830               	movf	(??_AsicPreCalc+1)^(0+128),w
  4630  0253  3FC1               	movwi [1]fsr1
  4631  0254  0831               	movf	(??_AsicPreCalc+2)^(0+128),w
  4632  0255  3FC2               	movwi [2]fsr1
  4633  0256  0832               	movf	(??_AsicPreCalc+3)^(0+128),w
  4634  0257  3FC3               	movwi [3]fsr1
  4635                           
  4636                           ;asic.c: 341: m[3-n] = m[3-n] + m[7-n];
  4637  0258  0022               	movlb	2	; select bank2
  4638  0259  0358               	decf	AsicPreCalc@n^(0+256),w
  4639  025A  3AFF               	xorlw	255
  4640  025B  0021               	movlb	1	; select bank1
  4641  025C  00AF               	movwf	??_AsicPreCalc^(0+128)
  4642  025D  3001               	movlw	1
  4643  025E                     u4115:	
  4644  025E  35AF               	lslf	??_AsicPreCalc^(0+128),f
  4645  025F  3EFF               	addlw	-1
  4646  0260  1D03               	skipz
  4647  0261  2A5E               	goto	u4115
  4648  0262  352F               	lslf	??_AsicPreCalc^(0+128),w
  4649  0263  3E1C               	addlw	28
  4650  0264  3E2C               	addlw	AsicPreCalc@m& (0+255)
  4651  0265  0086               	movwf	6
  4652  0266  3001               	movlw	1	; select bank2/3
  4653  0267  0087               	movwf	7
  4654  0268  3F40               	moviw [0]fsr1
  4655  0269  00B0               	movwf	(??_AsicPreCalc+1)^(0+128)
  4656  026A  3F41               	moviw [1]fsr1
  4657  026B  00B1               	movwf	((??_AsicPreCalc+1)^(0+128)+1)
  4658  026C  3F42               	moviw [2]fsr1
  4659  026D  00B2               	movwf	((??_AsicPreCalc+1)^(0+128)+2)
  4660  026E  3F43               	moviw [3]fsr1
  4661  026F  00B3               	movwf	((??_AsicPreCalc+1)^(0+128)+3)
  4662  0270  0022               	movlb	2	; select bank2
  4663  0271  0358               	decf	AsicPreCalc@n^(0+256),w
  4664  0272  3AFF               	xorlw	255
  4665  0273  0021               	movlb	1	; select bank1
  4666  0274  00B4               	movwf	(??_AsicPreCalc+5)^(0+128)
  4667  0275  3001               	movlw	1
  4668  0276                     u4125:	
  4669  0276  35B4               	lslf	(??_AsicPreCalc+5)^(0+128),f
  4670  0277  3EFF               	addlw	-1
  4671  0278  1D03               	skipz
  4672  0279  2A76               	goto	u4125
  4673  027A  3534               	lslf	(??_AsicPreCalc+5)^(0+128),w
  4674  027B  3E0C               	addlw	12
  4675  027C  3E2C               	addlw	AsicPreCalc@m& (0+255)
  4676  027D  0086               	movwf	6
  4677  027E  3001               	movlw	1	; select bank2/3
  4678  027F  0087               	movwf	7
  4679  0280  3F40               	moviw [0]fsr1
  4680  0281  07B0               	addwf	(??_AsicPreCalc+1)^(0+128),f
  4681  0282  3F41               	moviw [1]fsr1
  4682  0283  3DB1               	addwfc	((??_AsicPreCalc+1)^(0+128)+1),f
  4683  0284  3F42               	moviw [2]fsr1
  4684  0285  3DB2               	addwfc	((??_AsicPreCalc+1)^(0+128)+2),f
  4685  0286  3F43               	moviw [3]fsr1
  4686  0287  3DB3               	addwfc	((??_AsicPreCalc+1)^(0+128)+3),f
  4687  0288  0022               	movlb	2	; select bank2
  4688  0289  0358               	decf	AsicPreCalc@n^(0+256),w
  4689  028A  3AFF               	xorlw	255
  4690  028B  0021               	movlb	1	; select bank1
  4691  028C  00B5               	movwf	(??_AsicPreCalc+6)^(0+128)
  4692  028D  3001               	movlw	1
  4693  028E                     u4135:	
  4694  028E  35B5               	lslf	(??_AsicPreCalc+6)^(0+128),f
  4695  028F  3EFF               	addlw	-1
  4696  0290  1D03               	skipz
  4697  0291  2A8E               	goto	u4135
  4698  0292  3535               	lslf	(??_AsicPreCalc+6)^(0+128),w
  4699  0293  3E0C               	addlw	12
  4700  0294  3E2C               	addlw	AsicPreCalc@m& (0+255)
  4701  0295  0086               	movwf	6
  4702  0296  3001               	movlw	1	; select bank2/3
  4703  0297  0087               	movwf	7
  4704  0298  0830               	movf	(??_AsicPreCalc+1)^(0+128),w
  4705  0299  3FC0               	movwi [0]fsr1
  4706  029A  0831               	movf	(??_AsicPreCalc+2)^(0+128),w
  4707  029B  3FC1               	movwi [1]fsr1
  4708  029C  0832               	movf	(??_AsicPreCalc+3)^(0+128),w
  4709  029D  3FC2               	movwi [2]fsr1
  4710  029E  0833               	movf	(??_AsicPreCalc+4)^(0+128),w
  4711  029F  3FC3               	movwi [3]fsr1
  4712                           
  4713                           ;asic.c: 342: x = rotate(m[((0-n)&7)], 30);
  4714  02A0  0022               	movlb	2	; select bank2
  4715  02A1  0358               	decf	AsicPreCalc@n^(0+256),w
  4716  02A2  3AFF               	xorlw	255
  4717  02A3  3907               	andlw	7
  4718  02A4  0021               	movlb	1	; select bank1
  4719  02A5  00AF               	movwf	??_AsicPreCalc^(0+128)
  4720  02A6  3001               	movlw	1
  4721  02A7                     u4145:	
  4722  02A7  35AF               	lslf	??_AsicPreCalc^(0+128),f
  4723  02A8  3EFF               	addlw	-1
  4724  02A9  1D03               	skipz
  4725  02AA  2AA7               	goto	u4145
  4726  02AB  352F               	lslf	??_AsicPreCalc^(0+128),w
  4727  02AC  3E2C               	addlw	AsicPreCalc@m& (0+255)
  4728  02AD  0086               	movwf	6
  4729  02AE  3001               	movlw	1	; select bank2/3
  4730  02AF  0087               	movwf	7
  4731  02B0  3F40               	moviw [0]fsr1
  4732  02B1  00A0               	movwf	?_rotate^(0+128)
  4733  02B2  3F41               	moviw [1]fsr1
  4734  02B3  00A1               	movwf	(?_rotate+1)^(0+128)
  4735  02B4  3F42               	moviw [2]fsr1
  4736  02B5  00A2               	movwf	(?_rotate+2)^(0+128)
  4737  02B6  3F43               	moviw [3]fsr1
  4738  02B7  00A3               	movwf	(?_rotate+3)^(0+128)
  4739  02B8  301E               	movlw	30
  4740  02B9  00B0               	movwf	(??_AsicPreCalc+1)^(0+128)
  4741  02BA  0830               	movf	(??_AsicPreCalc+1)^(0+128),w
  4742  02BB  00A4               	movwf	(?_rotate^(0+128)+4)
  4743  02BC  3192  2208  3180   	fcall	_rotate
  4744  02BF  0021               	movlb	1	; select bank1
  4745  02C0  0823               	movf	(?_rotate+3)^(0+128),w
  4746  02C1  0022               	movlb	2	; select bank2
  4747  02C2  00D7               	movwf	(AsicPreCalc@x+3)^(0+256)
  4748  02C3  0021               	movlb	1	; select bank1
  4749  02C4  0822               	movf	(?_rotate+2)^(0+128),w
  4750  02C5  0022               	movlb	2	; select bank2
  4751  02C6  00D6               	movwf	(AsicPreCalc@x+2)^(0+256)
  4752  02C7  0021               	movlb	1	; select bank1
  4753  02C8  0821               	movf	(?_rotate+1)^(0+128),w
  4754  02C9  0022               	movlb	2	; select bank2
  4755  02CA  00D5               	movwf	(AsicPreCalc@x+1)^(0+256)
  4756  02CB  0021               	movlb	1	; select bank1
  4757  02CC  0820               	movf	?_rotate^(0+128),w
  4758  02CD  0022               	movlb	2	; select bank2
  4759  02CE  00D4               	movwf	AsicPreCalc@x^(0+256)
  4760                           
  4761                           ;asic.c: 343: y = rotate(m[((0-n)&7)], 19);
  4762  02CF  0358               	decf	AsicPreCalc@n^(0+256),w
  4763  02D0  3AFF               	xorlw	255
  4764  02D1  3907               	andlw	7
  4765  02D2  0021               	movlb	1	; select bank1
  4766  02D3  00AF               	movwf	??_AsicPreCalc^(0+128)
  4767  02D4  3001               	movlw	1
  4768  02D5                     u4155:	
  4769  02D5  35AF               	lslf	??_AsicPreCalc^(0+128),f
  4770  02D6  3EFF               	addlw	-1
  4771  02D7  1D03               	skipz
  4772  02D8  2AD5               	goto	u4155
  4773  02D9  352F               	lslf	??_AsicPreCalc^(0+128),w
  4774  02DA  3E2C               	addlw	AsicPreCalc@m& (0+255)
  4775  02DB  0086               	movwf	6
  4776  02DC  3001               	movlw	1	; select bank2/3
  4777  02DD  0087               	movwf	7
  4778  02DE  3F40               	moviw [0]fsr1
  4779  02DF  00A0               	movwf	?_rotate^(0+128)
  4780  02E0  3F41               	moviw [1]fsr1
  4781  02E1  00A1               	movwf	(?_rotate+1)^(0+128)
  4782  02E2  3F42               	moviw [2]fsr1
  4783  02E3  00A2               	movwf	(?_rotate+2)^(0+128)
  4784  02E4  3F43               	moviw [3]fsr1
  4785  02E5  00A3               	movwf	(?_rotate+3)^(0+128)
  4786  02E6  3013               	movlw	19
  4787  02E7  00B0               	movwf	(??_AsicPreCalc+1)^(0+128)
  4788  02E8  0830               	movf	(??_AsicPreCalc+1)^(0+128),w
  4789  02E9  00A4               	movwf	(?_rotate^(0+128)+4)
  4790  02EA  3192  2208  3180   	fcall	_rotate
  4791  02ED  0021               	movlb	1	; select bank1
  4792  02EE  0823               	movf	(?_rotate+3)^(0+128),w
  4793  02EF  0022               	movlb	2	; select bank2
  4794  02F0  00D3               	movwf	(AsicPreCalc@y+3)^(0+256)
  4795  02F1  0021               	movlb	1	; select bank1
  4796  02F2  0822               	movf	(?_rotate+2)^(0+128),w
  4797  02F3  0022               	movlb	2	; select bank2
  4798  02F4  00D2               	movwf	(AsicPreCalc@y+2)^(0+256)
  4799  02F5  0021               	movlb	1	; select bank1
  4800  02F6  0821               	movf	(?_rotate+1)^(0+128),w
  4801  02F7  0022               	movlb	2	; select bank2
  4802  02F8  00D1               	movwf	(AsicPreCalc@y+1)^(0+256)
  4803  02F9  0021               	movlb	1	; select bank1
  4804  02FA  0820               	movf	?_rotate^(0+128),w
  4805  02FB  0022               	movlb	2	; select bank2
  4806  02FC  00D0               	movwf	AsicPreCalc@y^(0+256)
  4807                           
  4808                           ;asic.c: 344: y = y^x;
  4809  02FD  0850               	movf	AsicPreCalc@y^(0+256),w
  4810  02FE  0654               	xorwf	AsicPreCalc@x^(0+256),w
  4811  02FF  0021               	movlb	1	; select bank1
  4812  0300  00AF               	movwf	??_AsicPreCalc^(0+128)
  4813  0301  0022               	movlb	2	; select bank2
  4814  0302  0851               	movf	(AsicPreCalc@y+1)^(0+256),w
  4815  0303  0655               	xorwf	(AsicPreCalc@x+1)^(0+256),w
  4816  0304  0021               	movlb	1	; select bank1
  4817  0305  00B0               	movwf	(??_AsicPreCalc^(0+128)+1)
  4818  0306  0022               	movlb	2	; select bank2
  4819  0307  0852               	movf	(AsicPreCalc@y+2)^(0+256),w
  4820  0308  0656               	xorwf	(AsicPreCalc@x+2)^(0+256),w
  4821  0309  0021               	movlb	1	; select bank1
  4822  030A  00B1               	movwf	(??_AsicPreCalc^(0+128)+2)
  4823  030B  0022               	movlb	2	; select bank2
  4824  030C  0853               	movf	(AsicPreCalc@y+3)^(0+256),w
  4825  030D  0657               	xorwf	(AsicPreCalc@x+3)^(0+256),w
  4826  030E  0021               	movlb	1	; select bank1
  4827  030F  00B2               	movwf	(??_AsicPreCalc^(0+128)+3)
  4828  0310  0832               	movf	(??_AsicPreCalc+3)^(0+128),w
  4829  0311  0022               	movlb	2	; select bank2
  4830  0312  00D3               	movwf	(AsicPreCalc@y+3)^(0+256)
  4831  0313  0021               	movlb	1	; select bank1
  4832  0314  0831               	movf	(??_AsicPreCalc+2)^(0+128),w
  4833  0315  0022               	movlb	2	; select bank2
  4834  0316  00D2               	movwf	(AsicPreCalc@y+2)^(0+256)
  4835  0317  0021               	movlb	1	; select bank1
  4836  0318  0830               	movf	(??_AsicPreCalc+1)^(0+128),w
  4837  0319  0022               	movlb	2	; select bank2
  4838  031A  00D1               	movwf	(AsicPreCalc@y+1)^(0+256)
  4839  031B  0021               	movlb	1	; select bank1
  4840  031C  082F               	movf	??_AsicPreCalc^(0+128),w
  4841  031D  0022               	movlb	2	; select bank2
  4842  031E  00D0               	movwf	AsicPreCalc@y^(0+256)
  4843                           
  4844                           ;asic.c: 345: x = rotate(m[((0-n)&7)], 10);
  4845  031F  0358               	decf	AsicPreCalc@n^(0+256),w
  4846  0320  3AFF               	xorlw	255
  4847  0321  3907               	andlw	7
  4848  0322  0021               	movlb	1	; select bank1
  4849  0323  00AF               	movwf	??_AsicPreCalc^(0+128)
  4850  0324  3001               	movlw	1
  4851  0325                     u4165:	
  4852  0325  35AF               	lslf	??_AsicPreCalc^(0+128),f
  4853  0326  3EFF               	addlw	-1
  4854  0327  1D03               	skipz
  4855  0328  2B25               	goto	u4165
  4856  0329  352F               	lslf	??_AsicPreCalc^(0+128),w
  4857  032A  3E2C               	addlw	AsicPreCalc@m& (0+255)
  4858  032B  0086               	movwf	6
  4859  032C  3001               	movlw	1	; select bank2/3
  4860  032D  0087               	movwf	7
  4861  032E  3F40               	moviw [0]fsr1
  4862  032F  00A0               	movwf	?_rotate^(0+128)
  4863  0330  3F41               	moviw [1]fsr1
  4864  0331  00A1               	movwf	(?_rotate+1)^(0+128)
  4865  0332  3F42               	moviw [2]fsr1
  4866  0333  00A2               	movwf	(?_rotate+2)^(0+128)
  4867  0334  3F43               	moviw [3]fsr1
  4868  0335  00A3               	movwf	(?_rotate+3)^(0+128)
  4869  0336  300A               	movlw	10
  4870  0337  00B0               	movwf	(??_AsicPreCalc+1)^(0+128)
  4871  0338  0830               	movf	(??_AsicPreCalc+1)^(0+128),w
  4872  0339  00A4               	movwf	(?_rotate^(0+128)+4)
  4873  033A  3192  2208  3180   	fcall	_rotate
  4874  033D  0021               	movlb	1	; select bank1
  4875  033E  0823               	movf	(?_rotate+3)^(0+128),w
  4876  033F  0022               	movlb	2	; select bank2
  4877  0340  00D7               	movwf	(AsicPreCalc@x+3)^(0+256)
  4878  0341  0021               	movlb	1	; select bank1
  4879  0342  0822               	movf	(?_rotate+2)^(0+128),w
  4880  0343  0022               	movlb	2	; select bank2
  4881  0344  00D6               	movwf	(AsicPreCalc@x+2)^(0+256)
  4882  0345  0021               	movlb	1	; select bank1
  4883  0346  0821               	movf	(?_rotate+1)^(0+128),w
  4884  0347  0022               	movlb	2	; select bank2
  4885  0348  00D5               	movwf	(AsicPreCalc@x+1)^(0+256)
  4886  0349  0021               	movlb	1	; select bank1
  4887  034A  0820               	movf	?_rotate^(0+128),w
  4888  034B  0022               	movlb	2	; select bank2
  4889  034C  00D4               	movwf	AsicPreCalc@x^(0+256)
  4890                           
  4891                           ;asic.c: 346: y = x^y;
  4892  034D  0854               	movf	AsicPreCalc@x^(0+256),w
  4893  034E  0650               	xorwf	AsicPreCalc@y^(0+256),w
  4894  034F  0021               	movlb	1	; select bank1
  4895  0350  00AF               	movwf	??_AsicPreCalc^(0+128)
  4896  0351  0022               	movlb	2	; select bank2
  4897  0352  0855               	movf	(AsicPreCalc@x+1)^(0+256),w
  4898  0353  0651               	xorwf	(AsicPreCalc@y+1)^(0+256),w
  4899  0354  0021               	movlb	1	; select bank1
  4900  0355  00B0               	movwf	(??_AsicPreCalc^(0+128)+1)
  4901  0356  0022               	movlb	2	; select bank2
  4902  0357  0856               	movf	(AsicPreCalc@x+2)^(0+256),w
  4903  0358  0652               	xorwf	(AsicPreCalc@y+2)^(0+256),w
  4904  0359  0021               	movlb	1	; select bank1
  4905  035A  00B1               	movwf	(??_AsicPreCalc^(0+128)+2)
  4906  035B  0022               	movlb	2	; select bank2
  4907  035C  0857               	movf	(AsicPreCalc@x+3)^(0+256),w
  4908  035D  0653               	xorwf	(AsicPreCalc@y+3)^(0+256),w
  4909  035E  0021               	movlb	1	; select bank1
  4910  035F  00B2               	movwf	(??_AsicPreCalc^(0+128)+3)
  4911  0360  0832               	movf	(??_AsicPreCalc+3)^(0+128),w
  4912  0361  0022               	movlb	2	; select bank2
  4913  0362  00D3               	movwf	(AsicPreCalc@y+3)^(0+256)
  4914  0363  0021               	movlb	1	; select bank1
  4915  0364  0831               	movf	(??_AsicPreCalc+2)^(0+128),w
  4916  0365  0022               	movlb	2	; select bank2
  4917  0366  00D2               	movwf	(AsicPreCalc@y+2)^(0+256)
  4918  0367  0021               	movlb	1	; select bank1
  4919  0368  0830               	movf	(??_AsicPreCalc+1)^(0+128),w
  4920  0369  0022               	movlb	2	; select bank2
  4921  036A  00D1               	movwf	(AsicPreCalc@y+1)^(0+256)
  4922  036B  0021               	movlb	1	; select bank1
  4923  036C  082F               	movf	??_AsicPreCalc^(0+128),w
  4924  036D  0022               	movlb	2	; select bank2
  4925  036E  00D0               	movwf	AsicPreCalc@y^(0+256)
  4926                           
  4927                           ;asic.c: 347: x = m[((0-n)&7)] | m[((1-n)&7)];
  4928  036F  0358               	decf	AsicPreCalc@n^(0+256),w
  4929  0370  3AFF               	xorlw	255
  4930  0371  3E01               	addlw	1
  4931  0372  3907               	andlw	7
  4932  0373  0021               	movlb	1	; select bank1
  4933  0374  00AF               	movwf	??_AsicPreCalc^(0+128)
  4934  0375  3001               	movlw	1
  4935  0376                     u4175:	
  4936  0376  35AF               	lslf	??_AsicPreCalc^(0+128),f
  4937  0377  3EFF               	addlw	-1
  4938  0378  1D03               	skipz
  4939  0379  2B76               	goto	u4175
  4940  037A  352F               	lslf	??_AsicPreCalc^(0+128),w
  4941  037B  3E2C               	addlw	AsicPreCalc@m& (0+255)
  4942  037C  0086               	movwf	6
  4943  037D  3001               	movlw	1	; select bank2/3
  4944  037E  0087               	movwf	7
  4945  037F  3F40               	moviw [0]fsr1
  4946  0380  00B0               	movwf	(??_AsicPreCalc+1)^(0+128)
  4947  0381  3F41               	moviw [1]fsr1
  4948  0382  00B1               	movwf	((??_AsicPreCalc+1)^(0+128)+1)
  4949  0383  3F42               	moviw [2]fsr1
  4950  0384  00B2               	movwf	((??_AsicPreCalc+1)^(0+128)+2)
  4951  0385  3F43               	moviw [3]fsr1
  4952  0386  00B3               	movwf	((??_AsicPreCalc+1)^(0+128)+3)
  4953  0387  0022               	movlb	2	; select bank2
  4954  0388  0358               	decf	AsicPreCalc@n^(0+256),w
  4955  0389  3AFF               	xorlw	255
  4956  038A  3907               	andlw	7
  4957  038B  0021               	movlb	1	; select bank1
  4958  038C  00B4               	movwf	(??_AsicPreCalc+5)^(0+128)
  4959  038D  3001               	movlw	1
  4960  038E                     u4185:	
  4961  038E  35B4               	lslf	(??_AsicPreCalc+5)^(0+128),f
  4962  038F  3EFF               	addlw	-1
  4963  0390  1D03               	skipz
  4964  0391  2B8E               	goto	u4185
  4965  0392  3534               	lslf	(??_AsicPreCalc+5)^(0+128),w
  4966  0393  3E2C               	addlw	AsicPreCalc@m& (0+255)
  4967  0394  0086               	movwf	6
  4968  0395  3001               	movlw	1	; select bank2/3
  4969  0396  0087               	movwf	7
  4970  0397  3F40               	moviw [0]fsr1
  4971  0398  00B5               	movwf	(??_AsicPreCalc+6)^(0+128)
  4972  0399  3F41               	moviw [1]fsr1
  4973  039A  00B6               	movwf	((??_AsicPreCalc+6)^(0+128)+1)
  4974  039B  3F42               	moviw [2]fsr1
  4975  039C  00B7               	movwf	((??_AsicPreCalc+6)^(0+128)+2)
  4976  039D  3F43               	moviw [3]fsr1
  4977  039E  00B8               	movwf	((??_AsicPreCalc+6)^(0+128)+3)
  4978  039F  0830               	movf	(??_AsicPreCalc+1)^(0+128),w
  4979  03A0  0435               	iorwf	(??_AsicPreCalc+6)^(0+128),w
  4980  03A1  0022               	movlb	2	; select bank2
  4981  03A2  00D4               	movwf	AsicPreCalc@x^(0+256)
  4982  03A3  0021               	movlb	1	; select bank1
  4983  03A4  0831               	movf	(??_AsicPreCalc+2)^(0+128),w
  4984  03A5  0436               	iorwf	(??_AsicPreCalc+7)^(0+128),w
  4985  03A6  0022               	movlb	2	; select bank2
  4986  03A7  00D5               	movwf	(AsicPreCalc@x+1)^(0+256)
  4987  03A8  0021               	movlb	1	; select bank1
  4988  03A9  0832               	movf	(??_AsicPreCalc+3)^(0+128),w
  4989  03AA  0437               	iorwf	(??_AsicPreCalc+8)^(0+128),w
  4990  03AB  0022               	movlb	2	; select bank2
  4991  03AC  00D6               	movwf	(AsicPreCalc@x+2)^(0+256)
  4992  03AD  0021               	movlb	1	; select bank1
  4993  03AE  0833               	movf	(??_AsicPreCalc+4)^(0+128),w
  4994  03AF  0438               	iorwf	(??_AsicPreCalc+9)^(0+128),w
  4995  03B0  0022               	movlb	2	; select bank2
  4996  03B1  00D7               	movwf	(AsicPreCalc@x+3)^(0+256)
  4997                           
  4998                           ;asic.c: 348: x = m[((2-n)&7)] & x;
  4999  03B2  0358               	decf	AsicPreCalc@n^(0+256),w
  5000  03B3  3AFF               	xorlw	255
  5001  03B4  3E02               	addlw	2
  5002  03B5  3907               	andlw	7
  5003  03B6  0021               	movlb	1	; select bank1
  5004  03B7  00AF               	movwf	??_AsicPreCalc^(0+128)
  5005  03B8  3001               	movlw	1
  5006  03B9                     u4195:	
  5007  03B9  35AF               	lslf	??_AsicPreCalc^(0+128),f
  5008  03BA  3EFF               	addlw	-1
  5009  03BB  1D03               	skipz
  5010  03BC  2BB9               	goto	u4195
  5011  03BD  352F               	lslf	??_AsicPreCalc^(0+128),w
  5012  03BE  3E2C               	addlw	AsicPreCalc@m& (0+255)
  5013  03BF  0086               	movwf	6
  5014  03C0  3001               	movlw	1	; select bank2/3
  5015  03C1  0087               	movwf	7
  5016  03C2  0022               	movlb	2	; select bank2
  5017  03C3  0854               	movf	AsicPreCalc@x^(0+256),w
  5018  03C4  0501               	andwf	1,w
  5019  03C5  0021               	movlb	1	; select bank1
  5020  03C6  00B0               	movwf	(??_AsicPreCalc+1)^(0+128)
  5021  03C7  3141               	addfsr 1,1
  5022  03C8  0022               	movlb	2	; select bank2
  5023  03C9  0855               	movf	(AsicPreCalc@x+1)^(0+256),w
  5024  03CA  0501               	andwf	1,w
  5025  03CB  0021               	movlb	1	; select bank1
  5026  03CC  00B1               	movwf	((??_AsicPreCalc+1)^(0+128)+1)
  5027  03CD  3141               	addfsr 1,1
  5028  03CE  0022               	movlb	2	; select bank2
  5029  03CF  0856               	movf	(AsicPreCalc@x+2)^(0+256),w
  5030  03D0  0501               	andwf	1,w
  5031  03D1  0021               	movlb	1	; select bank1
  5032  03D2  00B2               	movwf	((??_AsicPreCalc+1)^(0+128)+2)
  5033  03D3  3141               	addfsr 1,1
  5034  03D4  0022               	movlb	2	; select bank2
  5035  03D5  0857               	movf	(AsicPreCalc@x+3)^(0+256),w
  5036  03D6  0501               	andwf	1,w
  5037  03D7  0021               	movlb	1	; select bank1
  5038  03D8  00B3               	movwf	((??_AsicPreCalc+1)^(0+128)+3)
  5039  03D9  0833               	movf	(??_AsicPreCalc+4)^(0+128),w
  5040  03DA  0022               	movlb	2	; select bank2
  5041  03DB  00D7               	movwf	(AsicPreCalc@x+3)^(0+256)
  5042  03DC  0021               	movlb	1	; select bank1
  5043  03DD  0832               	movf	(??_AsicPreCalc+3)^(0+128),w
  5044  03DE  0022               	movlb	2	; select bank2
  5045  03DF  00D6               	movwf	(AsicPreCalc@x+2)^(0+256)
  5046  03E0  0021               	movlb	1	; select bank1
  5047  03E1  0831               	movf	(??_AsicPreCalc+2)^(0+128),w
  5048  03E2  0022               	movlb	2	; select bank2
  5049  03E3  00D5               	movwf	(AsicPreCalc@x+1)^(0+256)
  5050  03E4  0021               	movlb	1	; select bank1
  5051  03E5  0830               	movf	(??_AsicPreCalc+1)^(0+128),w
  5052  03E6  0022               	movlb	2	; select bank2
  5053  03E7  00D4               	movwf	AsicPreCalc@x^(0+256)
  5054                           
  5055                           ;asic.c: 349: z = m[((0-n)&7)] & m[((1-n)&7)];
  5056  03E8  0358               	decf	AsicPreCalc@n^(0+256),w
  5057  03E9  3AFF               	xorlw	255
  5058  03EA  3E01               	addlw	1
  5059  03EB  3907               	andlw	7
  5060  03EC  0021               	movlb	1	; select bank1
  5061  03ED  00AF               	movwf	??_AsicPreCalc^(0+128)
  5062  03EE  3001               	movlw	1
  5063  03EF                     u4205:	
  5064  03EF  35AF               	lslf	??_AsicPreCalc^(0+128),f
  5065  03F0  3EFF               	addlw	-1
  5066  03F1  1D03               	skipz
  5067  03F2  2BEF               	goto	u4205
  5068  03F3  352F               	lslf	??_AsicPreCalc^(0+128),w
  5069  03F4  3E2C               	addlw	AsicPreCalc@m& (0+255)
  5070  03F5  0086               	movwf	6
  5071  03F6  3001               	movlw	1	; select bank2/3
  5072  03F7  0087               	movwf	7
  5073  03F8  3F40               	moviw [0]fsr1
  5074  03F9  00B0               	movwf	(??_AsicPreCalc+1)^(0+128)
  5075  03FA  3F41               	moviw [1]fsr1
  5076  03FB  00B1               	movwf	((??_AsicPreCalc+1)^(0+128)+1)
  5077  03FC  3F42               	moviw [2]fsr1
  5078  03FD  00B2               	movwf	((??_AsicPreCalc+1)^(0+128)+2)
  5079  03FE  3F43               	moviw [3]fsr1
  5080  03FF  00B3               	movwf	((??_AsicPreCalc+1)^(0+128)+3)
  5081  0400  0022               	movlb	2	; select bank2
  5082  0401  0358               	decf	AsicPreCalc@n^(0+256),w
  5083  0402  3AFF               	xorlw	255
  5084  0403  3907               	andlw	7
  5085  0404  0021               	movlb	1	; select bank1
  5086  0405  00B4               	movwf	(??_AsicPreCalc+5)^(0+128)
  5087  0406  3001               	movlw	1
  5088  0407                     u4215:	
  5089  0407  35B4               	lslf	(??_AsicPreCalc+5)^(0+128),f
  5090  0408  3EFF               	addlw	-1
  5091  0409  1D03               	skipz
  5092  040A  2C07               	goto	u4215
  5093  040B  3534               	lslf	(??_AsicPreCalc+5)^(0+128),w
  5094  040C  3E2C               	addlw	AsicPreCalc@m& (0+255)
  5095  040D  0086               	movwf	6
  5096  040E  3001               	movlw	1	; select bank2/3
  5097  040F  0087               	movwf	7
  5098  0410  3F40               	moviw [0]fsr1
  5099  0411  00B5               	movwf	(??_AsicPreCalc+6)^(0+128)
  5100  0412  3F41               	moviw [1]fsr1
  5101  0413  00B6               	movwf	((??_AsicPreCalc+6)^(0+128)+1)
  5102  0414  3F42               	moviw [2]fsr1
  5103  0415  00B7               	movwf	((??_AsicPreCalc+6)^(0+128)+2)
  5104  0416  3F43               	moviw [3]fsr1
  5105  0417  00B8               	movwf	((??_AsicPreCalc+6)^(0+128)+3)
  5106  0418  0830               	movf	(??_AsicPreCalc+1)^(0+128),w
  5107  0419  0535               	andwf	(??_AsicPreCalc+6)^(0+128),w
  5108  041A  0022               	movlb	2	; select bank2
  5109  041B  00CC               	movwf	AsicPreCalc@z^(0+256)
  5110  041C  0021               	movlb	1	; select bank1
  5111  041D  0831               	movf	(??_AsicPreCalc+2)^(0+128),w
  5112  041E  0536               	andwf	(??_AsicPreCalc+7)^(0+128),w
  5113  041F  0022               	movlb	2	; select bank2
  5114  0420  00CD               	movwf	(AsicPreCalc@z+1)^(0+256)
  5115  0421  0021               	movlb	1	; select bank1
  5116  0422  0832               	movf	(??_AsicPreCalc+3)^(0+128),w
  5117  0423  0537               	andwf	(??_AsicPreCalc+8)^(0+128),w
  5118  0424  0022               	movlb	2	; select bank2
  5119  0425  00CE               	movwf	(AsicPreCalc@z+2)^(0+256)
  5120  0426  0021               	movlb	1	; select bank1
  5121  0427  0833               	movf	(??_AsicPreCalc+4)^(0+128),w
  5122  0428  0538               	andwf	(??_AsicPreCalc+9)^(0+128),w
  5123  0429  0022               	movlb	2	; select bank2
  5124  042A  00CF               	movwf	(AsicPreCalc@z+3)^(0+256)
  5125                           
  5126                           ;asic.c: 350: x = x | z;
  5127  042B  0854               	movf	AsicPreCalc@x^(0+256),w
  5128  042C  044C               	iorwf	AsicPreCalc@z^(0+256),w
  5129  042D  0021               	movlb	1	; select bank1
  5130  042E  00AF               	movwf	??_AsicPreCalc^(0+128)
  5131  042F  0022               	movlb	2	; select bank2
  5132  0430  0855               	movf	(AsicPreCalc@x+1)^(0+256),w
  5133  0431  044D               	iorwf	(AsicPreCalc@z+1)^(0+256),w
  5134  0432  0021               	movlb	1	; select bank1
  5135  0433  00B0               	movwf	(??_AsicPreCalc^(0+128)+1)
  5136  0434  0022               	movlb	2	; select bank2
  5137  0435  0856               	movf	(AsicPreCalc@x+2)^(0+256),w
  5138  0436  044E               	iorwf	(AsicPreCalc@z+2)^(0+256),w
  5139  0437  0021               	movlb	1	; select bank1
  5140  0438  00B1               	movwf	(??_AsicPreCalc^(0+128)+2)
  5141  0439  0022               	movlb	2	; select bank2
  5142  043A  0857               	movf	(AsicPreCalc@x+3)^(0+256),w
  5143  043B  044F               	iorwf	(AsicPreCalc@z+3)^(0+256),w
  5144  043C  0021               	movlb	1	; select bank1
  5145  043D  00B2               	movwf	(??_AsicPreCalc^(0+128)+3)
  5146  043E  0832               	movf	(??_AsicPreCalc+3)^(0+128),w
  5147  043F  0022               	movlb	2	; select bank2
  5148  0440  00D7               	movwf	(AsicPreCalc@x+3)^(0+256)
  5149  0441  0021               	movlb	1	; select bank1
  5150  0442  0831               	movf	(??_AsicPreCalc+2)^(0+128),w
  5151  0443  0022               	movlb	2	; select bank2
  5152  0444  00D6               	movwf	(AsicPreCalc@x+2)^(0+256)
  5153  0445  0021               	movlb	1	; select bank1
  5154  0446  0830               	movf	(??_AsicPreCalc+1)^(0+128),w
  5155  0447  0022               	movlb	2	; select bank2
  5156  0448  00D5               	movwf	(AsicPreCalc@x+1)^(0+256)
  5157  0449  0021               	movlb	1	; select bank1
  5158  044A  082F               	movf	??_AsicPreCalc^(0+128),w
  5159  044B  0022               	movlb	2	; select bank2
  5160  044C  00D4               	movwf	AsicPreCalc@x^(0+256)
  5161                           
  5162                           ;asic.c: 351: m[7-n] += y + x;
  5163  044D  0850               	movf	AsicPreCalc@y^(0+256),w
  5164  044E  0754               	addwf	AsicPreCalc@x^(0+256),w
  5165  044F  0021               	movlb	1	; select bank1
  5166  0450  00AF               	movwf	??_AsicPreCalc^(0+128)
  5167  0451  0022               	movlb	2	; select bank2
  5168  0452  0851               	movf	(AsicPreCalc@y+1)^(0+256),w
  5169  0453  3D55               	addwfc	(AsicPreCalc@x+1)^(0+256),w
  5170  0454  0021               	movlb	1	; select bank1
  5171  0455  00B0               	movwf	(??_AsicPreCalc^(0+128)+1)
  5172  0456  0022               	movlb	2	; select bank2
  5173  0457  0852               	movf	(AsicPreCalc@y+2)^(0+256),w
  5174  0458  3D56               	addwfc	(AsicPreCalc@x+2)^(0+256),w
  5175  0459  0021               	movlb	1	; select bank1
  5176  045A  00B1               	movwf	(??_AsicPreCalc^(0+128)+2)
  5177  045B  0022               	movlb	2	; select bank2
  5178  045C  0853               	movf	(AsicPreCalc@y+3)^(0+256),w
  5179  045D  3D57               	addwfc	(AsicPreCalc@x+3)^(0+256),w
  5180  045E  0021               	movlb	1	; select bank1
  5181  045F  00B2               	movwf	(??_AsicPreCalc^(0+128)+3)
  5182  0460  0022               	movlb	2	; select bank2
  5183  0461  0358               	decf	AsicPreCalc@n^(0+256),w
  5184  0462  3AFF               	xorlw	255
  5185  0463  0021               	movlb	1	; select bank1
  5186  0464  00B3               	movwf	(??_AsicPreCalc+4)^(0+128)
  5187  0465  3001               	movlw	1
  5188  0466                     u4225:	
  5189  0466  35B3               	lslf	(??_AsicPreCalc+4)^(0+128),f
  5190  0467  3EFF               	addlw	-1
  5191  0468  1D03               	skipz
  5192  0469  2C66               	goto	u4225
  5193  046A  3533               	lslf	(??_AsicPreCalc+4)^(0+128),w
  5194  046B  3E1C               	addlw	28
  5195  046C  3E2C               	addlw	AsicPreCalc@m& (0+255)
  5196  046D  0086               	movwf	6
  5197  046E  3001               	movlw	1	; select bank2/3
  5198  046F  0087               	movwf	7
  5199  0470  082F               	movf	??_AsicPreCalc^(0+128),w
  5200  0471  0781               	addwf	1,f
  5201  0472  3141               	addfsr 1,1
  5202  0473  0830               	movf	(??_AsicPreCalc+1)^(0+128),w
  5203  0474  3D81               	addwfc	1,f
  5204  0475  3141               	addfsr 1,1
  5205  0476  0831               	movf	(??_AsicPreCalc+2)^(0+128),w
  5206  0477  3D81               	addwfc	1,f
  5207  0478  3141               	addfsr 1,1
  5208  0479  0832               	movf	(??_AsicPreCalc+3)^(0+128),w
  5209  047A  3D81               	addwfc	1,f
  5210                           
  5211                           ;asic.c: 353: PrecalcHashes[2-n] = m[7-n];
  5212  047B  0022               	movlb	2	; select bank2
  5213  047C  0358               	decf	AsicPreCalc@n^(0+256),w
  5214  047D  3AFF               	xorlw	255
  5215  047E  0021               	movlb	1	; select bank1
  5216  047F  00AF               	movwf	??_AsicPreCalc^(0+128)
  5217  0480  3001               	movlw	1
  5218  0481                     u4235:	
  5219  0481  35AF               	lslf	??_AsicPreCalc^(0+128),f
  5220  0482  3EFF               	addlw	-1
  5221  0483  1D03               	skipz
  5222  0484  2C81               	goto	u4235
  5223  0485  352F               	lslf	??_AsicPreCalc^(0+128),w
  5224  0486  3E1C               	addlw	28
  5225  0487  3E2C               	addlw	AsicPreCalc@m& (0+255)
  5226  0488  0086               	movwf	6
  5227  0489  3001               	movlw	1	; select bank2/3
  5228  048A  0087               	movwf	7
  5229  048B  3F40               	moviw [0]fsr1
  5230  048C  00B0               	movwf	(??_AsicPreCalc+1)^(0+128)
  5231  048D  3F41               	moviw [1]fsr1
  5232  048E  00B1               	movwf	((??_AsicPreCalc+1)^(0+128)+1)
  5233  048F  3F42               	moviw [2]fsr1
  5234  0490  00B2               	movwf	((??_AsicPreCalc+1)^(0+128)+2)
  5235  0491  3F43               	moviw [3]fsr1
  5236  0492  00B3               	movwf	((??_AsicPreCalc+1)^(0+128)+3)
  5237  0493  0022               	movlb	2	; select bank2
  5238  0494  0358               	decf	AsicPreCalc@n^(0+256),w
  5239  0495  3AFF               	xorlw	255
  5240  0496  0021               	movlb	1	; select bank1
  5241  0497  00B4               	movwf	(??_AsicPreCalc+5)^(0+128)
  5242  0498  3001               	movlw	1
  5243  0499                     u4245:	
  5244  0499  35B4               	lslf	(??_AsicPreCalc+5)^(0+128),f
  5245  049A  3EFF               	addlw	-1
  5246  049B  1D03               	skipz
  5247  049C  2C99               	goto	u4245
  5248  049D  3534               	lslf	(??_AsicPreCalc+5)^(0+128),w
  5249  049E  3E08               	addlw	8
  5250  049F  3EA6               	addlw	_PrecalcHashes& (0+255)
  5251  04A0  0086               	movwf	6
  5252  04A1  3001               	movlw	1	; select bank3/4
  5253  04A2  0087               	movwf	7
  5254  04A3  0830               	movf	(??_AsicPreCalc+1)^(0+128),w
  5255  04A4  3FC0               	movwi [0]fsr1
  5256  04A5  0831               	movf	(??_AsicPreCalc+2)^(0+128),w
  5257  04A6  3FC1               	movwi [1]fsr1
  5258  04A7  0832               	movf	(??_AsicPreCalc+3)^(0+128),w
  5259  04A8  3FC2               	movwi [2]fsr1
  5260  04A9  0833               	movf	(??_AsicPreCalc+4)^(0+128),w
  5261  04AA  3FC3               	movwi [3]fsr1
  5262                           
  5263                           ;asic.c: 354: PrecalcHashes[5-n] = m[3-n];
  5264  04AB  0022               	movlb	2	; select bank2
  5265  04AC  0358               	decf	AsicPreCalc@n^(0+256),w
  5266  04AD  3AFF               	xorlw	255
  5267  04AE  0021               	movlb	1	; select bank1
  5268  04AF  00AF               	movwf	??_AsicPreCalc^(0+128)
  5269  04B0  3001               	movlw	1
  5270  04B1                     u4255:	
  5271  04B1  35AF               	lslf	??_AsicPreCalc^(0+128),f
  5272  04B2  3EFF               	addlw	-1
  5273  04B3  1D03               	skipz
  5274  04B4  2CB1               	goto	u4255
  5275  04B5  352F               	lslf	??_AsicPreCalc^(0+128),w
  5276  04B6  3E0C               	addlw	12
  5277  04B7  3E2C               	addlw	AsicPreCalc@m& (0+255)
  5278  04B8  0086               	movwf	6
  5279  04B9  3001               	movlw	1	; select bank2/3
  5280  04BA  0087               	movwf	7
  5281  04BB  3F40               	moviw [0]fsr1
  5282  04BC  00B0               	movwf	(??_AsicPreCalc+1)^(0+128)
  5283  04BD  3F41               	moviw [1]fsr1
  5284  04BE  00B1               	movwf	((??_AsicPreCalc+1)^(0+128)+1)
  5285  04BF  3F42               	moviw [2]fsr1
  5286  04C0  00B2               	movwf	((??_AsicPreCalc+1)^(0+128)+2)
  5287  04C1  3F43               	moviw [3]fsr1
  5288  04C2  00B3               	movwf	((??_AsicPreCalc+1)^(0+128)+3)
  5289  04C3  0022               	movlb	2	; select bank2
  5290  04C4  0358               	decf	AsicPreCalc@n^(0+256),w
  5291  04C5  3AFF               	xorlw	255
  5292  04C6  0021               	movlb	1	; select bank1
  5293  04C7  00B4               	movwf	(??_AsicPreCalc+5)^(0+128)
  5294  04C8  3001               	movlw	1
  5295  04C9                     u4265:	
  5296  04C9  35B4               	lslf	(??_AsicPreCalc+5)^(0+128),f
  5297  04CA  3EFF               	addlw	-1
  5298  04CB  1D03               	skipz
  5299  04CC  2CC9               	goto	u4265
  5300  04CD  3534               	lslf	(??_AsicPreCalc+5)^(0+128),w
  5301  04CE  3E14               	addlw	20
  5302  04CF  3EA6               	addlw	_PrecalcHashes& (0+255)
  5303  04D0  0086               	movwf	6
  5304  04D1  3001               	movlw	1	; select bank3/4
  5305  04D2  0087               	movwf	7
  5306  04D3  0830               	movf	(??_AsicPreCalc+1)^(0+128),w
  5307  04D4  3FC0               	movwi [0]fsr1
  5308  04D5  0831               	movf	(??_AsicPreCalc+2)^(0+128),w
  5309  04D6  3FC1               	movwi [1]fsr1
  5310  04D7  0832               	movf	(??_AsicPreCalc+3)^(0+128),w
  5311  04D8  3FC2               	movwi [2]fsr1
  5312  04D9  0833               	movf	(??_AsicPreCalc+4)^(0+128),w
  5313  04DA  3FC3               	movwi [3]fsr1
  5314  04DB  3001               	movlw	1
  5315  04DC  00AF               	movwf	??_AsicPreCalc^(0+128)
  5316  04DD  082F               	movf	??_AsicPreCalc^(0+128),w
  5317  04DE  0022               	movlb	2	; select bank2
  5318  04DF  07D8               	addwf	AsicPreCalc@n^(0+256),f
  5319  04E0  2864               	goto	L5
  5320  04E1                     __end_of_AsicPreCalc:	
  5321                           
  5322                           	psect	text9
  5323  1208                     __ptext9:	
  5324 ;; *************** function _rotate *****************
  5325 ;; Defined at:
  5326 ;;		line 313 in file "asic.c"
  5327 ;; Parameters:    Size  Location     Type
  5328 ;;  x               4    0[BANK1 ] unsigned long 
  5329 ;;  y               1    4[BANK1 ] unsigned char 
  5330 ;; Auto vars:     Size  Location     Type
  5331 ;;		None
  5332 ;; Return value:  Size  Location     Type
  5333 ;;                  4    0[BANK1 ] unsigned long 
  5334 ;; Registers used:
  5335 ;;		wreg, status,2, status,0
  5336 ;; Tracked objects:
  5337 ;;		On entry : 0/0
  5338 ;;		On exit  : 0/0
  5339 ;;		Unchanged: 0/0
  5340 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5341 ;;      Params:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
  5342 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5343 ;;      Temps:          0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0
  5344 ;;      Totals:         0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0
  5345 ;;Total ram usage:       13 bytes
  5346 ;; Hardware stack levels used:    1
  5347 ;; Hardware stack levels required when called:    4
  5348 ;; This function calls:
  5349 ;;		Nothing
  5350 ;; This function is called by:
  5351 ;;		_AsicPreCalc
  5352 ;; This function uses a non-reentrant model
  5353 ;;
  5354                           
  5355                           
  5356                           ;psect for function _rotate
  5357  1208                     _rotate:	
  5358                           
  5359                           ;asic.c: 314: return ((x<<y) | (x>>(32-y)));
  5360                           
  5361                           ;incstack = 0
  5362                           ; Regs used in _rotate: [wreg+status,2+status,0]
  5363  1208  0021               	movlb	1	; select bank1
  5364  1209  0820               	movf	rotate@x^(0+128),w
  5365  120A  00A5               	movwf	??_rotate^(0+128)
  5366  120B  0821               	movf	(rotate@x+1)^(0+128),w
  5367  120C  00A6               	movwf	(??_rotate^(0+128)+1)
  5368  120D  0822               	movf	(rotate@x+2)^(0+128),w
  5369  120E  00A7               	movwf	(??_rotate^(0+128)+2)
  5370  120F  0823               	movf	(rotate@x+3)^(0+128),w
  5371  1210  00A8               	movwf	(??_rotate^(0+128)+3)
  5372  1211  0324               	decf	rotate@y^(0+128),w
  5373  1212  3AFF               	xorlw	255
  5374  1213  3E20               	addlw	32
  5375  1214  0A89               	incf	9,f
  5376  1215  2A1B               	goto	u3940
  5377  1216                     u3945:	
  5378  1216  1003               	clrc
  5379  1217  0CA8               	rrf	(??_rotate^(0+128)+3),f
  5380  1218  0CA7               	rrf	(??_rotate^(0+128)+2),f
  5381  1219  0CA6               	rrf	(??_rotate^(0+128)+1),f
  5382  121A  0CA5               	rrf	??_rotate^(0+128),f
  5383  121B                     u3940:	
  5384  121B  3EFF               	addlw	-1
  5385  121C  1D03               	skipz
  5386  121D  2A16               	goto	u3945
  5387  121E  0820               	movf	rotate@x^(0+128),w
  5388  121F  00A9               	movwf	(??_rotate+4)^(0+128)
  5389  1220  0821               	movf	(rotate@x+1)^(0+128),w
  5390  1221  00AA               	movwf	((??_rotate+4)^(0+128)+1)
  5391  1222  0822               	movf	(rotate@x+2)^(0+128),w
  5392  1223  00AB               	movwf	((??_rotate+4)^(0+128)+2)
  5393  1224  0823               	movf	(rotate@x+3)^(0+128),w
  5394  1225  00AC               	movwf	((??_rotate+4)^(0+128)+3)
  5395  1226  0A24               	incf	rotate@y^(0+128),w
  5396  1227  2A2C               	goto	u3950
  5397  1228                     u3955:	
  5398  1228  35A9               	lslf	(??_rotate+4)^(0+128),f
  5399  1229  0DAA               	rlf	((??_rotate+4)^(0+128)+1),f
  5400  122A  0DAB               	rlf	((??_rotate+4)^(0+128)+2),f
  5401  122B  0DAC               	rlf	((??_rotate+4)^(0+128)+3),f
  5402  122C                     u3950:	
  5403  122C  0B89               	decfsz	9,f
  5404  122D  2A28               	goto	u3955
  5405  122E  0829               	movf	(??_rotate+4)^(0+128),w
  5406  122F  04A5               	iorwf	??_rotate^(0+128),f
  5407  1230  082A               	movf	(??_rotate+5)^(0+128),w
  5408  1231  04A6               	iorwf	(??_rotate^(0+128)+1),f
  5409  1232  082B               	movf	(??_rotate+6)^(0+128),w
  5410  1233  04A7               	iorwf	(??_rotate^(0+128)+2),f
  5411  1234  082C               	movf	(??_rotate+7)^(0+128),w
  5412  1235  04A8               	iorwf	(??_rotate^(0+128)+3),f
  5413  1236  0828               	movf	(??_rotate+3)^(0+128),w
  5414  1237  00A3               	movwf	(?_rotate+3)^(0+128)
  5415  1238  0827               	movf	(??_rotate+2)^(0+128),w
  5416  1239  00A2               	movwf	(?_rotate+2)^(0+128)
  5417  123A  0826               	movf	(??_rotate+1)^(0+128),w
  5418  123B  00A1               	movwf	(?_rotate+1)^(0+128)
  5419  123C  0825               	movf	??_rotate^(0+128),w
  5420  123D  00A0               	movwf	?_rotate^(0+128)
  5421  123E  0008               	return
  5422  123F                     __end_of_rotate:	
  5423                           
  5424                           	psect	text10
  5425  0758                     __ptext10:	
  5426 ;; *************** function _SendAsicData *****************
  5427 ;; Defined at:
  5428 ;;		line 36 in file "asic.c"
  5429 ;; Parameters:    Size  Location     Type
  5430 ;;  work            2    4[BANK1 ] PTR struct _worktask
  5431 ;;		 -> WorkQue(180), 
  5432 ;; Auto vars:     Size  Location     Type
  5433 ;;		None
  5434 ;; Return value:  Size  Location     Type
  5435 ;;		None               void
  5436 ;; Registers used:
  5437 ;;		wreg, status,2, status,0, pclath, cstack
  5438 ;; Tracked objects:
  5439 ;;		On entry : 0/0
  5440 ;;		On exit  : 0/0
  5441 ;;		Unchanged: 0/0
  5442 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5443 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5444 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5445 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  5446 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
  5447 ;;Total ram usage:        6 bytes
  5448 ;; Hardware stack levels used:    1
  5449 ;; Hardware stack levels required when called:    5
  5450 ;; This function calls:
  5451 ;;		_Send32
  5452 ;; This function is called by:
  5453 ;;		_AsicPushWork
  5454 ;; This function uses a non-reentrant model
  5455 ;;
  5456                           
  5457                           
  5458                           ;psect for function _SendAsicData
  5459  0758                     _SendAsicData:	
  5460                           
  5461                           ;asic.c: 37: GIE = 0;
  5462                           
  5463                           ;incstack = 0
  5464                           ; Regs used in _SendAsicData: [wreg+status,2+status,0+pclath+cstack]
  5465  0758  138B               	bcf	11,7	;volatile
  5466                           
  5467                           ;asic.c: 38: last_bit0 = 0x48; last_bit1 = 0x90;
  5468  0759  3048               	movlw	72
  5469  075A  0021               	movlb	1	; select bank1
  5470  075B  00A6               	movwf	??_SendAsicData^(0+128)
  5471  075C  0826               	movf	??_SendAsicData^(0+128),w
  5472  075D  0022               	movlb	2	; select bank2
  5473  075E  00EA               	movwf	_last_bit0^(0+256)
  5474  075F  3090               	movlw	144
  5475  0760  0021               	movlb	1	; select bank1
  5476  0761  00A6               	movwf	??_SendAsicData^(0+128)
  5477  0762  0826               	movf	??_SendAsicData^(0+128),w
  5478  0763  0022               	movlb	2	; select bank2
  5479  0764  00EB               	movwf	_last_bit1^(0+256)
  5480                           
  5481                           ;asic.c: 39: send32_data = (WORD)&ClockCfg; send32_count = 2;
  5482  0765  30D6               	movlw	low _ClockCfg
  5483  0766  00E8               	movwf	_send32_data^(0+256)
  5484  0767  3001               	movlw	high _ClockCfg
  5485  0768  00E9               	movwf	(_send32_data+1)^(0+256)
  5486  0769  3002               	movlw	2
  5487  076A  0021               	movlb	1	; select bank1
  5488  076B  00A6               	movwf	??_SendAsicData^(0+128)
  5489  076C  0826               	movf	??_SendAsicData^(0+128),w
  5490  076D  0022               	movlb	2	; select bank2
  5491  076E  00EC               	movwf	_send32_count^(0+256)
  5492                           
  5493                           ;asic.c: 40: Send32();
  5494  076F  318B  23A2  3187   	fcall	_Send32
  5495                           
  5496                           ;asic.c: 41: send32_data = (WORD)&work->Merkle; send32_count = 3;
  5497  0772  0021               	movlb	1	; select bank1
  5498  0773  0824               	movf	SendAsicData@work^(0+128),w
  5499  0774  3E21               	addlw	33
  5500  0775  0022               	movlb	2	; select bank2
  5501  0776  00E8               	movwf	_send32_data^(0+256)
  5502  0777  3000               	movlw	0
  5503  0778  0021               	movlb	1	; select bank1
  5504  0779  3D25               	addwfc	(SendAsicData@work+1)^(0+128),w
  5505  077A  0022               	movlb	2	; select bank2
  5506  077B  00E9               	movwf	(_send32_data+1)^(0+256)
  5507  077C  3003               	movlw	3
  5508  077D  0021               	movlb	1	; select bank1
  5509  077E  00A6               	movwf	??_SendAsicData^(0+128)
  5510  077F  0826               	movf	??_SendAsicData^(0+128),w
  5511  0780  0022               	movlb	2	; select bank2
  5512  0781  00EC               	movwf	_send32_count^(0+256)
  5513                           
  5514                           ;asic.c: 42: Send32();
  5515  0782  318B  23A2  3187   	fcall	_Send32
  5516                           
  5517                           ;asic.c: 43: send32_data = (WORD)&PrecalcHashes[1]; send32_count = 5;
  5518  0785  30AA               	movlw	low (_PrecalcHashes+4)
  5519  0786  0022               	movlb	2	; select bank2
  5520  0787  00E8               	movwf	_send32_data^(0+256)
  5521  0788  3001               	movlw	high (_PrecalcHashes+4)
  5522  0789  00E9               	movwf	(_send32_data+1)^(0+256)
  5523  078A  3005               	movlw	5
  5524  078B  0021               	movlb	1	; select bank1
  5525  078C  00A6               	movwf	??_SendAsicData^(0+128)
  5526  078D  0826               	movf	??_SendAsicData^(0+128),w
  5527  078E  0022               	movlb	2	; select bank2
  5528  078F  00EC               	movwf	_send32_count^(0+256)
  5529                           
  5530                           ;asic.c: 44: Send32();
  5531  0790  318B  23A2  3187   	fcall	_Send32
  5532                           
  5533                           ;asic.c: 45: send32_data = (WORD)&work->MidState; send32_count = 8;
  5534  0793  0021               	movlb	1	; select bank1
  5535  0794  0824               	movf	SendAsicData@work^(0+128),w
  5536  0795  3E01               	addlw	1
  5537  0796  0022               	movlb	2	; select bank2
  5538  0797  00E8               	movwf	_send32_data^(0+256)
  5539  0798  3000               	movlw	0
  5540  0799  0021               	movlb	1	; select bank1
  5541  079A  3D25               	addwfc	(SendAsicData@work+1)^(0+128),w
  5542  079B  0022               	movlb	2	; select bank2
  5543  079C  00E9               	movwf	(_send32_data+1)^(0+256)
  5544  079D  3008               	movlw	8
  5545  079E  0021               	movlb	1	; select bank1
  5546  079F  00A6               	movwf	??_SendAsicData^(0+128)
  5547  07A0  0826               	movf	??_SendAsicData^(0+128),w
  5548  07A1  0022               	movlb	2	; select bank2
  5549  07A2  00EC               	movwf	_send32_count^(0+256)
  5550                           
  5551                           ;asic.c: 46: Send32();
  5552  07A3  318B  23A2  3187   	fcall	_Send32
  5553                           
  5554                           ;asic.c: 47: send32_data = (WORD)&PrecalcHashes; send32_count = 1;
  5555  07A6  30A6               	movlw	low _PrecalcHashes
  5556  07A7  0022               	movlb	2	; select bank2
  5557  07A8  00E8               	movwf	_send32_data^(0+256)
  5558  07A9  3001               	movlw	high _PrecalcHashes
  5559  07AA  00E9               	movwf	(_send32_data+1)^(0+256)
  5560  07AB  01EC               	clrf	_send32_count^(0+256)
  5561  07AC  0AEC               	incf	_send32_count^(0+256),f
  5562                           
  5563                           ;asic.c: 48: Send32();
  5564  07AD  318B  23A2  3187   	fcall	_Send32
  5565                           
  5566                           ;asic.c: 49: last_bit0 = last_bit1 = 0x50;
  5567  07B0  3050               	movlw	80
  5568  07B1  0022               	movlb	2	; select bank2
  5569  07B2  00EB               	movwf	_last_bit1^(0+256)
  5570  07B3  0021               	movlb	1	; select bank1
  5571  07B4  00A6               	movwf	??_SendAsicData^(0+128)
  5572  07B5  0826               	movf	??_SendAsicData^(0+128),w
  5573  07B6  0022               	movlb	2	; select bank2
  5574  07B7  00EA               	movwf	_last_bit0^(0+256)
  5575                           
  5576                           ;asic.c: 50: send32_data = (WORD)&NonceRanges; send32_count = BankSize;
  5577  07B8  3020               	movlw	low _NonceRanges
  5578  07B9  00E8               	movwf	_send32_data^(0+256)
  5579  07BA  3003               	movlw	high _NonceRanges
  5580  07BB  00E9               	movwf	(_send32_data+1)^(0+256)
  5581  07BC  086D               	movf	_BankSize^(0+256),w
  5582  07BD  0021               	movlb	1	; select bank1
  5583  07BE  00A6               	movwf	??_SendAsicData^(0+128)
  5584  07BF  0826               	movf	??_SendAsicData^(0+128),w
  5585  07C0  0022               	movlb	2	; select bank2
  5586  07C1  00EC               	movwf	_send32_count^(0+256)
  5587                           
  5588                           ;asic.c: 51: Send32();
  5589  07C2  318B  23A2         	fcall	_Send32
  5590                           
  5591                           ;asic.c: 52: LATC = 0xD8;;
  5592  07C4  30D8               	movlw	216
  5593  07C5  0022               	movlb	2	; select bank2
  5594  07C6  008E               	movwf	14	;volatile
  5595                           
  5596                           ;asic.c: 53: GIE = 1;
  5597  07C7  178B               	bsf	11,7	;volatile
  5598                           
  5599                           ;asic.c: 54: ClockCfg[0] = ClockCfg[0] & ~0x00000002;
  5600  07C8  30FD               	movlw	253
  5601  07C9  0023               	movlb	3	; select bank3
  5602  07CA  0556               	andwf	_ClockCfg^(0+384),w
  5603  07CB  0021               	movlb	1	; select bank1
  5604  07CC  00A6               	movwf	??_SendAsicData^(0+128)
  5605  07CD  30FF               	movlw	255
  5606  07CE  0023               	movlb	3	; select bank3
  5607  07CF  0557               	andwf	(_ClockCfg+1)^(0+384),w
  5608  07D0  0021               	movlb	1	; select bank1
  5609  07D1  00A7               	movwf	(??_SendAsicData^(0+128)+1)
  5610  07D2  30FF               	movlw	255
  5611  07D3  0023               	movlb	3	; select bank3
  5612  07D4  0558               	andwf	(_ClockCfg+2)^(0+384),w
  5613  07D5  0021               	movlb	1	; select bank1
  5614  07D6  00A8               	movwf	(??_SendAsicData^(0+128)+2)
  5615  07D7  30FF               	movlw	255
  5616  07D8  0023               	movlb	3	; select bank3
  5617  07D9  0559               	andwf	(_ClockCfg+3)^(0+384),w
  5618  07DA  0021               	movlb	1	; select bank1
  5619  07DB  00A9               	movwf	(??_SendAsicData^(0+128)+3)
  5620  07DC  0829               	movf	(??_SendAsicData+3)^(0+128),w
  5621  07DD  0023               	movlb	3	; select bank3
  5622  07DE  00D9               	movwf	(_ClockCfg+3)^(0+384)
  5623  07DF  0021               	movlb	1	; select bank1
  5624  07E0  0828               	movf	(??_SendAsicData+2)^(0+128),w
  5625  07E1  0023               	movlb	3	; select bank3
  5626  07E2  00D8               	movwf	(_ClockCfg+2)^(0+384)
  5627  07E3  0021               	movlb	1	; select bank1
  5628  07E4  0827               	movf	(??_SendAsicData+1)^(0+128),w
  5629  07E5  0023               	movlb	3	; select bank3
  5630  07E6  00D7               	movwf	(_ClockCfg+1)^(0+384)
  5631  07E7  0021               	movlb	1	; select bank1
  5632  07E8  0826               	movf	??_SendAsicData^(0+128),w
  5633  07E9  0023               	movlb	3	; select bank3
  5634  07EA  00D6               	movwf	_ClockCfg^(0+384)
  5635  07EB  0008               	return
  5636  07EC                     __end_of_SendAsicData:	
  5637                           
  5638                           	psect	text11
  5639  0BA2                     __ptext11:	
  5640 ;; *************** function _Send32 *****************
  5641 ;; Defined at:
  5642 ;;		line 58 in file "asic.c"
  5643 ;; Parameters:    Size  Location     Type
  5644 ;;		None
  5645 ;; Auto vars:     Size  Location     Type
  5646 ;;		None
  5647 ;; Return value:  Size  Location     Type
  5648 ;;		None               void
  5649 ;; Registers used:
  5650 ;;		None
  5651 ;; Tracked objects:
  5652 ;;		On entry : 0/0
  5653 ;;		On exit  : 0/0
  5654 ;;		Unchanged: 0/0
  5655 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5656 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5657 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5658 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5659 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5660 ;;Total ram usage:        0 bytes
  5661 ;; Hardware stack levels used:    1
  5662 ;; Hardware stack levels required when called:    4
  5663 ;; This function calls:
  5664 ;;		Nothing
  5665 ;; This function is called by:
  5666 ;;		_SendAsicData
  5667 ;; This function uses a non-reentrant model
  5668 ;;
  5669                           
  5670                           
  5671                           ;psect for function _Send32
  5672  0BA2                     _Send32:	
  5673                           
  5674                           ;incstack = 0
  5675                           ; Regs used in _Send32: []
  5676  0BA2  0022               	banksel	270	;# 
  5677  0BA3  0868               	movf	_send32_data& (0+127),w	;# 
  5678  0BA4  0086               	movwf	6	;# 
  5679  0BA5  0869               	movf	(_send32_data+1)& (0+127),w	;# 
  5680  0BA6  0087               	movwf	7	;# 
  5681  0BA7                     next_word:	
  5682                           
  5683                           ;# 
  5684  0BA7  3048               	movlw	72	;# 
  5685  0BA8  018E               	clrf	14	;# 
  5686  0BA9  1801               	btfsc	1,0	;# 
  5687  0BAA  3090               	movlw	144	;# 
  5688  0BAB  008E               	movwf	14	;# 
  5689  0BAC  3048               	movlw	72	;# 
  5690  0BAD  018E               	clrf	14	;# 
  5691  0BAE  1881               	btfsc	1,1	;# 
  5692  0BAF  3090               	movlw	144	;# 
  5693  0BB0  008E               	movwf	14	;# 
  5694  0BB1  3048               	movlw	72	;# 
  5695  0BB2  018E               	clrf	14	;# 
  5696  0BB3  1901               	btfsc	1,2	;# 
  5697  0BB4  3090               	movlw	144	;# 
  5698  0BB5  008E               	movwf	14	;# 
  5699  0BB6  3048               	movlw	72	;# 
  5700  0BB7  018E               	clrf	14	;# 
  5701  0BB8  1981               	btfsc	1,3	;# 
  5702  0BB9  3090               	movlw	144	;# 
  5703  0BBA  008E               	movwf	14	;# 
  5704  0BBB  3048               	movlw	72	;# 
  5705  0BBC  018E               	clrf	14	;# 
  5706  0BBD  1A01               	btfsc	1,4	;# 
  5707  0BBE  3090               	movlw	144	;# 
  5708  0BBF  008E               	movwf	14	;# 
  5709  0BC0  3048               	movlw	72	;# 
  5710  0BC1  018E               	clrf	14	;# 
  5711  0BC2  1A81               	btfsc	1,5	;# 
  5712  0BC3  3090               	movlw	144	;# 
  5713  0BC4  008E               	movwf	14	;# 
  5714  0BC5  3048               	movlw	72	;# 
  5715  0BC6  018E               	clrf	14	;# 
  5716  0BC7  1B01               	btfsc	1,6	;# 
  5717  0BC8  3090               	movlw	144	;# 
  5718  0BC9  008E               	movwf	14	;# 
  5719  0BCA  3048               	movlw	72	;# 
  5720  0BCB  018E               	clrf	14	;# 
  5721  0BCC  1B81               	btfsc	1,7	;# 
  5722  0BCD  3090               	movlw	144	;# 
  5723  0BCE  008E               	movwf	14	;# 
  5724  0BCF  3141               	addfsr 1,1	;# 
  5725  0BD0  3048               	movlw	72	;# 
  5726  0BD1  018E               	clrf	14	;# 
  5727  0BD2  1801               	btfsc	1,0	;# 
  5728  0BD3  3090               	movlw	144	;# 
  5729  0BD4  008E               	movwf	14	;# 
  5730  0BD5  3048               	movlw	72	;# 
  5731  0BD6  018E               	clrf	14	;# 
  5732  0BD7  1881               	btfsc	1,1	;# 
  5733  0BD8  3090               	movlw	144	;# 
  5734  0BD9  008E               	movwf	14	;# 
  5735  0BDA  3048               	movlw	72	;# 
  5736  0BDB  018E               	clrf	14	;# 
  5737  0BDC  1901               	btfsc	1,2	;# 
  5738  0BDD  3090               	movlw	144	;# 
  5739  0BDE  008E               	movwf	14	;# 
  5740  0BDF  3048               	movlw	72	;# 
  5741  0BE0  018E               	clrf	14	;# 
  5742  0BE1  1981               	btfsc	1,3	;# 
  5743  0BE2  3090               	movlw	144	;# 
  5744  0BE3  008E               	movwf	14	;# 
  5745  0BE4  3048               	movlw	72	;# 
  5746  0BE5  018E               	clrf	14	;# 
  5747  0BE6  1A01               	btfsc	1,4	;# 
  5748  0BE7  3090               	movlw	144	;# 
  5749  0BE8  008E               	movwf	14	;# 
  5750  0BE9  3048               	movlw	72	;# 
  5751  0BEA  018E               	clrf	14	;# 
  5752  0BEB  1A81               	btfsc	1,5	;# 
  5753  0BEC  3090               	movlw	144	;# 
  5754  0BED  008E               	movwf	14	;# 
  5755  0BEE  3048               	movlw	72	;# 
  5756  0BEF  018E               	clrf	14	;# 
  5757  0BF0  1B01               	btfsc	1,6	;# 
  5758  0BF1  3090               	movlw	144	;# 
  5759  0BF2  008E               	movwf	14	;# 
  5760  0BF3  3048               	movlw	72	;# 
  5761  0BF4  018E               	clrf	14	;# 
  5762  0BF5  1B81               	btfsc	1,7	;# 
  5763  0BF6  3090               	movlw	144	;# 
  5764  0BF7  008E               	movwf	14	;# 
  5765  0BF8  3141               	addfsr 1,1	;# 
  5766  0BF9  3048               	movlw	72	;# 
  5767  0BFA  018E               	clrf	14	;# 
  5768  0BFB  1801               	btfsc	1,0	;# 
  5769  0BFC  3090               	movlw	144	;# 
  5770  0BFD  008E               	movwf	14	;# 
  5771  0BFE  3048               	movlw	72	;# 
  5772  0BFF  018E               	clrf	14	;# 
  5773  0C00  1881               	btfsc	1,1	;# 
  5774  0C01  3090               	movlw	144	;# 
  5775  0C02  008E               	movwf	14	;# 
  5776  0C03  3048               	movlw	72	;# 
  5777  0C04  018E               	clrf	14	;# 
  5778  0C05  1901               	btfsc	1,2	;# 
  5779  0C06  3090               	movlw	144	;# 
  5780  0C07  008E               	movwf	14	;# 
  5781  0C08  3048               	movlw	72	;# 
  5782  0C09  018E               	clrf	14	;# 
  5783  0C0A  1981               	btfsc	1,3	;# 
  5784  0C0B  3090               	movlw	144	;# 
  5785  0C0C  008E               	movwf	14	;# 
  5786  0C0D  3048               	movlw	72	;# 
  5787  0C0E  018E               	clrf	14	;# 
  5788  0C0F  1A01               	btfsc	1,4	;# 
  5789  0C10  3090               	movlw	144	;# 
  5790  0C11  008E               	movwf	14	;# 
  5791  0C12  3048               	movlw	72	;# 
  5792  0C13  018E               	clrf	14	;# 
  5793  0C14  1A81               	btfsc	1,5	;# 
  5794  0C15  3090               	movlw	144	;# 
  5795  0C16  008E               	movwf	14	;# 
  5796  0C17  3048               	movlw	72	;# 
  5797  0C18  018E               	clrf	14	;# 
  5798  0C19  1B01               	btfsc	1,6	;# 
  5799  0C1A  3090               	movlw	144	;# 
  5800  0C1B  008E               	movwf	14	;# 
  5801  0C1C  3048               	movlw	72	;# 
  5802  0C1D  018E               	clrf	14	;# 
  5803  0C1E  1B81               	btfsc	1,7	;# 
  5804  0C1F  3090               	movlw	144	;# 
  5805  0C20  008E               	movwf	14	;# 
  5806  0C21  3141               	addfsr 1,1	;# 
  5807  0C22  3048               	movlw	72	;# 
  5808  0C23  018E               	clrf	14	;# 
  5809  0C24  1801               	btfsc	1,0	;# 
  5810  0C25  3090               	movlw	144	;# 
  5811  0C26  008E               	movwf	14	;# 
  5812  0C27  3048               	movlw	72	;# 
  5813  0C28  018E               	clrf	14	;# 
  5814  0C29  1881               	btfsc	1,1	;# 
  5815  0C2A  3090               	movlw	144	;# 
  5816  0C2B  008E               	movwf	14	;# 
  5817  0C2C  3048               	movlw	72	;# 
  5818  0C2D  018E               	clrf	14	;# 
  5819  0C2E  1901               	btfsc	1,2	;# 
  5820  0C2F  3090               	movlw	144	;# 
  5821  0C30  008E               	movwf	14	;# 
  5822  0C31  3048               	movlw	72	;# 
  5823  0C32  018E               	clrf	14	;# 
  5824  0C33  1981               	btfsc	1,3	;# 
  5825  0C34  3090               	movlw	144	;# 
  5826  0C35  008E               	movwf	14	;# 
  5827  0C36  3048               	movlw	72	;# 
  5828  0C37  018E               	clrf	14	;# 
  5829  0C38  1A01               	btfsc	1,4	;# 
  5830  0C39  3090               	movlw	144	;# 
  5831  0C3A  008E               	movwf	14	;# 
  5832  0C3B  3048               	movlw	72	;# 
  5833  0C3C  018E               	clrf	14	;# 
  5834  0C3D  1A81               	btfsc	1,5	;# 
  5835  0C3E  3090               	movlw	144	;# 
  5836  0C3F  008E               	movwf	14	;# 
  5837  0C40  3048               	movlw	72	;# 
  5838  0C41  018E               	clrf	14	;# 
  5839  0C42  1B01               	btfsc	1,6	;# 
  5840  0C43  3090               	movlw	144	;# 
  5841  0C44  008E               	movwf	14	;# 
  5842  0C45  086A               	movf	_last_bit0& (0+127),w	;# 
  5843  0C46  018E               	clrf	14	;# 
  5844  0C47  1B81               	btfsc	1,7	;# 
  5845  0C48  086B               	movf	_last_bit1& (0+127),w	;# 
  5846  0C49  008E               	movwf	14	;# 
  5847  0C4A  3141               	addfsr 1,1	;# 
  5848  0C4B  0BEC               	decfsz	_send32_count& (0+127),f	;# 
  5849  0C4C  2BA7               	goto	next_word	;# 
  5850  0C4D  0008               	return
  5851  0C4E                     __end_of_Send32:	
  5852                           
  5853                           	psect	text12
  5854  1070                     __ptext12:	
  5855 ;; *************** function _InitializeSystem *****************
  5856 ;; Defined at:
  5857 ;;		line 146 in file "main.c"
  5858 ;; Parameters:    Size  Location     Type
  5859 ;;		None
  5860 ;; Auto vars:     Size  Location     Type
  5861 ;;		None
  5862 ;; Return value:  Size  Location     Type
  5863 ;;		None               void
  5864 ;; Registers used:
  5865 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5866 ;; Tracked objects:
  5867 ;;		On entry : 0/0
  5868 ;;		On exit  : 0/0
  5869 ;;		Unchanged: 0/0
  5870 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5871 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5872 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5873 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5874 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5875 ;;Total ram usage:        0 bytes
  5876 ;; Hardware stack levels used:    1
  5877 ;; Hardware stack levels required when called:    7
  5878 ;; This function calls:
  5879 ;;		_USBDeviceInit
  5880 ;;		_UserInit
  5881 ;; This function is called by:
  5882 ;;		_main
  5883 ;; This function uses a non-reentrant model
  5884 ;;
  5885                           
  5886                           
  5887                           ;psect for function _InitializeSystem
  5888  1070                     _InitializeSystem:	
  5889                           
  5890                           ;main.c: 148: ANSELA = 0x00;
  5891                           
  5892                           ;incstack = 0
  5893                           ; Regs used in _InitializeSystem: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5894  1070  0023               	movlb	3	; select bank3
  5895  1071  018C               	clrf	12	;volatile
  5896                           
  5897                           ;main.c: 149: ANSELB = 0x00;
  5898  1072  018D               	clrf	13	;volatile
  5899                           
  5900                           ;main.c: 150: ANSELC = 0x04;
  5901  1073  3004               	movlw	4
  5902  1074  008E               	movwf	14	;volatile
  5903                           
  5904                           ;main.c: 153: OSCTUNE = 0;
  5905  1075  0021               	movlb	1	; select bank1
  5906  1076  0198               	clrf	24	;volatile
  5907                           
  5908                           ;main.c: 154: OSCCON = 0xFC;
  5909  1077  30FC               	movlw	252
  5910  1078  0099               	movwf	25	;volatile
  5911                           
  5912                           ;main.c: 155: ACTCON = 0x90;
  5913  1079  3090               	movlw	144
  5914  107A  0027               	movlb	7	; select bank7
  5915  107B  009B               	movwf	27	;volatile
  5916                           
  5917                           ;main.c: 158: USBGenericOutHandle = 0;
  5918  107C  0021               	movlb	1	; select bank1
  5919  107D  01DE               	clrf	_USBGenericOutHandle^(0+128)
  5920                           
  5921                           ;main.c: 159: USBGenericInHandle = 0;
  5922  107E  01DD               	clrf	_USBGenericInHandle^(0+128)
  5923                           
  5924                           ;main.c: 160: WQI = WQX = 0;
  5925  107F  01EE               	clrf	_WQX^(0+128)
  5926  1080  01ED               	clrf	_WQI^(0+128)
  5927                           
  5928                           ;main.c: 162: UserInit();
  5929  1081  3187  27EC  3190   	fcall	_UserInit
  5930                           
  5931                           ;main.c: 164: USBDeviceInit();
  5932  1084  318C  244E         	fcall	_USBDeviceInit
  5933  1086  0008               	return
  5934  1087                     __end_of_InitializeSystem:	
  5935                           
  5936                           	psect	text13
  5937  07EC                     __ptext13:	
  5938 ;; *************** function _UserInit *****************
  5939 ;; Defined at:
  5940 ;;		line 170 in file "main.c"
  5941 ;; Parameters:    Size  Location     Type
  5942 ;;		None
  5943 ;; Auto vars:     Size  Location     Type
  5944 ;;		None
  5945 ;; Return value:  Size  Location     Type
  5946 ;;		None               void
  5947 ;; Registers used:
  5948 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5949 ;; Tracked objects:
  5950 ;;		On entry : 0/0
  5951 ;;		On exit  : 0/0
  5952 ;;		Unchanged: 0/0
  5953 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5954 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5955 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5956 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5957 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5958 ;;Total ram usage:        0 bytes
  5959 ;; Hardware stack levels used:    1
  5960 ;; Hardware stack levels required when called:    6
  5961 ;; This function calls:
  5962 ;;		_DetectAsics
  5963 ;;		_InitFAN
  5964 ;;		_InitTempSensor
  5965 ;;		_InitWorkTick
  5966 ;;		_InitResultRx
  5967 ;; This function is called by:
  5968 ;;		_InitializeSystem
  5969 ;; This function uses a non-reentrant model
  5970 ;;
  5971                           
  5972                           
  5973                           ;psect for function _UserInit
  5974  07EC                     _UserInit:	
  5975                           
  5976                           ;main.c: 171: TRISAbits.TRISA5 = 0; LATAbits.LATA5 = 1;;
  5977                           
  5978                           ;incstack = 0
  5979                           ; Regs used in _UserInit: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5980  07EC  0021               	movlb	1	; select bank1
  5981  07ED  128C               	bcf	12,5	;volatile
  5982  07EE  0022               	movlb	2	; select bank2
  5983  07EF  168C               	bsf	12,5	;volatile
  5984                           
  5985                           ;main.c: 172: InitTempSensor();
  5986  07F0  319F  27EF  3187   	fcall	_InitTempSensor
  5987                           
  5988                           ;main.c: 173: InitFAN();
  5989  07F3  3190  20B6  3187   	fcall	_InitFAN
  5990                           
  5991                           ;main.c: 174: InitWorkTick();
  5992  07F6  3190  2044  3187   	fcall	_InitWorkTick
  5993                           
  5994                           ;main.c: 176: InitResultRx();
  5995  07F9  3190  2031  3187   	fcall	_InitResultRx
  5996                           
  5997                           ;main.c: 177: DetectAsics();
  5998  07FC  318E  265F         	fcall	_DetectAsics
  5999  07FE  0008               	return
  6000  07FF                     __end_of_UserInit:	
  6001                           
  6002                           	psect	text14
  6003  1031                     __ptext14:	
  6004 ;; *************** function _InitResultRx *****************
  6005 ;; Defined at:
  6006 ;;		line 288 in file "klondike.c"
  6007 ;; Parameters:    Size  Location     Type
  6008 ;;		None
  6009 ;; Auto vars:     Size  Location     Type
  6010 ;;		None
  6011 ;; Return value:  Size  Location     Type
  6012 ;;		None               void
  6013 ;; Registers used:
  6014 ;;		wreg, status,2
  6015 ;; Tracked objects:
  6016 ;;		On entry : 0/0
  6017 ;;		On exit  : 0/0
  6018 ;;		Unchanged: 0/0
  6019 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6020 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6021 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6022 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6023 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6024 ;;Total ram usage:        0 bytes
  6025 ;; Hardware stack levels used:    1
  6026 ;; Hardware stack levels required when called:    4
  6027 ;; This function calls:
  6028 ;;		Nothing
  6029 ;; This function is called by:
  6030 ;;		_UserInit
  6031 ;; This function uses a non-reentrant model
  6032 ;;
  6033                           
  6034                           
  6035                           ;psect for function _InitResultRx
  6036  1031                     _InitResultRx:	
  6037                           
  6038                           ;klondike.c: 289: ResultQC = 0;
  6039                           
  6040                           ;incstack = 0
  6041                           ; Regs used in _InitResultRx: [wreg+status,2]
  6042  1031  0020               	movlb	0	; select bank0
  6043  1032  01E7               	clrf	_ResultQC
  6044                           
  6045                           ;klondike.c: 290: TXSTAbits.SYNC = 1;
  6046  1033  0023               	movlb	3	; select bank3
  6047  1034  161E               	bsf	30,4	;volatile
  6048                           
  6049                           ;klondike.c: 291: RCSTAbits.SPEN = 1;
  6050  1035  179D               	bsf	29,7	;volatile
  6051                           
  6052                           ;klondike.c: 292: TXSTAbits.CSRC = 0;
  6053  1036  139E               	bcf	30,7	;volatile
  6054                           
  6055                           ;klondike.c: 293: BAUDCONbits.SCKP = 0;
  6056  1037  121F               	bcf	31,4	;volatile
  6057                           
  6058                           ;klondike.c: 294: BAUDCONbits.BRG16 = 1;
  6059  1038  159F               	bsf	31,3	;volatile
  6060                           
  6061                           ;klondike.c: 295: ANSELBbits.ANSB5 = 0;
  6062  1039  128D               	bcf	13,5	;volatile
  6063                           
  6064                           ;klondike.c: 297: IOCBPbits.IOCBP7 = 1;
  6065  103A  0027               	movlb	7	; select bank7
  6066  103B  1794               	bsf	20,7	;volatile
  6067                           
  6068                           ;klondike.c: 298: INTCONbits.IOCIE = 1;
  6069  103C  158B               	bsf	11,3	;volatile
  6070                           
  6071                           ;klondike.c: 299: IOCBF = 0;
  6072  103D  0196               	clrf	22	;volatile
  6073                           
  6074                           ;klondike.c: 301: INTCONbits.GIE = 1;
  6075  103E  178B               	bsf	11,7	;volatile
  6076                           
  6077                           ;klondike.c: 302: RCSTAbits.CREN = 1;
  6078  103F  0023               	movlb	3	; select bank3
  6079  1040  161D               	bsf	29,4	;volatile
  6080                           
  6081                           ;klondike.c: 303: RCREG = 0xFF;
  6082  1041  30FF               	movlw	255
  6083  1042  0099               	movwf	25	;volatile
  6084  1043  0008               	return
  6085  1044                     __end_of_InitResultRx:	
  6086                           
  6087                           	psect	text15
  6088  1044                     __ptext15:	
  6089 ;; *************** function _InitWorkTick *****************
  6090 ;; Defined at:
  6091 ;;		line 271 in file "klondike.c"
  6092 ;; Parameters:    Size  Location     Type
  6093 ;;		None
  6094 ;; Auto vars:     Size  Location     Type
  6095 ;;		None
  6096 ;; Return value:  Size  Location     Type
  6097 ;;		None               void
  6098 ;; Registers used:
  6099 ;;		wreg, status,2, status,0
  6100 ;; Tracked objects:
  6101 ;;		On entry : 0/0
  6102 ;;		On exit  : 0/0
  6103 ;;		Unchanged: 0/0
  6104 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6105 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6106 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6107 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6108 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6109 ;;Total ram usage:        0 bytes
  6110 ;; Hardware stack levels used:    1
  6111 ;; Hardware stack levels required when called:    4
  6112 ;; This function calls:
  6113 ;;		Nothing
  6114 ;; This function is called by:
  6115 ;;		_UserInit
  6116 ;; This function uses a non-reentrant model
  6117 ;;
  6118                           
  6119                           
  6120                           ;psect for function _InitWorkTick
  6121  1044                     _InitWorkTick:	
  6122                           
  6123                           ;klondike.c: 272: TMR0CS = 0;
  6124                           
  6125                           ;incstack = 0
  6126                           ; Regs used in _InitWorkTick: [wreg+status,2+status,0]
  6127  1044  0021               	movlb	1	; select bank1
  6128  1045  1295               	bcf	21,5	;volatile
  6129                           
  6130                           ;klondike.c: 273: OPTION_REGbits.PSA = 0;
  6131  1046  1195               	bcf	21,3	;volatile
  6132                           
  6133                           ;klondike.c: 274: OPTION_REGbits.PS = 7;
  6134  1047  3007               	movlw	7
  6135  1048  0495               	iorwf	21,f	;volatile
  6136                           
  6137                           ;klondike.c: 275: TMR0 = HashTime;
  6138  1049  086F               	movf	_HashTime^(0+128),w
  6139  104A  0020               	movlb	0	; select bank0
  6140  104B  0095               	movwf	21	;volatile
  6141                           
  6142                           ;klondike.c: 278: TRISCbits.TRISC7 = 0;
  6143  104C  0021               	movlb	1	; select bank1
  6144  104D  138E               	bcf	14,7	;volatile
  6145                           
  6146                           ;klondike.c: 279: TRISCbits.TRISC6 = 0;
  6147  104E  130E               	bcf	14,6	;volatile
  6148                           
  6149                           ;klondike.c: 280: TRISCbits.TRISC4 = 0;
  6150  104F  120E               	bcf	14,4	;volatile
  6151                           
  6152                           ;klondike.c: 281: TRISCbits.TRISC3 = 0;
  6153  1050  118E               	bcf	14,3	;volatile
  6154                           
  6155                           ;klondike.c: 282: LATC = 0xD8;;
  6156  1051  30D8               	movlw	216
  6157  1052  0022               	movlb	2	; select bank2
  6158  1053  008E               	movwf	14	;volatile
  6159                           
  6160                           ;klondike.c: 283: TRISAbits.TRISA4 = 0;
  6161  1054  0021               	movlb	1	; select bank1
  6162  1055  120C               	bcf	12,4	;volatile
  6163                           
  6164                           ;klondike.c: 284: LATAbits.LATA4 = 1;
  6165  1056  0022               	movlb	2	; select bank2
  6166  1057  160C               	bsf	12,4	;volatile
  6167  1058  0008               	return
  6168  1059                     __end_of_InitWorkTick:	
  6169                           
  6170                           	psect	text16
  6171  1FEF                     __ptext16:	
  6172 ;; *************** function _InitTempSensor *****************
  6173 ;; Defined at:
  6174 ;;		line 258 in file "klondike.c"
  6175 ;; Parameters:    Size  Location     Type
  6176 ;;		None
  6177 ;; Auto vars:     Size  Location     Type
  6178 ;;		None
  6179 ;; Return value:  Size  Location     Type
  6180 ;;		None               void
  6181 ;; Registers used:
  6182 ;;		wreg, status,2, status,0
  6183 ;; Tracked objects:
  6184 ;;		On entry : 0/0
  6185 ;;		On exit  : 0/0
  6186 ;;		Unchanged: 0/0
  6187 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6188 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6189 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6190 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6191 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6192 ;;Total ram usage:        0 bytes
  6193 ;; Hardware stack levels used:    1
  6194 ;; Hardware stack levels required when called:    4
  6195 ;; This function calls:
  6196 ;;		Nothing
  6197 ;; This function is called by:
  6198 ;;		_UserInit
  6199 ;; This function uses a non-reentrant model
  6200 ;;
  6201                           
  6202                           
  6203                           ;psect for function _InitTempSensor
  6204  1FEF                     _InitTempSensor:	
  6205                           
  6206                           ;klondike.c: 259: TRISCbits.TRISC2=1;
  6207                           
  6208                           ;incstack = 0
  6209                           ; Regs used in _InitTempSensor: [wreg+status,2+status,0]
  6210  1FEF  0021               	movlb	1	; select bank1
  6211  1FF0  150E               	bsf	14,2	;volatile
  6212                           
  6213                           ;klondike.c: 262: ADCON0bits.CHS = 6;
  6214  1FF1  081D               	movf	29,w	;volatile
  6215  1FF2  3983               	andlw	-125
  6216  1FF3  3818               	iorlw	24
  6217  1FF4  009D               	movwf	29	;volatile
  6218                           
  6219                           ;klondike.c: 263: ADCON0bits.ADON = 1;
  6220  1FF5  141D               	bsf	29,0	;volatile
  6221                           
  6222                           ;klondike.c: 264: ADCON1bits.ADFM = 0;
  6223  1FF6  139E               	bcf	30,7	;volatile
  6224                           
  6225                           ;klondike.c: 265: ADCON1bits.ADCS = 6;
  6226  1FF7  081E               	movf	30,w	;volatile
  6227  1FF8  398F               	andlw	-113
  6228  1FF9  3860               	iorlw	96
  6229  1FFA  009E               	movwf	30	;volatile
  6230                           
  6231                           ;klondike.c: 266: ADCON1bits.ADPREF = 0;
  6232  1FFB  30FC               	movlw	-4
  6233  1FFC  059E               	andwf	30,f	;volatile
  6234                           
  6235                           ;klondike.c: 267: ADCON2bits.TRIGSEL = 0;
  6236  1FFD  308F               	movlw	-113
  6237  1FFE  059F               	andwf	31,f	;volatile
  6238  1FFF  0008               	return
  6239  2000                     __end_of_InitTempSensor:	
  6240                           
  6241                           	psect	text17
  6242  10B6                     __ptext17:	
  6243 ;; *************** function _InitFAN *****************
  6244 ;; Defined at:
  6245 ;;		line 238 in file "klondike.c"
  6246 ;; Parameters:    Size  Location     Type
  6247 ;;		None
  6248 ;; Auto vars:     Size  Location     Type
  6249 ;;		None
  6250 ;; Return value:  Size  Location     Type
  6251 ;;		None               void
  6252 ;; Registers used:
  6253 ;;		wreg, status,2, status,0
  6254 ;; Tracked objects:
  6255 ;;		On entry : 0/0
  6256 ;;		On exit  : 0/0
  6257 ;;		Unchanged: 0/0
  6258 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6259 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6260 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6261 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6262 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6263 ;;Total ram usage:        0 bytes
  6264 ;; Hardware stack levels used:    1
  6265 ;; Hardware stack levels required when called:    4
  6266 ;; This function calls:
  6267 ;;		Nothing
  6268 ;; This function is called by:
  6269 ;;		_UserInit
  6270 ;; This function uses a non-reentrant model
  6271 ;;
  6272                           
  6273                           
  6274                           ;psect for function _InitFAN
  6275  10B6                     _InitFAN:	
  6276                           
  6277                           ;klondike.c: 239: TRISCbits.TRISC5 = 1;
  6278                           
  6279                           ;incstack = 0
  6280                           ; Regs used in _InitFAN: [wreg+status,2+status,0]
  6281  10B6  0021               	movlb	1	; select bank1
  6282  10B7  168E               	bsf	14,5	;volatile
  6283                           
  6284                           ;klondike.c: 240: PWM1CON = 0;
  6285  10B8  002C               	movlb	12	; select bank12
  6286  10B9  0193               	clrf	19	;volatile
  6287                           
  6288                           ;klondike.c: 241: PR2 = 0xFF;
  6289  10BA  30FF               	movlw	255
  6290  10BB  0020               	movlb	0	; select bank0
  6291  10BC  009B               	movwf	27	;volatile
  6292                           
  6293                           ;klondike.c: 242: PWM1CON = 0xC0;
  6294  10BD  30C0               	movlw	192
  6295  10BE  002C               	movlb	12	; select bank12
  6296  10BF  0093               	movwf	19	;volatile
  6297                           
  6298                           ;klondike.c: 243: PWM1DCH = 255;
  6299  10C0  30FF               	movlw	255
  6300  10C1  0092               	movwf	18	;volatile
  6301                           
  6302                           ;klondike.c: 244: PWM1DCL = 0;
  6303  10C2  0191               	clrf	17	;volatile
  6304                           
  6305                           ;klondike.c: 245: TMR2IF = 0;
  6306  10C3  0020               	movlb	0	; select bank0
  6307  10C4  1091               	bcf	17,1	;volatile
  6308                           
  6309                           ;klondike.c: 246: T2CONbits.T2CKPS = 1;
  6310  10C5  081C               	movf	28,w	;volatile
  6311  10C6  39FC               	andlw	-4
  6312  10C7  3801               	iorlw	1
  6313  10C8  009C               	movwf	28	;volatile
  6314                           
  6315                           ;klondike.c: 247: TMR2ON = 1;
  6316  10C9  151C               	bsf	28,2	;volatile
  6317                           
  6318                           ;klondike.c: 248: TRISCbits.TRISC5 = 0;
  6319  10CA  0021               	movlb	1	; select bank1
  6320  10CB  128E               	bcf	14,5	;volatile
  6321                           
  6322                           ;klondike.c: 249: PWM1OE=1;
  6323  10CC  002C               	movlb	12	; select bank12
  6324  10CD  1713               	bsf	19,6	;volatile
  6325  10CE  0008               	return
  6326  10CF                     __end_of_InitFAN:	
  6327                           
  6328                           	psect	text18
  6329  0E5F                     __ptext18:	
  6330 ;; *************** function _DetectAsics *****************
  6331 ;; Defined at:
  6332 ;;		line 146 in file "klondike.c"
  6333 ;; Parameters:    Size  Location     Type
  6334 ;;		None
  6335 ;; Auto vars:     Size  Location     Type
  6336 ;;  x               1   17[BANK0 ] unsigned char 
  6337 ;; Return value:  Size  Location     Type
  6338 ;;		None               void
  6339 ;; Registers used:
  6340 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6341 ;; Tracked objects:
  6342 ;;		On entry : 0/0
  6343 ;;		On exit  : 0/0
  6344 ;;		Unchanged: 0/0
  6345 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6346 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6347 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6348 ;;      Temps:          0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
  6349 ;;      Totals:         0       3       7       0       0       0       0       0       0       0       0       0       
      +0       0
  6350 ;;Total ram usage:       10 bytes
  6351 ;; Hardware stack levels used:    1
  6352 ;; Hardware stack levels required when called:    5
  6353 ;; This function calls:
  6354 ;;		___awdiv
  6355 ;; This function is called by:
  6356 ;;		_UserInit
  6357 ;; This function uses a non-reentrant model
  6358 ;;
  6359                           
  6360                           
  6361                           ;psect for function _DetectAsics
  6362  0E5F                     _DetectAsics:	
  6363                           
  6364                           ;klondike.c: 147: Status.ChipCount = 16;
  6365                           
  6366                           ;incstack = 0
  6367                           ; Regs used in _DetectAsics: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6368  0E5F  3010               	movlw	16
  6369  0E60  0021               	movlb	1	; select bank1
  6370  0E61  00A8               	movwf	??_DetectAsics^(0+128)
  6371  0E62  0828               	movf	??_DetectAsics^(0+128),w
  6372  0E63  0022               	movlb	2	; select bank2
  6373  0E64  00DA               	movwf	(_Status^(0+256)+1)	;volatile
  6374                           
  6375                           ;klondike.c: 150: BankSize = (Status.ChipCount)/2;
  6376  0E65  3002               	movlw	2
  6377  0E66  0021               	movlb	1	; select bank1
  6378  0E67  00A0               	movwf	?___awdiv^(0+128)
  6379  0E68  3000               	movlw	0
  6380  0E69  00A1               	movwf	(?___awdiv^(0+128)+1)
  6381  0E6A  0022               	movlb	2	; select bank2
  6382  0E6B  085A               	movf	(_Status^(0+256)+1),w	;volatile
  6383  0E6C  0021               	movlb	1	; select bank1
  6384  0E6D  00A8               	movwf	??_DetectAsics^(0+128)
  6385  0E6E  01A9               	clrf	(??_DetectAsics^(0+128)+1)
  6386  0E6F  0828               	movf	??_DetectAsics^(0+128),w
  6387  0E70  00A2               	movwf	(?___awdiv^(0+128)+2)
  6388  0E71  0829               	movf	(??_DetectAsics+1)^(0+128),w
  6389  0E72  00A3               	movwf	((?___awdiv+1)^(0+128)+2)
  6390  0E73  3194  2432  318E   	fcall	___awdiv
  6391  0E76  0021               	movlb	1	; select bank1
  6392  0E77  0820               	movf	?___awdiv^(0+128),w
  6393  0E78  00AA               	movwf	(??_DetectAsics+2)^(0+128)
  6394  0E79  082A               	movf	(??_DetectAsics+2)^(0+128),w
  6395  0E7A  0022               	movlb	2	; select bank2
  6396  0E7B  00ED               	movwf	_BankSize^(0+256)
  6397                           
  6398                           ;klondike.c: 151: Status.MaxCount = 16384 / BankSize / 2;
  6399  0E7C  086D               	movf	_BankSize^(0+256),w
  6400  0E7D  0021               	movlb	1	; select bank1
  6401  0E7E  00A8               	movwf	??_DetectAsics^(0+128)
  6402  0E7F  01A9               	clrf	(??_DetectAsics^(0+128)+1)
  6403  0E80  0828               	movf	??_DetectAsics^(0+128),w
  6404  0E81  00A0               	movwf	?___awdiv^(0+128)
  6405  0E82  0829               	movf	(??_DetectAsics+1)^(0+128),w
  6406  0E83  00A1               	movwf	(?___awdiv+1)^(0+128)
  6407  0E84  3000               	movlw	0
  6408  0E85  00A2               	movwf	(?___awdiv^(0+128)+2)
  6409  0E86  3040               	movlw	64
  6410  0E87  00A3               	movwf	(?___awdiv^(0+128)+3)
  6411  0E88  3194  2432  318E   	fcall	___awdiv
  6412  0E8B  0021               	movlb	1	; select bank1
  6413  0E8C  0821               	movf	(?___awdiv+1)^(0+128),w
  6414  0E8D  0020               	movlb	0	; select bank0
  6415  0E8E  01E0               	clrf	_DetectAsics$2853+1
  6416  0E8F  07E0               	addwf	_DetectAsics$2853+1,f
  6417  0E90  0021               	movlb	1	; select bank1
  6418  0E91  0820               	movf	?___awdiv^(0+128),w
  6419  0E92  0020               	movlb	0	; select bank0
  6420  0E93  01DF               	clrf	_DetectAsics$2853
  6421  0E94  07DF               	addwf	_DetectAsics$2853,f
  6422                           
  6423                           ;klondike.c: 151: Status.MaxCount = 16384 / BankSize / 2;
  6424  0E95  3002               	movlw	2
  6425  0E96  0021               	movlb	1	; select bank1
  6426  0E97  00A0               	movwf	?___awdiv^(0+128)
  6427  0E98  3000               	movlw	0
  6428  0E99  00A1               	movwf	(?___awdiv^(0+128)+1)
  6429  0E9A  0020               	movlb	0	; select bank0
  6430  0E9B  0860               	movf	_DetectAsics$2853+1,w
  6431  0E9C  0021               	movlb	1	; select bank1
  6432  0E9D  01A3               	clrf	((?___awdiv+1)^(0+128)+2)
  6433  0E9E  07A3               	addwf	((?___awdiv+1)^(0+128)+2),f
  6434  0E9F  0020               	movlb	0	; select bank0
  6435  0EA0  085F               	movf	_DetectAsics$2853,w
  6436  0EA1  0021               	movlb	1	; select bank1
  6437  0EA2  01A2               	clrf	(?___awdiv^(0+128)+2)
  6438  0EA3  07A2               	addwf	(?___awdiv^(0+128)+2),f
  6439  0EA4  3194  2432  318E   	fcall	___awdiv
  6440  0EA7  0021               	movlb	1	; select bank1
  6441  0EA8  0821               	movf	(?___awdiv+1)^(0+128),w
  6442  0EA9  0022               	movlb	2	; select bank2
  6443  0EAA  01E4               	clrf	((_Status+1)^(0+256)+10)	;volatile
  6444  0EAB  07E4               	addwf	((_Status+1)^(0+256)+10),f	;volatile
  6445  0EAC  0021               	movlb	1	; select bank1
  6446  0EAD  0820               	movf	?___awdiv^(0+128),w
  6447  0EAE  0022               	movlb	2	; select bank2
  6448  0EAF  01E3               	clrf	(_Status^(0+256)+10)	;volatile
  6449  0EB0  07E3               	addwf	(_Status^(0+256)+10),f	;volatile
  6450                           
  6451                           ;klondike.c: 153: NonceRanges[0] = 0;
  6452  0EB1  3000               	movlw	0
  6453  0EB2  0026               	movlb	6	; select bank6
  6454  0EB3  00A3               	movwf	(_NonceRanges+3)^(0+768)
  6455  0EB4  3000               	movlw	0
  6456  0EB5  00A2               	movwf	(_NonceRanges+2)^(0+768)
  6457  0EB6  3000               	movlw	0
  6458  0EB7  00A1               	movwf	(_NonceRanges+1)^(0+768)
  6459  0EB8  3000               	movlw	0
  6460  0EB9  00A0               	movwf	_NonceRanges^(0+768)
  6461                           
  6462                           ;klondike.c: 154: for(BYTE x = 1; x < BankSize; x++)
  6463  0EBA  0020               	movlb	0	; select bank0
  6464  0EBB  01E1               	clrf	DetectAsics@x
  6465  0EBC  0AE1               	incf	DetectAsics@x,f
  6466  0EBD                     l6419:	
  6467  0EBD  0022               	movlb	2	; select bank2
  6468  0EBE  086D               	movf	_BankSize^(0+256),w
  6469  0EBF  0020               	movlb	0	; select bank0
  6470  0EC0  0261               	subwf	DetectAsics@x,w
  6471  0EC1  1803               	btfsc	3,0
  6472  0EC2  2F0D               	goto	l6421
  6473                           
  6474                           ;klondike.c: 155: NonceRanges[x] = NonceRanges[x-1] + BankRanges[BankSize-1];
  6475  0EC3  0022               	movlb	2	; select bank2
  6476  0EC4  086D               	movf	_BankSize^(0+256),w
  6477  0EC5  0021               	movlb	1	; select bank1
  6478  0EC6  00A8               	movwf	??_DetectAsics^(0+128)
  6479  0EC7  3001               	movlw	1
  6480  0EC8                     u6565:	
  6481  0EC8  35A8               	lslf	??_DetectAsics^(0+128),f
  6482  0EC9  3EFF               	addlw	-1
  6483  0ECA  1D03               	skipz
  6484  0ECB  2EC8               	goto	u6565
  6485  0ECC  3528               	lslf	??_DetectAsics^(0+128),w
  6486  0ECD  3EFC               	addlw	252
  6487  0ECE  3E40               	addlw	_BankRanges& (0+255)
  6488  0ECF  0086               	movwf	6
  6489  0ED0  3003               	movlw	3	; select bank6/7
  6490  0ED1  0087               	movwf	7
  6491  0ED2  3F40               	moviw [0]fsr1
  6492  0ED3  00A9               	movwf	(??_DetectAsics+1)^(0+128)
  6493  0ED4  3F41               	moviw [1]fsr1
  6494  0ED5  00AA               	movwf	((??_DetectAsics+1)^(0+128)+1)
  6495  0ED6  3F42               	moviw [2]fsr1
  6496  0ED7  00AB               	movwf	((??_DetectAsics+1)^(0+128)+2)
  6497  0ED8  3F43               	moviw [3]fsr1
  6498  0ED9  00AC               	movwf	((??_DetectAsics+1)^(0+128)+3)
  6499  0EDA  0020               	movlb	0	; select bank0
  6500  0EDB  0861               	movf	DetectAsics@x,w
  6501  0EDC  0021               	movlb	1	; select bank1
  6502  0EDD  00AD               	movwf	(??_DetectAsics+5)^(0+128)
  6503  0EDE  3001               	movlw	1
  6504  0EDF                     u6575:	
  6505  0EDF  35AD               	lslf	(??_DetectAsics+5)^(0+128),f
  6506  0EE0  3EFF               	addlw	-1
  6507  0EE1  1D03               	skipz
  6508  0EE2  2EDF               	goto	u6575
  6509  0EE3  352D               	lslf	(??_DetectAsics+5)^(0+128),w
  6510  0EE4  3EFC               	addlw	252
  6511  0EE5  3E20               	addlw	_NonceRanges& (0+255)
  6512  0EE6  0086               	movwf	6
  6513  0EE7  3003               	movlw	3	; select bank6/7
  6514  0EE8  0087               	movwf	7
  6515  0EE9  3F40               	moviw [0]fsr1
  6516  0EEA  07A9               	addwf	(??_DetectAsics+1)^(0+128),f
  6517  0EEB  3F41               	moviw [1]fsr1
  6518  0EEC  3DAA               	addwfc	((??_DetectAsics+1)^(0+128)+1),f
  6519  0EED  3F42               	moviw [2]fsr1
  6520  0EEE  3DAB               	addwfc	((??_DetectAsics+1)^(0+128)+2),f
  6521  0EEF  3F43               	moviw [3]fsr1
  6522  0EF0  3DAC               	addwfc	((??_DetectAsics+1)^(0+128)+3),f
  6523  0EF1  0020               	movlb	0	; select bank0
  6524  0EF2  0861               	movf	DetectAsics@x,w
  6525  0EF3  0021               	movlb	1	; select bank1
  6526  0EF4  00AE               	movwf	(??_DetectAsics+6)^(0+128)
  6527  0EF5  3001               	movlw	1
  6528  0EF6                     u6585:	
  6529  0EF6  35AE               	lslf	(??_DetectAsics+6)^(0+128),f
  6530  0EF7  3EFF               	addlw	-1
  6531  0EF8  1D03               	skipz
  6532  0EF9  2EF6               	goto	u6585
  6533  0EFA  352E               	lslf	(??_DetectAsics+6)^(0+128),w
  6534  0EFB  3E20               	addlw	_NonceRanges& (0+255)
  6535  0EFC  0086               	movwf	6
  6536  0EFD  3003               	movlw	3	; select bank6/7
  6537  0EFE  0087               	movwf	7
  6538  0EFF  0829               	movf	(??_DetectAsics+1)^(0+128),w
  6539  0F00  3FC0               	movwi [0]fsr1
  6540  0F01  082A               	movf	(??_DetectAsics+2)^(0+128),w
  6541  0F02  3FC1               	movwi [1]fsr1
  6542  0F03  082B               	movf	(??_DetectAsics+3)^(0+128),w
  6543  0F04  3FC2               	movwi [2]fsr1
  6544  0F05  082C               	movf	(??_DetectAsics+4)^(0+128),w
  6545  0F06  3FC3               	movwi [3]fsr1
  6546  0F07  3001               	movlw	1
  6547  0F08  00A8               	movwf	??_DetectAsics^(0+128)
  6548  0F09  0828               	movf	??_DetectAsics^(0+128),w
  6549  0F0A  0020               	movlb	0	; select bank0
  6550  0F0B  07E1               	addwf	DetectAsics@x,f
  6551  0F0C  2EBD               	goto	l6419
  6552  0F0D                     l6421:	
  6553                           
  6554                           ;klondike.c: 157: Status.State ='R';
  6555  0F0D  3052               	movlw	82
  6556  0F0E  0021               	movlb	1	; select bank1
  6557  0F0F  00A8               	movwf	??_DetectAsics^(0+128)
  6558  0F10  0828               	movf	??_DetectAsics^(0+128),w
  6559  0F11  0022               	movlb	2	; select bank2
  6560  0F12  00D9               	movwf	_Status^(0+256)	;volatile
  6561                           
  6562                           ;klondike.c: 158: Status.HashCount = 0;
  6563  0F13  01E1               	clrf	(_Status^(0+256)+8)	;volatile
  6564  0F14  01E2               	clrf	((_Status+1)^(0+256)+8)	;volatile
  6565  0F15  0008               	return
  6566  0F16                     __end_of_DetectAsics:	
  6567                           
  6568                           	psect	text19
  6569  1432                     __ptext19:	
  6570 ;; *************** function ___awdiv *****************
  6571 ;; Defined at:
  6572 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.20\sources\pic\awdiv.c"
  6573 ;; Parameters:    Size  Location     Type
  6574 ;;  divisor         2    0[BANK1 ] int 
  6575 ;;  dividend        2    2[BANK1 ] int 
  6576 ;; Auto vars:     Size  Location     Type
  6577 ;;  quotient        2    6[BANK1 ] int 
  6578 ;;  sign            1    5[BANK1 ] unsigned char 
  6579 ;;  counter         1    4[BANK1 ] unsigned char 
  6580 ;; Return value:  Size  Location     Type
  6581 ;;                  2    0[BANK1 ] int 
  6582 ;; Registers used:
  6583 ;;		wreg, status,2, status,0
  6584 ;; Tracked objects:
  6585 ;;		On entry : 0/0
  6586 ;;		On exit  : 0/0
  6587 ;;		Unchanged: 0/0
  6588 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6589 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  6590 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  6591 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6592 ;;      Totals:         0       1       8       0       0       0       0       0       0       0       0       0       
      +0       0
  6593 ;;Total ram usage:        9 bytes
  6594 ;; Hardware stack levels used:    1
  6595 ;; Hardware stack levels required when called:    4
  6596 ;; This function calls:
  6597 ;;		Nothing
  6598 ;; This function is called by:
  6599 ;;		_DetectAsics
  6600 ;; This function uses a non-reentrant model
  6601 ;;
  6602                           
  6603                           
  6604                           ;psect for function ___awdiv
  6605  1432                     ___awdiv:	
  6606                           
  6607                           ;incstack = 0
  6608                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  6609  1432  0021               	movlb	1	; select bank1
  6610  1433  01A5               	clrf	___awdiv@sign^(0+128)
  6611  1434  1FA1               	btfss	(___awdiv@divisor+1)^(0+128),7
  6612  1435  2C3D               	goto	l6541
  6613  1436  09A0               	comf	___awdiv@divisor^(0+128),f
  6614  1437  09A1               	comf	(___awdiv@divisor+1)^(0+128),f
  6615  1438  0AA0               	incf	___awdiv@divisor^(0+128),f
  6616  1439  1903               	skipnz
  6617  143A  0AA1               	incf	(___awdiv@divisor+1)^(0+128),f
  6618  143B  01A5               	clrf	___awdiv@sign^(0+128)
  6619  143C  0AA5               	incf	___awdiv@sign^(0+128),f
  6620  143D                     l6541:	
  6621  143D  1FA3               	btfss	(___awdiv@dividend+1)^(0+128),7
  6622  143E  2C4A               	goto	l6547
  6623  143F  09A2               	comf	___awdiv@dividend^(0+128),f
  6624  1440  09A3               	comf	(___awdiv@dividend+1)^(0+128),f
  6625  1441  0AA2               	incf	___awdiv@dividend^(0+128),f
  6626  1442  1903               	skipnz
  6627  1443  0AA3               	incf	(___awdiv@dividend+1)^(0+128),f
  6628  1444  3001               	movlw	1
  6629  1445  0020               	movlb	0	; select bank0
  6630  1446  00DE               	movwf	??___awdiv
  6631  1447  085E               	movf	??___awdiv,w
  6632  1448  0021               	movlb	1	; select bank1
  6633  1449  06A5               	xorwf	___awdiv@sign^(0+128),f
  6634  144A                     l6547:	
  6635  144A  01A6               	clrf	___awdiv@quotient^(0+128)
  6636  144B  01A7               	clrf	(___awdiv@quotient+1)^(0+128)
  6637  144C  0821               	movf	(___awdiv@divisor+1)^(0+128),w
  6638  144D  0420               	iorwf	___awdiv@divisor^(0+128),w
  6639  144E  1903               	skipnz
  6640  144F  2C7B               	goto	l6569
  6641  1450  01A4               	clrf	___awdiv@counter^(0+128)
  6642  1451  0AA4               	incf	___awdiv@counter^(0+128),f
  6643  1452                     l6557:	
  6644  1452  1BA1               	btfsc	(___awdiv@divisor+1)^(0+128),7
  6645  1453  2C60               	goto	l6559
  6646  1454  3001               	movlw	1
  6647  1455                     u6805:	
  6648  1455  35A0               	lslf	___awdiv@divisor^(0+128),f
  6649  1456  0DA1               	rlf	(___awdiv@divisor+1)^(0+128),f
  6650  1457  0B89               	decfsz	9,f
  6651  1458  2C55               	goto	u6805
  6652  1459  3001               	movlw	1
  6653  145A  0020               	movlb	0	; select bank0
  6654  145B  00DE               	movwf	??___awdiv
  6655  145C  085E               	movf	??___awdiv,w
  6656  145D  0021               	movlb	1	; select bank1
  6657  145E  07A4               	addwf	___awdiv@counter^(0+128),f
  6658  145F  2C52               	goto	l6557
  6659  1460                     l6559:	
  6660  1460  3001               	movlw	1
  6661  1461                     u6825:	
  6662  1461  35A6               	lslf	___awdiv@quotient^(0+128),f
  6663  1462  0DA7               	rlf	(___awdiv@quotient+1)^(0+128),f
  6664  1463  0B89               	decfsz	9,f
  6665  1464  2C61               	goto	u6825
  6666  1465  0821               	movf	(___awdiv@divisor+1)^(0+128),w
  6667  1466  0223               	subwf	(___awdiv@dividend+1)^(0+128),w
  6668  1467  1D03               	skipz
  6669  1468  2C6B               	goto	u6835
  6670  1469  0820               	movf	___awdiv@divisor^(0+128),w
  6671  146A  0222               	subwf	___awdiv@dividend^(0+128),w
  6672  146B                     u6835:	
  6673  146B  1C03               	skipc
  6674  146C  2C72               	goto	l6565
  6675  146D  0820               	movf	___awdiv@divisor^(0+128),w
  6676  146E  02A2               	subwf	___awdiv@dividend^(0+128),f
  6677  146F  0821               	movf	(___awdiv@divisor+1)^(0+128),w
  6678  1470  3BA3               	subwfb	(___awdiv@dividend+1)^(0+128),f
  6679  1471  1426               	bsf	___awdiv@quotient^(0+128),0
  6680  1472                     l6565:	
  6681  1472  3001               	movlw	1
  6682  1473                     u6845:	
  6683  1473  36A1               	lsrf	(___awdiv@divisor+1)^(0+128),f
  6684  1474  0CA0               	rrf	___awdiv@divisor^(0+128),f
  6685  1475  0B89               	decfsz	9,f
  6686  1476  2C73               	goto	u6845
  6687  1477  3001               	movlw	1
  6688  1478  02A4               	subwf	___awdiv@counter^(0+128),f
  6689  1479  1D03               	btfss	3,2
  6690  147A  2C60               	goto	l6559
  6691  147B                     l6569:	
  6692  147B  0825               	movf	___awdiv@sign^(0+128),w
  6693  147C  1903               	btfsc	3,2
  6694  147D  2C83               	goto	l6573
  6695  147E  09A6               	comf	___awdiv@quotient^(0+128),f
  6696  147F  09A7               	comf	(___awdiv@quotient+1)^(0+128),f
  6697  1480  0AA6               	incf	___awdiv@quotient^(0+128),f
  6698  1481  1903               	skipnz
  6699  1482  0AA7               	incf	(___awdiv@quotient+1)^(0+128),f
  6700  1483                     l6573:	
  6701  1483  0827               	movf	(___awdiv@quotient+1)^(0+128),w
  6702  1484  01A1               	clrf	(?___awdiv+1)^(0+128)
  6703  1485  07A1               	addwf	(?___awdiv+1)^(0+128),f
  6704  1486  0826               	movf	___awdiv@quotient^(0+128),w
  6705  1487  01A0               	clrf	?___awdiv^(0+128)
  6706  1488  07A0               	addwf	?___awdiv^(0+128),f
  6707  1489  0008               	return
  6708  148A                     __end_of___awdiv:	
  6709                           
  6710                           	psect	text20
  6711  123F                     __ptext20:	
  6712 ;; *************** function _WorkTick *****************
  6713 ;; Defined at:
  6714 ;;		line 164 in file "klondike.c"
  6715 ;; Parameters:    Size  Location     Type
  6716 ;;		None
  6717 ;; Auto vars:     Size  Location     Type
  6718 ;;		None
  6719 ;; Return value:  Size  Location     Type
  6720 ;;		None               void
  6721 ;; Registers used:
  6722 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6723 ;; Tracked objects:
  6724 ;;		On entry : 0/0
  6725 ;;		On exit  : 0/0
  6726 ;;		Unchanged: 0/0
  6727 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6728 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6729 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6730 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6731 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6732 ;;Total ram usage:        1 bytes
  6733 ;; Hardware stack levels used:    1
  6734 ;; Hardware stack levels required when called:    4
  6735 ;; This function calls:
  6736 ;;		Nothing
  6737 ;; This function is called by:
  6738 ;;		_main
  6739 ;; This function uses a non-reentrant model
  6740 ;;
  6741                           
  6742                           
  6743                           ;psect for function _WorkTick
  6744  123F                     _WorkTick:	
  6745                           
  6746                           ;klondike.c: 165: TMR0 += HashTime;
  6747                           
  6748                           ;incstack = 0
  6749                           ; Regs used in _WorkTick: [wreg+fsr1l+fsr1h+status,2+status,0]
  6750  123F  0021               	movlb	1	; select bank1
  6751  1240  086F               	movf	_HashTime^(0+128),w
  6752  1241  0020               	movlb	0	; select bank0
  6753  1242  00DE               	movwf	??_WorkTick
  6754  1243  085E               	movf	??_WorkTick,w
  6755  1244  0795               	addwf	21,f	;volatile
  6756                           
  6757                           ;klondike.c: 166: TMR0IF = 0;
  6758  1245  110B               	bcf	11,2	;volatile
  6759                           
  6760                           ;klondike.c: 168: if((Status.State == 'W') && (++Status.HashCount == Status.MaxCount)) {
  6761  1246  0022               	movlb	2	; select bank2
  6762  1247  0859               	movf	_Status^(0+256),w	;volatile
  6763  1248  3A57               	xorlw	87
  6764  1249  1D03               	skipz
  6765  124A  2A69               	goto	l6439
  6766  124B  3008               	movlw	8
  6767  124C  3E59               	addlw	_Status& (0+255)
  6768  124D  0086               	movwf	6
  6769  124E  3001               	movlw	1	; select bank2/3
  6770  124F  0087               	movwf	7
  6771  1250  3001               	movlw	1
  6772  1251  0781               	addwf	1,f
  6773  1252  3141               	addfsr 1,1
  6774  1253  1803               	skipnc
  6775  1254  0A81               	incf	1,f
  6776  1255  317F               	addfsr 1,-1
  6777  1256  3F40               	moviw [0]fsr1
  6778  1257  0663               	xorwf	(_Status^(0+256)+10),w	;volatile
  6779  1258  1D03               	skipz
  6780  1259  2A5C               	goto	u6615
  6781  125A  3F41               	moviw [1]fsr1
  6782  125B  0664               	xorwf	((_Status+1)^(0+256)+10),w	;volatile
  6783  125C                     u6615:	
  6784  125C  1D03               	skipz
  6785  125D  2A69               	goto	l6439
  6786                           
  6787                           ;klondike.c: 169: if(Status.WorkQC > 0) {
  6788  125E  085C               	movf	(_Status^(0+256)+3),w	;volatile
  6789  125F  1903               	btfsc	3,2
  6790  1260  2A63               	goto	l6437
  6791                           
  6792                           ;klondike.c: 170: Status.State = 'P';
  6793  1261  3050               	movlw	80
  6794  1262  2A64               	goto	L6
  6795  1263                     l6437:	
  6796                           ;klondike.c: 171: }
  6797                           
  6798                           
  6799                           ;klondike.c: 172: else {
  6800                           ;klondike.c: 173: Status.State = 'R';
  6801  1263  3052               	movlw	82
  6802  1264                     L6:	
  6803  1264  0020               	movlb	0	; select bank0
  6804  1265  00DE               	movwf	??_WorkTick
  6805  1266  085E               	movf	??_WorkTick,w
  6806  1267  0022               	movlb	2	; select bank2
  6807  1268  00D9               	movwf	_Status^(0+256)	;volatile
  6808  1269                     l6439:	
  6809                           
  6810                           ;klondike.c: 174: }
  6811                           ;klondike.c: 175: }
  6812                           ;klondike.c: 177: if(++SlowTick == 0) {
  6813  1269  3001               	movlw	1
  6814  126A  0020               	movlb	0	; select bank0
  6815  126B  00DE               	movwf	??_WorkTick
  6816  126C  085E               	movf	??_WorkTick,w
  6817  126D  0021               	movlb	1	; select bank1
  6818  126E  07D9               	addwf	_SlowTick^(0+128),f
  6819  126F  1D03               	btfss	3,2
  6820  1270  0008               	return
  6821                           
  6822                           ;klondike.c: 178: LATAbits.LATA5 = 0;;
  6823  1271  0022               	movlb	2	; select bank2
  6824  1272  128C               	bcf	12,5	;volatile
  6825                           
  6826                           ;klondike.c: 179: Status.Temp = ADRESH;
  6827  1273  0021               	movlb	1	; select bank1
  6828  1274  081C               	movf	28,w	;volatile
  6829  1275  0020               	movlb	0	; select bank0
  6830  1276  00DE               	movwf	??_WorkTick
  6831  1277  085E               	movf	??_WorkTick,w
  6832  1278  0022               	movlb	2	; select bank2
  6833  1279  00DE               	movwf	(_Status^(0+256)+5)	;volatile
  6834                           
  6835                           ;klondike.c: 181: ADCON0bits.GO_nDONE = 1;
  6836  127A  0021               	movlb	1	; select bank1
  6837  127B  149D               	bsf	29,1	;volatile
  6838  127C  0008               	return
  6839  127D                     __end_of_WorkTick:	
  6840                           
  6841                           	psect	text21
  6842  0F16                     __ptext21:	
  6843 ;; *************** function _USBDeviceTasks *****************
  6844 ;; Defined at:
  6845 ;;		line 669 in file "../USB/usb_device.c"
  6846 ;; Parameters:    Size  Location     Type
  6847 ;;		None
  6848 ;; Auto vars:     Size  Location     Type
  6849 ;;  i               1   32[BANK1 ] unsigned char 
  6850 ;; Return value:  Size  Location     Type
  6851 ;;		None               void
  6852 ;; Registers used:
  6853 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  6854 ;; Tracked objects:
  6855 ;;		On entry : 0/0
  6856 ;;		On exit  : 0/0
  6857 ;;		Unchanged: 0/0
  6858 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6859 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6860 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6861 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  6862 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  6863 ;;Total ram usage:        3 bytes
  6864 ;; Hardware stack levels used:    1
  6865 ;; Hardware stack levels required when called:   12
  6866 ;; This function calls:
  6867 ;;		_USBDeviceInit
  6868 ;;		_USBWakeFromSuspend
  6869 ;;		_USBSuspend
  6870 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
  6871 ;;		_USBCtrlEPAllowStatusStage
  6872 ;;		_USBStallHandler
  6873 ;;		_USBCtrlEPService
  6874 ;; This function is called by:
  6875 ;;		_main
  6876 ;; This function uses a non-reentrant model
  6877 ;;
  6878                           
  6879                           
  6880                           ;psect for function _USBDeviceTasks
  6881  0F16                     _USBDeviceTasks:	
  6882                           
  6883                           ;usb_device.c: 735: }
  6884                           ;usb_device.c: 757: if(USBDeviceState == DETACHED_STATE)
  6885                           
  6886                           ;usb_device.c: 734: return;
  6887                           
  6888                           ;usb_device.c: 733: PIR2bits.USBIF = 0;;
  6889                           
  6890                           ;usb_device.c: 705: USBDeviceState = DETACHED_STATE;
  6891                           
  6892                           ;usb_device.c: 702: UIE = 0;
  6893                           
  6894                           ;usb_device.c: 697: {
  6895                           ;usb_device.c: 699: UCON = 0;
  6896                           
  6897                           ;usb_device.c: 670: BYTE i;
  6898                           ;usb_device.c: 696: if (1 != 1)
  6899                           
  6900                           ;incstack = 0
  6901                           ; Regs used in _USBDeviceTasks: [allreg]
  6902  0F16  0021               	movlb	1	; select bank1
  6903  0F17  08DC               	movf	_USBDeviceState^(0+128),f
  6904  0F18  1D03               	skipz
  6905  0F19  2F2A               	goto	l5541
  6906                           
  6907                           ;usb_device.c: 758: {
  6908                           ;usb_device.c: 760: UCON = 0;
  6909  0F1A  003D               	movlb	29	; select bank29
  6910  0F1B  018E               	clrf	14	;volatile
  6911                           
  6912                           ;usb_device.c: 763: UIE = 0;
  6913  0F1C  0192               	clrf	18	;volatile
  6914                           
  6915                           ;usb_device.c: 767: { UCFG = 0x10 | 0x00 | 0x04 | 0x02; UEIE = 0x9F; UIE = 0x39 | 0x40 |
      +                           0x02; };
  6916  0F1D  3016               	movlw	22
  6917  0F1E  0091               	movwf	17	;volatile
  6918  0F1F  309F               	movlw	159
  6919  0F20  0097               	movwf	23	;volatile
  6920  0F21  307B               	movlw	123
  6921  0F22  0092               	movwf	18	;volatile
  6922  0F23                     l140:	
  6923                           ;usb_device.c: 770: while(!UCONbits.USBEN){UCONbits.USBEN = 1;}
  6924                           
  6925  0F23  198E               	btfsc	14,3	;volatile
  6926  0F24  2F27               	goto	l142
  6927  0F25  158E               	bsf	14,3	;volatile
  6928  0F26  2F23               	goto	l140
  6929  0F27                     l142:	
  6930                           
  6931                           ;usb_device.c: 773: USBDeviceState = ATTACHED_STATE;
  6932  0F27  0021               	movlb	1	; select bank1
  6933  0F28  01DC               	clrf	_USBDeviceState^(0+128)
  6934  0F29  0ADC               	incf	_USBDeviceState^(0+128),f
  6935  0F2A                     l5541:	
  6936                           
  6937                           ;usb_device.c: 778: }
  6938                           ;usb_device.c: 781: if(USBDeviceState == ATTACHED_STATE)
  6939  0F2A  085C               	movf	_USBDeviceState^(0+128),w
  6940  0F2B  3A01               	xorlw	1
  6941  0F2C  1D03               	skipz
  6942  0F2D  2F3A               	goto	l5553
  6943                           
  6944                           ;usb_device.c: 782: {
  6945                           ;usb_device.c: 792: if(!UCONbits.SE0)
  6946  0F2E  003D               	movlb	29	; select bank29
  6947  0F2F  1A8E               	btfsc	14,5	;volatile
  6948  0F30  2F3A               	goto	l5553
  6949                           
  6950                           ;usb_device.c: 793: {
  6951                           ;usb_device.c: 794: UIR = 0;;
  6952  0F31  0190               	clrf	16	;volatile
  6953                           
  6954                           ;usb_device.c: 796: UIE=0;
  6955  0F32  0192               	clrf	18	;volatile
  6956                           
  6957                           ;usb_device.c: 798: UIEbits.URSTIE = 1;
  6958  0F33  1412               	bsf	18,0	;volatile
  6959                           
  6960                           ;usb_device.c: 799: UIEbits.IDLEIE = 1;
  6961  0F34  1612               	bsf	18,4	;volatile
  6962                           
  6963                           ;usb_device.c: 800: USBDeviceState = POWERED_STATE;
  6964  0F35  3002               	movlw	2
  6965  0F36  0021               	movlb	1	; select bank1
  6966  0F37  00BE               	movwf	??_USBDeviceTasks^(0+128)
  6967  0F38  083E               	movf	??_USBDeviceTasks^(0+128),w
  6968  0F39  00DC               	movwf	_USBDeviceState^(0+128)
  6969  0F3A                     l5553:	
  6970                           
  6971                           ;usb_device.c: 801: }
  6972                           ;usb_device.c: 802: }
  6973                           ;usb_device.c: 818: if(UIRbits.ACTVIF && UIEbits.ACTVIE)
  6974  0F3A  003D               	movlb	29	; select bank29
  6975  0F3B  1910               	btfsc	16,2	;volatile
  6976  0F3C  1D12               	btfss	18,2	;volatile
  6977  0F3D  2F47               	goto	l5561
  6978                           
  6979                           ;usb_device.c: 819: {
  6980                           ;usb_device.c: 820: (UIR &= 0xFB);
  6981  0F3E  30FB               	movlw	251
  6982  0F3F  0021               	movlb	1	; select bank1
  6983  0F40  00BE               	movwf	??_USBDeviceTasks^(0+128)
  6984  0F41  083E               	movf	??_USBDeviceTasks^(0+128),w
  6985  0F42  003D               	movlb	29	; select bank29
  6986  0F43  0590               	andwf	16,f	;volatile
  6987                           
  6988                           ;usb_device.c: 824: USBWakeFromSuspend();
  6989  0F44  3190  2059  318F   	fcall	_USBWakeFromSuspend
  6990  0F47                     l5561:	
  6991                           
  6992                           ;usb_device.c: 826: }
  6993                           ;usb_device.c: 831: if(UCONbits.SUSPND==1)
  6994  0F47  003D               	movlb	29	; select bank29
  6995  0F48  1C8E               	btfss	14,1	;volatile
  6996  0F49  2F4D               	goto	l146
  6997                           
  6998                           ;usb_device.c: 832: {
  6999                           ;usb_device.c: 833: PIR2bits.USBIF = 0;;
  7000  0F4A  0020               	movlb	0	; select bank0
  7001  0F4B  1112               	bcf	18,2	;volatile
  7002                           
  7003                           ;usb_device.c: 834: return;
  7004  0F4C  0008               	return
  7005  0F4D                     l146:	
  7006                           
  7007                           ;usb_device.c: 835: }
  7008                           ;usb_device.c: 847: if(UIRbits.URSTIF && UIEbits.URSTIE)
  7009  0F4D  1810               	btfsc	16,0	;volatile
  7010  0F4E  1C12               	btfss	18,0	;volatile
  7011  0F4F  2F5D               	goto	l5573
  7012                           
  7013                           ;usb_device.c: 848: {
  7014                           ;usb_device.c: 849: USBDeviceInit();
  7015  0F50  318C  244E  318F   	fcall	_USBDeviceInit
  7016                           
  7017                           ;usb_device.c: 853: ;
  7018                           ;usb_device.c: 855: USBDeviceState = DEFAULT_STATE;
  7019  0F53  3004               	movlw	4
  7020  0F54  0021               	movlb	1	; select bank1
  7021  0F55  00BE               	movwf	??_USBDeviceTasks^(0+128)
  7022  0F56  083E               	movf	??_USBDeviceTasks^(0+128),w
  7023  0F57  00DC               	movwf	_USBDeviceState^(0+128)
  7024                           
  7025                           ;usb_device.c: 865: (UIR &= 0xFE);
  7026  0F58  30FE               	movlw	254
  7027  0F59  00BE               	movwf	??_USBDeviceTasks^(0+128)
  7028  0F5A  083E               	movf	??_USBDeviceTasks^(0+128),w
  7029  0F5B  003D               	movlb	29	; select bank29
  7030  0F5C  0590               	andwf	16,f	;volatile
  7031  0F5D                     l5573:	
  7032                           
  7033                           ;usb_device.c: 866: }
  7034                           ;usb_device.c: 871: if(UIRbits.IDLEIF && UIEbits.IDLEIE)
  7035  0F5D  1A10               	btfsc	16,4	;volatile
  7036  0F5E  1E12               	btfss	18,4	;volatile
  7037  0F5F  2F69               	goto	l5581
  7038                           
  7039                           ;usb_device.c: 872: {
  7040                           ;usb_device.c: 877: USBSuspend();
  7041  0F60  3190  209E  318F   	fcall	_USBSuspend
  7042                           
  7043                           ;usb_device.c: 880: (UIR &= 0xEF);
  7044  0F63  30EF               	movlw	239
  7045  0F64  0021               	movlb	1	; select bank1
  7046  0F65  00BE               	movwf	??_USBDeviceTasks^(0+128)
  7047  0F66  083E               	movf	??_USBDeviceTasks^(0+128),w
  7048  0F67  003D               	movlb	29	; select bank29
  7049  0F68  0590               	andwf	16,f	;volatile
  7050  0F69                     l5581:	
  7051                           
  7052                           ;usb_device.c: 881: }
  7053                           ;usb_device.c: 883: if(UIRbits.SOFIF)
  7054  0F69  1F10               	btfss	16,6	;volatile
  7055  0F6A  2F8C               	goto	l5597
  7056                           
  7057                           ;usb_device.c: 884: {
  7058                           ;usb_device.c: 885: if(UIEbits.SOFIE)
  7059  0F6B  1F12               	btfss	18,6	;volatile
  7060  0F6C  2F7A               	goto	l5587
  7061                           
  7062                           ;usb_device.c: 886: {
  7063                           ;usb_device.c: 887: USER_USB_CALLBACK_EVENT_HANDLER(EVENT_SOF,0,1);
  7064  0F6D  3073               	movlw	115
  7065  0F6E  0021               	movlb	1	; select bank1
  7066  0F6F  00AD               	movwf	?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)
  7067  0F70  3000               	movlw	0
  7068  0F71  00AE               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)+1)
  7069  0F72  01AF               	clrf	(?_USER_USB_CALLBACK_EVENT_HANDLER+2)^(0+128)
  7070  0F73  3001               	movlw	1
  7071  0F74  00B0               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)+3)
  7072  0F75  3000               	movlw	0
  7073  0F76  00B1               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)+4)
  7074  0F77  3192  227D  318F   	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
  7075  0F7A                     l5587:	
  7076                           
  7077                           ;usb_device.c: 888: }
  7078                           ;usb_device.c: 889: (UIR &= 0xBF);
  7079  0F7A  30BF               	movlw	191
  7080  0F7B  0021               	movlb	1	; select bank1
  7081  0F7C  00BE               	movwf	??_USBDeviceTasks^(0+128)
  7082  0F7D  083E               	movf	??_USBDeviceTasks^(0+128),w
  7083  0F7E  003D               	movlb	29	; select bank29
  7084  0F7F  0590               	andwf	16,f	;volatile
  7085                           
  7086                           ;usb_device.c: 914: if(USBStatusStageTimeoutCounter != 0u)
  7087  0F80  0021               	movlb	1	; select bank1
  7088  0F81  0861               	movf	_USBStatusStageTimeoutCounter^(0+128),w
  7089  0F82  1903               	btfsc	3,2
  7090  0F83  2F86               	goto	l5593
  7091                           
  7092                           ;usb_device.c: 915: {
  7093                           ;usb_device.c: 916: USBStatusStageTimeoutCounter--;
  7094  0F84  3001               	movlw	1
  7095  0F85  02E1               	subwf	_USBStatusStageTimeoutCounter^(0+128),f
  7096  0F86                     l5593:	
  7097                           
  7098                           ;usb_device.c: 917: }
  7099                           ;usb_device.c: 923: if(USBStatusStageTimeoutCounter == 0)
  7100  0F86  08E1               	movf	_USBStatusStageTimeoutCounter^(0+128),f
  7101  0F87  1D03               	skipz
  7102  0F88  2F8C               	goto	l5597
  7103                           
  7104                           ;usb_device.c: 924: {
  7105                           ;usb_device.c: 925: USBCtrlEPAllowStatusStage();
  7106  0F89  3195  2549  318F   	fcall	_USBCtrlEPAllowStatusStage
  7107  0F8C                     l5597:	
  7108                           
  7109                           ;usb_device.c: 926: }
  7110                           ;usb_device.c: 928: }
  7111                           ;usb_device.c: 930: if(UIRbits.STALLIF && UIEbits.STALLIE)
  7112  0F8C  003D               	movlb	29	; select bank29
  7113  0F8D  1A90               	btfsc	16,5	;volatile
  7114  0F8E  1E92               	btfss	18,5	;volatile
  7115  0F8F  2F93               	goto	l5603
  7116                           
  7117                           ;usb_device.c: 931: {
  7118                           ;usb_device.c: 932: USBStallHandler();
  7119  0F90  3191  2162  318F   	fcall	_USBStallHandler
  7120  0F93                     l5603:	
  7121                           
  7122                           ;usb_device.c: 933: }
  7123                           ;usb_device.c: 935: if(UIRbits.UERRIF && UIEbits.UERRIE)
  7124  0F93  003D               	movlb	29	; select bank29
  7125  0F94  1890               	btfsc	16,1	;volatile
  7126  0F95  1C92               	btfss	18,1	;volatile
  7127  0F96  2FA6               	goto	l5611
  7128                           
  7129                           ;usb_device.c: 936: {
  7130                           ;usb_device.c: 937: USER_USB_CALLBACK_EVENT_HANDLER(EVENT_BUS_ERROR,0,1);
  7131  0F97  30FF               	movlw	255
  7132  0F98  0021               	movlb	1	; select bank1
  7133  0F99  00AD               	movwf	?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)
  7134  0F9A  307F               	movlw	127
  7135  0F9B  00AE               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)+1)
  7136  0F9C  01AF               	clrf	(?_USER_USB_CALLBACK_EVENT_HANDLER+2)^(0+128)
  7137  0F9D  3001               	movlw	1
  7138  0F9E  00B0               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)+3)
  7139  0F9F  3000               	movlw	0
  7140  0FA0  00B1               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)+4)
  7141  0FA1  3192  227D  318F   	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
  7142                           
  7143                           ;usb_device.c: 938: UEIR = 0;;
  7144  0FA4  003D               	movlb	29	; select bank29
  7145  0FA5  0193               	clrf	19	;volatile
  7146  0FA6                     l5611:	
  7147                           
  7148                           ;usb_device.c: 946: }
  7149                           ;usb_device.c: 953: if(USBDeviceState < DEFAULT_STATE)
  7150  0FA6  3004               	movlw	4
  7151  0FA7  0021               	movlb	1	; select bank1
  7152  0FA8  025C               	subwf	_USBDeviceState^(0+128),w
  7153  0FA9  1803               	skipnc
  7154  0FAA  2FAE               	goto	l155
  7155                           
  7156                           ;usb_device.c: 954: {
  7157                           ;usb_device.c: 955: PIR2bits.USBIF = 0;;
  7158  0FAB  0020               	movlb	0	; select bank0
  7159  0FAC  1112               	bcf	18,2	;volatile
  7160                           
  7161                           ;usb_device.c: 956: return;
  7162  0FAD  0008               	return
  7163  0FAE                     l155:	
  7164                           
  7165                           ;usb_device.c: 957: }
  7166                           ;usb_device.c: 962: if(UIEbits.TRNIE)
  7167  0FAE  003D               	movlb	29	; select bank29
  7168  0FAF  1D92               	btfss	18,3	;volatile
  7169  0FB0  2FFD               	goto	l156
  7170                           
  7171                           ;usb_device.c: 963: {
  7172                           ;usb_device.c: 964: for(i = 0; i < 4u; i++)
  7173  0FB1  0021               	movlb	1	; select bank1
  7174  0FB2  01C0               	clrf	USBDeviceTasks@i^(0+128)
  7175  0FB3  2FF6               	goto	L8
  7176  0FB4                     l5621:	
  7177                           
  7178                           ;usb_device.c: 967: {
  7179                           ;usb_device.c: 969: USTATcopy.Val = USTAT;
  7180  0FB4  080F               	movf	15,w	;volatile
  7181  0FB5  0021               	movlb	1	; select bank1
  7182  0FB6  00BE               	movwf	??_USBDeviceTasks^(0+128)
  7183  0FB7  083E               	movf	??_USBDeviceTasks^(0+128),w
  7184  0FB8  00EC               	movwf	_USTATcopy^(0+128)
  7185                           
  7186                           ;usb_device.c: 970: endpoint_number = USTATcopy.endpoint_number;
  7187  0FB9  0C6C               	rrf	_USTATcopy^(0+128),w
  7188  0FBA  00BE               	movwf	??_USBDeviceTasks^(0+128)
  7189  0FBB  0CBE               	rrf	??_USBDeviceTasks^(0+128),f
  7190  0FBC  0C3E               	rrf	??_USBDeviceTasks^(0+128),w
  7191  0FBD  390F               	andlw	15
  7192  0FBE  00BF               	movwf	(??_USBDeviceTasks+1)^(0+128)
  7193  0FBF  083F               	movf	(??_USBDeviceTasks+1)^(0+128),w
  7194  0FC0  00E3               	movwf	_endpoint_number^(0+128)
  7195                           
  7196                           ;usb_device.c: 972: (UIR &= 0xF7);
  7197  0FC1  30F7               	movlw	247
  7198  0FC2  00BE               	movwf	??_USBDeviceTasks^(0+128)
  7199  0FC3  083E               	movf	??_USBDeviceTasks^(0+128),w
  7200  0FC4  003D               	movlb	29	; select bank29
  7201  0FC5  0590               	andwf	16,f	;volatile
  7202                           
  7203                           ;usb_device.c: 977: if(USTATcopy.direction == 0)
  7204  0FC6  0021               	movlb	1	; select bank1
  7205  0FC7  196C               	btfsc	_USTATcopy^(0+128),2
  7206  0FC8  2FCC               	goto	l5631
  7207                           
  7208                           ;usb_device.c: 978: {
  7209                           ;usb_device.c: 979: ep_data_out[endpoint_number].bits.ping_pong_state ^= 1;
  7210  0FC9  0863               	movf	_endpoint_number^(0+128),w
  7211  0FCA  3ECF               	addlw	_ep_data_out& (0+255)
  7212  0FCB  2FCE               	goto	L7
  7213  0FCC                     l5631:	
  7214                           ;usb_device.c: 980: }
  7215                           
  7216                           
  7217                           ;usb_device.c: 981: else
  7218                           ;usb_device.c: 982: {
  7219                           ;usb_device.c: 983: ep_data_in[endpoint_number].bits.ping_pong_state ^= 1;
  7220  0FCC  0863               	movf	_endpoint_number^(0+128),w
  7221  0FCD  3ECD               	addlw	_ep_data_in& (0+255)
  7222  0FCE                     L7:	
  7223  0FCE  0086               	movwf	6
  7224  0FCF  0187               	clrf	7
  7225  0FD0  0801               	movf	1,w
  7226  0FD1  3901               	andlw	1
  7227  0FD2  00BE               	movwf	??_USBDeviceTasks^(0+128)
  7228  0FD3  3001               	movlw	1
  7229  0FD4  06BE               	xorwf	??_USBDeviceTasks^(0+128),f
  7230  0FD5  0801               	movf	1,w
  7231  0FD6  063E               	xorwf	??_USBDeviceTasks^(0+128),w
  7232  0FD7  39FE               	andlw	-2
  7233  0FD8  063E               	xorwf	??_USBDeviceTasks^(0+128),w
  7234  0FD9  0081               	movwf	1
  7235                           
  7236                           ;usb_device.c: 984: }
  7237                           ;usb_device.c: 989: if(endpoint_number == 0)
  7238  0FDA  08E3               	movf	_endpoint_number^(0+128),f
  7239  0FDB  1D03               	skipz
  7240  0FDC  2FE1               	goto	l5637
  7241                           
  7242                           ;usb_device.c: 990: {
  7243                           ;usb_device.c: 991: USBCtrlEPService();
  7244  0FDD  3196  2696  318F   	fcall	_USBCtrlEPService
  7245                           
  7246                           ;usb_device.c: 992: }
  7247  0FE0  2FF1               	goto	l5639
  7248  0FE1                     l5637:	
  7249                           
  7250                           ;usb_device.c: 993: else
  7251                           ;usb_device.c: 994: {
  7252                           ;usb_device.c: 995: USER_USB_CALLBACK_EVENT_HANDLER(EVENT_TRANSFER,(BYTE*)&USTATcopy.Val
      +                          ,0);
  7253  0FE1  3072               	movlw	114
  7254  0FE2  0021               	movlb	1	; select bank1
  7255  0FE3  00AD               	movwf	?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)
  7256  0FE4  3000               	movlw	0
  7257  0FE5  00AE               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)+1)
  7258  0FE6  30EC               	movlw	_USTATcopy& (0+255)
  7259  0FE7  00BE               	movwf	??_USBDeviceTasks^(0+128)
  7260  0FE8  083E               	movf	??_USBDeviceTasks^(0+128),w
  7261  0FE9  00AF               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER+2)^(0+128)
  7262  0FEA  3000               	movlw	0
  7263  0FEB  00B0               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)+3)
  7264  0FEC  3000               	movlw	0
  7265  0FED  00B1               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)+4)
  7266  0FEE  3192  227D  318F   	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
  7267  0FF1                     l5639:	
  7268                           ;usb_device.c: 998: else
  7269                           ;usb_device.c: 999: break;
  7270                           
  7271                           ;usb_device.c: 996: }
  7272                           ;usb_device.c: 997: }
  7273                           
  7274  0FF1  3001               	movlw	1
  7275  0FF2  0021               	movlb	1	; select bank1
  7276  0FF3  00BE               	movwf	??_USBDeviceTasks^(0+128)
  7277  0FF4  083E               	movf	??_USBDeviceTasks^(0+128),w
  7278  0FF5  07C0               	addwf	USBDeviceTasks@i^(0+128),f
  7279  0FF6                     L8:	
  7280  0FF6  3004               	movlw	4
  7281  0FF7  0240               	subwf	USBDeviceTasks@i^(0+128),w
  7282  0FF8  1803               	btfsc	3,0
  7283  0FF9  2FFD               	goto	l156
  7284                           
  7285                           ;usb_device.c: 965: {
  7286                           ;usb_device.c: 966: if(UIRbits.TRNIF)
  7287  0FFA  003D               	movlb	29	; select bank29
  7288  0FFB  1990               	btfsc	16,3	;volatile
  7289  0FFC  2FB4               	goto	l5621
  7290  0FFD                     l156:	
  7291                           
  7292                           ;usb_device.c: 1000: }
  7293                           ;usb_device.c: 1001: }
  7294                           ;usb_device.c: 1003: PIR2bits.USBIF = 0;;
  7295  0FFD  0020               	movlb	0	; select bank0
  7296  0FFE  1112               	bcf	18,2	;volatile
  7297  0FFF  0008               	return
  7298  1000                     __end_of_USBDeviceTasks:	
  7299                           
  7300                           	psect	text22
  7301  1696                     __ptext22:	
  7302 ;; *************** function _USBCtrlEPService *****************
  7303 ;; Defined at:
  7304 ;;		line 2523 in file "../USB/usb_device.c"
  7305 ;; Parameters:    Size  Location     Type
  7306 ;;		None
  7307 ;; Auto vars:     Size  Location     Type
  7308 ;;  setup_cnt       1   29[BANK1 ] unsigned char 
  7309 ;; Return value:  Size  Location     Type
  7310 ;;		None               void
  7311 ;; Registers used:
  7312 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  7313 ;; Tracked objects:
  7314 ;;		On entry : 0/0
  7315 ;;		On exit  : 0/0
  7316 ;;		Unchanged: 0/0
  7317 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7318 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7319 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  7320 ;;      Temps:          0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  7321 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  7322 ;;Total ram usage:        4 bytes
  7323 ;; Hardware stack levels used:    1
  7324 ;; Hardware stack levels required when called:   11
  7325 ;; This function calls:
  7326 ;;		_USBCtrlTrfSetupHandler
  7327 ;;		_USBCtrlTrfOutHandler
  7328 ;;		_USBCtrlTrfInHandler
  7329 ;; This function is called by:
  7330 ;;		_USBDeviceTasks
  7331 ;; This function uses a non-reentrant model
  7332 ;;
  7333                           
  7334                           
  7335                           ;psect for function _USBCtrlEPService
  7336  1696                     _USBCtrlEPService:	
  7337                           
  7338                           ;usb_device.c: 2528: USBStatusStageTimeoutCounter = (BYTE)40;
  7339                           
  7340                           ;incstack = 0
  7341                           ; Regs used in _USBCtrlEPService: [allreg]
  7342  1696  3028               	movlw	40
  7343  1697  0021               	movlb	1	; select bank1
  7344  1698  00BA               	movwf	??_USBCtrlEPService^(0+128)
  7345  1699  083A               	movf	??_USBCtrlEPService^(0+128),w
  7346  169A  00E1               	movwf	_USBStatusStageTimeoutCounter^(0+128)
  7347                           
  7348                           ;usb_device.c: 2532: if((USTATcopy.Val & ~0x02) == 0x00)
  7349  169B  086C               	movf	_USTATcopy^(0+128),w
  7350  169C  39FD               	andlw	253
  7351  169D  1D03               	btfss	3,2
  7352  169E  2EFD               	goto	l5751
  7353                           
  7354                           ;usb_device.c: 2533: {
  7355                           ;usb_device.c: 2536: pBDTEntryEP0OutCurrent = (volatile BDT_ENTRY*)&BDT[(USTATcopy.Val &
      +                           0x7E)>>1];
  7356  169F  366C               	lsrf	_USTATcopy^(0+128),w
  7357  16A0  393F               	andlw	63
  7358  16A1  00BA               	movwf	??_USBCtrlEPService^(0+128)
  7359  16A2  3001               	movlw	1
  7360  16A3                     u5665:	
  7361  16A3  35BA               	lslf	??_USBCtrlEPService^(0+128),f
  7362  16A4  3EFF               	addlw	-1
  7363  16A5  1D03               	skipz
  7364  16A6  2EA3               	goto	u5665
  7365  16A7  353A               	lslf	??_USBCtrlEPService^(0+128),w
  7366  16A8  3E20               	addlw	32
  7367  16A9  00BB               	movwf	(??_USBCtrlEPService+1)^(0+128)
  7368  16AA  083B               	movf	(??_USBCtrlEPService+1)^(0+128),w
  7369  16AB  00E4               	movwf	_pBDTEntryEP0OutCurrent^(0+128)
  7370                           
  7371                           ;usb_device.c: 2544: pBDTEntryEP0OutNext = pBDTEntryEP0OutCurrent;
  7372  16AC  0864               	movf	_pBDTEntryEP0OutCurrent^(0+128),w
  7373  16AD  00BA               	movwf	??_USBCtrlEPService^(0+128)
  7374  16AE  083A               	movf	??_USBCtrlEPService^(0+128),w
  7375  16AF  0020               	movlb	0	; select bank0
  7376  16B0  00EC               	movwf	_pBDTEntryEP0OutNext
  7377                           
  7378                           ;usb_device.c: 2546: ((BYTE_VAL*)&pBDTEntryEP0OutNext)->Val ^= 0x0004;
  7379  16B1  3004               	movlw	4
  7380  16B2  0021               	movlb	1	; select bank1
  7381  16B3  00BA               	movwf	??_USBCtrlEPService^(0+128)
  7382  16B4  083A               	movf	??_USBCtrlEPService^(0+128),w
  7383  16B5  0020               	movlb	0	; select bank0
  7384  16B6  06EC               	xorwf	_pBDTEntryEP0OutNext,f
  7385                           
  7386                           ;usb_device.c: 2549: if(pBDTEntryEP0OutCurrent->STAT.PID == 0xD)
  7387  16B7  0021               	movlb	1	; select bank1
  7388  16B8  0864               	movf	_pBDTEntryEP0OutCurrent^(0+128),w
  7389  16B9  0086               	movwf	6
  7390  16BA  0187               	clrf	7
  7391  16BB  0C01               	rrf	1,w
  7392  16BC  0C89               	rrf	9,f
  7393  16BD  390F               	andlw	15
  7394  16BE  3A0D               	xorlw	13
  7395  16BF  1D03               	skipz
  7396  16C0  2EFA               	goto	l5749
  7397                           
  7398                           ;usb_device.c: 2550: {
  7399                           ;usb_device.c: 2551: unsigned char setup_cnt;
  7400                           ;usb_device.c: 2557: for(setup_cnt = 0; setup_cnt < 8u; setup_cnt++)
  7401  16C1  01BD               	clrf	USBCtrlEPService@setup_cnt^(0+128)
  7402  16C2  3008               	movlw	8
  7403  16C3  023D               	subwf	USBCtrlEPService@setup_cnt^(0+128),w
  7404  16C4  1803               	btfsc	3,0
  7405  16C5  2EEB               	goto	l5745
  7406  16C6                     l5739:	
  7407                           
  7408                           ;usb_device.c: 2558: {
  7409                           ;usb_device.c: 2559: *(BYTE*)((BYTE*)&SetupPkt + setup_cnt) = *(BYTE*)((void *)(pBDTEntr
      +                          yEP0OutCurrent->ADR));
  7410  16C6  0864               	movf	_pBDTEntryEP0OutCurrent^(0+128),w
  7411  16C7  3E02               	addlw	2
  7412  16C8  0086               	movwf	6
  7413  16C9  0187               	clrf	7
  7414  16CA  3F40               	moviw [0]fsr1
  7415  16CB  00BA               	movwf	??_USBCtrlEPService^(0+128)
  7416  16CC  3F41               	moviw [1]fsr1
  7417  16CD  00BB               	movwf	(??_USBCtrlEPService^(0+128)+1)
  7418  16CE  083A               	movf	??_USBCtrlEPService^(0+128),w
  7419  16CF  0086               	movwf	6
  7420  16D0  083B               	movf	(??_USBCtrlEPService+1)^(0+128),w
  7421  16D1  0087               	movwf	7
  7422  16D2  0801               	movf	1,w
  7423  16D3  00BC               	movwf	(??_USBCtrlEPService+2)^(0+128)
  7424  16D4  083D               	movf	USBCtrlEPService@setup_cnt^(0+128),w
  7425  16D5  3E40               	addlw	64
  7426  16D6  0086               	movwf	6
  7427  16D7  0187               	clrf	7
  7428  16D8  083C               	movf	(??_USBCtrlEPService+2)^(0+128),w
  7429  16D9  0081               	movwf	1
  7430                           
  7431                           ;usb_device.c: 2560: pBDTEntryEP0OutCurrent->ADR++;
  7432  16DA  0864               	movf	_pBDTEntryEP0OutCurrent^(0+128),w
  7433  16DB  3E02               	addlw	2
  7434  16DC  0086               	movwf	6
  7435  16DD  0187               	clrf	7
  7436  16DE  3001               	movlw	1
  7437  16DF  0781               	addwf	1,f
  7438  16E0  3141               	addfsr 1,1
  7439  16E1  1803               	skipnc
  7440  16E2  0A81               	incf	1,f
  7441  16E3  3001               	movlw	1
  7442  16E4  00BA               	movwf	??_USBCtrlEPService^(0+128)
  7443  16E5  083A               	movf	??_USBCtrlEPService^(0+128),w
  7444  16E6  07BD               	addwf	USBCtrlEPService@setup_cnt^(0+128),f
  7445  16E7  3008               	movlw	8
  7446  16E8  023D               	subwf	USBCtrlEPService@setup_cnt^(0+128),w
  7447  16E9  1C03               	skipc
  7448  16EA  2EC6               	goto	l5739
  7449  16EB                     l5745:	
  7450                           
  7451                           ;usb_device.c: 2561: }
  7452                           ;usb_device.c: 2562: pBDTEntryEP0OutCurrent->ADR = (((WORD)(&SetupPkt))& 0x7FFF);
  7453  16EB  3040               	movlw	64
  7454  16EC  00BA               	movwf	??_USBCtrlEPService^(0+128)
  7455  16ED  3000               	movlw	0
  7456  16EE  00BB               	movwf	(??_USBCtrlEPService^(0+128)+1)
  7457  16EF  0864               	movf	_pBDTEntryEP0OutCurrent^(0+128),w
  7458  16F0  3E02               	addlw	2
  7459  16F1  0086               	movwf	6
  7460  16F2  0187               	clrf	7
  7461  16F3  083A               	movf	??_USBCtrlEPService^(0+128),w
  7462  16F4  3FC0               	movwi [0]fsr1
  7463  16F5  083B               	movf	(??_USBCtrlEPService+1)^(0+128),w
  7464  16F6  3FC1               	movwi [1]fsr1
  7465                           
  7466                           ;usb_device.c: 2565: USBCtrlTrfSetupHandler();
  7467  16F7  3192  22BC         	fcall	_USBCtrlTrfSetupHandler
  7468                           
  7469                           ;usb_device.c: 2566: }
  7470  16F9  0008               	return
  7471  16FA                     l5749:	
  7472                           
  7473                           ;usb_device.c: 2567: else
  7474                           ;usb_device.c: 2568: {
  7475                           ;usb_device.c: 2570: USBCtrlTrfOutHandler();
  7476  16FA  3191  21D7         	fcall	_USBCtrlTrfOutHandler
  7477                           
  7478                           ;usb_device.c: 2571: }
  7479                           ;usb_device.c: 2572: }
  7480  16FC  0008               	return
  7481  16FD                     l5751:	
  7482                           
  7483                           ;usb_device.c: 2573: else if((USTATcopy.Val & ~0x02) == 0x04)
  7484  16FD  30FD               	movlw	253
  7485  16FE  0021               	movlb	1	; select bank1
  7486  16FF  056C               	andwf	_USTATcopy^(0+128),w
  7487  1700  00BA               	movwf	??_USBCtrlEPService^(0+128)
  7488  1701  083A               	movf	??_USBCtrlEPService^(0+128),w
  7489  1702  3A04               	xorlw	4
  7490  1703  1D03               	skipz
  7491  1704  0008               	return
  7492                           
  7493                           ;usb_device.c: 2574: {
  7494                           ;usb_device.c: 2577: USBCtrlTrfInHandler();
  7495  1705  3194  24E3         	fcall	_USBCtrlTrfInHandler
  7496  1707  0008               	return
  7497  1708                     __end_of_USBCtrlEPService:	
  7498                           
  7499                           	psect	text23
  7500  14E3                     __ptext23:	
  7501 ;; *************** function _USBCtrlTrfInHandler *****************
  7502 ;; Defined at:
  7503 ;;		line 2748 in file "../USB/usb_device.c"
  7504 ;; Parameters:    Size  Location     Type
  7505 ;;		None
  7506 ;; Auto vars:     Size  Location     Type
  7507 ;;  lastDTS         1   17[BANK0 ] unsigned char 
  7508 ;; Return value:  Size  Location     Type
  7509 ;;		None               void
  7510 ;; Registers used:
  7511 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7512 ;; Tracked objects:
  7513 ;;		On entry : 0/0
  7514 ;;		On exit  : 0/0
  7515 ;;		Unchanged: 0/0
  7516 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7517 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7518 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7519 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7520 ;;      Totals:         0       1       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7521 ;;Total ram usage:        3 bytes
  7522 ;; Hardware stack levels used:    1
  7523 ;; Hardware stack levels required when called:    5
  7524 ;; This function calls:
  7525 ;;		_USBCtrlTrfTxService
  7526 ;; This function is called by:
  7527 ;;		_USBCtrlEPService
  7528 ;; This function uses a non-reentrant model
  7529 ;;
  7530                           
  7531                           
  7532                           ;psect for function _USBCtrlTrfInHandler
  7533  14E3                     _USBCtrlTrfInHandler:	
  7534                           
  7535                           ;usb_device.c: 2749: BYTE lastDTS;
  7536                           ;usb_device.c: 2751: lastDTS = pBDTEntryIn[0]->STAT.DTS;
  7537                           
  7538                           ;incstack = 0
  7539                           ; Regs used in _USBCtrlTrfInHandler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7540  14E3  0021               	movlb	1	; select bank1
  7541  14E4  0851               	movf	_pBDTEntryIn^(0+128),w
  7542  14E5  0086               	movwf	6
  7543  14E6  0187               	clrf	7
  7544  14E7  3000               	movlw	0
  7545  14E8  1B01               	btfsc	1,6
  7546  14E9  3001               	movlw	1
  7547  14EA  0020               	movlb	0	; select bank0
  7548  14EB  00E1               	movwf	USBCtrlTrfInHandler@lastDTS
  7549                           
  7550                           ;usb_device.c: 2754: ((BYTE_VAL*)&pBDTEntryIn[0])->Val ^= 0x0004;
  7551  14EC  3004               	movlw	4
  7552  14ED  0021               	movlb	1	; select bank1
  7553  14EE  00A0               	movwf	??_USBCtrlTrfInHandler^(0+128)
  7554  14EF  0820               	movf	??_USBCtrlTrfInHandler^(0+128),w
  7555  14F0  06D1               	xorwf	_pBDTEntryIn^(0+128),f
  7556                           
  7557                           ;usb_device.c: 2759: if(USBDeviceState == ADR_PENDING_STATE)
  7558  14F1  085C               	movf	_USBDeviceState^(0+128),w
  7559  14F2  3A08               	xorlw	8
  7560  14F3  1D03               	skipz
  7561  14F4  2D03               	goto	l315
  7562                           
  7563                           ;usb_device.c: 2760: {
  7564                           ;usb_device.c: 2761: UADDR = SetupPkt.bDevADR.Val;
  7565  14F5  0020               	movlb	0	; select bank0
  7566  14F6  0842               	movf	66,w	;volatile
  7567  14F7  003D               	movlb	29	; select bank29
  7568  14F8  0096               	movwf	22	;volatile
  7569                           
  7570                           ;usb_device.c: 2762: if(UADDR != 0u)
  7571  14F9  0816               	movf	22,w	;volatile
  7572  14FA  1903               	btfsc	3,2
  7573  14FB  2CFE               	goto	l6087
  7574                           
  7575                           ;usb_device.c: 2763: {
  7576                           ;usb_device.c: 2764: USBDeviceState=ADDRESS_STATE;
  7577  14FC  3010               	movlw	16
  7578  14FD  2CFF               	goto	L9
  7579  14FE                     l6087:	
  7580                           ;usb_device.c: 2765: }
  7581                           
  7582                           
  7583                           ;usb_device.c: 2766: else
  7584                           ;usb_device.c: 2767: {
  7585                           ;usb_device.c: 2768: USBDeviceState=DEFAULT_STATE;
  7586  14FE  3004               	movlw	4
  7587  14FF                     L9:	
  7588  14FF  0021               	movlb	1	; select bank1
  7589  1500  00A0               	movwf	??_USBCtrlTrfInHandler^(0+128)
  7590  1501  0820               	movf	??_USBCtrlTrfInHandler^(0+128),w
  7591  1502  00DC               	movwf	_USBDeviceState^(0+128)
  7592  1503                     l315:	
  7593                           
  7594                           ;usb_device.c: 2769: }
  7595                           ;usb_device.c: 2770: }
  7596                           ;usb_device.c: 2773: if(controlTransferState == 1)
  7597  1503  0020               	movlb	0	; select bank0
  7598  1504  086B               	movf	_controlTransferState,w
  7599  1505  3A01               	xorlw	1
  7600  1506  1D03               	skipz
  7601  1507  2D3C               	goto	l318
  7602                           
  7603                           ;usb_device.c: 2774: {
  7604                           ;usb_device.c: 2775: pBDTEntryIn[0]->ADR = (((WORD)(CtrlTrfData))& 0x7FFF);
  7605  1508  3048               	movlw	72
  7606  1509  0021               	movlb	1	; select bank1
  7607  150A  00A0               	movwf	??_USBCtrlTrfInHandler^(0+128)
  7608  150B  3000               	movlw	0
  7609  150C  00A1               	movwf	(??_USBCtrlTrfInHandler^(0+128)+1)
  7610  150D  0851               	movf	_pBDTEntryIn^(0+128),w
  7611  150E  3E02               	addlw	2
  7612  150F  0086               	movwf	6
  7613  1510  0187               	clrf	7
  7614  1511  0820               	movf	??_USBCtrlTrfInHandler^(0+128),w
  7615  1512  3FC0               	movwi [0]fsr1
  7616  1513  0821               	movf	(??_USBCtrlTrfInHandler+1)^(0+128),w
  7617  1514  3FC1               	movwi [1]fsr1
  7618                           
  7619                           ;usb_device.c: 2776: USBCtrlTrfTxService();
  7620  1515  3189  217A  3194   	fcall	_USBCtrlTrfTxService
  7621                           
  7622                           ;usb_device.c: 2782: if(shortPacketStatus == 2)
  7623  1518  0020               	movlb	0	; select bank0
  7624  1519  086F               	movf	_shortPacketStatus,w
  7625  151A  3A02               	xorlw	2
  7626  151B  1D03               	skipz
  7627  151C  2D26               	goto	l6097
  7628                           
  7629                           ;usb_device.c: 2783: {
  7630                           ;usb_device.c: 2786: pBDTEntryIn[0]->STAT.Val = 0x80|0x04;
  7631  151D  3084               	movlw	132
  7632  151E  0021               	movlb	1	; select bank1
  7633  151F  00A0               	movwf	??_USBCtrlTrfInHandler^(0+128)
  7634  1520  0851               	movf	_pBDTEntryIn^(0+128),w
  7635  1521  0086               	movwf	6
  7636  1522  0187               	clrf	7
  7637  1523  0820               	movf	??_USBCtrlTrfInHandler^(0+128),w
  7638  1524  0081               	movwf	1
  7639                           
  7640                           ;usb_device.c: 2787: }
  7641  1525  0008               	return
  7642  1526                     l6097:	
  7643                           
  7644                           ;usb_device.c: 2788: else
  7645                           ;usb_device.c: 2789: {
  7646                           ;usb_device.c: 2790: if(lastDTS == 0)
  7647  1526  0020               	movlb	0	; select bank0
  7648  1527  08E1               	movf	USBCtrlTrfInHandler@lastDTS,f
  7649  1528  1D03               	skipz
  7650  1529  2D33               	goto	l6101
  7651                           
  7652                           ;usb_device.c: 2791: {
  7653                           ;usb_device.c: 2792: pBDTEntryIn[0]->STAT.Val = 0x80|0x40|(0x08 & 0x08);
  7654  152A  30C8               	movlw	200
  7655  152B  0021               	movlb	1	; select bank1
  7656  152C  00A0               	movwf	??_USBCtrlTrfInHandler^(0+128)
  7657  152D  0851               	movf	_pBDTEntryIn^(0+128),w
  7658  152E  0086               	movwf	6
  7659  152F  0187               	clrf	7
  7660  1530  0820               	movf	??_USBCtrlTrfInHandler^(0+128),w
  7661  1531  0081               	movwf	1
  7662                           
  7663                           ;usb_device.c: 2793: }
  7664  1532  0008               	return
  7665  1533                     l6101:	
  7666                           
  7667                           ;usb_device.c: 2794: else
  7668                           ;usb_device.c: 2795: {
  7669                           ;usb_device.c: 2796: pBDTEntryIn[0]->STAT.Val = 0x80|0x00|(0x08 & 0x08);
  7670  1533  3088               	movlw	136
  7671  1534  0021               	movlb	1	; select bank1
  7672  1535  00A0               	movwf	??_USBCtrlTrfInHandler^(0+128)
  7673  1536  0851               	movf	_pBDTEntryIn^(0+128),w
  7674  1537  0086               	movwf	6
  7675  1538  0187               	clrf	7
  7676  1539  0820               	movf	??_USBCtrlTrfInHandler^(0+128),w
  7677  153A  0081               	movwf	1
  7678                           
  7679                           ;usb_device.c: 2797: }
  7680                           ;usb_device.c: 2798: }
  7681                           ;usb_device.c: 2799: }
  7682  153B  0008               	return
  7683  153C                     l318:	
  7684                           
  7685                           ;usb_device.c: 2800: else
  7686                           ;usb_device.c: 2801: {
  7687                           ;usb_device.c: 2805: if(outPipes[0].info.bits.busy == 1)
  7688  153C  0023               	movlb	3	; select bank3
  7689  153D  1FA2               	btfss	(_outPipes^(0+384)+2),7
  7690  153E  2D46               	goto	l6109
  7691                           
  7692                           ;usb_device.c: 2806: {
  7693                           ;usb_device.c: 2807: if(outPipes[0].pFunc != (0))
  7694  153F  0825               	movf	(_outPipes+5)^(0+384),w
  7695  1540  1903               	btfsc	3,2
  7696  1541  2D45               	goto	l6107
  7697                           
  7698                           ;usb_device.c: 2808: {
  7699                           ;usb_device.c: 2809: outPipes[0].pFunc();
  7700  1542  0825               	movf	(_outPipes+5)^(0+384),w
  7701  1543  3194  2CE3         	ljmp	$	;if you get stuck here, you called an invalid pointer
  7702  1545                     l6107:	
  7703                           
  7704                           ;usb_device.c: 2810: }
  7705                           ;usb_device.c: 2811: outPipes[0].info.bits.busy = 0;
  7706  1545  13A2               	bcf	(_outPipes^(0+384)+2),7
  7707  1546                     l6109:	
  7708                           
  7709                           ;usb_device.c: 2812: }
  7710                           ;usb_device.c: 2814: controlTransferState = 0;
  7711  1546  0020               	movlb	0	; select bank0
  7712  1547  01EB               	clrf	_controlTransferState
  7713  1548  0008               	return
  7714  1549                     __end_of_USBCtrlTrfInHandler:	
  7715                           
  7716                           	psect	text24
  7717  11D7                     __ptext24:	
  7718 ;; *************** function _USBCtrlTrfOutHandler *****************
  7719 ;; Defined at:
  7720 ;;		line 2695 in file "../USB/usb_device.c"
  7721 ;; Parameters:    Size  Location     Type
  7722 ;;		None
  7723 ;; Auto vars:     Size  Location     Type
  7724 ;;		None
  7725 ;; Return value:  Size  Location     Type
  7726 ;;		None               void
  7727 ;; Registers used:
  7728 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7729 ;; Tracked objects:
  7730 ;;		On entry : 0/0
  7731 ;;		On exit  : 0/0
  7732 ;;		Unchanged: 0/0
  7733 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7734 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7735 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7736 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7737 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7738 ;;Total ram usage:        2 bytes
  7739 ;; Hardware stack levels used:    1
  7740 ;; Hardware stack levels required when called:    6
  7741 ;; This function calls:
  7742 ;;		_USBCtrlTrfRxService
  7743 ;; This function is called by:
  7744 ;;		_USBCtrlEPService
  7745 ;; This function uses a non-reentrant model
  7746 ;;
  7747                           
  7748                           
  7749                           ;psect for function _USBCtrlTrfOutHandler
  7750  11D7                     _USBCtrlTrfOutHandler:	
  7751                           
  7752                           ;usb_device.c: 2696: if(controlTransferState == 2)
  7753                           
  7754                           ;incstack = 0
  7755                           ; Regs used in _USBCtrlTrfOutHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7756  11D7  0020               	movlb	0	; select bank0
  7757  11D8  086B               	movf	_controlTransferState,w
  7758  11D9  3A02               	xorlw	2
  7759  11DA  1D03               	skipz
  7760  11DB  29DF               	goto	l6069
  7761                           
  7762                           ;usb_device.c: 2697: {
  7763                           ;usb_device.c: 2698: USBCtrlTrfRxService();
  7764  11DC  318D  25AD         	fcall	_USBCtrlTrfRxService
  7765                           
  7766                           ;usb_device.c: 2699: }
  7767  11DE  0008               	return
  7768  11DF                     l6069:	
  7769                           
  7770                           ;usb_device.c: 2700: else
  7771                           ;usb_device.c: 2701: {
  7772                           ;usb_device.c: 2704: controlTransferState = 0;
  7773  11DF  0020               	movlb	0	; select bank0
  7774  11E0  01EB               	clrf	_controlTransferState
  7775                           
  7776                           ;usb_device.c: 2711: if(BothEP0OutUOWNsSet == FALSE)
  7777  11E1  0021               	movlb	1	; select bank1
  7778  11E2  08D5               	movf	_BothEP0OutUOWNsSet^(0+128),f
  7779  11E3  1D03               	skipz
  7780  11E4  2A06               	goto	l6075
  7781                           
  7782                           ;usb_device.c: 2712: {
  7783                           ;usb_device.c: 2713: pBDTEntryEP0OutNext->CNT = 8;
  7784  11E5  3008               	movlw	8
  7785  11E6  00A2               	movwf	??_USBCtrlTrfOutHandler^(0+128)
  7786  11E7  0020               	movlb	0	; select bank0
  7787  11E8  0A6C               	incf	_pBDTEntryEP0OutNext,w
  7788  11E9  0086               	movwf	6
  7789  11EA  0187               	clrf	7
  7790  11EB  0021               	movlb	1	; select bank1
  7791  11EC  0822               	movf	??_USBCtrlTrfOutHandler^(0+128),w
  7792  11ED  0081               	movwf	1
  7793                           
  7794                           ;usb_device.c: 2714: pBDTEntryEP0OutNext->ADR = (((WORD)(&SetupPkt))& 0x7FFF);
  7795  11EE  3040               	movlw	64
  7796  11EF  00A2               	movwf	??_USBCtrlTrfOutHandler^(0+128)
  7797  11F0  3000               	movlw	0
  7798  11F1  00A3               	movwf	(??_USBCtrlTrfOutHandler^(0+128)+1)
  7799  11F2  0020               	movlb	0	; select bank0
  7800  11F3  086C               	movf	_pBDTEntryEP0OutNext,w
  7801  11F4  3E02               	addlw	2
  7802  11F5  0086               	movwf	6
  7803  11F6  0187               	clrf	7
  7804  11F7  0021               	movlb	1	; select bank1
  7805  11F8  0822               	movf	??_USBCtrlTrfOutHandler^(0+128),w
  7806  11F9  3FC0               	movwi [0]fsr1
  7807  11FA  0823               	movf	(??_USBCtrlTrfOutHandler+1)^(0+128),w
  7808  11FB  3FC1               	movwi [1]fsr1
  7809                           
  7810                           ;usb_device.c: 2715: pBDTEntryEP0OutNext->STAT.Val = 0x80|0x00|(0x08 & 0x08)|0x04;
  7811  11FC  308C               	movlw	140
  7812  11FD  00A2               	movwf	??_USBCtrlTrfOutHandler^(0+128)
  7813  11FE  0020               	movlb	0	; select bank0
  7814  11FF  086C               	movf	_pBDTEntryEP0OutNext,w
  7815  1200  0086               	movwf	6
  7816  1201  0187               	clrf	7
  7817  1202  0021               	movlb	1	; select bank1
  7818  1203  0822               	movf	??_USBCtrlTrfOutHandler^(0+128),w
  7819  1204  0081               	movwf	1
  7820                           
  7821                           ;usb_device.c: 2716: }
  7822  1205  0008               	return
  7823  1206                     l6075:	
  7824                           
  7825                           ;usb_device.c: 2717: else
  7826                           ;usb_device.c: 2718: {
  7827                           ;usb_device.c: 2719: BothEP0OutUOWNsSet = FALSE;
  7828  1206  01D5               	clrf	_BothEP0OutUOWNsSet^(0+128)
  7829  1207  0008               	return
  7830  1208                     __end_of_USBCtrlTrfOutHandler:	
  7831                           
  7832                           	psect	text25
  7833  0DAD                     __ptext25:	
  7834 ;; *************** function _USBCtrlTrfRxService *****************
  7835 ;; Defined at:
  7836 ;;		line 2019 in file "../USB/usb_device.c"
  7837 ;; Parameters:    Size  Location     Type
  7838 ;;		None
  7839 ;; Auto vars:     Size  Location     Type
  7840 ;;  byteToRead      1    1[BANK1 ] unsigned char 
  7841 ;;  i               1    0[BANK1 ] unsigned char 
  7842 ;; Return value:  Size  Location     Type
  7843 ;;		None               void
  7844 ;; Registers used:
  7845 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7846 ;; Tracked objects:
  7847 ;;		On entry : 0/0
  7848 ;;		On exit  : 0/0
  7849 ;;		Unchanged: 0/0
  7850 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7851 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7852 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7853 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7854 ;;      Totals:         0       2       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7855 ;;Total ram usage:        4 bytes
  7856 ;; Hardware stack levels used:    1
  7857 ;; Hardware stack levels required when called:    5
  7858 ;; This function calls:
  7859 ;;		_USBCtrlEPAllowStatusStage
  7860 ;; This function is called by:
  7861 ;;		_USBCtrlTrfOutHandler
  7862 ;; This function uses a non-reentrant model
  7863 ;;
  7864                           
  7865                           
  7866                           ;psect for function _USBCtrlTrfRxService
  7867  0DAD                     _USBCtrlTrfRxService:	
  7868                           
  7869                           ;usb_device.c: 2020: BYTE byteToRead;
  7870                           ;usb_device.c: 2021: BYTE i;
  7871                           ;usb_device.c: 2025: byteToRead = pBDTEntryEP0OutCurrent->CNT;
  7872                           
  7873                           ;incstack = 0
  7874                           ; Regs used in _USBCtrlTrfRxService: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7875  0DAD  0021               	movlb	1	; select bank1
  7876  0DAE  0864               	movf	_pBDTEntryEP0OutCurrent^(0+128),w
  7877  0DAF  0086               	movwf	6
  7878  0DB0  0187               	clrf	7
  7879  0DB1  3F41               	moviw [1]fsr1
  7880  0DB2  00A1               	movwf	USBCtrlTrfRxService@byteToRead^(0+128)
  7881                           
  7882                           ;usb_device.c: 2031: if(byteToRead > outPipes[0].wCount.Val)
  7883  0DB3  0821               	movf	USBCtrlTrfRxService@byteToRead^(0+128),w
  7884  0DB4  0020               	movlb	0	; select bank0
  7885  0DB5  00E0               	movwf	??_USBCtrlTrfRxService
  7886  0DB6  01E1               	clrf	??_USBCtrlTrfRxService+1
  7887  0DB7  0861               	movf	??_USBCtrlTrfRxService+1,w
  7888  0DB8  0023               	movlb	3	; select bank3
  7889  0DB9  0224               	subwf	((_outPipes+1)^(0+384)+3),w
  7890  0DBA  1D03               	skipz
  7891  0DBB  2DC0               	goto	u5925
  7892  0DBC  0020               	movlb	0	; select bank0
  7893  0DBD  0860               	movf	??_USBCtrlTrfRxService,w
  7894  0DBE  0023               	movlb	3	; select bank3
  7895  0DBF  0223               	subwf	(_outPipes^(0+384)+3),w
  7896  0DC0                     u5925:	
  7897  0DC0  1803               	skipnc
  7898  0DC1  2DC8               	goto	l5893
  7899                           
  7900                           ;usb_device.c: 2032: {
  7901                           ;usb_device.c: 2033: byteToRead = outPipes[0].wCount.Val;
  7902  0DC2  0823               	movf	(_outPipes^(0+384)+3),w
  7903  0DC3  0020               	movlb	0	; select bank0
  7904  0DC4  00E0               	movwf	??_USBCtrlTrfRxService
  7905  0DC5  0860               	movf	??_USBCtrlTrfRxService,w
  7906  0DC6  0021               	movlb	1	; select bank1
  7907  0DC7  00A1               	movwf	USBCtrlTrfRxService@byteToRead^(0+128)
  7908  0DC8                     l5893:	
  7909                           
  7910                           ;usb_device.c: 2034: }
  7911                           ;usb_device.c: 2036: outPipes[0].wCount.Val = outPipes[0].wCount.Val - byteToRead;
  7912  0DC8  3003               	movlw	3
  7913  0DC9  3EA0               	addlw	_outPipes& (0+255)
  7914  0DCA  0086               	movwf	6
  7915  0DCB  3001               	movlw	1	; select bank3/4
  7916  0DCC  0087               	movwf	7
  7917  0DCD  0021               	movlb	1	; select bank1
  7918  0DCE  0821               	movf	USBCtrlTrfRxService@byteToRead^(0+128),w
  7919  0DCF  0020               	movlb	0	; select bank0
  7920  0DD0  00E0               	movwf	??_USBCtrlTrfRxService
  7921  0DD1  01E1               	clrf	??_USBCtrlTrfRxService+1
  7922  0DD2  09E0               	comf	??_USBCtrlTrfRxService,f
  7923  0DD3  09E1               	comf	??_USBCtrlTrfRxService+1,f
  7924  0DD4  0AE0               	incf	??_USBCtrlTrfRxService,f
  7925  0DD5  1903               	skipnz
  7926  0DD6  0AE1               	incf	??_USBCtrlTrfRxService+1,f
  7927  0DD7  3F40               	moviw [0]fsr1
  7928  0DD8  0760               	addwf	??_USBCtrlTrfRxService,w
  7929  0DD9  0023               	movlb	3	; select bank3
  7930  0DDA  00A3               	movwf	(_outPipes^(0+384)+3)
  7931  0DDB  3F41               	moviw [1]fsr1
  7932  0DDC  0020               	movlb	0	; select bank0
  7933  0DDD  3D61               	addwfc	??_USBCtrlTrfRxService+1,w
  7934  0DDE  0023               	movlb	3	; select bank3
  7935  0DDF  00A4               	movwf	(_outPipes^(0+384)+4)
  7936                           
  7937                           ;usb_device.c: 2040: for(i=0;i<byteToRead;i++)
  7938  0DE0  0021               	movlb	1	; select bank1
  7939  0DE1  01A0               	clrf	USBCtrlTrfRxService@i^(0+128)
  7940  0DE2                     l5903:	
  7941  0DE2  0821               	movf	USBCtrlTrfRxService@byteToRead^(0+128),w
  7942  0DE3  0220               	subwf	USBCtrlTrfRxService@i^(0+128),w
  7943  0DE4  1803               	btfsc	3,0
  7944  0DE5  2E00               	goto	l5905
  7945                           
  7946                           ;usb_device.c: 2041: {
  7947                           ;usb_device.c: 2042: *outPipes[0].pDst.bRam++ = CtrlTrfData[i];
  7948  0DE6  0820               	movf	USBCtrlTrfRxService@i^(0+128),w
  7949  0DE7  3E48               	addlw	72
  7950  0DE8  0086               	movwf	6
  7951  0DE9  0187               	clrf	7
  7952  0DEA  0801               	movf	1,w
  7953  0DEB  0020               	movlb	0	; select bank0
  7954  0DEC  00E0               	movwf	??_USBCtrlTrfRxService
  7955  0DED  0023               	movlb	3	; select bank3
  7956  0DEE  0820               	movf	_outPipes^(0+384),w
  7957  0DEF  0086               	movwf	6
  7958  0DF0  0187               	clrf	7
  7959  0DF1  0020               	movlb	0	; select bank0
  7960  0DF2  0860               	movf	??_USBCtrlTrfRxService,w
  7961  0DF3  0081               	movwf	1
  7962  0DF4  3001               	movlw	1
  7963  0DF5  00E0               	movwf	??_USBCtrlTrfRxService
  7964  0DF6  0860               	movf	??_USBCtrlTrfRxService,w
  7965  0DF7  0023               	movlb	3	; select bank3
  7966  0DF8  07A0               	addwf	_outPipes^(0+384),f
  7967  0DF9  3001               	movlw	1
  7968  0DFA  0020               	movlb	0	; select bank0
  7969  0DFB  00E0               	movwf	??_USBCtrlTrfRxService
  7970  0DFC  0860               	movf	??_USBCtrlTrfRxService,w
  7971  0DFD  0021               	movlb	1	; select bank1
  7972  0DFE  07A0               	addwf	USBCtrlTrfRxService@i^(0+128),f
  7973  0DFF  2DE2               	goto	l5903
  7974  0E00                     l5905:	
  7975                           
  7976                           ;usb_device.c: 2043: }
  7977                           ;usb_device.c: 2047: if(outPipes[0].wCount.Val > 0)
  7978  0E00  3003               	movlw	3
  7979  0E01  3EA0               	addlw	_outPipes& (0+255)
  7980  0E02  0086               	movwf	6
  7981  0E03  3001               	movlw	1	; select bank3/4
  7982  0E04  0087               	movwf	7
  7983  0E05  0016               	moviw fsr1++
  7984  0E06  0401               	iorwf	1,w
  7985  0E07  1903               	skipnz
  7986  0E08  2E35               	goto	l5913
  7987                           
  7988                           ;usb_device.c: 2048: {
  7989                           ;usb_device.c: 2049: pBDTEntryEP0OutNext->CNT = 8;
  7990  0E09  3008               	movlw	8
  7991  0E0A  0020               	movlb	0	; select bank0
  7992  0E0B  00E0               	movwf	??_USBCtrlTrfRxService
  7993  0E0C  0A6C               	incf	_pBDTEntryEP0OutNext,w
  7994  0E0D  0086               	movwf	6
  7995  0E0E  0187               	clrf	7
  7996  0E0F  0860               	movf	??_USBCtrlTrfRxService,w
  7997  0E10  0081               	movwf	1
  7998                           
  7999                           ;usb_device.c: 2050: pBDTEntryEP0OutNext->ADR = (((WORD)(&CtrlTrfData))& 0x7FFF);
  8000  0E11  3048               	movlw	72
  8001  0E12  00E0               	movwf	??_USBCtrlTrfRxService
  8002  0E13  3000               	movlw	0
  8003  0E14  00E1               	movwf	??_USBCtrlTrfRxService+1
  8004  0E15  086C               	movf	_pBDTEntryEP0OutNext,w
  8005  0E16  3E02               	addlw	2
  8006  0E17  0086               	movwf	6
  8007  0E18  0187               	clrf	7
  8008  0E19  0860               	movf	??_USBCtrlTrfRxService,w
  8009  0E1A  3FC0               	movwi [0]fsr1
  8010  0E1B  0861               	movf	??_USBCtrlTrfRxService+1,w
  8011  0E1C  3FC1               	movwi [1]fsr1
  8012                           
  8013                           ;usb_device.c: 2051: if(pBDTEntryEP0OutCurrent->STAT.DTS == 0)
  8014  0E1D  0021               	movlb	1	; select bank1
  8015  0E1E  0864               	movf	_pBDTEntryEP0OutCurrent^(0+128),w
  8016  0E1F  0086               	movwf	6
  8017  0E20  0187               	clrf	7
  8018  0E21  1B01               	btfsc	1,6
  8019  0E22  2E2C               	goto	l5911
  8020                           
  8021                           ;usb_device.c: 2052: {
  8022                           ;usb_device.c: 2053: pBDTEntryEP0OutNext->STAT.Val = 0x80|0x40|(0x08 & 0x08);
  8023  0E23  30C8               	movlw	200
  8024  0E24  0020               	movlb	0	; select bank0
  8025  0E25  00E0               	movwf	??_USBCtrlTrfRxService
  8026  0E26  086C               	movf	_pBDTEntryEP0OutNext,w
  8027  0E27  0086               	movwf	6
  8028  0E28  0187               	clrf	7
  8029  0E29  0860               	movf	??_USBCtrlTrfRxService,w
  8030  0E2A  0081               	movwf	1
  8031                           
  8032                           ;usb_device.c: 2054: }
  8033  0E2B  0008               	return
  8034  0E2C                     l5911:	
  8035                           
  8036                           ;usb_device.c: 2055: else
  8037                           ;usb_device.c: 2056: {
  8038                           ;usb_device.c: 2057: pBDTEntryEP0OutNext->STAT.Val = 0x80|0x00|(0x08 & 0x08);
  8039  0E2C  3088               	movlw	136
  8040  0E2D  0020               	movlb	0	; select bank0
  8041  0E2E  00E0               	movwf	??_USBCtrlTrfRxService
  8042  0E2F  086C               	movf	_pBDTEntryEP0OutNext,w
  8043  0E30  0086               	movwf	6
  8044  0E31  0187               	clrf	7
  8045  0E32  0860               	movf	??_USBCtrlTrfRxService,w
  8046  0E33  0081               	movwf	1
  8047                           
  8048                           ;usb_device.c: 2058: }
  8049                           ;usb_device.c: 2059: }
  8050  0E34  0008               	return
  8051  0E35                     l5913:	
  8052                           
  8053                           ;usb_device.c: 2060: else
  8054                           ;usb_device.c: 2061: {
  8055                           ;usb_device.c: 2065: pBDTEntryEP0OutNext->CNT = 8;
  8056  0E35  3008               	movlw	8
  8057  0E36  0020               	movlb	0	; select bank0
  8058  0E37  00E0               	movwf	??_USBCtrlTrfRxService
  8059  0E38  0A6C               	incf	_pBDTEntryEP0OutNext,w
  8060  0E39  0086               	movwf	6
  8061  0E3A  0187               	clrf	7
  8062  0E3B  0860               	movf	??_USBCtrlTrfRxService,w
  8063  0E3C  0081               	movwf	1
  8064                           
  8065                           ;usb_device.c: 2066: pBDTEntryEP0OutNext->ADR = (((WORD)(&SetupPkt))& 0x7FFF);
  8066  0E3D  3040               	movlw	64
  8067  0E3E  00E0               	movwf	??_USBCtrlTrfRxService
  8068  0E3F  3000               	movlw	0
  8069  0E40  00E1               	movwf	??_USBCtrlTrfRxService+1
  8070  0E41  086C               	movf	_pBDTEntryEP0OutNext,w
  8071  0E42  3E02               	addlw	2
  8072  0E43  0086               	movwf	6
  8073  0E44  0187               	clrf	7
  8074  0E45  0860               	movf	??_USBCtrlTrfRxService,w
  8075  0E46  3FC0               	movwi [0]fsr1
  8076  0E47  0861               	movf	??_USBCtrlTrfRxService+1,w
  8077  0E48  3FC1               	movwi [1]fsr1
  8078                           
  8079                           ;usb_device.c: 2070: pBDTEntryEP0OutNext->STAT.Val = 0x80|0x04;
  8080  0E49  3084               	movlw	132
  8081  0E4A  00E0               	movwf	??_USBCtrlTrfRxService
  8082  0E4B  086C               	movf	_pBDTEntryEP0OutNext,w
  8083  0E4C  0086               	movwf	6
  8084  0E4D  0187               	clrf	7
  8085  0E4E  0860               	movf	??_USBCtrlTrfRxService,w
  8086  0E4F  0081               	movwf	1
  8087                           
  8088                           ;usb_device.c: 2077: if(outPipes[0].pFunc != (0))
  8089  0E50  0023               	movlb	3	; select bank3
  8090  0E51  0825               	movf	(_outPipes+5)^(0+384),w
  8091  0E52  1903               	btfsc	3,2
  8092  0E53  2E57               	goto	l5919
  8093                           
  8094                           ;usb_device.c: 2078: {
  8095                           ;usb_device.c: 2084: outPipes[0].pFunc();
  8096  0E54  0825               	movf	(_outPipes+5)^(0+384),w
  8097  0E55  318D  2DAD         	ljmp	$	;if you get stuck here, you called an invalid pointer
  8098  0E57                     l5919:	
  8099                           
  8100                           ;usb_device.c: 2089: }
  8101                           ;usb_device.c: 2090: outPipes[0].info.bits.busy = 0;
  8102  0E57  13A2               	bcf	(_outPipes^(0+384)+2),7
  8103                           
  8104                           ;usb_device.c: 2104: if(USBDeferStatusStagePacket == FALSE)
  8105  0E58  0020               	movlb	0	; select bank0
  8106  0E59  08EA               	movf	_USBDeferStatusStagePacket,f
  8107  0E5A  1D03               	skipz
  8108  0E5B  0008               	return
  8109                           
  8110                           ;usb_device.c: 2105: {
  8111                           ;usb_device.c: 2106: USBCtrlEPAllowStatusStage();
  8112  0E5C  3195  2549         	fcall	_USBCtrlEPAllowStatusStage
  8113  0E5E  0008               	return
  8114  0E5F                     __end_of_USBCtrlTrfRxService:	
  8115                           
  8116                           	psect	text26
  8117  12BC                     __ptext26:	
  8118 ;; *************** function _USBCtrlTrfSetupHandler *****************
  8119 ;; Defined at:
  8120 ;;		line 2623 in file "../USB/usb_device.c"
  8121 ;; Parameters:    Size  Location     Type
  8122 ;;		None
  8123 ;; Auto vars:     Size  Location     Type
  8124 ;;		None
  8125 ;; Return value:  Size  Location     Type
  8126 ;;		None               void
  8127 ;; Registers used:
  8128 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  8129 ;; Tracked objects:
  8130 ;;		On entry : 0/0
  8131 ;;		On exit  : 0/0
  8132 ;;		Unchanged: 0/0
  8133 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8134 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8135 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8136 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  8137 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  8138 ;;Total ram usage:        1 bytes
  8139 ;; Hardware stack levels used:    1
  8140 ;; Hardware stack levels required when called:   10
  8141 ;; This function calls:
  8142 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
  8143 ;;		_USBCtrlEPServiceComplete
  8144 ;;		_USBCheckStdRequest
  8145 ;; This function is called by:
  8146 ;;		_USBCtrlEPService
  8147 ;; This function uses a non-reentrant model
  8148 ;;
  8149                           
  8150                           
  8151                           ;psect for function _USBCtrlTrfSetupHandler
  8152  12BC                     _USBCtrlTrfSetupHandler:	
  8153                           
  8154                           ;usb_device.c: 2627: shortPacketStatus = 0;
  8155                           
  8156                           ;incstack = 0
  8157                           ; Regs used in _USBCtrlTrfSetupHandler: [allreg]
  8158  12BC  0020               	movlb	0	; select bank0
  8159  12BD  01EF               	clrf	_shortPacketStatus
  8160                           
  8161                           ;usb_device.c: 2628: USBDeferStatusStagePacket = FALSE;
  8162  12BE  01EA               	clrf	_USBDeferStatusStagePacket	;volatile
  8163                           
  8164                           ;usb_device.c: 2629: USBDeferINDataStagePackets = FALSE;
  8165  12BF  01E8               	clrf	_USBDeferINDataStagePackets	;volatile
  8166                           
  8167                           ;usb_device.c: 2630: USBDeferOUTDataStagePackets = FALSE;
  8168  12C0  01E9               	clrf	_USBDeferOUTDataStagePackets	;volatile
  8169                           
  8170                           ;usb_device.c: 2631: BothEP0OutUOWNsSet = FALSE;
  8171  12C1  0021               	movlb	1	; select bank1
  8172  12C2  01D5               	clrf	_BothEP0OutUOWNsSet^(0+128)
  8173                           
  8174                           ;usb_device.c: 2632: controlTransferState = 0;
  8175  12C3  0020               	movlb	0	; select bank0
  8176  12C4  01EB               	clrf	_controlTransferState
  8177                           
  8178                           ;usb_device.c: 2641: pBDTEntryIn[0]->STAT.Val &= ~(0x80);
  8179  12C5  307F               	movlw	127
  8180  12C6  0021               	movlb	1	; select bank1
  8181  12C7  00B9               	movwf	??_USBCtrlTrfSetupHandler^(0+128)
  8182  12C8  0851               	movf	_pBDTEntryIn^(0+128),w
  8183  12C9  0086               	movwf	6
  8184  12CA  0187               	clrf	7
  8185  12CB  0839               	movf	??_USBCtrlTrfSetupHandler^(0+128),w
  8186  12CC  0581               	andwf	1,f
  8187                           
  8188                           ;usb_device.c: 2642: ((BYTE_VAL*)&pBDTEntryIn[0])->Val ^= 0x0004;
  8189  12CD  3004               	movlw	4
  8190  12CE  00B9               	movwf	??_USBCtrlTrfSetupHandler^(0+128)
  8191  12CF  0839               	movf	??_USBCtrlTrfSetupHandler^(0+128),w
  8192  12D0  06D1               	xorwf	_pBDTEntryIn^(0+128),f
  8193                           
  8194                           ;usb_device.c: 2643: pBDTEntryIn[0]->STAT.Val &= ~(0x80);
  8195  12D1  307F               	movlw	127
  8196  12D2  00B9               	movwf	??_USBCtrlTrfSetupHandler^(0+128)
  8197  12D3  0851               	movf	_pBDTEntryIn^(0+128),w
  8198  12D4  0086               	movwf	6
  8199  12D5  0187               	clrf	7
  8200  12D6  0839               	movf	??_USBCtrlTrfSetupHandler^(0+128),w
  8201  12D7  0581               	andwf	1,f
  8202                           
  8203                           ;usb_device.c: 2644: ((BYTE_VAL*)&pBDTEntryIn[0])->Val ^= 0x0004;
  8204  12D8  3004               	movlw	4
  8205  12D9  00B9               	movwf	??_USBCtrlTrfSetupHandler^(0+128)
  8206  12DA  0839               	movf	??_USBCtrlTrfSetupHandler^(0+128),w
  8207  12DB  06D1               	xorwf	_pBDTEntryIn^(0+128),f
  8208                           
  8209                           ;usb_device.c: 2645: pBDTEntryEP0OutNext->STAT.Val &= ~(0x80);
  8210  12DC  307F               	movlw	127
  8211  12DD  00B9               	movwf	??_USBCtrlTrfSetupHandler^(0+128)
  8212  12DE  0020               	movlb	0	; select bank0
  8213  12DF  086C               	movf	_pBDTEntryEP0OutNext,w
  8214  12E0  0086               	movwf	6
  8215  12E1  0187               	clrf	7
  8216  12E2  0021               	movlb	1	; select bank1
  8217  12E3  0839               	movf	??_USBCtrlTrfSetupHandler^(0+128),w
  8218  12E4  0581               	andwf	1,f
  8219                           
  8220                           ;usb_device.c: 2647: inPipes[0].info.Val = 0;
  8221  12E5  01E7               	clrf	(_inPipes^(0+128)+2)
  8222                           
  8223                           ;usb_device.c: 2648: inPipes[0].wCount.Val = 0;
  8224  12E6  01E8               	clrf	(_inPipes^(0+128)+3)
  8225  12E7  01E9               	clrf	((_inPipes+1)^(0+128)+3)
  8226                           
  8227                           ;usb_device.c: 2649: outPipes[0].info.Val = 0;
  8228  12E8  0023               	movlb	3	; select bank3
  8229  12E9  01A2               	clrf	(_outPipes^(0+384)+2)
  8230                           
  8231                           ;usb_device.c: 2650: outPipes[0].wCount.Val = 0;
  8232  12EA  01A3               	clrf	(_outPipes^(0+384)+3)
  8233  12EB  01A4               	clrf	((_outPipes+1)^(0+384)+3)
  8234                           
  8235                           ;usb_device.c: 2656: USBCheckStdRequest();
  8236  12EC  3194  248A  3192   	fcall	_USBCheckStdRequest
  8237                           
  8238                           ;usb_device.c: 2657: USER_USB_CALLBACK_EVENT_HANDLER(EVENT_EP0_REQUEST,0,0);
  8239  12EF  3003               	movlw	3
  8240  12F0  0021               	movlb	1	; select bank1
  8241  12F1  00AD               	movwf	?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)
  8242  12F2  3000               	movlw	0
  8243  12F3  00AE               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)+1)
  8244  12F4  01AF               	clrf	(?_USER_USB_CALLBACK_EVENT_HANDLER+2)^(0+128)
  8245  12F5  3000               	movlw	0
  8246  12F6  00B0               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)+3)
  8247  12F7  3000               	movlw	0
  8248  12F8  00B1               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)+4)
  8249  12F9  3192  227D  3192   	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
  8250                           
  8251                           ;usb_device.c: 2670: USBCtrlEPServiceComplete();
  8252  12FC  3189  21FE         	fcall	_USBCtrlEPServiceComplete
  8253  12FE  0008               	return
  8254  12FF                     __end_of_USBCtrlTrfSetupHandler:	
  8255                           
  8256                           	psect	text27
  8257  148A                     __ptext27:	
  8258 ;; *************** function _USBCheckStdRequest *****************
  8259 ;; Defined at:
  8260 ;;		line 2839 in file "../USB/usb_device.c"
  8261 ;; Parameters:    Size  Location     Type
  8262 ;;		None
  8263 ;; Auto vars:     Size  Location     Type
  8264 ;;		None
  8265 ;; Return value:  Size  Location     Type
  8266 ;;		None               void
  8267 ;; Registers used:
  8268 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  8269 ;; Tracked objects:
  8270 ;;		On entry : 0/0
  8271 ;;		On exit  : 0/0
  8272 ;;		Unchanged: 0/0
  8273 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8274 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8275 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8276 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  8277 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  8278 ;;Total ram usage:        1 bytes
  8279 ;; Hardware stack levels used:    1
  8280 ;; Hardware stack levels required when called:    9
  8281 ;; This function calls:
  8282 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
  8283 ;;		_USBStdSetCfgHandler
  8284 ;;		_USBStdGetDscHandler
  8285 ;;		_USBStdGetStatusHandler
  8286 ;;		_USBStdFeatureReqHandler
  8287 ;; This function is called by:
  8288 ;;		_USBCtrlTrfSetupHandler
  8289 ;; This function uses a non-reentrant model
  8290 ;;
  8291                           
  8292                           
  8293                           ;psect for function _USBCheckStdRequest
  8294  148A                     _USBCheckStdRequest:	
  8295                           
  8296                           ;usb_device.c: 2840: if(SetupPkt.RequestType != (0x00>>5)) return;
  8297                           
  8298                           ;incstack = 0
  8299                           ; Regs used in _USBCheckStdRequest: [allreg]
  8300  148A  0020               	movlb	0	; select bank0
  8301  148B  0E40               	swapf	64,w	;volatile
  8302  148C  0C89               	rrf	9,f
  8303  148D  3903               	andlw	3
  8304  148E  3A00               	xorlw	0
  8305  148F  1D03               	btfss	3,2
  8306  1490  0008               	return
  8307  1491  2CD7               	goto	l6147
  8308  1492                     l332:	
  8309                           ;usb_device.c: 2843: {
  8310                           ;usb_device.c: 2844: case 5:
  8311                           
  8312                           ;usb_device.c: 2842: switch(SetupPkt.bRequest)
  8313                           
  8314                           
  8315                           ;usb_device.c: 2845: inPipes[0].info.bits.busy = 1;
  8316  1492  0021               	movlb	1	; select bank1
  8317  1493  17E7               	bsf	(_inPipes^(0+128)+2),7
  8318                           
  8319                           ;usb_device.c: 2846: USBDeviceState = ADR_PENDING_STATE;
  8320  1494  3008               	movlw	8
  8321  1495  00B8               	movwf	??_USBCheckStdRequest^(0+128)
  8322  1496  0838               	movf	??_USBCheckStdRequest^(0+128),w
  8323  1497  00DC               	movwf	_USBDeviceState^(0+128)
  8324                           
  8325                           ;usb_device.c: 2848: break;
  8326  1498  0008               	return
  8327  1499                     l6117:	
  8328                           ;usb_device.c: 2849: case 6:
  8329                           
  8330                           
  8331                           ;usb_device.c: 2850: USBStdGetDscHandler();
  8332  1499  3188  20FB         	fcall	_USBStdGetDscHandler
  8333                           
  8334                           ;usb_device.c: 2851: break;
  8335  149B  0008               	return
  8336  149C                     l6119:	
  8337                           ;usb_device.c: 2852: case 9:
  8338                           
  8339                           
  8340                           ;usb_device.c: 2853: USBStdSetCfgHandler();
  8341  149C  3197  2783         	fcall	_USBStdSetCfgHandler
  8342                           
  8343                           ;usb_device.c: 2854: break;
  8344  149E  0008               	return
  8345  149F                     l6121:	
  8346                           ;usb_device.c: 2855: case 8:
  8347                           
  8348                           
  8349                           ;usb_device.c: 2856: inPipes[0].pSrc.bRam = (BYTE*)&USBActiveConfiguration;
  8350  149F  30EA               	movlw	low _USBActiveConfiguration
  8351  14A0  0021               	movlb	1	; select bank1
  8352  14A1  00E5               	movwf	_inPipes^(0+128)
  8353  14A2  3000               	movlw	high _USBActiveConfiguration
  8354  14A3  00E6               	movwf	(_inPipes+1)^(0+128)
  8355                           
  8356                           ;usb_device.c: 2857: inPipes[0].info.bits.ctrl_trf_mem = 0x01;
  8357  14A4  1467               	bsf	(_inPipes^(0+128)+2),0
  8358                           
  8359                           ;usb_device.c: 2858: inPipes[0].wCount.v[0] = 1;
  8360  14A5  01E8               	clrf	(_inPipes^(0+128)+3)
  8361  14A6  0AE8               	incf	(_inPipes^(0+128)+3),f
  8362                           
  8363                           ;usb_device.c: 2859: inPipes[0].info.bits.busy = 1;
  8364  14A7  17E7               	bsf	(_inPipes^(0+128)+2),7
  8365                           
  8366                           ;usb_device.c: 2860: break;
  8367  14A8  0008               	return
  8368  14A9                     l6129:	
  8369                           ;usb_device.c: 2861: case 0:
  8370                           
  8371                           
  8372                           ;usb_device.c: 2862: USBStdGetStatusHandler();
  8373  14A9  3193  238C         	fcall	_USBStdGetStatusHandler
  8374                           
  8375                           ;usb_device.c: 2863: break;
  8376  14AB  0008               	return
  8377  14AC                     l6131:	
  8378                           ;usb_device.c: 2864: case 1:
  8379                           
  8380                           
  8381                           ;usb_device.c: 2865: case 3:
  8382                           ;usb_device.c: 2866: USBStdFeatureReqHandler();
  8383  14AC  3186  2645         	fcall	_USBStdFeatureReqHandler
  8384                           
  8385                           ;usb_device.c: 2867: break;
  8386  14AE  0008               	return
  8387  14AF                     l6133:	
  8388                           ;usb_device.c: 2868: case 10:
  8389                           
  8390                           
  8391                           ;usb_device.c: 2869: inPipes[0].pSrc.bRam = (BYTE*)&USBAlternateInterface[SetupPkt.bIntf
      +                          ID];
  8392  14AF  0020               	movlb	0	; select bank0
  8393  14B0  0844               	movf	68,w	;volatile
  8394  14B1  3EEB               	addlw	_USBAlternateInterface& (0+255)
  8395  14B2  0021               	movlb	1	; select bank1
  8396  14B3  00E5               	movwf	_inPipes^(0+128)
  8397  14B4  3000               	movlw	0
  8398  14B5  00E6               	movwf	(_inPipes+1)^(0+128)
  8399                           
  8400                           ;usb_device.c: 2870: inPipes[0].info.bits.ctrl_trf_mem = 0x01;
  8401  14B6  1467               	bsf	(_inPipes^(0+128)+2),0
  8402                           
  8403                           ;usb_device.c: 2871: inPipes[0].wCount.v[0] = 1;
  8404  14B7  01E8               	clrf	(_inPipes^(0+128)+3)
  8405  14B8  0AE8               	incf	(_inPipes^(0+128)+3),f
  8406                           
  8407                           ;usb_device.c: 2872: inPipes[0].info.bits.busy = 1;
  8408  14B9  17E7               	bsf	(_inPipes^(0+128)+2),7
  8409                           
  8410                           ;usb_device.c: 2873: break;
  8411  14BA  0008               	return
  8412  14BB                     l341:	
  8413                           ;usb_device.c: 2874: case 11:
  8414                           
  8415                           
  8416                           ;usb_device.c: 2875: inPipes[0].info.bits.busy = 1;
  8417  14BB  0021               	movlb	1	; select bank1
  8418  14BC  17E7               	bsf	(_inPipes^(0+128)+2),7
  8419                           
  8420                           ;usb_device.c: 2876: USBAlternateInterface[SetupPkt.bIntfID] = SetupPkt.bAltID;
  8421  14BD  0020               	movlb	0	; select bank0
  8422  14BE  0842               	movf	66,w	;volatile
  8423  14BF  0021               	movlb	1	; select bank1
  8424  14C0  00B8               	movwf	??_USBCheckStdRequest^(0+128)
  8425  14C1  0020               	movlb	0	; select bank0
  8426  14C2  0844               	movf	68,w	;volatile
  8427  14C3  3EEB               	addlw	_USBAlternateInterface& (0+255)
  8428  14C4  0086               	movwf	6
  8429  14C5  0187               	clrf	7
  8430  14C6  0021               	movlb	1	; select bank1
  8431  14C7  0838               	movf	??_USBCheckStdRequest^(0+128),w
  8432  14C8  0081               	movwf	1
  8433                           
  8434                           ;usb_device.c: 2877: break;
  8435  14C9  0008               	return
  8436  14CA                     l6143:	
  8437                           ;usb_device.c: 2878: case 7:
  8438                           
  8439                           
  8440                           ;usb_device.c: 2879: USER_USB_CALLBACK_EVENT_HANDLER(EVENT_SET_DESCRIPTOR,0,0);
  8441  14CA  3002               	movlw	2
  8442  14CB  0021               	movlb	1	; select bank1
  8443  14CC  00AD               	movwf	?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)
  8444  14CD  3000               	movlw	0
  8445  14CE  00AE               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)+1)
  8446  14CF  01AF               	clrf	(?_USER_USB_CALLBACK_EVENT_HANDLER+2)^(0+128)
  8447  14D0  3000               	movlw	0
  8448  14D1  00B0               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)+3)
  8449  14D2  3000               	movlw	0
  8450  14D3  00B1               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)+4)
  8451  14D4  3192  227D         	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
  8452                           
  8453                           ;usb_device.c: 2884: }
  8454                           
  8455                           ;usb_device.c: 2883: break;
  8456                           
  8457                           ;usb_device.c: 2882: default:
  8458                           
  8459                           ;usb_device.c: 2881: case 12:
  8460                           
  8461                           ;usb_device.c: 2880: break;
  8462  14D6  0008               	return
  8463  14D7                     l6147:	
  8464  14D7  0020               	movlb	0	; select bank0
  8465  14D8  0841               	movf	65,w	;volatile
  8466                           
  8467                           ; Switch size 1, requested type "space"
  8468                           ; Number of cases is 11, Range of values is 0 to 12
  8469                           ; switch strategies available:
  8470                           ; Name         Instructions Cycles
  8471                           ; direct_byte           32     6 (fixed)
  8472                           ; simple_byte           34    18 (average)
  8473                           ; jumptable            260     6 (fixed)
  8474                           ; rangetable            17     4 (fixed)
  8475                           ; spacedrange           31     6 (fixed)
  8476                           ; locatedrange          13     3 (fixed)
  8477                           ;	Chosen strategy is direct_byte
  8478  14D9  0084               	movwf	4
  8479  14DA  300D               	movlw	13
  8480  14DB  0204               	subwf	4,w
  8481  14DC  1803               	skipnc
  8482  14DD  0008               	return
  8483  14DE  3190               	movlp	high S6763
  8484  14DF  3504               	lslf	4,w
  8485  14E0  3E00               	addlw	low S6763
  8486  14E1  0082               	movwf	2
  8487  14E2                     l330:	
  8488  14E2  0008               	return
  8489  14E3                     __end_of_USBCheckStdRequest:	
  8490                           
  8491                           	psect	swtext1
  8492  1000                     __pswtext1:	
  8493  1000                     S6763:	
  8494  1000  3194  2CA9         	ljmp	l6129
  8495  1002  3194  2CAC         	ljmp	l6131
  8496  1004  3194  2CE2         	ljmp	l330
  8497  1006  3194  2CAC         	ljmp	l6131
  8498  1008  3194  2CE2         	ljmp	l330
  8499  100A  3194  2C92         	ljmp	l332
  8500  100C  3194  2C99         	ljmp	l6117
  8501  100E  3194  2CCA         	ljmp	l6143
  8502  1010  3194  2C9F         	ljmp	l6121
  8503  1012  3194  2C9C         	ljmp	l6119
  8504  1014  3194  2CAF         	ljmp	l6133
  8505  1016  3194  2CBB         	ljmp	l341
  8506  1018  3194  2CE2         	ljmp	l330
  8507                           
  8508                           	psect	text28
  8509  0645                     __ptext28:	
  8510 ;; *************** function _USBStdFeatureReqHandler *****************
  8511 ;; Defined at:
  8512 ;;		line 2907 in file "../USB/usb_device.c"
  8513 ;; Parameters:    Size  Location     Type
  8514 ;;		None
  8515 ;; Auto vars:     Size  Location     Type
  8516 ;;  pUEP            2   20[BANK1 ] PTR unsigned char 
  8517 ;;		 -> UEP0(1), 
  8518 ;;  p               1   23[BANK1 ] PTR struct __BDT
  8519 ;;		 -> NULL(0), BDT(32), 
  8520 ;;  current_ep_d    1   22[BANK1 ] struct .
  8521 ;; Return value:  Size  Location     Type
  8522 ;;		None               void
  8523 ;; Registers used:
  8524 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8525 ;; Tracked objects:
  8526 ;;		On entry : 0/0
  8527 ;;		On exit  : 0/0
  8528 ;;		Unchanged: 0/0
  8529 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8530 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8531 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  8532 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  8533 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
  8534 ;;Total ram usage:        6 bytes
  8535 ;; Hardware stack levels used:    1
  8536 ;; Hardware stack levels required when called:    8
  8537 ;; This function calls:
  8538 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
  8539 ;; This function is called by:
  8540 ;;		_USBCheckStdRequest
  8541 ;; This function uses a non-reentrant model
  8542 ;;
  8543                           
  8544                           
  8545                           ;psect for function _USBStdFeatureReqHandler
  8546  0645                     _USBStdFeatureReqHandler:	
  8547                           
  8548                           ;usb_device.c: 2908: BDT_ENTRY *p;
  8549                           ;usb_device.c: 2909: EP_STATUS current_ep_data;
  8550                           ;usb_device.c: 2913: unsigned char* pUEP;
  8551                           ;usb_device.c: 2951: if((SetupPkt.bFeature == 1)&&
  8552                           ;usb_device.c: 2952: (SetupPkt.Recipient == (0x00)))
  8553                           
  8554                           ;incstack = 0
  8555                           ; Regs used in _USBStdFeatureReqHandler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8556  0645  0020               	movlb	0	; select bank0
  8557  0646  0842               	movf	66,w	;volatile
  8558  0647  3A01               	xorlw	1
  8559  0648  1D03               	skipz
  8560  0649  2E5C               	goto	l6165
  8561  064A  0840               	movf	64,w	;volatile
  8562  064B  391F               	andlw	31
  8563  064C  3800               	iorlw	0
  8564  064D  1D03               	skipz
  8565  064E  2E5C               	goto	l6165
  8566                           
  8567                           ;usb_device.c: 2953: {
  8568                           ;usb_device.c: 2954: inPipes[0].info.bits.busy = 1;
  8569  064F  0021               	movlb	1	; select bank1
  8570  0650  17E7               	bsf	(_inPipes^(0+128)+2),7
  8571                           
  8572                           ;usb_device.c: 2955: if(SetupPkt.bRequest == 3)
  8573  0651  0020               	movlb	0	; select bank0
  8574  0652  0841               	movf	65,w	;volatile
  8575  0653  3A03               	xorlw	3
  8576  0654  1D03               	skipz
  8577  0655  2E5A               	goto	l6163
  8578                           
  8579                           ;usb_device.c: 2956: RemoteWakeup = TRUE;
  8580  0656  0021               	movlb	1	; select bank1
  8581  0657  01D7               	clrf	_RemoteWakeup^(0+128)
  8582  0658  0AD7               	incf	_RemoteWakeup^(0+128),f
  8583  0659  2E5C               	goto	l6165
  8584  065A                     l6163:	
  8585                           
  8586                           ;usb_device.c: 2957: else
  8587                           ;usb_device.c: 2958: RemoteWakeup = FALSE;
  8588  065A  0021               	movlb	1	; select bank1
  8589  065B  01D7               	clrf	_RemoteWakeup^(0+128)
  8590  065C                     l6165:	
  8591                           
  8592                           ;usb_device.c: 2959: }
  8593                           ;usb_device.c: 2962: if((SetupPkt.bFeature == 0)&&
  8594                           ;usb_device.c: 2963: (SetupPkt.Recipient == (0x02))&&
  8595                           ;usb_device.c: 2964: (SetupPkt.EPNum != 0) && (SetupPkt.EPNum <= 1)&&
  8596                           ;usb_device.c: 2965: (USBDeviceState == CONFIGURED_STATE))
  8597  065C  0020               	movlb	0	; select bank0
  8598  065D  0842               	movf	66,w
  8599  065E  1D03               	skipz
  8600  065F  0008               	return
  8601  0660  0840               	movf	64,w	;volatile
  8602  0661  391F               	andlw	31
  8603  0662  3A02               	xorlw	2
  8604  0663  1D03               	skipz
  8605  0664  0008               	return
  8606  0665  0844               	movf	68,w	;volatile
  8607  0666  390F               	andlw	15
  8608  0667  3A00               	xorlw	0
  8609  0668  1903               	skipnz
  8610  0669  0008               	return
  8611  066A  0844               	movf	68,w	;volatile
  8612  066B  390F               	andlw	15
  8613  066C  0021               	movlb	1	; select bank1
  8614  066D  00B2               	movwf	??_USBStdFeatureReqHandler^(0+128)
  8615  066E  3002               	movlw	2
  8616  066F  0232               	subwf	??_USBStdFeatureReqHandler^(0+128),w
  8617  0670  1803               	skipnc
  8618  0671  0008               	return
  8619  0672  085C               	movf	_USBDeviceState^(0+128),w
  8620  0673  3A20               	xorlw	32
  8621  0674  1D03               	skipz
  8622  0675  0008               	return
  8623                           
  8624                           ;usb_device.c: 2966: {
  8625                           ;usb_device.c: 2969: inPipes[0].info.bits.busy = 1;
  8626  0676  17E7               	bsf	(_inPipes^(0+128)+2),7
  8627                           
  8628                           ;usb_device.c: 2972: if(SetupPkt.EPDir == 0)
  8629  0677  0020               	movlb	0	; select bank0
  8630  0678  1BC4               	btfsc	68,7	;volatile
  8631  0679  2E89               	goto	l6179
  8632                           
  8633                           ;usb_device.c: 2973: {
  8634                           ;usb_device.c: 2974: p = (BDT_ENTRY*)pBDTEntryOut[SetupPkt.EPNum];
  8635  067A  0844               	movf	68,w	;volatile
  8636  067B  390F               	andlw	15
  8637  067C  3ED3               	addlw	_pBDTEntryOut& (0+255)
  8638  067D  0086               	movwf	6
  8639  067E  0187               	clrf	7
  8640  067F  0801               	movf	1,w
  8641  0680  0021               	movlb	1	; select bank1
  8642  0681  00B2               	movwf	??_USBStdFeatureReqHandler^(0+128)
  8643  0682  0832               	movf	??_USBStdFeatureReqHandler^(0+128),w
  8644  0683  00B7               	movwf	USBStdFeatureReqHandler@p^(0+128)
  8645                           
  8646                           ;usb_device.c: 2975: current_ep_data.Val = ep_data_out[SetupPkt.EPNum].Val;
  8647  0684  0020               	movlb	0	; select bank0
  8648  0685  0844               	movf	68,w	;volatile
  8649  0686  390F               	andlw	15
  8650  0687  3ECF               	addlw	_ep_data_out& (0+255)
  8651  0688  2E98               	goto	L10
  8652  0689                     l6179:	
  8653                           ;usb_device.c: 2976: }
  8654                           
  8655                           
  8656                           ;usb_device.c: 2977: else
  8657                           ;usb_device.c: 2978: {
  8658                           ;usb_device.c: 2979: p = (BDT_ENTRY*)pBDTEntryIn[SetupPkt.EPNum];
  8659  0689  0020               	movlb	0	; select bank0
  8660  068A  0844               	movf	68,w	;volatile
  8661  068B  390F               	andlw	15
  8662  068C  3ED1               	addlw	_pBDTEntryIn& (0+255)
  8663  068D  0086               	movwf	6
  8664  068E  0187               	clrf	7
  8665  068F  0801               	movf	1,w
  8666  0690  0021               	movlb	1	; select bank1
  8667  0691  00B2               	movwf	??_USBStdFeatureReqHandler^(0+128)
  8668  0692  0832               	movf	??_USBStdFeatureReqHandler^(0+128),w
  8669  0693  00B7               	movwf	USBStdFeatureReqHandler@p^(0+128)
  8670                           
  8671                           ;usb_device.c: 2980: current_ep_data.Val = ep_data_in[SetupPkt.EPNum].Val;
  8672  0694  0020               	movlb	0	; select bank0
  8673  0695  0844               	movf	68,w	;volatile
  8674  0696  390F               	andlw	15
  8675  0697  3ECD               	addlw	_ep_data_in& (0+255)
  8676  0698                     L10:	
  8677  0698  0086               	movwf	6
  8678  0699  0187               	clrf	7
  8679  069A  0801               	movf	1,w
  8680  069B  0021               	movlb	1	; select bank1
  8681  069C  00B2               	movwf	??_USBStdFeatureReqHandler^(0+128)
  8682  069D  0832               	movf	??_USBStdFeatureReqHandler^(0+128),w
  8683  069E  00B6               	movwf	USBStdFeatureReqHandler@current_ep_data^(0+128)
  8684                           
  8685                           ;usb_device.c: 2981: }
  8686                           ;usb_device.c: 2987: if(current_ep_data.bits.ping_pong_state == 0)
  8687  069F  1836               	btfsc	USBStdFeatureReqHandler@current_ep_data^(0+128),0
  8688  06A0  2EA6               	goto	l353
  8689                           
  8690                           ;usb_device.c: 2988: {
  8691                           ;usb_device.c: 2989: {((BYTE_VAL*)&p)->Val &= ~0x0004;};
  8692  06A1  30FB               	movlw	251
  8693  06A2  00B2               	movwf	??_USBStdFeatureReqHandler^(0+128)
  8694  06A3  0832               	movf	??_USBStdFeatureReqHandler^(0+128),w
  8695  06A4  05B7               	andwf	USBStdFeatureReqHandler@p^(0+128),f
  8696                           
  8697                           ;usb_device.c: 2990: }
  8698  06A5  2EA7               	goto	l354
  8699  06A6                     l353:	
  8700                           
  8701                           ;usb_device.c: 2991: else
  8702                           ;usb_device.c: 2992: {
  8703                           ;usb_device.c: 2993: {((BYTE_VAL*)&p)->Val |= 0x0004;};
  8704  06A6  1537               	bsf	USBStdFeatureReqHandler@p^(0+128),2
  8705  06A7                     l354:	
  8706                           
  8707                           ;usb_device.c: 2994: }
  8708                           ;usb_device.c: 2999: if(SetupPkt.EPDir == 0)
  8709  06A7  0020               	movlb	0	; select bank0
  8710  06A8  1BC4               	btfsc	68,7	;volatile
  8711  06A9  2EB2               	goto	l6187
  8712                           
  8713                           ;usb_device.c: 3000: {
  8714                           ;usb_device.c: 3001: pBDTEntryOut[SetupPkt.EPNum] = (volatile BDT_ENTRY *)p;
  8715  06AA  0021               	movlb	1	; select bank1
  8716  06AB  0837               	movf	USBStdFeatureReqHandler@p^(0+128),w
  8717  06AC  00B2               	movwf	??_USBStdFeatureReqHandler^(0+128)
  8718  06AD  0020               	movlb	0	; select bank0
  8719  06AE  0844               	movf	68,w	;volatile
  8720  06AF  390F               	andlw	15
  8721  06B0  3ED3               	addlw	_pBDTEntryOut& (0+255)
  8722  06B1  2EB9               	goto	L11
  8723  06B2                     l6187:	
  8724                           ;usb_device.c: 3002: }
  8725                           
  8726                           
  8727                           ;usb_device.c: 3003: else
  8728                           ;usb_device.c: 3004: {
  8729                           ;usb_device.c: 3005: pBDTEntryIn[SetupPkt.EPNum] = (volatile BDT_ENTRY *)p;
  8730  06B2  0021               	movlb	1	; select bank1
  8731  06B3  0837               	movf	USBStdFeatureReqHandler@p^(0+128),w
  8732  06B4  00B2               	movwf	??_USBStdFeatureReqHandler^(0+128)
  8733  06B5  0020               	movlb	0	; select bank0
  8734  06B6  0844               	movf	68,w	;volatile
  8735  06B7  390F               	andlw	15
  8736  06B8  3ED1               	addlw	_pBDTEntryIn& (0+255)
  8737  06B9                     L11:	
  8738  06B9  0086               	movwf	6
  8739  06BA  0187               	clrf	7
  8740  06BB  0021               	movlb	1	; select bank1
  8741  06BC  0832               	movf	??_USBStdFeatureReqHandler^(0+128),w
  8742  06BD  0081               	movwf	1
  8743                           
  8744                           ;usb_device.c: 3006: }
  8745                           ;usb_device.c: 3009: if(SetupPkt.bRequest == 3)
  8746  06BE  0020               	movlb	0	; select bank0
  8747  06BF  0841               	movf	65,w	;volatile
  8748  06C0  3A03               	xorlw	3
  8749  06C1  1D03               	skipz
  8750  06C2  2EDF               	goto	l6199
  8751                           
  8752                           ;usb_device.c: 3010: {
  8753                           ;usb_device.c: 3011: if(p->STAT.UOWN == 1)
  8754  06C3  0021               	movlb	1	; select bank1
  8755  06C4  0837               	movf	USBStdFeatureReqHandler@p^(0+128),w
  8756  06C5  0086               	movwf	6
  8757  06C6  0187               	clrf	7
  8758  06C7  1F81               	btfss	1,7
  8759  06C8  2ED6               	goto	l358
  8760                           
  8761                           ;usb_device.c: 3012: {
  8762                           ;usb_device.c: 3015: if(SetupPkt.EPDir == 0)
  8763  06C9  0020               	movlb	0	; select bank0
  8764  06CA  1BC4               	btfsc	68,7	;volatile
  8765  06CB  2ED0               	goto	l6197
  8766                           
  8767                           ;usb_device.c: 3016: {
  8768                           ;usb_device.c: 3017: ep_data_out[SetupPkt.EPNum].bits.transfer_terminated = 1;
  8769  06CC  0844               	movf	68,w	;volatile
  8770  06CD  390F               	andlw	15
  8771  06CE  3ECF               	addlw	_ep_data_out& (0+255)
  8772  06CF  2ED3               	goto	L12
  8773  06D0                     l6197:	
  8774                           ;usb_device.c: 3018: }
  8775                           
  8776                           
  8777                           ;usb_device.c: 3019: else
  8778                           ;usb_device.c: 3020: {
  8779                           ;usb_device.c: 3021: ep_data_in[SetupPkt.EPNum].bits.transfer_terminated = 1;
  8780  06D0  0844               	movf	68,w	;volatile
  8781  06D1  390F               	andlw	15
  8782  06D2  3ECD               	addlw	_ep_data_in& (0+255)
  8783  06D3                     L12:	
  8784  06D3  0086               	movwf	6
  8785  06D4  0187               	clrf	7
  8786  06D5  1481               	bsf	1,1
  8787  06D6                     l358:	
  8788                           
  8789                           ;usb_device.c: 3022: }
  8790                           ;usb_device.c: 3023: }
  8791                           ;usb_device.c: 3026: p->STAT.Val |= 0x80|0x04;
  8792  06D6  3084               	movlw	132
  8793  06D7  0021               	movlb	1	; select bank1
  8794  06D8  00B2               	movwf	??_USBStdFeatureReqHandler^(0+128)
  8795  06D9  0837               	movf	USBStdFeatureReqHandler@p^(0+128),w
  8796  06DA  0086               	movwf	6
  8797  06DB  0187               	clrf	7
  8798  06DC  0832               	movf	??_USBStdFeatureReqHandler^(0+128),w
  8799  06DD  0481               	iorwf	1,f
  8800                           
  8801                           ;usb_device.c: 3027: }
  8802  06DE  0008               	return
  8803  06DF                     l6199:	
  8804                           
  8805                           ;usb_device.c: 3028: else
  8806                           ;usb_device.c: 3029: {
  8807                           ;usb_device.c: 3033: ((BYTE_VAL*)&p)->Val ^= 0x0004;;
  8808  06DF  3004               	movlw	4
  8809  06E0  0021               	movlb	1	; select bank1
  8810  06E1  00B2               	movwf	??_USBStdFeatureReqHandler^(0+128)
  8811  06E2  0832               	movf	??_USBStdFeatureReqHandler^(0+128),w
  8812  06E3  06B7               	xorwf	USBStdFeatureReqHandler@p^(0+128),f
  8813                           
  8814                           ;usb_device.c: 3035: if(p->STAT.UOWN == 1)
  8815  06E4  0837               	movf	USBStdFeatureReqHandler@p^(0+128),w
  8816  06E5  0086               	movwf	6
  8817  06E6  0187               	clrf	7
  8818  06E7  1F81               	btfss	1,7
  8819  06E8  2F04               	goto	l6209
  8820                           
  8821                           ;usb_device.c: 3036: {
  8822                           ;usb_device.c: 3039: p->STAT.Val &= (~0x80);
  8823  06E9  307F               	movlw	127
  8824  06EA  00B2               	movwf	??_USBStdFeatureReqHandler^(0+128)
  8825  06EB  0837               	movf	USBStdFeatureReqHandler@p^(0+128),w
  8826  06EC  0086               	movwf	6
  8827  06ED  0187               	clrf	7
  8828  06EE  0832               	movf	??_USBStdFeatureReqHandler^(0+128),w
  8829  06EF  0581               	andwf	1,f
  8830                           
  8831                           ;usb_device.c: 3040: p->STAT.Val |= 0x40;
  8832  06F0  0837               	movf	USBStdFeatureReqHandler@p^(0+128),w
  8833  06F1  0086               	movwf	6
  8834  06F2  0187               	clrf	7
  8835  06F3  1701               	bsf	1,6
  8836                           
  8837                           ;usb_device.c: 3041: USER_USB_CALLBACK_EVENT_HANDLER(EVENT_TRANSFER_TERMINATED,p,sizeof(
      +                          p));
  8838  06F4  3005               	movlw	5
  8839  06F5  00AD               	movwf	?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)
  8840  06F6  3000               	movlw	0
  8841  06F7  00AE               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)+1)
  8842  06F8  0837               	movf	USBStdFeatureReqHandler@p^(0+128),w
  8843  06F9  00B2               	movwf	??_USBStdFeatureReqHandler^(0+128)
  8844  06FA  0832               	movf	??_USBStdFeatureReqHandler^(0+128),w
  8845  06FB  00AF               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER+2)^(0+128)
  8846  06FC  3001               	movlw	1
  8847  06FD  00B0               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)+3)
  8848  06FE  3000               	movlw	0
  8849  06FF  00B1               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)+4)
  8850  0700  3192  227D  3186   	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
  8851                           
  8852                           ;usb_device.c: 3042: }
  8853  0703  2F09               	goto	l6211
  8854  0704                     l6209:	
  8855                           
  8856                           ;usb_device.c: 3043: else
  8857                           ;usb_device.c: 3044: {
  8858                           ;usb_device.c: 3046: p->STAT.Val |= 0x40;
  8859  0704  0021               	movlb	1	; select bank1
  8860  0705  0837               	movf	USBStdFeatureReqHandler@p^(0+128),w
  8861  0706  0086               	movwf	6
  8862  0707  0187               	clrf	7
  8863  0708  1701               	bsf	1,6
  8864  0709                     l6211:	
  8865                           
  8866                           ;usb_device.c: 3047: }
  8867                           ;usb_device.c: 3051: ((BYTE_VAL*)&p)->Val ^= 0x0004;;
  8868  0709  3004               	movlw	4
  8869  070A  0021               	movlb	1	; select bank1
  8870  070B  00B2               	movwf	??_USBStdFeatureReqHandler^(0+128)
  8871  070C  0832               	movf	??_USBStdFeatureReqHandler^(0+128),w
  8872  070D  06B7               	xorwf	USBStdFeatureReqHandler@p^(0+128),f
  8873                           
  8874                           ;usb_device.c: 3057: if((current_ep_data.bits.transfer_terminated != 0) || (p->STAT.UOWN
      +                           == 1))
  8875  070E  18B6               	btfsc	USBStdFeatureReqHandler@current_ep_data^(0+128),1
  8876  070F  2F15               	goto	l366
  8877  0710  0837               	movf	USBStdFeatureReqHandler@p^(0+128),w
  8878  0711  0086               	movwf	6
  8879  0712  0187               	clrf	7
  8880  0713  1F81               	btfss	1,7
  8881  0714  2F3A               	goto	l6223
  8882  0715                     l366:	
  8883                           
  8884                           ;usb_device.c: 3058: {
  8885                           ;usb_device.c: 3059: if(SetupPkt.EPDir == 0)
  8886  0715  0020               	movlb	0	; select bank0
  8887  0716  1BC4               	btfsc	68,7	;volatile
  8888  0717  2F1C               	goto	l6219
  8889                           
  8890                           ;usb_device.c: 3060: {
  8891                           ;usb_device.c: 3061: ep_data_out[SetupPkt.EPNum].bits.transfer_terminated = 0;
  8892  0718  0844               	movf	68,w	;volatile
  8893  0719  390F               	andlw	15
  8894  071A  3ECF               	addlw	_ep_data_out& (0+255)
  8895  071B  2F1F               	goto	L13
  8896  071C                     l6219:	
  8897                           ;usb_device.c: 3062: }
  8898                           
  8899                           
  8900                           ;usb_device.c: 3063: else
  8901                           ;usb_device.c: 3064: {
  8902                           ;usb_device.c: 3065: ep_data_in[SetupPkt.EPNum].bits.transfer_terminated = 0;
  8903  071C  0844               	movf	68,w	;volatile
  8904  071D  390F               	andlw	15
  8905  071E  3ECD               	addlw	_ep_data_in& (0+255)
  8906  071F                     L13:	
  8907  071F  0086               	movwf	6
  8908  0720  0187               	clrf	7
  8909  0721  1081               	bcf	1,1
  8910                           
  8911                           ;usb_device.c: 3066: }
  8912                           ;usb_device.c: 3068: p->STAT.Val &= ~(0x80 | 0x40 | 0x04);
  8913  0722  303B               	movlw	59
  8914  0723  0021               	movlb	1	; select bank1
  8915  0724  00B2               	movwf	??_USBStdFeatureReqHandler^(0+128)
  8916  0725  0837               	movf	USBStdFeatureReqHandler@p^(0+128),w
  8917  0726  0086               	movwf	6
  8918  0727  0187               	clrf	7
  8919  0728  0832               	movf	??_USBStdFeatureReqHandler^(0+128),w
  8920  0729  0581               	andwf	1,f
  8921                           
  8922                           ;usb_device.c: 3071: USER_USB_CALLBACK_EVENT_HANDLER(EVENT_TRANSFER_TERMINATED,p,sizeof(
      +                          p));
  8923  072A  3005               	movlw	5
  8924  072B  00AD               	movwf	?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)
  8925  072C  3000               	movlw	0
  8926  072D  00AE               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)+1)
  8927  072E  0837               	movf	USBStdFeatureReqHandler@p^(0+128),w
  8928  072F  00B2               	movwf	??_USBStdFeatureReqHandler^(0+128)
  8929  0730  0832               	movf	??_USBStdFeatureReqHandler^(0+128),w
  8930  0731  00AF               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER+2)^(0+128)
  8931  0732  3001               	movlw	1
  8932  0733  00B0               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)+3)
  8933  0734  3000               	movlw	0
  8934  0735  00B1               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)+4)
  8935  0736  3192  227D  3186   	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
  8936                           
  8937                           ;usb_device.c: 3072: }
  8938  0739  2F42               	goto	l6225
  8939  073A                     l6223:	
  8940                           
  8941                           ;usb_device.c: 3073: else
  8942                           ;usb_device.c: 3074: {
  8943                           ;usb_device.c: 3076: p->STAT.Val &= ~(0x80 | 0x40 | 0x04);
  8944  073A  303B               	movlw	59
  8945  073B  0021               	movlb	1	; select bank1
  8946  073C  00B2               	movwf	??_USBStdFeatureReqHandler^(0+128)
  8947  073D  0837               	movf	USBStdFeatureReqHandler@p^(0+128),w
  8948  073E  0086               	movwf	6
  8949  073F  0187               	clrf	7
  8950  0740  0832               	movf	??_USBStdFeatureReqHandler^(0+128),w
  8951  0741  0581               	andwf	1,f
  8952  0742                     l6225:	
  8953                           
  8954                           ;usb_device.c: 3077: }
  8955                           ;usb_device.c: 3124: pUEP = (unsigned char*)(&UEP0+SetupPkt.EPNum);
  8956  0742  0020               	movlb	0	; select bank0
  8957  0743  0844               	movf	68,w	;volatile
  8958  0744  390F               	andlw	15
  8959  0745  3E98               	addlw	152
  8960  0746  0021               	movlb	1	; select bank1
  8961  0747  00B2               	movwf	??_USBStdFeatureReqHandler^(0+128)
  8962  0748  01B3               	clrf	(??_USBStdFeatureReqHandler^(0+128)+1)
  8963  0749  300E               	movlw	14
  8964  074A  3DB3               	addwfc	(??_USBStdFeatureReqHandler^(0+128)+1),f
  8965  074B  0832               	movf	??_USBStdFeatureReqHandler^(0+128),w
  8966  074C  00B4               	movwf	USBStdFeatureReqHandler@pUEP^(0+128)
  8967  074D  0833               	movf	(??_USBStdFeatureReqHandler+1)^(0+128),w
  8968  074E  00B5               	movwf	(USBStdFeatureReqHandler@pUEP+1)^(0+128)
  8969                           
  8970                           ;usb_device.c: 3128: *pUEP &= ~0x0001;
  8971  074F  30FE               	movlw	254
  8972  0750  00B2               	movwf	??_USBStdFeatureReqHandler^(0+128)
  8973  0751  0834               	movf	USBStdFeatureReqHandler@pUEP^(0+128),w
  8974  0752  0086               	movwf	6
  8975  0753  0835               	movf	(USBStdFeatureReqHandler@pUEP+1)^(0+128),w
  8976  0754  0087               	movwf	7
  8977  0755  0832               	movf	??_USBStdFeatureReqHandler^(0+128),w
  8978  0756  0581               	andwf	1,f
  8979  0757  0008               	return
  8980  0758                     __end_of_USBStdFeatureReqHandler:	
  8981                           
  8982                           	psect	text29
  8983  138C                     __ptext29:	
  8984 ;; *************** function _USBStdGetStatusHandler *****************
  8985 ;; Defined at:
  8986 ;;		line 2283 in file "../USB/usb_device.c"
  8987 ;; Parameters:    Size  Location     Type
  8988 ;;		None
  8989 ;; Auto vars:     Size  Location     Type
  8990 ;;  p               1   15[BANK0 ] PTR struct __BDT
  8991 ;;		 -> NULL(0), BDT(32), 
  8992 ;; Return value:  Size  Location     Type
  8993 ;;		None               void
  8994 ;; Registers used:
  8995 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  8996 ;; Tracked objects:
  8997 ;;		On entry : 0/0
  8998 ;;		On exit  : 0/0
  8999 ;;		Unchanged: 0/0
  9000 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9001 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9002 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9003 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9004 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9005 ;;Total ram usage:        2 bytes
  9006 ;; Hardware stack levels used:    1
  9007 ;; Hardware stack levels required when called:    4
  9008 ;; This function calls:
  9009 ;;		Nothing
  9010 ;; This function is called by:
  9011 ;;		_USBCheckStdRequest
  9012 ;; This function uses a non-reentrant model
  9013 ;;
  9014                           
  9015                           
  9016                           ;psect for function _USBStdGetStatusHandler
  9017  138C                     _USBStdGetStatusHandler:	
  9018                           
  9019                           ;usb_device.c: 2284: CtrlTrfData[0] = 0;
  9020                           
  9021                           ;incstack = 0
  9022                           ; Regs used in _USBStdGetStatusHandler: [wreg-fsr1h+status,2+status,0]
  9023  138C  0020               	movlb	0	; select bank0
  9024  138D  01C8               	clrf	72	;volatile
  9025                           
  9026                           ;usb_device.c: 2285: CtrlTrfData[1] = 0;
  9027  138E  3000               	movlw	0
  9028  138F  00C9               	movwf	73	;volatile
  9029                           
  9030                           ;usb_device.c: 2287: switch(SetupPkt.Recipient)
  9031  1390  2BC1               	goto	l6031
  9032  1391                     l271:	
  9033                           ;usb_device.c: 2288: {
  9034                           ;usb_device.c: 2289: case (0x00):
  9035                           
  9036                           
  9037                           ;usb_device.c: 2295: if(1 == 1)
  9038  1391  0021               	movlb	1	; select bank1
  9039  1392  17E7               	bsf	(_inPipes^(0+128)+2),7
  9040                           
  9041                           ;usb_device.c: 2296: {
  9042                           ;usb_device.c: 2297: CtrlTrfData[0]|=0x01;
  9043  1393  0020               	movlb	0	; select bank0
  9044  1394  1448               	bsf	72,0	;volatile
  9045                           
  9046                           ;usb_device.c: 2298: }
  9047                           ;usb_device.c: 2300: if(RemoteWakeup == TRUE)
  9048  1395  0021               	movlb	1	; select bank1
  9049  1396  0857               	movf	_RemoteWakeup^(0+128),w
  9050  1397  3A01               	xorlw	1
  9051  1398  1D03               	skipz
  9052  1399  2BCD               	goto	l274
  9053                           
  9054                           ;usb_device.c: 2301: {
  9055                           ;usb_device.c: 2302: CtrlTrfData[0]|=0x02;
  9056  139A  0020               	movlb	0	; select bank0
  9057  139B  14C8               	bsf	72,1	;volatile
  9058                           
  9059                           ;usb_device.c: 2303: }
  9060                           ;usb_device.c: 2304: break;
  9061  139C  2BCD               	goto	l274
  9062  139D                     l275:	
  9063                           ;usb_device.c: 2305: case (0x01):
  9064                           
  9065                           
  9066                           ;usb_device.c: 2306: inPipes[0].info.bits.busy = 1;
  9067  139D  0021               	movlb	1	; select bank1
  9068  139E  17E7               	bsf	(_inPipes^(0+128)+2),7
  9069                           
  9070                           ;usb_device.c: 2307: break;
  9071  139F  2BCD               	goto	l274
  9072  13A0                     l276:	
  9073                           ;usb_device.c: 2308: case (0x02):
  9074                           
  9075                           
  9076                           ;usb_device.c: 2309: inPipes[0].info.bits.busy = 1;
  9077  13A0  0021               	movlb	1	; select bank1
  9078  13A1  17E7               	bsf	(_inPipes^(0+128)+2),7
  9079                           
  9080                           ;usb_device.c: 2313: {
  9081                           ;usb_device.c: 2314: BDT_ENTRY *p;
  9082                           ;usb_device.c: 2316: if(SetupPkt.EPDir == 0)
  9083  13A2  0020               	movlb	0	; select bank0
  9084  13A3  1BC4               	btfsc	68,7	;volatile
  9085  13A4  2BA9               	goto	l6021
  9086                           
  9087                           ;usb_device.c: 2317: {
  9088                           ;usb_device.c: 2318: p = (BDT_ENTRY*)pBDTEntryOut[SetupPkt.EPNum];
  9089  13A5  0844               	movf	68,w	;volatile
  9090  13A6  390F               	andlw	15
  9091  13A7  3ED3               	addlw	_pBDTEntryOut& (0+255)
  9092  13A8  2BAC               	goto	L14
  9093  13A9                     l6021:	
  9094                           ;usb_device.c: 2319: }
  9095                           
  9096                           
  9097                           ;usb_device.c: 2320: else
  9098                           ;usb_device.c: 2321: {
  9099                           ;usb_device.c: 2322: p = (BDT_ENTRY*)pBDTEntryIn[SetupPkt.EPNum];
  9100  13A9  0844               	movf	68,w	;volatile
  9101  13AA  390F               	andlw	15
  9102  13AB  3ED1               	addlw	_pBDTEntryIn& (0+255)
  9103  13AC                     L14:	
  9104  13AC  0086               	movwf	6
  9105  13AD  0187               	clrf	7
  9106  13AE  0801               	movf	1,w
  9107  13AF  00DE               	movwf	??_USBStdGetStatusHandler
  9108  13B0  085E               	movf	??_USBStdGetStatusHandler,w
  9109  13B1  00DF               	movwf	USBStdGetStatusHandler@p
  9110                           
  9111                           ;usb_device.c: 2323: }
  9112                           ;usb_device.c: 2325: if((p->STAT.UOWN == 1) && (p->STAT.BSTALL == 1))
  9113  13B2  085F               	movf	USBStdGetStatusHandler@p,w
  9114  13B3  0086               	movwf	6
  9115  13B4  0187               	clrf	7
  9116  13B5  1F81               	btfss	1,7
  9117  13B6  2BCD               	goto	l274
  9118  13B7  085F               	movf	USBStdGetStatusHandler@p,w
  9119  13B8  0086               	movwf	6
  9120  13B9  0187               	clrf	7
  9121  13BA  1D01               	btfss	1,2
  9122  13BB  2BCD               	goto	l274
  9123                           
  9124                           ;usb_device.c: 2326: CtrlTrfData[0]=0x01;
  9125  13BC  3001               	movlw	1
  9126  13BD  00DE               	movwf	??_USBStdGetStatusHandler
  9127  13BE  085E               	movf	??_USBStdGetStatusHandler,w
  9128  13BF  00C8               	movwf	72	;volatile
  9129                           
  9130                           ;usb_device.c: 2328: }
  9131                           ;usb_device.c: 2329: }
  9132                           
  9133                           ;usb_device.c: 2327: break;
  9134  13C0  2BCD               	goto	l274
  9135  13C1                     l6031:	
  9136  13C1  0840               	movf	64,w	;volatile
  9137  13C2  391F               	andlw	31
  9138                           
  9139                           ; Switch size 1, requested type "space"
  9140                           ; Number of cases is 3, Range of values is 0 to 2
  9141                           ; switch strategies available:
  9142                           ; Name         Instructions Cycles
  9143                           ; simple_byte           10     6 (average)
  9144                           ; direct_byte           12     6 (fixed)
  9145                           ; jumptable            260     6 (fixed)
  9146                           ; rangetable             7     4 (fixed)
  9147                           ; spacedrange           11     6 (fixed)
  9148                           ; locatedrange           3     3 (fixed)
  9149                           ;	Chosen strategy is simple_byte
  9150  13C3  3A00               	xorlw	0	; case 0
  9151  13C4  1903               	skipnz
  9152  13C5  2B91               	goto	l271
  9153  13C6  3A01               	xorlw	1	; case 1
  9154  13C7  1903               	skipnz
  9155  13C8  2B9D               	goto	l275
  9156  13C9  3A03               	xorlw	3	; case 2
  9157  13CA  1903               	skipnz
  9158  13CB  2BA0               	goto	l276
  9159  13CC  2BCD               	goto	l274
  9160  13CD                     l274:	
  9161                           
  9162                           ;usb_device.c: 2331: if(inPipes[0].info.bits.busy == 1)
  9163  13CD  0021               	movlb	1	; select bank1
  9164  13CE  1FE7               	btfss	(_inPipes^(0+128)+2),7
  9165  13CF  0008               	return
  9166                           
  9167                           ;usb_device.c: 2332: {
  9168                           ;usb_device.c: 2333: inPipes[0].pSrc.bRam = (BYTE*)&CtrlTrfData;
  9169  13D0  3048               	movlw	72
  9170  13D1  00E5               	movwf	_inPipes^(0+128)
  9171  13D2  3000               	movlw	0
  9172  13D3  00E6               	movwf	(_inPipes+1)^(0+128)
  9173                           
  9174                           ;usb_device.c: 2334: inPipes[0].info.bits.ctrl_trf_mem = 0x01;
  9175  13D4  1467               	bsf	(_inPipes^(0+128)+2),0
  9176                           
  9177                           ;usb_device.c: 2335: inPipes[0].wCount.v[0] = 2;
  9178  13D5  3002               	movlw	2
  9179  13D6  0020               	movlb	0	; select bank0
  9180  13D7  00DE               	movwf	??_USBStdGetStatusHandler
  9181  13D8  085E               	movf	??_USBStdGetStatusHandler,w
  9182  13D9  0021               	movlb	1	; select bank1
  9183  13DA  00E8               	movwf	(_inPipes^(0+128)+3)
  9184  13DB  0008               	return
  9185  13DC                     __end_of_USBStdGetStatusHandler:	
  9186                           
  9187                           	psect	text30
  9188  08FB                     __ptext30:	
  9189 ;; *************** function _USBStdGetDscHandler *****************
  9190 ;; Defined at:
  9191 ;;		line 2207 in file "../USB/usb_device.c"
  9192 ;; Parameters:    Size  Location     Type
  9193 ;;		None
  9194 ;; Auto vars:     Size  Location     Type
  9195 ;;		None
  9196 ;; Return value:  Size  Location     Type
  9197 ;;		None               void
  9198 ;; Registers used:
  9199 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  9200 ;; Tracked objects:
  9201 ;;		On entry : 0/0
  9202 ;;		On exit  : 0/0
  9203 ;;		Unchanged: 0/0
  9204 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9205 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9206 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9207 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9208 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9209 ;;Total ram usage:        3 bytes
  9210 ;; Hardware stack levels used:    1
  9211 ;; Hardware stack levels required when called:    4
  9212 ;; This function calls:
  9213 ;;		Nothing
  9214 ;; This function is called by:
  9215 ;;		_USBCheckStdRequest
  9216 ;; This function uses a non-reentrant model
  9217 ;;
  9218                           
  9219                           
  9220                           ;psect for function _USBStdGetDscHandler
  9221  08FB                     _USBStdGetDscHandler:	
  9222                           
  9223                           ;usb_device.c: 2208: if(SetupPkt.bmRequestType == 0x80)
  9224                           
  9225                           ;incstack = 0
  9226                           ; Regs used in _USBStdGetDscHandler: [wreg-fsr0h+status,2+status,0+pclath]
  9227  08FB  0020               	movlb	0	; select bank0
  9228  08FC  0840               	movf	64,w	;volatile
  9229  08FD  3A80               	xorlw	128
  9230  08FE  1D03               	skipz
  9231  08FF  0008               	return
  9232                           
  9233                           ;usb_device.c: 2209: {
  9234                           ;usb_device.c: 2210: inPipes[0].info.Val = 0x00 | 0x80 | 0x40;
  9235  0900  30C0               	movlw	192
  9236  0901  00DE               	movwf	??_USBStdGetDscHandler
  9237  0902  085E               	movf	??_USBStdGetDscHandler,w
  9238  0903  0021               	movlb	1	; select bank1
  9239  0904  00E7               	movwf	(_inPipes^(0+128)+2)
  9240                           
  9241                           ;usb_device.c: 2212: switch(SetupPkt.bDescriptorType)
  9242  0905  296D               	goto	l6009
  9243  0906                     l5989:	
  9244                           ;usb_device.c: 2213: {
  9245                           ;usb_device.c: 2214: case 0x01:
  9246                           
  9247                           
  9248                           ;usb_device.c: 2218: inPipes[0].pSrc.bRom = (const BYTE*)&device_dsc;
  9249  0906  308D               	movlw	low (_device_dsc| (0+32768))
  9250  0907  0021               	movlb	1	; select bank1
  9251  0908  00E5               	movwf	_inPipes^(0+128)
  9252  0909  3088               	movlw	high (_device_dsc| (0+32768))
  9253  090A  00E6               	movwf	(_inPipes+1)^(0+128)
  9254                           
  9255                           ;usb_device.c: 2220: inPipes[0].wCount.Val = sizeof(device_dsc);
  9256  090B  3012               	movlw	18
  9257  090C  00E8               	movwf	(_inPipes^(0+128)+3)
  9258  090D  3000               	movlw	0
  9259  090E  00E9               	movwf	(_inPipes^(0+128)+4)
  9260                           
  9261                           ;usb_device.c: 2221: break;
  9262  090F  0008               	return
  9263  0910                     l5991:	
  9264                           ;usb_device.c: 2222: case 0x02:
  9265                           
  9266                           
  9267                           ;usb_device.c: 2226: inPipes[0].pSrc.bRom = *(USB_CD_Ptr+SetupPkt.bDscIndex);
  9268  0910  3004               	movlw	low (_USB_CD_Ptr| (0+32768))
  9269  0911  0084               	movwf	4
  9270  0912  3088               	movlw	high (_USB_CD_Ptr| (0+32768))
  9271  0913  0085               	movwf	5
  9272  0914  0020               	movlb	0	; select bank0
  9273  0915  0842               	movf	66,w	;volatile
  9274  0916  0784               	addwf	4,f
  9275  0917  1803               	skipnc
  9276  0918  0A85               	incf	5,f
  9277  0919  3F00               	moviw [0]fsr0
  9278  091A  0021               	movlb	1	; select bank1
  9279  091B  00E5               	movwf	_inPipes^(0+128)
  9280  091C  3088               	movlw	(high __stringtab)| (0+128)
  9281  091D  00E6               	movwf	(_inPipes+1)^(0+128)
  9282                           
  9283                           ;usb_device.c: 2232: inPipes[0].wCount.byte.LB = *(inPipes[0].pSrc.bRom+2);
  9284  091E  0866               	movf	(_inPipes+1)^(0+128),w
  9285  091F  0020               	movlb	0	; select bank0
  9286  0920  00DF               	movwf	??_USBStdGetDscHandler+1
  9287  0921  0021               	movlb	1	; select bank1
  9288  0922  0865               	movf	_inPipes^(0+128),w
  9289  0923  0020               	movlb	0	; select bank0
  9290  0924  00DE               	movwf	??_USBStdGetDscHandler
  9291  0925  3002               	movlw	2
  9292  0926  075E               	addwf	??_USBStdGetDscHandler,w
  9293  0927  0084               	movwf	4
  9294  0928  085F               	movf	??_USBStdGetDscHandler+1,w
  9295  0929  1803               	skipnc
  9296  092A  0A5F               	incf	??_USBStdGetDscHandler+1,w
  9297  092B  0085               	movwf	5
  9298  092C  0800               	movf	0,w	;code access
  9299  092D  00E0               	movwf	??_USBStdGetDscHandler+2
  9300  092E  0860               	movf	??_USBStdGetDscHandler+2,w
  9301  092F  0021               	movlb	1	; select bank1
  9302  0930  00E8               	movwf	(_inPipes^(0+128)+3)
  9303                           
  9304                           ;usb_device.c: 2233: inPipes[0].wCount.byte.HB = *(inPipes[0].pSrc.bRom+3);
  9305  0931  0866               	movf	(_inPipes+1)^(0+128),w
  9306  0932  0020               	movlb	0	; select bank0
  9307  0933  00DF               	movwf	??_USBStdGetDscHandler+1
  9308  0934  0021               	movlb	1	; select bank1
  9309  0935  0865               	movf	_inPipes^(0+128),w
  9310  0936  0020               	movlb	0	; select bank0
  9311  0937  00DE               	movwf	??_USBStdGetDscHandler
  9312  0938  3003               	movlw	3
  9313  0939  075E               	addwf	??_USBStdGetDscHandler,w
  9314  093A  0084               	movwf	4
  9315  093B  085F               	movf	??_USBStdGetDscHandler+1,w
  9316  093C  1803               	skipnc
  9317  093D  0A5F               	incf	??_USBStdGetDscHandler+1,w
  9318  093E  0085               	movwf	5
  9319  093F  0800               	movf	0,w	;code access
  9320  0940  00E0               	movwf	??_USBStdGetDscHandler+2
  9321  0941  0860               	movf	??_USBStdGetDscHandler+2,w
  9322  0942  0021               	movlb	1	; select bank1
  9323  0943  00E9               	movwf	(_inPipes^(0+128)+4)
  9324                           
  9325                           ;usb_device.c: 2234: break;
  9326  0944  0008               	return
  9327  0945                     l5997:	
  9328                           ;usb_device.c: 2235: case 0x03:
  9329                           
  9330                           
  9331                           ;usb_device.c: 2239: if(SetupPkt.bDscIndex<3)
  9332  0945  3003               	movlw	3
  9333  0946  0020               	movlb	0	; select bank0
  9334  0947  0242               	subwf	66,w	;volatile
  9335  0948  1803               	skipnc
  9336  0949  2967               	goto	l6003
  9337                           
  9338                           ;usb_device.c: 2240: {
  9339                           ;usb_device.c: 2242: inPipes[0].pSrc.bRom = *(USB_SD_Ptr+SetupPkt.bDscIndex);
  9340  094A  3001               	movlw	low (_USB_SD_Ptr| (0+32768))
  9341  094B  0084               	movwf	4
  9342  094C  3088               	movlw	high (_USB_SD_Ptr| (0+32768))
  9343  094D  0085               	movwf	5
  9344  094E  0842               	movf	66,w	;volatile
  9345  094F  0784               	addwf	4,f
  9346  0950  1803               	skipnc
  9347  0951  0A85               	incf	5,f
  9348  0952  3F00               	moviw [0]fsr0
  9349  0953  0021               	movlb	1	; select bank1
  9350  0954  00E5               	movwf	_inPipes^(0+128)
  9351  0955  3088               	movlw	(high __stringtab)| (0+128)
  9352  0956  00E6               	movwf	(_inPipes+1)^(0+128)
  9353                           
  9354                           ;usb_device.c: 2244: inPipes[0].wCount.Val = *inPipes[0].pSrc.bRom;
  9355  0957  0865               	movf	_inPipes^(0+128),w
  9356  0958  0084               	movwf	4
  9357  0959  0866               	movf	(_inPipes+1)^(0+128),w
  9358  095A  0085               	movwf	5
  9359  095B  0800               	movf	0,w	;code access
  9360  095C  0020               	movlb	0	; select bank0
  9361  095D  00DE               	movwf	??_USBStdGetDscHandler
  9362  095E  01DF               	clrf	??_USBStdGetDscHandler+1
  9363  095F  085E               	movf	??_USBStdGetDscHandler,w
  9364  0960  0021               	movlb	1	; select bank1
  9365  0961  00E8               	movwf	(_inPipes^(0+128)+3)
  9366  0962  0020               	movlb	0	; select bank0
  9367  0963  085F               	movf	??_USBStdGetDscHandler+1,w
  9368  0964  0021               	movlb	1	; select bank1
  9369  0965  00E9               	movwf	((_inPipes+1)^(0+128)+3)
  9370                           
  9371                           ;usb_device.c: 2245: }
  9372  0966  0008               	return
  9373  0967                     l6003:	
  9374                           
  9375                           ;usb_device.c: 2255: else
  9376                           ;usb_device.c: 2256: {
  9377                           ;usb_device.c: 2257: inPipes[0].info.Val = 0;
  9378  0967  0021               	movlb	1	; select bank1
  9379  0968  01E7               	clrf	(_inPipes^(0+128)+2)
  9380                           
  9381                           ;usb_device.c: 2258: }
  9382                           ;usb_device.c: 2259: break;
  9383  0969  0008               	return
  9384  096A                     l6005:	
  9385                           ;usb_device.c: 2260: default:
  9386                           
  9387                           
  9388                           ;usb_device.c: 2261: inPipes[0].info.Val = 0;
  9389  096A  0021               	movlb	1	; select bank1
  9390  096B  01E7               	clrf	(_inPipes^(0+128)+2)
  9391                           
  9392                           ;usb_device.c: 2263: }
  9393                           
  9394                           ;usb_device.c: 2262: break;
  9395  096C  0008               	return
  9396  096D                     l6009:	
  9397  096D  0020               	movlb	0	; select bank0
  9398  096E  0843               	movf	67,w	;volatile
  9399                           
  9400                           ; Switch size 1, requested type "space"
  9401                           ; Number of cases is 3, Range of values is 1 to 3
  9402                           ; switch strategies available:
  9403                           ; Name         Instructions Cycles
  9404                           ; simple_byte           10     6 (average)
  9405                           ; direct_byte           15     9 (fixed)
  9406                           ; jumptable            263     9 (fixed)
  9407                           ;	Chosen strategy is simple_byte
  9408  096F  3A01               	xorlw	1	; case 1
  9409  0970  1903               	skipnz
  9410  0971  2906               	goto	l5989
  9411  0972  3A03               	xorlw	3	; case 2
  9412  0973  1903               	skipnz
  9413  0974  2910               	goto	l5991
  9414  0975  3A01               	xorlw	1	; case 3
  9415  0976  1903               	skipnz
  9416  0977  2945               	goto	l5997
  9417  0978  296A               	goto	l6005
  9418  0979  0008               	return
  9419  097A                     __end_of_USBStdGetDscHandler:	
  9420                           
  9421                           	psect	text31
  9422  1783                     __ptext31:	
  9423 ;; *************** function _USBStdSetCfgHandler *****************
  9424 ;; Defined at:
  9425 ;;		line 2132 in file "../USB/usb_device.c"
  9426 ;; Parameters:    Size  Location     Type
  9427 ;;		None
  9428 ;; Auto vars:     Size  Location     Type
  9429 ;;  p               2   19[BANK1 ] PTR unsigned char 
  9430 ;;		 -> UEP1(1), 
  9431 ;;  i               1   21[BANK1 ] unsigned char 
  9432 ;;  i               1   22[BANK1 ] unsigned char 
  9433 ;; Return value:  Size  Location     Type
  9434 ;;		None               void
  9435 ;; Registers used:
  9436 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9437 ;; Tracked objects:
  9438 ;;		On entry : 0/0
  9439 ;;		On exit  : 0/0
  9440 ;;		Unchanged: 0/0
  9441 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9442 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9443 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  9444 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  9445 ;;      Totals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
  9446 ;;Total ram usage:        5 bytes
  9447 ;; Hardware stack levels used:    1
  9448 ;; Hardware stack levels required when called:    8
  9449 ;; This function calls:
  9450 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
  9451 ;;		_memset
  9452 ;; This function is called by:
  9453 ;;		_USBCheckStdRequest
  9454 ;; This function uses a non-reentrant model
  9455 ;;
  9456                           
  9457                           
  9458                           ;psect for function _USBStdSetCfgHandler
  9459  1783                     _USBStdSetCfgHandler:	
  9460                           
  9461                           ;usb_device.c: 2133: BYTE i;
  9462                           ;usb_device.c: 2136: inPipes[0].info.bits.busy = 1;
  9463                           
  9464                           ;incstack = 0
  9465                           ; Regs used in _USBStdSetCfgHandler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9466  1783  0021               	movlb	1	; select bank1
  9467  1784  17E7               	bsf	(_inPipes^(0+128)+2),7
  9468                           
  9469                           ;usb_device.c: 2139: { BYTE i; BYTE* p = (BYTE*)&UEP1; for(i=0;i<1;i++) *p++ = 0; };
  9470  1785  300E               	movlw	14
  9471  1786  00B4               	movwf	(USBStdSetCfgHandler@p+1)^(0+128)
  9472  1787  3099               	movlw	153
  9473  1788  00B3               	movwf	USBStdSetCfgHandler@p^(0+128)
  9474  1789  01B5               	clrf	USBStdSetCfgHandler@i_1089^(0+128)
  9475  178A  0835               	movf	USBStdSetCfgHandler@i_1089^(0+128),w
  9476  178B  1D03               	skipz
  9477  178C  2F9D               	goto	l5941
  9478  178D                     l5933:	
  9479  178D  0833               	movf	USBStdSetCfgHandler@p^(0+128),w
  9480  178E  0086               	movwf	6
  9481  178F  0834               	movf	(USBStdSetCfgHandler@p+1)^(0+128),w
  9482  1790  0087               	movwf	7
  9483  1791  0181               	clrf	1
  9484  1792  3001               	movlw	1
  9485  1793  07B3               	addwf	USBStdSetCfgHandler@p^(0+128),f
  9486  1794  3000               	movlw	0
  9487  1795  3DB4               	addwfc	(USBStdSetCfgHandler@p+1)^(0+128),f
  9488  1796  3001               	movlw	1
  9489  1797  00B2               	movwf	??_USBStdSetCfgHandler^(0+128)
  9490  1798  0832               	movf	??_USBStdSetCfgHandler^(0+128),w
  9491  1799  07B5               	addwf	USBStdSetCfgHandler@i_1089^(0+128),f
  9492  179A  0835               	movf	USBStdSetCfgHandler@i_1089^(0+128),w
  9493  179B  1903               	btfsc	3,2
  9494  179C  2F8D               	goto	l5933
  9495  179D                     l5941:	
  9496                           
  9497                           ;usb_device.c: 2142: memset((void*)&BDT[0], 0x00, sizeof(BDT));
  9498  179D  3000               	movlw	0
  9499  179E  00A0               	movwf	?_memset^(0+128)
  9500  179F  3000               	movlw	0
  9501  17A0  00A1               	movwf	(?_memset^(0+128)+1)
  9502  17A1  3020               	movlw	32
  9503  17A2  00A2               	movwf	(?_memset^(0+128)+2)
  9504  17A3  3000               	movlw	0
  9505  17A4  00A3               	movwf	(?_memset^(0+128)+3)
  9506  17A5  3020               	movlw	32
  9507  17A6  3191  2141  3197   	fcall	_memset
  9508                           
  9509                           ;usb_device.c: 2145: UCONbits.PPBRST = 1;
  9510  17A9  003D               	movlb	29	; select bank29
  9511  17AA  170E               	bsf	14,6	;volatile
  9512                           
  9513                           ;usb_device.c: 2150: for(i = 0; i < (BYTE)(1+1u); i++)
  9514  17AB  0021               	movlb	1	; select bank1
  9515  17AC  01B6               	clrf	USBStdSetCfgHandler@i^(0+128)
  9516  17AD  3002               	movlw	2
  9517  17AE  0236               	subwf	USBStdSetCfgHandler@i^(0+128),w
  9518  17AF  1803               	btfsc	3,0
  9519  17B0  2FC3               	goto	l5957
  9520  17B1                     l5951:	
  9521                           
  9522                           ;usb_device.c: 2151: {
  9523                           ;usb_device.c: 2152: ep_data_in[i].Val = 0u;
  9524  17B1  0836               	movf	USBStdSetCfgHandler@i^(0+128),w
  9525  17B2  3ECD               	addlw	_ep_data_in& (0+255)
  9526  17B3  0086               	movwf	6
  9527  17B4  0187               	clrf	7
  9528  17B5  0181               	clrf	1
  9529                           
  9530                           ;usb_device.c: 2153: ep_data_out[i].Val = 0u;
  9531  17B6  0836               	movf	USBStdSetCfgHandler@i^(0+128),w
  9532  17B7  3ECF               	addlw	_ep_data_out& (0+255)
  9533  17B8  0086               	movwf	6
  9534  17B9  0187               	clrf	7
  9535  17BA  0181               	clrf	1
  9536  17BB  3001               	movlw	1
  9537  17BC  00B2               	movwf	??_USBStdSetCfgHandler^(0+128)
  9538  17BD  0832               	movf	??_USBStdSetCfgHandler^(0+128),w
  9539  17BE  07B6               	addwf	USBStdSetCfgHandler@i^(0+128),f
  9540  17BF  3002               	movlw	2
  9541  17C0  0236               	subwf	USBStdSetCfgHandler@i^(0+128),w
  9542  17C1  1C03               	skipc
  9543  17C2  2FB1               	goto	l5951
  9544  17C3                     l5957:	
  9545                           
  9546                           ;usb_device.c: 2154: }
  9547                           ;usb_device.c: 2157: memset((void*)&USBAlternateInterface,0x00,1);
  9548  17C3  3000               	movlw	0
  9549  17C4  00A0               	movwf	?_memset^(0+128)
  9550  17C5  3000               	movlw	0
  9551  17C6  00A1               	movwf	(?_memset^(0+128)+1)
  9552  17C7  3001               	movlw	1
  9553  17C8  00A2               	movwf	(?_memset^(0+128)+2)
  9554  17C9  3000               	movlw	0
  9555  17CA  00A3               	movwf	(?_memset^(0+128)+3)
  9556  17CB  30EB               	movlw	_USBAlternateInterface& (0+255)
  9557  17CC  3191  2141  3197   	fcall	_memset
  9558                           
  9559                           ;usb_device.c: 2160: UCONbits.PPBRST = 0;
  9560  17CF  003D               	movlb	29	; select bank29
  9561  17D0  130E               	bcf	14,6	;volatile
  9562                           
  9563                           ;usb_device.c: 2162: pBDTEntryIn[0] = (volatile BDT_ENTRY*)&BDT[2];
  9564  17D1  3028               	movlw	40
  9565  17D2  0021               	movlb	1	; select bank1
  9566  17D3  00B2               	movwf	??_USBStdSetCfgHandler^(0+128)
  9567  17D4  0832               	movf	??_USBStdSetCfgHandler^(0+128),w
  9568  17D5  00D1               	movwf	_pBDTEntryIn^(0+128)
  9569                           
  9570                           ;usb_device.c: 2165: pBDTEntryEP0OutCurrent = (volatile BDT_ENTRY*)&BDT[0];
  9571  17D6  3020               	movlw	32
  9572  17D7  00B2               	movwf	??_USBStdSetCfgHandler^(0+128)
  9573  17D8  0832               	movf	??_USBStdSetCfgHandler^(0+128),w
  9574  17D9  00E4               	movwf	_pBDTEntryEP0OutCurrent^(0+128)
  9575                           
  9576                           ;usb_device.c: 2166: pBDTEntryEP0OutNext = pBDTEntryEP0OutCurrent;
  9577  17DA  0864               	movf	_pBDTEntryEP0OutCurrent^(0+128),w
  9578  17DB  00B2               	movwf	??_USBStdSetCfgHandler^(0+128)
  9579  17DC  0832               	movf	??_USBStdSetCfgHandler^(0+128),w
  9580  17DD  0020               	movlb	0	; select bank0
  9581  17DE  00EC               	movwf	_pBDTEntryEP0OutNext
  9582                           
  9583                           ;usb_device.c: 2169: USBActiveConfiguration = SetupPkt.bConfigurationValue;
  9584  17DF  0842               	movf	66,w	;volatile
  9585  17E0  0021               	movlb	1	; select bank1
  9586  17E1  00B2               	movwf	??_USBStdSetCfgHandler^(0+128)
  9587  17E2  0832               	movf	??_USBStdSetCfgHandler^(0+128),w
  9588  17E3  00EA               	movwf	_USBActiveConfiguration^(0+128)
  9589                           
  9590                           ;usb_device.c: 2172: if(USBActiveConfiguration == 0)
  9591  17E4  08EA               	movf	_USBActiveConfiguration^(0+128),f
  9592  17E5  1D03               	skipz
  9593  17E6  2FEC               	goto	l5973
  9594                           
  9595                           ;usb_device.c: 2173: {
  9596                           ;usb_device.c: 2175: USBDeviceState = ADDRESS_STATE;
  9597  17E7  3010               	movlw	16
  9598  17E8  00B2               	movwf	??_USBStdSetCfgHandler^(0+128)
  9599  17E9  0832               	movf	??_USBStdSetCfgHandler^(0+128),w
  9600  17EA  00DC               	movwf	_USBDeviceState^(0+128)
  9601                           
  9602                           ;usb_device.c: 2176: }
  9603  17EB  0008               	return
  9604  17EC                     l5973:	
  9605                           
  9606                           ;usb_device.c: 2177: else
  9607                           ;usb_device.c: 2178: {
  9608                           ;usb_device.c: 2180: USER_USB_CALLBACK_EVENT_HANDLER(EVENT_CONFIGURED,(void*)&USBActiveC
      +                          onfiguration,1);
  9609  17EC  3001               	movlw	1
  9610  17ED  00AD               	movwf	?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)
  9611  17EE  3000               	movlw	0
  9612  17EF  00AE               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)+1)
  9613  17F0  30EA               	movlw	_USBActiveConfiguration& (0+255)
  9614  17F1  00B2               	movwf	??_USBStdSetCfgHandler^(0+128)
  9615  17F2  0832               	movf	??_USBStdSetCfgHandler^(0+128),w
  9616  17F3  00AF               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER+2)^(0+128)
  9617  17F4  3001               	movlw	1
  9618  17F5  00B0               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)+3)
  9619  17F6  3000               	movlw	0
  9620  17F7  00B1               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)+4)
  9621  17F8  3192  227D         	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
  9622                           
  9623                           ;usb_device.c: 2185: USBDeviceState = CONFIGURED_STATE;
  9624  17FA  3020               	movlw	32
  9625  17FB  0021               	movlb	1	; select bank1
  9626  17FC  00B2               	movwf	??_USBStdSetCfgHandler^(0+128)
  9627  17FD  0832               	movf	??_USBStdSetCfgHandler^(0+128),w
  9628  17FE  00DC               	movwf	_USBDeviceState^(0+128)
  9629  17FF  0008               	return
  9630  1800                     __end_of_USBStdSetCfgHandler:	
  9631                           
  9632                           	psect	text32
  9633  1141                     __ptext32:	
  9634 ;; *************** function _memset *****************
  9635 ;; Defined at:
  9636 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.20\sources\common\memset.c"
  9637 ;; Parameters:    Size  Location     Type
  9638 ;;  p1              1    wreg     PTR void 
  9639 ;;		 -> USBAlternateInterface(1), BDT(32), 
  9640 ;;  c               2    0[BANK1 ] int 
  9641 ;;  n               2    2[BANK1 ] unsigned int 
  9642 ;; Auto vars:     Size  Location     Type
  9643 ;;  p1              1   15[BANK0 ] PTR void 
  9644 ;;		 -> USBAlternateInterface(1), BDT(32), 
  9645 ;;  p               1   16[BANK0 ] PTR unsigned char 
  9646 ;;		 -> USBAlternateInterface(1), BDT(32), 
  9647 ;; Return value:  Size  Location     Type
  9648 ;;                  1    wreg      PTR void 
  9649 ;; Registers used:
  9650 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9651 ;; Tracked objects:
  9652 ;;		On entry : 0/0
  9653 ;;		On exit  : 0/0
  9654 ;;		Unchanged: 0/0
  9655 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9656 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  9657 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9658 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9659 ;;      Totals:         0       3       4       0       0       0       0       0       0       0       0       0       
      +0       0
  9660 ;;Total ram usage:        7 bytes
  9661 ;; Hardware stack levels used:    1
  9662 ;; Hardware stack levels required when called:    4
  9663 ;; This function calls:
  9664 ;;		Nothing
  9665 ;; This function is called by:
  9666 ;;		_USBStdSetCfgHandler
  9667 ;; This function uses a non-reentrant model
  9668 ;;
  9669                           
  9670                           
  9671                           ;psect for function _memset
  9672  1141                     _memset:	
  9673                           
  9674                           ;incstack = 0
  9675                           ; Regs used in _memset: [wreg+fsr1l+fsr1h+status,2+status,0]
  9676                           ;memset@p1 stored from wreg
  9677  1141  0020               	movlb	0	; select bank0
  9678  1142  00DF               	movwf	memset@p1
  9679  1143  085F               	movf	memset@p1,w
  9680  1144  00DE               	movwf	??_memset
  9681  1145  085E               	movf	??_memset,w
  9682  1146  00E0               	movwf	memset@p
  9683  1147                     l5983:	
  9684  1147  3001               	movlw	1
  9685  1148  0021               	movlb	1	; select bank1
  9686  1149  02A2               	subwf	memset@n^(0+128),f
  9687  114A  3000               	movlw	0
  9688  114B  3BA3               	subwfb	(memset@n+1)^(0+128),f
  9689  114C  30FF               	movlw	255
  9690  114D  0623               	xorwf	(memset@n+1)^(0+128),w
  9691  114E  1D03               	skipz
  9692  114F  2952               	goto	u6035
  9693  1150  30FF               	movlw	255
  9694  1151  0622               	xorwf	memset@n^(0+128),w
  9695  1152                     u6035:	
  9696  1152  1903               	btfsc	3,2
  9697  1153  0008               	return
  9698  1154  0021               	movlb	1	; select bank1
  9699  1155  0820               	movf	memset@c^(0+128),w
  9700  1156  0020               	movlb	0	; select bank0
  9701  1157  00DE               	movwf	??_memset
  9702  1158  0860               	movf	memset@p,w
  9703  1159  0086               	movwf	6
  9704  115A  0187               	clrf	7
  9705  115B  085E               	movf	??_memset,w
  9706  115C  0081               	movwf	1
  9707  115D  3001               	movlw	1
  9708  115E  00DE               	movwf	??_memset
  9709  115F  085E               	movf	??_memset,w
  9710  1160  07E0               	addwf	memset@p,f
  9711  1161  2947               	goto	l5983
  9712  1162                     __end_of_memset:	
  9713                           ;	Return value of _memset is never used
  9714                           
  9715                           
  9716                           	psect	text33
  9717  09FE                     __ptext33:	
  9718 ;; *************** function _USBCtrlEPServiceComplete *****************
  9719 ;; Defined at:
  9720 ;;		line 1786 in file "../USB/usb_device.c"
  9721 ;; Parameters:    Size  Location     Type
  9722 ;;		None
  9723 ;; Auto vars:     Size  Location     Type
  9724 ;;		None
  9725 ;; Return value:  Size  Location     Type
  9726 ;;		None               void
  9727 ;; Registers used:
  9728 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9729 ;; Tracked objects:
  9730 ;;		On entry : 0/0
  9731 ;;		On exit  : 0/0
  9732 ;;		Unchanged: 0/0
  9733 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9734 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9735 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9736 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  9737 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  9738 ;;Total ram usage:        2 bytes
  9739 ;; Hardware stack levels used:    1
  9740 ;; Hardware stack levels required when called:    6
  9741 ;; This function calls:
  9742 ;;		_USBCtrlEPAllowStatusStage
  9743 ;;		_USBCtrlEPAllowDataStage
  9744 ;; This function is called by:
  9745 ;;		_USBCtrlTrfSetupHandler
  9746 ;; This function uses a non-reentrant model
  9747 ;;
  9748                           
  9749                           
  9750                           ;psect for function _USBCtrlEPServiceComplete
  9751  09FE                     _USBCtrlEPServiceComplete:	
  9752                           
  9753                           ;usb_device.c: 1791: UCONbits.PKTDIS = 0;
  9754                           
  9755                           ;incstack = 0
  9756                           ; Regs used in _USBCtrlEPServiceComplete: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9757  09FE  003D               	movlb	29	; select bank29
  9758  09FF  120E               	bcf	14,4	;volatile
  9759                           
  9760                           ;usb_device.c: 1797: if(inPipes[0].info.bits.busy == 0)
  9761  0A00  0021               	movlb	1	; select bank1
  9762  0A01  1BE7               	btfsc	(_inPipes^(0+128)+2),7
  9763  0A02  2A3E               	goto	l208
  9764                           
  9765                           ;usb_device.c: 1798: {
  9766                           ;usb_device.c: 1799: if(outPipes[0].info.bits.busy == 1)
  9767  0A03  0023               	movlb	3	; select bank3
  9768  0A04  1FA2               	btfss	(_outPipes^(0+384)+2),7
  9769  0A05  2A15               	goto	l5855
  9770                           
  9771                           ;usb_device.c: 1800: {
  9772                           ;usb_device.c: 1801: controlTransferState = 2;
  9773  0A06  3002               	movlw	2
  9774  0A07  0021               	movlb	1	; select bank1
  9775  0A08  00A2               	movwf	??_USBCtrlEPServiceComplete^(0+128)
  9776  0A09  0822               	movf	??_USBCtrlEPServiceComplete^(0+128),w
  9777  0A0A  0020               	movlb	0	; select bank0
  9778  0A0B  00EB               	movwf	_controlTransferState
  9779                           
  9780                           ;usb_device.c: 1812: if(USBDeferOUTDataStagePackets == FALSE)
  9781  0A0C  08E9               	movf	_USBDeferOUTDataStagePackets,f
  9782  0A0D  1D03               	skipz
  9783  0A0E  2A11               	goto	l5851
  9784                           
  9785                           ;usb_device.c: 1813: {
  9786                           ;usb_device.c: 1814: USBCtrlEPAllowDataStage();
  9787  0A0F  3193  23DC         	fcall	_USBCtrlEPAllowDataStage
  9788  0A11                     l5851:	
  9789                           
  9790                           ;usb_device.c: 1815: }
  9791                           ;usb_device.c: 1819: USBStatusStageEnabledFlag2 = FALSE;
  9792  0A11  0021               	movlb	1	; select bank1
  9793  0A12  01E0               	clrf	_USBStatusStageEnabledFlag2^(0+128)	;volatile
  9794                           
  9795                           ;usb_device.c: 1820: USBStatusStageEnabledFlag1 = FALSE;
  9796  0A13  01DF               	clrf	_USBStatusStageEnabledFlag1^(0+128)	;volatile
  9797                           
  9798                           ;usb_device.c: 1821: }
  9799  0A14  0008               	return
  9800  0A15                     l5855:	
  9801                           
  9802                           ;usb_device.c: 1822: else
  9803                           ;usb_device.c: 1823: {
  9804                           ;usb_device.c: 1828: pBDTEntryEP0OutNext->CNT = 8;
  9805  0A15  3008               	movlw	8
  9806  0A16  0021               	movlb	1	; select bank1
  9807  0A17  00A2               	movwf	??_USBCtrlEPServiceComplete^(0+128)
  9808  0A18  0020               	movlb	0	; select bank0
  9809  0A19  0A6C               	incf	_pBDTEntryEP0OutNext,w
  9810  0A1A  0086               	movwf	6
  9811  0A1B  0187               	clrf	7
  9812  0A1C  0021               	movlb	1	; select bank1
  9813  0A1D  0822               	movf	??_USBCtrlEPServiceComplete^(0+128),w
  9814  0A1E  0081               	movwf	1
  9815                           
  9816                           ;usb_device.c: 1829: pBDTEntryEP0OutNext->ADR = (((WORD)(&SetupPkt))& 0x7FFF);
  9817  0A1F  3040               	movlw	64
  9818  0A20  00A2               	movwf	??_USBCtrlEPServiceComplete^(0+128)
  9819  0A21  3000               	movlw	0
  9820  0A22  00A3               	movwf	(??_USBCtrlEPServiceComplete^(0+128)+1)
  9821  0A23  0020               	movlb	0	; select bank0
  9822  0A24  086C               	movf	_pBDTEntryEP0OutNext,w
  9823  0A25  3E02               	addlw	2
  9824  0A26  0086               	movwf	6
  9825  0A27  0187               	clrf	7
  9826  0A28  0021               	movlb	1	; select bank1
  9827  0A29  0822               	movf	??_USBCtrlEPServiceComplete^(0+128),w
  9828  0A2A  3FC0               	movwi [0]fsr1
  9829  0A2B  0823               	movf	(??_USBCtrlEPServiceComplete+1)^(0+128),w
  9830  0A2C  3FC1               	movwi [1]fsr1
  9831                           
  9832                           ;usb_device.c: 1830: pBDTEntryEP0OutNext->STAT.Val = 0x80|0x00|(0x08 & 0x08)|0x04;
  9833  0A2D  308C               	movlw	140
  9834  0A2E  00A2               	movwf	??_USBCtrlEPServiceComplete^(0+128)
  9835  0A2F  0020               	movlb	0	; select bank0
  9836  0A30  086C               	movf	_pBDTEntryEP0OutNext,w
  9837  0A31  0086               	movwf	6
  9838  0A32  0187               	clrf	7
  9839  0A33  0021               	movlb	1	; select bank1
  9840  0A34  0822               	movf	??_USBCtrlEPServiceComplete^(0+128),w
  9841  0A35  0081               	movwf	1
  9842                           
  9843                           ;usb_device.c: 1831: pBDTEntryIn[0]->STAT.Val = 0x80|0x04;
  9844  0A36  3084               	movlw	132
  9845  0A37  00A2               	movwf	??_USBCtrlEPServiceComplete^(0+128)
  9846  0A38  0851               	movf	_pBDTEntryIn^(0+128),w
  9847  0A39  0086               	movwf	6
  9848  0A3A  0187               	clrf	7
  9849  0A3B  0822               	movf	??_USBCtrlEPServiceComplete^(0+128),w
  9850  0A3C  0081               	movwf	1
  9851                           
  9852                           ;usb_device.c: 1832: }
  9853                           ;usb_device.c: 1833: }
  9854  0A3D  0008               	return
  9855  0A3E                     l208:	
  9856                           
  9857                           ;usb_device.c: 1834: else
  9858                           ;usb_device.c: 1835: {
  9859                           ;usb_device.c: 1836: if(SetupPkt.DataDir == (0x80>>7))
  9860  0A3E  0020               	movlb	0	; select bank0
  9861  0A3F  1FC0               	btfss	64,7	;volatile
  9862  0A40  2A53               	goto	l5871
  9863                           
  9864                           ;usb_device.c: 1837: {
  9865                           ;usb_device.c: 1838: controlTransferState = 1;
  9866  0A41  01EB               	clrf	_controlTransferState
  9867  0A42  0AEB               	incf	_controlTransferState,f
  9868                           
  9869                           ;usb_device.c: 1852: if(USBDeferINDataStagePackets == FALSE)
  9870  0A43  08E8               	movf	_USBDeferINDataStagePackets,f
  9871  0A44  1D03               	skipz
  9872  0A45  2A49               	goto	l5863
  9873                           
  9874                           ;usb_device.c: 1853: {
  9875                           ;usb_device.c: 1854: USBCtrlEPAllowDataStage();
  9876  0A46  3193  23DC  3189   	fcall	_USBCtrlEPAllowDataStage
  9877  0A49                     l5863:	
  9878                           
  9879                           ;usb_device.c: 1855: }
  9880                           ;usb_device.c: 1877: USBStatusStageEnabledFlag2 = FALSE;
  9881  0A49  0021               	movlb	1	; select bank1
  9882  0A4A  01E0               	clrf	_USBStatusStageEnabledFlag2^(0+128)	;volatile
  9883                           
  9884                           ;usb_device.c: 1878: USBStatusStageEnabledFlag1 = FALSE;
  9885  0A4B  01DF               	clrf	_USBStatusStageEnabledFlag1^(0+128)	;volatile
  9886                           
  9887                           ;usb_device.c: 1879: if(USBDeferStatusStagePacket == FALSE)
  9888  0A4C  0020               	movlb	0	; select bank0
  9889  0A4D  08EA               	movf	_USBDeferStatusStagePacket,f
  9890  0A4E  1D03               	skipz
  9891  0A4F  0008               	return
  9892                           
  9893                           ;usb_device.c: 1880: {
  9894                           ;usb_device.c: 1881: USBCtrlEPAllowStatusStage();
  9895  0A50  3195  2549         	fcall	_USBCtrlEPAllowStatusStage
  9896                           
  9897                           ;usb_device.c: 1882: }
  9898                           ;usb_device.c: 1883: }
  9899  0A52  0008               	return
  9900  0A53                     l5871:	
  9901                           
  9902                           ;usb_device.c: 1884: else
  9903                           ;usb_device.c: 1885: {
  9904                           ;usb_device.c: 1896: controlTransferState = 2;
  9905  0A53  3002               	movlw	2
  9906  0A54  0021               	movlb	1	; select bank1
  9907  0A55  00A2               	movwf	??_USBCtrlEPServiceComplete^(0+128)
  9908  0A56  0822               	movf	??_USBCtrlEPServiceComplete^(0+128),w
  9909  0A57  0020               	movlb	0	; select bank0
  9910  0A58  00EB               	movwf	_controlTransferState
  9911                           
  9912                           ;usb_device.c: 1899: pBDTEntryEP0OutNext->CNT = 8;
  9913  0A59  3008               	movlw	8
  9914  0A5A  0021               	movlb	1	; select bank1
  9915  0A5B  00A2               	movwf	??_USBCtrlEPServiceComplete^(0+128)
  9916  0A5C  0020               	movlb	0	; select bank0
  9917  0A5D  0A6C               	incf	_pBDTEntryEP0OutNext,w
  9918  0A5E  0086               	movwf	6
  9919  0A5F  0187               	clrf	7
  9920  0A60  0021               	movlb	1	; select bank1
  9921  0A61  0822               	movf	??_USBCtrlEPServiceComplete^(0+128),w
  9922  0A62  0081               	movwf	1
  9923                           
  9924                           ;usb_device.c: 1900: pBDTEntryEP0OutNext->ADR = (((WORD)(&SetupPkt))& 0x7FFF);
  9925  0A63  3040               	movlw	64
  9926  0A64  00A2               	movwf	??_USBCtrlEPServiceComplete^(0+128)
  9927  0A65  3000               	movlw	0
  9928  0A66  00A3               	movwf	(??_USBCtrlEPServiceComplete^(0+128)+1)
  9929  0A67  0020               	movlb	0	; select bank0
  9930  0A68  086C               	movf	_pBDTEntryEP0OutNext,w
  9931  0A69  3E02               	addlw	2
  9932  0A6A  0086               	movwf	6
  9933  0A6B  0187               	clrf	7
  9934  0A6C  0021               	movlb	1	; select bank1
  9935  0A6D  0822               	movf	??_USBCtrlEPServiceComplete^(0+128),w
  9936  0A6E  3FC0               	movwi [0]fsr1
  9937  0A6F  0823               	movf	(??_USBCtrlEPServiceComplete+1)^(0+128),w
  9938  0A70  3FC1               	movwi [1]fsr1
  9939                           
  9940                           ;usb_device.c: 1901: pBDTEntryEP0OutNext->STAT.Val = 0x80|0x04;
  9941  0A71  3084               	movlw	132
  9942  0A72  00A2               	movwf	??_USBCtrlEPServiceComplete^(0+128)
  9943  0A73  0020               	movlb	0	; select bank0
  9944  0A74  086C               	movf	_pBDTEntryEP0OutNext,w
  9945  0A75  0086               	movwf	6
  9946  0A76  0187               	clrf	7
  9947  0A77  0021               	movlb	1	; select bank1
  9948  0A78  0822               	movf	??_USBCtrlEPServiceComplete^(0+128),w
  9949  0A79  0081               	movwf	1
  9950                           
  9951                           ;usb_device.c: 1904: USBStatusStageEnabledFlag2 = FALSE;
  9952  0A7A  01E0               	clrf	_USBStatusStageEnabledFlag2^(0+128)	;volatile
  9953                           
  9954                           ;usb_device.c: 1905: USBStatusStageEnabledFlag1 = FALSE;
  9955  0A7B  01DF               	clrf	_USBStatusStageEnabledFlag1^(0+128)	;volatile
  9956                           
  9957                           ;usb_device.c: 1906: if(USBDeferStatusStagePacket == FALSE)
  9958  0A7C  0020               	movlb	0	; select bank0
  9959  0A7D  08EA               	movf	_USBDeferStatusStagePacket,f
  9960  0A7E  1D03               	skipz
  9961  0A7F  0008               	return
  9962                           
  9963                           ;usb_device.c: 1907: {
  9964                           ;usb_device.c: 1908: USBCtrlEPAllowStatusStage();
  9965  0A80  3195  2549         	fcall	_USBCtrlEPAllowStatusStage
  9966  0A82  0008               	return
  9967  0A83                     __end_of_USBCtrlEPServiceComplete:	
  9968                           
  9969                           	psect	text34
  9970  13DC                     __ptext34:	
  9971 ;; *************** function _USBCtrlEPAllowDataStage *****************
  9972 ;; Defined at:
  9973 ;;		line 1660 in file "../USB/usb_device.c"
  9974 ;; Parameters:    Size  Location     Type
  9975 ;;		None
  9976 ;; Auto vars:     Size  Location     Type
  9977 ;;		None
  9978 ;; Return value:  Size  Location     Type
  9979 ;;		None               void
  9980 ;; Registers used:
  9981 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9982 ;; Tracked objects:
  9983 ;;		On entry : 0/0
  9984 ;;		On exit  : 0/0
  9985 ;;		Unchanged: 0/0
  9986 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9987 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9988 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9989 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  9990 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  9991 ;;Total ram usage:        2 bytes
  9992 ;; Hardware stack levels used:    1
  9993 ;; Hardware stack levels required when called:    5
  9994 ;; This function calls:
  9995 ;;		_USBCtrlTrfTxService
  9996 ;; This function is called by:
  9997 ;;		_USBCtrlEPServiceComplete
  9998 ;; This function uses a non-reentrant model
  9999 ;;
 10000                           
 10001                           
 10002                           ;psect for function _USBCtrlEPAllowDataStage
 10003  13DC                     _USBCtrlEPAllowDataStage:	
 10004                           
 10005                           ;usb_device.c: 1661: USBDeferINDataStagePackets = FALSE;
 10006                           
 10007                           ;incstack = 0
 10008                           ; Regs used in _USBCtrlEPAllowDataStage: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10009  13DC  0020               	movlb	0	; select bank0
 10010  13DD  01E8               	clrf	_USBDeferINDataStagePackets	;volatile
 10011                           
 10012                           ;usb_device.c: 1662: USBDeferOUTDataStagePackets = FALSE;
 10013  13DE  01E9               	clrf	_USBDeferOUTDataStagePackets	;volatile
 10014                           
 10015                           ;usb_device.c: 1664: if(controlTransferState == 2)
 10016  13DF  086B               	movf	_controlTransferState,w
 10017  13E0  3A02               	xorlw	2
 10018  13E1  1D03               	skipz
 10019  13E2  2C05               	goto	l5789
 10020                           
 10021                           ;usb_device.c: 1665: {
 10022                           ;usb_device.c: 1667: pBDTEntryEP0OutNext->CNT = 8;
 10023  13E3  3008               	movlw	8
 10024  13E4  0021               	movlb	1	; select bank1
 10025  13E5  00A0               	movwf	??_USBCtrlEPAllowDataStage^(0+128)
 10026  13E6  0020               	movlb	0	; select bank0
 10027  13E7  0A6C               	incf	_pBDTEntryEP0OutNext,w
 10028  13E8  0086               	movwf	6
 10029  13E9  0187               	clrf	7
 10030  13EA  0021               	movlb	1	; select bank1
 10031  13EB  0820               	movf	??_USBCtrlEPAllowDataStage^(0+128),w
 10032  13EC  0081               	movwf	1
 10033                           
 10034                           ;usb_device.c: 1668: pBDTEntryEP0OutNext->ADR = (((WORD)(&CtrlTrfData))& 0x7FFF);
 10035  13ED  3048               	movlw	72
 10036  13EE  00A0               	movwf	??_USBCtrlEPAllowDataStage^(0+128)
 10037  13EF  3000               	movlw	0
 10038  13F0  00A1               	movwf	(??_USBCtrlEPAllowDataStage^(0+128)+1)
 10039  13F1  0020               	movlb	0	; select bank0
 10040  13F2  086C               	movf	_pBDTEntryEP0OutNext,w
 10041  13F3  3E02               	addlw	2
 10042  13F4  0086               	movwf	6
 10043  13F5  0187               	clrf	7
 10044  13F6  0021               	movlb	1	; select bank1
 10045  13F7  0820               	movf	??_USBCtrlEPAllowDataStage^(0+128),w
 10046  13F8  3FC0               	movwi [0]fsr1
 10047  13F9  0821               	movf	(??_USBCtrlEPAllowDataStage+1)^(0+128),w
 10048  13FA  3FC1               	movwi [1]fsr1
 10049                           
 10050                           ;usb_device.c: 1669: pBDTEntryEP0OutNext->STAT.Val = 0x80|0x40|(0x08 & 0x08);
 10051  13FB  30C8               	movlw	200
 10052  13FC  00A0               	movwf	??_USBCtrlEPAllowDataStage^(0+128)
 10053  13FD  0020               	movlb	0	; select bank0
 10054  13FE  086C               	movf	_pBDTEntryEP0OutNext,w
 10055  13FF  0086               	movwf	6
 10056  1400  0187               	clrf	7
 10057  1401  0021               	movlb	1	; select bank1
 10058  1402  0820               	movf	??_USBCtrlEPAllowDataStage^(0+128),w
 10059  1403  0081               	movwf	1
 10060                           
 10061                           ;usb_device.c: 1670: }
 10062  1404  0008               	return
 10063  1405                     l5789:	
 10064                           
 10065                           ;usb_device.c: 1671: else
 10066                           ;usb_device.c: 1672: {
 10067                           ;usb_device.c: 1675: if(SetupPkt.wLength < inPipes[0].wCount.Val)
 10068  1405  0021               	movlb	1	; select bank1
 10069  1406  0869               	movf	((_inPipes+1)^(0+128)+3),w
 10070  1407  0020               	movlb	0	; select bank0
 10071  1408  0247               	subwf	71,w	;volatile
 10072  1409  1D03               	skipz
 10073  140A  2C0F               	goto	u5785
 10074  140B  0021               	movlb	1	; select bank1
 10075  140C  0868               	movf	(_inPipes^(0+128)+3),w
 10076  140D  0020               	movlb	0	; select bank0
 10077  140E  0246               	subwf	70,w	;volatile
 10078  140F                     u5785:	
 10079  140F  1803               	skipnc
 10080  1410  2C1A               	goto	l5793
 10081                           
 10082                           ;usb_device.c: 1676: {
 10083                           ;usb_device.c: 1677: inPipes[0].wCount.Val = SetupPkt.wLength;
 10084  1411  0847               	movf	71,w	;volatile
 10085  1412  0021               	movlb	1	; select bank1
 10086  1413  01E9               	clrf	((_inPipes+1)^(0+128)+3)
 10087  1414  07E9               	addwf	((_inPipes+1)^(0+128)+3),f
 10088  1415  0020               	movlb	0	; select bank0
 10089  1416  0846               	movf	70,w	;volatile
 10090  1417  0021               	movlb	1	; select bank1
 10091  1418  01E8               	clrf	(_inPipes^(0+128)+3)
 10092  1419  07E8               	addwf	(_inPipes^(0+128)+3),f
 10093  141A                     l5793:	
 10094                           
 10095                           ;usb_device.c: 1678: }
 10096                           ;usb_device.c: 1679: USBCtrlTrfTxService();
 10097  141A  3189  217A  3193   	fcall	_USBCtrlTrfTxService
 10098                           
 10099                           ;usb_device.c: 1684: pBDTEntryIn[0]->ADR = (((WORD)(&CtrlTrfData))& 0x7FFF);
 10100  141D  3048               	movlw	72
 10101  141E  0021               	movlb	1	; select bank1
 10102  141F  00A0               	movwf	??_USBCtrlEPAllowDataStage^(0+128)
 10103  1420  3000               	movlw	0
 10104  1421  00A1               	movwf	(??_USBCtrlEPAllowDataStage^(0+128)+1)
 10105  1422  0851               	movf	_pBDTEntryIn^(0+128),w
 10106  1423  3E02               	addlw	2
 10107  1424  0086               	movwf	6
 10108  1425  0187               	clrf	7
 10109  1426  0820               	movf	??_USBCtrlEPAllowDataStage^(0+128),w
 10110  1427  3FC0               	movwi [0]fsr1
 10111  1428  0821               	movf	(??_USBCtrlEPAllowDataStage+1)^(0+128),w
 10112  1429  3FC1               	movwi [1]fsr1
 10113                           
 10114                           ;usb_device.c: 1685: pBDTEntryIn[0]->STAT.Val = 0x80|0x40|(0x08 & 0x08);
 10115  142A  30C8               	movlw	200
 10116  142B  00A0               	movwf	??_USBCtrlEPAllowDataStage^(0+128)
 10117  142C  0851               	movf	_pBDTEntryIn^(0+128),w
 10118  142D  0086               	movwf	6
 10119  142E  0187               	clrf	7
 10120  142F  0820               	movf	??_USBCtrlEPAllowDataStage^(0+128),w
 10121  1430  0081               	movwf	1
 10122  1431  0008               	return
 10123  1432                     __end_of_USBCtrlEPAllowDataStage:	
 10124                           
 10125                           	psect	text35
 10126  097A                     __ptext35:	
 10127 ;; *************** function _USBCtrlTrfTxService *****************
 10128 ;; Defined at:
 10129 ;;		line 1938 in file "../USB/usb_device.c"
 10130 ;; Parameters:    Size  Location     Type
 10131 ;;		None
 10132 ;; Auto vars:     Size  Location     Type
 10133 ;;  byteToSend      1   16[BANK0 ] unsigned char 
 10134 ;; Return value:  Size  Location     Type
 10135 ;;		None               void
 10136 ;; Registers used:
 10137 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
 10138 ;; Tracked objects:
 10139 ;;		On entry : 0/0
 10140 ;;		On exit  : 0/0
 10141 ;;		Unchanged: 0/0
 10142 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10143 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10144 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10145 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10146 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10147 ;;Total ram usage:        3 bytes
 10148 ;; Hardware stack levels used:    1
 10149 ;; Hardware stack levels required when called:    4
 10150 ;; This function calls:
 10151 ;;		Nothing
 10152 ;; This function is called by:
 10153 ;;		_USBCtrlEPAllowDataStage
 10154 ;;		_USBCtrlTrfInHandler
 10155 ;; This function uses a non-reentrant model
 10156 ;;
 10157                           
 10158                           
 10159                           ;psect for function _USBCtrlTrfTxService
 10160  097A                     _USBCtrlTrfTxService:	
 10161                           
 10162                           ;usb_device.c: 1939: BYTE byteToSend;
 10163                           ;usb_device.c: 1943: byteToSend = 8;
 10164                           
 10165                           ;incstack = 0
 10166                           ; Regs used in _USBCtrlTrfTxService: [wreg-fsr1h+status,2+status,0+pclath]
 10167  097A  3008               	movlw	8
 10168  097B  0020               	movlb	0	; select bank0
 10169  097C  00DE               	movwf	??_USBCtrlTrfTxService
 10170  097D  085E               	movf	??_USBCtrlTrfTxService,w
 10171  097E  00E0               	movwf	USBCtrlTrfTxService@byteToSend
 10172                           
 10173                           ;usb_device.c: 1944: if(inPipes[0].wCount.Val < (BYTE)8)
 10174  097F  3000               	movlw	0
 10175  0980  0021               	movlb	1	; select bank1
 10176  0981  0269               	subwf	((_inPipes+1)^(0+128)+3),w
 10177  0982  3008               	movlw	8
 10178  0983  1903               	skipnz
 10179  0984  0268               	subwf	(_inPipes^(0+128)+3),w
 10180  0985  1803               	skipnc
 10181  0986  299A               	goto	l5811
 10182                           
 10183                           ;usb_device.c: 1945: {
 10184                           ;usb_device.c: 1946: byteToSend = inPipes[0].wCount.Val;
 10185  0987  0868               	movf	(_inPipes^(0+128)+3),w
 10186  0988  0020               	movlb	0	; select bank0
 10187  0989  00DE               	movwf	??_USBCtrlTrfTxService
 10188  098A  085E               	movf	??_USBCtrlTrfTxService,w
 10189  098B  00E0               	movwf	USBCtrlTrfTxService@byteToSend
 10190                           
 10191                           ;usb_device.c: 1953: if(shortPacketStatus == 0)
 10192  098C  08EF               	movf	_shortPacketStatus,f
 10193  098D  1D03               	skipz
 10194  098E  2992               	goto	l5807
 10195                           
 10196                           ;usb_device.c: 1954: {
 10197                           ;usb_device.c: 1955: shortPacketStatus = 1;
 10198  098F  01EF               	clrf	_shortPacketStatus
 10199  0990  0AEF               	incf	_shortPacketStatus,f
 10200                           
 10201                           ;usb_device.c: 1956: }
 10202  0991  299A               	goto	l5811
 10203  0992                     l5807:	
 10204                           
 10205                           ;usb_device.c: 1957: else if(shortPacketStatus == 1)
 10206  0992  086F               	movf	_shortPacketStatus,w
 10207  0993  3A01               	xorlw	1
 10208  0994  1D03               	skipz
 10209  0995  299A               	goto	l5811
 10210                           
 10211                           ;usb_device.c: 1958: {
 10212                           ;usb_device.c: 1959: shortPacketStatus = 2;
 10213  0996  3002               	movlw	2
 10214  0997  00DE               	movwf	??_USBCtrlTrfTxService
 10215  0998  085E               	movf	??_USBCtrlTrfTxService,w
 10216  0999  00EF               	movwf	_shortPacketStatus
 10217  099A                     l5811:	
 10218                           
 10219                           ;usb_device.c: 1960: }
 10220                           ;usb_device.c: 1961: }
 10221                           ;usb_device.c: 1965: inPipes[0].wCount.Val = inPipes[0].wCount.Val - byteToSend;
 10222  099A  3003               	movlw	3
 10223  099B  3EE5               	addlw	_inPipes& (0+255)
 10224  099C  0086               	movwf	6
 10225  099D  0187               	clrf	7
 10226  099E  0020               	movlb	0	; select bank0
 10227  099F  0860               	movf	USBCtrlTrfTxService@byteToSend,w
 10228  09A0  00DE               	movwf	??_USBCtrlTrfTxService
 10229  09A1  01DF               	clrf	??_USBCtrlTrfTxService+1
 10230  09A2  09DE               	comf	??_USBCtrlTrfTxService,f
 10231  09A3  09DF               	comf	??_USBCtrlTrfTxService+1,f
 10232  09A4  0ADE               	incf	??_USBCtrlTrfTxService,f
 10233  09A5  1903               	skipnz
 10234  09A6  0ADF               	incf	??_USBCtrlTrfTxService+1,f
 10235  09A7  3F40               	moviw [0]fsr1
 10236  09A8  075E               	addwf	??_USBCtrlTrfTxService,w
 10237  09A9  0021               	movlb	1	; select bank1
 10238  09AA  00E8               	movwf	(_inPipes^(0+128)+3)
 10239  09AB  3F41               	moviw [1]fsr1
 10240  09AC  0020               	movlb	0	; select bank0
 10241  09AD  3D5F               	addwfc	??_USBCtrlTrfTxService+1,w
 10242  09AE  0021               	movlb	1	; select bank1
 10243  09AF  00E9               	movwf	(_inPipes^(0+128)+4)
 10244                           
 10245                           ;usb_device.c: 1970: pBDTEntryIn[0]->CNT = byteToSend;
 10246  09B0  0020               	movlb	0	; select bank0
 10247  09B1  0860               	movf	USBCtrlTrfTxService@byteToSend,w
 10248  09B2  00DE               	movwf	??_USBCtrlTrfTxService
 10249  09B3  0021               	movlb	1	; select bank1
 10250  09B4  0A51               	incf	_pBDTEntryIn^(0+128),w
 10251  09B5  0086               	movwf	6
 10252  09B6  0187               	clrf	7
 10253  09B7  0020               	movlb	0	; select bank0
 10254  09B8  085E               	movf	??_USBCtrlTrfTxService,w
 10255  09B9  0081               	movwf	1
 10256                           
 10257                           ;usb_device.c: 1974: pDst = ( BYTE*)CtrlTrfData;
 10258  09BA  3048               	movlw	72
 10259  09BB  00DE               	movwf	??_USBCtrlTrfTxService
 10260  09BC  085E               	movf	??_USBCtrlTrfTxService,w
 10261  09BD  00ED               	movwf	_pDst
 10262                           
 10263                           ;usb_device.c: 1975: if(inPipes[0].info.bits.ctrl_trf_mem == 0x00)
 10264  09BE  0021               	movlb	1	; select bank1
 10265  09BF  1C67               	btfss	(_inPipes^(0+128)+2),0
 10266  09C0  29DB               	goto	l5829
 10267  09C1  29F9               	goto	l5839
 10268  09C2                     l5821:	
 10269                           ;usb_device.c: 1976: {
 10270                           ;usb_device.c: 1977: while(byteToSend)
 10271                           
 10272                           
 10273                           ;usb_device.c: 1978: {
 10274                           ;usb_device.c: 1979: *pDst++ = *inPipes[0].pSrc.bRom++;
 10275  09C2  0021               	movlb	1	; select bank1
 10276  09C3  0865               	movf	_inPipes^(0+128),w
 10277  09C4  0084               	movwf	4
 10278  09C5  0866               	movf	(_inPipes+1)^(0+128),w
 10279  09C6  0085               	movwf	5
 10280  09C7  0800               	movf	0,w	;code access
 10281  09C8  0020               	movlb	0	; select bank0
 10282  09C9  00DE               	movwf	??_USBCtrlTrfTxService
 10283  09CA  086D               	movf	_pDst,w
 10284  09CB  0086               	movwf	6
 10285  09CC  0187               	clrf	7
 10286  09CD  085E               	movf	??_USBCtrlTrfTxService,w
 10287  09CE  0081               	movwf	1
 10288  09CF  3001               	movlw	1
 10289  09D0  0021               	movlb	1	; select bank1
 10290  09D1  07E5               	addwf	_inPipes^(0+128),f
 10291  09D2  3000               	movlw	0
 10292  09D3  3DE6               	addwfc	(_inPipes+1)^(0+128),f
 10293  09D4  3001               	movlw	1
 10294  09D5  0020               	movlb	0	; select bank0
 10295  09D6  00DE               	movwf	??_USBCtrlTrfTxService
 10296  09D7  085E               	movf	??_USBCtrlTrfTxService,w
 10297  09D8  07ED               	addwf	_pDst,f
 10298                           
 10299                           ;usb_device.c: 1980: byteToSend--;
 10300  09D9  3001               	movlw	1
 10301  09DA  02E0               	subwf	USBCtrlTrfTxService@byteToSend,f
 10302  09DB                     l5829:	
 10303  09DB  0020               	movlb	0	; select bank0
 10304  09DC  08E0               	movf	USBCtrlTrfTxService@byteToSend,f
 10305  09DD  1903               	btfsc	3,2
 10306  09DE  0008               	return
 10307  09DF  29C2               	goto	l5821
 10308  09E0                     l5831:	
 10309                           ;usb_device.c: 1983: else
 10310                           ;usb_device.c: 1984: {
 10311                           ;usb_device.c: 1985: while(byteToSend)
 10312                           
 10313                           ;usb_device.c: 1981: }
 10314                           ;usb_device.c: 1982: }
 10315                           
 10316                           
 10317                           ;usb_device.c: 1986: {
 10318                           ;usb_device.c: 1987: *pDst++ = *inPipes[0].pSrc.bRam++;
 10319  09E0  0021               	movlb	1	; select bank1
 10320  09E1  0865               	movf	_inPipes^(0+128),w
 10321  09E2  0084               	movwf	4
 10322  09E3  0866               	movf	(_inPipes+1)^(0+128),w
 10323  09E4  0085               	movwf	5
 10324  09E5  0800               	movf	0,w	;code access
 10325  09E6  0020               	movlb	0	; select bank0
 10326  09E7  00DE               	movwf	??_USBCtrlTrfTxService
 10327  09E8  086D               	movf	_pDst,w
 10328  09E9  0086               	movwf	6
 10329  09EA  0187               	clrf	7
 10330  09EB  085E               	movf	??_USBCtrlTrfTxService,w
 10331  09EC  0081               	movwf	1
 10332  09ED  3001               	movlw	1
 10333  09EE  0021               	movlb	1	; select bank1
 10334  09EF  07E5               	addwf	_inPipes^(0+128),f
 10335  09F0  3000               	movlw	0
 10336  09F1  3DE6               	addwfc	(_inPipes+1)^(0+128),f
 10337  09F2  3001               	movlw	1
 10338  09F3  0020               	movlb	0	; select bank0
 10339  09F4  00DE               	movwf	??_USBCtrlTrfTxService
 10340  09F5  085E               	movf	??_USBCtrlTrfTxService,w
 10341  09F6  07ED               	addwf	_pDst,f
 10342                           
 10343                           ;usb_device.c: 1988: byteToSend--;
 10344  09F7  3001               	movlw	1
 10345  09F8  02E0               	subwf	USBCtrlTrfTxService@byteToSend,f
 10346  09F9                     l5839:	
 10347  09F9  0020               	movlb	0	; select bank0
 10348  09FA  08E0               	movf	USBCtrlTrfTxService@byteToSend,f
 10349  09FB  1903               	btfsc	3,2
 10350  09FC  0008               	return
 10351  09FD  29E0               	goto	l5831
 10352  09FE                     __end_of_USBCtrlTrfTxService:	
 10353                           
 10354                           	psect	text36
 10355  1549                     __ptext36:	
 10356 ;; *************** function _USBCtrlEPAllowStatusStage *****************
 10357 ;; Defined at:
 10358 ;;		line 1590 in file "../USB/usb_device.c"
 10359 ;; Parameters:    Size  Location     Type
 10360 ;;		None
 10361 ;; Auto vars:     Size  Location     Type
 10362 ;;		None
 10363 ;; Return value:  Size  Location     Type
 10364 ;;		None               void
 10365 ;; Registers used:
 10366 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10367 ;; Tracked objects:
 10368 ;;		On entry : 0/0
 10369 ;;		On exit  : 0/0
 10370 ;;		Unchanged: 0/0
 10371 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10372 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10373 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10374 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10375 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10376 ;;Total ram usage:        2 bytes
 10377 ;; Hardware stack levels used:    1
 10378 ;; Hardware stack levels required when called:    4
 10379 ;; This function calls:
 10380 ;;		Nothing
 10381 ;; This function is called by:
 10382 ;;		_USBDeviceTasks
 10383 ;;		_USBCtrlEPServiceComplete
 10384 ;;		_USBCtrlTrfRxService
 10385 ;; This function uses a non-reentrant model
 10386 ;;
 10387                           
 10388                           
 10389                           ;psect for function _USBCtrlEPAllowStatusStage
 10390  1549                     _USBCtrlEPAllowStatusStage:	
 10391                           
 10392                           ;usb_device.c: 1596: if(USBStatusStageEnabledFlag1 == FALSE)
 10393                           
 10394                           ;incstack = 0
 10395                           ; Regs used in _USBCtrlEPAllowStatusStage: [wreg+fsr1l+fsr1h+status,2+status,0]
 10396  1549  0021               	movlb	1	; select bank1
 10397  154A  08DF               	movf	_USBStatusStageEnabledFlag1^(0+128),f
 10398  154B  1D03               	skipz
 10399  154C  0008               	return
 10400                           
 10401                           ;usb_device.c: 1597: {
 10402                           ;usb_device.c: 1598: USBStatusStageEnabledFlag1 = TRUE;
 10403  154D  3001               	movlw	1
 10404  154E  0020               	movlb	0	; select bank0
 10405  154F  00DE               	movwf	??_USBCtrlEPAllowStatusStage
 10406  1550  085E               	movf	??_USBCtrlEPAllowStatusStage,w
 10407  1551  0021               	movlb	1	; select bank1
 10408  1552  00DF               	movwf	_USBStatusStageEnabledFlag1^(0+128)	;volatile
 10409                           
 10410                           ;usb_device.c: 1599: if(USBStatusStageEnabledFlag2 == FALSE)
 10411  1553  08E0               	movf	_USBStatusStageEnabledFlag2^(0+128),f
 10412  1554  1D03               	skipz
 10413  1555  0008               	return
 10414                           
 10415                           ;usb_device.c: 1600: {
 10416                           ;usb_device.c: 1601: USBStatusStageEnabledFlag2 = TRUE;
 10417  1556  3001               	movlw	1
 10418  1557  0020               	movlb	0	; select bank0
 10419  1558  00DE               	movwf	??_USBCtrlEPAllowStatusStage
 10420  1559  085E               	movf	??_USBCtrlEPAllowStatusStage,w
 10421  155A  0021               	movlb	1	; select bank1
 10422  155B  00E0               	movwf	_USBStatusStageEnabledFlag2^(0+128)	;volatile
 10423                           
 10424                           ;usb_device.c: 1605: if(controlTransferState == 2)
 10425  155C  0020               	movlb	0	; select bank0
 10426  155D  086B               	movf	_controlTransferState,w
 10427  155E  3A02               	xorlw	2
 10428  155F  1D03               	skipz
 10429  1560  2D71               	goto	l5703
 10430                           
 10431                           ;usb_device.c: 1606: {
 10432                           ;usb_device.c: 1607: pBDTEntryIn[0]->CNT = 0;
 10433  1561  0021               	movlb	1	; select bank1
 10434  1562  0A51               	incf	_pBDTEntryIn^(0+128),w
 10435  1563  0086               	movwf	6
 10436  1564  0187               	clrf	7
 10437  1565  0181               	clrf	1
 10438                           
 10439                           ;usb_device.c: 1608: pBDTEntryIn[0]->STAT.Val = 0x80|0x40|(0x08 & 0x08);
 10440  1566  30C8               	movlw	200
 10441  1567  0020               	movlb	0	; select bank0
 10442  1568  00DE               	movwf	??_USBCtrlEPAllowStatusStage
 10443  1569  0021               	movlb	1	; select bank1
 10444  156A  0851               	movf	_pBDTEntryIn^(0+128),w
 10445  156B  0086               	movwf	6
 10446  156C  0187               	clrf	7
 10447  156D  0020               	movlb	0	; select bank0
 10448  156E  085E               	movf	??_USBCtrlEPAllowStatusStage,w
 10449  156F  0081               	movwf	1
 10450                           
 10451                           ;usb_device.c: 1609: }
 10452  1570  0008               	return
 10453  1571                     l5703:	
 10454                           
 10455                           ;usb_device.c: 1610: else if(controlTransferState == 1)
 10456  1571  086B               	movf	_controlTransferState,w
 10457  1572  3A01               	xorlw	1
 10458  1573  1D03               	skipz
 10459  1574  0008               	return
 10460                           
 10461                           ;usb_device.c: 1611: {
 10462                           ;usb_device.c: 1612: BothEP0OutUOWNsSet = FALSE;
 10463  1575  0021               	movlb	1	; select bank1
 10464  1576  01D5               	clrf	_BothEP0OutUOWNsSet^(0+128)
 10465                           
 10466                           ;usb_device.c: 1617: pBDTEntryEP0OutCurrent->CNT = 8;
 10467  1577  3008               	movlw	8
 10468  1578  0020               	movlb	0	; select bank0
 10469  1579  00DE               	movwf	??_USBCtrlEPAllowStatusStage
 10470  157A  0021               	movlb	1	; select bank1
 10471  157B  0A64               	incf	_pBDTEntryEP0OutCurrent^(0+128),w
 10472  157C  0086               	movwf	6
 10473  157D  0187               	clrf	7
 10474  157E  0020               	movlb	0	; select bank0
 10475  157F  085E               	movf	??_USBCtrlEPAllowStatusStage,w
 10476  1580  0081               	movwf	1
 10477                           
 10478                           ;usb_device.c: 1618: pBDTEntryEP0OutCurrent->ADR = (((WORD)(&SetupPkt))& 0x7FFF);
 10479  1581  3040               	movlw	64
 10480  1582  00DE               	movwf	??_USBCtrlEPAllowStatusStage
 10481  1583  3000               	movlw	0
 10482  1584  00DF               	movwf	??_USBCtrlEPAllowStatusStage+1
 10483  1585  0021               	movlb	1	; select bank1
 10484  1586  0864               	movf	_pBDTEntryEP0OutCurrent^(0+128),w
 10485  1587  3E02               	addlw	2
 10486  1588  0086               	movwf	6
 10487  1589  0187               	clrf	7
 10488  158A  0020               	movlb	0	; select bank0
 10489  158B  085E               	movf	??_USBCtrlEPAllowStatusStage,w
 10490  158C  3FC0               	movwi [0]fsr1
 10491  158D  085F               	movf	??_USBCtrlEPAllowStatusStage+1,w
 10492  158E  3FC1               	movwi [1]fsr1
 10493                           
 10494                           ;usb_device.c: 1619: pBDTEntryEP0OutCurrent->STAT.Val = 0x80|0x04;
 10495  158F  3084               	movlw	132
 10496  1590  00DE               	movwf	??_USBCtrlEPAllowStatusStage
 10497  1591  0021               	movlb	1	; select bank1
 10498  1592  0864               	movf	_pBDTEntryEP0OutCurrent^(0+128),w
 10499  1593  0086               	movwf	6
 10500  1594  0187               	clrf	7
 10501  1595  0020               	movlb	0	; select bank0
 10502  1596  085E               	movf	??_USBCtrlEPAllowStatusStage,w
 10503  1597  0081               	movwf	1
 10504                           
 10505                           ;usb_device.c: 1620: BothEP0OutUOWNsSet = TRUE;
 10506  1598  0021               	movlb	1	; select bank1
 10507  1599  01D5               	clrf	_BothEP0OutUOWNsSet^(0+128)
 10508  159A  0AD5               	incf	_BothEP0OutUOWNsSet^(0+128),f
 10509                           
 10510                           ;usb_device.c: 1624: pBDTEntryEP0OutNext->CNT = 8;
 10511  159B  3008               	movlw	8
 10512  159C  0020               	movlb	0	; select bank0
 10513  159D  00DE               	movwf	??_USBCtrlEPAllowStatusStage
 10514  159E  0A6C               	incf	_pBDTEntryEP0OutNext,w
 10515  159F  0086               	movwf	6
 10516  15A0  0187               	clrf	7
 10517  15A1  085E               	movf	??_USBCtrlEPAllowStatusStage,w
 10518  15A2  0081               	movwf	1
 10519                           
 10520                           ;usb_device.c: 1625: pBDTEntryEP0OutNext->ADR = (((WORD)(&SetupPkt))& 0x7FFF);
 10521  15A3  3040               	movlw	64
 10522  15A4  00DE               	movwf	??_USBCtrlEPAllowStatusStage
 10523  15A5  3000               	movlw	0
 10524  15A6  00DF               	movwf	??_USBCtrlEPAllowStatusStage+1
 10525  15A7  086C               	movf	_pBDTEntryEP0OutNext,w
 10526  15A8  3E02               	addlw	2
 10527  15A9  0086               	movwf	6
 10528  15AA  0187               	clrf	7
 10529  15AB  085E               	movf	??_USBCtrlEPAllowStatusStage,w
 10530  15AC  3FC0               	movwi [0]fsr1
 10531  15AD  085F               	movf	??_USBCtrlEPAllowStatusStage+1,w
 10532  15AE  3FC1               	movwi [1]fsr1
 10533                           
 10534                           ;usb_device.c: 1626: pBDTEntryEP0OutNext->STAT.Val = 0x80;
 10535  15AF  3080               	movlw	128
 10536  15B0  00DE               	movwf	??_USBCtrlEPAllowStatusStage
 10537  15B1  086C               	movf	_pBDTEntryEP0OutNext,w
 10538  15B2  0086               	movwf	6
 10539  15B3  0187               	clrf	7
 10540  15B4  085E               	movf	??_USBCtrlEPAllowStatusStage,w
 10541  15B5  0081               	movwf	1
 10542  15B6  0008               	return
 10543  15B7                     __end_of_USBCtrlEPAllowStatusStage:	
 10544                           
 10545                           	psect	text37
 10546  1162                     __ptext37:	
 10547 ;; *************** function _USBStallHandler *****************
 10548 ;; Defined at:
 10549 ;;		line 2356 in file "../USB/usb_device.c"
 10550 ;; Parameters:    Size  Location     Type
 10551 ;;		None
 10552 ;; Auto vars:     Size  Location     Type
 10553 ;;		None
 10554 ;; Return value:  Size  Location     Type
 10555 ;;		None               void
 10556 ;; Registers used:
 10557 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10558 ;; Tracked objects:
 10559 ;;		On entry : 0/0
 10560 ;;		On exit  : 0/0
 10561 ;;		Unchanged: 0/0
 10562 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10563 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10564 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10565 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10566 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10567 ;;Total ram usage:        1 bytes
 10568 ;; Hardware stack levels used:    1
 10569 ;; Hardware stack levels required when called:    4
 10570 ;; This function calls:
 10571 ;;		Nothing
 10572 ;; This function is called by:
 10573 ;;		_USBDeviceTasks
 10574 ;; This function uses a non-reentrant model
 10575 ;;
 10576                           
 10577                           
 10578                           ;psect for function _USBStallHandler
 10579  1162                     _USBStallHandler:	
 10580                           
 10581                           ;usb_device.c: 2368: if(UEP0bits.EPSTALL == 1)
 10582                           
 10583                           ;incstack = 0
 10584                           ; Regs used in _USBStallHandler: [wreg+fsr1l+fsr1h+status,2+status,0]
 10585  1162  003D               	movlb	29	; select bank29
 10586  1163  1C18               	btfss	24,0	;volatile
 10587  1164  2980               	goto	l3925
 10588                           
 10589                           ;usb_device.c: 2369: {
 10590                           ;usb_device.c: 2371: if((pBDTEntryEP0OutCurrent->STAT.Val == 0x80) && (pBDTEntryIn[0]->S
      +                          TAT.Val == (0x80|0x04)))
 10591  1165  0021               	movlb	1	; select bank1
 10592  1166  0864               	movf	_pBDTEntryEP0OutCurrent^(0+128),w
 10593  1167  0086               	movwf	6
 10594  1168  0187               	clrf	7
 10595  1169  0801               	movf	1,w
 10596  116A  3A80               	xorlw	128
 10597  116B  1D03               	skipz
 10598  116C  297E               	goto	l3923
 10599  116D  0851               	movf	_pBDTEntryIn^(0+128),w
 10600  116E  0086               	movwf	6
 10601  116F  0187               	clrf	7
 10602  1170  0801               	movf	1,w
 10603  1171  3A84               	xorlw	132
 10604  1172  1D03               	skipz
 10605  1173  297E               	goto	l3923
 10606                           
 10607                           ;usb_device.c: 2372: {
 10608                           ;usb_device.c: 2374: pBDTEntryEP0OutCurrent->STAT.Val = 0x80|0x00|(0x08 & 0x08)|0x04;
 10609  1174  308C               	movlw	140
 10610  1175  0020               	movlb	0	; select bank0
 10611  1176  00DE               	movwf	??_USBStallHandler
 10612  1177  0021               	movlb	1	; select bank1
 10613  1178  0864               	movf	_pBDTEntryEP0OutCurrent^(0+128),w
 10614  1179  0086               	movwf	6
 10615  117A  0187               	clrf	7
 10616  117B  0020               	movlb	0	; select bank0
 10617  117C  085E               	movf	??_USBStallHandler,w
 10618  117D  0081               	movwf	1
 10619  117E                     l3923:	
 10620                           
 10621                           ;usb_device.c: 2375: }
 10622                           ;usb_device.c: 2376: UEP0bits.EPSTALL = 0;
 10623  117E  003D               	movlb	29	; select bank29
 10624  117F  1018               	bcf	24,0	;volatile
 10625  1180                     l3925:	
 10626                           
 10627                           ;usb_device.c: 2377: }
 10628                           ;usb_device.c: 2379: (UIR &= 0xDF);
 10629  1180  30DF               	movlw	223
 10630  1181  0020               	movlb	0	; select bank0
 10631  1182  00DE               	movwf	??_USBStallHandler
 10632  1183  085E               	movf	??_USBStallHandler,w
 10633  1184  003D               	movlb	29	; select bank29
 10634  1185  0590               	andwf	16,f	;volatile
 10635  1186  0008               	return
 10636  1187                     __end_of_USBStallHandler:	
 10637                           
 10638                           	psect	text38
 10639  109E                     __ptext38:	
 10640 ;; *************** function _USBSuspend *****************
 10641 ;; Defined at:
 10642 ;;		line 2399 in file "../USB/usb_device.c"
 10643 ;; Parameters:    Size  Location     Type
 10644 ;;		None
 10645 ;; Auto vars:     Size  Location     Type
 10646 ;;		None
 10647 ;; Return value:  Size  Location     Type
 10648 ;;		None               void
 10649 ;; Registers used:
 10650 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
 10651 ;; Tracked objects:
 10652 ;;		On entry : 0/0
 10653 ;;		On exit  : 0/0
 10654 ;;		Unchanged: 0/0
 10655 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10656 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10657 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10658 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 10659 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 10660 ;;Total ram usage:        1 bytes
 10661 ;; Hardware stack levels used:    1
 10662 ;; Hardware stack levels required when called:    8
 10663 ;; This function calls:
 10664 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 10665 ;; This function is called by:
 10666 ;;		_USBDeviceTasks
 10667 ;; This function uses a non-reentrant model
 10668 ;;
 10669                           
 10670                           
 10671                           ;psect for function _USBSuspend
 10672  109E                     _USBSuspend:	
 10673                           
 10674                           ;usb_device.c: 2423: UIEbits.ACTVIE = 1;
 10675                           
 10676                           ;incstack = 0
 10677                           ; Regs used in _USBSuspend: [allreg]
 10678  109E  003D               	movlb	29	; select bank29
 10679  109F  1512               	bsf	18,2	;volatile
 10680                           
 10681                           ;usb_device.c: 2424: (UIR &= 0xEF);
 10682  10A0  30EF               	movlw	239
 10683  10A1  0021               	movlb	1	; select bank1
 10684  10A2  00B2               	movwf	??_USBSuspend^(0+128)
 10685  10A3  0832               	movf	??_USBSuspend^(0+128),w
 10686  10A4  003D               	movlb	29	; select bank29
 10687  10A5  0590               	andwf	16,f	;volatile
 10688                           
 10689                           ;usb_device.c: 2427: UCONbits.SUSPND = 1;
 10690  10A6  148E               	bsf	14,1	;volatile
 10691                           
 10692                           ;usb_device.c: 2430: USBBusIsSuspended = TRUE;
 10693  10A7  0021               	movlb	1	; select bank1
 10694  10A8  01DB               	clrf	_USBBusIsSuspended^(0+128)
 10695  10A9  0ADB               	incf	_USBBusIsSuspended^(0+128),f
 10696                           
 10697                           ;usb_device.c: 2437: USER_USB_CALLBACK_EVENT_HANDLER(EVENT_SUSPEND,0,0);
 10698  10AA  3075               	movlw	117
 10699  10AB  00AD               	movwf	?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)
 10700  10AC  3000               	movlw	0
 10701  10AD  00AE               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)+1)
 10702  10AE  01AF               	clrf	(?_USER_USB_CALLBACK_EVENT_HANDLER+2)^(0+128)
 10703  10AF  3000               	movlw	0
 10704  10B0  00B0               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)+3)
 10705  10B1  3000               	movlw	0
 10706  10B2  00B1               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)+4)
 10707  10B3  3192  227D         	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
 10708  10B5  0008               	return
 10709  10B6                     __end_of_USBSuspend:	
 10710                           
 10711                           	psect	text39
 10712  1059                     __ptext39:	
 10713 ;; *************** function _USBWakeFromSuspend *****************
 10714 ;; Defined at:
 10715 ;;		line 2456 in file "../USB/usb_device.c"
 10716 ;; Parameters:    Size  Location     Type
 10717 ;;		None
 10718 ;; Auto vars:     Size  Location     Type
 10719 ;;		None
 10720 ;; Return value:  Size  Location     Type
 10721 ;;		None               void
 10722 ;; Registers used:
 10723 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
 10724 ;; Tracked objects:
 10725 ;;		On entry : 0/0
 10726 ;;		On exit  : 0/0
 10727 ;;		Unchanged: 0/0
 10728 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10729 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10730 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10731 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 10732 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 10733 ;;Total ram usage:        1 bytes
 10734 ;; Hardware stack levels used:    1
 10735 ;; Hardware stack levels required when called:    8
 10736 ;; This function calls:
 10737 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 10738 ;; This function is called by:
 10739 ;;		_USBDeviceTasks
 10740 ;; This function uses a non-reentrant model
 10741 ;;
 10742                           
 10743                           
 10744                           ;psect for function _USBWakeFromSuspend
 10745  1059                     _USBWakeFromSuspend:	
 10746                           
 10747                           ;usb_device.c: 2457: USBBusIsSuspended = FALSE;
 10748                           
 10749                           ;incstack = 0
 10750                           ; Regs used in _USBWakeFromSuspend: [allreg]
 10751  1059  0021               	movlb	1	; select bank1
 10752  105A  01DB               	clrf	_USBBusIsSuspended^(0+128)
 10753                           
 10754                           ;usb_device.c: 2463: USER_USB_CALLBACK_EVENT_HANDLER(EVENT_RESUME,0,0);
 10755  105B  3074               	movlw	116
 10756  105C  00AD               	movwf	?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)
 10757  105D  3000               	movlw	0
 10758  105E  00AE               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)+1)
 10759  105F  01AF               	clrf	(?_USER_USB_CALLBACK_EVENT_HANDLER+2)^(0+128)
 10760  1060  3000               	movlw	0
 10761  1061  00B0               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)+3)
 10762  1062  3000               	movlw	0
 10763  1063  00B1               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)+4)
 10764  1064  3192  227D         	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
 10765                           
 10766                           ;usb_device.c: 2470: UCONbits.SUSPND = 0;
 10767  1066  003D               	movlb	29	; select bank29
 10768  1067  108E               	bcf	14,1	;volatile
 10769                           
 10770                           ;usb_device.c: 2475: UIEbits.ACTVIE = 0;
 10771  1068  1112               	bcf	18,2	;volatile
 10772                           
 10773                           ;usb_device.c: 2495: {
 10774                           ;usb_device.c: 2496: (UIR &= 0xFB);
 10775  1069  30FB               	movlw	251
 10776  106A  0021               	movlb	1	; select bank1
 10777  106B  00B2               	movwf	??_USBWakeFromSuspend^(0+128)
 10778  106C  0832               	movf	??_USBWakeFromSuspend^(0+128),w
 10779  106D  003D               	movlb	29	; select bank29
 10780  106E  0590               	andwf	16,f	;volatile
 10781  106F  0008               	return
 10782  1070                     __end_of_USBWakeFromSuspend:	
 10783                           
 10784                           	psect	text40
 10785  127D                     __ptext40:	
 10786 ;; *************** function _USER_USB_CALLBACK_EVENT_HANDLER *****************
 10787 ;; Defined at:
 10788 ;;		line 630 in file "main.c"
 10789 ;; Parameters:    Size  Location     Type
 10790 ;;  event           2   13[BANK1 ] int 
 10791 ;;  pdata           1   15[BANK1 ] PTR void 
 10792 ;;		 -> USTATcopy(1), USBActiveConfiguration(1), NULL(0), BDT(32), 
 10793 ;;  size            2   16[BANK1 ] unsigned short 
 10794 ;; Auto vars:     Size  Location     Type
 10795 ;;		None
 10796 ;; Return value:  Size  Location     Type
 10797 ;;                  1    wreg      enum E5
 10798 ;; Registers used:
 10799 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10800 ;; Tracked objects:
 10801 ;;		On entry : 0/0
 10802 ;;		On exit  : 0/0
 10803 ;;		Unchanged: 0/0
 10804 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10805 ;;      Params:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
 10806 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10807 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10808 ;;      Totals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
 10809 ;;Total ram usage:        5 bytes
 10810 ;; Hardware stack levels used:    1
 10811 ;; Hardware stack levels required when called:    7
 10812 ;; This function calls:
 10813 ;;		_USBCBSuspend
 10814 ;;		_USBCBWakeFromSuspend
 10815 ;;		_USBCB_SOF_Handler
 10816 ;;		_USBCBErrorHandler
 10817 ;;		_USBCBCheckOtherReq
 10818 ;;		_USBCBStdSetDscHandler
 10819 ;;		_USBCBInitEP
 10820 ;; This function is called by:
 10821 ;;		_USBDeviceTasks
 10822 ;;		_USBStdSetCfgHandler
 10823 ;;		_USBSuspend
 10824 ;;		_USBWakeFromSuspend
 10825 ;;		_USBCtrlTrfSetupHandler
 10826 ;;		_USBCheckStdRequest
 10827 ;;		_USBStdFeatureReqHandler
 10828 ;; This function uses a non-reentrant model
 10829 ;;
 10830                           
 10831                           
 10832                           ;psect for function _USER_USB_CALLBACK_EVENT_HANDLER
 10833  127D                     _USER_USB_CALLBACK_EVENT_HANDLER:	
 10834                           
 10835                           ;main.c: 631: switch( event )
 10836                           
 10837                           ;incstack = 0
 10838                           ; Regs used in _USER_USB_CALLBACK_EVENT_HANDLER: [wreg-fsr1h+status,2+status,0+pclath+cs
      +                          tack]
 10839  127D  2A93               	goto	l5681
 10840  127E                     l5665:	
 10841                           ;main.c: 636: case EVENT_SOF:
 10842                           
 10843                           ;main.c: 635: break;
 10844                           
 10845                           ;main.c: 632: {
 10846                           ;main.c: 633: case EVENT_TRANSFER:
 10847                           
 10848                           
 10849                           ;main.c: 637: USBCB_SOF_Handler();
 10850  127E  3188  20AF         	fcall	_USBCB_SOF_Handler
 10851                           
 10852                           ;main.c: 638: break;
 10853  1280  0008               	return
 10854  1281                     l5667:	
 10855                           ;main.c: 639: case EVENT_SUSPEND:
 10856                           
 10857                           
 10858                           ;main.c: 640: USBCBSuspend();
 10859  1281  3190  201A         	fcall	_USBCBSuspend
 10860                           
 10861                           ;main.c: 641: break;
 10862  1283  0008               	return
 10863  1284                     l5669:	
 10864                           ;main.c: 642: case EVENT_RESUME:
 10865                           
 10866                           
 10867                           ;main.c: 643: USBCBWakeFromSuspend();
 10868  1284  3190  201B         	fcall	_USBCBWakeFromSuspend
 10869                           
 10870                           ;main.c: 644: break;
 10871  1286  0008               	return
 10872  1287                     l5671:	
 10873                           ;main.c: 645: case EVENT_CONFIGURED:
 10874                           
 10875                           
 10876                           ;main.c: 646: USBCBInitEP();
 10877  1287  3190  20E9         	fcall	_USBCBInitEP
 10878                           
 10879                           ;main.c: 647: break;
 10880  1289  0008               	return
 10881  128A                     l5673:	
 10882                           ;main.c: 648: case EVENT_SET_DESCRIPTOR:
 10883                           
 10884                           
 10885                           ;main.c: 649: USBCBStdSetDscHandler();
 10886  128A  3180  2003         	fcall	_USBCBStdSetDscHandler
 10887                           
 10888                           ;main.c: 650: break;
 10889  128C  0008               	return
 10890  128D                     l5675:	
 10891                           ;main.c: 651: case EVENT_EP0_REQUEST:
 10892                           
 10893                           
 10894                           ;main.c: 652: USBCBCheckOtherReq();
 10895  128D  3190  201C         	fcall	_USBCBCheckOtherReq
 10896                           
 10897                           ;main.c: 653: break;
 10898  128F  0008               	return
 10899  1290                     l5677:	
 10900                           ;main.c: 654: case EVENT_BUS_ERROR:
 10901                           
 10902                           
 10903                           ;main.c: 655: USBCBErrorHandler();
 10904  1290  3188  20B0         	fcall	_USBCBErrorHandler
 10905                           
 10906                           ;main.c: 669: }
 10907                           
 10908                           ;main.c: 668: break;
 10909                           
 10910                           ;main.c: 667: default:
 10911                           
 10912                           ;main.c: 666: break;
 10913                           
 10914                           ;main.c: 657: case EVENT_TRANSFER_TERMINATED:
 10915                           
 10916                           ;main.c: 656: break;
 10917  1292  0008               	return
 10918  1293                     l5681:	
 10919                           
 10920                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 10921                           ; Switch size 1, requested type "space"
 10922                           ; Number of cases is 2, Range of values is 0 to 127
 10923                           ; switch strategies available:
 10924                           ; Name         Instructions Cycles
 10925                           ; simple_byte            7     4 (average)
 10926                           ; direct_byte          262     6 (fixed)
 10927                           ; jumptable            260     6 (fixed)
 10928                           ; rangetable           132     6 (fixed)
 10929                           ; spacedrange          261     8 (fixed)
 10930                           ; locatedrange         128     3 (fixed)
 10931                           ;	Chosen strategy is simple_byte
 10932  1293  0021               	movlb	1	; select bank1
 10933  1294  082E               	movf	(USER_USB_CALLBACK_EVENT_HANDLER@event+1)^(0+128),w
 10934  1295  3A00               	xorlw	0	; case 0
 10935  1296  1903               	skipnz
 10936  1297  2A9C               	goto	l6765
 10937  1298  3A7F               	xorlw	127	; case 127
 10938  1299  1903               	skipnz
 10939  129A  2AB6               	goto	l6767
 10940  129B  2ABB               	goto	l914
 10941  129C                     l6765:	
 10942                           
 10943                           ; Switch size 1, requested type "space"
 10944                           ; Number of cases is 8, Range of values is 1 to 117
 10945                           ; switch strategies available:
 10946                           ; Name         Instructions Cycles
 10947                           ; simple_byte           25    13 (average)
 10948                           ; direct_byte          243     9 (fixed)
 10949                           ; jumptable            263     9 (fixed)
 10950                           ;	Chosen strategy is simple_byte
 10951  129C  082D               	movf	USER_USB_CALLBACK_EVENT_HANDLER@event^(0+128),w
 10952  129D  3A01               	xorlw	1	; case 1
 10953  129E  1903               	skipnz
 10954  129F  2A87               	goto	l5671
 10955  12A0  3A03               	xorlw	3	; case 2
 10956  12A1  1903               	skipnz
 10957  12A2  2A8A               	goto	l5673
 10958  12A3  3A01               	xorlw	1	; case 3
 10959  12A4  1903               	skipnz
 10960  12A5  2A8D               	goto	l5675
 10961  12A6  3A06               	xorlw	6	; case 5
 10962  12A7  1903               	skipnz
 10963  12A8  2ABB               	goto	l914
 10964  12A9  3A77               	xorlw	119	; case 114
 10965  12AA  1903               	skipnz
 10966  12AB  2ABB               	goto	l914
 10967  12AC  3A01               	xorlw	1	; case 115
 10968  12AD  1903               	skipnz
 10969  12AE  2A7E               	goto	l5665
 10970  12AF  3A07               	xorlw	7	; case 116
 10971  12B0  1903               	skipnz
 10972  12B1  2A84               	goto	l5669
 10973  12B2  3A01               	xorlw	1	; case 117
 10974  12B3  1903               	skipnz
 10975  12B4  2A81               	goto	l5667
 10976  12B5  2ABB               	goto	l914
 10977  12B6                     l6767:	
 10978                           
 10979                           ; Switch size 1, requested type "space"
 10980                           ; Number of cases is 1, Range of values is 255 to 255
 10981                           ; switch strategies available:
 10982                           ; Name         Instructions Cycles
 10983                           ; simple_byte            4     3 (average)
 10984                           ; direct_byte            7     5 (fixed)
 10985                           ; jumptable            263     9 (fixed)
 10986                           ;	Chosen strategy is simple_byte
 10987  12B6  082D               	movf	USER_USB_CALLBACK_EVENT_HANDLER@event^(0+128),w
 10988  12B7  3AFF               	xorlw	255	; case 255
 10989  12B8  1903               	skipnz
 10990  12B9  2A90               	goto	l5677
 10991  12BA  2ABB               	goto	l914
 10992  12BB                     l914:	
 10993                           ;main.c: 670: return TRUE;
 10994                           ;	Return value of _USER_USB_CALLBACK_EVENT_HANDLER is never used
 10995                           
 10996  12BB  0008               	return
 10997  12BC                     __end_of_USER_USB_CALLBACK_EVENT_HANDLER:	
 10998                           
 10999                           	psect	text41
 11000  10E9                     __ptext41:	
 11001 ;; *************** function _USBCBInitEP *****************
 11002 ;; Defined at:
 11003 ;;		line 460 in file "main.c"
 11004 ;; Parameters:    Size  Location     Type
 11005 ;;		None
 11006 ;; Auto vars:     Size  Location     Type
 11007 ;;		None
 11008 ;; Return value:  Size  Location     Type
 11009 ;;		None               void
 11010 ;; Registers used:
 11011 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11012 ;; Tracked objects:
 11013 ;;		On entry : 0/0
 11014 ;;		On exit  : 0/0
 11015 ;;		Unchanged: 0/0
 11016 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11017 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11018 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11019 ;;      Temps:          0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
 11020 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
 11021 ;;Total ram usage:        3 bytes
 11022 ;; Hardware stack levels used:    1
 11023 ;; Hardware stack levels required when called:    6
 11024 ;; This function calls:
 11025 ;;		_USBEnableEndpoint
 11026 ;;		_USBTransferOnePacket
 11027 ;; This function is called by:
 11028 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 11029 ;; This function uses a non-reentrant model
 11030 ;;
 11031                           
 11032                           
 11033                           ;psect for function _USBCBInitEP
 11034  10E9                     _USBCBInitEP:	
 11035                           
 11036                           ;main.c: 462: USBEnableEndpoint(1,0x04|0x02|0x10|0x08);
 11037                           
 11038                           ;incstack = 0
 11039                           ; Regs used in _USBCBInitEP: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11040  10E9  301E               	movlw	30
 11041  10EA  0021               	movlb	1	; select bank1
 11042  10EB  00AA               	movwf	??_USBCBInitEP^(0+128)
 11043  10EC  082A               	movf	??_USBCBInitEP^(0+128),w
 11044  10ED  00A4               	movwf	?_USBEnableEndpoint^(0+128)
 11045  10EE  3001               	movlw	1
 11046  10EF  3191  21AE  3190   	fcall	_USBEnableEndpoint
 11047                           
 11048                           ;main.c: 464: USBGenericOutHandle = USBTransferOnePacket(1,0,(BYTE*)&OUTPacket,64);
 11049  10F2  0021               	movlb	1	; select bank1
 11050  10F3  01A0               	clrf	?_USBTransferOnePacket^(0+128)
 11051  10F4  30A0               	movlw	160
 11052  10F5  00AA               	movwf	??_USBCBInitEP^(0+128)
 11053  10F6  082A               	movf	??_USBCBInitEP^(0+128),w
 11054  10F7  00A1               	movwf	(?_USBTransferOnePacket+1)^(0+128)
 11055  10F8  3040               	movlw	64
 11056  10F9  00AB               	movwf	(??_USBCBInitEP+1)^(0+128)
 11057  10FA  082B               	movf	(??_USBCBInitEP+1)^(0+128),w
 11058  10FB  00A2               	movwf	(?_USBTransferOnePacket^(0+128)+2)
 11059  10FC  3001               	movlw	1
 11060  10FD  3193  2344         	fcall	_USBTransferOnePacket
 11061  10FF  0021               	movlb	1	; select bank1
 11062  1100  00AC               	movwf	(??_USBCBInitEP+2)^(0+128)
 11063  1101  082C               	movf	(??_USBCBInitEP+2)^(0+128),w
 11064  1102  00DE               	movwf	_USBGenericOutHandle^(0+128)
 11065  1103  0008               	return
 11066  1104                     __end_of_USBCBInitEP:	
 11067                           
 11068                           	psect	text42
 11069  1344                     __ptext42:	
 11070 ;; *************** function _USBTransferOnePacket *****************
 11071 ;; Defined at:
 11072 ;;		line 1173 in file "../USB/usb_device.c"
 11073 ;; Parameters:    Size  Location     Type
 11074 ;;  ep              1    wreg     unsigned char 
 11075 ;;  dir             1    0[BANK1 ] unsigned char 
 11076 ;;  data            1    1[BANK1 ] PTR unsigned char 
 11077 ;;		 -> INPacket(64), OUTPacket(64), 
 11078 ;;  len             1    2[BANK1 ] unsigned char 
 11079 ;; Auto vars:     Size  Location     Type
 11080 ;;  ep              1    5[BANK1 ] unsigned char 
 11081 ;;  handle          1    6[BANK1 ] PTR volatile struct __BD
 11082 ;;		 -> NULL(0), BDT(32), 
 11083 ;; Return value:  Size  Location     Type
 11084 ;;                  1    wreg      PTR void 
 11085 ;; Registers used:
 11086 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11087 ;; Tracked objects:
 11088 ;;		On entry : 0/0
 11089 ;;		On exit  : 0/0
 11090 ;;		Unchanged: 0/0
 11091 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11092 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
 11093 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
 11094 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
 11095 ;;      Totals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
 11096 ;;Total ram usage:        7 bytes
 11097 ;; Hardware stack levels used:    1
 11098 ;; Hardware stack levels required when called:    4
 11099 ;; This function calls:
 11100 ;;		Nothing
 11101 ;; This function is called by:
 11102 ;;		_ProcessIO
 11103 ;;		_USBCBInitEP
 11104 ;; This function uses a non-reentrant model
 11105 ;;
 11106                           
 11107                           
 11108                           ;psect for function _USBTransferOnePacket
 11109  1344                     _USBTransferOnePacket:	
 11110                           
 11111                           ;incstack = 0
 11112                           ; Regs used in _USBTransferOnePacket: [wreg+fsr1l+fsr1h+status,2+status,0]
 11113                           ;USBTransferOnePacket@ep stored from wreg
 11114  1344  0021               	movlb	1	; select bank1
 11115  1345  00A5               	movwf	USBTransferOnePacket@ep^(0+128)
 11116                           
 11117                           ;usb_device.c: 1174: volatile BDT_ENTRY* handle;
 11118                           ;usb_device.c: 1177: if(dir != 0)
 11119  1346  0820               	movf	USBTransferOnePacket@dir^(0+128),w
 11120  1347  1903               	btfsc	3,2
 11121  1348  2B4C               	goto	l3993
 11122                           
 11123                           ;usb_device.c: 1178: {
 11124                           ;usb_device.c: 1180: handle = pBDTEntryIn[ep];
 11125  1349  0825               	movf	USBTransferOnePacket@ep^(0+128),w
 11126  134A  3ED1               	addlw	_pBDTEntryIn& (0+255)
 11127  134B  2B4E               	goto	L15
 11128  134C                     l3993:	
 11129                           ;usb_device.c: 1181: }
 11130                           
 11131                           
 11132                           ;usb_device.c: 1182: else
 11133                           ;usb_device.c: 1183: {
 11134                           ;usb_device.c: 1185: handle = pBDTEntryOut[ep];
 11135  134C  0825               	movf	USBTransferOnePacket@ep^(0+128),w
 11136  134D  3ED3               	addlw	_pBDTEntryOut& (0+255)
 11137  134E                     L15:	
 11138  134E  0086               	movwf	6
 11139  134F  0187               	clrf	7
 11140  1350  0801               	movf	1,w
 11141  1351  00A3               	movwf	??_USBTransferOnePacket^(0+128)
 11142  1352  0823               	movf	??_USBTransferOnePacket^(0+128),w
 11143  1353  00A6               	movwf	USBTransferOnePacket@handle^(0+128)
 11144                           
 11145                           ;usb_device.c: 1186: }
 11146                           ;usb_device.c: 1190: if(handle == 0)
 11147  1354  08A6               	movf	USBTransferOnePacket@handle^(0+128),f
 11148  1355  1D03               	skipz
 11149  1356  2B59               	goto	l4001
 11150                           
 11151                           ;usb_device.c: 1191: {
 11152                           ;usb_device.c: 1192: return 0;
 11153  1357  3000               	movlw	0
 11154  1358  0008               	return
 11155  1359                     l4001:	
 11156                           
 11157                           ;usb_device.c: 1193: }
 11158                           ;usb_device.c: 1206: handle->ADR = (((WORD)(data))& 0x7FFF);
 11159  1359  0821               	movf	USBTransferOnePacket@data^(0+128),w
 11160  135A  00A3               	movwf	??_USBTransferOnePacket^(0+128)
 11161  135B  3002               	movlw	2
 11162  135C  00A4               	movwf	(??_USBTransferOnePacket^(0+128)+1)
 11163  135D  0826               	movf	USBTransferOnePacket@handle^(0+128),w
 11164  135E  3E02               	addlw	2
 11165  135F  0086               	movwf	6
 11166  1360  0187               	clrf	7
 11167  1361  0823               	movf	??_USBTransferOnePacket^(0+128),w
 11168  1362  3FC0               	movwi [0]fsr1
 11169  1363  0824               	movf	(??_USBTransferOnePacket+1)^(0+128),w
 11170  1364  3FC1               	movwi [1]fsr1
 11171                           
 11172                           ;usb_device.c: 1207: handle->CNT = len;
 11173  1365  0822               	movf	USBTransferOnePacket@len^(0+128),w
 11174  1366  00A3               	movwf	??_USBTransferOnePacket^(0+128)
 11175  1367  0A26               	incf	USBTransferOnePacket@handle^(0+128),w
 11176  1368  0086               	movwf	6
 11177  1369  0187               	clrf	7
 11178  136A  0823               	movf	??_USBTransferOnePacket^(0+128),w
 11179  136B  0081               	movwf	1
 11180                           
 11181                           ;usb_device.c: 1208: handle->STAT.Val &= 0x40;
 11182  136C  3040               	movlw	64
 11183  136D  00A3               	movwf	??_USBTransferOnePacket^(0+128)
 11184  136E  0826               	movf	USBTransferOnePacket@handle^(0+128),w
 11185  136F  0086               	movwf	6
 11186  1370  0187               	clrf	7
 11187  1371  0823               	movf	??_USBTransferOnePacket^(0+128),w
 11188  1372  0581               	andwf	1,f
 11189                           
 11190                           ;usb_device.c: 1209: handle->STAT.Val |= 0x80 | (0x08 & 0x08);
 11191  1373  3088               	movlw	136
 11192  1374  00A3               	movwf	??_USBTransferOnePacket^(0+128)
 11193  1375  0826               	movf	USBTransferOnePacket@handle^(0+128),w
 11194  1376  0086               	movwf	6
 11195  1377  0187               	clrf	7
 11196  1378  0823               	movf	??_USBTransferOnePacket^(0+128),w
 11197  1379  0481               	iorwf	1,f
 11198                           
 11199                           ;usb_device.c: 1212: if(dir != 0)
 11200  137A  0820               	movf	USBTransferOnePacket@dir^(0+128),w
 11201  137B  1903               	btfsc	3,2
 11202  137C  2B82               	goto	l4011
 11203                           
 11204                           ;usb_device.c: 1213: {
 11205                           ;usb_device.c: 1215: ((BYTE_VAL*)&pBDTEntryIn[ep])->Val ^= 0x0004;;
 11206  137D  3004               	movlw	4
 11207  137E  00A3               	movwf	??_USBTransferOnePacket^(0+128)
 11208  137F  0825               	movf	USBTransferOnePacket@ep^(0+128),w
 11209  1380  3ED1               	addlw	_pBDTEntryIn& (0+255)
 11210  1381  2B86               	goto	L16
 11211  1382                     l4011:	
 11212                           ;usb_device.c: 1216: }
 11213                           
 11214                           
 11215                           ;usb_device.c: 1217: else
 11216                           ;usb_device.c: 1218: {
 11217                           ;usb_device.c: 1220: ((BYTE_VAL*)&pBDTEntryOut[ep])->Val ^= 0x0004;;
 11218  1382  3004               	movlw	4
 11219  1383  00A3               	movwf	??_USBTransferOnePacket^(0+128)
 11220  1384  0825               	movf	USBTransferOnePacket@ep^(0+128),w
 11221  1385  3ED3               	addlw	_pBDTEntryOut& (0+255)
 11222  1386                     L16:	
 11223  1386  0086               	movwf	6
 11224  1387  0187               	clrf	7
 11225  1388  0823               	movf	??_USBTransferOnePacket^(0+128),w
 11226  1389  0681               	xorwf	1,f
 11227                           
 11228                           ;usb_device.c: 1221: }
 11229                           ;usb_device.c: 1222: return (void*)handle;
 11230  138A  0826               	movf	USBTransferOnePacket@handle^(0+128),w
 11231  138B  0008               	return
 11232  138C                     __end_of_USBTransferOnePacket:	
 11233                           
 11234                           	psect	text43
 11235  11AE                     __ptext43:	
 11236 ;; *************** function _USBEnableEndpoint *****************
 11237 ;; Defined at:
 11238 ;;		line 1056 in file "../USB/usb_device.c"
 11239 ;; Parameters:    Size  Location     Type
 11240 ;;  ep              1    wreg     unsigned char 
 11241 ;;  options         1    4[BANK1 ] unsigned char 
 11242 ;; Auto vars:     Size  Location     Type
 11243 ;;  ep              1    9[BANK1 ] unsigned char 
 11244 ;;  p               2    7[BANK1 ] PTR unsigned char 
 11245 ;;		 -> UEP0(1), 
 11246 ;; Return value:  Size  Location     Type
 11247 ;;		None               void
 11248 ;; Registers used:
 11249 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11250 ;; Tracked objects:
 11251 ;;		On entry : 0/0
 11252 ;;		On exit  : 0/0
 11253 ;;		Unchanged: 0/0
 11254 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11255 ;;      Params:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 11256 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
 11257 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
 11258 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
 11259 ;;Total ram usage:        6 bytes
 11260 ;; Hardware stack levels used:    1
 11261 ;; Hardware stack levels required when called:    5
 11262 ;; This function calls:
 11263 ;;		_USBConfigureEndpoint
 11264 ;; This function is called by:
 11265 ;;		_USBCBInitEP
 11266 ;; This function uses a non-reentrant model
 11267 ;;
 11268                           
 11269                           
 11270                           ;psect for function _USBEnableEndpoint
 11271  11AE                     _USBEnableEndpoint:	
 11272                           
 11273                           ;incstack = 0
 11274                           ; Regs used in _USBEnableEndpoint: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11275                           ;USBEnableEndpoint@ep stored from wreg
 11276  11AE  0021               	movlb	1	; select bank1
 11277  11AF  00A9               	movwf	USBEnableEndpoint@ep^(0+128)
 11278                           
 11279                           ;usb_device.c: 1057: unsigned char* p;
 11280                           ;usb_device.c: 1061: if(options & 0x04)
 11281  11B0  1D24               	btfss	USBEnableEndpoint@options^(0+128),2
 11282  11B1  29B9               	goto	l5759
 11283                           
 11284                           ;usb_device.c: 1062: {
 11285                           ;usb_device.c: 1063: USBConfigureEndpoint(ep, 0);
 11286  11B2  0020               	movlb	0	; select bank0
 11287  11B3  01DE               	clrf	?_USBConfigureEndpoint
 11288  11B4  0021               	movlb	1	; select bank1
 11289  11B5  0829               	movf	USBEnableEndpoint@ep^(0+128),w
 11290  11B6  3188  20B1  3191   	fcall	_USBConfigureEndpoint
 11291  11B9                     l5759:	
 11292                           
 11293                           ;usb_device.c: 1064: }
 11294                           ;usb_device.c: 1065: if(options & 0x02)
 11295  11B9  0021               	movlb	1	; select bank1
 11296  11BA  1CA4               	btfss	USBEnableEndpoint@options^(0+128),1
 11297  11BB  29C3               	goto	l5763
 11298                           
 11299                           ;usb_device.c: 1066: {
 11300                           ;usb_device.c: 1067: USBConfigureEndpoint(ep, 1);
 11301  11BC  0020               	movlb	0	; select bank0
 11302  11BD  01DE               	clrf	?_USBConfigureEndpoint
 11303  11BE  0ADE               	incf	?_USBConfigureEndpoint,f
 11304  11BF  0021               	movlb	1	; select bank1
 11305  11C0  0829               	movf	USBEnableEndpoint@ep^(0+128),w
 11306  11C1  3188  20B1         	fcall	_USBConfigureEndpoint
 11307  11C3                     l5763:	
 11308                           
 11309                           ;usb_device.c: 1068: }
 11310                           ;usb_device.c: 1076: p = (unsigned char*)(&UEP0+ep);
 11311  11C3  0021               	movlb	1	; select bank1
 11312  11C4  0829               	movf	USBEnableEndpoint@ep^(0+128),w
 11313  11C5  3E98               	addlw	152
 11314  11C6  00A5               	movwf	??_USBEnableEndpoint^(0+128)
 11315  11C7  01A6               	clrf	(??_USBEnableEndpoint^(0+128)+1)
 11316  11C8  300E               	movlw	14
 11317  11C9  3DA6               	addwfc	(??_USBEnableEndpoint^(0+128)+1),f
 11318  11CA  0825               	movf	??_USBEnableEndpoint^(0+128),w
 11319  11CB  00A7               	movwf	USBEnableEndpoint@p^(0+128)
 11320  11CC  0826               	movf	(??_USBEnableEndpoint+1)^(0+128),w
 11321  11CD  00A8               	movwf	(USBEnableEndpoint@p+1)^(0+128)
 11322                           
 11323                           ;usb_device.c: 1078: *p = options;
 11324  11CE  0824               	movf	USBEnableEndpoint@options^(0+128),w
 11325  11CF  00A5               	movwf	??_USBEnableEndpoint^(0+128)
 11326  11D0  0827               	movf	USBEnableEndpoint@p^(0+128),w
 11327  11D1  0086               	movwf	6
 11328  11D2  0828               	movf	(USBEnableEndpoint@p+1)^(0+128),w
 11329  11D3  0087               	movwf	7
 11330  11D4  0825               	movf	??_USBEnableEndpoint^(0+128),w
 11331  11D5  0081               	movwf	1
 11332  11D6  0008               	return
 11333  11D7                     __end_of_USBEnableEndpoint:	
 11334                           
 11335                           	psect	text44
 11336  08B1                     __ptext44:	
 11337 ;; *************** function _USBConfigureEndpoint *****************
 11338 ;; Defined at:
 11339 ;;		line 1713 in file "../USB/usb_device.c"
 11340 ;; Parameters:    Size  Location     Type
 11341 ;;  EPNum           1    wreg     unsigned char 
 11342 ;;  direction       1   14[BANK0 ] unsigned char 
 11343 ;; Auto vars:     Size  Location     Type
 11344 ;;  EPNum           1   15[BANK0 ] unsigned char 
 11345 ;;  handle          1   16[BANK0 ] PTR volatile struct __BD
 11346 ;;		 -> BDT(32), 
 11347 ;; Return value:  Size  Location     Type
 11348 ;;		None               void
 11349 ;; Registers used:
 11350 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11351 ;; Tracked objects:
 11352 ;;		On entry : 0/0
 11353 ;;		On exit  : 0/0
 11354 ;;		Unchanged: 0/0
 11355 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11356 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11357 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11358 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
 11359 ;;      Totals:         0       3       4       0       0       0       0       0       0       0       0       0       
      +0       0
 11360 ;;Total ram usage:        7 bytes
 11361 ;; Hardware stack levels used:    1
 11362 ;; Hardware stack levels required when called:    4
 11363 ;; This function calls:
 11364 ;;		Nothing
 11365 ;; This function is called by:
 11366 ;;		_USBEnableEndpoint
 11367 ;; This function uses a non-reentrant model
 11368 ;;
 11369                           
 11370                           
 11371                           ;psect for function _USBConfigureEndpoint
 11372  08B1                     _USBConfigureEndpoint:	
 11373                           
 11374                           ;incstack = 0
 11375                           ; Regs used in _USBConfigureEndpoint: [wreg+fsr1l+fsr1h+status,2+status,0]
 11376                           ;USBConfigureEndpoint@EPNum stored from wreg
 11377  08B1  0020               	movlb	0	; select bank0
 11378  08B2  00DF               	movwf	USBConfigureEndpoint@EPNum
 11379                           
 11380                           ;usb_device.c: 1714: volatile BDT_ENTRY* handle;
 11381                           ;usb_device.c: 1718: handle = (volatile BDT_ENTRY*)&BDT[0];
 11382  08B3  3020               	movlw	32
 11383  08B4  0021               	movlb	1	; select bank1
 11384  08B5  00A0               	movwf	??_USBConfigureEndpoint^(0+128)
 11385  08B6  0820               	movf	??_USBConfigureEndpoint^(0+128),w
 11386  08B7  0020               	movlb	0	; select bank0
 11387  08B8  00E0               	movwf	USBConfigureEndpoint@handle
 11388                           
 11389                           ;usb_device.c: 1719: handle += (4*EPNum+2*direction+0u);
 11390  08B9  085E               	movf	USBConfigureEndpoint@direction,w
 11391  08BA  0021               	movlb	1	; select bank1
 11392  08BB  00A0               	movwf	??_USBConfigureEndpoint^(0+128)
 11393  08BC  3001               	movlw	1
 11394  08BD                     u5735:	
 11395  08BD  35A0               	lslf	??_USBConfigureEndpoint^(0+128),f
 11396  08BE  0B89               	decfsz	9,f
 11397  08BF  28BD               	goto	u5735
 11398  08C0  0020               	movlb	0	; select bank0
 11399  08C1  085F               	movf	USBConfigureEndpoint@EPNum,w
 11400  08C2  0021               	movlb	1	; select bank1
 11401  08C3  00A1               	movwf	(??_USBConfigureEndpoint+1)^(0+128)
 11402  08C4  3001               	movlw	1
 11403  08C5                     u5745:	
 11404  08C5  35A1               	lslf	(??_USBConfigureEndpoint+1)^(0+128),f
 11405  08C6  3EFF               	addlw	-1
 11406  08C7  1D03               	skipz
 11407  08C8  28C5               	goto	u5745
 11408  08C9  3521               	lslf	(??_USBConfigureEndpoint+1)^(0+128),w
 11409  08CA  0720               	addwf	??_USBConfigureEndpoint^(0+128),w
 11410  08CB  00A2               	movwf	(??_USBConfigureEndpoint+2)^(0+128)
 11411  08CC  3001               	movlw	1
 11412  08CD                     u5755:	
 11413  08CD  35A2               	lslf	(??_USBConfigureEndpoint+2)^(0+128),f
 11414  08CE  3EFF               	addlw	-1
 11415  08CF  1D03               	skipz
 11416  08D0  28CD               	goto	u5755
 11417  08D1  3522               	lslf	(??_USBConfigureEndpoint+2)^(0+128),w
 11418  08D2  00A3               	movwf	(??_USBConfigureEndpoint+3)^(0+128)
 11419  08D3  0823               	movf	(??_USBConfigureEndpoint+3)^(0+128),w
 11420  08D4  0020               	movlb	0	; select bank0
 11421  08D5  07E0               	addwf	USBConfigureEndpoint@handle,f
 11422                           
 11423                           ;usb_device.c: 1721: handle->STAT.UOWN = 0;
 11424  08D6  0860               	movf	USBConfigureEndpoint@handle,w
 11425  08D7  0086               	movwf	6
 11426  08D8  0187               	clrf	7
 11427  08D9  1381               	bcf	1,7
 11428                           
 11429                           ;usb_device.c: 1726: if(direction == 0)
 11430  08DA  08DE               	movf	USBConfigureEndpoint@direction,f
 11431  08DB  1D03               	skipz
 11432  08DC  28E4               	goto	l5777
 11433                           
 11434                           ;usb_device.c: 1727: {
 11435                           ;usb_device.c: 1728: pBDTEntryOut[EPNum] = handle;
 11436  08DD  0860               	movf	USBConfigureEndpoint@handle,w
 11437  08DE  0021               	movlb	1	; select bank1
 11438  08DF  00A0               	movwf	??_USBConfigureEndpoint^(0+128)
 11439  08E0  0020               	movlb	0	; select bank0
 11440  08E1  085F               	movf	USBConfigureEndpoint@EPNum,w
 11441  08E2  3ED3               	addlw	_pBDTEntryOut& (0+255)
 11442  08E3  28EB               	goto	L17
 11443  08E4                     l5777:	
 11444                           ;usb_device.c: 1729: }
 11445                           
 11446                           
 11447                           ;usb_device.c: 1730: else
 11448                           ;usb_device.c: 1731: {
 11449                           ;usb_device.c: 1732: pBDTEntryIn[EPNum] = handle;
 11450  08E4  0020               	movlb	0	; select bank0
 11451  08E5  0860               	movf	USBConfigureEndpoint@handle,w
 11452  08E6  0021               	movlb	1	; select bank1
 11453  08E7  00A0               	movwf	??_USBConfigureEndpoint^(0+128)
 11454  08E8  0020               	movlb	0	; select bank0
 11455  08E9  085F               	movf	USBConfigureEndpoint@EPNum,w
 11456  08EA  3ED1               	addlw	_pBDTEntryIn& (0+255)
 11457  08EB                     L17:	
 11458  08EB  0086               	movwf	6
 11459  08EC  0187               	clrf	7
 11460  08ED  0021               	movlb	1	; select bank1
 11461  08EE  0820               	movf	??_USBConfigureEndpoint^(0+128),w
 11462  08EF  0081               	movwf	1
 11463                           
 11464                           ;usb_device.c: 1733: }
 11465                           ;usb_device.c: 1736: handle->STAT.DTS = 0;
 11466  08F0  0020               	movlb	0	; select bank0
 11467  08F1  0860               	movf	USBConfigureEndpoint@handle,w
 11468  08F2  0086               	movwf	6
 11469  08F3  0187               	clrf	7
 11470  08F4  1301               	bcf	1,6
 11471                           
 11472                           ;usb_device.c: 1737: (handle+1)->STAT.DTS = 1;
 11473  08F5  0860               	movf	USBConfigureEndpoint@handle,w
 11474  08F6  3E04               	addlw	4
 11475  08F7  0086               	movwf	6
 11476  08F8  0187               	clrf	7
 11477  08F9  1701               	bsf	1,6
 11478  08FA  0008               	return
 11479  08FB                     __end_of_USBConfigureEndpoint:	
 11480                           
 11481                           	psect	text45
 11482  0003                     __ptext45:	
 11483 ;; *************** function _USBCBStdSetDscHandler *****************
 11484 ;; Defined at:
 11485 ;;		line 434 in file "main.c"
 11486 ;; Parameters:    Size  Location     Type
 11487 ;;		None
 11488 ;; Auto vars:     Size  Location     Type
 11489 ;;		None
 11490 ;; Return value:  Size  Location     Type
 11491 ;;		None               void
 11492 ;; Registers used:
 11493 ;;		None
 11494 ;; Tracked objects:
 11495 ;;		On entry : 0/0
 11496 ;;		On exit  : 0/0
 11497 ;;		Unchanged: 0/0
 11498 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11499 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11500 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11501 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11502 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11503 ;;Total ram usage:        0 bytes
 11504 ;; Hardware stack levels used:    1
 11505 ;; Hardware stack levels required when called:    4
 11506 ;; This function calls:
 11507 ;;		Nothing
 11508 ;; This function is called by:
 11509 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 11510 ;; This function uses a non-reentrant model
 11511 ;;
 11512                           
 11513                           
 11514                           ;psect for function _USBCBStdSetDscHandler
 11515  0003                     _USBCBStdSetDscHandler:	
 11516                           
 11517                           ;incstack = 0
 11518                           ; Regs used in _USBCBStdSetDscHandler: []
 11519  0003  0008               	return
 11520  0004                     __end_of_USBCBStdSetDscHandler:	
 11521                           
 11522                           	psect	text46
 11523  101C                     __ptext46:	
 11524 ;; *************** function _USBCBCheckOtherReq *****************
 11525 ;; Defined at:
 11526 ;;		line 409 in file "main.c"
 11527 ;; Parameters:    Size  Location     Type
 11528 ;;		None
 11529 ;; Auto vars:     Size  Location     Type
 11530 ;;		None
 11531 ;; Return value:  Size  Location     Type
 11532 ;;		None               void
 11533 ;; Registers used:
 11534 ;;		status,2, status,0, pclath, cstack
 11535 ;; Tracked objects:
 11536 ;;		On entry : 0/0
 11537 ;;		On exit  : 0/0
 11538 ;;		Unchanged: 0/0
 11539 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11540 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11541 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11542 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11543 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11544 ;;Total ram usage:        0 bytes
 11545 ;; Hardware stack levels used:    1
 11546 ;; Hardware stack levels required when called:    5
 11547 ;; This function calls:
 11548 ;;		_USBCheckVendorRequest
 11549 ;; This function is called by:
 11550 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 11551 ;; This function uses a non-reentrant model
 11552 ;;
 11553                           
 11554                           
 11555                           ;psect for function _USBCBCheckOtherReq
 11556  101C                     _USBCBCheckOtherReq:	
 11557                           
 11558                           ;main.c: 410: USBCheckVendorRequest();
 11559                           
 11560                           ;incstack = 0
 11561                           ; Regs used in _USBCBCheckOtherReq: [status,2+status,0+pclath+cstack]
 11562  101C  3180  2002         	fcall	_USBCheckVendorRequest
 11563  101E  0008               	return
 11564  101F                     __end_of_USBCBCheckOtherReq:	
 11565                           
 11566                           	psect	text47
 11567  0002                     __ptext47:	
 11568 ;; *************** function _USBCheckVendorRequest *****************
 11569 ;; Defined at:
 11570 ;;		line 248 in file "../USB/usb_function_generic.c"
 11571 ;; Parameters:    Size  Location     Type
 11572 ;;		None
 11573 ;; Auto vars:     Size  Location     Type
 11574 ;;		None
 11575 ;; Return value:  Size  Location     Type
 11576 ;;		None               void
 11577 ;; Registers used:
 11578 ;;		None
 11579 ;; Tracked objects:
 11580 ;;		On entry : 0/0
 11581 ;;		On exit  : 0/0
 11582 ;;		Unchanged: 0/0
 11583 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11584 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11585 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11586 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11587 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11588 ;;Total ram usage:        0 bytes
 11589 ;; Hardware stack levels used:    1
 11590 ;; Hardware stack levels required when called:    4
 11591 ;; This function calls:
 11592 ;;		Nothing
 11593 ;; This function is called by:
 11594 ;;		_USBCBCheckOtherReq
 11595 ;; This function uses a non-reentrant model
 11596 ;;
 11597                           
 11598                           
 11599                           ;psect for function _USBCheckVendorRequest
 11600  0002                     _USBCheckVendorRequest:	
 11601                           
 11602                           ;incstack = 0
 11603                           ; Regs used in _USBCheckVendorRequest: []
 11604  0002  0008               	return
 11605  0003                     __end_of_USBCheckVendorRequest:	
 11606                           
 11607                           	psect	text48
 11608  08B0                     __ptext48:	
 11609 ;; *************** function _USBCBErrorHandler *****************
 11610 ;; Defined at:
 11611 ;;		line 358 in file "main.c"
 11612 ;; Parameters:    Size  Location     Type
 11613 ;;		None
 11614 ;; Auto vars:     Size  Location     Type
 11615 ;;		None
 11616 ;; Return value:  Size  Location     Type
 11617 ;;		None               void
 11618 ;; Registers used:
 11619 ;;		None
 11620 ;; Tracked objects:
 11621 ;;		On entry : 0/0
 11622 ;;		On exit  : 0/0
 11623 ;;		Unchanged: 0/0
 11624 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11625 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11626 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11627 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11628 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11629 ;;Total ram usage:        0 bytes
 11630 ;; Hardware stack levels used:    1
 11631 ;; Hardware stack levels required when called:    4
 11632 ;; This function calls:
 11633 ;;		Nothing
 11634 ;; This function is called by:
 11635 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 11636 ;; This function uses a non-reentrant model
 11637 ;;
 11638                           
 11639                           
 11640                           ;psect for function _USBCBErrorHandler
 11641  08B0                     _USBCBErrorHandler:	
 11642                           
 11643                           ;incstack = 0
 11644                           ; Regs used in _USBCBErrorHandler: []
 11645  08B0  0008               	return
 11646  08B1                     __end_of_USBCBErrorHandler:	
 11647                           
 11648                           	psect	text49
 11649  08AF                     __ptext49:	
 11650 ;; *************** function _USBCB_SOF_Handler *****************
 11651 ;; Defined at:
 11652 ;;		line 335 in file "main.c"
 11653 ;; Parameters:    Size  Location     Type
 11654 ;;		None
 11655 ;; Auto vars:     Size  Location     Type
 11656 ;;		None
 11657 ;; Return value:  Size  Location     Type
 11658 ;;		None               void
 11659 ;; Registers used:
 11660 ;;		None
 11661 ;; Tracked objects:
 11662 ;;		On entry : 0/0
 11663 ;;		On exit  : 0/0
 11664 ;;		Unchanged: 0/0
 11665 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11666 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11667 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11668 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11669 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11670 ;;Total ram usage:        0 bytes
 11671 ;; Hardware stack levels used:    1
 11672 ;; Hardware stack levels required when called:    4
 11673 ;; This function calls:
 11674 ;;		Nothing
 11675 ;; This function is called by:
 11676 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 11677 ;; This function uses a non-reentrant model
 11678 ;;
 11679                           
 11680                           
 11681                           ;psect for function _USBCB_SOF_Handler
 11682  08AF                     _USBCB_SOF_Handler:	
 11683                           
 11684                           ;incstack = 0
 11685                           ; Regs used in _USBCB_SOF_Handler: []
 11686  08AF  0008               	return
 11687  08B0                     __end_of_USBCB_SOF_Handler:	
 11688                           
 11689                           	psect	text50
 11690  101B                     __ptext50:	
 11691 ;; *************** function _USBCBWakeFromSuspend *****************
 11692 ;; Defined at:
 11693 ;;		line 305 in file "main.c"
 11694 ;; Parameters:    Size  Location     Type
 11695 ;;		None
 11696 ;; Auto vars:     Size  Location     Type
 11697 ;;		None
 11698 ;; Return value:  Size  Location     Type
 11699 ;;		None               void
 11700 ;; Registers used:
 11701 ;;		None
 11702 ;; Tracked objects:
 11703 ;;		On entry : 0/0
 11704 ;;		On exit  : 0/0
 11705 ;;		Unchanged: 0/0
 11706 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11707 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11708 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11709 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11710 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11711 ;;Total ram usage:        0 bytes
 11712 ;; Hardware stack levels used:    1
 11713 ;; Hardware stack levels required when called:    4
 11714 ;; This function calls:
 11715 ;;		Nothing
 11716 ;; This function is called by:
 11717 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 11718 ;;		_USBCBSendResume
 11719 ;; This function uses a non-reentrant model
 11720 ;;
 11721                           
 11722                           
 11723                           ;psect for function _USBCBWakeFromSuspend
 11724  101B                     _USBCBWakeFromSuspend:	
 11725                           
 11726                           ;incstack = 0
 11727                           ; Regs used in _USBCBWakeFromSuspend: []
 11728  101B  0008               	return
 11729  101C                     __end_of_USBCBWakeFromSuspend:	
 11730                           
 11731                           	psect	text51
 11732  101A                     __ptext51:	
 11733 ;; *************** function _USBCBSuspend *****************
 11734 ;; Defined at:
 11735 ;;		line 264 in file "main.c"
 11736 ;; Parameters:    Size  Location     Type
 11737 ;;		None
 11738 ;; Auto vars:     Size  Location     Type
 11739 ;;		None
 11740 ;; Return value:  Size  Location     Type
 11741 ;;		None               void
 11742 ;; Registers used:
 11743 ;;		None
 11744 ;; Tracked objects:
 11745 ;;		On entry : 0/0
 11746 ;;		On exit  : 0/0
 11747 ;;		Unchanged: 0/0
 11748 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11749 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11750 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11751 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11752 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11753 ;;Total ram usage:        0 bytes
 11754 ;; Hardware stack levels used:    1
 11755 ;; Hardware stack levels required when called:    4
 11756 ;; This function calls:
 11757 ;;		Nothing
 11758 ;; This function is called by:
 11759 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 11760 ;; This function uses a non-reentrant model
 11761 ;;
 11762                           
 11763                           
 11764                           ;psect for function _USBCBSuspend
 11765  101A                     _USBCBSuspend:	
 11766                           
 11767                           ;incstack = 0
 11768                           ; Regs used in _USBCBSuspend: []
 11769  101A  0008               	return
 11770  101B                     __end_of_USBCBSuspend:	
 11771                           
 11772                           	psect	text52
 11773  0C4E                     __ptext52:	
 11774 ;; *************** function _USBDeviceInit *****************
 11775 ;; Defined at:
 11776 ;;		line 467 in file "../USB/usb_device.c"
 11777 ;; Parameters:    Size  Location     Type
 11778 ;;		None
 11779 ;; Auto vars:     Size  Location     Type
 11780 ;;  p               2    0[BANK1 ] PTR unsigned char 
 11781 ;;		 -> UEP1(1), 
 11782 ;;  i               1    2[BANK1 ] unsigned char 
 11783 ;;  i               1    3[BANK1 ] unsigned char 
 11784 ;; Return value:  Size  Location     Type
 11785 ;;		None               void
 11786 ;; Registers used:
 11787 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11788 ;; Tracked objects:
 11789 ;;		On entry : 0/0
 11790 ;;		On exit  : 0/0
 11791 ;;		Unchanged: 0/0
 11792 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11793 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11794 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
 11795 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11796 ;;      Totals:         0       2       4       0       0       0       0       0       0       0       0       0       
      +0       0
 11797 ;;Total ram usage:        6 bytes
 11798 ;; Hardware stack levels used:    1
 11799 ;; Hardware stack levels required when called:    4
 11800 ;; This function calls:
 11801 ;;		Nothing
 11802 ;; This function is called by:
 11803 ;;		_USBDeviceTasks
 11804 ;;		_InitializeSystem
 11805 ;; This function uses a non-reentrant model
 11806 ;;
 11807                           
 11808                           
 11809                           ;psect for function _USBDeviceInit
 11810  0C4E                     _USBDeviceInit:	
 11811                           
 11812                           ;usb_device.c: 468: BYTE i;
 11813                           ;usb_device.c: 470: {PIE2bits.USBIE = 0;};
 11814                           
 11815                           ;incstack = 0
 11816                           ; Regs used in _USBDeviceInit: [wreg+fsr1l+fsr1h+status,2+status,0]
 11817  0C4E  0021               	movlb	1	; select bank1
 11818  0C4F  1112               	bcf	18,2	;volatile
 11819                           
 11820                           ;usb_device.c: 473: UEIR = 0;;
 11821  0C50  003D               	movlb	29	; select bank29
 11822  0C51  0193               	clrf	19	;volatile
 11823                           
 11824                           ;usb_device.c: 476: UIR = 0;;
 11825  0C52  0190               	clrf	16	;volatile
 11826                           
 11827                           ;usb_device.c: 479: UEP0 = 0;
 11828  0C53  0198               	clrf	24	;volatile
 11829                           
 11830                           ;usb_device.c: 481: { BYTE i; BYTE* p = (BYTE*)&UEP1; for(i=0;i<1;i++) *p++ = 0; };
 11831  0C54  300E               	movlw	14
 11832  0C55  0021               	movlb	1	; select bank1
 11833  0C56  00A1               	movwf	(USBDeviceInit@p+1)^(0+128)
 11834  0C57  3099               	movlw	153
 11835  0C58  00A0               	movwf	USBDeviceInit@p^(0+128)
 11836  0C59  01A2               	clrf	USBDeviceInit@i_718^(0+128)
 11837  0C5A  0822               	movf	USBDeviceInit@i_718^(0+128),w
 11838  0C5B  1D03               	skipz
 11839  0C5C  2C6F               	goto	l5467
 11840  0C5D                     l5459:	
 11841  0C5D  0820               	movf	USBDeviceInit@p^(0+128),w
 11842  0C5E  0086               	movwf	6
 11843  0C5F  0821               	movf	(USBDeviceInit@p+1)^(0+128),w
 11844  0C60  0087               	movwf	7
 11845  0C61  0181               	clrf	1
 11846  0C62  3001               	movlw	1
 11847  0C63  07A0               	addwf	USBDeviceInit@p^(0+128),f
 11848  0C64  3000               	movlw	0
 11849  0C65  3DA1               	addwfc	(USBDeviceInit@p+1)^(0+128),f
 11850  0C66  3001               	movlw	1
 11851  0C67  0020               	movlb	0	; select bank0
 11852  0C68  00DE               	movwf	??_USBDeviceInit
 11853  0C69  085E               	movf	??_USBDeviceInit,w
 11854  0C6A  0021               	movlb	1	; select bank1
 11855  0C6B  07A2               	addwf	USBDeviceInit@i_718^(0+128),f
 11856  0C6C  0822               	movf	USBDeviceInit@i_718^(0+128),w
 11857  0C6D  1903               	btfsc	3,2
 11858  0C6E  2C5D               	goto	l5459
 11859  0C6F                     l5467:	
 11860                           
 11861                           ;usb_device.c: 483: { UCFG = 0x10 | 0x00 | 0x04 | 0x02; UEIE = 0x9F; UIE = 0x39 | 0x40 |
      +                           0x02; };
 11862  0C6F  3016               	movlw	22
 11863  0C70  003D               	movlb	29	; select bank29
 11864  0C71  0091               	movwf	17	;volatile
 11865  0C72  309F               	movlw	159
 11866  0C73  0097               	movwf	23	;volatile
 11867  0C74  307B               	movlw	123
 11868  0C75  0092               	movwf	18	;volatile
 11869                           
 11870                           ;usb_device.c: 486: ;
 11871                           ;usb_device.c: 489: ;
 11872                           ;usb_device.c: 492: for(i=0;i<(sizeof(BDT)/sizeof(BDT_ENTRY));i++)
 11873  0C76  0021               	movlb	1	; select bank1
 11874  0C77  01A3               	clrf	USBDeviceInit@i^(0+128)
 11875  0C78  3008               	movlw	8
 11876  0C79  0223               	subwf	USBDeviceInit@i^(0+128),w
 11877  0C7A  1803               	btfsc	3,0
 11878  0C7B  2C97               	goto	l128
 11879  0C7C                     l5475:	
 11880                           
 11881                           ;usb_device.c: 493: {
 11882                           ;usb_device.c: 494: BDT[i].Val = 0x00;
 11883  0C7C  0823               	movf	USBDeviceInit@i^(0+128),w
 11884  0C7D  0020               	movlb	0	; select bank0
 11885  0C7E  00DE               	movwf	??_USBDeviceInit
 11886  0C7F  3001               	movlw	1
 11887  0C80                     u5305:	
 11888  0C80  35DE               	lslf	??_USBDeviceInit,f
 11889  0C81  3EFF               	addlw	-1
 11890  0C82  1D03               	skipz
 11891  0C83  2C80               	goto	u5305
 11892  0C84  355E               	lslf	??_USBDeviceInit,w
 11893  0C85  3E20               	addlw	32
 11894  0C86  0086               	movwf	6
 11895  0C87  0187               	clrf	7
 11896  0C88  3000               	movlw	0
 11897  0C89  3FC0               	movwi [0]fsr1
 11898  0C8A  3000               	movlw	0
 11899  0C8B  3FC1               	movwi [1]fsr1
 11900  0C8C  3FC2               	movwi [2]fsr1
 11901  0C8D  3FC3               	movwi [3]fsr1
 11902  0C8E  3001               	movlw	1
 11903  0C8F  00DE               	movwf	??_USBDeviceInit
 11904  0C90  085E               	movf	??_USBDeviceInit,w
 11905  0C91  0021               	movlb	1	; select bank1
 11906  0C92  07A3               	addwf	USBDeviceInit@i^(0+128),f
 11907  0C93  3008               	movlw	8
 11908  0C94  0223               	subwf	USBDeviceInit@i^(0+128),w
 11909  0C95  1C03               	skipc
 11910  0C96  2C7C               	goto	l5475
 11911  0C97                     l128:	
 11912                           
 11913                           ;usb_device.c: 495: }
 11914                           ;usb_device.c: 498: UCONbits.PPBRST = 1;
 11915  0C97  003D               	movlb	29	; select bank29
 11916  0C98  170E               	bsf	14,6	;volatile
 11917                           
 11918                           ;usb_device.c: 501: UADDR = 0x00;
 11919  0C99  0196               	clrf	22	;volatile
 11920                           
 11921                           ;usb_device.c: 504: UCONbits.PKTDIS = 0;
 11922  0C9A  120E               	bcf	14,4	;volatile
 11923                           
 11924                           ;usb_device.c: 507: UCONbits.PPBRST = 0;
 11925  0C9B  130E               	bcf	14,6	;volatile
 11926  0C9C                     l5495:	
 11927                           ;usb_device.c: 510: while(UIRbits.TRNIF == 1)
 11928                           
 11929  0C9C  003D               	movlb	29	; select bank29
 11930  0C9D  1D90               	btfss	16,3	;volatile
 11931  0C9E  2CAC               	goto	l5497
 11932                           
 11933                           ;usb_device.c: 511: {
 11934                           ;usb_device.c: 512: (UIR &= 0xF7);
 11935  0C9F  30F7               	movlw	247
 11936  0CA0  0020               	movlb	0	; select bank0
 11937  0CA1  00DE               	movwf	??_USBDeviceInit
 11938  0CA2  085E               	movf	??_USBDeviceInit,w
 11939  0CA3  003D               	movlb	29	; select bank29
 11940  0CA4  0590               	andwf	16,f	;volatile
 11941                           
 11942                           ;usb_device.c: 514: inPipes[0].info.Val = 0;
 11943  0CA5  0021               	movlb	1	; select bank1
 11944  0CA6  01E7               	clrf	(_inPipes^(0+128)+2)
 11945                           
 11946                           ;usb_device.c: 515: outPipes[0].info.Val = 0;
 11947  0CA7  0023               	movlb	3	; select bank3
 11948  0CA8  01A2               	clrf	(_outPipes^(0+384)+2)
 11949                           
 11950                           ;usb_device.c: 516: outPipes[0].wCount.Val = 0;
 11951  0CA9  01A3               	clrf	(_outPipes^(0+384)+3)
 11952  0CAA  01A4               	clrf	((_outPipes+1)^(0+384)+3)
 11953  0CAB  2C9C               	goto	l5495
 11954  0CAC                     l5497:	
 11955                           
 11956                           ;usb_device.c: 517: }
 11957                           ;usb_device.c: 521: USBStatusStageEnabledFlag1 = TRUE;
 11958  0CAC  3001               	movlw	1
 11959  0CAD  0020               	movlb	0	; select bank0
 11960  0CAE  00DE               	movwf	??_USBDeviceInit
 11961  0CAF  085E               	movf	??_USBDeviceInit,w
 11962  0CB0  0021               	movlb	1	; select bank1
 11963  0CB1  00DF               	movwf	_USBStatusStageEnabledFlag1^(0+128)	;volatile
 11964                           
 11965                           ;usb_device.c: 522: USBStatusStageEnabledFlag2 = TRUE;
 11966  0CB2  3001               	movlw	1
 11967  0CB3  0020               	movlb	0	; select bank0
 11968  0CB4  00DE               	movwf	??_USBDeviceInit
 11969  0CB5  085E               	movf	??_USBDeviceInit,w
 11970  0CB6  0021               	movlb	1	; select bank1
 11971  0CB7  00E0               	movwf	_USBStatusStageEnabledFlag2^(0+128)	;volatile
 11972                           
 11973                           ;usb_device.c: 524: USBDeferINDataStagePackets = FALSE;
 11974  0CB8  0020               	movlb	0	; select bank0
 11975  0CB9  01E8               	clrf	_USBDeferINDataStagePackets	;volatile
 11976                           
 11977                           ;usb_device.c: 525: USBDeferOUTDataStagePackets = FALSE;
 11978  0CBA  01E9               	clrf	_USBDeferOUTDataStagePackets	;volatile
 11979                           
 11980                           ;usb_device.c: 526: USBBusIsSuspended = FALSE;
 11981  0CBB  0021               	movlb	1	; select bank1
 11982  0CBC  01DB               	clrf	_USBBusIsSuspended^(0+128)
 11983                           
 11984                           ;usb_device.c: 530: for(i = 0; i < (BYTE)(1+1u); i++)
 11985  0CBD  01A3               	clrf	USBDeviceInit@i^(0+128)
 11986  0CBE  3002               	movlw	2
 11987  0CBF  0223               	subwf	USBDeviceInit@i^(0+128),w
 11988  0CC0  1803               	btfsc	3,0
 11989  0CC1  2CE0               	goto	l5515
 11990  0CC2                     l5509:	
 11991                           
 11992                           ;usb_device.c: 531: {
 11993                           ;usb_device.c: 532: pBDTEntryIn[i] = 0u;
 11994  0CC2  0823               	movf	USBDeviceInit@i^(0+128),w
 11995  0CC3  3ED1               	addlw	_pBDTEntryIn& (0+255)
 11996  0CC4  0086               	movwf	6
 11997  0CC5  0187               	clrf	7
 11998  0CC6  0181               	clrf	1
 11999                           
 12000                           ;usb_device.c: 533: pBDTEntryOut[i] = 0u;
 12001  0CC7  0823               	movf	USBDeviceInit@i^(0+128),w
 12002  0CC8  3ED3               	addlw	_pBDTEntryOut& (0+255)
 12003  0CC9  0086               	movwf	6
 12004  0CCA  0187               	clrf	7
 12005  0CCB  0181               	clrf	1
 12006                           
 12007                           ;usb_device.c: 534: ep_data_in[i].Val = 0u;
 12008  0CCC  0823               	movf	USBDeviceInit@i^(0+128),w
 12009  0CCD  3ECD               	addlw	_ep_data_in& (0+255)
 12010  0CCE  0086               	movwf	6
 12011  0CCF  0187               	clrf	7
 12012  0CD0  0181               	clrf	1
 12013                           
 12014                           ;usb_device.c: 535: ep_data_out[i].Val = 0u;
 12015  0CD1  0823               	movf	USBDeviceInit@i^(0+128),w
 12016  0CD2  3ECF               	addlw	_ep_data_out& (0+255)
 12017  0CD3  0086               	movwf	6
 12018  0CD4  0187               	clrf	7
 12019  0CD5  0181               	clrf	1
 12020  0CD6  3001               	movlw	1
 12021  0CD7  0020               	movlb	0	; select bank0
 12022  0CD8  00DE               	movwf	??_USBDeviceInit
 12023  0CD9  085E               	movf	??_USBDeviceInit,w
 12024  0CDA  0021               	movlb	1	; select bank1
 12025  0CDB  07A3               	addwf	USBDeviceInit@i^(0+128),f
 12026  0CDC  3002               	movlw	2
 12027  0CDD  0223               	subwf	USBDeviceInit@i^(0+128),w
 12028  0CDE  1C03               	skipc
 12029  0CDF  2CC2               	goto	l5509
 12030  0CE0                     l5515:	
 12031                           
 12032                           ;usb_device.c: 536: }
 12033                           ;usb_device.c: 539: pBDTEntryIn[0] = (volatile BDT_ENTRY*)&BDT[2];
 12034  0CE0  3028               	movlw	40
 12035  0CE1  0020               	movlb	0	; select bank0
 12036  0CE2  00DE               	movwf	??_USBDeviceInit
 12037  0CE3  085E               	movf	??_USBDeviceInit,w
 12038  0CE4  0021               	movlb	1	; select bank1
 12039  0CE5  00D1               	movwf	_pBDTEntryIn^(0+128)
 12040                           
 12041                           ;usb_device.c: 541: UEP0 = 0x06|0x10;
 12042  0CE6  3016               	movlw	22
 12043  0CE7  003D               	movlb	29	; select bank29
 12044  0CE8  0098               	movwf	24	;volatile
 12045                           
 12046                           ;usb_device.c: 543: BDT[0].ADR = (((WORD)(&SetupPkt))& 0x7FFF);
 12047  0CE9  3040               	movlw	64
 12048  0CEA  0020               	movlb	0	; select bank0
 12049  0CEB  00DE               	movwf	??_USBDeviceInit
 12050  0CEC  3000               	movlw	0
 12051  0CED  00DF               	movwf	??_USBDeviceInit+1
 12052  0CEE  085E               	movf	??_USBDeviceInit,w
 12053  0CEF  00A2               	movwf	34	;volatile
 12054  0CF0  085F               	movf	??_USBDeviceInit+1,w
 12055  0CF1  00A3               	movwf	35	;volatile
 12056                           
 12057                           ;usb_device.c: 544: BDT[0].CNT = 8;
 12058  0CF2  3008               	movlw	8
 12059  0CF3  00A1               	movwf	33	;volatile
 12060                           
 12061                           ;usb_device.c: 545: BDT[0].STAT.Val = 0x80|0x00|0x04;
 12062  0CF4  3084               	movlw	132
 12063  0CF5  00DE               	movwf	??_USBDeviceInit
 12064  0CF6  085E               	movf	??_USBDeviceInit,w
 12065  0CF7  00A0               	movwf	32	;volatile
 12066                           
 12067                           ;usb_device.c: 548: USBActiveConfiguration = 0;
 12068  0CF8  0021               	movlb	1	; select bank1
 12069  0CF9  01EA               	clrf	_USBActiveConfiguration^(0+128)
 12070                           
 12071                           ;usb_device.c: 551: USBDeviceState = DETACHED_STATE;
 12072  0CFA  01DC               	clrf	_USBDeviceState^(0+128)
 12073  0CFB  0008               	return
 12074  0CFC                     __end_of_USBDeviceInit:	
 12075                           
 12076                           	psect	intentry
 12077  0004                     __pintentry:	
 12078 ;; *************** function _ISRCode *****************
 12079 ;; Defined at:
 12080 ;;		line 70 in file "main.c"
 12081 ;; Parameters:    Size  Location     Type
 12082 ;;		None
 12083 ;; Auto vars:     Size  Location     Type
 12084 ;;		None
 12085 ;; Return value:  Size  Location     Type
 12086 ;;		None               void
 12087 ;; Registers used:
 12088 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
 12089 ;; Tracked objects:
 12090 ;;		On entry : 0/0
 12091 ;;		On exit  : 0/0
 12092 ;;		Unchanged: 0/0
 12093 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12094 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12095 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12096 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12097 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12098 ;;Total ram usage:        1 bytes
 12099 ;; Hardware stack levels used:    1
 12100 ;; Hardware stack levels required when called:    3
 12101 ;; This function calls:
 12102 ;;		_ResultRx
 12103 ;; This function is called by:
 12104 ;;		Interrupt level 1
 12105 ;; This function uses a non-reentrant model
 12106 ;;
 12107                           
 12108  0004                     _ISRCode:	
 12109                           
 12110                           ;incstack = 0
 12111                           ; Regs used in _ISRCode: [wreg-fsr1h+status,2+status,0+btemp+1+pclath+cstack]
 12112  0004  3180               	pagesel	$
 12113  0005  0020               	movlb	0	; select bank0
 12114  0006  087F               	movf	127,w
 12115  0007  00DD               	movwf	??_ISRCode
 12116                           
 12117                           ;main.c: 72: if(IOCBF)
 12118  0008  0027               	movlb	7	; select bank7
 12119  0009  0816               	movf	22,w	;volatile
 12120  000A  1903               	btfsc	3,2
 12121  000B  280E               	goto	i1l830
 12122                           
 12123                           ;main.c: 73: ResultRx();
 12124  000C  318C  24FC         	fcall	_ResultRx
 12125  000E                     i1l830:	
 12126  000E  0020               	movlb	0	; select bank0
 12127  000F  085D               	movf	??_ISRCode,w
 12128  0010  00FF               	movwf	127
 12129  0011  0009               	retfie
 12130  0012                     __end_of_ISRCode:	
 12131                           
 12132                           	psect	text54
 12133  0CFC                     __ptext54:	
 12134 ;; *************** function _ResultRx *****************
 12135 ;; Defined at:
 12136 ;;		line 189 in file "klondike.c"
 12137 ;; Parameters:    Size  Location     Type
 12138 ;;		None
 12139 ;; Auto vars:     Size  Location     Type
 12140 ;;		None
 12141 ;; Return value:  Size  Location     Type
 12142 ;;		None               void
 12143 ;; Registers used:
 12144 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
 12145 ;; Tracked objects:
 12146 ;;		On entry : 0/0
 12147 ;;		On exit  : 0/0
 12148 ;;		Unchanged: 0/0
 12149 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12150 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12151 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12152 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12153 ;;      Totals:         2       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12154 ;;Total ram usage:        7 bytes
 12155 ;; Hardware stack levels used:    1
 12156 ;; Hardware stack levels required when called:    2
 12157 ;; This function calls:
 12158 ;;		i1_SendCmdReply
 12159 ;;		i1___bmul
 12160 ;; This function is called by:
 12161 ;;		_ISRCode
 12162 ;; This function uses a non-reentrant model
 12163 ;;
 12164                           
 12165                           
 12166                           ;psect for function _ResultRx
 12167  0CFC                     _ResultRx:	
 12168                           
 12169                           ;klondike.c: 190: TimeOut = 0;
 12170                           
 12171                           ;incstack = 0
 12172                           ; Regs used in _ResultRx: [wreg-fsr1h+status,2+status,0+btemp+1+pclath+cstack]
 12173  0CFC  0021               	movlb	1	; select bank1
 12174  0CFD  01DA               	clrf	_TimeOut^(0+128)
 12175                           
 12176                           ;klondike.c: 191: ResultPos++;
 12177  0CFE  3001               	movlw	1
 12178  0CFF  0020               	movlb	0	; select bank0
 12179  0D00  00D8               	movwf	??_ResultRx
 12180  0D01  0858               	movf	??_ResultRx,w
 12181  0D02  07E6               	addwf	_ResultPos,f
 12182                           
 12183                           ;klondike.c: 193: if(ResultPos == 2)
 12184  0D03  0866               	movf	_ResultPos,w
 12185  0D04  3A02               	xorlw	2
 12186  0D05  1903               	btfsc	3,2
 12187                           
 12188                           ;klondike.c: 194: ResultPos = 0;
 12189  0D06  01E6               	clrf	_ResultPos
 12190  0D07                     i1l6679:	
 12191                           ;klondike.c: 196: while(ResultQC < 4) {
 12192                           
 12193  0D07  3004               	movlw	4
 12194  0D08  0020               	movlb	0	; select bank0
 12195  0D09  0267               	subwf	_ResultQC,w
 12196  0D0A  1803               	btfsc	3,0
 12197  0D0B  2D4F               	goto	i1l6681
 12198                           
 12199                           ;klondike.c: 197: if(RCIF) {
 12200  0D0C  1E91               	btfss	17,5	;volatile
 12201  0D0D  2D2F               	goto	i1l6671
 12202                           
 12203                           ;klondike.c: 198: ResultQue[ResultPos][2+ResultQC++] = RCREG;
 12204  0D0E  0023               	movlb	3	; select bank3
 12205  0D0F  0819               	movf	25,w	;volatile
 12206  0D10  0020               	movlb	0	; select bank0
 12207  0D11  00D8               	movwf	??_ResultRx
 12208  0D12  3002               	movlw	2
 12209  0D13  0767               	addwf	_ResultQC,w
 12210  0D14  00D9               	movwf	??_ResultRx+1
 12211  0D15  30BE               	movlw	_ResultQue& (0+255)
 12212  0D16  0759               	addwf	??_ResultRx+1,w
 12213  0D17  00DA               	movwf	??_ResultRx+2
 12214  0D18  3006               	movlw	6
 12215  0D19  00DB               	movwf	??_ResultRx+3
 12216  0D1A  085B               	movf	??_ResultRx+3,w
 12217  0D1B  00F0               	movwf	?i1___bmul
 12218  0D1C  0866               	movf	_ResultPos,w
 12219  0D1D  319F  27DE  318C   	fcall	i1___bmul
 12220  0D20  0020               	movlb	0	; select bank0
 12221  0D21  075A               	addwf	??_ResultRx+2,w
 12222  0D22  00DC               	movwf	??_ResultRx+4
 12223  0D23  085C               	movf	??_ResultRx+4,w
 12224  0D24  0086               	movwf	6
 12225  0D25  3001               	movlw	1	; select bank3/4
 12226  0D26  0087               	movwf	7
 12227  0D27  0858               	movf	??_ResultRx,w
 12228  0D28  0081               	movwf	1
 12229  0D29  3001               	movlw	1
 12230  0D2A  00D8               	movwf	??_ResultRx
 12231  0D2B  0858               	movf	??_ResultRx,w
 12232  0D2C  07E7               	addwf	_ResultQC,f
 12233                           
 12234                           ;klondike.c: 199: TimeOut = 0;
 12235  0D2D  0021               	movlb	1	; select bank1
 12236  0D2E  01DA               	clrf	_TimeOut^(0+128)
 12237  0D2F                     i1l6671:	
 12238                           
 12239                           ;klondike.c: 200: }
 12240                           ;klondike.c: 201: if(TimeOut++ > 32) {
 12241  0D2F  3001               	movlw	1
 12242  0D30  0020               	movlb	0	; select bank0
 12243  0D31  00D8               	movwf	??_ResultRx
 12244  0D32  0858               	movf	??_ResultRx,w
 12245  0D33  0021               	movlb	1	; select bank1
 12246  0D34  07DA               	addwf	_TimeOut^(0+128),f
 12247  0D35  3022               	movlw	34
 12248  0D36  025A               	subwf	_TimeOut^(0+128),w
 12249  0D37  1C03               	skipc
 12250  0D38  2D40               	goto	i1l727
 12251                           
 12252                           ;klondike.c: 202: Status.Noise++;
 12253  0D39  3001               	movlw	1
 12254  0D3A  0020               	movlb	0	; select bank0
 12255  0D3B  00D8               	movwf	??_ResultRx
 12256  0D3C  0858               	movf	??_ResultRx,w
 12257  0D3D  0022               	movlb	2	; select bank2
 12258  0D3E  07E5               	addwf	(_Status^(0+256)+12),f	;volatile
 12259                           
 12260                           ;klondike.c: 203: goto outrx;
 12261  0D3F  2DA5               	goto	i1l6691
 12262  0D40                     i1l727:	
 12263                           
 12264                           ;klondike.c: 204: }
 12265                           ;klondike.c: 205: if(RCSTAbits.OERR) {
 12266  0D40  0023               	movlb	3	; select bank3
 12267  0D41  1C9D               	btfss	29,1	;volatile
 12268  0D42  2D07               	goto	i1l6679
 12269                           
 12270                           ;klondike.c: 206: if(Status.State == 'W') {
 12271  0D43  0022               	movlb	2	; select bank2
 12272  0D44  0859               	movf	_Status^(0+256),w	;volatile
 12273  0D45  3A57               	xorlw	87
 12274  0D46  1D03               	skipz
 12275  0D47  2DA5               	goto	i1l6691
 12276                           
 12277                           ;klondike.c: 207: Status.ErrorCount++;
 12278  0D48  3001               	movlw	1
 12279  0D49  0020               	movlb	0	; select bank0
 12280  0D4A  00D8               	movwf	??_ResultRx
 12281  0D4B  0858               	movf	??_ResultRx,w
 12282  0D4C  0022               	movlb	2	; select bank2
 12283  0D4D  07E0               	addwf	(_Status^(0+256)+7),f	;volatile
 12284                           
 12285                           ;klondike.c: 208: }
 12286                           ;klondike.c: 209: goto outrx;
 12287  0D4E  2DA5               	goto	i1l6691
 12288  0D4F                     i1l6681:	
 12289                           
 12290                           ;klondike.c: 210: }
 12291                           ;klondike.c: 211: }
 12292                           ;klondike.c: 213: if(Status.State == 'W') {
 12293  0D4F  0022               	movlb	2	; select bank2
 12294  0D50  0859               	movf	_Status^(0+256),w	;volatile
 12295  0D51  3A57               	xorlw	87
 12296  0D52  1D03               	skipz
 12297  0D53  2DA5               	goto	i1l6691
 12298                           
 12299                           ;klondike.c: 214: ResultQue[ResultPos][0] = '=';
 12300  0D54  303D               	movlw	61
 12301  0D55  0020               	movlb	0	; select bank0
 12302  0D56  00D8               	movwf	??_ResultRx
 12303  0D57  3006               	movlw	6
 12304  0D58  00D9               	movwf	??_ResultRx+1
 12305  0D59  0859               	movf	??_ResultRx+1,w
 12306  0D5A  00F0               	movwf	?i1___bmul
 12307  0D5B  0866               	movf	_ResultPos,w
 12308  0D5C  319F  27DE  318C   	fcall	i1___bmul
 12309  0D5F  3EBE               	addlw	_ResultQue& (0+255)
 12310  0D60  0086               	movwf	6
 12311  0D61  3001               	movlw	1	; select bank3/4
 12312  0D62  0087               	movwf	7
 12313  0D63  0020               	movlb	0	; select bank0
 12314  0D64  0858               	movf	??_ResultRx,w
 12315  0D65  0081               	movwf	1
 12316                           
 12317                           ;klondike.c: 215: ResultQue[ResultPos][1] = Status.WorkID;
 12318  0D66  0022               	movlb	2	; select bank2
 12319  0D67  085D               	movf	(_Status^(0+256)+4),w	;volatile
 12320  0D68  0020               	movlb	0	; select bank0
 12321  0D69  00D8               	movwf	??_ResultRx
 12322  0D6A  3006               	movlw	6
 12323  0D6B  00D9               	movwf	??_ResultRx+1
 12324  0D6C  0859               	movf	??_ResultRx+1,w
 12325  0D6D  00F0               	movwf	?i1___bmul
 12326  0D6E  0866               	movf	_ResultPos,w
 12327  0D6F  319F  27DE  318C   	fcall	i1___bmul
 12328  0D72  0020               	movlb	0	; select bank0
 12329  0D73  00DA               	movwf	??_ResultRx+2
 12330  0D74  0A5A               	incf	??_ResultRx+2,w
 12331  0D75  3EBE               	addlw	_ResultQue& (0+255)
 12332  0D76  0086               	movwf	6
 12333  0D77  3001               	movlw	1	; select bank3/4
 12334  0D78  0087               	movwf	7
 12335  0D79  0858               	movf	??_ResultRx,w
 12336  0D7A  0081               	movwf	1
 12337                           
 12338                           ;klondike.c: 216: SendCmdReply(&ResultQue[ResultPos], &ResultQue[ResultPos]+1, sizeof(Re
      +                          sultQue[ResultPos])-1);
 12339  0D7B  3006               	movlw	6
 12340  0D7C  00D8               	movwf	??_ResultRx
 12341  0D7D  0858               	movf	??_ResultRx,w
 12342  0D7E  00F0               	movwf	?i1___bmul
 12343  0D7F  0866               	movf	_ResultPos,w
 12344  0D80  319F  27DE  318C   	fcall	i1___bmul
 12345  0D83  3EBE               	addlw	_ResultQue& (0+255)
 12346  0D84  0020               	movlb	0	; select bank0
 12347  0D85  00D9               	movwf	??_ResultRx+1
 12348  0D86  0859               	movf	??_ResultRx+1,w
 12349  0D87  00FC               	movwf	_ResultRx$3072
 12350                           
 12351                           ;klondike.c: 216: SendCmdReply(&ResultQue[ResultPos], &ResultQue[ResultPos]+1, sizeof(Re
      +                          sultQue[ResultPos])-1);
 12352  0D88  3006               	movlw	6
 12353  0D89  00D8               	movwf	??_ResultRx
 12354  0D8A  0858               	movf	??_ResultRx,w
 12355  0D8B  00F0               	movwf	?i1___bmul
 12356  0D8C  0866               	movf	_ResultPos,w
 12357  0D8D  319F  27DE  318C   	fcall	i1___bmul
 12358  0D90  0020               	movlb	0	; select bank0
 12359  0D91  00D9               	movwf	??_ResultRx+1
 12360  0D92  0A59               	incf	??_ResultRx+1,w
 12361  0D93  3EBE               	addlw	_ResultQue& (0+255)
 12362  0D94  00DA               	movwf	??_ResultRx+2
 12363  0D95  085A               	movf	??_ResultRx+2,w
 12364  0D96  00FD               	movwf	_ResultRx$3073
 12365                           
 12366                           ;klondike.c: 216: SendCmdReply(&ResultQue[ResultPos], &ResultQue[ResultPos]+1, sizeof(Re
      +                          sultQue[ResultPos])-1);
 12367  0D97  087C               	movf	_ResultRx$3072,w
 12368  0D98  00F6               	movwf	?i1_SendCmdReply
 12369  0D99  3001               	movlw	1
 12370  0D9A  00F7               	movwf	?i1_SendCmdReply+1
 12371  0D9B  087D               	movf	_ResultRx$3073,w
 12372  0D9C  00F8               	movwf	?i1_SendCmdReply+2
 12373  0D9D  3001               	movlw	1
 12374  0D9E  00F9               	movwf	?i1_SendCmdReply+3
 12375  0D9F  3005               	movlw	5
 12376  0DA0  00D8               	movwf	??_ResultRx
 12377  0DA1  0858               	movf	??_ResultRx,w
 12378  0DA2  00FA               	movwf	?i1_SendCmdReply+4
 12379  0DA3  318B  230F         	fcall	i1_SendCmdReply
 12380  0DA5                     i1l6691:	
 12381                           ;klondike.c: 217: }
 12382                           ;klondike.c: 219: outrx:
 12383                           
 12384                           
 12385                           ;klondike.c: 220: { RCSTAbits.SPEN = 0; RCSTAbits.SPEN = 1; };
 12386  0DA5  0023               	movlb	3	; select bank3
 12387  0DA6  139D               	bcf	29,7	;volatile
 12388  0DA7  179D               	bsf	29,7	;volatile
 12389                           
 12390                           ;klondike.c: 221: ResultQC = 0;
 12391  0DA8  0020               	movlb	0	; select bank0
 12392  0DA9  01E7               	clrf	_ResultQC
 12393                           
 12394                           ;klondike.c: 222: IOCBF = 0;
 12395  0DAA  0027               	movlb	7	; select bank7
 12396  0DAB  0196               	clrf	22	;volatile
 12397  0DAC  0008               	return
 12398  0DAD                     __end_of_ResultRx:	
 12399                           
 12400                           	psect	text55
 12401  0B0F                     __ptext55:	
 12402 ;; *************** function i1_SendCmdReply *****************
 12403 ;; Defined at:
 12404 ;;		line 208 in file "main.c"
 12405 ;; Parameters:    Size  Location     Type
 12406 ;;  SendCmdReply    2    6[COMMON] PTR unsigned char 
 12407 ;;		 -> ResultQue(12), OUTPacket(64), 
 12408 ;;  SendCmdReply    2    8[COMMON] PTR unsigned char 
 12409 ;;		 -> ResultQue(12), Cfg(6), ID(12), Status(13), 
 12410 ;;  SendCmdReply    1   10[COMMON] unsigned char 
 12411 ;; Auto vars:     Size  Location     Type
 12412 ;;  SendCmdReply    1   11[COMMON] unsigned char 
 12413 ;; Return value:  Size  Location     Type
 12414 ;;		None               void
 12415 ;; Registers used:
 12416 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
 12417 ;; Tracked objects:
 12418 ;;		On entry : 0/0
 12419 ;;		On exit  : 0/0
 12420 ;;		Unchanged: 0/0
 12421 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12422 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12423 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12424 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12425 ;;      Totals:         6       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12426 ;;Total ram usage:       14 bytes
 12427 ;; Hardware stack levels used:    1
 12428 ;; Hardware stack levels required when called:    1
 12429 ;; This function calls:
 12430 ;;		i1___wmul
 12431 ;;		i1___bmul
 12432 ;; This function is called by:
 12433 ;;		_ResultRx
 12434 ;; This function uses a non-reentrant model
 12435 ;;
 12436                           
 12437                           
 12438                           ;psect for function i1_SendCmdReply
 12439  0B0F                     i1_SendCmdReply:	
 12440                           
 12441                           ;main.c: 209: if(WQI*15 + count + 2 < 64) {
 12442                           
 12443                           ;incstack = 0
 12444                           ; Regs used in i1_SendCmdReply: [wreg-fsr1h+status,2+status,0+btemp+1+pclath+cstack]
 12445  0B0F  087A               	movf	i1SendCmdReply@count,w
 12446  0B10  0020               	movlb	0	; select bank0
 12447  0B11  00D0               	movwf	??i1_SendCmdReply
 12448  0B12  01D1               	clrf	??i1_SendCmdReply+1
 12449  0B13  0021               	movlb	1	; select bank1
 12450  0B14  086D               	movf	_WQI^(0+128),w
 12451  0B15  0020               	movlb	0	; select bank0
 12452  0B16  00D2               	movwf	??i1_SendCmdReply+2
 12453  0B17  01D3               	clrf	??i1_SendCmdReply+3
 12454  0B18  0852               	movf	??i1_SendCmdReply+2,w
 12455  0B19  00F0               	movwf	?i1___wmul
 12456  0B1A  0853               	movf	??i1_SendCmdReply+3,w
 12457  0B1B  00F1               	movwf	?i1___wmul+1
 12458  0B1C  300F               	movlw	15
 12459  0B1D  00F2               	movwf	?i1___wmul+2
 12460  0B1E  3000               	movlw	0
 12461  0B1F  00F3               	movwf	?i1___wmul+3
 12462  0B20  3191  2104  318B   	fcall	i1___wmul
 12463  0B23  0020               	movlb	0	; select bank0
 12464  0B24  0850               	movf	??i1_SendCmdReply,w
 12465  0B25  0770               	addwf	?i1___wmul,w
 12466  0B26  00D4               	movwf	??i1_SendCmdReply+4
 12467  0B27  0851               	movf	??i1_SendCmdReply+1,w
 12468  0B28  3D71               	addwfc	?i1___wmul+1,w
 12469  0B29  00D5               	movwf	??i1_SendCmdReply+5
 12470  0B2A  0854               	movf	??i1_SendCmdReply+4,w
 12471  0B2B  3E02               	addlw	2
 12472  0B2C  00D6               	movwf	??i1_SendCmdReply+6
 12473  0B2D  3000               	movlw	0
 12474  0B2E  3D55               	addwfc	??i1_SendCmdReply+5,w
 12475  0B2F  00D7               	movwf	??i1_SendCmdReply+7
 12476  0B30  0857               	movf	??i1_SendCmdReply+7,w
 12477  0B31  3A80               	xorlw	128
 12478  0B32  00FF               	movwf	127
 12479  0B33  3080               	movlw	128
 12480  0B34  027F               	subwf	127,w
 12481  0B35  1D03               	skipz
 12482  0B36  2B39               	goto	u704_25
 12483  0B37  3040               	movlw	64
 12484  0B38  0256               	subwf	??i1_SendCmdReply+6,w
 12485  0B39                     u704_25:	
 12486  0B39  1803               	skipnc
 12487  0B3A  0008               	return
 12488                           
 12489                           ;main.c: 210: INPacket[WQI*15] = cmd[0];
 12490  0B3B  0876               	movf	i1SendCmdReply@cmd,w
 12491  0B3C  0086               	movwf	6
 12492  0B3D  0877               	movf	i1SendCmdReply@cmd+1,w
 12493  0B3E  0087               	movwf	7
 12494  0B3F  0801               	movf	1,w
 12495  0B40  0020               	movlb	0	; select bank0
 12496  0B41  00D0               	movwf	??i1_SendCmdReply
 12497  0B42  300F               	movlw	15
 12498  0B43  00D1               	movwf	??i1_SendCmdReply+1
 12499  0B44  0851               	movf	??i1_SendCmdReply+1,w
 12500  0B45  00F0               	movwf	?i1___bmul
 12501  0B46  0021               	movlb	1	; select bank1
 12502  0B47  086D               	movf	_WQI^(0+128),w
 12503  0B48  319F  27DE  318B   	fcall	i1___bmul
 12504  0B4B  3E20               	addlw	32
 12505  0B4C  0086               	movwf	6
 12506  0B4D  3002               	movlw	2	; select bank4/5
 12507  0B4E  0087               	movwf	7
 12508  0B4F  0020               	movlb	0	; select bank0
 12509  0B50  0850               	movf	??i1_SendCmdReply,w
 12510  0B51  0081               	movwf	1
 12511                           
 12512                           ;main.c: 211: INPacket[WQI*15 + 1] = SlaveAddress;
 12513  0B52  0021               	movlb	1	; select bank1
 12514  0B53  0858               	movf	_SlaveAddress^(0+128),w
 12515  0B54  0020               	movlb	0	; select bank0
 12516  0B55  00D0               	movwf	??i1_SendCmdReply
 12517  0B56  300F               	movlw	15
 12518  0B57  00D1               	movwf	??i1_SendCmdReply+1
 12519  0B58  0851               	movf	??i1_SendCmdReply+1,w
 12520  0B59  00F0               	movwf	?i1___bmul
 12521  0B5A  0021               	movlb	1	; select bank1
 12522  0B5B  086D               	movf	_WQI^(0+128),w
 12523  0B5C  319F  27DE  318B   	fcall	i1___bmul
 12524  0B5F  0020               	movlb	0	; select bank0
 12525  0B60  00D2               	movwf	??i1_SendCmdReply+2
 12526  0B61  0A52               	incf	??i1_SendCmdReply+2,w
 12527  0B62  3E20               	addlw	32
 12528  0B63  0086               	movwf	6
 12529  0B64  3002               	movlw	2	; select bank4/5
 12530  0B65  0087               	movwf	7
 12531  0B66  0850               	movf	??i1_SendCmdReply,w
 12532  0B67  0081               	movwf	1
 12533                           
 12534                           ;main.c: 212: for(BYTE n = 0; n < count; n++)
 12535  0B68  01FB               	clrf	i1SendCmdReply@n
 12536  0B69                     i1l6653:	
 12537  0B69  087A               	movf	i1SendCmdReply@count,w
 12538  0B6A  027B               	subwf	i1SendCmdReply@n,w
 12539  0B6B  1803               	btfsc	3,0
 12540  0B6C  2B99               	goto	i1l6655
 12541                           
 12542                           ;main.c: 213: INPacket[WQI*15 + n + 2] = data[n];
 12543  0B6D  0879               	movf	i1SendCmdReply@data+1,w
 12544  0B6E  00D1               	movwf	??i1_SendCmdReply+1
 12545  0B6F  0878               	movf	i1SendCmdReply@data,w
 12546  0B70  00D0               	movwf	??i1_SendCmdReply
 12547  0B71  087B               	movf	i1SendCmdReply@n,w
 12548  0B72  0750               	addwf	??i1_SendCmdReply,w
 12549  0B73  0084               	movwf	4
 12550  0B74  0851               	movf	??i1_SendCmdReply+1,w
 12551  0B75  1803               	skipnc
 12552  0B76  0A51               	incf	??i1_SendCmdReply+1,w
 12553  0B77  0085               	movwf	5
 12554  0B78  0800               	movf	0,w	;code access
 12555  0B79  00D2               	movwf	??i1_SendCmdReply+2
 12556  0B7A  0021               	movlb	1	; select bank1
 12557  0B7B  086D               	movf	_WQI^(0+128),w
 12558  0B7C  0020               	movlb	0	; select bank0
 12559  0B7D  00D3               	movwf	??i1_SendCmdReply+3
 12560  0B7E  01D4               	clrf	??i1_SendCmdReply+4
 12561  0B7F  0853               	movf	??i1_SendCmdReply+3,w
 12562  0B80  00F0               	movwf	?i1___wmul
 12563  0B81  0854               	movf	??i1_SendCmdReply+4,w
 12564  0B82  00F1               	movwf	?i1___wmul+1
 12565  0B83  300F               	movlw	15
 12566  0B84  00F2               	movwf	?i1___wmul+2
 12567  0B85  3000               	movlw	0
 12568  0B86  00F3               	movwf	?i1___wmul+3
 12569  0B87  3191  2104  318B   	fcall	i1___wmul
 12570  0B8A  0870               	movf	?i1___wmul,w
 12571  0B8B  077B               	addwf	i1SendCmdReply@n,w
 12572  0B8C  3E02               	addlw	2
 12573  0B8D  3E20               	addlw	32
 12574  0B8E  0086               	movwf	6
 12575  0B8F  3002               	movlw	2	; select bank4/5
 12576  0B90  0087               	movwf	7
 12577  0B91  0020               	movlb	0	; select bank0
 12578  0B92  0852               	movf	??i1_SendCmdReply+2,w
 12579  0B93  0081               	movwf	1
 12580  0B94  3001               	movlw	1
 12581  0B95  00D0               	movwf	??i1_SendCmdReply
 12582  0B96  0850               	movf	??i1_SendCmdReply,w
 12583  0B97  07FB               	addwf	i1SendCmdReply@n,f
 12584  0B98  2B69               	goto	i1l6653
 12585  0B99                     i1l6655:	
 12586                           
 12587                           ;main.c: 214: WQI = (WQI+1) & 3;
 12588  0B99  0021               	movlb	1	; select bank1
 12589  0B9A  0A6D               	incf	_WQI^(0+128),w
 12590  0B9B  3903               	andlw	3
 12591  0B9C  0020               	movlb	0	; select bank0
 12592  0B9D  00D0               	movwf	??i1_SendCmdReply
 12593  0B9E  0850               	movf	??i1_SendCmdReply,w
 12594  0B9F  0021               	movlb	1	; select bank1
 12595  0BA0  00ED               	movwf	_WQI^(0+128)
 12596  0BA1  0008               	return
 12597  0BA2                     __end_ofi1_SendCmdReply:	
 12598                           
 12599                           	psect	text56
 12600  1FDE                     __ptext56:	
 12601 ;; *************** function i1___bmul *****************
 12602 ;; Defined at:
 12603 ;;		line 3 in file "C:\Program Files (x86)\Microchip\xc8\v1.20\sources\pic\bmul.c"
 12604 ;; Parameters:    Size  Location     Type
 12605 ;;  __bmul          1    wreg     unsigned char 
 12606 ;;  __bmul          1    0[COMMON] unsigned char 
 12607 ;; Auto vars:     Size  Location     Type
 12608 ;;  __bmul          1    2[COMMON] unsigned char 
 12609 ;;  __bmul          1    3[COMMON] unsigned char 
 12610 ;; Return value:  Size  Location     Type
 12611 ;;                  1    wreg      unsigned char 
 12612 ;; Registers used:
 12613 ;;		wreg, status,2, status,0
 12614 ;; Tracked objects:
 12615 ;;		On entry : 0/0
 12616 ;;		On exit  : 0/0
 12617 ;;		Unchanged: 0/0
 12618 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12619 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12620 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12621 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12622 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12623 ;;Total ram usage:        4 bytes
 12624 ;; Hardware stack levels used:    1
 12625 ;; This function calls:
 12626 ;;		Nothing
 12627 ;; This function is called by:
 12628 ;;		_ResultRx
 12629 ;;		i1_SendCmdReply
 12630 ;; This function uses a non-reentrant model
 12631 ;;
 12632                           
 12633                           
 12634                           ;psect for function i1___bmul
 12635  1FDE                     i1___bmul:	
 12636                           
 12637                           ;incstack = 0
 12638                           ; Regs used in i1___bmul: [wreg+status,2+status,0]
 12639                           ;i1___bmul@multiplier stored from wreg
 12640  1FDE  00F2               	movwf	i1___bmul@multiplier
 12641  1FDF  01F3               	clrf	i1___bmul@product
 12642  1FE0                     i1l5271:	
 12643  1FE0  1C72               	btfss	i1___bmul@multiplier,0
 12644  1FE1  2FE6               	goto	i1l5275
 12645  1FE2  0870               	movf	i1___bmul@multiplicand,w
 12646  1FE3  00F1               	movwf	??i1___bmul
 12647  1FE4  0871               	movf	??i1___bmul,w
 12648  1FE5  07F3               	addwf	i1___bmul@product,f
 12649  1FE6                     i1l5275:	
 12650  1FE6  1003               	clrc
 12651  1FE7  0DF0               	rlf	i1___bmul@multiplicand,f
 12652  1FE8  1003               	clrc
 12653  1FE9  0CF2               	rrf	i1___bmul@multiplier,f
 12654  1FEA  08F2               	movf	i1___bmul@multiplier,f
 12655  1FEB  1D03               	skipz
 12656  1FEC  2FE0               	goto	i1l5271
 12657  1FED  0873               	movf	i1___bmul@product,w
 12658  1FEE  0008               	return
 12659  1FEF                     __end_ofi1___bmul:	
 12660                           
 12661                           	psect	text57
 12662  1104                     __ptext57:	
 12663 ;; *************** function i1___wmul *****************
 12664 ;; Defined at:
 12665 ;;		line 3 in file "C:\Program Files (x86)\Microchip\xc8\v1.20\sources\pic\wmul.c"
 12666 ;; Parameters:    Size  Location     Type
 12667 ;;  __wmul          2    0[COMMON] unsigned int 
 12668 ;;  __wmul          2    2[COMMON] unsigned int 
 12669 ;; Auto vars:     Size  Location     Type
 12670 ;;  __wmul          2    4[COMMON] unsigned int 
 12671 ;; Return value:  Size  Location     Type
 12672 ;;                  2    0[COMMON] unsigned int 
 12673 ;; Registers used:
 12674 ;;		wreg, status,2, status,0
 12675 ;; Tracked objects:
 12676 ;;		On entry : 0/0
 12677 ;;		On exit  : 0/0
 12678 ;;		Unchanged: 0/0
 12679 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12680 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12681 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12682 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12683 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12684 ;;Total ram usage:        6 bytes
 12685 ;; Hardware stack levels used:    1
 12686 ;; This function calls:
 12687 ;;		Nothing
 12688 ;; This function is called by:
 12689 ;;		i1_SendCmdReply
 12690 ;; This function uses a non-reentrant model
 12691 ;;
 12692                           
 12693                           
 12694                           ;psect for function i1___wmul
 12695  1104                     i1___wmul:	
 12696                           
 12697                           ;incstack = 0
 12698                           ; Regs used in i1___wmul: [wreg+status,2+status,0]
 12699  1104  01F4               	clrf	i1___wmul@product
 12700  1105  01F5               	clrf	i1___wmul@product+1
 12701  1106                     i1l6633:	
 12702  1106  1C70               	btfss	i1___wmul@multiplier,0
 12703  1107  290C               	goto	i1l1273
 12704  1108  0872               	movf	i1___wmul@multiplicand,w
 12705  1109  07F4               	addwf	i1___wmul@product,f
 12706  110A  0873               	movf	i1___wmul@multiplicand+1,w
 12707  110B  3DF5               	addwfc	i1___wmul@product+1,f
 12708  110C                     i1l1273:	
 12709  110C  3001               	movlw	1
 12710  110D                     u701_25:	
 12711  110D  35F2               	lslf	i1___wmul@multiplicand,f
 12712  110E  0DF3               	rlf	i1___wmul@multiplicand+1,f
 12713  110F  0B89               	decfsz	9,f
 12714  1110  290D               	goto	u701_25
 12715  1111  3001               	movlw	1
 12716  1112                     u702_25:	
 12717  1112  36F1               	lsrf	i1___wmul@multiplier+1,f
 12718  1113  0CF0               	rrf	i1___wmul@multiplier,f
 12719  1114  0B89               	decfsz	9,f
 12720  1115  2912               	goto	u702_25
 12721  1116  0871               	movf	i1___wmul@multiplier+1,w
 12722  1117  0470               	iorwf	i1___wmul@multiplier,w
 12723  1118  1D03               	skipz
 12724  1119  2906               	goto	i1l6633
 12725  111A  0875               	movf	i1___wmul@product+1,w
 12726  111B  01F1               	clrf	?i1___wmul+1
 12727  111C  07F1               	addwf	?i1___wmul+1,f
 12728  111D  0874               	movf	i1___wmul@product,w
 12729  111E  01F0               	clrf	?i1___wmul
 12730  111F  07F0               	addwf	?i1___wmul,f
 12731  1120  0008               	return
 12732  1121                     __end_ofi1___wmul:	
 12733  007E                     btemp	set	126	;btemp
 12734  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    174
    Data        72
    BSS         145
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            32     18      32
    BANK1            80     45      80
    BANK2            80     57      78
    BANK3            80      0      68
    BANK4            16      0      16
    BANK5            16      0       0
    BANK6            80      0      64
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           28      0       0
    BANK11            0      0       0
    BANK12            0      0       0

Pointer List with Targets:

    ResultRx$3073	PTR unsigned char  size(1) Largest target is 12
		 -> ResultQue(BANK3[12]), 

    ResultRx$3072	PTR unsigned char  size(1) Largest target is 12
		 -> ResultQue(BANK3[12]), 

    ResultRx$3038	PTR unsigned char  size(1) Largest target is 12
		 -> ResultQue(BANK3[12]), 

    ResultRx$3037	PTR unsigned char  size(1) Largest target is 12
		 -> ResultQue(BANK3[12]), 

    ResultRx$2855	PTR unsigned char  size(1) Largest target is 12
		 -> ResultQue(BANK3[12]), 

    ResultRx$2854	PTR unsigned char  size(1) Largest target is 12
		 -> ResultQue(BANK3[12]), 

    ?___awdiv	int  size(1) Largest target is 0

    ?___lwdiv	unsigned int  size(1) Largest target is 0

    ?___wmul	unsigned int  size(1) Largest target is 0

    ?_rotate	unsigned long  size(1) Largest target is 0

    ?_memset	PTR void  size(1) Largest target is 32
		 -> USBAlternateInterface(BANK1[1]), BDT(BANK0[32]), 

    ?_USBTransferOnePacket	PTR void  size(1) Largest target is 32
		 -> NULL(NULL[0]), BDT(BANK0[32]), 

    USER_USB_CALLBACK_EVENT_HANDLER@pdata	PTR void  size(1) Largest target is 32
		 -> USTATcopy(BANK1[1]), USBActiveConfiguration(BANK1[1]), NULL(NULL[0]), BDT(BANK0[32]), 

    memset@p1	PTR void  size(1) Largest target is 32
		 -> USBAlternateInterface(BANK1[1]), BDT(BANK0[32]), 

    memset@p	PTR unsigned char  size(1) Largest target is 32
		 -> USBAlternateInterface(BANK1[1]), BDT(BANK0[32]), 

    SendCmdReply@data	PTR unsigned char  size(2) Largest target is 13
		 -> ResultQue(BANK3[12]), Cfg(BANK3[6]), ID(CODE[12]), Status(BANK2[13]), 

    SendCmdReply@cmd	PTR unsigned char  size(2) Largest target is 64
		 -> ResultQue(BANK3[12]), OUTPacket(BANK5[64]), 

    USBGenericInHandle	PTR void  size(1) Largest target is 32
		 -> NULL(NULL[0]), BDT(BANK0[32]), 

    USBGenericOutHandle	PTR void  size(1) Largest target is 32
		 -> NULL(NULL[0]), BDT(BANK0[32]), 

    ProcessCmd@cmd	PTR unsigned char  size(1) Largest target is 64
		 -> OUTPacket(BANK5[64]), 

    I2CInBuf	PTR unsigned char  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    AsicPreCalc@work	PTR struct _worktask size(2) Largest target is 180
		 -> WorkQue(BIGRAM[180]), 

    SendAsicData@work	PTR struct _worktask size(2) Largest target is 180
		 -> WorkQue(BIGRAM[180]), 

    USBStdFeatureReqHandler@pUEP	PTR unsigned char  size(2) Largest target is 1
		 -> UEP0(BITSFR29[1]), 

    USBStdFeatureReqHandler@p	PTR struct __BDT size(1) Largest target is 32
		 -> NULL(NULL[0]), BDT(BANK0[32]), 

    USBStdGetStatusHandler@p	PTR struct __BDT size(1) Largest target is 32
		 -> NULL(NULL[0]), BDT(BANK0[32]), 

    USB_SD_Ptr	const PTR const unsigned char [3] size(1) Largest target is 52
		 -> sd002(CODE[52]), sd001(CODE[52]), sd000(CODE[4]), 

    USB_CD_Ptr	const PTR const unsigned char [1] size(1) Largest target is 32
		 -> configDescriptor1(CODE[32]), 

    sp__memset	PTR void  size(1) Largest target is 32
		 -> USBAlternateInterface(BANK1[1]), BDT(BANK0[32]), 

    USBStdSetCfgHandler@p	PTR unsigned char  size(2) Largest target is 1
		 -> UEP1(BITSFR29[1]), 

    pDst	PTR unsigned char  size(1) Largest target is 8
		 -> CtrlTrfData(BANK0[8]), NULL(NULL[0]), 

    USBConfigureEndpoint@handle	PTR volatile struct __BDT size(1) Largest target is 32
		 -> BDT(BANK0[32]), 

    pBDTEntryEP0OutCurrent	PTR volatile struct __BDT size(1) Largest target is 32
		 -> NULL(NULL[0]), BDT(BANK0[32]), 

    pBDTEntryEP0OutNext	PTR volatile struct __BDT size(1) Largest target is 32
		 -> NULL(NULL[0]), BDT(BANK0[32]), 

    USBTransferOnePacket@data	PTR unsigned char  size(1) Largest target is 64
		 -> INPacket(BANK4[64]), OUTPacket(BANK5[64]), 

    sp__USBTransferOnePacket	PTR void  size(1) Largest target is 32
		 -> NULL(NULL[0]), BDT(BANK0[32]), 

    USBTransferOnePacket@handle	PTR volatile struct __BDT size(1) Largest target is 32
		 -> NULL(NULL[0]), BDT(BANK0[32]), 

    USBEnableEndpoint@p	PTR unsigned char  size(2) Largest target is 1
		 -> UEP0(BITSFR29[1]), 

    pBDTEntryOut	PTR volatile struct __BDT[2] size(1) Largest target is 32
		 -> NULL(NULL[0]), BDT(BANK0[32]), 

    pBDTEntryIn	PTR volatile struct __BDT[2] size(1) Largest target is 32
		 -> NULL(NULL[0]), BDT(BANK0[32]), 

    S118$pFunc	PTR FTN()void  size(1) Largest target is 0

    outPipes.pFunc	PTR FTN()void  size(1) Largest target is 0

    S108$wRam	PTR unsigned short  size(1) Largest target is 0

    outPipes.pDst.wRam	PTR unsigned short  size(1) Largest target is 0

    S108$bRam	PTR unsigned char  size(1) Largest target is 0

    outPipes.pDst.bRam	PTR unsigned char  size(1) Largest target is 0

    S66$wRom	PTR const unsigned short  size(1) Largest target is 0

    inPipes.pSrc.wRom	PTR const unsigned short  size(1) Largest target is 0

    S66$wRam	PTR unsigned short  size(1) Largest target is 0

    inPipes.pSrc.wRam	PTR unsigned short  size(1) Largest target is 0

    S66$bRom	PTR const unsigned char  size(1) Largest target is 0

    inPipes.pSrc.bRom	PTR const unsigned char  size(1) Largest target is 0

    S66$bRam	PTR unsigned char  size(1) Largest target is 0

    inPipes.pSrc.bRam	PTR unsigned char  size(1) Largest target is 0

    USBDeviceInit@p	PTR unsigned char  size(2) Largest target is 1
		 -> UEP1(BITSFR29[1]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISRCode in COMMON

    _ISRCode->_ResultRx
    _ResultRx->i1_SendCmdReply
    i1_SendCmdReply->i1___wmul

Critical Paths under _main in BANK0

    _ProcessIO->___bmul
    _ProcessCmd->___lwdiv
    _SendCmdReply->___bmul
    _AsicPushWork->___wmul
    _AsicPreCalc->___wmul
    _SendAsicData->___wmul
    _UserInit->_DetectAsics
    _DetectAsics->___awdiv
    _USBCtrlEPService->_USBCtrlTrfInHandler
    _USBCtrlTrfInHandler->_USBCtrlTrfTxService
    _USBCtrlTrfOutHandler->_USBCtrlTrfRxService
    _USBCtrlTrfRxService->_USBCtrlEPAllowStatusStage
    _USBCtrlEPAllowDataStage->_USBCtrlTrfTxService
    _USBTransferOnePacket->___bmul
    _USBEnableEndpoint->_USBConfigureEndpoint

Critical Paths under _ISRCode in BANK0

    _ISRCode->_ResultRx
    _ResultRx->i1_SendCmdReply

Critical Paths under _main in BANK1

    _main->_ProcessIO
    _ProcessIO->_ProcessCmd
    _ProcessCmd->_AsicPushWork
    _SendCmdReply->___wmul
    _AsicPushWork->_AsicPreCalc
    _AsicPreCalc->_rotate
    _SendAsicData->___wmul
    _UserInit->_DetectAsics
    _DetectAsics->___awdiv
    _USBDeviceTasks->_USBCtrlEPService
    _USBCtrlEPService->_USBCtrlTrfSetupHandler
    _USBCtrlTrfOutHandler->_USBCtrlTrfRxService
    _USBCtrlTrfSetupHandler->_USBCheckStdRequest
    _USBCheckStdRequest->_USBStdFeatureReqHandler
    _USBStdFeatureReqHandler->_USER_USB_CALLBACK_EVENT_HANDLER
    _USBStdSetCfgHandler->_USER_USB_CALLBACK_EVENT_HANDLER
    _USBCtrlEPServiceComplete->_USBCtrlEPAllowDataStage
    _USBSuspend->_USER_USB_CALLBACK_EVENT_HANDLER
    _USBWakeFromSuspend->_USER_USB_CALLBACK_EVENT_HANDLER
    _USER_USB_CALLBACK_EVENT_HANDLER->_USBCBInitEP
    _USBCBInitEP->_USBEnableEndpoint
    _USBEnableEndpoint->_USBConfigureEndpoint

Critical Paths under _ISRCode in BANK1

    None.

Critical Paths under _main in BANK2

    _AsicPushWork->_AsicPreCalc

Critical Paths under _ISRCode in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISRCode in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISRCode in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISRCode in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISRCode in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISRCode in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISRCode in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISRCode in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISRCode in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISRCode in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISRCode in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   14981
                     _USBDeviceTasks
                       _AsicPushWork
                           _WorkTick
                   _InitializeSystem
                          _ProcessIO
 ---------------------------------------------------------------------------------
 (1) _ProcessIO                                            8     8      0    3835
                                             37 BANK1      8     8      0
               _USBTransferOnePacket
                         _ProcessCmd
                             ___bmul
 ---------------------------------------------------------------------------------
 (2) _ProcessCmd                                           7     7      0    3315
                                             30 BANK1      7     7      0
                       _AsicPushWork
                       _SendCmdReply
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     241
                                             14 BANK0      4     4      0
                                              0 BANK1      4     0      4
 ---------------------------------------------------------------------------------
 (3) _SendCmdReply                                        14     9      5     495
                                              4 BANK1     14     9      5
                             ___bmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               4     3      1     136
                                             14 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (3) _AsicPushWork                                         5     5      0    2034
                                             25 BANK1      5     5      0
                       _SendAsicData
                        _AsicPreCalc
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     136
                                             14 BANK0      2     2      0
                                              0 BANK1      4     0      4
 ---------------------------------------------------------------------------------
 (4) _AsicPreCalc                                         69    67      2    1836
                                             13 BANK1     12    10      2
                                              0 BANK2     57    57      0
                             _rotate
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (5) _rotate                                              13     8      5      88
                                              0 BANK1     13     8      5
 ---------------------------------------------------------------------------------
 (4) _SendAsicData                                         6     4      2      62
                                              4 BANK1      6     4      2
                             _Send32
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (5) _Send32                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _InitializeSystem                                     0     0      0     974
                      _USBDeviceInit
                           _UserInit
 ---------------------------------------------------------------------------------
 (2) _UserInit                                             0     0      0     578
                        _DetectAsics
                            _InitFAN
                     _InitTempSensor
                       _InitWorkTick
                       _InitResultRx
 ---------------------------------------------------------------------------------
 (3) _InitResultRx                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _InitWorkTick                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _InitTempSensor                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _InitFAN                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _DetectAsics                                         10    10      0     578
                                             15 BANK0      3     3      0
                                              8 BANK1      7     7      0
                            ___awdiv
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              9     5      4     445
                                             14 BANK0      1     1      0
                                              0 BANK1      8     4      4
 ---------------------------------------------------------------------------------
 (1) _WorkTick                                             1     1      0       0
                                             14 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _USBDeviceTasks                                       3     3      0    8138
                                             30 BANK1      3     3      0
                      _USBDeviceInit
                 _USBWakeFromSuspend
                         _USBSuspend
    _USER_USB_CALLBACK_EVENT_HANDLER
          _USBCtrlEPAllowStatusStage
                    _USBStallHandler
                   _USBCtrlEPService
 ---------------------------------------------------------------------------------
 (2) _USBCtrlEPService                                     4     4      0    5043
                                             26 BANK1      4     4      0
             _USBCtrlTrfSetupHandler
               _USBCtrlTrfOutHandler
                _USBCtrlTrfInHandler
 ---------------------------------------------------------------------------------
 (3) _USBCtrlTrfInHandler                                  3     3      0     170
                                             17 BANK0      1     1      0
                                              0 BANK1      2     2      0
                _USBCtrlTrfTxService
 ---------------------------------------------------------------------------------
 (3) _USBCtrlTrfOutHandler                                 2     2      0     167
                                              2 BANK1      2     2      0
                _USBCtrlTrfRxService
 ---------------------------------------------------------------------------------
 (4) _USBCtrlTrfRxService                                  4     4      0     167
                                             16 BANK0      2     2      0
                                              0 BANK1      2     2      0
          _USBCtrlEPAllowStatusStage
 ---------------------------------------------------------------------------------
 (3) _USBCtrlTrfSetupHandler                               1     1      0    4607
                                             25 BANK1      1     1      0
    _USER_USB_CALLBACK_EVENT_HANDLER
           _USBCtrlEPServiceComplete
                 _USBCheckStdRequest
 ---------------------------------------------------------------------------------
 (4) _USBCheckStdRequest                                   1     1      0    3594
                                             24 BANK1      1     1      0
    _USER_USB_CALLBACK_EVENT_HANDLER
                _USBStdSetCfgHandler
                _USBStdGetDscHandler
             _USBStdGetStatusHandler
            _USBStdFeatureReqHandler
 ---------------------------------------------------------------------------------
 (5) _USBStdFeatureReqHandler                              6     6      0    1400
                                             18 BANK1      6     6      0
    _USER_USB_CALLBACK_EVENT_HANDLER
 ---------------------------------------------------------------------------------
 (5) _USBStdGetStatusHandler                               2     2      0      68
                                             14 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (5) _USBStdGetDscHandler                                  3     3      0       0
                                             14 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) _USBStdSetCfgHandler                                  5     5      0    1249
                                             18 BANK1      5     5      0
    _USER_USB_CALLBACK_EVENT_HANDLER
                             _memset
 ---------------------------------------------------------------------------------
 (6) _memset                                               7     3      4     137
                                             14 BANK0      3     3      0
                                              0 BANK1      4     0      4
 ---------------------------------------------------------------------------------
 (4) _USBCtrlEPServiceComplete                             2     2      0     136
                                              2 BANK1      2     2      0
          _USBCtrlEPAllowStatusStage
            _USBCtrlEPAllowDataStage
 ---------------------------------------------------------------------------------
 (5) _USBCtrlEPAllowDataStage                              2     2      0     136
                                              0 BANK1      2     2      0
                _USBCtrlTrfTxService
 ---------------------------------------------------------------------------------
 (4) _USBCtrlTrfTxService                                  3     3      0     136
                                             14 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) _USBCtrlEPAllowStatusStage                            2     2      0       0
                                             14 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _USBStallHandler                                      1     1      0       0
                                             14 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _USBSuspend                                           1     1      0     877
                                             18 BANK1      1     1      0
    _USER_USB_CALLBACK_EVENT_HANDLER
 ---------------------------------------------------------------------------------
 (2) _USBWakeFromSuspend                                   1     1      0     877
                                             18 BANK1      1     1      0
    _USER_USB_CALLBACK_EVENT_HANDLER
 ---------------------------------------------------------------------------------
 (6) _USER_USB_CALLBACK_EVENT_HANDLER                      5     0      5     877
                                             13 BANK1      5     0      5
                       _USBCBSuspend
               _USBCBWakeFromSuspend
                  _USBCB_SOF_Handler
                  _USBCBErrorHandler
                 _USBCBCheckOtherReq
              _USBCBStdSetDscHandler
                        _USBCBInitEP
 ---------------------------------------------------------------------------------
 (7) _USBCBInitEP                                          3     3      0     846
                                             10 BANK1      3     3      0
                  _USBEnableEndpoint
               _USBTransferOnePacket
 ---------------------------------------------------------------------------------
 (2) _USBTransferOnePacket                                 7     4      3     310
                                              0 BANK1      7     4      3
                             ___bmul (ARG)
 ---------------------------------------------------------------------------------
 (8) _USBEnableEndpoint                                    6     5      1     536
                                              4 BANK1      6     5      1
               _USBConfigureEndpoint
 ---------------------------------------------------------------------------------
 (9) _USBConfigureEndpoint                                 7     6      1     316
                                             14 BANK0      3     2      1
                                              0 BANK1      4     4      0
 ---------------------------------------------------------------------------------
 (7) _USBCBStdSetDscHandler                                0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _USBCBCheckOtherReq                                   0     0      0       0
              _USBCheckVendorRequest
 ---------------------------------------------------------------------------------
 (8) _USBCheckVendorRequest                                0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _USBCBErrorHandler                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _USBCB_SOF_Handler                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _USBCBWakeFromSuspend                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _USBCBSuspend                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _USBDeviceInit                                        6     6      0     396
                                             14 BANK0      2     2      0
                                              0 BANK1      4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _ISRCode                                             1     1      0    1476
                                             13 BANK0      1     1      0
                           _ResultRx
 ---------------------------------------------------------------------------------
 (11) _ResultRx                                            7     7      0    1476
                                             12 COMMON     2     2      0
                                              8 BANK0      5     5      0
                     i1_SendCmdReply
                           i1___bmul
 ---------------------------------------------------------------------------------
 (12) i1_SendCmdReply                                     14     9      5    1210
                                              6 COMMON     6     1      5
                                              0 BANK0      8     8      0
                           i1___wmul
                           i1___bmul
 ---------------------------------------------------------------------------------
 (12) i1___bmul                                            4     3      1     212
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (13) i1___wmul                                            6     2      4     372
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _USBDeviceTasks
     _USBDeviceInit
     _USBWakeFromSuspend
       _USER_USB_CALLBACK_EVENT_HANDLER
         _USBCBSuspend
         _USBCBWakeFromSuspend
         _USBCB_SOF_Handler
         _USBCBErrorHandler
         _USBCBCheckOtherReq
           _USBCheckVendorRequest
         _USBCBStdSetDscHandler
         _USBCBInitEP
           _USBEnableEndpoint
             _USBConfigureEndpoint
           _USBTransferOnePacket
             ___bmul (ARG)
     _USBSuspend
       _USER_USB_CALLBACK_EVENT_HANDLER
         _USBCBSuspend
         _USBCBWakeFromSuspend
         _USBCB_SOF_Handler
         _USBCBErrorHandler
         _USBCBCheckOtherReq
           _USBCheckVendorRequest
         _USBCBStdSetDscHandler
         _USBCBInitEP
           _USBEnableEndpoint
             _USBConfigureEndpoint
           _USBTransferOnePacket
             ___bmul (ARG)
     _USER_USB_CALLBACK_EVENT_HANDLER
       _USBCBSuspend
       _USBCBWakeFromSuspend
       _USBCB_SOF_Handler
       _USBCBErrorHandler
       _USBCBCheckOtherReq
         _USBCheckVendorRequest
       _USBCBStdSetDscHandler
       _USBCBInitEP
         _USBEnableEndpoint
           _USBConfigureEndpoint
         _USBTransferOnePacket
           ___bmul (ARG)
     _USBCtrlEPAllowStatusStage
     _USBStallHandler
     _USBCtrlEPService
       _USBCtrlTrfSetupHandler
         _USER_USB_CALLBACK_EVENT_HANDLER
           _USBCBSuspend
           _USBCBWakeFromSuspend
           _USBCB_SOF_Handler
           _USBCBErrorHandler
           _USBCBCheckOtherReq
             _USBCheckVendorRequest
           _USBCBStdSetDscHandler
           _USBCBInitEP
             _USBEnableEndpoint
               _USBConfigureEndpoint
             _USBTransferOnePacket
               ___bmul (ARG)
         _USBCtrlEPServiceComplete
           _USBCtrlEPAllowStatusStage
           _USBCtrlEPAllowDataStage
             _USBCtrlTrfTxService
         _USBCheckStdRequest
           _USER_USB_CALLBACK_EVENT_HANDLER
             _USBCBSuspend
             _USBCBWakeFromSuspend
             _USBCB_SOF_Handler
             _USBCBErrorHandler
             _USBCBCheckOtherReq
               _USBCheckVendorRequest
             _USBCBStdSetDscHandler
             _USBCBInitEP
               _USBEnableEndpoint
                 _USBConfigureEndpoint
               _USBTransferOnePacket
                 ___bmul (ARG)
           _USBStdSetCfgHandler
             _USER_USB_CALLBACK_EVENT_HANDLER
               _USBCBSuspend
               _USBCBWakeFromSuspend
               _USBCB_SOF_Handler
               _USBCBErrorHandler
               _USBCBCheckOtherReq
                 _USBCheckVendorRequest
               _USBCBStdSetDscHandler
               _USBCBInitEP
                 _USBEnableEndpoint
                   _USBConfigureEndpoint
                 _USBTransferOnePacket
                   ___bmul (ARG)
             _memset
           _USBStdGetDscHandler
           _USBStdGetStatusHandler
           _USBStdFeatureReqHandler
             _USER_USB_CALLBACK_EVENT_HANDLER
               _USBCBSuspend
               _USBCBWakeFromSuspend
               _USBCB_SOF_Handler
               _USBCBErrorHandler
               _USBCBCheckOtherReq
                 _USBCheckVendorRequest
               _USBCBStdSetDscHandler
               _USBCBInitEP
                 _USBEnableEndpoint
                   _USBConfigureEndpoint
                 _USBTransferOnePacket
                   ___bmul (ARG)
       _USBCtrlTrfOutHandler
         _USBCtrlTrfRxService
           _USBCtrlEPAllowStatusStage
       _USBCtrlTrfInHandler
         _USBCtrlTrfTxService
   _AsicPushWork
     _SendAsicData
       _Send32
       ___wmul (ARG)
     _AsicPreCalc
       _rotate
       ___wmul (ARG)
     ___wmul
   _WorkTick
   _InitializeSystem
     _USBDeviceInit
     _UserInit
       _DetectAsics
         ___awdiv
       _InitFAN
       _InitTempSensor
       _InitWorkTick
       _InitResultRx
   _ProcessIO
     _USBTransferOnePacket
       ___bmul (ARG)
     _ProcessCmd
       _AsicPushWork
         _SendAsicData
           _Send32
           ___wmul (ARG)
         _AsicPreCalc
           _rotate
           ___wmul (ARG)
         ___wmul
       _SendCmdReply
         ___bmul
         ___wmul
       ___lwdiv
       ___wmul
     ___bmul

 _ISRCode (ROOT)
   _ResultRx
     i1_SendCmdReply
       i1___wmul
       i1___bmul
     i1___bmul

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0      11       3        0.0%
BITBANK0            20      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               20     12      20       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     2D      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50     39      4E       9       97.5%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      44      11       85.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            10      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               10      0      10      13      100.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            10      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               10      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0      40      17       80.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     160      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              1C      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BANK11               0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BANK12               0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     171      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.20 build 52243 
Symbol Table                                                                                   Wed Oct 23 12:58:25 2013

                              _USB_SD_Ptr 0801                                         pc 0002  
                          ___bmul@product 0060                               _SSPSTATbits 0214  
                                      _ID 089F                    ?_USBCheckVendorRequest 0070  
                            ___awdiv@sign 00A5                             _USBDeviceInit 0C4E  
                     ___wmul@multiplicand 00A2                          i1___wmul@product 0074  
                     __end_of_AsicPreCalc 04E1                                       LATC 010E  
                              _BankRanges 0340      USER_USB_CALLBACK_EVENT_HANDLER@event 00AD  
    USER_USB_CALLBACK_EVENT_HANDLER@pdata 00AF                       __end_of_DetectAsics 0F16  
                                     l140 0F23                                       l142 0F27  
                                     l128 0C97                                       l208 0A3E  
                                     l330 14E2                                       l146 0F4D  
                                     l315 1503                                       l155 0FAE  
                                     l332 1492                                       l156 0FFD  
                                     l341 14BB               __end_of_USBStdGetDscHandler 097A  
                                     l318 153C                                       l271 1391  
                                     l353 06A6                                       l274 13CD  
                                     l354 06A7                                       l275 139D  
                                     l276 13A0                                       l366 0715  
                                     l358 06D6                                       l681 0642  
                                     l833 108A                                       l914 12BB  
                                     _BDT 0020                                       l687 055F  
                                     l688 0571                                       l689 057C  
                                     _GIE 005F                                       _PR2 001B  
                                     _UIE 0E92                                       _UIR 0E90  
                                     _Cfg 01DE                                       _WQI 00ED  
                                     _WQX 00EE                                       _buf 0260  
                              _USBSuspend 109E                                       _ptr 006E  
                    USBStdSetCfgHandler@i 00B6                      USBStdSetCfgHandler@p 00B3  
                                     wreg 0009                            _USBDeviceTasks 0F16  
                          _USBDeviceState 00DC                    ??_USBCBWakeFromSuspend 005E  
                                    S6763 1000                     ??_USBCtrlTrfRxService 0060  
                USBEnableEndpoint@options 00A4                                      INDF1 0001  
                            __CFG_LVP$OFF 0000                                      FSR1H 0007  
                                    FSR1L 0006                                      l4001 1359  
                                    l1273 1194                                      l4011 1382  
              USBConfigureEndpoint@handle 0060                                      l6003 0967  
                                    l6005 096A                                      l6021 13A9  
                                    l6101 1533                                      l6031 13C1  
                                    l6009 096D                                      l6121 149F  
                                    l6211 0709                                      l6131 14AC  
                                    l6107 1545                                      l6133 14AF  
                                    l6117 1499                                      l6109 1546  
                                    l4541 0063                                      l6223 073A  
                                    l6143 14CA                                      l6119 149C  
                                    l4535 0028                                      l6225 0742  
                                    l6209 0704                                      l6129 14A9  
                                    l6401 0B09                                      l5515 0CE0  
                                    l3923 117E                                      l6219 071C  
                                    l6163 065A                                      l6147 14D7  
                                    l6075 1206                                      l5611 0FA6  
                                    l5603 0F93                                      l6307 04E4  
                                    l5509 0CC2                                      l3925 1180  
                                    l6165 065C                                      l6069 11DF  
                                    l5621 0FB4                                      l5541 0F2A  
                                    l6421 0F0D                                      l6333 053A  
                                    l5703 1571                                      l6087 14FE  
                                    l5631 0FCC                                      l6327 0528  
                                    l6319 0521                                      l6097 1526  
                                    l5561 0F47                                      l5553 0F3A  
                                    l6329 0539                                      l5475 0C7C  
                                    l5467 0C6F                                      l5459 0C5D  
                                    l5811 099A                                      l6187 06B2  
                                    l6179 0689                                      l6419 0EBD  
                                    l6611 132E                                      l6603 130A  
                                    l6363 060C                                      l6355 05DA  
                                    l6371 0629                                      l5821 09C2  
                                    l6197 06D0                                      l5637 0FE1  
                                    l5581 0F69                                      l5573 0F5D  
                                    l6437 1263                                      l6541 143D  
                                    l6621 118A                                      l6605 1319  
                                    l6357 05EB                                      l6349 059C  
                                    l6453 1092                                      l5495 0C9C  
                                    l5671 1287                                      l5831 09E0  
                                    l5807 0992                                      l6199 06DF  
                                    l5911 0E2C                                      l5903 0DE2  
                                    l5751 16FD                                      l5639 0FF1  
                                    l6439 1269                                      l6615 1339  
                                    l5497 0CAC                                      l3993 134C  
                                    l5673 128A                                      l5665 127E  
                                    l5681 1293                                      l5913 0E35  
                                    l5905 0E00                                      l5745 16EB  
                                    l5593 0F86                                      l6457 109A  
                                    l5763 11C3                                      l5675 128D  
                                    l5667 1281                                      l5851 0A11  
                                    l5739 16C6                                      l5587 0F7A  
                                    l6547 144A                                      l6491 165A  
                                    l6483 163E                                      l5677 1290  
                                    l5669 1284                                      l5829 09DB  
                                    l5941 179D                                      l5933 178D  
                                    l5749 16FA                                      l5597 0F8C  
                                    l6573 1483                                      l6565 1472  
                                    l6557 1452                                      l6485 1640  
                                    l5759 11B9                                      l5839 09F9  
                                    l5863 0A49                                      l5871 0A53  
                                    l5855 0A15                                      l5951 17B1  
                                    l5919 0E57                                      l6559 1460  
                                    l6583 1028                                      l6399 0ADB  
                                    l5777 08E4                                      l5793 141A  
                                    l6569 147B                                      l6497 166E  
                                    l6579 1022                                      l6499 1670  
                                    l6765 129C                                      l5789 1405  
                                    l5973 17EC                                      l5957 17C3  
                                    l5893 0DC8                                      l6767 12B6  
                                    l5983 1147                                      l5991 0910  
                                    l5997 0945                                      l5989 0906  
                                    _LATC 010E                                      u4015 006D  
                                    u4105 0246                                      u4025 0085  
                                    u4115 025E                                      u4035 00AF  
                                    u4205 03EF                                      u4125 0276  
                                    u4045 00E4                                      u4215 0407  
                                    u4135 028E                                      u4055 0118  
                                    u4225 0466                                      u4145 02A7  
                                    u4065 014C                                      u4235 0481  
                                    u4155 02D5                                      u4075 0164  
                                    u4245 0499                                      u4165 0325  
                                    u4085 0192                                      u4255 04B1  
                                    u4175 0376                                      u4095 01E2  
                                    u5305 0C80                                      u4265 04C9  
                                    u4185 038E                                      u6035 1152  
                                    u4195 03B9                                      u6410 0510  
                                    u3940 121B                                      _RCIF 008D  
                                    u3950 122C                                      u3960 001E  
                                    u6440 054F                                      u3945 1216  
                                    u6505 058D                                      u3955 1228  
                                    u6515 0594                                      u6525 05A6  
                                    u5735 08BD                                      u6615 125C  
                   ??_USBCtrlTrfTxService 005E                                      u5745 08C5  
                                    u5665 16A3                                      u3985 0049  
                                    u6545 0AAB                                      u5755 08CD  
                                    u5925 0DC0                                      u6805 1455  
                                    u6565 0EC8                                      u6575 0EDF  
                                    _UCFG 0E91                                      u5785 140F  
                                    u6825 1461                                      u6585 0EF6  
                                    u6905 130F                                      u6835 146B  
                                    _UEP0 0E98                                      u6845 1473  
                                    u6925 131B                                      _UEP1 0E99  
                                    u6935 1326                                      u6945 1330  
                                    _UEIE 0E97                                      u6975 1196  
                                    u6985 119B                                      _UEIR 0E93  
                                    _UCON 0E8E                                      _TMR0 0015  
                         __end_of_ISRCode 0012    USBStdFeatureReqHandler@current_ep_data 00B6  
                                    _pDst 006D                                      _main 1087  
                                    fsr0h 0005                                      fsr1h 0007  
                                    fsr0l 0004                                      indf0 0000  
                                    indf1 0001                                      fsr1l 0006  
                                    btemp 007E                      __end_of_AsicPushWork 1625  
                                    start 0012                             __CFG_IESO$OFF 0000  
                      _USBCBCheckOtherReq 101C                __end_of_USBCheckStdRequest 14E3  
                  ??_USBCtrlTrfOutHandler 00A2                         ___bmul@multiplier 0061  
               ??_USBStdFeatureReqHandler 00B2                           __end_of_InitFAN 10CF  
                ??_USBStdGetStatusHandler 005E                            ?_USBDeviceInit 0070  
                           ?_InitResultRx 0070                       ?_USBCBCheckOtherReq 0070  
                         i1SendCmdReply@n 007B                                     ?_main 0070  
                         __end_of___awdiv 148A                             __CFG_WDTE$OFF 0000  
       __size_of_USBCtrlEPServiceComplete 0085                           ___awdiv@divisor 00A0  
                  __end_of_USBDeviceTasks 1000                 ?_USBCtrlEPServiceComplete 0070  
                                   _IOCBF 0396                           __end_of___lwdiv 1344  
                                   i1l830 000E                                     i1l727 0D40  
                                   _UADDR 0E96                           ___awdiv@counter 00A4  
                                   _RCREG 0199                             ?_InitWorkTick 0070  
                                   _TMR1H 0017                                     _TMR1L 0016  
                                   _USTAT 0E8F        __size_of_USBCtrlEPAllowStatusStage 006E  
                           __CFG_PWRTE$ON 0000                            __CFG_FCMEN$OFF 0000  
         __end_of_USBCtrlEPAllowDataStage 1432                                     _sd000 08AB  
                                   _sd001 0805                                     _sd002 0839  
                    ??_USBCBCheckOtherReq 005E                          __end_ofi1___bmul 1FEF  
                        __end_ofi1___wmul 1121                          ??i1_SendCmdReply 0050  
                                   status 0003                       i1___wmul@multiplier 0070  
                                   wtemp0 007E              __size_of_USBStdSetCfgHandler 007D  
                          __CFG_MCLRE$OFF 0000                           __initialization 1708  
                             _AsicPreCalc 0014                              __end_of_main 109E  
                             _DetectAsics 0E5F                            ??_InitResultRx 005E  
               __size_of_USBCtrlEPService 0072                                    ??_main 0062  
                          ??_InitWorkTick 005E                 __size_of_InitializeSystem 0017  
                         ?_USBDeviceTasks 0070                               ?_USBSuspend 0070  
                        __end_of_ResultRx 0DAD                                 ??_ISRCode 005D  
                          _InitTempSensor 1FEF                          __end_of_UserInit 07FF  
                                  _I2CCmd 0063                                    _ACTCON 039B  
                                  _ADRESH 009C                          ___awdiv@dividend 00A2  
                                  _ANSELA 018C                                    _ANSELB 018D  
                                  _ANSELC 018E                          __end_of_WorkTick 127D  
                                  _IOCAF3 1C9B                                    _T1GSPM 00CC  
                                  i1l1273 110C                                    i1l5271 1FE0  
                                  i1l5275 1FE6                                    i1l6633 1106  
                                  i1l6653 0B69                                    i1l6655 0B99  
                                  i1l6671 0D2F                                    i1l6681 0D4F  
                                  i1l6691 0DA5                                    i1l6679 0D07  
                                  u701_25 110D                                    u702_25 1112  
                                  u704_25 0B39                                    _OSCCON 0099  
                                  _TMR1GE 00CF                                    _TMR0IF 005A  
                                  _TMR0CS 04AD                                    _TMR1IE 0488  
                                  _TMR1IF 0088                                    _PWM1OE 309E  
                                  _TMR2IF 0089                                    _TMR1ON 00C0  
                                  _TMR2ON 00E2                                    _SSP1EN 10AD  
                                  _SSP1IF 008B                                    _SSPADD 0212  
                                  _SSPBUF 0211                                 ??_InitFAN 005E  
                                  _Send32 0BA2                         _shortPacketStatus 006F  
                           ?_SendCmdReply 00A4                           USBDeviceTasks@i 00C0  
                           ?_SendAsicData 00A4               USBStdFeatureReqHandler@pUEP 00B4  
                USBTransferOnePacket@data 00A1                USBCtrlTrfInHandler@lastDTS 0061  
                                  _Status 0159                           ??_USBDeviceInit 005E  
                                  ___bmul 101F                                    ___wmul 1187  
                               ??___awdiv 005E                              ?_USBCBInitEP 0070  
                               ??___lwdiv 005E                         _USBEnableEndpoint 11AE  
         __size_of_USBStdGetStatusHandler 0050                                    _memset 1141  
                        ___awdiv@quotient 00A6                                _ProcessCmd 04E1  
                      ?_USBEnableEndpoint 00A4                                    _rotate 1208  
                   _USBCBStdSetDscHandler 0003             __size_of_USBTransferOnePacket 0048  
                      __size_of_ProcessIO 0071                    __end_of_InitTempSensor 2000  
                     ??_USBEnableEndpoint 00A5                               _CtrlTrfData 0048  
                   __size_of_AsicPushWork 006E                      _controlTransferState 006B  
                 __end_of__initialization 1780                  __size_of_USBStallHandler 0025  
                          ??_SendCmdReply 00A9                       ___bmul@multiplicand 005E  
                          ??_SendAsicData 00A6                       __size_of_USBSuspend 0018  
                 ??_USBCheckVendorRequest 005E                            __pcstackCOMMON 0070  
               __end_of_USBEnableEndpoint 11D7                             __end_of_sd000 08AF  
                           __end_of_sd001 0839                             __end_of_sd002 086D  
                            __pidataBANK1 07FF                              __pidataBANK2 1FD1  
                            __pidataBANK3 10CF                              __pidataBANK6 1121  
                       _USBCB_SOF_Handler 08AF          __size_of_USBCtrlEPAllowDataStage 0056  
           __size_of_USBConfigureEndpoint 004A               __end_of_USBCtrlTrfInHandler 1549  
                      ?_USBCB_SOF_Handler 0070                                __end_of_ID 08AB  
                               ?i1___bmul 0070                                 ?i1___wmul 0070  
                          _OPTION_REGbits 0095                              _AsicPushWork 15B7  
                         ?_InitTempSensor 0070                       i1SendCmdReply@count 007A  
                     ??_USBCB_SOF_Handler 005E                  ??_USBCtrlTrfSetupHandler 00B9  
                        i1___bmul@product 0073                    _USBStdGetStatusHandler 138C  
                    __end_of_InitResultRx 1044                                __pbssBANK0 0062  
                              __pbssBANK1 00CD                                __pbssBANK2 0166  
                              __pbssBANK3 01A0                                __pbssBANK4 0260  
                              __pbssBANK6 0320                         i1SendCmdReply@cmd 0076  
                    __end_of_InitWorkTick 1059               __size_of_USBWakeFromSuspend 0017  
                             _pBDTEntryIn 00D1                         __end_of_ProcessIO 1696  
        __end_of_USBCtrlEPServiceComplete 0A83                                   ?_Send32 0070  
               __end_of_USBCB_SOF_Handler 08B0                                __pmaintext 1087  
                    USBCtrlTrfRxService@i 00A0                                 ?_ResultRx 0070  
                                 ?___bmul 005E                                   ?___wmul 00A0  
                              __pintentry 0004                                 ?_UserInit 0070  
                                 _I2CAddr 0062                                   ?_memset 00A0  
                  ?_USBCBStdSetDscHandler 0070                                _device_dsc 088D  
                        _USBCtrlEPService 1696                                 ?_WorkTick 0070  
                             ?_ProcessCmd 0070                                ??i1___bmul 0071  
                              _ep_data_in 00CD                                   ?_rotate 00A0  
                              ??i1___wmul 0074                          _InitializeSystem 1070  
                             _NonceRanges 0320               __end_of_USBCtrlTrfRxService 0E5F  
                      _USBCheckStdRequest 148A                         _configDescriptor1 086D  
             __end_of_USBCtrlTrfTxService 09FE                       _USBStdSetCfgHandler 1783  
                                 _ISRCode 0004                                   _PWM1DCH 0612  
                                 _PWM1DCL 0611                                   _OSCTUNE 0098  
                                 _PWM1CON 0613                                   _TMR1GIE 048F  
                                 _TMR1GIF 008F                       ?_USBCheckStdRequest 0070  
            __size_of_USBStdGetDscHandler 007F                                   _UIEbits 0E92  
           __size_of_USBCBWakeFromSuspend 0001                                __stringtab 0800  
                                 _UIRbits 0E90                                   _InitFAN 10B6  
                    ?_USBStdSetCfgHandler 0070                           __size_of_Send32 00AC  
                                 _TimeOut 00DA                                ??_ResultRx 0058  
              __size_of_USBEnableEndpoint 0029                              ?_AsicPreCalc 00AD  
                            ?_DetectAsics 0070                      ??_USBCheckStdRequest 00B8  
                         __size_of___bmul 0012             __size_of_USBCtrlTrfOutHandler 0031  
                                 ___awdiv 1432                          ??_USBDeviceTasks 00BE  
                         __size_of___wmul 0027                                   _WorkNow 00E2  
                                 _WorkQue 233C                                   ___lwdiv 12FF  
                       ??_USBStallHandler 005E                                ??_UserInit 0062  
                         __size_of_memset 0021                                ??_WorkTick 005E  
               __end_of_configDescriptor1 088D                      __size_of_USBCBInitEP 001B  
                                 __ptext1 1625                                   __ptext2 04E1  
                                 __ptext3 12FF                                   __ptext4 0A83  
                                 __ptext5 101F                                   __ptext6 15B7  
                                 __ptext7 1187                                   __ptext8 0014  
                                 __ptext9 1208                                   _inPipes 00E5  
                        _DetectAsics$2853 005F               _USBDeferOUTDataStagePackets 0069  
                         __size_of_rotate 0037                                 _T1CONbits 0018  
                            ??_USBSuspend 00B2                                 _T2CONbits 001C  
                       _USBCBErrorHandler 08B0                      __end_of_SendCmdReply 0B0F  
                     i1___bmul@multiplier 0072                                 _IOCBPbits 0394  
                    __end_of_SendAsicData 07EC                        ?_USBCBErrorHandler 0070  
                           ?_USBCBSuspend 0070                        __end_of_USB_CD_Ptr 0805  
         __size_of_USBCtrlTrfSetupHandler 0043                                   clrloop0 1FC6  
                    end_of_initialization 1780                            _ProcessIO$2400 00CB  
                          _ProcessIO$2366 00C9               __size_of_USBCBCheckOtherReq 0003  
                      __end_of_USB_SD_Ptr 0804                       _pBDTEntryEP0OutNext 006C  
                                 init_ram 1FB9                       ??_USBCBErrorHandler 005E  
                                 memset@c 00A0                                   memset@n 00A2  
                                 memset@p 0060                                   initloop 1FBA  
                     __size_of_ProcessCmd 0164                  ?_USBStdFeatureReqHandler 0070  
                   ??_USBStdSetCfgHandler 00B2                          SendCmdReply@data 00A6  
              __size_of_USBCB_SOF_Handler 0001                        __end_of_USBSuspend 10B6  
                 _USBCtrlEPAllowDataStage 13DC                                 _RCSTAbits 019D  
                                 rotate@x 00A0                                   rotate@y 00A4  
                         AsicPreCalc@work 00AD                  _USBCtrlEPServiceComplete 09FE  
                   i1___wmul@multiplicand 0072                _USBStatusStageEnabledFlag1 00DF  
              _USBStatusStageEnabledFlag2 00E0                        USBEnableEndpoint@p 00A7  
               __end_of_USBCBErrorHandler 08B1                          __CFG_FOSC$INTOSC 0000  
                   __size_of_InitResultRx 0013                                 _TRISAbits 008C  
                               _TRISBbits 008D                                 _TRISCbits 008E  
                          ??_USBCBSuspend 005E                        _BothEP0OutUOWNsSet 00D5  
               USBStdSetCfgHandler@i_1089 00B5                                 _OUTPacket 02A0  
               USBConfigureEndpoint@EPNum 005F                ?_USBCtrlEPAllowStatusStage 0070  
                   __size_of_InitWorkTick 0015       USER_USB_CALLBACK_EVENT_HANDLER@size 00B0  
                               _USTATcopy 00EC              __end_of_USBTransferOnePacket 138C  
                               _TXSTAbits 019E                             _PrecalcHashes 01A6  
                      USBDeviceInit@i_718 00A2                            __end_of_Send32 0C4E  
                  _USBCtrlTrfSetupHandler 12BC            __size_of_USBCheckVendorRequest 0001  
           __end_of_USBCheckVendorRequest 0003                   __size_ofi1_SendCmdReply 0093  
                          __end_of___bmul 1031                     __end_of_USBDeviceInit 0CFC  
                            _InitResultRx 1031                            __end_of___wmul 11AE  
                        ??_InitTempSensor 005E                               _BAUDCONbits 019F  
                          __end_of_memset 1162                         _USBBusIsSuspended 00DB  
                          __end_of_rotate 123F                              _InitWorkTick 1044  
                       __size_ofi1___bmul 0011                       start_initialization 1708  
                       __size_ofi1___wmul 001D                   ?_USBStdGetStatusHandler 0070  
           USBCtrlTrfRxService@byteToRead 00A1              __end_of_USBConfigureEndpoint 08FB  
         __end_of_USBStdFeatureReqHandler 0758         __end_of_USBCtrlEPAllowStatusStage 15B7  
                __end_of_USBCtrlEPService 1708                          SendAsicData@work 00A4  
                __end_of_InitializeSystem 1087                 ??_USBCtrlEPAllowDataStage 00A0  
                          USBDeviceInit@i 00A3                                  ??_Send32 005E  
                          USBDeviceInit@p 00A0                    _pBDTEntryEP0OutCurrent 00E4  
                 USBTransferOnePacket@dir 00A0                   USBTransferOnePacket@len 00A2  
                 ??_USBCBStdSetDscHandler 005E                                  ??___bmul 005F  
                               _ResultPos 0066                                 _ResultQue 01BE  
                                ??___wmul 005E                       _USBStdGetDscHandler 08FB  
                               _ProcessIO 1625                               __pdataBANK1 00EF  
                             __pdataBANK2 0159                               __pdataBANK3 01CA  
                             __pdataBANK6 0340                         __size_of_ResultRx 00B1  
                    __size_of_AsicPreCalc 04CD                                  ??_memset 005E  
                    __size_of_DetectAsics 00B7                              ??_ProcessCmd 00BE  
                   __size_of_SendCmdReply 008C                                  ??_rotate 00A5  
              __size_of_USBCBErrorHandler 0001                     __size_of_SendAsicData 0094  
                       __size_of_UserInit 0013                    _USBActiveConfiguration 00EA  
          __end_of_USBStdGetStatusHandler 13DC                               __pbssBIGRAM 233C  
                       __size_of_WorkTick 003E                             __pcstackBANK0 0050  
                           __pcstackBANK1 00A0                             __pcstackBANK2 0120  
            __size_of_USBCtrlTrfInHandler 0066                                  ?_ISRCode 0070  
                    ?_USBStdGetDscHandler 0070                        i1SendCmdReply@data 0078  
                           _ResultRx$3072 007C                             _ResultRx$3073 007D  
              __end_of_USBWakeFromSuspend 1070                           _USBStallHandler 1162  
                            _pBDTEntryOut 00D3                                  ?_InitFAN 0070  
                            _send32_count 016C                                 __pnvBANK2 016D  
                      __end_of_ProcessCmd 0645                          ___lwdiv@dividend 00A2  
                            _SendCmdReply 0A83                              _SendAsicData 0758  
                    __end_of_USBCBSuspend 101B              __end_of_USBCBWakeFromSuspend 101C  
                                ?___awdiv 00A0                                ?_ProcessIO 0070  
                                ?___lwdiv 00A0                              AsicPreCalc@K 0120  
                            AsicPreCalc@m 012C                              AsicPreCalc@n 0158  
                            AsicPreCalc@x 0154                              AsicPreCalc@y 0150  
                            AsicPreCalc@z 014C                                 __pstrings 0800  
              USBCBSendResume@delay_count 0166                                 __pswtext1 1000  
                    _USBTransferOnePacket 1344                                  _I2CInBuf 00D6  
                            DetectAsics@x 0061                                  _I2CCount 0064  
                                _I2CState 0065                                 _last_bit0 016A  
                               _last_bit1 016B              __end_of_USBCtrlTrfOutHandler 1208  
                   ??_USBStdGetDscHandler 005E                               _ep_data_out 00CF  
                        ___lwdiv@quotient 0060              __size_of_USBCtrlTrfRxService 00B2  
           USBConfigureEndpoint@direction 005E              __size_of_USBCtrlTrfTxService 0084  
                          ___wmul@product 005E                                  _LATAbits 010C  
                                _LATCbits 010E                ??_USBCtrlEPServiceComplete 00A2  
                               clear_ram0 1FC5                                  _PIE2bits 0092  
                   i1___bmul@multiplicand 0070                           SendCmdReply@cmd 00A4  
                                _PIR2bits 0012                                  _INPacket 0220  
               USBCtrlEPService@setup_cnt 00BD                                  _UEP0bits 0E98  
              _USBDeferINDataStagePackets 0068                            i1_SendCmdReply 0B0F  
                           ??_USBCBInitEP 00AA               __size_of_USBCheckStdRequest 0059  
                                _UCONbits 0E8E                      _USBConfigureEndpoint 08B1  
                           ProcessCmd@cmd 00C4          __size_of_USBStdFeatureReqHandler 0113  
                                i1___bmul 1FDE                                _ADCON0bits 009D  
                              _ADCON1bits 009E                                _ADCON2bits 009F  
                       ___wmul@multiplier 00A0                     ?_USBTransferOnePacket 00A0  
                                i1___wmul 1104                                  _BankSize 016D  
                            _RemoteWakeup 00D7                                  _ClockCfg 01D6  
              __end_of_USBCBCheckOtherReq 101F                                  _HashTime 00EF  
                 __end_of_USBStallHandler 1187                          __size_of_ISRCode 000E  
             ??_USBCtrlEPAllowStatusStage 005E               __end_of_USBStdSetCfgHandler 1800  
                            _SlaveAddress 00D8                        __end_of_device_dsc 089F  
                 ?_USBCtrlTrfSetupHandler 0070                          __size_of_InitFAN 0019  
                 USBStdGetStatusHandler@p 005F                    __end_ofi1_SendCmdReply 0BA2  
                  USBTransferOnePacket@ep 00A5                                  _ResultQC 0067  
                                _ResultRx 0CFC                                  _SetupPkt 0040  
                                _SlowTick 00D9                               ??_ProcessIO 00C5  
                   ?_USBConfigureEndpoint 005E                                  _UserInit 07EC  
                        __size_of___awdiv 0058                          __size_of___lwdiv 0045  
                                _WorkTick 123F                        __end_of__stringtab 0801  
                              _ANSELBbits 018D                       __end_of_USBCBInitEP 1104  
                           ?_AsicPushWork 0070                               _send32_data 0168  
                 __size_of_USBDeviceTasks 00EA                           ___lwdiv@divisor 00A0  
                         ___lwdiv@counter 005F                                  __ptext10 0758  
                                __ptext11 0BA2                                  __ptext20 123F  
                                __ptext12 1070                                  __ptext21 0F16  
                                __ptext13 07EC                                _T1GCONbits 0019  
                                __ptext30 08FB                                  __ptext22 1696  
                                __ptext14 1031                                  __ptext31 1783  
                                __ptext23 14E3                                  __ptext15 1044  
                                __ptext40 127D                                  __ptext32 1141  
                                __ptext24 11D7                                  __ptext16 1FEF  
                                __ptext41 10E9                                  __ptext33 09FE  
                                __ptext25 0DAD                                  __ptext17 10B6  
                                __ptext50 101B                                  __ptext42 1344  
                                __ptext34 13DC                                  __ptext26 12BC  
                                __ptext18 0E5F                                  __ptext51 101A  
                                __ptext43 11AE                                  __ptext35 097A  
                                __ptext27 148A                                  __ptext19 1432  
                                __ptext52 0C4E                                  __ptext44 08B1  
                                __ptext36 1549                                  __ptext28 0645  
                                __ptext45 0003                                  __ptext37 1162  
                                __ptext29 138C                                  __ptext54 0CFC  
                                __ptext46 101C                                  __ptext38 109E  
                                __ptext55 0B0F                                  __ptext47 0002  
                                __ptext39 1059                                  __ptext56 1FDE  
                                __ptext48 08B0                                  __ptext57 1104  
                                __ptext49 08AF                      _USBCBWakeFromSuspend 101B  
          __end_of_USBCtrlTrfSetupHandler 12FF                             __size_of_main 0017  
                       ?_USBCtrlEPService 0070                     __size_of_USBCBSuspend 0001  
                       ?_InitializeSystem 0070                        ??_USBCtrlEPService 00BA  
                     _USBGenericOutHandle 00DE                       _USBCtrlTrfInHandler 14E3  
                         ?i1_SendCmdReply 0076                        ??_InitializeSystem 0062  
                                _outPipes 01A0                      _USBCtrlTrfOutHandler 11D7  
               _USBCtrlEPAllowStatusStage 1549            __size_of_USBCBStdSetDscHandler 0001  
           __end_of_USBCBStdSetDscHandler 0004                    ??_USBTransferOnePacket 00A3  
                   _USBCheckVendorRequest 0002                            ??_AsicPushWork 00B9  
               _USBDeferStatusStagePacket 006A                                _INTCONbits 000B  
                      _USBGenericInHandle 00DD                      ?_USBCtrlTrfInHandler 0070  
           USBCtrlTrfTxService@byteToSend 0060                                  memset@p1 005F  
                            _USBCBSuspend 101A                          ?_USBStallHandler 0070  
                USBStdFeatureReqHandler@p 00B7                     ?_USBCBWakeFromSuspend 0070  
                                intlevel1 0000                    __size_of_USBDeviceInit 00AE  
 __end_of_USER_USB_CALLBACK_EVENT_HANDLER 12BC  __size_of_USER_USB_CALLBACK_EVENT_HANDLER 003F  
       ??_USER_USB_CALLBACK_EVENT_HANDLER 0062          ?_USER_USB_CALLBACK_EVENT_HANDLER 00AD  
         _USER_USB_CALLBACK_EVENT_HANDLER 127D                          AsicPreCalc@F3345 01CA  
                                next_word 0BA7                         SendCmdReply@count 00A8  
                           SendCmdReply@n 00B1                             ??_AsicPreCalc 00AF  
                         _ProcessCmd$2049 00C2                             ??_DetectAsics 00A8  
                  ??_USBConfigureEndpoint 00A0                     ?_USBCtrlTrfOutHandler 0070  
                    __CFG_CPUDIV$NOCLKDIV 0000                       _USBCtrlTrfRxService 0DAD  
                             _USBCBInitEP 10E9                        _USBWakeFromSuspend 1059  
                 _USBStdFeatureReqHandler 0645                       _USBCtrlTrfTxService 097A  
                     ?_USBWakeFromSuspend 0070                     ??_USBCtrlTrfInHandler 00A0  
                   _USBAlternateInterface 00EB                               _SSPCON1bits 0215  
                             _SSPCON2bits 0216                       USBEnableEndpoint@ep 00A9  
                             _SSPCON3bits 0217                           _endpoint_number 00E3  
                 __size_of_InitTempSensor 0011                      ?_USBCtrlTrfRxService 0070  
                ?_USBCtrlEPAllowDataStage 0070                      ?_USBCtrlTrfTxService 0070  
            _USBStatusStageTimeoutCounter 00E1                      ??_USBWakeFromSuspend 00B2  
              USBTransferOnePacket@handle 00A6                                _USB_CD_Ptr 0804  
