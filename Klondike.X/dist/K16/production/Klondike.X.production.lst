

Microchip Technology PIC LITE Macro Assembler V1.20 build 52243 
                                                                                               Thu Oct 31 10:20:41 2013

Microchip Technology Omniscient Code Generator (Lite mode) build 52243
     1                           	processor	16LF1459
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK2,global,class=CODE,delta=2
     5                           	psect	idataBANK3,global,class=CODE,delta=2
     6                           	psect	idataBANK6,global,class=CODE,delta=2
     7                           	psect	strings,global,class=STRING,delta=2
     8                           	psect	nvBANK2,global,class=BANK2,space=1,delta=1
     9                           	psect	nvBANK3,global,class=BANK3,space=1,delta=1
    10                           	psect	cinit,global,class=CODE,merge=1,delta=2
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    14                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    15                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    16                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    17                           	psect	bssBANK6,global,class=BANK6,space=1,delta=1
    18                           	psect	dataBANK6,global,class=BANK6,space=1,delta=1
    19                           	psect	clrtext,global,class=CODE,delta=2
    20                           	psect	inittext,global,class=CODE,delta=2
    21                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    22                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    23                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    24                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    25                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    26                           	psect	text1,local,class=CODE,merge=1,delta=2
    27                           	psect	text2,local,class=CODE,merge=1,delta=2
    28                           	psect	text3,local,class=CODE,merge=1,delta=2
    29                           	psect	text4,local,class=CODE,merge=1,delta=2
    30                           	psect	text5,local,class=CODE,merge=1,delta=2
    31                           	psect	text6,local,class=CODE,merge=1,delta=2
    32                           	psect	text7,local,class=CODE,merge=1,delta=2
    33                           	psect	text8,local,class=CODE,merge=1,delta=2
    34                           	psect	text9,local,class=CODE,merge=1,delta=2
    35                           	psect	text10,local,class=CODE,merge=1,delta=2
    36                           	psect	text11,local,class=CODE,merge=1,delta=2
    37                           	psect	text12,local,class=CODE,merge=1,delta=2
    38                           	psect	text13,local,class=CODE,merge=1,delta=2
    39                           	psect	text14,local,class=CODE,merge=1,delta=2
    40                           	psect	text15,local,class=CODE,merge=1,delta=2
    41                           	psect	text16,local,class=CODE,merge=1,delta=2
    42                           	psect	text17,local,class=CODE,merge=1,delta=2
    43                           	psect	text18,local,class=CODE,merge=1,delta=2
    44                           	psect	text19,local,class=CODE,merge=1,delta=2
    45                           	psect	text20,local,class=CODE,merge=1,delta=2
    46                           	psect	text21,local,class=CODE,merge=1,delta=2
    47                           	psect	text22,local,class=CODE,merge=1,delta=2
    48                           	psect	text23,local,class=CODE,merge=1,delta=2
    49                           	psect	text24,local,class=CODE,merge=1,delta=2
    50                           	psect	text25,local,class=CODE,merge=1,delta=2
    51                           	psect	text26,local,class=CODE,merge=1,delta=2
    52                           	psect	text27,local,class=CODE,merge=1,delta=2
    53                           	psect	text28,local,class=CODE,merge=1,delta=2
    54                           	psect	text29,local,class=CODE,merge=1,delta=2
    55                           	psect	text30,local,class=CODE,merge=1,delta=2
    56                           	psect	text31,local,class=CODE,merge=1,delta=2
    57                           	psect	text32,local,class=CODE,merge=1,delta=2
    58                           	psect	text33,local,class=CODE,merge=1,delta=2
    59                           	psect	text34,local,class=CODE,merge=1,delta=2
    60                           	psect	text35,local,class=CODE,merge=1,delta=2
    61                           	psect	swtext1,local,class=CONST,delta=2
    62                           	psect	text36,local,class=CODE,merge=1,delta=2
    63                           	psect	text37,local,class=CODE,merge=1,delta=2
    64                           	psect	text38,local,class=CODE,merge=1,delta=2
    65                           	psect	text39,local,class=CODE,merge=1,delta=2
    66                           	psect	text40,local,class=CODE,merge=1,delta=2
    67                           	psect	text41,local,class=CODE,merge=1,delta=2
    68                           	psect	text42,local,class=CODE,merge=1,delta=2
    69                           	psect	text43,local,class=CODE,merge=1,delta=2
    70                           	psect	text44,local,class=CODE,merge=1,delta=2
    71                           	psect	text45,local,class=CODE,merge=1,delta=2
    72                           	psect	text46,local,class=CODE,merge=1,delta=2
    73                           	psect	text47,local,class=CODE,merge=1,delta=2
    74                           	psect	text48,local,class=CODE,merge=1,delta=2
    75                           	psect	text49,local,class=CODE,merge=1,delta=2
    76                           	psect	text50,local,class=CODE,merge=1,delta=2
    77                           	psect	text51,local,class=CODE,merge=1,delta=2
    78                           	psect	text52,local,class=CODE,merge=1,delta=2
    79                           	psect	text53,local,class=CODE,merge=1,delta=2
    80                           	psect	text54,local,class=CODE,merge=1,delta=2
    81                           	psect	text55,local,class=CODE,merge=1,delta=2
    82                           	psect	text56,local,class=CODE,merge=1,delta=2
    83                           	psect	text57,local,class=CODE,merge=1,delta=2
    84                           	psect	text58,local,class=CODE,merge=1,delta=2
    85                           	psect	text59,local,class=CODE,merge=1,delta=2
    86                           	psect	text60,local,class=CODE,merge=1,delta=2
    87                           	psect	intentry,global,class=CODE,delta=2
    88                           	psect	text62,local,class=CODE,merge=1,delta=2
    89                           	psect	text63,local,class=CODE,merge=1,delta=2
    90                           	psect	text64,local,class=CODE,merge=1,delta=2
    91                           	psect	text65,local,class=CODE,merge=1,delta=2
    92                           	dabs	1,0x620,48
    93                           	dabs	1,0x5A0,80
    94                           	dabs	1,0x53C,52
    95                           	dabs	1,0x20,32,_BDT
    96                           	dabs	1,0x48,8,_CtrlTrfData
    97                           	dabs	1,0x40,8,_SetupPkt
    98                           	dabs	1,0x220,64,_INPacket
    99                           	dabs	1,0x2A0,64,_OUTPacket
   100                           	dabs	1,0x233C,0,_WorkQue
   101                           	dabs	1,0x7E,2
   102  0000                     	;# 
   103  0001                     	;# 
   104  0002                     	;# 
   105  0003                     	;# 
   106  0004                     	;# 
   107  0005                     	;# 
   108  0006                     	;# 
   109  0007                     	;# 
   110  0008                     	;# 
   111  0009                     	;# 
   112  000A                     	;# 
   113  000B                     	;# 
   114  000C                     	;# 
   115  000D                     	;# 
   116  000E                     	;# 
   117  0011                     	;# 
   118  0012                     	;# 
   119  0015                     	;# 
   120  0016                     	;# 
   121  0016                     	;# 
   122  0017                     	;# 
   123  0018                     	;# 
   124  0019                     	;# 
   125  001A                     	;# 
   126  001B                     	;# 
   127  001C                     	;# 
   128  008C                     	;# 
   129  008D                     	;# 
   130  008E                     	;# 
   131  0091                     	;# 
   132  0092                     	;# 
   133  0095                     	;# 
   134  0096                     	;# 
   135  0097                     	;# 
   136  0098                     	;# 
   137  0099                     	;# 
   138  009A                     	;# 
   139  009B                     	;# 
   140  009B                     	;# 
   141  009C                     	;# 
   142  009D                     	;# 
   143  009E                     	;# 
   144  009F                     	;# 
   145  010C                     	;# 
   146  010D                     	;# 
   147  010E                     	;# 
   148  0111                     	;# 
   149  0112                     	;# 
   150  0113                     	;# 
   151  0114                     	;# 
   152  0115                     	;# 
   153  0116                     	;# 
   154  0117                     	;# 
   155  0118                     	;# 
   156  0119                     	;# 
   157  011D                     	;# 
   158  018C                     	;# 
   159  018D                     	;# 
   160  018E                     	;# 
   161  0191                     	;# 
   162  0191                     	;# 
   163  0192                     	;# 
   164  0193                     	;# 
   165  0193                     	;# 
   166  0194                     	;# 
   167  0195                     	;# 
   168  0196                     	;# 
   169  0199                     	;# 
   170  019A                     	;# 
   171  019B                     	;# 
   172  019C                     	;# 
   173  019D                     	;# 
   174  019E                     	;# 
   175  019F                     	;# 
   176  020C                     	;# 
   177  020D                     	;# 
   178  0211                     	;# 
   179  0211                     	;# 
   180  0212                     	;# 
   181  0212                     	;# 
   182  0213                     	;# 
   183  0213                     	;# 
   184  0214                     	;# 
   185  0214                     	;# 
   186  0215                     	;# 
   187  0215                     	;# 
   188  0215                     	;# 
   189  0216                     	;# 
   190  0216                     	;# 
   191  0217                     	;# 
   192  0217                     	;# 
   193  0391                     	;# 
   194  0392                     	;# 
   195  0393                     	;# 
   196  0394                     	;# 
   197  0395                     	;# 
   198  0396                     	;# 
   199  039A                     	;# 
   200  039B                     	;# 
   201  0611                     	;# 
   202  0612                     	;# 
   203  0613                     	;# 
   204  0613                     	;# 
   205  0614                     	;# 
   206  0615                     	;# 
   207  0616                     	;# 
   208  0616                     	;# 
   209  0691                     	;# 
   210  0692                     	;# 
   211  0693                     	;# 
   212  0694                     	;# 
   213  0695                     	;# 
   214  0E8E                     	;# 
   215  0E8F                     	;# 
   216  0E90                     	;# 
   217  0E91                     	;# 
   218  0E92                     	;# 
   219  0E93                     	;# 
   220  0E94                     	;# 
   221  0E94                     	;# 
   222  0E95                     	;# 
   223  0E96                     	;# 
   224  0E97                     	;# 
   225  0E98                     	;# 
   226  0E99                     	;# 
   227  0E9A                     	;# 
   228  0E9B                     	;# 
   229  0E9C                     	;# 
   230  0E9D                     	;# 
   231  0E9E                     	;# 
   232  0E9F                     	;# 
   233  0FE4                     	;# 
   234  0FE5                     	;# 
   235  0FE6                     	;# 
   236  0FE7                     	;# 
   237  0FE8                     	;# 
   238  0FE9                     	;# 
   239  0FEA                     	;# 
   240  0FEB                     	;# 
   241  0FED                     	;# 
   242  0FEE                     	;# 
   243  0FEF                     	;# 
   244  0000                     	;# 
   245  0001                     	;# 
   246  0002                     	;# 
   247  0003                     	;# 
   248  0004                     	;# 
   249  0005                     	;# 
   250  0006                     	;# 
   251  0007                     	;# 
   252  0008                     	;# 
   253  0009                     	;# 
   254  000A                     	;# 
   255  000B                     	;# 
   256  000C                     	;# 
   257  000D                     	;# 
   258  000E                     	;# 
   259  0011                     	;# 
   260  0012                     	;# 
   261  0015                     	;# 
   262  0016                     	;# 
   263  0016                     	;# 
   264  0017                     	;# 
   265  0018                     	;# 
   266  0019                     	;# 
   267  001A                     	;# 
   268  001B                     	;# 
   269  001C                     	;# 
   270  008C                     	;# 
   271  008D                     	;# 
   272  008E                     	;# 
   273  0091                     	;# 
   274  0092                     	;# 
   275  0095                     	;# 
   276  0096                     	;# 
   277  0097                     	;# 
   278  0098                     	;# 
   279  0099                     	;# 
   280  009A                     	;# 
   281  009B                     	;# 
   282  009B                     	;# 
   283  009C                     	;# 
   284  009D                     	;# 
   285  009E                     	;# 
   286  009F                     	;# 
   287  010C                     	;# 
   288  010D                     	;# 
   289  010E                     	;# 
   290  0111                     	;# 
   291  0112                     	;# 
   292  0113                     	;# 
   293  0114                     	;# 
   294  0115                     	;# 
   295  0116                     	;# 
   296  0117                     	;# 
   297  0118                     	;# 
   298  0119                     	;# 
   299  011D                     	;# 
   300  018C                     	;# 
   301  018D                     	;# 
   302  018E                     	;# 
   303  0191                     	;# 
   304  0191                     	;# 
   305  0192                     	;# 
   306  0193                     	;# 
   307  0193                     	;# 
   308  0194                     	;# 
   309  0195                     	;# 
   310  0196                     	;# 
   311  0199                     	;# 
   312  019A                     	;# 
   313  019B                     	;# 
   314  019C                     	;# 
   315  019D                     	;# 
   316  019E                     	;# 
   317  019F                     	;# 
   318  020C                     	;# 
   319  020D                     	;# 
   320  0211                     	;# 
   321  0211                     	;# 
   322  0212                     	;# 
   323  0212                     	;# 
   324  0213                     	;# 
   325  0213                     	;# 
   326  0214                     	;# 
   327  0214                     	;# 
   328  0215                     	;# 
   329  0215                     	;# 
   330  0215                     	;# 
   331  0216                     	;# 
   332  0216                     	;# 
   333  0217                     	;# 
   334  0217                     	;# 
   335  0391                     	;# 
   336  0392                     	;# 
   337  0393                     	;# 
   338  0394                     	;# 
   339  0395                     	;# 
   340  0396                     	;# 
   341  039A                     	;# 
   342  039B                     	;# 
   343  0611                     	;# 
   344  0612                     	;# 
   345  0613                     	;# 
   346  0613                     	;# 
   347  0614                     	;# 
   348  0615                     	;# 
   349  0616                     	;# 
   350  0616                     	;# 
   351  0691                     	;# 
   352  0692                     	;# 
   353  0693                     	;# 
   354  0694                     	;# 
   355  0695                     	;# 
   356  0E8E                     	;# 
   357  0E8F                     	;# 
   358  0E90                     	;# 
   359  0E91                     	;# 
   360  0E92                     	;# 
   361  0E93                     	;# 
   362  0E94                     	;# 
   363  0E94                     	;# 
   364  0E95                     	;# 
   365  0E96                     	;# 
   366  0E97                     	;# 
   367  0E98                     	;# 
   368  0E99                     	;# 
   369  0E9A                     	;# 
   370  0E9B                     	;# 
   371  0E9C                     	;# 
   372  0E9D                     	;# 
   373  0E9E                     	;# 
   374  0E9F                     	;# 
   375  0FE4                     	;# 
   376  0FE5                     	;# 
   377  0FE6                     	;# 
   378  0FE7                     	;# 
   379  0FE8                     	;# 
   380  0FE9                     	;# 
   381  0FEA                     	;# 
   382  0FEB                     	;# 
   383  0FED                     	;# 
   384  0FEE                     	;# 
   385  0FEF                     	;# 
   386  0000                     	;# 
   387  0001                     	;# 
   388  0002                     	;# 
   389  0003                     	;# 
   390  0004                     	;# 
   391  0005                     	;# 
   392  0006                     	;# 
   393  0007                     	;# 
   394  0008                     	;# 
   395  0009                     	;# 
   396  000A                     	;# 
   397  000B                     	;# 
   398  000C                     	;# 
   399  000D                     	;# 
   400  000E                     	;# 
   401  0011                     	;# 
   402  0012                     	;# 
   403  0015                     	;# 
   404  0016                     	;# 
   405  0016                     	;# 
   406  0017                     	;# 
   407  0018                     	;# 
   408  0019                     	;# 
   409  001A                     	;# 
   410  001B                     	;# 
   411  001C                     	;# 
   412  008C                     	;# 
   413  008D                     	;# 
   414  008E                     	;# 
   415  0091                     	;# 
   416  0092                     	;# 
   417  0095                     	;# 
   418  0096                     	;# 
   419  0097                     	;# 
   420  0098                     	;# 
   421  0099                     	;# 
   422  009A                     	;# 
   423  009B                     	;# 
   424  009B                     	;# 
   425  009C                     	;# 
   426  009D                     	;# 
   427  009E                     	;# 
   428  009F                     	;# 
   429  010C                     	;# 
   430  010D                     	;# 
   431  010E                     	;# 
   432  0111                     	;# 
   433  0112                     	;# 
   434  0113                     	;# 
   435  0114                     	;# 
   436  0115                     	;# 
   437  0116                     	;# 
   438  0117                     	;# 
   439  0118                     	;# 
   440  0119                     	;# 
   441  011D                     	;# 
   442  018C                     	;# 
   443  018D                     	;# 
   444  018E                     	;# 
   445  0191                     	;# 
   446  0191                     	;# 
   447  0192                     	;# 
   448  0193                     	;# 
   449  0193                     	;# 
   450  0194                     	;# 
   451  0195                     	;# 
   452  0196                     	;# 
   453  0199                     	;# 
   454  019A                     	;# 
   455  019B                     	;# 
   456  019C                     	;# 
   457  019D                     	;# 
   458  019E                     	;# 
   459  019F                     	;# 
   460  020C                     	;# 
   461  020D                     	;# 
   462  0211                     	;# 
   463  0211                     	;# 
   464  0212                     	;# 
   465  0212                     	;# 
   466  0213                     	;# 
   467  0213                     	;# 
   468  0214                     	;# 
   469  0214                     	;# 
   470  0215                     	;# 
   471  0215                     	;# 
   472  0215                     	;# 
   473  0216                     	;# 
   474  0216                     	;# 
   475  0217                     	;# 
   476  0217                     	;# 
   477  0391                     	;# 
   478  0392                     	;# 
   479  0393                     	;# 
   480  0394                     	;# 
   481  0395                     	;# 
   482  0396                     	;# 
   483  039A                     	;# 
   484  039B                     	;# 
   485  0611                     	;# 
   486  0612                     	;# 
   487  0613                     	;# 
   488  0613                     	;# 
   489  0614                     	;# 
   490  0615                     	;# 
   491  0616                     	;# 
   492  0616                     	;# 
   493  0691                     	;# 
   494  0692                     	;# 
   495  0693                     	;# 
   496  0694                     	;# 
   497  0695                     	;# 
   498  0E8E                     	;# 
   499  0E8F                     	;# 
   500  0E90                     	;# 
   501  0E91                     	;# 
   502  0E92                     	;# 
   503  0E93                     	;# 
   504  0E94                     	;# 
   505  0E94                     	;# 
   506  0E95                     	;# 
   507  0E96                     	;# 
   508  0E97                     	;# 
   509  0E98                     	;# 
   510  0E99                     	;# 
   511  0E9A                     	;# 
   512  0E9B                     	;# 
   513  0E9C                     	;# 
   514  0E9D                     	;# 
   515  0E9E                     	;# 
   516  0E9F                     	;# 
   517  0FE4                     	;# 
   518  0FE5                     	;# 
   519  0FE6                     	;# 
   520  0FE7                     	;# 
   521  0FE8                     	;# 
   522  0FE9                     	;# 
   523  0FEA                     	;# 
   524  0FEB                     	;# 
   525  0FED                     	;# 
   526  0FEE                     	;# 
   527  0FEF                     	;# 
   528  0000                     	;# 
   529  0001                     	;# 
   530  0002                     	;# 
   531  0003                     	;# 
   532  0004                     	;# 
   533  0005                     	;# 
   534  0006                     	;# 
   535  0007                     	;# 
   536  0008                     	;# 
   537  0009                     	;# 
   538  000A                     	;# 
   539  000B                     	;# 
   540  000C                     	;# 
   541  000D                     	;# 
   542  000E                     	;# 
   543  0011                     	;# 
   544  0012                     	;# 
   545  0015                     	;# 
   546  0016                     	;# 
   547  0016                     	;# 
   548  0017                     	;# 
   549  0018                     	;# 
   550  0019                     	;# 
   551  001A                     	;# 
   552  001B                     	;# 
   553  001C                     	;# 
   554  008C                     	;# 
   555  008D                     	;# 
   556  008E                     	;# 
   557  0091                     	;# 
   558  0092                     	;# 
   559  0095                     	;# 
   560  0096                     	;# 
   561  0097                     	;# 
   562  0098                     	;# 
   563  0099                     	;# 
   564  009A                     	;# 
   565  009B                     	;# 
   566  009B                     	;# 
   567  009C                     	;# 
   568  009D                     	;# 
   569  009E                     	;# 
   570  009F                     	;# 
   571  010C                     	;# 
   572  010D                     	;# 
   573  010E                     	;# 
   574  0111                     	;# 
   575  0112                     	;# 
   576  0113                     	;# 
   577  0114                     	;# 
   578  0115                     	;# 
   579  0116                     	;# 
   580  0117                     	;# 
   581  0118                     	;# 
   582  0119                     	;# 
   583  011D                     	;# 
   584  018C                     	;# 
   585  018D                     	;# 
   586  018E                     	;# 
   587  0191                     	;# 
   588  0191                     	;# 
   589  0192                     	;# 
   590  0193                     	;# 
   591  0193                     	;# 
   592  0194                     	;# 
   593  0195                     	;# 
   594  0196                     	;# 
   595  0199                     	;# 
   596  019A                     	;# 
   597  019B                     	;# 
   598  019C                     	;# 
   599  019D                     	;# 
   600  019E                     	;# 
   601  019F                     	;# 
   602  020C                     	;# 
   603  020D                     	;# 
   604  0211                     	;# 
   605  0211                     	;# 
   606  0212                     	;# 
   607  0212                     	;# 
   608  0213                     	;# 
   609  0213                     	;# 
   610  0214                     	;# 
   611  0214                     	;# 
   612  0215                     	;# 
   613  0215                     	;# 
   614  0215                     	;# 
   615  0216                     	;# 
   616  0216                     	;# 
   617  0217                     	;# 
   618  0217                     	;# 
   619  0391                     	;# 
   620  0392                     	;# 
   621  0393                     	;# 
   622  0394                     	;# 
   623  0395                     	;# 
   624  0396                     	;# 
   625  039A                     	;# 
   626  039B                     	;# 
   627  0611                     	;# 
   628  0612                     	;# 
   629  0613                     	;# 
   630  0613                     	;# 
   631  0614                     	;# 
   632  0615                     	;# 
   633  0616                     	;# 
   634  0616                     	;# 
   635  0691                     	;# 
   636  0692                     	;# 
   637  0693                     	;# 
   638  0694                     	;# 
   639  0695                     	;# 
   640  0E8E                     	;# 
   641  0E8F                     	;# 
   642  0E90                     	;# 
   643  0E91                     	;# 
   644  0E92                     	;# 
   645  0E93                     	;# 
   646  0E94                     	;# 
   647  0E94                     	;# 
   648  0E95                     	;# 
   649  0E96                     	;# 
   650  0E97                     	;# 
   651  0E98                     	;# 
   652  0E99                     	;# 
   653  0E9A                     	;# 
   654  0E9B                     	;# 
   655  0E9C                     	;# 
   656  0E9D                     	;# 
   657  0E9E                     	;# 
   658  0E9F                     	;# 
   659  0FE4                     	;# 
   660  0FE5                     	;# 
   661  0FE6                     	;# 
   662  0FE7                     	;# 
   663  0FE8                     	;# 
   664  0FE9                     	;# 
   665  0FEA                     	;# 
   666  0FEB                     	;# 
   667  0FED                     	;# 
   668  0FEE                     	;# 
   669  0FEF                     	;# 
   670  0000                     	;# 
   671  0001                     	;# 
   672  0002                     	;# 
   673  0003                     	;# 
   674  0004                     	;# 
   675  0005                     	;# 
   676  0006                     	;# 
   677  0007                     	;# 
   678  0008                     	;# 
   679  0009                     	;# 
   680  000A                     	;# 
   681  000B                     	;# 
   682  000C                     	;# 
   683  000D                     	;# 
   684  000E                     	;# 
   685  0011                     	;# 
   686  0012                     	;# 
   687  0015                     	;# 
   688  0016                     	;# 
   689  0016                     	;# 
   690  0017                     	;# 
   691  0018                     	;# 
   692  0019                     	;# 
   693  001A                     	;# 
   694  001B                     	;# 
   695  001C                     	;# 
   696  008C                     	;# 
   697  008D                     	;# 
   698  008E                     	;# 
   699  0091                     	;# 
   700  0092                     	;# 
   701  0095                     	;# 
   702  0096                     	;# 
   703  0097                     	;# 
   704  0098                     	;# 
   705  0099                     	;# 
   706  009A                     	;# 
   707  009B                     	;# 
   708  009B                     	;# 
   709  009C                     	;# 
   710  009D                     	;# 
   711  009E                     	;# 
   712  009F                     	;# 
   713  010C                     	;# 
   714  010D                     	;# 
   715  010E                     	;# 
   716  0111                     	;# 
   717  0112                     	;# 
   718  0113                     	;# 
   719  0114                     	;# 
   720  0115                     	;# 
   721  0116                     	;# 
   722  0117                     	;# 
   723  0118                     	;# 
   724  0119                     	;# 
   725  011D                     	;# 
   726  018C                     	;# 
   727  018D                     	;# 
   728  018E                     	;# 
   729  0191                     	;# 
   730  0191                     	;# 
   731  0192                     	;# 
   732  0193                     	;# 
   733  0193                     	;# 
   734  0194                     	;# 
   735  0195                     	;# 
   736  0196                     	;# 
   737  0199                     	;# 
   738  019A                     	;# 
   739  019B                     	;# 
   740  019C                     	;# 
   741  019D                     	;# 
   742  019E                     	;# 
   743  019F                     	;# 
   744  020C                     	;# 
   745  020D                     	;# 
   746  0211                     	;# 
   747  0211                     	;# 
   748  0212                     	;# 
   749  0212                     	;# 
   750  0213                     	;# 
   751  0213                     	;# 
   752  0214                     	;# 
   753  0214                     	;# 
   754  0215                     	;# 
   755  0215                     	;# 
   756  0215                     	;# 
   757  0216                     	;# 
   758  0216                     	;# 
   759  0217                     	;# 
   760  0217                     	;# 
   761  0391                     	;# 
   762  0392                     	;# 
   763  0393                     	;# 
   764  0394                     	;# 
   765  0395                     	;# 
   766  0396                     	;# 
   767  039A                     	;# 
   768  039B                     	;# 
   769  0611                     	;# 
   770  0612                     	;# 
   771  0613                     	;# 
   772  0613                     	;# 
   773  0614                     	;# 
   774  0615                     	;# 
   775  0616                     	;# 
   776  0616                     	;# 
   777  0691                     	;# 
   778  0692                     	;# 
   779  0693                     	;# 
   780  0694                     	;# 
   781  0695                     	;# 
   782  0E8E                     	;# 
   783  0E8F                     	;# 
   784  0E90                     	;# 
   785  0E91                     	;# 
   786  0E92                     	;# 
   787  0E93                     	;# 
   788  0E94                     	;# 
   789  0E94                     	;# 
   790  0E95                     	;# 
   791  0E96                     	;# 
   792  0E97                     	;# 
   793  0E98                     	;# 
   794  0E99                     	;# 
   795  0E9A                     	;# 
   796  0E9B                     	;# 
   797  0E9C                     	;# 
   798  0E9D                     	;# 
   799  0E9E                     	;# 
   800  0E9F                     	;# 
   801  0FE4                     	;# 
   802  0FE5                     	;# 
   803  0FE6                     	;# 
   804  0FE7                     	;# 
   805  0FE8                     	;# 
   806  0FE9                     	;# 
   807  0FEA                     	;# 
   808  0FEB                     	;# 
   809  0FED                     	;# 
   810  0FEE                     	;# 
   811  0FEF                     	;# 
   812  0000                     	;# 
   813  0001                     	;# 
   814  0002                     	;# 
   815  0003                     	;# 
   816  0004                     	;# 
   817  0005                     	;# 
   818  0006                     	;# 
   819  0007                     	;# 
   820  0008                     	;# 
   821  0009                     	;# 
   822  000A                     	;# 
   823  000B                     	;# 
   824  000C                     	;# 
   825  000D                     	;# 
   826  000E                     	;# 
   827  0011                     	;# 
   828  0012                     	;# 
   829  0015                     	;# 
   830  0016                     	;# 
   831  0016                     	;# 
   832  0017                     	;# 
   833  0018                     	;# 
   834  0019                     	;# 
   835  001A                     	;# 
   836  001B                     	;# 
   837  001C                     	;# 
   838  008C                     	;# 
   839  008D                     	;# 
   840  008E                     	;# 
   841  0091                     	;# 
   842  0092                     	;# 
   843  0095                     	;# 
   844  0096                     	;# 
   845  0097                     	;# 
   846  0098                     	;# 
   847  0099                     	;# 
   848  009A                     	;# 
   849  009B                     	;# 
   850  009B                     	;# 
   851  009C                     	;# 
   852  009D                     	;# 
   853  009E                     	;# 
   854  009F                     	;# 
   855  010C                     	;# 
   856  010D                     	;# 
   857  010E                     	;# 
   858  0111                     	;# 
   859  0112                     	;# 
   860  0113                     	;# 
   861  0114                     	;# 
   862  0115                     	;# 
   863  0116                     	;# 
   864  0117                     	;# 
   865  0118                     	;# 
   866  0119                     	;# 
   867  011D                     	;# 
   868  018C                     	;# 
   869  018D                     	;# 
   870  018E                     	;# 
   871  0191                     	;# 
   872  0191                     	;# 
   873  0192                     	;# 
   874  0193                     	;# 
   875  0193                     	;# 
   876  0194                     	;# 
   877  0195                     	;# 
   878  0196                     	;# 
   879  0199                     	;# 
   880  019A                     	;# 
   881  019B                     	;# 
   882  019C                     	;# 
   883  019D                     	;# 
   884  019E                     	;# 
   885  019F                     	;# 
   886  020C                     	;# 
   887  020D                     	;# 
   888  0211                     	;# 
   889  0211                     	;# 
   890  0212                     	;# 
   891  0212                     	;# 
   892  0213                     	;# 
   893  0213                     	;# 
   894  0214                     	;# 
   895  0214                     	;# 
   896  0215                     	;# 
   897  0215                     	;# 
   898  0215                     	;# 
   899  0216                     	;# 
   900  0216                     	;# 
   901  0217                     	;# 
   902  0217                     	;# 
   903  0391                     	;# 
   904  0392                     	;# 
   905  0393                     	;# 
   906  0394                     	;# 
   907  0395                     	;# 
   908  0396                     	;# 
   909  039A                     	;# 
   910  039B                     	;# 
   911  0611                     	;# 
   912  0612                     	;# 
   913  0613                     	;# 
   914  0613                     	;# 
   915  0614                     	;# 
   916  0615                     	;# 
   917  0616                     	;# 
   918  0616                     	;# 
   919  0691                     	;# 
   920  0692                     	;# 
   921  0693                     	;# 
   922  0694                     	;# 
   923  0695                     	;# 
   924  0E8E                     	;# 
   925  0E8F                     	;# 
   926  0E90                     	;# 
   927  0E91                     	;# 
   928  0E92                     	;# 
   929  0E93                     	;# 
   930  0E94                     	;# 
   931  0E94                     	;# 
   932  0E95                     	;# 
   933  0E96                     	;# 
   934  0E97                     	;# 
   935  0E98                     	;# 
   936  0E99                     	;# 
   937  0E9A                     	;# 
   938  0E9B                     	;# 
   939  0E9C                     	;# 
   940  0E9D                     	;# 
   941  0E9E                     	;# 
   942  0E9F                     	;# 
   943  0FE4                     	;# 
   944  0FE5                     	;# 
   945  0FE6                     	;# 
   946  0FE7                     	;# 
   947  0FE8                     	;# 
   948  0FE9                     	;# 
   949  0FEA                     	;# 
   950  0FEB                     	;# 
   951  0FED                     	;# 
   952  0FEE                     	;# 
   953  0FEF                     	;# 
   954  0000                     	;# 
   955  0001                     	;# 
   956  0002                     	;# 
   957  0003                     	;# 
   958  0004                     	;# 
   959  0005                     	;# 
   960  0006                     	;# 
   961  0007                     	;# 
   962  0008                     	;# 
   963  0009                     	;# 
   964  000A                     	;# 
   965  000B                     	;# 
   966  000C                     	;# 
   967  000D                     	;# 
   968  000E                     	;# 
   969  0011                     	;# 
   970  0012                     	;# 
   971  0015                     	;# 
   972  0016                     	;# 
   973  0016                     	;# 
   974  0017                     	;# 
   975  0018                     	;# 
   976  0019                     	;# 
   977  001A                     	;# 
   978  001B                     	;# 
   979  001C                     	;# 
   980  008C                     	;# 
   981  008D                     	;# 
   982  008E                     	;# 
   983  0091                     	;# 
   984  0092                     	;# 
   985  0095                     	;# 
   986  0096                     	;# 
   987  0097                     	;# 
   988  0098                     	;# 
   989  0099                     	;# 
   990  009A                     	;# 
   991  009B                     	;# 
   992  009B                     	;# 
   993  009C                     	;# 
   994  009D                     	;# 
   995  009E                     	;# 
   996  009F                     	;# 
   997  010C                     	;# 
   998  010D                     	;# 
   999  010E                     	;# 
  1000  0111                     	;# 
  1001  0112                     	;# 
  1002  0113                     	;# 
  1003  0114                     	;# 
  1004  0115                     	;# 
  1005  0116                     	;# 
  1006  0117                     	;# 
  1007  0118                     	;# 
  1008  0119                     	;# 
  1009  011D                     	;# 
  1010  018C                     	;# 
  1011  018D                     	;# 
  1012  018E                     	;# 
  1013  0191                     	;# 
  1014  0191                     	;# 
  1015  0192                     	;# 
  1016  0193                     	;# 
  1017  0193                     	;# 
  1018  0194                     	;# 
  1019  0195                     	;# 
  1020  0196                     	;# 
  1021  0199                     	;# 
  1022  019A                     	;# 
  1023  019B                     	;# 
  1024  019C                     	;# 
  1025  019D                     	;# 
  1026  019E                     	;# 
  1027  019F                     	;# 
  1028  020C                     	;# 
  1029  020D                     	;# 
  1030  0211                     	;# 
  1031  0211                     	;# 
  1032  0212                     	;# 
  1033  0212                     	;# 
  1034  0213                     	;# 
  1035  0213                     	;# 
  1036  0214                     	;# 
  1037  0214                     	;# 
  1038  0215                     	;# 
  1039  0215                     	;# 
  1040  0215                     	;# 
  1041  0216                     	;# 
  1042  0216                     	;# 
  1043  0217                     	;# 
  1044  0217                     	;# 
  1045  0391                     	;# 
  1046  0392                     	;# 
  1047  0393                     	;# 
  1048  0394                     	;# 
  1049  0395                     	;# 
  1050  0396                     	;# 
  1051  039A                     	;# 
  1052  039B                     	;# 
  1053  0611                     	;# 
  1054  0612                     	;# 
  1055  0613                     	;# 
  1056  0613                     	;# 
  1057  0614                     	;# 
  1058  0615                     	;# 
  1059  0616                     	;# 
  1060  0616                     	;# 
  1061  0691                     	;# 
  1062  0692                     	;# 
  1063  0693                     	;# 
  1064  0694                     	;# 
  1065  0695                     	;# 
  1066  0E8E                     	;# 
  1067  0E8F                     	;# 
  1068  0E90                     	;# 
  1069  0E91                     	;# 
  1070  0E92                     	;# 
  1071  0E93                     	;# 
  1072  0E94                     	;# 
  1073  0E94                     	;# 
  1074  0E95                     	;# 
  1075  0E96                     	;# 
  1076  0E97                     	;# 
  1077  0E98                     	;# 
  1078  0E99                     	;# 
  1079  0E9A                     	;# 
  1080  0E9B                     	;# 
  1081  0E9C                     	;# 
  1082  0E9D                     	;# 
  1083  0E9E                     	;# 
  1084  0E9F                     	;# 
  1085  0FE4                     	;# 
  1086  0FE5                     	;# 
  1087  0FE6                     	;# 
  1088  0FE7                     	;# 
  1089  0FE8                     	;# 
  1090  0FE9                     	;# 
  1091  0FEA                     	;# 
  1092  0FEB                     	;# 
  1093  0FED                     	;# 
  1094  0FEE                     	;# 
  1095  0FEF                     	;# 
  1096  0000                     	;# 
  1097  0001                     	;# 
  1098  0002                     	;# 
  1099  0003                     	;# 
  1100  0004                     	;# 
  1101  0005                     	;# 
  1102  0006                     	;# 
  1103  0007                     	;# 
  1104  0008                     	;# 
  1105  0009                     	;# 
  1106  000A                     	;# 
  1107  000B                     	;# 
  1108  000C                     	;# 
  1109  000D                     	;# 
  1110  000E                     	;# 
  1111  0011                     	;# 
  1112  0012                     	;# 
  1113  0015                     	;# 
  1114  0016                     	;# 
  1115  0016                     	;# 
  1116  0017                     	;# 
  1117  0018                     	;# 
  1118  0019                     	;# 
  1119  001A                     	;# 
  1120  001B                     	;# 
  1121  001C                     	;# 
  1122  008C                     	;# 
  1123  008D                     	;# 
  1124  008E                     	;# 
  1125  0091                     	;# 
  1126  0092                     	;# 
  1127  0095                     	;# 
  1128  0096                     	;# 
  1129  0097                     	;# 
  1130  0098                     	;# 
  1131  0099                     	;# 
  1132  009A                     	;# 
  1133  009B                     	;# 
  1134  009B                     	;# 
  1135  009C                     	;# 
  1136  009D                     	;# 
  1137  009E                     	;# 
  1138  009F                     	;# 
  1139  010C                     	;# 
  1140  010D                     	;# 
  1141  010E                     	;# 
  1142  0111                     	;# 
  1143  0112                     	;# 
  1144  0113                     	;# 
  1145  0114                     	;# 
  1146  0115                     	;# 
  1147  0116                     	;# 
  1148  0117                     	;# 
  1149  0118                     	;# 
  1150  0119                     	;# 
  1151  011D                     	;# 
  1152  018C                     	;# 
  1153  018D                     	;# 
  1154  018E                     	;# 
  1155  0191                     	;# 
  1156  0191                     	;# 
  1157  0192                     	;# 
  1158  0193                     	;# 
  1159  0193                     	;# 
  1160  0194                     	;# 
  1161  0195                     	;# 
  1162  0196                     	;# 
  1163  0199                     	;# 
  1164  019A                     	;# 
  1165  019B                     	;# 
  1166  019C                     	;# 
  1167  019D                     	;# 
  1168  019E                     	;# 
  1169  019F                     	;# 
  1170  020C                     	;# 
  1171  020D                     	;# 
  1172  0211                     	;# 
  1173  0211                     	;# 
  1174  0212                     	;# 
  1175  0212                     	;# 
  1176  0213                     	;# 
  1177  0213                     	;# 
  1178  0214                     	;# 
  1179  0214                     	;# 
  1180  0215                     	;# 
  1181  0215                     	;# 
  1182  0215                     	;# 
  1183  0216                     	;# 
  1184  0216                     	;# 
  1185  0217                     	;# 
  1186  0217                     	;# 
  1187  0391                     	;# 
  1188  0392                     	;# 
  1189  0393                     	;# 
  1190  0394                     	;# 
  1191  0395                     	;# 
  1192  0396                     	;# 
  1193  039A                     	;# 
  1194  039B                     	;# 
  1195  0611                     	;# 
  1196  0612                     	;# 
  1197  0613                     	;# 
  1198  0613                     	;# 
  1199  0614                     	;# 
  1200  0615                     	;# 
  1201  0616                     	;# 
  1202  0616                     	;# 
  1203  0691                     	;# 
  1204  0692                     	;# 
  1205  0693                     	;# 
  1206  0694                     	;# 
  1207  0695                     	;# 
  1208  0E8E                     	;# 
  1209  0E8F                     	;# 
  1210  0E90                     	;# 
  1211  0E91                     	;# 
  1212  0E92                     	;# 
  1213  0E93                     	;# 
  1214  0E94                     	;# 
  1215  0E94                     	;# 
  1216  0E95                     	;# 
  1217  0E96                     	;# 
  1218  0E97                     	;# 
  1219  0E98                     	;# 
  1220  0E99                     	;# 
  1221  0E9A                     	;# 
  1222  0E9B                     	;# 
  1223  0E9C                     	;# 
  1224  0E9D                     	;# 
  1225  0E9E                     	;# 
  1226  0E9F                     	;# 
  1227  0FE4                     	;# 
  1228  0FE5                     	;# 
  1229  0FE6                     	;# 
  1230  0FE7                     	;# 
  1231  0FE8                     	;# 
  1232  0FE9                     	;# 
  1233  0FEA                     	;# 
  1234  0FEB                     	;# 
  1235  0FED                     	;# 
  1236  0FEE                     	;# 
  1237  0FEF                     	;_WorkQue
  1238                           
  1239                           	psect	idataBANK2
  1240  1C42                     __pidataBANK2:	
  1241                           
  1242                           ;initializer for _HashTime
  1243  1C42  34DC               	retlw	220
  1244                           
  1245                           ;initializer for _Status
  1246  1C43  3449               	retlw	73
  1247  1C44  3400               	retlw	0
  1248  1C45  3400               	retlw	0
  1249  1C46  3400               	retlw	0
  1250  1C47  3400               	retlw	0
  1251  1C48  3400               	retlw	0
  1252  1C49  3400               	retlw	0
  1253  1C4A  3400               	retlw	0
  1254  1C4B  3400               	retlw	0
  1255  1C4C  3400               	retlw	0
  1256  1C4D  3400               	retlw	0
  1257  1C4E  3440               	retlw	64
  1258  1C4F  3400               	retlw	0
  1259                           
  1260                           	psect	idataBANK3
  1261  1CE3                     __pidataBANK3:	
  1262                           
  1263                           ;initializer for AsicPreCalc@F3347
  1264  1CE3  3498               	retlw	152
  1265  1CE4  342F               	retlw	47
  1266  1CE5  348A               	retlw	138
  1267  1CE6  3442               	retlw	66
  1268  1CE7  3491               	retlw	145
  1269  1CE8  3444               	retlw	68
  1270  1CE9  3437               	retlw	55
  1271  1CEA  3471               	retlw	113
  1272  1CEB  34CF               	retlw	207
  1273  1CEC  34FB               	retlw	251
  1274  1CED  34C0               	retlw	192
  1275  1CEE  34B5               	retlw	181
  1276                           
  1277                           ;initializer for _ClockCfg
  1278  1CEF  3407               	retlw	7
  1279  1CF0  3400               	retlw	0
  1280  1CF1  3437               	retlw	55
  1281  1CF2  3405               	retlw	5
  1282  1CF3  3472               	retlw	114
  1283  1CF4  3401               	retlw	1
  1284  1CF5  3400               	retlw	0
  1285  1CF6  3400               	retlw	0
  1286                           
  1287                           ;initializer for _Cfg
  1288  1CF7  344D               	retlw	77
  1289  1CF8  3401               	retlw	1
  1290  1CF9  348F               	retlw	143
  1291  1CFA  3400               	retlw	0
  1292  1CFB  3400               	retlw	0
  1293  1CFC  3400               	retlw	0
  1294                           
  1295                           	psect	idataBANK6
  1296  1DC7                     __pidataBANK6:	
  1297                           
  1298                           ;initializer for _BankRanges
  1299  1DC7  3400               	retlw	0
  1300  1DC8  3400               	retlw	0
  1301  1DC9  3400               	retlw	0
  1302  1DCA  3400               	retlw	0
  1303  1DCB  3400               	retlw	0
  1304  1DCC  3400               	retlw	0
  1305  1DCD  3400               	retlw	0
  1306  1DCE  3440               	retlw	64
  1307  1DCF  34AA               	retlw	170
  1308  1DD0  34AA               	retlw	170
  1309  1DD1  34AA               	retlw	170
  1310  1DD2  342A               	retlw	42
  1311  1DD3  3400               	retlw	0
  1312  1DD4  3400               	retlw	0
  1313  1DD5  3400               	retlw	0
  1314  1DD6  3420               	retlw	32
  1315  1DD7  3499               	retlw	153
  1316  1DD8  3499               	retlw	153
  1317  1DD9  3499               	retlw	153
  1318  1DDA  3419               	retlw	25
  1319  1DDB  3455               	retlw	85
  1320  1DDC  3455               	retlw	85
  1321  1DDD  3455               	retlw	85
  1322  1DDE  3415               	retlw	21
  1323  1DDF  3492               	retlw	146
  1324  1DE0  3424               	retlw	36
  1325  1DE1  3449               	retlw	73
  1326  1DE2  3412               	retlw	18
  1327  1DE3  3400               	retlw	0
  1328  1DE4  3400               	retlw	0
  1329  1DE5  3400               	retlw	0
  1330  1DE6  3410               	retlw	16
  1331                           
  1332                           	psect	strings
  1333  0800                     __pstrings:	
  1334  0800                     __stringtab:	
  1335  0800  3400               	retlw	0
  1336  0801                     __end_of__stringtab:	
  1337  0801                     _USB_SD_Ptr:	
  1338  0801  34AB               	retlw	(_sd000| (0+32768))& (0+255)
  1339  0802  3405               	retlw	(_sd001| (0+32768))& (0+255)
  1340  0803  3439               	retlw	(_sd002| (0+32768))& (0+255)
  1341  0804                     __end_of_USB_SD_Ptr:	
  1342  0804                     _USB_CD_Ptr:	
  1343  0804  346D               	retlw	(_configDescriptor1| (0+32768))& (0+255)
  1344  0805                     __end_of_USB_CD_Ptr:	
  1345  0805                     _sd001:	
  1346  0805  3434               	retlw	52
  1347  0806  3403               	retlw	3
  1348  0807  344B               	retlw	75
  1349  0808  3400               	retlw	0
  1350  0809  346C               	retlw	108
  1351  080A  3400               	retlw	0
  1352  080B  346F               	retlw	111
  1353  080C  3400               	retlw	0
  1354  080D  346E               	retlw	110
  1355  080E  3400               	retlw	0
  1356  080F  3464               	retlw	100
  1357  0810  3400               	retlw	0
  1358  0811  3469               	retlw	105
  1359  0812  3400               	retlw	0
  1360  0813  346B               	retlw	107
  1361  0814  3400               	retlw	0
  1362  0815  3465               	retlw	101
  1363  0816  3400               	retlw	0
  1364  0817  3420               	retlw	32
  1365  0818  3400               	retlw	0
  1366  0819  3450               	retlw	80
  1367  081A  3400               	retlw	0
  1368  081B  3472               	retlw	114
  1369  081C  3400               	retlw	0
  1370  081D  346F               	retlw	111
  1371  081E  3400               	retlw	0
  1372  081F  346A               	retlw	106
  1373  0820  3400               	retlw	0
  1374  0821  3465               	retlw	101
  1375  0822  3400               	retlw	0
  1376  0823  3463               	retlw	99
  1377  0824  3400               	retlw	0
  1378  0825  3474               	retlw	116
  1379  0826  3400               	retlw	0
  1380  0827  3400               	retlw	0
  1381  0828  3400               	retlw	0
  1382  0829  3400               	retlw	0
  1383  082A  3400               	retlw	0
  1384  082B  3400               	retlw	0
  1385  082C  3400               	retlw	0
  1386  082D  3400               	retlw	0
  1387  082E  3400               	retlw	0
  1388  082F  3400               	retlw	0
  1389  0830  3400               	retlw	0
  1390  0831  3400               	retlw	0
  1391  0832  3400               	retlw	0
  1392  0833  3400               	retlw	0
  1393  0834  3400               	retlw	0
  1394  0835  3400               	retlw	0
  1395  0836  3400               	retlw	0
  1396  0837  3400               	retlw	0
  1397  0838  3400               	retlw	0
  1398  0839                     __end_of_sd001:	
  1399  0839                     _sd002:	
  1400  0839  3434               	retlw	52
  1401  083A  3403               	retlw	3
  1402  083B  344B               	retlw	75
  1403  083C  3400               	retlw	0
  1404  083D  3431               	retlw	49
  1405  083E  3400               	retlw	0
  1406  083F  3436               	retlw	54
  1407  0840  3400               	retlw	0
  1408  0841  3400               	retlw	0
  1409  0842  3400               	retlw	0
  1410  0843  3400               	retlw	0
  1411  0844  3400               	retlw	0
  1412  0845  3400               	retlw	0
  1413  0846  3400               	retlw	0
  1414  0847  3400               	retlw	0
  1415  0848  3400               	retlw	0
  1416  0849  3400               	retlw	0
  1417  084A  3400               	retlw	0
  1418  084B  3400               	retlw	0
  1419  084C  3400               	retlw	0
  1420  084D  3400               	retlw	0
  1421  084E  3400               	retlw	0
  1422  084F  3400               	retlw	0
  1423  0850  3400               	retlw	0
  1424  0851  3400               	retlw	0
  1425  0852  3400               	retlw	0
  1426  0853  3400               	retlw	0
  1427  0854  3400               	retlw	0
  1428  0855  3400               	retlw	0
  1429  0856  3400               	retlw	0
  1430  0857  3400               	retlw	0
  1431  0858  3400               	retlw	0
  1432  0859  3400               	retlw	0
  1433  085A  3400               	retlw	0
  1434  085B  3400               	retlw	0
  1435  085C  3400               	retlw	0
  1436  085D  3400               	retlw	0
  1437  085E  3400               	retlw	0
  1438  085F  3400               	retlw	0
  1439  0860  3400               	retlw	0
  1440  0861  3400               	retlw	0
  1441  0862  3400               	retlw	0
  1442  0863  3400               	retlw	0
  1443  0864  3400               	retlw	0
  1444  0865  3400               	retlw	0
  1445  0866  3400               	retlw	0
  1446  0867  3400               	retlw	0
  1447  0868  3400               	retlw	0
  1448  0869  3400               	retlw	0
  1449  086A  3400               	retlw	0
  1450  086B  3400               	retlw	0
  1451  086C  3400               	retlw	0
  1452  086D                     __end_of_sd002:	
  1453  086D                     _configDescriptor1:	
  1454  086D  3409               	retlw	9
  1455  086E  3402               	retlw	2
  1456  086F  3420               	retlw	32
  1457  0870  3400               	retlw	0
  1458  0871  3401               	retlw	1
  1459  0872  3401               	retlw	1
  1460  0873  3400               	retlw	0
  1461  0874  34C0               	retlw	192
  1462  0875  3432               	retlw	50
  1463  0876  3409               	retlw	9
  1464  0877  3404               	retlw	4
  1465  0878  3400               	retlw	0
  1466  0879  3400               	retlw	0
  1467  087A  3402               	retlw	2
  1468  087B  34FF               	retlw	255
  1469  087C  34FF               	retlw	255
  1470  087D  34FF               	retlw	255
  1471  087E  3400               	retlw	0
  1472  087F  3407               	retlw	7
  1473  0880  3405               	retlw	5
  1474  0881  3401               	retlw	1
  1475  0882  3402               	retlw	2
  1476  0883  3440               	retlw	64
  1477  0884  3400               	retlw	0
  1478  0885  3401               	retlw	1
  1479  0886  3407               	retlw	7
  1480  0887  3405               	retlw	5
  1481  0888  3481               	retlw	129
  1482  0889  3402               	retlw	2
  1483  088A  3440               	retlw	64
  1484  088B  3400               	retlw	0
  1485  088C  3401               	retlw	1
  1486  088D                     __end_of_configDescriptor1:	
  1487  088D                     _device_dsc:	
  1488  088D  3412               	retlw	18
  1489  088E  3401               	retlw	1
  1490  088F  3400               	retlw	0
  1491  0890  3402               	retlw	2
  1492  0891  3400               	retlw	0
  1493  0892  3400               	retlw	0
  1494  0893  3400               	retlw	0
  1495  0894  3408               	retlw	8
  1496  0895  34D8               	retlw	216
  1497  0896  3404               	retlw	4
  1498  0897  340A               	retlw	10
  1499  0898  34F6               	retlw	246
  1500  0899  3400               	retlw	0
  1501  089A  3400               	retlw	0
  1502  089B  3401               	retlw	1
  1503  089C  3402               	retlw	2
  1504  089D  3400               	retlw	0
  1505  089E  3401               	retlw	1
  1506  089F                     __end_of_device_dsc:	
  1507  089F                     _ID:	
  1508  089F  3410               	retlw	16
  1509  08A0  344B               	retlw	75
  1510  08A1  3431               	retlw	49
  1511  08A2  3436               	retlw	54
  1512  08A3  3400               	retlw	0
  1513  08A4  3400               	retlw	0
  1514  08A5  3400               	retlw	0
  1515  08A6  3400               	retlw	0
  1516  08A7  34EF               	retlw	239
  1517  08A8  34BE               	retlw	190
  1518  08A9  34AD               	retlw	173
  1519  08AA  34DE               	retlw	222
  1520  08AB                     __end_of_ID:	
  1521  08AB                     _sd000:	
  1522  08AB  3404               	retlw	4
  1523  08AC  3403               	retlw	3
  1524  08AD  3409               	retlw	9
  1525  08AE  3404               	retlw	4
  1526  08AF                     __end_of_sd000:	
  1527                           
  1528                           	psect	nvBANK2
  1529  016E                     __pnvBANK2:	
  1530  016E                     _FanLevel:	
  1531  016E                     	ds	1
  1532  016F                     _BankSize:	
  1533  016F                     	ds	1
  1534                           
  1535                           	psect	nvBANK3
  1536  01EA                     __pnvBANK3:	
  1537  01EA                     _TempTarget:	
  1538  01EA                     	ds	1
  1539  000B                     _INTCONbits	set	11
  1540  0012                     _PIR2bits	set	18
  1541  001B                     _PR2	set	27
  1542  0018                     _T1CONbits	set	24
  1543  0019                     _T1GCONbits	set	25
  1544  001C                     _T2CONbits	set	28
  1545  0015                     _TMR0	set	21
  1546  0017                     _TMR1H	set	23
  1547  0016                     _TMR1L	set	22
  1548  005F                     _GIE	set	95
  1549  008D                     _RCIF	set	141
  1550  008B                     _SSP1IF	set	139
  1551  00CC                     _T1GSPM	set	204
  1552  005A                     _TMR0IF	set	90
  1553  00CF                     _TMR1GE	set	207
  1554  008F                     _TMR1GIF	set	143
  1555  0088                     _TMR1IF	set	136
  1556  00C0                     _TMR1ON	set	192
  1557  0089                     _TMR2IF	set	137
  1558  00E2                     _TMR2ON	set	226
  1559  009D                     _ADCON0bits	set	157
  1560  009E                     _ADCON1bits	set	158
  1561  009F                     _ADCON2bits	set	159
  1562  009C                     _ADRESH	set	156
  1563  0095                     _OPTION_REGbits	set	149
  1564  0099                     _OSCCON	set	153
  1565  0098                     _OSCTUNE	set	152
  1566  0092                     _PIE2bits	set	146
  1567  008C                     _TRISAbits	set	140
  1568  008D                     _TRISBbits	set	141
  1569  008E                     _TRISCbits	set	142
  1570  04AD                     _TMR0CS	set	1197
  1571  048F                     _TMR1GIE	set	1167
  1572  0488                     _TMR1IE	set	1160
  1573  010C                     _LATAbits	set	268
  1574  010E                     _LATC	set	270
  1575  010E                     _LATCbits	set	270
  1576  018C                     _ANSELA	set	396
  1577  018D                     _ANSELB	set	397
  1578  018D                     _ANSELBbits	set	397
  1579  018E                     _ANSELC	set	398
  1580  019F                     _BAUDCONbits	set	415
  1581  0199                     _RCREG	set	409
  1582  019D                     _RCSTAbits	set	413
  1583  019E                     _TXSTAbits	set	414
  1584  0212                     _SSPADD	set	530
  1585  0211                     _SSPBUF	set	529
  1586  0215                     _SSPCON1bits	set	533
  1587  0216                     _SSPCON2bits	set	534
  1588  0217                     _SSPCON3bits	set	535
  1589  0214                     _SSPSTATbits	set	532
  1590  10AD                     _SSP1EN	set	4269
  1591  039B                     _ACTCON	set	923
  1592  0396                     _IOCBF	set	918
  1593  0394                     _IOCBPbits	set	916
  1594  1C9B                     _IOCAF3	set	7323
  1595  0613                     _PWM1CON	set	1555
  1596  0612                     _PWM1DCH	set	1554
  1597  0611                     _PWM1DCL	set	1553
  1598  309E                     _PWM1OE	set	12446
  1599  0E96                     _UADDR	set	3734
  1600  0E91                     _UCFG	set	3729
  1601  0E8E                     _UCON	set	3726
  1602  0E8E                     _UCONbits	set	3726
  1603  0E97                     _UEIE	set	3735
  1604  0E93                     _UEIR	set	3731
  1605  0E98                     _UEP0bits	set	3736
  1606  0E92                     _UIE	set	3730
  1607  0E92                     _UIEbits	set	3730
  1608  0E90                     _UIR	set	3728
  1609  0E90                     _UIRbits	set	3728
  1610  0E8F                     _USTAT	set	3727
  1611  0E98                     _UEP0	set	3736
  1612  0E99                     _UEP1	set	3737
  1613                           
  1614                           ; #config settings
  1615  0000                     
  1616                           	psect	cinit
  1617  1322                     start_initialization:	
  1618  1322                     __initialization:		;BIGRAM
  1619                           
  1620                           ; Clear objects allocated to BIGRAM
  1621  1322  303C               	movlw	low (0+9020)
  1622  1323  0084               	movwf	4
  1623  1324  3023               	movlw	high (0+9020)
  1624  1325  0085               	movwf	5
  1625  1326  30B4               	movlw	180
  1626  1327  00FE               	movwf	btemp
  1627  1328  3000               	movlw	0
  1628  1329  00FF               	movwf	btemp+1
  1629  132A  319C  2436  3193   	fcall	clear_ram0
  1630                           
  1631                           ; Clear objects allocated to BANK0
  1632  132D  01E8               	clrf	__pbssBANK0& (0+127)
  1633  132E  01E9               	clrf	(__pbssBANK0+1)& (0+127)
  1634  132F  01EA               	clrf	(__pbssBANK0+2)& (0+127)
  1635  1330  01EB               	clrf	(__pbssBANK0+3)& (0+127)
  1636  1331  01EC               	clrf	(__pbssBANK0+4)& (0+127)
  1637  1332  01ED               	clrf	(__pbssBANK0+5)& (0+127)
  1638  1333  01EE               	clrf	(__pbssBANK0+6)& (0+127)
  1639  1334  01EF               	clrf	(__pbssBANK0+7)& (0+127)
  1640                           
  1641                           ; Clear objects allocated to BANK1
  1642  1335  0021               	movlb	1	; select bank1
  1643  1336  01EE               	clrf	__pbssBANK1& (0+127)
  1644  1337  01EF               	clrf	(__pbssBANK1+1)& (0+127)
  1645                           
  1646                           ; Clear objects allocated to BANK2
  1647  1338  3020               	movlw	low __pbssBANK2
  1648  1339  0084               	movwf	4
  1649  133A  3001               	movlw	high __pbssBANK2
  1650  133B  0085               	movwf	5
  1651  133C  3038               	movlw	56
  1652  133D  00FE               	movwf	btemp
  1653  133E  3000               	movlw	0
  1654  133F  00FF               	movwf	btemp+1
  1655  1340  319C  2436  3193   	fcall	clear_ram0
  1656                           
  1657                           ; Clear objects allocated to BANK3
  1658  1343  30A0               	movlw	low __pbssBANK3
  1659  1344  0084               	movwf	4
  1660  1345  3001               	movlw	high __pbssBANK3
  1661  1346  0085               	movwf	5
  1662  1347  3030               	movlw	48
  1663  1348  00FE               	movwf	btemp
  1664  1349  3000               	movlw	0
  1665  134A  00FF               	movwf	btemp+1
  1666  134B  319C  2436  3193   	fcall	clear_ram0
  1667                           
  1668                           ; Clear objects allocated to BANK6
  1669  134E  3020               	movlw	low __pbssBANK6
  1670  134F  0084               	movwf	4
  1671  1350  3003               	movlw	high __pbssBANK6
  1672  1351  0085               	movwf	5
  1673  1352  3020               	movlw	32
  1674  1353  00FE               	movwf	btemp
  1675  1354  3000               	movlw	0
  1676  1355  00FF               	movwf	btemp+1
  1677  1356  319C  2436  3193   	fcall	clear_ram0
  1678                           
  1679                           ; Initialize objects allocated to BANK2
  1680  1359  3042               	movlw	low __pidataBANK2
  1681  135A  0084               	movwf	4
  1682  135B  309C               	movlw	(high __pidataBANK2)| (0+128)
  1683  135C  0085               	movwf	5
  1684  135D  3058               	movlw	low __pdataBANK2
  1685  135E  0086               	movwf	6
  1686  135F  3001               	movlw	high __pdataBANK2
  1687  1360  0087               	movwf	7
  1688  1361  3000               	movlw	0
  1689  1362  00FF               	movwf	btemp+1
  1690  1363  300E               	movlw	14
  1691  1364  319C  242A  3193   	fcall	init_ram
  1692                           
  1693                           ; Initialize objects allocated to BANK3
  1694  1367  30E3               	movlw	low __pidataBANK3
  1695  1368  0084               	movwf	4
  1696  1369  309C               	movlw	(high __pidataBANK3)| (0+128)
  1697  136A  0085               	movwf	5
  1698  136B  30D0               	movlw	low __pdataBANK3
  1699  136C  0086               	movwf	6
  1700  136D  3001               	movlw	high __pdataBANK3
  1701  136E  0087               	movwf	7
  1702  136F  3000               	movlw	0
  1703  1370  00FF               	movwf	btemp+1
  1704  1371  301A               	movlw	26
  1705  1372  319C  242A  3193   	fcall	init_ram
  1706                           
  1707                           ; Initialize objects allocated to BANK6
  1708  1375  30C7               	movlw	low __pidataBANK6
  1709  1376  0084               	movwf	4
  1710  1377  309D               	movlw	(high __pidataBANK6)| (0+128)
  1711  1378  0085               	movwf	5
  1712  1379  3040               	movlw	low __pdataBANK6
  1713  137A  0086               	movwf	6
  1714  137B  3003               	movlw	high __pdataBANK6
  1715  137C  0087               	movwf	7
  1716  137D  3000               	movlw	0
  1717  137E  00FF               	movwf	btemp+1
  1718  137F  3020               	movlw	32
  1719  1380  319C  242A         	fcall	init_ram
  1720  1382                     end_of_initialization:	
  1721                           ;End of C runtime variable initialization code
  1722                           
  1723  1382                     __end_of__initialization:	
  1724  1382  0020               	movlb	0
  1725  1383  319C  2CCC         	ljmp	_main	;jump to C main() function
  1726                           
  1727                           	psect	bssBANK0
  1728  0068                     __pbssBANK0:	
  1729  0068                     _pBDTEntryIn:	
  1730  0068                     	ds	2
  1731  006A                     _I2CCmd:	
  1732  006A                     	ds	1
  1733  006B                     _USBDeferStatusStagePacket:	
  1734  006B                     	ds	1
  1735  006C                     _controlTransferState:	
  1736  006C                     	ds	1
  1737  006D                     _pBDTEntryEP0OutCurrent:	
  1738  006D                     	ds	1
  1739  006E                     _pBDTEntryEP0OutNext:	
  1740  006E                     	ds	1
  1741  006F                     _ptr:	
  1742  006F                     	ds	1
  1743                           
  1744                           	psect	bssBANK1
  1745  00EE                     __pbssBANK1:	
  1746  00EE                     _USBDeviceState:	
  1747  00EE                     	ds	1
  1748  00EF                     _USTATcopy:	
  1749  00EF                     	ds	1
  1750                           
  1751                           	psect	bssBANK2
  1752  0120                     __pbssBANK2:	
  1753  0120                     _outPipes:	
  1754  0120                     	ds	6
  1755  0126                     USBCBSendResume@delay_count:	
  1756  0126                     	ds	2
  1757  0128                     _Step:	
  1758  0128                     	ds	2
  1759  012A                     _ep_data_in:	
  1760  012A                     	ds	2
  1761  012C                     _ep_data_out:	
  1762  012C                     	ds	2
  1763  012E                     _pBDTEntryOut:	
  1764  012E                     	ds	2
  1765  0130                     _send32_data:	
  1766  0130                     	ds	2
  1767  0132                     _BothEP0OutUOWNsSet:	
  1768  0132                     	ds	1
  1769  0133                     _I2CAddr:	
  1770  0133                     	ds	1
  1771  0134                     _I2CCount:	
  1772  0134                     	ds	1
  1773  0135                     _I2CInBuf:	
  1774  0135                     	ds	1
  1775  0136                     _I2CState:	
  1776  0136                     	ds	1
  1777  0137                     _LastTemp:	
  1778  0137                     	ds	1
  1779  0138                     _RemoteWakeup:	
  1780  0138                     	ds	1
  1781  0139                     _ResultQC:	
  1782  0139                     	ds	1
  1783  013A                     _SlaveAddress:	
  1784  013A                     	ds	1
  1785  013B                     _SlowTick:	
  1786  013B                     	ds	1
  1787  013C                     _TimeOut:	
  1788  013C                     	ds	1
  1789  013D                     _USBBusIsSuspended:	
  1790  013D                     	ds	1
  1791  013E                     _USBDeferINDataStagePackets:	
  1792  013E                     	ds	1
  1793  013F                     _USBDeferOUTDataStagePackets:	
  1794  013F                     	ds	1
  1795  0140                     _USBGenericInHandle:	
  1796  0140                     	ds	1
  1797  0141                     _USBGenericOutHandle:	
  1798  0141                     	ds	1
  1799  0142                     _USBStatusStageEnabledFlag1:	
  1800  0142                     	ds	1
  1801  0143                     _USBStatusStageEnabledFlag2:	
  1802  0143                     	ds	1
  1803  0144                     _USBStatusStageTimeoutCounter:	
  1804  0144                     	ds	1
  1805  0145                     _VerySlowTick:	
  1806  0145                     	ds	1
  1807  0146                     _WorkNow:	
  1808  0146                     	ds	1
  1809  0147                     _endpoint_number:	
  1810  0147                     	ds	1
  1811  0148                     _last_bit0:	
  1812  0148                     	ds	1
  1813  0149                     _last_bit1:	
  1814  0149                     	ds	1
  1815  014A                     _pDst:	
  1816  014A                     	ds	1
  1817  014B                     _send32_count:	
  1818  014B                     	ds	1
  1819  014C                     _shortPacketStatus:	
  1820  014C                     	ds	1
  1821  014D                     _inPipes:	
  1822  014D                     	ds	5
  1823  0152                     _Error:	
  1824  0152                     	ds	2
  1825  0154                     _USBActiveConfiguration:	
  1826  0154                     	ds	1
  1827  0155                     _USBAlternateInterface:	
  1828  0155                     	ds	1
  1829  0156                     _WQI:	
  1830  0156                     	ds	1
  1831  0157                     _WQX:	
  1832  0157                     	ds	1
  1833                           
  1834                           	psect	dataBANK2
  1835  0158                     __pdataBANK2:	
  1836  0158                     _HashTime:	
  1837  0158                     	ds	1
  1838  0159                     _Status:	
  1839  0159                     	ds	13
  1840                           
  1841                           	psect	bssBANK3
  1842  01A0                     __pbssBANK3:	
  1843  01A0                     _buf:	
  1844  01A0                     	ds	16
  1845  01B0                     _LastError:	
  1846  01B0                     	ds	2
  1847  01B2                     _PrecalcHashes:	
  1848  01B2                     	ds	24
  1849  01CA                     _ResultQue:	
  1850  01CA                     	ds	6
  1851                           
  1852                           	psect	dataBANK3
  1853  01D0                     __pdataBANK3:	
  1854  01D0                     AsicPreCalc@F3347:	
  1855  01D0                     	ds	12
  1856  01DC                     _ClockCfg:	
  1857  01DC                     	ds	8
  1858  01E4                     _Cfg:	
  1859  01E4                     	ds	6
  1860                           
  1861                           	psect	bssBANK6
  1862  0320                     __pbssBANK6:	
  1863  0320                     _NonceRanges:	
  1864  0320                     	ds	32
  1865                           
  1866                           	psect	dataBANK6
  1867  0340                     __pdataBANK6:	
  1868  0340                     _BankRanges:	
  1869  0340                     	ds	32
  1870                           
  1871                           	psect	clrtext
  1872  1C36                     clear_ram0:	
  1873                           ;	Called with FSR0 containing the base address, and
  1874                           ;	btemp/btemp+1 has the size to clear
  1875                           
  1876  1C36  0064               	clrwdt	;clear the watchdog before getting into this loop
  1877  1C37                     clrloop0:	
  1878  1C37  0180               	clrf	0	;clear RAM location pointed to by FSR
  1879  1C38  3101               	addfsr 0,1
  1880  1C39  3001               	movlw	1
  1881  1C3A  02FE               	subwf	126,f
  1882  1C3B  3000               	movlw	0
  1883  1C3C  3BFF               	subwfb	127,f
  1884  1C3D  087F               	movf	127,w
  1885  1C3E  047E               	iorwf	126,w
  1886  1C3F  1903               	btfsc	3,2
  1887  1C40  3400               	retlw	0	;all done for this memory range, return
  1888  1C41  2C37               	goto	clrloop0	;have we reached the end yet?
  1889                           
  1890                           	psect	inittext
  1891  1C2A                     init_ram:	
  1892  1C2A  00FE               	movwf	126
  1893  1C2B                     initloop:	
  1894  1C2B  0012               	moviw fsr0++
  1895  1C2C  001E               	movwi fsr1++
  1896  1C2D  3001               	movlw	1
  1897  1C2E  02FE               	subwf	126,f
  1898  1C2F  3000               	movlw	0
  1899  1C30  3BFF               	subwfb	127,f
  1900  1C31  087F               	movf	127,w
  1901  1C32  047E               	iorwf	126,w
  1902  1C33  1903               	btfsc	3,2
  1903  1C34  3400               	retlw	0
  1904  1C35  2C2B               	goto	initloop
  1905                           
  1906                           	psect	cstackBANK2
  1907  0166                     __pcstackBANK2:	
  1908  0166                     ??_ProcessIO:	
  1909                           
  1910                           ; 0 bytes @ 0x0
  1911  0166                     	ds	4
  1912  016A                     _ProcessIO$2376:	
  1913                           
  1914                           ; 2 bytes @ 0x4
  1915  016A                     	ds	2
  1916  016C                     _ProcessIO$2410:	
  1917                           
  1918                           ; 2 bytes @ 0x6
  1919  016C                     	ds	2
  1920                           
  1921                           	psect	cstackBANK1
  1922  00A0                     __pcstackBANK1:	
  1923  00A0                     ??_SendCmdReply:	
  1924  00A0                     ?_AsicPreCalc:	
  1925                           ; 0 bytes @ 0x0
  1926                           
  1927  00A0                     ?_USER_USB_CALLBACK_EVENT_HANDLER:	
  1928                           ; 0 bytes @ 0x0
  1929                           
  1930  00A0                     ?___ftmul:	
  1931                           ; 1 bytes @ 0x0
  1932                           
  1933  00A0                     AsicPreCalc@work:	
  1934                           ; 3 bytes @ 0x0
  1935                           
  1936  00A0                     USER_USB_CALLBACK_EVENT_HANDLER@event:	
  1937                           ; 2 bytes @ 0x0
  1938                           
  1939  00A0                     _DetectAsics$2868:	
  1940                           ; 2 bytes @ 0x0
  1941                           
  1942  00A0                     ___ftmul@f1:	
  1943                           ; 2 bytes @ 0x0
  1944                           
  1945                           
  1946                           ; 3 bytes @ 0x0
  1947  00A0                     	ds	2
  1948  00A2                     ??_AsicPreCalc:	
  1949  00A2                     DetectAsics@x:	
  1950                           ; 0 bytes @ 0x2
  1951                           
  1952  00A2                     USER_USB_CALLBACK_EVENT_HANDLER@pdata:	
  1953                           ; 1 bytes @ 0x2
  1954                           
  1955                           
  1956                           ; 2 bytes @ 0x2
  1957  00A2                     	ds	1
  1958  00A3                     ___ftmul@f2:	
  1959                           
  1960                           ; 3 bytes @ 0x3
  1961  00A3                     	ds	1
  1962  00A4                     USER_USB_CALLBACK_EVENT_HANDLER@size:	
  1963                           
  1964                           ; 2 bytes @ 0x4
  1965  00A4                     	ds	2
  1966  00A6                     ??_USBWakeFromSuspend:	
  1967  00A6                     ??_USBSuspend:	
  1968                           ; 0 bytes @ 0x6
  1969                           
  1970  00A6                     ??_USBStdFeatureReqHandler:	
  1971                           ; 0 bytes @ 0x6
  1972                           
  1973  00A6                     ??_USBStdSetCfgHandler:	
  1974                           ; 0 bytes @ 0x6
  1975                           
  1976  00A6                     ??___ftmul:	
  1977                           ; 0 bytes @ 0x6
  1978                           
  1979                           
  1980                           ; 0 bytes @ 0x6
  1981  00A6                     	ds	1
  1982  00A7                     USBStdSetCfgHandler@p:	
  1983                           
  1984                           ; 2 bytes @ 0x7
  1985  00A7                     	ds	1
  1986  00A8                     USBStdFeatureReqHandler@pUEP:	
  1987                           
  1988                           ; 2 bytes @ 0x8
  1989  00A8                     	ds	1
  1990  00A9                     USBStdSetCfgHandler@i_1089:	
  1991                           
  1992                           ; 1 bytes @ 0x9
  1993  00A9                     	ds	1
  1994  00AA                     USBStdSetCfgHandler@i:	
  1995  00AA                     USBStdFeatureReqHandler@current_ep_data:	
  1996                           ; 1 bytes @ 0xA
  1997                           
  1998  00AA                     ___ftmul@exp:	
  1999                           ; 1 bytes @ 0xA
  2000                           
  2001                           
  2002                           ; 1 bytes @ 0xA
  2003  00AA                     	ds	1
  2004  00AB                     USBStdFeatureReqHandler@p:	
  2005  00AB                     ___ftmul@f3_as_product:	
  2006                           ; 1 bytes @ 0xB
  2007                           
  2008                           
  2009                           ; 3 bytes @ 0xB
  2010  00AB                     	ds	1
  2011  00AC                     ??_USBCheckStdRequest:	
  2012  00AC                     AsicPreCalc@K:	
  2013                           ; 0 bytes @ 0xC
  2014                           
  2015                           
  2016                           ; 12 bytes @ 0xC
  2017  00AC                     	ds	1
  2018  00AD                     ??_USBCtrlTrfSetupHandler:	
  2019                           
  2020                           ; 0 bytes @ 0xD
  2021  00AD                     	ds	1
  2022  00AE                     ??_USBCtrlEPService:	
  2023  00AE                     ___ftmul@cntr:	
  2024                           ; 0 bytes @ 0xE
  2025                           
  2026                           
  2027                           ; 1 bytes @ 0xE
  2028  00AE                     	ds	1
  2029  00AF                     ___ftmul@sign:	
  2030                           
  2031                           ; 1 bytes @ 0xF
  2032  00AF                     	ds	1
  2033  00B0                     ?___ftneg:	
  2034  00B0                     ___ftneg@f1:	
  2035                           ; 3 bytes @ 0x10
  2036                           
  2037                           
  2038                           ; 3 bytes @ 0x10
  2039  00B0                     	ds	1
  2040  00B1                     USBCtrlEPService@setup_cnt:	
  2041                           
  2042                           ; 1 bytes @ 0x11
  2043  00B1                     	ds	1
  2044  00B2                     ??_USBDeviceTasks:	
  2045                           
  2046                           ; 0 bytes @ 0x12
  2047  00B2                     	ds	1
  2048  00B3                     ?___ftadd:	
  2049  00B3                     ___ftadd@f1:	
  2050                           ; 3 bytes @ 0x13
  2051                           
  2052                           
  2053                           ; 3 bytes @ 0x13
  2054  00B3                     	ds	1
  2055  00B4                     USBDeviceTasks@i:	
  2056                           
  2057                           ; 1 bytes @ 0x14
  2058  00B4                     	ds	2
  2059  00B6                     ___ftadd@f2:	
  2060                           
  2061                           ; 3 bytes @ 0x16
  2062  00B6                     	ds	2
  2063  00B8                     AsicPreCalc@m:	
  2064                           
  2065                           ; 32 bytes @ 0x18
  2066  00B8                     	ds	1
  2067  00B9                     ??___ftadd:	
  2068                           
  2069                           ; 0 bytes @ 0x19
  2070  00B9                     	ds	4
  2071  00BD                     ___ftadd@sign:	
  2072                           
  2073                           ; 1 bytes @ 0x1D
  2074  00BD                     	ds	1
  2075  00BE                     ___ftadd@exp2:	
  2076                           
  2077                           ; 1 bytes @ 0x1E
  2078  00BE                     	ds	1
  2079  00BF                     ___ftadd@exp1:	
  2080                           
  2081                           ; 1 bytes @ 0x1F
  2082  00BF                     	ds	1
  2083  00C0                     ?___fttol:	
  2084  00C0                     ___fttol@f1:	
  2085                           ; 4 bytes @ 0x20
  2086                           
  2087                           
  2088                           ; 3 bytes @ 0x20
  2089  00C0                     	ds	4
  2090  00C4                     ??___fttol:	
  2091                           
  2092                           ; 0 bytes @ 0x24
  2093  00C4                     	ds	4
  2094  00C8                     ___fttol@sign1:	
  2095                           
  2096                           ; 1 bytes @ 0x28
  2097  00C8                     	ds	1
  2098  00C9                     ___fttol@lval:	
  2099                           
  2100                           ; 4 bytes @ 0x29
  2101  00C9                     	ds	4
  2102  00CD                     ___fttol@exp1:	
  2103                           
  2104                           ; 1 bytes @ 0x2D
  2105  00CD                     	ds	1
  2106  00CE                     ??_UpdateFanLevel:	
  2107                           
  2108                           ; 0 bytes @ 0x2E
  2109  00CE                     	ds	4
  2110  00D2                     _UpdateFanLevel$2869:	
  2111                           
  2112                           ; 3 bytes @ 0x32
  2113  00D2                     	ds	3
  2114  00D5                     ??_WorkTick:	
  2115                           
  2116                           ; 0 bytes @ 0x35
  2117  00D5                     	ds	3
  2118  00D8                     AsicPreCalc@z:	
  2119                           
  2120                           ; 4 bytes @ 0x38
  2121  00D8                     	ds	4
  2122  00DC                     AsicPreCalc@y:	
  2123                           
  2124                           ; 4 bytes @ 0x3C
  2125  00DC                     	ds	4
  2126  00E0                     AsicPreCalc@x:	
  2127                           
  2128                           ; 4 bytes @ 0x40
  2129  00E0                     	ds	4
  2130  00E4                     AsicPreCalc@n:	
  2131                           
  2132                           ; 1 bytes @ 0x44
  2133  00E4                     	ds	1
  2134  00E5                     ??_AsicPushWork:	
  2135                           
  2136                           ; 0 bytes @ 0x45
  2137  00E5                     	ds	5
  2138  00EA                     ??_ProcessCmd:	
  2139                           
  2140                           ; 0 bytes @ 0x4A
  2141  00EA                     	ds	4
  2142                           
  2143                           	psect	cstackCOMMON
  2144  0070                     __pcstackCOMMON:	
  2145  0070                     ?_USBWakeFromSuspend:	
  2146  0070                     ?_USBSuspend:	
  2147                           ; 0 bytes @ 0x0
  2148                           
  2149  0070                     ?_USBCtrlEPAllowStatusStage:	
  2150                           ; 0 bytes @ 0x0
  2151                           
  2152  0070                     ?_USBStallHandler:	
  2153                           ; 0 bytes @ 0x0
  2154                           
  2155  0070                     ?_USBCtrlEPService:	
  2156                           ; 0 bytes @ 0x0
  2157                           
  2158  0070                     ?_USBCtrlTrfTxService:	
  2159                           ; 0 bytes @ 0x0
  2160                           
  2161  0070                     ?_USBCtrlTrfSetupHandler:	
  2162                           ; 0 bytes @ 0x0
  2163                           
  2164  0070                     ?_USBCtrlTrfOutHandler:	
  2165                           ; 0 bytes @ 0x0
  2166                           
  2167  0070                     ?_USBCtrlTrfInHandler:	
  2168                           ; 0 bytes @ 0x0
  2169                           
  2170  0070                     ?_USBCheckStdRequest:	
  2171                           ; 0 bytes @ 0x0
  2172                           
  2173  0070                     ?_USBStdFeatureReqHandler:	
  2174                           ; 0 bytes @ 0x0
  2175                           
  2176  0070                     ?_Send32:	
  2177                           ; 0 bytes @ 0x0
  2178                           
  2179  0070                     ?_AsicPushWork:	
  2180                           ; 0 bytes @ 0x0
  2181                           
  2182  0070                     ?_UpdateFanLevel:	
  2183                           ; 0 bytes @ 0x0
  2184                           
  2185  0070                     ?_InitializeSystem:	
  2186                           ; 0 bytes @ 0x0
  2187                           
  2188  0070                     ?_ProcessIO:	
  2189                           ; 0 bytes @ 0x0
  2190                           
  2191  0070                     ?_UserInit:	
  2192                           ; 0 bytes @ 0x0
  2193                           
  2194  0070                     ?_USBDeviceInit:	
  2195                           ; 0 bytes @ 0x0
  2196                           
  2197  0070                     ?_USBDeviceTasks:	
  2198                           ; 0 bytes @ 0x0
  2199                           
  2200  0070                     ?_USBCtrlEPAllowDataStage:	
  2201                           ; 0 bytes @ 0x0
  2202                           
  2203  0070                     ?_USBCtrlEPServiceComplete:	
  2204                           ; 0 bytes @ 0x0
  2205                           
  2206  0070                     ?_USBCtrlTrfRxService:	
  2207                           ; 0 bytes @ 0x0
  2208                           
  2209  0070                     ?_USBStdSetCfgHandler:	
  2210                           ; 0 bytes @ 0x0
  2211                           
  2212  0070                     ?_USBStdGetDscHandler:	
  2213                           ; 0 bytes @ 0x0
  2214                           
  2215  0070                     ?_USBStdGetStatusHandler:	
  2216                           ; 0 bytes @ 0x0
  2217                           
  2218  0070                     ?_USBCheckVendorRequest:	
  2219                           ; 0 bytes @ 0x0
  2220                           
  2221  0070                     ?_ProcessCmd:	
  2222                           ; 0 bytes @ 0x0
  2223                           
  2224  0070                     ?_DetectAsics:	
  2225                           ; 0 bytes @ 0x0
  2226                           
  2227  0070                     ?_WorkTick:	
  2228                           ; 0 bytes @ 0x0
  2229                           
  2230  0070                     ?_ResultRx:	
  2231                           ; 0 bytes @ 0x0
  2232                           
  2233  0070                     ?_InitFAN:	
  2234                           ; 0 bytes @ 0x0
  2235                           
  2236  0070                     ?_InitTempSensor:	
  2237                           ; 0 bytes @ 0x0
  2238                           
  2239  0070                     ?_InitWorkTick:	
  2240                           ; 0 bytes @ 0x0
  2241                           
  2242  0070                     ?_InitResultRx:	
  2243                           ; 0 bytes @ 0x0
  2244                           
  2245  0070                     ?_ISRCode:	
  2246                           ; 0 bytes @ 0x0
  2247                           
  2248  0070                     ?_USBCBSuspend:	
  2249                           ; 0 bytes @ 0x0
  2250                           
  2251  0070                     ?_USBCBWakeFromSuspend:	
  2252                           ; 0 bytes @ 0x0
  2253                           
  2254  0070                     ?_USBCB_SOF_Handler:	
  2255                           ; 0 bytes @ 0x0
  2256                           
  2257  0070                     ?_USBCBErrorHandler:	
  2258                           ; 0 bytes @ 0x0
  2259                           
  2260  0070                     ?_USBCBCheckOtherReq:	
  2261                           ; 0 bytes @ 0x0
  2262                           
  2263  0070                     ?_USBCBStdSetDscHandler:	
  2264                           ; 0 bytes @ 0x0
  2265                           
  2266  0070                     ?_USBCBInitEP:	
  2267                           ; 0 bytes @ 0x0
  2268                           
  2269  0070                     ?i1___bmul:	
  2270                           ; 0 bytes @ 0x0
  2271                           
  2272  0070                     ?_main:	
  2273                           ; 1 bytes @ 0x0
  2274                           
  2275  0070                     ?i1___wmul:	
  2276                           ; 2 bytes @ 0x0
  2277                           
  2278  0070                     i1___bmul@multiplicand:	
  2279                           ; 2 bytes @ 0x0
  2280                           
  2281  0070                     i1___wmul@multiplier:	
  2282                           ; 1 bytes @ 0x0
  2283                           
  2284                           
  2285                           ; 2 bytes @ 0x0
  2286  0070                     	ds	1
  2287  0071                     ??i1___bmul:	
  2288                           
  2289                           ; 0 bytes @ 0x1
  2290  0071                     	ds	1
  2291  0072                     i1___bmul@multiplier:	
  2292  0072                     i1___wmul@multiplicand:	
  2293                           ; 1 bytes @ 0x2
  2294                           
  2295                           
  2296                           ; 2 bytes @ 0x2
  2297  0072                     	ds	1
  2298  0073                     i1___bmul@product:	
  2299                           
  2300                           ; 1 bytes @ 0x3
  2301  0073                     	ds	1
  2302  0074                     ??i1___wmul:	
  2303  0074                     i1___wmul@product:	
  2304                           ; 0 bytes @ 0x4
  2305                           
  2306                           
  2307                           ; 2 bytes @ 0x4
  2308  0074                     	ds	2
  2309  0076                     ?i1_SendCmdReply:	
  2310  0076                     i1SendCmdReply@cmd:	
  2311                           ; 0 bytes @ 0x6
  2312                           
  2313                           
  2314                           ; 2 bytes @ 0x6
  2315  0076                     	ds	2
  2316  0078                     i1SendCmdReply@data:	
  2317                           
  2318                           ; 2 bytes @ 0x8
  2319  0078                     	ds	2
  2320  007A                     i1SendCmdReply@count:	
  2321                           
  2322                           ; 1 bytes @ 0xA
  2323  007A                     	ds	1
  2324  007B                     i1SendCmdReply@n:	
  2325                           
  2326                           ; 1 bytes @ 0xB
  2327  007B                     	ds	1
  2328  007C                     ??_ResultRx:	
  2329                           
  2330                           ; 0 bytes @ 0xC
  2331  007C                     	ds	1
  2332  007D                     ??_ISRCode:	
  2333                           
  2334                           ; 0 bytes @ 0xD
  2335  007D                     	ds	1
  2336                           
  2337                           	psect	cstackBANK0
  2338  0050                     __pcstackBANK0:	
  2339  0050                     ??i1_SendCmdReply:	
  2340                           
  2341                           ; 0 bytes @ 0x0
  2342  0050                     	ds	8
  2343  0058                     ??_USBCtrlEPAllowStatusStage:	
  2344  0058                     ??_USBStallHandler:	
  2345                           ; 0 bytes @ 0x8
  2346                           
  2347  0058                     ?_USBConfigureEndpoint:	
  2348                           ; 0 bytes @ 0x8
  2349                           
  2350  0058                     ??_USBCtrlTrfTxService:	
  2351                           ; 0 bytes @ 0x8
  2352                           
  2353  0058                     ??_Send32:	
  2354                           ; 0 bytes @ 0x8
  2355                           
  2356  0058                     ??_USBDeviceInit:	
  2357                           ; 0 bytes @ 0x8
  2358                           
  2359  0058                     ??_USBStdGetDscHandler:	
  2360                           ; 0 bytes @ 0x8
  2361                           
  2362  0058                     ??_USBStdGetStatusHandler:	
  2363                           ; 0 bytes @ 0x8
  2364                           
  2365  0058                     ??_USBCheckVendorRequest:	
  2366                           ; 0 bytes @ 0x8
  2367                           
  2368  0058                     ??_InitFAN:	
  2369                           ; 0 bytes @ 0x8
  2370                           
  2371  0058                     ??_InitTempSensor:	
  2372                           ; 0 bytes @ 0x8
  2373                           
  2374  0058                     ??_InitWorkTick:	
  2375                           ; 0 bytes @ 0x8
  2376                           
  2377  0058                     ??_InitResultRx:	
  2378                           ; 0 bytes @ 0x8
  2379                           
  2380  0058                     ??_USBCBSuspend:	
  2381                           ; 0 bytes @ 0x8
  2382                           
  2383  0058                     ??_USBCBWakeFromSuspend:	
  2384                           ; 0 bytes @ 0x8
  2385                           
  2386  0058                     ??_USBCB_SOF_Handler:	
  2387                           ; 0 bytes @ 0x8
  2388                           
  2389  0058                     ??_USBCBErrorHandler:	
  2390                           ; 0 bytes @ 0x8
  2391                           
  2392  0058                     ??_USBCBCheckOtherReq:	
  2393                           ; 0 bytes @ 0x8
  2394                           
  2395  0058                     ??_USBCBStdSetDscHandler:	
  2396                           ; 0 bytes @ 0x8
  2397                           
  2398  0058                     ?___bmul:	
  2399                           ; 0 bytes @ 0x8
  2400                           
  2401  0058                     ?_memset:	
  2402                           ; 1 bytes @ 0x8
  2403                           
  2404  0058                     ?___awdiv:	
  2405                           ; 2 bytes @ 0x8
  2406                           
  2407  0058                     ?___awmod:	
  2408                           ; 2 bytes @ 0x8
  2409                           
  2410  0058                     ?___lwdiv:	
  2411                           ; 2 bytes @ 0x8
  2412                           
  2413  0058                     ?___wmul:	
  2414                           ; 2 bytes @ 0x8
  2415                           
  2416  0058                     ?___ftpack:	
  2417                           ; 2 bytes @ 0x8
  2418                           
  2419  0058                     ?_rotate:	
  2420                           ; 3 bytes @ 0x8
  2421                           
  2422  0058                     USBConfigureEndpoint@direction:	
  2423                           ; 4 bytes @ 0x8
  2424                           
  2425  0058                     ___bmul@multiplicand:	
  2426                           ; 1 bytes @ 0x8
  2427                           
  2428  0058                     ___awdiv@divisor:	
  2429                           ; 1 bytes @ 0x8
  2430                           
  2431  0058                     ___awmod@divisor:	
  2432                           ; 2 bytes @ 0x8
  2433                           
  2434  0058                     ___lwdiv@divisor:	
  2435                           ; 2 bytes @ 0x8
  2436                           
  2437  0058                     memset@p1:	
  2438                           ; 2 bytes @ 0x8
  2439                           
  2440  0058                     ___wmul@multiplier:	
  2441                           ; 2 bytes @ 0x8
  2442                           
  2443  0058                     ___ftpack@arg:	
  2444                           ; 2 bytes @ 0x8
  2445                           
  2446  0058                     rotate@x:	
  2447                           ; 3 bytes @ 0x8
  2448                           
  2449                           
  2450                           ; 4 bytes @ 0x8
  2451  0058                     	ds	1
  2452  0059                     ??_USBConfigureEndpoint:	
  2453  0059                     ??___bmul:	
  2454                           ; 0 bytes @ 0x9
  2455                           
  2456  0059                     USBStdGetStatusHandler@p:	
  2457                           ; 0 bytes @ 0x9
  2458                           
  2459                           
  2460                           ; 1 bytes @ 0x9
  2461  0059                     	ds	1
  2462  005A                     ??_USBCtrlTrfRxService:	
  2463  005A                     USBCtrlTrfTxService@byteToSend:	
  2464                           ; 0 bytes @ 0xA
  2465                           
  2466  005A                     ___bmul@product:	
  2467                           ; 1 bytes @ 0xA
  2468                           
  2469  005A                     USBDeviceInit@p:	
  2470                           ; 1 bytes @ 0xA
  2471                           
  2472  005A                     ___awdiv@dividend:	
  2473                           ; 2 bytes @ 0xA
  2474                           
  2475  005A                     ___awmod@dividend:	
  2476                           ; 2 bytes @ 0xA
  2477                           
  2478  005A                     ___lwdiv@dividend:	
  2479                           ; 2 bytes @ 0xA
  2480                           
  2481  005A                     memset@c:	
  2482                           ; 2 bytes @ 0xA
  2483                           
  2484  005A                     ___wmul@multiplicand:	
  2485                           ; 2 bytes @ 0xA
  2486                           
  2487                           
  2488                           ; 2 bytes @ 0xA
  2489  005A                     	ds	1
  2490  005B                     ??_USBCtrlTrfInHandler:	
  2491  005B                     ??_USBCtrlEPAllowDataStage:	
  2492                           ; 0 bytes @ 0xB
  2493                           
  2494  005B                     ___bmul@multiplier:	
  2495                           ; 0 bytes @ 0xB
  2496                           
  2497  005B                     ___ftpack@exp:	
  2498                           ; 1 bytes @ 0xB
  2499                           
  2500                           
  2501                           ; 1 bytes @ 0xB
  2502  005B                     	ds	1
  2503  005C                     ??___awdiv:	
  2504  005C                     ??___awmod:	
  2505                           ; 0 bytes @ 0xC
  2506                           
  2507  005C                     ??___lwdiv:	
  2508                           ; 0 bytes @ 0xC
  2509                           
  2510  005C                     ??___wmul:	
  2511                           ; 0 bytes @ 0xC
  2512                           
  2513  005C                     ?_USBTransferOnePacket:	
  2514                           ; 0 bytes @ 0xC
  2515                           
  2516  005C                     USBDeviceInit@i_718:	
  2517                           ; 1 bytes @ 0xC
  2518                           
  2519  005C                     USBTransferOnePacket@dir:	
  2520                           ; 1 bytes @ 0xC
  2521                           
  2522  005C                     USBCtrlTrfRxService@i:	
  2523                           ; 1 bytes @ 0xC
  2524                           
  2525  005C                     rotate@y:	
  2526                           ; 1 bytes @ 0xC
  2527                           
  2528  005C                     ___ftpack@sign:	
  2529                           ; 1 bytes @ 0xC
  2530                           
  2531  005C                     memset@n:	
  2532                           ; 1 bytes @ 0xC
  2533                           
  2534  005C                     ___wmul@product:	
  2535                           ; 2 bytes @ 0xC
  2536                           
  2537                           
  2538                           ; 2 bytes @ 0xC
  2539  005C                     	ds	1
  2540  005D                     ??___ftpack:	
  2541  005D                     ??_USBCtrlEPServiceComplete:	
  2542                           ; 0 bytes @ 0xD
  2543                           
  2544  005D                     ??_rotate:	
  2545                           ; 0 bytes @ 0xD
  2546                           
  2547  005D                     USBDeviceInit@i:	
  2548                           ; 0 bytes @ 0xD
  2549                           
  2550  005D                     USBTransferOnePacket@data:	
  2551                           ; 1 bytes @ 0xD
  2552                           
  2553  005D                     USBConfigureEndpoint@EPNum:	
  2554                           ; 1 bytes @ 0xD
  2555                           
  2556  005D                     USBCtrlTrfRxService@byteToRead:	
  2557                           ; 1 bytes @ 0xD
  2558                           
  2559  005D                     USBCtrlTrfInHandler@lastDTS:	
  2560                           ; 1 bytes @ 0xD
  2561                           
  2562  005D                     ___awdiv@counter:	
  2563                           ; 1 bytes @ 0xD
  2564                           
  2565  005D                     ___awmod@counter:	
  2566                           ; 1 bytes @ 0xD
  2567                           
  2568  005D                     ___lwdiv@counter:	
  2569                           ; 1 bytes @ 0xD
  2570                           
  2571                           
  2572                           ; 1 bytes @ 0xD
  2573  005D                     	ds	1
  2574  005E                     ??_memset:	
  2575  005E                     ??_USBCtrlTrfOutHandler:	
  2576                           ; 0 bytes @ 0xE
  2577                           
  2578  005E                     ?_SendCmdReply:	
  2579                           ; 0 bytes @ 0xE
  2580                           
  2581  005E                     ?_SendAsicData:	
  2582                           ; 0 bytes @ 0xE
  2583                           
  2584  005E                     USBTransferOnePacket@len:	
  2585                           ; 0 bytes @ 0xE
  2586                           
  2587  005E                     USBConfigureEndpoint@handle:	
  2588                           ; 1 bytes @ 0xE
  2589                           
  2590  005E                     ___awdiv@sign:	
  2591                           ; 1 bytes @ 0xE
  2592                           
  2593  005E                     ___awmod@sign:	
  2594                           ; 1 bytes @ 0xE
  2595                           
  2596  005E                     SendAsicData@work:	
  2597                           ; 1 bytes @ 0xE
  2598                           
  2599  005E                     SendCmdReply@cmd:	
  2600                           ; 2 bytes @ 0xE
  2601                           
  2602  005E                     ___lwdiv@quotient:	
  2603                           ; 2 bytes @ 0xE
  2604                           
  2605                           
  2606                           ; 2 bytes @ 0xE
  2607  005E                     	ds	1
  2608  005F                     ?_USBEnableEndpoint:	
  2609  005F                     ??_USBTransferOnePacket:	
  2610                           ; 0 bytes @ 0xF
  2611                           
  2612  005F                     USBEnableEndpoint@options:	
  2613                           ; 0 bytes @ 0xF
  2614                           
  2615  005F                     ___awdiv@quotient:	
  2616                           ; 1 bytes @ 0xF
  2617                           
  2618  005F                     memset@p:	
  2619                           ; 2 bytes @ 0xF
  2620                           
  2621                           
  2622                           ; 2 bytes @ 0xF
  2623  005F                     	ds	1
  2624  0060                     ??_USBEnableEndpoint:	
  2625  0060                     ??_SendAsicData:	
  2626                           ; 0 bytes @ 0x10
  2627                           
  2628  0060                     ?___awtoft:	
  2629                           ; 0 bytes @ 0x10
  2630                           
  2631  0060                     SendCmdReply@data:	
  2632                           ; 3 bytes @ 0x10
  2633                           
  2634  0060                     ___awtoft@c:	
  2635                           ; 2 bytes @ 0x10
  2636                           
  2637                           
  2638                           ; 2 bytes @ 0x10
  2639  0060                     	ds	1
  2640  0061                     ??_DetectAsics:	
  2641  0061                     USBTransferOnePacket@ep:	
  2642                           ; 0 bytes @ 0x11
  2643                           
  2644                           
  2645                           ; 1 bytes @ 0x11
  2646  0061                     	ds	1
  2647  0062                     USBTransferOnePacket@handle:	
  2648  0062                     SendCmdReply@count:	
  2649                           ; 1 bytes @ 0x12
  2650                           
  2651  0062                     USBEnableEndpoint@p:	
  2652                           ; 1 bytes @ 0x12
  2653                           
  2654                           
  2655                           ; 2 bytes @ 0x12
  2656  0062                     	ds	1
  2657  0063                     ??___awtoft:	
  2658  0063                     SendCmdReply@n:	
  2659                           ; 0 bytes @ 0x13
  2660                           
  2661                           
  2662                           ; 1 bytes @ 0x13
  2663  0063                     	ds	1
  2664  0064                     USBEnableEndpoint@ep:	
  2665                           
  2666                           ; 1 bytes @ 0x14
  2667  0064                     	ds	1
  2668  0065                     ??_USBCBInitEP:	
  2669  0065                     ___awtoft@sign:	
  2670                           ; 0 bytes @ 0x15
  2671                           
  2672  0065                     _ProcessCmd$2058:	
  2673                           ; 1 bytes @ 0x15
  2674                           
  2675                           
  2676                           ; 2 bytes @ 0x15
  2677  0065                     	ds	1
  2678  0066                     ??___ftneg:	
  2679                           
  2680                           ; 0 bytes @ 0x16
  2681  0066                     	ds	1
  2682  0067                     ProcessCmd@cmd:	
  2683                           
  2684                           ; 1 bytes @ 0x17
  2685  0067                     	ds	1
  2686  0068                     ??_USER_USB_CALLBACK_EVENT_HANDLER:	
  2687  0068                     ??_InitializeSystem:	
  2688                           ; 0 bytes @ 0x18
  2689                           
  2690  0068                     ??_UserInit:	
  2691                           ; 0 bytes @ 0x18
  2692                           
  2693  0068                     ??_main:	
  2694                           ; 0 bytes @ 0x18
  2695                           
  2696                           
  2697                           	psect	maintext
  2698  1CCC                     __pmaintext:	
  2699                           ; 0 bytes @ 0x18
  2700 ;;
  2701 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2702 ;;
  2703 ;; *************** function _main *****************
  2704 ;; Defined at:
  2705 ;;		line 98 in file "main.c"
  2706 ;; Parameters:    Size  Location     Type
  2707 ;;		None
  2708 ;; Auto vars:     Size  Location     Type
  2709 ;;		None
  2710 ;; Return value:  Size  Location     Type
  2711 ;;                  2  856[COMMON] int 
  2712 ;; Registers used:
  2713 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  2714 ;; Tracked objects:
  2715 ;;		On entry : 17F/0
  2716 ;;		On exit  : 0/0
  2717 ;;		Unchanged: 0/0
  2718 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2719 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2720 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2721 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2722 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2723 ;;Total ram usage:        0 bytes
  2724 ;; Hardware stack levels required when called:   13
  2725 ;; This function calls:
  2726 ;;		_USBDeviceTasks
  2727 ;;		_AsicPushWork
  2728 ;;		_WorkTick
  2729 ;;		_InitializeSystem
  2730 ;;		_ProcessIO
  2731 ;; This function is called by:
  2732 ;;		Startup code after reset
  2733 ;; This function uses a non-reentrant model
  2734 ;;
  2735                           
  2736                           
  2737                           ;psect for function _main
  2738  1CCC                     _main:	
  2739                           
  2740                           ;main.c: 99: InitializeSystem();
  2741                           
  2742                           ;incstack = 0
  2743                           ; Regs used in _main: [allreg]
  2744  1CCC  319C  24B5  319C   	fcall	_InitializeSystem
  2745  1CCF                     l857:	
  2746                           ;main.c: 101: while(1)
  2747                           
  2748                           
  2749                           ;main.c: 102: {
  2750                           ;main.c: 119: USBDeviceTasks();
  2751  1CCF  318E  2605  319C   	fcall	_USBDeviceTasks
  2752                           
  2753                           ;main.c: 133: if(TMR0IF)
  2754  1CD2  1D0B               	btfss	11,2	;volatile
  2755  1CD3  2CD7               	goto	l7015
  2756                           
  2757                           ;main.c: 134: WorkTick();
  2758  1CD4  3191  21A3  319C   	fcall	_WorkTick
  2759  1CD7                     l7015:	
  2760                           
  2761                           ;main.c: 136: if(Status.State == 'P'){
  2762  1CD7  0022               	movlb	2	; select bank2
  2763  1CD8  0859               	movf	_Status^(0+256),w	;volatile
  2764  1CD9  3A50               	xorlw	80
  2765  1CDA  1D03               	skipz
  2766  1CDB  2CDF               	goto	l7019
  2767                           
  2768                           ;main.c: 137: AsicPushWork();
  2769  1CDC  3195  25D6  319C   	fcall	_AsicPushWork
  2770  1CDF                     l7019:	
  2771                           
  2772                           ;main.c: 138: }
  2773                           ;main.c: 140: ProcessIO();
  2774  1CDF  3194  2461  319C   	fcall	_ProcessIO
  2775  1CE2  2CCF               	goto	l857
  2776  1CE3                     __end_of_main:	
  2777                           
  2778                           	psect	text1
  2779  1461                     __ptext1:	
  2780 ;; *************** function _ProcessIO *****************
  2781 ;; Defined at:
  2782 ;;		line 182 in file "main.c"
  2783 ;; Parameters:    Size  Location     Type
  2784 ;;		None
  2785 ;; Auto vars:     Size  Location     Type
  2786 ;;		None
  2787 ;; Return value:  Size  Location     Type
  2788 ;;		None               void
  2789 ;; Registers used:
  2790 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  2791 ;; Tracked objects:
  2792 ;;		On entry : 0/0
  2793 ;;		On exit  : 0/0
  2794 ;;		Unchanged: 0/0
  2795 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2796 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2797 ;;      Locals:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0
  2798 ;;      Temps:          0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0
  2799 ;;      Totals:         0       0       0       8       0       0       0       0       0       0       0       0       
      +0       0
  2800 ;;Total ram usage:        8 bytes
  2801 ;; Hardware stack levels used:    1
  2802 ;; Hardware stack levels required when called:    8
  2803 ;; This function calls:
  2804 ;;		_USBTransferOnePacket
  2805 ;;		_ProcessCmd
  2806 ;;		___bmul
  2807 ;; This function is called by:
  2808 ;;		_main
  2809 ;; This function uses a non-reentrant model
  2810 ;;
  2811                           
  2812                           
  2813                           ;psect for function _ProcessIO
  2814  1461                     _ProcessIO:	
  2815                           
  2816                           ;main.c: 184: if((USBDeviceState < CONFIGURED_STATE)||(UCONbits.SUSPND==1)) return;
  2817                           
  2818                           ;incstack = 0
  2819                           ; Regs used in _ProcessIO: [wreg-fsr1h+status,2+status,0+btemp+1+pclath+cstack]
  2820  1461  3020               	movlw	32
  2821  1462  0021               	movlb	1	; select bank1
  2822  1463  026E               	subwf	_USBDeviceState^(0+128),w
  2823  1464  1C03               	skipc
  2824  1465  0008               	return
  2825  1466  003D               	movlb	29	; select bank29
  2826  1467  188E               	btfsc	14,1	;volatile
  2827  1468  0008               	return
  2828                           
  2829                           ;main.c: 193: if(!(USBGenericOutHandle==0?0:((volatile BDT_ENTRY*)USBGenericOutHandle)->
      +                          STAT.UOWN)) {
  2830  1469  0022               	movlb	2	; select bank2
  2831  146A  0841               	movf	_USBGenericOutHandle^(0+256),w
  2832  146B  1903               	btfsc	3,2
  2833  146C  2C7A               	goto	l7045
  2834  146D  0841               	movf	_USBGenericOutHandle^(0+256),w
  2835  146E  0086               	movwf	6
  2836  146F  0187               	clrf	7
  2837  1470  0D01               	rlf	1,w
  2838  1471  0D01               	rlf	1,w
  2839  1472  3901               	andlw	1
  2840  1473  00E6               	movwf	??_ProcessIO^(0+256)
  2841  1474  01E7               	clrf	(??_ProcessIO^(0+256)+1)
  2842  1475  0866               	movf	??_ProcessIO^(0+256),w
  2843  1476  00EA               	movwf	_ProcessIO$2376^(0+256)
  2844  1477  0867               	movf	(??_ProcessIO+1)^(0+256),w
  2845  1478  00EB               	movwf	(_ProcessIO$2376+1)^(0+256)
  2846  1479  2C7C               	goto	l7047
  2847  147A                     l7045:	
  2848  147A  01EA               	clrf	_ProcessIO$2376^(0+256)
  2849  147B  01EB               	clrf	(_ProcessIO$2376+1)^(0+256)
  2850  147C                     l7047:	
  2851  147C  086B               	movf	(_ProcessIO$2376+1)^(0+256),w
  2852  147D  046A               	iorwf	_ProcessIO$2376^(0+256),w
  2853  147E  1D03               	skipz
  2854  147F  2C9A               	goto	l7053
  2855                           
  2856                           ;main.c: 197: ProcessCmd(OUTPacket);
  2857  1480  30A0               	movlw	160
  2858  1481  3184  2414  3194   	fcall	_ProcessCmd
  2859                           
  2860                           ;main.c: 198: USBGenericOutHandle = USBTransferOnePacket(1,0,(BYTE*)&OUTPacket,64);
  2861  1484  0020               	movlb	0	; select bank0
  2862  1485  01DC               	clrf	?_USBTransferOnePacket
  2863  1486  30A0               	movlw	160
  2864  1487  0022               	movlb	2	; select bank2
  2865  1488  00E6               	movwf	??_ProcessIO^(0+256)
  2866  1489  0866               	movf	??_ProcessIO^(0+256),w
  2867  148A  0020               	movlb	0	; select bank0
  2868  148B  00DD               	movwf	?_USBTransferOnePacket+1
  2869  148C  3040               	movlw	64
  2870  148D  0022               	movlb	2	; select bank2
  2871  148E  00E7               	movwf	(??_ProcessIO+1)^(0+256)
  2872  148F  0867               	movf	(??_ProcessIO+1)^(0+256),w
  2873  1490  0020               	movlb	0	; select bank0
  2874  1491  00DE               	movwf	?_USBTransferOnePacket+2
  2875  1492  3001               	movlw	1
  2876  1493  319F  27B2  3194   	fcall	_USBTransferOnePacket
  2877  1496  0022               	movlb	2	; select bank2
  2878  1497  00E8               	movwf	(??_ProcessIO+2)^(0+256)
  2879  1498  0868               	movf	(??_ProcessIO+2)^(0+256),w
  2880  1499  00C1               	movwf	_USBGenericOutHandle^(0+256)
  2881  149A                     l7053:	
  2882                           
  2883                           ;main.c: 199: }
  2884                           ;main.c: 201: if(WQI != WQX && !(USBGenericInHandle==0?0:((volatile BDT_ENTRY*)USBGeneri
      +                          cInHandle)->STAT.UOWN)) {
  2885  149A  0856               	movf	_WQI^(0+256),w
  2886  149B  0657               	xorwf	_WQX^(0+256),w
  2887  149C  1903               	skipnz
  2888  149D  0008               	return
  2889  149E  0840               	movf	_USBGenericInHandle^(0+256),w
  2890  149F  1903               	btfsc	3,2
  2891  14A0  2CAE               	goto	l7059
  2892  14A1  0840               	movf	_USBGenericInHandle^(0+256),w
  2893  14A2  0086               	movwf	6
  2894  14A3  0187               	clrf	7
  2895  14A4  0D01               	rlf	1,w
  2896  14A5  0D01               	rlf	1,w
  2897  14A6  3901               	andlw	1
  2898  14A7  00E6               	movwf	??_ProcessIO^(0+256)
  2899  14A8  01E7               	clrf	(??_ProcessIO^(0+256)+1)
  2900  14A9  0866               	movf	??_ProcessIO^(0+256),w
  2901  14AA  00EC               	movwf	_ProcessIO$2410^(0+256)
  2902  14AB  0867               	movf	(??_ProcessIO+1)^(0+256),w
  2903  14AC  00ED               	movwf	(_ProcessIO$2410+1)^(0+256)
  2904  14AD  2CB0               	goto	l7061
  2905  14AE                     l7059:	
  2906  14AE  01EC               	clrf	_ProcessIO$2410^(0+256)
  2907  14AF  01ED               	clrf	(_ProcessIO$2410+1)^(0+256)
  2908  14B0                     l7061:	
  2909  14B0  086D               	movf	(_ProcessIO$2410+1)^(0+256),w
  2910  14B1  046C               	iorwf	_ProcessIO$2410^(0+256),w
  2911  14B2  1D03               	skipz
  2912  14B3  0008               	return
  2913                           
  2914                           ;main.c: 202: USBGenericInHandle = USBTransferOnePacket(1,1,(BYTE*)&INPacket[WQX*15],15);
  2915  14B4  0020               	movlb	0	; select bank0
  2916  14B5  01DC               	clrf	?_USBTransferOnePacket
  2917  14B6  0ADC               	incf	?_USBTransferOnePacket,f
  2918  14B7  300F               	movlw	15
  2919  14B8  0022               	movlb	2	; select bank2
  2920  14B9  00E6               	movwf	??_ProcessIO^(0+256)
  2921  14BA  0866               	movf	??_ProcessIO^(0+256),w
  2922  14BB  0020               	movlb	0	; select bank0
  2923  14BC  00D8               	movwf	?___bmul
  2924  14BD  0022               	movlb	2	; select bank2
  2925  14BE  0857               	movf	_WQX^(0+256),w
  2926  14BF  319C  2450  3194   	fcall	___bmul
  2927  14C2  3E20               	addlw	32
  2928  14C3  0022               	movlb	2	; select bank2
  2929  14C4  00E7               	movwf	(??_ProcessIO+1)^(0+256)
  2930  14C5  0867               	movf	(??_ProcessIO+1)^(0+256),w
  2931  14C6  0020               	movlb	0	; select bank0
  2932  14C7  00DD               	movwf	?_USBTransferOnePacket+1
  2933  14C8  300F               	movlw	15
  2934  14C9  0022               	movlb	2	; select bank2
  2935  14CA  00E8               	movwf	(??_ProcessIO+2)^(0+256)
  2936  14CB  0868               	movf	(??_ProcessIO+2)^(0+256),w
  2937  14CC  0020               	movlb	0	; select bank0
  2938  14CD  00DE               	movwf	?_USBTransferOnePacket+2
  2939  14CE  3001               	movlw	1
  2940  14CF  319F  27B2         	fcall	_USBTransferOnePacket
  2941  14D1  0022               	movlb	2	; select bank2
  2942  14D2  00E9               	movwf	(??_ProcessIO+3)^(0+256)
  2943  14D3  0869               	movf	(??_ProcessIO+3)^(0+256),w
  2944  14D4  00C0               	movwf	_USBGenericInHandle^(0+256)
  2945                           
  2946                           ;main.c: 203: WQX = (WQX+1) & 3;
  2947  14D5  0A57               	incf	_WQX^(0+256),w
  2948  14D6  3903               	andlw	3
  2949  14D7  00E6               	movwf	??_ProcessIO^(0+256)
  2950  14D8  0866               	movf	??_ProcessIO^(0+256),w
  2951  14D9  00D7               	movwf	_WQX^(0+256)
  2952  14DA  0008               	return
  2953  14DB                     __end_of_ProcessIO:	
  2954                           
  2955                           	psect	text2
  2956  0414                     __ptext2:	
  2957 ;; *************** function _ProcessCmd *****************
  2958 ;; Defined at:
  2959 ;;		line 45 in file "klondike.c"
  2960 ;; Parameters:    Size  Location     Type
  2961 ;;  cmd             1    wreg     PTR unsigned char 
  2962 ;;		 -> OUTPacket(64), 
  2963 ;; Auto vars:     Size  Location     Type
  2964 ;;  cmd             1   23[BANK0 ] PTR unsigned char 
  2965 ;;		 -> OUTPacket(64), 
  2966 ;; Return value:  Size  Location     Type
  2967 ;;		None               void
  2968 ;; Registers used:
  2969 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  2970 ;; Tracked objects:
  2971 ;;		On entry : 0/0
  2972 ;;		On exit  : 0/0
  2973 ;;		Unchanged: 0/0
  2974 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2975 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2976 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2977 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  2978 ;;      Totals:         0       3       4       0       0       0       0       0       0       0       0       0       
      +0       0
  2979 ;;Total ram usage:        7 bytes
  2980 ;; Hardware stack levels used:    1
  2981 ;; Hardware stack levels required when called:    7
  2982 ;; This function calls:
  2983 ;;		_AsicPushWork
  2984 ;;		_SendCmdReply
  2985 ;;		___lwdiv
  2986 ;;		___wmul
  2987 ;; This function is called by:
  2988 ;;		_ProcessIO
  2989 ;; This function uses a non-reentrant model
  2990 ;;
  2991                           
  2992                           
  2993                           ;psect for function _ProcessCmd
  2994  0414                     _ProcessCmd:	
  2995                           
  2996                           ;incstack = 0
  2997                           ; Regs used in _ProcessCmd: [wreg-fsr1h+status,2+status,0+btemp+1+pclath+cstack]
  2998                           ;ProcessCmd@cmd stored from wreg
  2999  0414  0020               	movlb	0	; select bank0
  3000  0415  00E7               	movwf	ProcessCmd@cmd
  3001                           
  3002                           ;klondike.c: 48: switch(cmd[0]) {
  3003  0416  2D78               	goto	l6955
  3004  0417                     l6887:	
  3005                           ;klondike.c: 49: case 'W':
  3006                           
  3007                           
  3008                           ;klondike.c: 50: if( Status.WorkQC < 4-1 ) {
  3009  0417  3003               	movlw	3
  3010  0418  0022               	movlb	2	; select bank2
  3011  0419  025C               	subwf	(_Status^(0+256)+3),w	;volatile
  3012  041A  1803               	skipnc
  3013  041B  2D62               	goto	L4
  3014                           
  3015                           ;klondike.c: 51: WorkQue[ (WorkNow + Status.WorkQC++) & 4-1 ] = *(WORKTASK *)(cmd+2);
  3016  041C  0020               	movlb	0	; select bank0
  3017  041D  0867               	movf	ProcessCmd@cmd,w
  3018  041E  3E02               	addlw	2
  3019  041F  0086               	movwf	6
  3020  0420  3002               	movlw	2	; select bank4/5
  3021  0421  0087               	movwf	7
  3022  0422  0022               	movlb	2	; select bank2
  3023  0423  0846               	movf	_WorkNow^(0+256),w
  3024  0424  075C               	addwf	(_Status^(0+256)+3),w	;volatile
  3025  0425  0021               	movlb	1	; select bank1
  3026  0426  00EA               	movwf	??_ProcessCmd^(0+128)
  3027  0427  01EB               	clrf	(??_ProcessCmd^(0+128)+1)
  3028  0428  0DEB               	rlf	(??_ProcessCmd+1)^(0+128),f
  3029  0429  3003               	movlw	3
  3030  042A  056A               	andwf	??_ProcessCmd^(0+128),w
  3031  042B  0020               	movlb	0	; select bank0
  3032  042C  00D8               	movwf	?___wmul
  3033  042D  3000               	movlw	0
  3034  042E  0021               	movlb	1	; select bank1
  3035  042F  056B               	andwf	(??_ProcessCmd+1)^(0+128),w
  3036  0430  0020               	movlb	0	; select bank0
  3037  0431  00D9               	movwf	?___wmul+1
  3038  0432  302D               	movlw	45
  3039  0433  00DA               	movwf	?___wmul+2
  3040  0434  3000               	movlw	0
  3041  0435  00DB               	movwf	?___wmul+3
  3042  0436  319D  2589  3184   	fcall	___wmul
  3043  0439  303C               	movlw	60
  3044  043A  0021               	movlb	1	; select bank1
  3045  043B  00EC               	movwf	(??_ProcessCmd+2)^(0+128)
  3046  043C  3023               	movlw	35
  3047  043D  00ED               	movwf	((??_ProcessCmd+2)^(0+128)+1)
  3048  043E  0020               	movlb	0	; select bank0
  3049  043F  0858               	movf	?___wmul,w
  3050  0440  0021               	movlb	1	; select bank1
  3051  0441  076C               	addwf	(??_ProcessCmd+2)^(0+128),w
  3052  0442  0084               	movwf	4
  3053  0443  0020               	movlb	0	; select bank0
  3054  0444  0859               	movf	?___wmul+1,w
  3055  0445  0021               	movlb	1	; select bank1
  3056  0446  3D6D               	addwfc	(??_ProcessCmd+3)^(0+128),w
  3057  0447  0085               	movwf	5
  3058  0448  302D               	movlw	45
  3059  0449  00FF               	movwf	127
  3060  044A                     u7810:	
  3061  044A  0016               	moviw fsr1++
  3062  044B  001A               	movwi fsr0++
  3063  044C  0BFF               	decfsz	127,f
  3064  044D  2C4A               	goto	u7810
  3065  044E  3001               	movlw	1
  3066  044F  00EA               	movwf	??_ProcessCmd^(0+128)
  3067  0450  086A               	movf	??_ProcessCmd^(0+128),w
  3068  0451  0022               	movlb	2	; select bank2
  3069  0452  07DC               	addwf	(_Status^(0+256)+3),f	;volatile
  3070                           
  3071                           ;klondike.c: 52: if(Status.State == 'R') {
  3072  0453  0859               	movf	_Status^(0+256),w	;volatile
  3073  0454  3A52               	xorlw	82
  3074  0455  1D03               	skipz
  3075  0456  2D62               	goto	L4
  3076                           
  3077                           ;klondike.c: 53: AsicPushWork();
  3078  0457  3195  25D6  3184   	fcall	_AsicPushWork
  3079  045A  2D62               	goto	L4
  3080  045B                     l6899:	
  3081                           ;klondike.c: 59: case 'A':
  3082                           
  3083                           ;klondike.c: 58: break;
  3084                           
  3085                           ;klondike.c: 57: Status.Noise = Status.ErrorCount = 0;
  3086                           
  3087                           ;klondike.c: 54: }
  3088                           ;klondike.c: 55: }
  3089                           ;klondike.c: 56: SendCmdReply(cmd, (char *)&Status, sizeof(Status));
  3090                           
  3091                           
  3092                           ;klondike.c: 60: Status.WorkQC = WorkNow = 0;
  3093  045B  0022               	movlb	2	; select bank2
  3094  045C  01C6               	clrf	_WorkNow^(0+256)
  3095  045D  01DC               	clrf	(_Status^(0+256)+3)	;volatile
  3096                           
  3097                           ;klondike.c: 61: Status.State = 'R';
  3098  045E  3052               	movlw	82
  3099  045F  2D5D               	goto	L3
  3100  0460                     l6907:	
  3101                           ;klondike.c: 65: case 'I':
  3102                           
  3103                           ;klondike.c: 64: break;
  3104                           
  3105                           ;klondike.c: 63: Status.Noise = Status.ErrorCount = 0;
  3106                           
  3107                           ;klondike.c: 62: SendCmdReply(cmd, (char *)&Status, sizeof(Status));
  3108                           
  3109                           
  3110                           ;klondike.c: 66: SendCmdReply(cmd, (char *)&ID, sizeof(ID));
  3111  0460  0020               	movlb	0	; select bank0
  3112  0461  0867               	movf	ProcessCmd@cmd,w
  3113  0462  00DE               	movwf	?_SendCmdReply
  3114  0463  3002               	movlw	2
  3115  0464  00DF               	movwf	?_SendCmdReply+1
  3116  0465  309F               	movlw	low (_ID| (0+32768))
  3117  0466  00E0               	movwf	?_SendCmdReply+2
  3118  0467  3088               	movlw	high (_ID| (0+32768))
  3119  0468  00E1               	movwf	?_SendCmdReply+3
  3120  0469  300C               	movlw	12
  3121  046A  0021               	movlb	1	; select bank1
  3122  046B  00EA               	movwf	??_ProcessCmd^(0+128)
  3123  046C  086A               	movf	??_ProcessCmd^(0+128),w
  3124  046D  0020               	movlb	0	; select bank0
  3125  046E  00E2               	movwf	?_SendCmdReply+4
  3126  046F  318B  2337  3184   	fcall	_SendCmdReply
  3127                           
  3128                           ;klondike.c: 67: break;
  3129  0472  2D91               	goto	l695
  3130  0473                     l6909:	
  3131                           ;klondike.c: 68: case 'S':
  3132                           
  3133  0473  2D62               	goto	L4
  3134  0474                     l6913:	
  3135                           ;klondike.c: 72: case 'C':
  3136                           
  3137                           ;klondike.c: 71: break;
  3138                           
  3139                           ;klondike.c: 70: Status.Noise = Status.ErrorCount = 0;
  3140                           
  3141                           ;klondike.c: 69: SendCmdReply(cmd, (char *)&Status, sizeof(Status));
  3142                           
  3143                           
  3144                           ;klondike.c: 73: if( *(WORD *)&cmd[2] != 0 ) {
  3145  0474  0020               	movlb	0	; select bank0
  3146  0475  0867               	movf	ProcessCmd@cmd,w
  3147  0476  3E02               	addlw	2
  3148  0477  0086               	movwf	6
  3149  0478  3002               	movlw	2	; select bank4/5
  3150  0479  0087               	movwf	7
  3151  047A  0016               	moviw fsr1++
  3152  047B  0401               	iorwf	1,w
  3153  047C  1903               	skipnz
  3154  047D  2D23               	goto	l6939
  3155                           
  3156                           ;klondike.c: 74: Cfg = *(WORKCFG *)(cmd+2);
  3157  047E  0867               	movf	ProcessCmd@cmd,w
  3158  047F  3E02               	addlw	2
  3159  0480  0086               	movwf	6
  3160  0481  3002               	movlw	2	; select bank4/5
  3161  0482  0087               	movwf	7
  3162  0483  30E4               	movlw	low _Cfg
  3163  0484  0084               	movwf	4
  3164  0485  3001               	movlw	high _Cfg
  3165  0486  0085               	movwf	5
  3166  0487  3006               	movlw	6
  3167  0488  00FF               	movwf	127
  3168  0489                     u7840:	
  3169  0489  0016               	moviw fsr1++
  3170  048A  001A               	movwi fsr0++
  3171  048B  0BFF               	decfsz	127,f
  3172  048C  2C89               	goto	u7840
  3173                           
  3174                           ;klondike.c: 75: if(Cfg.HashClock < 128)
  3175  048D  3000               	movlw	0
  3176  048E  0023               	movlb	3	; select bank3
  3177  048F  0265               	subwf	(_Cfg+1)^(0+384),w
  3178  0490  3080               	movlw	128
  3179  0491  1903               	skipnz
  3180  0492  0264               	subwf	_Cfg^(0+384),w
  3181  0493  1803               	skipnc
  3182  0494  2C99               	goto	l701
  3183                           
  3184                           ;klondike.c: 76: Cfg.HashClock = 128;
  3185  0495  3080               	movlw	128
  3186  0496  00E4               	movwf	_Cfg^(0+384)
  3187  0497  3000               	movlw	0
  3188  0498  00E5               	movwf	(_Cfg^(0+384)+1)
  3189  0499                     l701:	
  3190                           
  3191                           ;klondike.c: 77: if(Cfg.HashClock <= 250 && Cfg.HashClock >= 450/2)
  3192  0499  3000               	movlw	0
  3193  049A  0265               	subwf	(_Cfg+1)^(0+384),w
  3194  049B  30FB               	movlw	251
  3195  049C  1903               	skipnz
  3196  049D  0264               	subwf	_Cfg^(0+384),w
  3197  049E  1803               	skipnc
  3198  049F  2CAB               	goto	l702
  3199  04A0  3000               	movlw	0
  3200  04A1  0265               	subwf	(_Cfg+1)^(0+384),w
  3201  04A2  30E1               	movlw	225
  3202  04A3  1903               	skipnz
  3203  04A4  0264               	subwf	_Cfg^(0+384),w
  3204  04A5  1C03               	skipc
  3205  04A6  2CAB               	goto	l702
  3206                           
  3207                           ;klondike.c: 78: Cfg.HashClock = 450/2-1;
  3208  04A7  30E0               	movlw	224
  3209  04A8  00E4               	movwf	_Cfg^(0+384)
  3210  04A9  3000               	movlw	0
  3211  04AA  00E5               	movwf	(_Cfg^(0+384)+1)
  3212  04AB                     l702:	
  3213                           
  3214                           ;klondike.c: 79: if(Cfg.HashClock >= 450)
  3215  04AB  3001               	movlw	1
  3216  04AC  0265               	subwf	(_Cfg+1)^(0+384),w
  3217  04AD  30C2               	movlw	194
  3218  04AE  1903               	skipnz
  3219  04AF  0264               	subwf	_Cfg^(0+384),w
  3220  04B0  1C03               	skipc
  3221  04B1  2CB6               	goto	l703
  3222                           
  3223                           ;klondike.c: 80: Cfg.HashClock = 450-1;
  3224  04B2  30C1               	movlw	193
  3225  04B3  00E4               	movwf	_Cfg^(0+384)
  3226  04B4  3001               	movlw	1
  3227  04B5  00E5               	movwf	(_Cfg^(0+384)+1)
  3228  04B6                     l703:	
  3229                           
  3230                           ;klondike.c: 81: if(Cfg.HashClock <= 250)
  3231  04B6  3000               	movlw	0
  3232  04B7  0265               	subwf	(_Cfg+1)^(0+384),w
  3233  04B8  30FB               	movlw	251
  3234  04B9  1903               	skipnz
  3235  04BA  0264               	subwf	_Cfg^(0+384),w
  3236  04BB  1803               	skipnc
  3237  04BC  2CD6               	goto	l6929
  3238                           
  3239                           ;klondike.c: 82: ClockCfg[0] = (((DWORD)Cfg.HashClock*2) << 18) | 0x00030017;
  3240  04BD  0864               	movf	_Cfg^(0+384),w
  3241  04BE  0021               	movlb	1	; select bank1
  3242  04BF  00EA               	movwf	??_ProcessCmd^(0+128)
  3243  04C0  0023               	movlb	3	; select bank3
  3244  04C1  0865               	movf	(_Cfg+1)^(0+384),w
  3245  04C2  0021               	movlb	1	; select bank1
  3246  04C3  00EB               	movwf	(??_ProcessCmd^(0+128)+1)
  3247  04C4  01EC               	clrf	(??_ProcessCmd^(0+128)+2)
  3248  04C5  01ED               	clrf	(??_ProcessCmd^(0+128)+3)
  3249  04C6  3001               	movlw	1
  3250  04C7                     u7905:	
  3251  04C7  35EA               	lslf	??_ProcessCmd^(0+128),f
  3252  04C8  0DEB               	rlf	(??_ProcessCmd^(0+128)+1),f
  3253  04C9  0DEC               	rlf	(??_ProcessCmd^(0+128)+2),f
  3254  04CA  0DED               	rlf	(??_ProcessCmd^(0+128)+3),f
  3255  04CB  0B89               	decfsz	9,f
  3256  04CC  2CC7               	goto	u7905
  3257  04CD  3012               	movlw	18
  3258  04CE                     u7915:	
  3259  04CE  35EA               	lslf	??_ProcessCmd^(0+128),f
  3260  04CF  0DEB               	rlf	(??_ProcessCmd^(0+128)+1),f
  3261  04D0  0DEC               	rlf	(??_ProcessCmd^(0+128)+2),f
  3262  04D1  0DED               	rlf	(??_ProcessCmd^(0+128)+3),f
  3263  04D2  0B89               	decfsz	9,f
  3264  04D3  2CCE               	goto	u7915
  3265  04D4  3017               	movlw	23
  3266  04D5  2CE7               	goto	L1
  3267  04D6                     l6929:	
  3268                           
  3269                           ;klondike.c: 83: else
  3270                           ;klondike.c: 84: ClockCfg[0] = ((DWORD)Cfg.HashClock << 18) | 0x00030007;
  3271  04D6  0864               	movf	_Cfg^(0+384),w
  3272  04D7  0021               	movlb	1	; select bank1
  3273  04D8  00EA               	movwf	??_ProcessCmd^(0+128)
  3274  04D9  0023               	movlb	3	; select bank3
  3275  04DA  0865               	movf	(_Cfg+1)^(0+384),w
  3276  04DB  0021               	movlb	1	; select bank1
  3277  04DC  00EB               	movwf	(??_ProcessCmd^(0+128)+1)
  3278  04DD  01EC               	clrf	(??_ProcessCmd^(0+128)+2)
  3279  04DE  01ED               	clrf	(??_ProcessCmd^(0+128)+3)
  3280  04DF  3012               	movlw	18
  3281  04E0                     u7925:	
  3282  04E0  35EA               	lslf	??_ProcessCmd^(0+128),f
  3283  04E1  0DEB               	rlf	(??_ProcessCmd^(0+128)+1),f
  3284  04E2  0DEC               	rlf	(??_ProcessCmd^(0+128)+2),f
  3285  04E3  0DED               	rlf	(??_ProcessCmd^(0+128)+3),f
  3286  04E4  0B89               	decfsz	9,f
  3287  04E5  2CE0               	goto	u7925
  3288  04E6  3007               	movlw	7
  3289  04E7                     L1:	
  3290  04E7  046A               	iorwf	??_ProcessCmd^(0+128),w
  3291  04E8  0023               	movlb	3	; select bank3
  3292  04E9  00DC               	movwf	_ClockCfg^(0+384)
  3293  04EA  3000               	movlw	0
  3294  04EB  0021               	movlb	1	; select bank1
  3295  04EC  046B               	iorwf	(??_ProcessCmd+1)^(0+128),w
  3296  04ED  0023               	movlb	3	; select bank3
  3297  04EE  00DD               	movwf	(_ClockCfg+1)^(0+384)
  3298  04EF  3003               	movlw	3
  3299  04F0  0021               	movlb	1	; select bank1
  3300  04F1  046C               	iorwf	(??_ProcessCmd+2)^(0+128),w
  3301  04F2  0023               	movlb	3	; select bank3
  3302  04F3  00DE               	movwf	(_ClockCfg+2)^(0+384)
  3303  04F4  3000               	movlw	0
  3304  04F5  0021               	movlb	1	; select bank1
  3305  04F6  046D               	iorwf	(??_ProcessCmd+3)^(0+128),w
  3306  04F7  0023               	movlb	3	; select bank3
  3307  04F8  00DF               	movwf	(_ClockCfg+3)^(0+384)
  3308                           
  3309                           ;klondike.c: 85: HashTime = 256 - ((WORD)12285/Cfg.HashClock);
  3310  04F9  0865               	movf	(_Cfg+1)^(0+384),w
  3311  04FA  0020               	movlb	0	; select bank0
  3312  04FB  01D9               	clrf	?___lwdiv+1
  3313  04FC  07D9               	addwf	?___lwdiv+1,f
  3314  04FD  0023               	movlb	3	; select bank3
  3315  04FE  0864               	movf	_Cfg^(0+384),w
  3316  04FF  0020               	movlb	0	; select bank0
  3317  0500  01D8               	clrf	?___lwdiv
  3318  0501  07D8               	addwf	?___lwdiv,f
  3319  0502  30FD               	movlw	253
  3320  0503  00DA               	movwf	?___lwdiv+2
  3321  0504  302F               	movlw	47
  3322  0505  00DB               	movwf	?___lwdiv+3
  3323  0506  319E  26B4  3184   	fcall	___lwdiv
  3324  0509  0020               	movlb	0	; select bank0
  3325  050A  0858               	movf	?___lwdiv,w
  3326  050B  3AFF               	xorlw	255
  3327  050C  3E01               	addlw	1
  3328  050D  0021               	movlb	1	; select bank1
  3329  050E  00EA               	movwf	??_ProcessCmd^(0+128)
  3330  050F  086A               	movf	??_ProcessCmd^(0+128),w
  3331  0510  0022               	movlb	2	; select bank2
  3332  0511  00D8               	movwf	_HashTime^(0+256)
  3333                           
  3334                           ;klondike.c: 86: if(Cfg.TempTarget != 0)
  3335  0512  0023               	movlb	3	; select bank3
  3336  0513  0866               	movf	(_Cfg^(0+384)+2),w
  3337  0514  1903               	btfsc	3,2
  3338  0515  2D1D               	goto	l6937
  3339                           
  3340                           ;klondike.c: 87: TempTarget = Cfg.TempTarget;
  3341  0516  0866               	movf	(_Cfg^(0+384)+2),w
  3342  0517  0021               	movlb	1	; select bank1
  3343  0518  00EA               	movwf	??_ProcessCmd^(0+128)
  3344  0519  086A               	movf	??_ProcessCmd^(0+128),w
  3345  051A  0023               	movlb	3	; select bank3
  3346  051B  00EA               	movwf	_TempTarget^(0+384)
  3347  051C  2D23               	goto	l6939
  3348  051D                     l6937:	
  3349                           
  3350                           ;klondike.c: 88: else
  3351                           ;klondike.c: 89: Cfg.TempTarget = 143;
  3352  051D  308F               	movlw	143
  3353  051E  0021               	movlb	1	; select bank1
  3354  051F  00EA               	movwf	??_ProcessCmd^(0+128)
  3355  0520  086A               	movf	??_ProcessCmd^(0+128),w
  3356  0521  0023               	movlb	3	; select bank3
  3357  0522  00E6               	movwf	(_Cfg^(0+384)+2)
  3358  0523                     l6939:	
  3359                           
  3360                           ;klondike.c: 90: }
  3361                           ;klondike.c: 91: SendCmdReply(cmd, (char *)&Cfg, sizeof(Cfg));
  3362  0523  0020               	movlb	0	; select bank0
  3363  0524  0867               	movf	ProcessCmd@cmd,w
  3364  0525  00DE               	movwf	?_SendCmdReply
  3365  0526  3002               	movlw	2
  3366  0527  00DF               	movwf	?_SendCmdReply+1
  3367  0528  30E4               	movlw	low _Cfg
  3368  0529  00E0               	movwf	?_SendCmdReply+2
  3369  052A  3001               	movlw	high _Cfg
  3370  052B  00E1               	movwf	?_SendCmdReply+3
  3371  052C  3006               	movlw	6
  3372  052D  0021               	movlb	1	; select bank1
  3373  052E  00EA               	movwf	??_ProcessCmd^(0+128)
  3374  052F  086A               	movf	??_ProcessCmd^(0+128),w
  3375  0530  0020               	movlb	0	; select bank0
  3376  0531  00E2               	movwf	?_SendCmdReply+4
  3377  0532  318B  2337  3184   	fcall	_SendCmdReply
  3378                           
  3379                           ;klondike.c: 92: break;
  3380  0535  2D91               	goto	l695
  3381  0536                     l6941:	
  3382                           ;klondike.c: 93: case 'E':
  3383                           
  3384                           
  3385                           ;klondike.c: 94: LATAbits.LATA4 = (cmd[2] == '1');
  3386  0536  0020               	movlb	0	; select bank0
  3387  0537  0867               	movf	ProcessCmd@cmd,w
  3388  0538  3E02               	addlw	2
  3389  0539  0086               	movwf	6
  3390  053A  3002               	movlw	2	; select bank4/5
  3391  053B  0087               	movwf	7
  3392  053C  0801               	movf	1,w
  3393  053D  3A31               	xorlw	49
  3394  053E  3000               	movlw	0
  3395  053F  1903               	skipnz
  3396  0540  3001               	movlw	1
  3397  0541  0021               	movlb	1	; select bank1
  3398  0542  00EA               	movwf	??_ProcessCmd^(0+128)
  3399  0543  0EEA               	swapf	??_ProcessCmd^(0+128),f
  3400  0544  0022               	movlb	2	; select bank2
  3401  0545  080C               	movf	12,w	;volatile
  3402  0546  0021               	movlb	1	; select bank1
  3403  0547  066A               	xorwf	??_ProcessCmd^(0+128),w
  3404  0548  39EF               	andlw	-17
  3405  0549  066A               	xorwf	??_ProcessCmd^(0+128),w
  3406  054A  0022               	movlb	2	; select bank2
  3407  054B  008C               	movwf	12	;volatile
  3408                           
  3409                           ;klondike.c: 95: Status.State = (cmd[2] == '1') ? 'R' : 'D';
  3410  054C  0020               	movlb	0	; select bank0
  3411  054D  0867               	movf	ProcessCmd@cmd,w
  3412  054E  3E02               	addlw	2
  3413  054F  0086               	movwf	6
  3414  0550  3002               	movlw	2	; select bank4/5
  3415  0551  0087               	movwf	7
  3416  0552  0801               	movf	1,w
  3417  0553  3A31               	xorlw	49
  3418  0554  1903               	skipnz
  3419  0555  2D58               	goto	l6947
  3420  0556  3044               	movlw	68
  3421  0557  2D59               	goto	L2
  3422  0558                     l6947:	
  3423  0558  3052               	movlw	82
  3424  0559                     L2:	
  3425  0559  00E5               	movwf	_ProcessCmd$2058
  3426  055A  3000               	movlw	0
  3427  055B  00E6               	movwf	_ProcessCmd$2058+1
  3428  055C  0865               	movf	_ProcessCmd$2058,w
  3429  055D                     L3:	
  3430  055D  0021               	movlb	1	; select bank1
  3431  055E  00EA               	movwf	??_ProcessCmd^(0+128)
  3432  055F  086A               	movf	??_ProcessCmd^(0+128),w
  3433  0560  0022               	movlb	2	; select bank2
  3434  0561  00D9               	movwf	_Status^(0+256)	;volatile
  3435  0562                     L4:	
  3436                           
  3437                           ;klondike.c: 96: SendCmdReply(cmd, (char *)&Status, sizeof(Status));
  3438  0562  0020               	movlb	0	; select bank0
  3439  0563  0867               	movf	ProcessCmd@cmd,w
  3440  0564  00DE               	movwf	?_SendCmdReply
  3441  0565  3002               	movlw	2
  3442  0566  00DF               	movwf	?_SendCmdReply+1
  3443  0567  3059               	movlw	low _Status
  3444  0568  00E0               	movwf	?_SendCmdReply+2
  3445  0569  3001               	movlw	high _Status
  3446  056A  00E1               	movwf	?_SendCmdReply+3
  3447  056B  300D               	movlw	13
  3448  056C  0021               	movlb	1	; select bank1
  3449  056D  00EA               	movwf	??_ProcessCmd^(0+128)
  3450  056E  086A               	movf	??_ProcessCmd^(0+128),w
  3451  056F  0020               	movlb	0	; select bank0
  3452  0570  00E2               	movwf	?_SendCmdReply+4
  3453  0571  318B  2337  3184   	fcall	_SendCmdReply
  3454                           
  3455                           ;klondike.c: 97: Status.Noise = Status.ErrorCount = 0;
  3456  0574  0022               	movlb	2	; select bank2
  3457  0575  01E0               	clrf	(_Status^(0+256)+7)	;volatile
  3458  0576  01E5               	clrf	(_Status^(0+256)+12)	;volatile
  3459                           
  3460                           ;klondike.c: 107: }
  3461                           
  3462                           ;klondike.c: 106: break;
  3463                           
  3464                           ;klondike.c: 105: default:
  3465                           
  3466                           ;klondike.c: 98: break;
  3467  0577  2D91               	goto	l695
  3468  0578                     l6955:	
  3469  0578  0020               	movlb	0	; select bank0
  3470  0579  0867               	movf	ProcessCmd@cmd,w
  3471  057A  0086               	movwf	6
  3472  057B  3002               	movlw	2	; select bank4/5
  3473  057C  0087               	movwf	7
  3474  057D  0801               	movf	1,w
  3475                           
  3476                           ; Switch size 1, requested type "space"
  3477                           ; Number of cases is 6, Range of values is 65 to 87
  3478                           ; switch strategies available:
  3479                           ; Name         Instructions Cycles
  3480                           ; simple_byte           19    10 (average)
  3481                           ; direct_byte           55     9 (fixed)
  3482                           ; jumptable            263     9 (fixed)
  3483                           ;	Chosen strategy is simple_byte
  3484  057E  3A41               	xorlw	65	; case 65
  3485  057F  1903               	skipnz
  3486  0580  2C5B               	goto	l6899
  3487  0581  3A02               	xorlw	2	; case 67
  3488  0582  1903               	skipnz
  3489  0583  2C74               	goto	l6913
  3490  0584  3A06               	xorlw	6	; case 69
  3491  0585  1903               	skipnz
  3492  0586  2D36               	goto	l6941
  3493  0587  3A0C               	xorlw	12	; case 73
  3494  0588  1903               	skipnz
  3495  0589  2C60               	goto	l6907
  3496  058A  3A1A               	xorlw	26	; case 83
  3497  058B  1903               	skipnz
  3498  058C  2C73               	goto	l6909
  3499  058D  3A04               	xorlw	4	; case 87
  3500  058E  1903               	skipnz
  3501  058F  2C17               	goto	l6887
  3502  0590  2D91               	goto	l695
  3503  0591                     l695:	
  3504                           
  3505                           ;klondike.c: 108: LATAbits.LATA5 = 1;;
  3506  0591  0022               	movlb	2	; select bank2
  3507  0592  168C               	bsf	12,5	;volatile
  3508  0593  0008               	return
  3509  0594                     __end_of_ProcessCmd:	
  3510                           
  3511                           	psect	text3
  3512  1EB4                     __ptext3:	
  3513 ;; *************** function ___lwdiv *****************
  3514 ;; Defined at:
  3515 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.20\sources\pic\lwdiv.c"
  3516 ;; Parameters:    Size  Location     Type
  3517 ;;  divisor         2    8[BANK0 ] unsigned int 
  3518 ;;  dividend        2   10[BANK0 ] unsigned int 
  3519 ;; Auto vars:     Size  Location     Type
  3520 ;;  quotient        2   14[BANK0 ] unsigned int 
  3521 ;;  counter         1   13[BANK0 ] unsigned char 
  3522 ;; Return value:  Size  Location     Type
  3523 ;;                  2    8[BANK0 ] unsigned int 
  3524 ;; Registers used:
  3525 ;;		wreg, status,2, status,0
  3526 ;; Tracked objects:
  3527 ;;		On entry : 0/0
  3528 ;;		On exit  : 0/0
  3529 ;;		Unchanged: 0/0
  3530 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3531 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3532 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3533 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3534 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3535 ;;Total ram usage:        8 bytes
  3536 ;; Hardware stack levels used:    1
  3537 ;; Hardware stack levels required when called:    4
  3538 ;; This function calls:
  3539 ;;		Nothing
  3540 ;; This function is called by:
  3541 ;;		_ProcessCmd
  3542 ;; This function uses a non-reentrant model
  3543 ;;
  3544                           
  3545                           
  3546                           ;psect for function ___lwdiv
  3547  1EB4                     ___lwdiv:	
  3548                           
  3549                           ;incstack = 0
  3550                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  3551  1EB4  0020               	movlb	0	; select bank0
  3552  1EB5  01DE               	clrf	___lwdiv@quotient
  3553  1EB6  01DF               	clrf	___lwdiv@quotient+1
  3554  1EB7  0859               	movf	___lwdiv@divisor+1,w
  3555  1EB8  0458               	iorwf	___lwdiv@divisor,w
  3556  1EB9  1903               	skipnz
  3557  1EBA  2EE4               	goto	l7157
  3558  1EBB  01DD               	clrf	___lwdiv@counter
  3559  1EBC  0ADD               	incf	___lwdiv@counter,f
  3560  1EBD                     l7145:	
  3561  1EBD  1BD9               	btfsc	___lwdiv@divisor+1,7
  3562  1EBE  2EC9               	goto	l7147
  3563  1EBF  3001               	movlw	1
  3564  1EC0                     u8235:	
  3565  1EC0  35D8               	lslf	___lwdiv@divisor,f
  3566  1EC1  0DD9               	rlf	___lwdiv@divisor+1,f
  3567  1EC2  0B89               	decfsz	9,f
  3568  1EC3  2EC0               	goto	u8235
  3569  1EC4  3001               	movlw	1
  3570  1EC5  00DC               	movwf	??___lwdiv
  3571  1EC6  085C               	movf	??___lwdiv,w
  3572  1EC7  07DD               	addwf	___lwdiv@counter,f
  3573  1EC8  2EBD               	goto	l7145
  3574  1EC9                     l7147:	
  3575  1EC9  3001               	movlw	1
  3576  1ECA                     u8255:	
  3577  1ECA  35DE               	lslf	___lwdiv@quotient,f
  3578  1ECB  0DDF               	rlf	___lwdiv@quotient+1,f
  3579  1ECC  0B89               	decfsz	9,f
  3580  1ECD  2ECA               	goto	u8255
  3581  1ECE  0859               	movf	___lwdiv@divisor+1,w
  3582  1ECF  025B               	subwf	___lwdiv@dividend+1,w
  3583  1ED0  1D03               	skipz
  3584  1ED1  2ED4               	goto	u8265
  3585  1ED2  0858               	movf	___lwdiv@divisor,w
  3586  1ED3  025A               	subwf	___lwdiv@dividend,w
  3587  1ED4                     u8265:	
  3588  1ED4  1C03               	skipc
  3589  1ED5  2EDB               	goto	l7153
  3590  1ED6  0858               	movf	___lwdiv@divisor,w
  3591  1ED7  02DA               	subwf	___lwdiv@dividend,f
  3592  1ED8  0859               	movf	___lwdiv@divisor+1,w
  3593  1ED9  3BDB               	subwfb	___lwdiv@dividend+1,f
  3594  1EDA  145E               	bsf	___lwdiv@quotient,0
  3595  1EDB                     l7153:	
  3596  1EDB  3001               	movlw	1
  3597  1EDC                     u8275:	
  3598  1EDC  36D9               	lsrf	___lwdiv@divisor+1,f
  3599  1EDD  0CD8               	rrf	___lwdiv@divisor,f
  3600  1EDE  0B89               	decfsz	9,f
  3601  1EDF  2EDC               	goto	u8275
  3602  1EE0  3001               	movlw	1
  3603  1EE1  02DD               	subwf	___lwdiv@counter,f
  3604  1EE2  1D03               	btfss	3,2
  3605  1EE3  2EC9               	goto	l7147
  3606  1EE4                     l7157:	
  3607  1EE4  085F               	movf	___lwdiv@quotient+1,w
  3608  1EE5  01D9               	clrf	?___lwdiv+1
  3609  1EE6  07D9               	addwf	?___lwdiv+1,f
  3610  1EE7  085E               	movf	___lwdiv@quotient,w
  3611  1EE8  01D8               	clrf	?___lwdiv
  3612  1EE9  07D8               	addwf	?___lwdiv,f
  3613  1EEA  0008               	return
  3614  1EEB                     __end_of___lwdiv:	
  3615                           
  3616                           	psect	text4
  3617  0B37                     __ptext4:	
  3618 ;; *************** function _SendCmdReply *****************
  3619 ;; Defined at:
  3620 ;;		line 208 in file "main.c"
  3621 ;; Parameters:    Size  Location     Type
  3622 ;;  cmd             2   14[BANK0 ] PTR unsigned char 
  3623 ;;		 -> ResultQue(6), OUTPacket(64), 
  3624 ;;  data            2   16[BANK0 ] PTR unsigned char 
  3625 ;;		 -> ResultQue(6), Cfg(6), ID(12), Status(13), 
  3626 ;;  count           1   18[BANK0 ] unsigned char 
  3627 ;; Auto vars:     Size  Location     Type
  3628 ;;  n               1   19[BANK0 ] unsigned char 
  3629 ;; Return value:  Size  Location     Type
  3630 ;;		None               void
  3631 ;; Registers used:
  3632 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  3633 ;; Tracked objects:
  3634 ;;		On entry : 0/0
  3635 ;;		On exit  : 0/0
  3636 ;;		Unchanged: 0/0
  3637 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3638 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3639 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3640 ;;      Temps:          0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0
  3641 ;;      Totals:         0       6       8       0       0       0       0       0       0       0       0       0       
      +0       0
  3642 ;;Total ram usage:       14 bytes
  3643 ;; Hardware stack levels used:    1
  3644 ;; Hardware stack levels required when called:    5
  3645 ;; This function calls:
  3646 ;;		___bmul
  3647 ;;		___wmul
  3648 ;; This function is called by:
  3649 ;;		_ProcessCmd
  3650 ;; This function uses a non-reentrant model
  3651 ;;
  3652                           
  3653                           
  3654                           ;psect for function _SendCmdReply
  3655  0B37                     _SendCmdReply:	
  3656                           
  3657                           ;main.c: 209: if(WQI*15 + count + 2 < 64) {
  3658                           
  3659                           ;incstack = 0
  3660                           ; Regs used in _SendCmdReply: [wreg-fsr1h+status,2+status,0+btemp+1+pclath+cstack]
  3661  0B37  0020               	movlb	0	; select bank0
  3662  0B38  0862               	movf	SendCmdReply@count,w
  3663  0B39  0021               	movlb	1	; select bank1
  3664  0B3A  00A0               	movwf	??_SendCmdReply^(0+128)
  3665  0B3B  01A1               	clrf	(??_SendCmdReply^(0+128)+1)
  3666  0B3C  0022               	movlb	2	; select bank2
  3667  0B3D  0856               	movf	_WQI^(0+256),w
  3668  0B3E  0021               	movlb	1	; select bank1
  3669  0B3F  00A2               	movwf	(??_SendCmdReply+2)^(0+128)
  3670  0B40  01A3               	clrf	((??_SendCmdReply+2)^(0+128)+1)
  3671  0B41  0822               	movf	(??_SendCmdReply+2)^(0+128),w
  3672  0B42  0020               	movlb	0	; select bank0
  3673  0B43  00D8               	movwf	?___wmul
  3674  0B44  0021               	movlb	1	; select bank1
  3675  0B45  0823               	movf	(??_SendCmdReply+3)^(0+128),w
  3676  0B46  0020               	movlb	0	; select bank0
  3677  0B47  00D9               	movwf	?___wmul+1
  3678  0B48  300F               	movlw	15
  3679  0B49  00DA               	movwf	?___wmul+2
  3680  0B4A  3000               	movlw	0
  3681  0B4B  00DB               	movwf	?___wmul+3
  3682  0B4C  319D  2589  318B   	fcall	___wmul
  3683  0B4F  0021               	movlb	1	; select bank1
  3684  0B50  0820               	movf	??_SendCmdReply^(0+128),w
  3685  0B51  0020               	movlb	0	; select bank0
  3686  0B52  0758               	addwf	?___wmul,w
  3687  0B53  0021               	movlb	1	; select bank1
  3688  0B54  00A4               	movwf	(??_SendCmdReply+4)^(0+128)
  3689  0B55  0821               	movf	(??_SendCmdReply+1)^(0+128),w
  3690  0B56  0020               	movlb	0	; select bank0
  3691  0B57  3D59               	addwfc	?___wmul+1,w
  3692  0B58  0021               	movlb	1	; select bank1
  3693  0B59  00A5               	movwf	(??_SendCmdReply+5)^(0+128)
  3694  0B5A  0824               	movf	(??_SendCmdReply+4)^(0+128),w
  3695  0B5B  3E02               	addlw	2
  3696  0B5C  00A6               	movwf	(??_SendCmdReply+6)^(0+128)
  3697  0B5D  3000               	movlw	0
  3698  0B5E  3D25               	addwfc	(??_SendCmdReply+5)^(0+128),w
  3699  0B5F  00A7               	movwf	(??_SendCmdReply+7)^(0+128)
  3700  0B60  0827               	movf	(??_SendCmdReply+7)^(0+128),w
  3701  0B61  3A80               	xorlw	128
  3702  0B62  00FF               	movwf	127
  3703  0B63  3080               	movlw	128
  3704  0B64  027F               	subwf	127,w
  3705  0B65  1D03               	skipz
  3706  0B66  2B69               	goto	u7955
  3707  0B67  3040               	movlw	64
  3708  0B68  0226               	subwf	(??_SendCmdReply+6)^(0+128),w
  3709  0B69                     u7955:	
  3710  0B69  1803               	skipnc
  3711  0B6A  0008               	return
  3712                           
  3713                           ;main.c: 210: INPacket[WQI*15] = cmd[0];
  3714  0B6B  0020               	movlb	0	; select bank0
  3715  0B6C  085E               	movf	SendCmdReply@cmd,w
  3716  0B6D  0086               	movwf	6
  3717  0B6E  085F               	movf	SendCmdReply@cmd+1,w
  3718  0B6F  0087               	movwf	7
  3719  0B70  0801               	movf	1,w
  3720  0B71  0021               	movlb	1	; select bank1
  3721  0B72  00A0               	movwf	??_SendCmdReply^(0+128)
  3722  0B73  300F               	movlw	15
  3723  0B74  00A1               	movwf	(??_SendCmdReply+1)^(0+128)
  3724  0B75  0821               	movf	(??_SendCmdReply+1)^(0+128),w
  3725  0B76  0020               	movlb	0	; select bank0
  3726  0B77  00D8               	movwf	?___bmul
  3727  0B78  0022               	movlb	2	; select bank2
  3728  0B79  0856               	movf	_WQI^(0+256),w
  3729  0B7A  319C  2450  318B   	fcall	___bmul
  3730  0B7D  3E20               	addlw	32
  3731  0B7E  0086               	movwf	6
  3732  0B7F  3002               	movlw	2	; select bank4/5
  3733  0B80  0087               	movwf	7
  3734  0B81  0021               	movlb	1	; select bank1
  3735  0B82  0820               	movf	??_SendCmdReply^(0+128),w
  3736  0B83  0081               	movwf	1
  3737                           
  3738                           ;main.c: 211: INPacket[WQI*15 + 1] = SlaveAddress;
  3739  0B84  0022               	movlb	2	; select bank2
  3740  0B85  083A               	movf	_SlaveAddress^(0+256),w
  3741  0B86  0021               	movlb	1	; select bank1
  3742  0B87  00A0               	movwf	??_SendCmdReply^(0+128)
  3743  0B88  300F               	movlw	15
  3744  0B89  00A1               	movwf	(??_SendCmdReply+1)^(0+128)
  3745  0B8A  0821               	movf	(??_SendCmdReply+1)^(0+128),w
  3746  0B8B  0020               	movlb	0	; select bank0
  3747  0B8C  00D8               	movwf	?___bmul
  3748  0B8D  0022               	movlb	2	; select bank2
  3749  0B8E  0856               	movf	_WQI^(0+256),w
  3750  0B8F  319C  2450  318B   	fcall	___bmul
  3751  0B92  0021               	movlb	1	; select bank1
  3752  0B93  00A2               	movwf	(??_SendCmdReply+2)^(0+128)
  3753  0B94  0A22               	incf	(??_SendCmdReply+2)^(0+128),w
  3754  0B95  3E20               	addlw	32
  3755  0B96  0086               	movwf	6
  3756  0B97  3002               	movlw	2	; select bank4/5
  3757  0B98  0087               	movwf	7
  3758  0B99  0820               	movf	??_SendCmdReply^(0+128),w
  3759  0B9A  0081               	movwf	1
  3760                           
  3761                           ;main.c: 212: for(BYTE n = 0; n < count; n++)
  3762  0B9B  0020               	movlb	0	; select bank0
  3763  0B9C  01E3               	clrf	SendCmdReply@n
  3764  0B9D                     l6983:	
  3765  0B9D  0862               	movf	SendCmdReply@count,w
  3766  0B9E  0263               	subwf	SendCmdReply@n,w
  3767  0B9F  1803               	btfsc	3,0
  3768  0BA0  2BD7               	goto	l6985
  3769                           
  3770                           ;main.c: 213: INPacket[WQI*15 + n + 2] = data[n];
  3771  0BA1  0861               	movf	SendCmdReply@data+1,w
  3772  0BA2  0021               	movlb	1	; select bank1
  3773  0BA3  00A1               	movwf	(??_SendCmdReply^(0+128)+1)
  3774  0BA4  0020               	movlb	0	; select bank0
  3775  0BA5  0860               	movf	SendCmdReply@data,w
  3776  0BA6  0021               	movlb	1	; select bank1
  3777  0BA7  00A0               	movwf	??_SendCmdReply^(0+128)
  3778  0BA8  0020               	movlb	0	; select bank0
  3779  0BA9  0863               	movf	SendCmdReply@n,w
  3780  0BAA  0021               	movlb	1	; select bank1
  3781  0BAB  0720               	addwf	??_SendCmdReply^(0+128),w
  3782  0BAC  0084               	movwf	4
  3783  0BAD  0821               	movf	(??_SendCmdReply^(0+128)+1),w
  3784  0BAE  1803               	skipnc
  3785  0BAF  0A21               	incf	(??_SendCmdReply^(0+128)+1),w
  3786  0BB0  0085               	movwf	5
  3787  0BB1  0800               	movf	0,w	;code access
  3788  0BB2  00A2               	movwf	(??_SendCmdReply+2)^(0+128)
  3789  0BB3  0022               	movlb	2	; select bank2
  3790  0BB4  0856               	movf	_WQI^(0+256),w
  3791  0BB5  0021               	movlb	1	; select bank1
  3792  0BB6  00A3               	movwf	(??_SendCmdReply+3)^(0+128)
  3793  0BB7  01A4               	clrf	((??_SendCmdReply+3)^(0+128)+1)
  3794  0BB8  0823               	movf	(??_SendCmdReply+3)^(0+128),w
  3795  0BB9  0020               	movlb	0	; select bank0
  3796  0BBA  00D8               	movwf	?___wmul
  3797  0BBB  0021               	movlb	1	; select bank1
  3798  0BBC  0824               	movf	(??_SendCmdReply+4)^(0+128),w
  3799  0BBD  0020               	movlb	0	; select bank0
  3800  0BBE  00D9               	movwf	?___wmul+1
  3801  0BBF  300F               	movlw	15
  3802  0BC0  00DA               	movwf	?___wmul+2
  3803  0BC1  3000               	movlw	0
  3804  0BC2  00DB               	movwf	?___wmul+3
  3805  0BC3  319D  2589  318B   	fcall	___wmul
  3806  0BC6  0020               	movlb	0	; select bank0
  3807  0BC7  0858               	movf	?___wmul,w
  3808  0BC8  0763               	addwf	SendCmdReply@n,w
  3809  0BC9  3E02               	addlw	2
  3810  0BCA  3E20               	addlw	32
  3811  0BCB  0086               	movwf	6
  3812  0BCC  3002               	movlw	2	; select bank4/5
  3813  0BCD  0087               	movwf	7
  3814  0BCE  0021               	movlb	1	; select bank1
  3815  0BCF  0822               	movf	(??_SendCmdReply+2)^(0+128),w
  3816  0BD0  0081               	movwf	1
  3817  0BD1  3001               	movlw	1
  3818  0BD2  00A0               	movwf	??_SendCmdReply^(0+128)
  3819  0BD3  0820               	movf	??_SendCmdReply^(0+128),w
  3820  0BD4  0020               	movlb	0	; select bank0
  3821  0BD5  07E3               	addwf	SendCmdReply@n,f
  3822  0BD6  2B9D               	goto	l6983
  3823  0BD7                     l6985:	
  3824                           
  3825                           ;main.c: 214: WQI = (WQI+1) & 3;
  3826  0BD7  0022               	movlb	2	; select bank2
  3827  0BD8  0A56               	incf	_WQI^(0+256),w
  3828  0BD9  3903               	andlw	3
  3829  0BDA  0021               	movlb	1	; select bank1
  3830  0BDB  00A0               	movwf	??_SendCmdReply^(0+128)
  3831  0BDC  0820               	movf	??_SendCmdReply^(0+128),w
  3832  0BDD  0022               	movlb	2	; select bank2
  3833  0BDE  00D6               	movwf	_WQI^(0+256)
  3834  0BDF  0008               	return
  3835  0BE0                     __end_of_SendCmdReply:	
  3836                           
  3837                           	psect	text5
  3838  1C50                     __ptext5:	
  3839 ;; *************** function ___bmul *****************
  3840 ;; Defined at:
  3841 ;;		line 3 in file "C:\Program Files (x86)\Microchip\xc8\v1.20\sources\pic\bmul.c"
  3842 ;; Parameters:    Size  Location     Type
  3843 ;;  multiplier      1    wreg     unsigned char 
  3844 ;;  multiplicand    1    8[BANK0 ] unsigned char 
  3845 ;; Auto vars:     Size  Location     Type
  3846 ;;  multiplier      1   11[BANK0 ] unsigned char 
  3847 ;;  product         1   10[BANK0 ] unsigned char 
  3848 ;; Return value:  Size  Location     Type
  3849 ;;                  1    wreg      unsigned char 
  3850 ;; Registers used:
  3851 ;;		wreg, status,2, status,0
  3852 ;; Tracked objects:
  3853 ;;		On entry : 0/0
  3854 ;;		On exit  : 0/0
  3855 ;;		Unchanged: 0/0
  3856 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3857 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3858 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3859 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3860 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3861 ;;Total ram usage:        4 bytes
  3862 ;; Hardware stack levels used:    1
  3863 ;; Hardware stack levels required when called:    4
  3864 ;; This function calls:
  3865 ;;		Nothing
  3866 ;; This function is called by:
  3867 ;;		_ProcessIO
  3868 ;;		_SendCmdReply
  3869 ;;		i1_SendCmdReply
  3870 ;; This function uses a non-reentrant model
  3871 ;;
  3872                           
  3873                           
  3874                           ;psect for function ___bmul
  3875  1C50                     ___bmul:	
  3876                           
  3877                           ;incstack = 0
  3878                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  3879                           ;___bmul@multiplier stored from wreg
  3880  1C50  0020               	movlb	0	; select bank0
  3881  1C51  00DB               	movwf	___bmul@multiplier
  3882  1C52  01DA               	clrf	___bmul@product
  3883  1C53                     l7121:	
  3884  1C53  1C5B               	btfss	___bmul@multiplier,0
  3885  1C54  2C59               	goto	l7125
  3886  1C55  0858               	movf	___bmul@multiplicand,w
  3887  1C56  00D9               	movwf	??___bmul
  3888  1C57  0859               	movf	??___bmul,w
  3889  1C58  07DA               	addwf	___bmul@product,f
  3890  1C59                     l7125:	
  3891  1C59  1003               	clrc
  3892  1C5A  0DD8               	rlf	___bmul@multiplicand,f
  3893  1C5B  1003               	clrc
  3894  1C5C  0CDB               	rrf	___bmul@multiplier,f
  3895  1C5D  08DB               	movf	___bmul@multiplier,f
  3896  1C5E  1D03               	skipz
  3897  1C5F  2C53               	goto	l7121
  3898  1C60  085A               	movf	___bmul@product,w
  3899  1C61  0008               	return
  3900  1C62                     __end_of___bmul:	
  3901                           
  3902                           	psect	text6
  3903  15D6                     __ptext6:	
  3904 ;; *************** function _AsicPushWork *****************
  3905 ;; Defined at:
  3906 ;;		line 112 in file "klondike.c"
  3907 ;; Parameters:    Size  Location     Type
  3908 ;;		None
  3909 ;; Auto vars:     Size  Location     Type
  3910 ;;		None
  3911 ;; Return value:  Size  Location     Type
  3912 ;;		None               void
  3913 ;; Registers used:
  3914 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  3915 ;; Tracked objects:
  3916 ;;		On entry : 0/0
  3917 ;;		On exit  : 0/0
  3918 ;;		Unchanged: 0/0
  3919 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3920 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3921 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3922 ;;      Temps:          0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
  3923 ;;      Totals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
  3924 ;;Total ram usage:        5 bytes
  3925 ;; Hardware stack levels used:    1
  3926 ;; Hardware stack levels required when called:    6
  3927 ;; This function calls:
  3928 ;;		_SendAsicData
  3929 ;;		_AsicPreCalc
  3930 ;;		___wmul
  3931 ;; This function is called by:
  3932 ;;		_ProcessCmd
  3933 ;;		_main
  3934 ;; This function uses a non-reentrant model
  3935 ;;
  3936                           
  3937                           
  3938                           ;psect for function _AsicPushWork
  3939  15D6                     _AsicPushWork:	
  3940                           
  3941                           ;klondike.c: 113: AsicPreCalc(&WorkQue[WorkNow]);
  3942                           
  3943                           ;incstack = 0
  3944                           ; Regs used in _AsicPushWork: [wreg-fsr1h+status,2+status,0+btemp+1+pclath+cstack]
  3945  15D6  0022               	movlb	2	; select bank2
  3946  15D7  0846               	movf	_WorkNow^(0+256),w
  3947  15D8  0021               	movlb	1	; select bank1
  3948  15D9  00E5               	movwf	??_AsicPushWork^(0+128)
  3949  15DA  01E6               	clrf	(??_AsicPushWork^(0+128)+1)
  3950  15DB  0865               	movf	??_AsicPushWork^(0+128),w
  3951  15DC  0020               	movlb	0	; select bank0
  3952  15DD  00D8               	movwf	?___wmul
  3953  15DE  0021               	movlb	1	; select bank1
  3954  15DF  0866               	movf	(??_AsicPushWork+1)^(0+128),w
  3955  15E0  0020               	movlb	0	; select bank0
  3956  15E1  00D9               	movwf	?___wmul+1
  3957  15E2  302D               	movlw	45
  3958  15E3  00DA               	movwf	?___wmul+2
  3959  15E4  3000               	movlw	0
  3960  15E5  00DB               	movwf	?___wmul+3
  3961  15E6  319D  2589  3195   	fcall	___wmul
  3962  15E9  303C               	movlw	60
  3963  15EA  0021               	movlb	1	; select bank1
  3964  15EB  00E7               	movwf	(??_AsicPushWork+2)^(0+128)
  3965  15EC  3023               	movlw	35
  3966  15ED  00E8               	movwf	((??_AsicPushWork+2)^(0+128)+1)
  3967  15EE  0020               	movlb	0	; select bank0
  3968  15EF  0858               	movf	?___wmul,w
  3969  15F0  0021               	movlb	1	; select bank1
  3970  15F1  0767               	addwf	(??_AsicPushWork+2)^(0+128),w
  3971  15F2  00A0               	movwf	?_AsicPreCalc^(0+128)
  3972  15F3  0020               	movlb	0	; select bank0
  3973  15F4  0859               	movf	?___wmul+1,w
  3974  15F5  0021               	movlb	1	; select bank1
  3975  15F6  3D68               	addwfc	(??_AsicPushWork+3)^(0+128),w
  3976  15F7  00A1               	movwf	(?_AsicPreCalc+1)^(0+128)
  3977  15F8  3180  2014  3195   	fcall	_AsicPreCalc
  3978                           
  3979                           ;klondike.c: 114: Status.WorkID = WorkQue[WorkNow].WorkID;
  3980  15FB  0022               	movlb	2	; select bank2
  3981  15FC  0846               	movf	_WorkNow^(0+256),w
  3982  15FD  0021               	movlb	1	; select bank1
  3983  15FE  00E5               	movwf	??_AsicPushWork^(0+128)
  3984  15FF  01E6               	clrf	(??_AsicPushWork^(0+128)+1)
  3985  1600  0865               	movf	??_AsicPushWork^(0+128),w
  3986  1601  0020               	movlb	0	; select bank0
  3987  1602  00D8               	movwf	?___wmul
  3988  1603  0021               	movlb	1	; select bank1
  3989  1604  0866               	movf	(??_AsicPushWork+1)^(0+128),w
  3990  1605  0020               	movlb	0	; select bank0
  3991  1606  00D9               	movwf	?___wmul+1
  3992  1607  302D               	movlw	45
  3993  1608  00DA               	movwf	?___wmul+2
  3994  1609  3000               	movlw	0
  3995  160A  00DB               	movwf	?___wmul+3
  3996  160B  319D  2589  3195   	fcall	___wmul
  3997  160E  303C               	movlw	60
  3998  160F  0021               	movlb	1	; select bank1
  3999  1610  00E7               	movwf	(??_AsicPushWork+2)^(0+128)
  4000  1611  3023               	movlw	35
  4001  1612  00E8               	movwf	((??_AsicPushWork+2)^(0+128)+1)
  4002  1613  0020               	movlb	0	; select bank0
  4003  1614  0858               	movf	?___wmul,w
  4004  1615  0021               	movlb	1	; select bank1
  4005  1616  0767               	addwf	(??_AsicPushWork+2)^(0+128),w
  4006  1617  0086               	movwf	6
  4007  1618  0020               	movlb	0	; select bank0
  4008  1619  0859               	movf	?___wmul+1,w
  4009  161A  0021               	movlb	1	; select bank1
  4010  161B  3D68               	addwfc	(??_AsicPushWork+3)^(0+128),w
  4011  161C  0087               	movwf	7
  4012  161D  0801               	movf	1,w
  4013  161E  00E9               	movwf	(??_AsicPushWork+4)^(0+128)
  4014  161F  0869               	movf	(??_AsicPushWork+4)^(0+128),w
  4015  1620  0022               	movlb	2	; select bank2
  4016  1621  00DD               	movwf	(_Status^(0+256)+4)	;volatile
  4017                           
  4018                           ;klondike.c: 115: SendAsicData(&WorkQue[WorkNow]);
  4019  1622  0846               	movf	_WorkNow^(0+256),w
  4020  1623  0021               	movlb	1	; select bank1
  4021  1624  00E5               	movwf	??_AsicPushWork^(0+128)
  4022  1625  01E6               	clrf	(??_AsicPushWork^(0+128)+1)
  4023  1626  0865               	movf	??_AsicPushWork^(0+128),w
  4024  1627  0020               	movlb	0	; select bank0
  4025  1628  00D8               	movwf	?___wmul
  4026  1629  0021               	movlb	1	; select bank1
  4027  162A  0866               	movf	(??_AsicPushWork+1)^(0+128),w
  4028  162B  0020               	movlb	0	; select bank0
  4029  162C  00D9               	movwf	?___wmul+1
  4030  162D  302D               	movlw	45
  4031  162E  00DA               	movwf	?___wmul+2
  4032  162F  3000               	movlw	0
  4033  1630  00DB               	movwf	?___wmul+3
  4034  1631  319D  2589  3195   	fcall	___wmul
  4035  1634  303C               	movlw	60
  4036  1635  0021               	movlb	1	; select bank1
  4037  1636  00E7               	movwf	(??_AsicPushWork+2)^(0+128)
  4038  1637  3023               	movlw	35
  4039  1638  00E8               	movwf	((??_AsicPushWork+2)^(0+128)+1)
  4040  1639  0020               	movlb	0	; select bank0
  4041  163A  0858               	movf	?___wmul,w
  4042  163B  0021               	movlb	1	; select bank1
  4043  163C  0767               	addwf	(??_AsicPushWork+2)^(0+128),w
  4044  163D  0020               	movlb	0	; select bank0
  4045  163E  00DE               	movwf	?_SendAsicData
  4046  163F  0859               	movf	?___wmul+1,w
  4047  1640  0021               	movlb	1	; select bank1
  4048  1641  3D68               	addwfc	(??_AsicPushWork+3)^(0+128),w
  4049  1642  0020               	movlb	0	; select bank0
  4050  1643  00DF               	movwf	?_SendAsicData+1
  4051  1644  3189  2153         	fcall	_SendAsicData
  4052                           
  4053                           ;klondike.c: 116: WorkNow = (WorkNow+1) & 4-1;
  4054  1646  0022               	movlb	2	; select bank2
  4055  1647  0A46               	incf	_WorkNow^(0+256),w
  4056  1648  3903               	andlw	3
  4057  1649  0021               	movlb	1	; select bank1
  4058  164A  00E5               	movwf	??_AsicPushWork^(0+128)
  4059  164B  0865               	movf	??_AsicPushWork^(0+128),w
  4060  164C  0022               	movlb	2	; select bank2
  4061  164D  00C6               	movwf	_WorkNow^(0+256)
  4062                           
  4063                           ;klondike.c: 117: Status.HashCount = 0;
  4064  164E  01E1               	clrf	(_Status^(0+256)+8)	;volatile
  4065  164F  01E2               	clrf	((_Status+1)^(0+256)+8)	;volatile
  4066                           
  4067                           ;klondike.c: 118: TMR0 = HashTime;
  4068  1650  0858               	movf	_HashTime^(0+256),w
  4069  1651  0020               	movlb	0	; select bank0
  4070  1652  0095               	movwf	21	;volatile
  4071                           
  4072                           ;klondike.c: 119: Status.State = 'W';
  4073  1653  3057               	movlw	87
  4074  1654  0021               	movlb	1	; select bank1
  4075  1655  00E5               	movwf	??_AsicPushWork^(0+128)
  4076  1656  0865               	movf	??_AsicPushWork^(0+128),w
  4077  1657  0022               	movlb	2	; select bank2
  4078  1658  00D9               	movwf	_Status^(0+256)	;volatile
  4079                           
  4080                           ;klondike.c: 120: Status.WorkQC--;
  4081  1659  3001               	movlw	1
  4082  165A  02DC               	subwf	(_Status^(0+256)+3),f	;volatile
  4083  165B  0008               	return
  4084  165C                     __end_of_AsicPushWork:	
  4085                           
  4086                           	psect	text7
  4087  1D89                     __ptext7:	
  4088 ;; *************** function ___wmul *****************
  4089 ;; Defined at:
  4090 ;;		line 3 in file "C:\Program Files (x86)\Microchip\xc8\v1.20\sources\pic\wmul.c"
  4091 ;; Parameters:    Size  Location     Type
  4092 ;;  multiplier      2    8[BANK0 ] unsigned int 
  4093 ;;  multiplicand    2   10[BANK0 ] unsigned int 
  4094 ;; Auto vars:     Size  Location     Type
  4095 ;;  product         2   12[BANK0 ] unsigned int 
  4096 ;; Return value:  Size  Location     Type
  4097 ;;                  2    8[BANK0 ] unsigned int 
  4098 ;; Registers used:
  4099 ;;		wreg, status,2, status,0
  4100 ;; Tracked objects:
  4101 ;;		On entry : 0/0
  4102 ;;		On exit  : 0/0
  4103 ;;		Unchanged: 0/0
  4104 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4105 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4106 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4107 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4108 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4109 ;;Total ram usage:        6 bytes
  4110 ;; Hardware stack levels used:    1
  4111 ;; Hardware stack levels required when called:    4
  4112 ;; This function calls:
  4113 ;;		Nothing
  4114 ;; This function is called by:
  4115 ;;		_ProcessCmd
  4116 ;;		_AsicPushWork
  4117 ;;		_SendCmdReply
  4118 ;; This function uses a non-reentrant model
  4119 ;;
  4120                           
  4121                           
  4122                           ;psect for function ___wmul
  4123  1D89                     ___wmul:	
  4124                           
  4125                           ;incstack = 0
  4126                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  4127  1D89  0020               	movlb	0	; select bank0
  4128  1D8A  01DC               	clrf	___wmul@product
  4129  1D8B  01DD               	clrf	___wmul@product+1
  4130  1D8C                     l7163:	
  4131  1D8C  1C58               	btfss	___wmul@multiplier,0
  4132  1D8D  2D92               	goto	l1297
  4133  1D8E  085A               	movf	___wmul@multiplicand,w
  4134  1D8F  07DC               	addwf	___wmul@product,f
  4135  1D90  085B               	movf	___wmul@multiplicand+1,w
  4136  1D91  3DDD               	addwfc	___wmul@product+1,f
  4137  1D92                     l1297:	
  4138  1D92  3001               	movlw	1
  4139  1D93                     u8305:	
  4140  1D93  35DA               	lslf	___wmul@multiplicand,f
  4141  1D94  0DDB               	rlf	___wmul@multiplicand+1,f
  4142  1D95  0B89               	decfsz	9,f
  4143  1D96  2D93               	goto	u8305
  4144  1D97  3001               	movlw	1
  4145  1D98                     u8315:	
  4146  1D98  36D9               	lsrf	___wmul@multiplier+1,f
  4147  1D99  0CD8               	rrf	___wmul@multiplier,f
  4148  1D9A  0B89               	decfsz	9,f
  4149  1D9B  2D98               	goto	u8315
  4150  1D9C  0859               	movf	___wmul@multiplier+1,w
  4151  1D9D  0458               	iorwf	___wmul@multiplier,w
  4152  1D9E  1D03               	skipz
  4153  1D9F  2D8C               	goto	l7163
  4154  1DA0  085D               	movf	___wmul@product+1,w
  4155  1DA1  01D9               	clrf	?___wmul+1
  4156  1DA2  07D9               	addwf	?___wmul+1,f
  4157  1DA3  085C               	movf	___wmul@product,w
  4158  1DA4  01D8               	clrf	?___wmul
  4159  1DA5  07D8               	addwf	?___wmul,f
  4160  1DA6  0008               	return
  4161  1DA7                     __end_of___wmul:	
  4162                           
  4163                           	psect	text8
  4164  0014                     __ptext8:	
  4165 ;; *************** function _AsicPreCalc *****************
  4166 ;; Defined at:
  4167 ;;		line 318 in file "asic.c"
  4168 ;; Parameters:    Size  Location     Type
  4169 ;;  work            2    0[BANK1 ] PTR struct _worktask
  4170 ;;		 -> WorkQue(180), 
  4171 ;; Auto vars:     Size  Location     Type
  4172 ;;  m              32   24[BANK1 ] unsigned long [8]
  4173 ;;  K              12   12[BANK1 ] unsigned long [3]
  4174 ;;  x               4   64[BANK1 ] unsigned long 
  4175 ;;  y               4   60[BANK1 ] unsigned long 
  4176 ;;  z               4   56[BANK1 ] unsigned long 
  4177 ;;  n               1   68[BANK1 ] unsigned char 
  4178 ;; Return value:  Size  Location     Type
  4179 ;;		None               void
  4180 ;; Registers used:
  4181 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  4182 ;; Tracked objects:
  4183 ;;		On entry : 0/0
  4184 ;;		On exit  : 0/0
  4185 ;;		Unchanged: 0/0
  4186 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4187 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  4188 ;;      Locals:         0       0      57       0       0       0       0       0       0       0       0       0       
      +0       0
  4189 ;;      Temps:          0       0      10       0       0       0       0       0       0       0       0       0       
      +0       0
  4190 ;;      Totals:         0       0      69       0       0       0       0       0       0       0       0       0       
      +0       0
  4191 ;;Total ram usage:       69 bytes
  4192 ;; Hardware stack levels used:    1
  4193 ;; Hardware stack levels required when called:    5
  4194 ;; This function calls:
  4195 ;;		_rotate
  4196 ;; This function is called by:
  4197 ;;		_AsicPushWork
  4198 ;; This function uses a non-reentrant model
  4199 ;;
  4200                           
  4201                           
  4202                           ;psect for function _AsicPreCalc
  4203  0014                     _AsicPreCalc:	
  4204                           
  4205                           ;asic.c: 319: DWORD K[3] = { 0x428a2f98, 0x71374491, 0xb5c0fbcf };
  4206                           
  4207                           ;incstack = 0
  4208                           ; Regs used in _AsicPreCalc: [wreg-fsr1h+status,2+status,0+btemp+1+pclath+cstack]
  4209  0014  30D0               	movlw	low AsicPreCalc@F3347
  4210  0015  0086               	movwf	6
  4211  0016  3001               	movlw	high AsicPreCalc@F3347
  4212  0017  0087               	movwf	7
  4213  0018  30AC               	movlw	low AsicPreCalc@K
  4214  0019  0084               	movwf	4
  4215  001A  3000               	movlw	high AsicPreCalc@K
  4216  001B  0085               	movwf	5
  4217  001C  300C               	movlw	12
  4218  001D  00FF               	movwf	127
  4219  001E                     u7290:	
  4220  001E  0016               	moviw fsr1++
  4221  001F  001A               	movwi fsr0++
  4222  0020  0BFF               	decfsz	127,f
  4223  0021  281E               	goto	u7290
  4224                           
  4225                           ;asic.c: 320: DWORD x, y, z;
  4226                           ;asic.c: 321: DWORD m[8];
  4227                           ;asic.c: 322: BYTE n;
  4228                           ;asic.c: 324: for(n = 0; n < 8; n++)
  4229  0022  0021               	movlb	1	; select bank1
  4230  0023  01E4               	clrf	AsicPreCalc@n^(0+128)
  4231  0024  3008               	movlw	8
  4232  0025  0264               	subwf	AsicPreCalc@n^(0+128),w
  4233  0026  1803               	btfsc	3,0
  4234  0027  285E               	goto	l6601
  4235  0028                     l6595:	
  4236                           
  4237                           ;asic.c: 325: m[n] = work->MidState[n];
  4238  0028  0864               	movf	AsicPreCalc@n^(0+128),w
  4239  0029  00A2               	movwf	??_AsicPreCalc^(0+128)
  4240  002A  01A3               	clrf	(??_AsicPreCalc^(0+128)+1)
  4241  002B  35A2               	lslf	??_AsicPreCalc^(0+128),f
  4242  002C  0DA3               	rlf	(??_AsicPreCalc^(0+128)+1),f
  4243  002D  35A2               	lslf	??_AsicPreCalc^(0+128),f
  4244  002E  0DA3               	rlf	(??_AsicPreCalc^(0+128)+1),f
  4245  002F  0822               	movf	??_AsicPreCalc^(0+128),w
  4246  0030  3E01               	addlw	1
  4247  0031  00A4               	movwf	(??_AsicPreCalc+2)^(0+128)
  4248  0032  3000               	movlw	0
  4249  0033  3D23               	addwfc	(??_AsicPreCalc+1)^(0+128),w
  4250  0034  00A5               	movwf	(??_AsicPreCalc+3)^(0+128)
  4251  0035  0824               	movf	(??_AsicPreCalc+2)^(0+128),w
  4252  0036  0720               	addwf	AsicPreCalc@work^(0+128),w
  4253  0037  0086               	movwf	6
  4254  0038  0825               	movf	(??_AsicPreCalc+3)^(0+128),w
  4255  0039  3D21               	addwfc	(AsicPreCalc@work+1)^(0+128),w
  4256  003A  0087               	movwf	7
  4257  003B  3F40               	moviw [0]fsr1
  4258  003C  00A6               	movwf	(??_AsicPreCalc+4)^(0+128)
  4259  003D  3F41               	moviw [1]fsr1
  4260  003E  00A7               	movwf	((??_AsicPreCalc+4)^(0+128)+1)
  4261  003F  3F42               	moviw [2]fsr1
  4262  0040  00A8               	movwf	((??_AsicPreCalc+4)^(0+128)+2)
  4263  0041  3F43               	moviw [3]fsr1
  4264  0042  00A9               	movwf	((??_AsicPreCalc+4)^(0+128)+3)
  4265  0043  0864               	movf	AsicPreCalc@n^(0+128),w
  4266  0044  00AA               	movwf	(??_AsicPreCalc+8)^(0+128)
  4267  0045  3001               	movlw	1
  4268  0046                     u7315:	
  4269  0046  35AA               	lslf	(??_AsicPreCalc+8)^(0+128),f
  4270  0047  3EFF               	addlw	-1
  4271  0048  1D03               	skipz
  4272  0049  2846               	goto	u7315
  4273  004A  352A               	lslf	(??_AsicPreCalc+8)^(0+128),w
  4274  004B  3EB8               	addlw	AsicPreCalc@m& (0+255)
  4275  004C  0086               	movwf	6
  4276  004D  0187               	clrf	7
  4277  004E  0826               	movf	(??_AsicPreCalc+4)^(0+128),w
  4278  004F  3FC0               	movwi [0]fsr1
  4279  0050  0827               	movf	(??_AsicPreCalc+5)^(0+128),w
  4280  0051  3FC1               	movwi [1]fsr1
  4281  0052  0828               	movf	(??_AsicPreCalc+6)^(0+128),w
  4282  0053  3FC2               	movwi [2]fsr1
  4283  0054  0829               	movf	(??_AsicPreCalc+7)^(0+128),w
  4284  0055  3FC3               	movwi [3]fsr1
  4285  0056  3001               	movlw	1
  4286  0057  00A2               	movwf	??_AsicPreCalc^(0+128)
  4287  0058  0822               	movf	??_AsicPreCalc^(0+128),w
  4288  0059  07E4               	addwf	AsicPreCalc@n^(0+128),f
  4289  005A  3008               	movlw	8
  4290  005B  0264               	subwf	AsicPreCalc@n^(0+128),w
  4291  005C  1C03               	skipc
  4292  005D  2828               	goto	l6595
  4293  005E                     l6601:	
  4294                           
  4295                           ;asic.c: 327: for(n = 0; n < 3; n++) {
  4296  005E  01E4               	clrf	AsicPreCalc@n^(0+128)
  4297  005F                     L5:	
  4298  005F  3003               	movlw	3
  4299  0060  0264               	subwf	AsicPreCalc@n^(0+128),w
  4300  0061  1803               	btfsc	3,0
  4301  0062  0008               	return
  4302                           
  4303                           ;asic.c: 329: x = m[5-n] ^ m[6-n];
  4304  0063  0364               	decf	AsicPreCalc@n^(0+128),w
  4305  0064  3AFF               	xorlw	255
  4306  0065  00A2               	movwf	??_AsicPreCalc^(0+128)
  4307  0066  3001               	movlw	1
  4308  0067                     u7345:	
  4309  0067  35A2               	lslf	??_AsicPreCalc^(0+128),f
  4310  0068  3EFF               	addlw	-1
  4311  0069  1D03               	skipz
  4312  006A  2867               	goto	u7345
  4313  006B  3522               	lslf	??_AsicPreCalc^(0+128),w
  4314  006C  3E18               	addlw	24
  4315  006D  3EB8               	addlw	AsicPreCalc@m& (0+255)
  4316  006E  0086               	movwf	6
  4317  006F  0187               	clrf	7
  4318  0070  3F40               	moviw [0]fsr1
  4319  0071  00A3               	movwf	(??_AsicPreCalc+1)^(0+128)
  4320  0072  3F41               	moviw [1]fsr1
  4321  0073  00A4               	movwf	((??_AsicPreCalc+1)^(0+128)+1)
  4322  0074  3F42               	moviw [2]fsr1
  4323  0075  00A5               	movwf	((??_AsicPreCalc+1)^(0+128)+2)
  4324  0076  3F43               	moviw [3]fsr1
  4325  0077  00A6               	movwf	((??_AsicPreCalc+1)^(0+128)+3)
  4326  0078  0364               	decf	AsicPreCalc@n^(0+128),w
  4327  0079  3AFF               	xorlw	255
  4328  007A  00A7               	movwf	(??_AsicPreCalc+5)^(0+128)
  4329  007B  3001               	movlw	1
  4330  007C                     u7355:	
  4331  007C  35A7               	lslf	(??_AsicPreCalc+5)^(0+128),f
  4332  007D  3EFF               	addlw	-1
  4333  007E  1D03               	skipz
  4334  007F  287C               	goto	u7355
  4335  0080  3527               	lslf	(??_AsicPreCalc+5)^(0+128),w
  4336  0081  3E14               	addlw	20
  4337  0082  3EB8               	addlw	AsicPreCalc@m& (0+255)
  4338  0083  0086               	movwf	6
  4339  0084  0187               	clrf	7
  4340  0085  3F40               	moviw [0]fsr1
  4341  0086  00A8               	movwf	(??_AsicPreCalc+6)^(0+128)
  4342  0087  3F41               	moviw [1]fsr1
  4343  0088  00A9               	movwf	((??_AsicPreCalc+6)^(0+128)+1)
  4344  0089  3F42               	moviw [2]fsr1
  4345  008A  00AA               	movwf	((??_AsicPreCalc+6)^(0+128)+2)
  4346  008B  3F43               	moviw [3]fsr1
  4347  008C  00AB               	movwf	((??_AsicPreCalc+6)^(0+128)+3)
  4348  008D  0823               	movf	(??_AsicPreCalc+1)^(0+128),w
  4349  008E  0628               	xorwf	(??_AsicPreCalc+6)^(0+128),w
  4350  008F  00E0               	movwf	AsicPreCalc@x^(0+128)
  4351  0090  0824               	movf	(??_AsicPreCalc+2)^(0+128),w
  4352  0091  0629               	xorwf	(??_AsicPreCalc+7)^(0+128),w
  4353  0092  00E1               	movwf	(AsicPreCalc@x+1)^(0+128)
  4354  0093  0825               	movf	(??_AsicPreCalc+3)^(0+128),w
  4355  0094  062A               	xorwf	(??_AsicPreCalc+8)^(0+128),w
  4356  0095  00E2               	movwf	(AsicPreCalc@x+2)^(0+128)
  4357  0096  0826               	movf	(??_AsicPreCalc+4)^(0+128),w
  4358  0097  062B               	xorwf	(??_AsicPreCalc+9)^(0+128),w
  4359  0098  00E3               	movwf	(AsicPreCalc@x+3)^(0+128)
  4360                           
  4361                           ;asic.c: 330: x = x & m[4-n];
  4362  0099  0364               	decf	AsicPreCalc@n^(0+128),w
  4363  009A  3AFF               	xorlw	255
  4364  009B  00A2               	movwf	??_AsicPreCalc^(0+128)
  4365  009C  3001               	movlw	1
  4366  009D                     u7365:	
  4367  009D  35A2               	lslf	??_AsicPreCalc^(0+128),f
  4368  009E  3EFF               	addlw	-1
  4369  009F  1D03               	skipz
  4370  00A0  289D               	goto	u7365
  4371  00A1  3522               	lslf	??_AsicPreCalc^(0+128),w
  4372  00A2  3E10               	addlw	16
  4373  00A3  3EB8               	addlw	AsicPreCalc@m& (0+255)
  4374  00A4  0086               	movwf	6
  4375  00A5  0187               	clrf	7
  4376  00A6  0860               	movf	AsicPreCalc@x^(0+128),w
  4377  00A7  0501               	andwf	1,w
  4378  00A8  00A3               	movwf	(??_AsicPreCalc+1)^(0+128)
  4379  00A9  3141               	addfsr 1,1
  4380  00AA  0861               	movf	(AsicPreCalc@x+1)^(0+128),w
  4381  00AB  0501               	andwf	1,w
  4382  00AC  00A4               	movwf	((??_AsicPreCalc+1)^(0+128)+1)
  4383  00AD  3141               	addfsr 1,1
  4384  00AE  0862               	movf	(AsicPreCalc@x+2)^(0+128),w
  4385  00AF  0501               	andwf	1,w
  4386  00B0  00A5               	movwf	((??_AsicPreCalc+1)^(0+128)+2)
  4387  00B1  3141               	addfsr 1,1
  4388  00B2  0863               	movf	(AsicPreCalc@x+3)^(0+128),w
  4389  00B3  0501               	andwf	1,w
  4390  00B4  00A6               	movwf	((??_AsicPreCalc+1)^(0+128)+3)
  4391  00B5  0826               	movf	(??_AsicPreCalc+4)^(0+128),w
  4392  00B6  00E3               	movwf	(AsicPreCalc@x+3)^(0+128)
  4393  00B7  0825               	movf	(??_AsicPreCalc+3)^(0+128),w
  4394  00B8  00E2               	movwf	(AsicPreCalc@x+2)^(0+128)
  4395  00B9  0824               	movf	(??_AsicPreCalc+2)^(0+128),w
  4396  00BA  00E1               	movwf	(AsicPreCalc@x+1)^(0+128)
  4397  00BB  0823               	movf	(??_AsicPreCalc+1)^(0+128),w
  4398  00BC  00E0               	movwf	AsicPreCalc@x^(0+128)
  4399                           
  4400                           ;asic.c: 331: x = m[6-n] ^ x;
  4401  00BD  0364               	decf	AsicPreCalc@n^(0+128),w
  4402  00BE  3AFF               	xorlw	255
  4403  00BF  00A2               	movwf	??_AsicPreCalc^(0+128)
  4404  00C0  3001               	movlw	1
  4405  00C1                     u7375:	
  4406  00C1  35A2               	lslf	??_AsicPreCalc^(0+128),f
  4407  00C2  3EFF               	addlw	-1
  4408  00C3  1D03               	skipz
  4409  00C4  28C1               	goto	u7375
  4410  00C5  3522               	lslf	??_AsicPreCalc^(0+128),w
  4411  00C6  3E18               	addlw	24
  4412  00C7  3EB8               	addlw	AsicPreCalc@m& (0+255)
  4413  00C8  0086               	movwf	6
  4414  00C9  0187               	clrf	7
  4415  00CA  0860               	movf	AsicPreCalc@x^(0+128),w
  4416  00CB  0601               	xorwf	1,w
  4417  00CC  00A3               	movwf	(??_AsicPreCalc+1)^(0+128)
  4418  00CD  3141               	addfsr 1,1
  4419  00CE  0861               	movf	(AsicPreCalc@x+1)^(0+128),w
  4420  00CF  0601               	xorwf	1,w
  4421  00D0  00A4               	movwf	((??_AsicPreCalc+1)^(0+128)+1)
  4422  00D1  3141               	addfsr 1,1
  4423  00D2  0862               	movf	(AsicPreCalc@x+2)^(0+128),w
  4424  00D3  0601               	xorwf	1,w
  4425  00D4  00A5               	movwf	((??_AsicPreCalc+1)^(0+128)+2)
  4426  00D5  3141               	addfsr 1,1
  4427  00D6  0863               	movf	(AsicPreCalc@x+3)^(0+128),w
  4428  00D7  0601               	xorwf	1,w
  4429  00D8  00A6               	movwf	((??_AsicPreCalc+1)^(0+128)+3)
  4430  00D9  0826               	movf	(??_AsicPreCalc+4)^(0+128),w
  4431  00DA  00E3               	movwf	(AsicPreCalc@x+3)^(0+128)
  4432  00DB  0825               	movf	(??_AsicPreCalc+3)^(0+128),w
  4433  00DC  00E2               	movwf	(AsicPreCalc@x+2)^(0+128)
  4434  00DD  0824               	movf	(??_AsicPreCalc+2)^(0+128),w
  4435  00DE  00E1               	movwf	(AsicPreCalc@x+1)^(0+128)
  4436  00DF  0823               	movf	(??_AsicPreCalc+1)^(0+128),w
  4437  00E0  00E0               	movwf	AsicPreCalc@x^(0+128)
  4438                           
  4439                           ;asic.c: 332: x += K[n];
  4440  00E1  0864               	movf	AsicPreCalc@n^(0+128),w
  4441  00E2  00A2               	movwf	??_AsicPreCalc^(0+128)
  4442  00E3  3001               	movlw	1
  4443  00E4                     u7385:	
  4444  00E4  35A2               	lslf	??_AsicPreCalc^(0+128),f
  4445  00E5  3EFF               	addlw	-1
  4446  00E6  1D03               	skipz
  4447  00E7  28E4               	goto	u7385
  4448  00E8  3522               	lslf	??_AsicPreCalc^(0+128),w
  4449  00E9  3EAC               	addlw	AsicPreCalc@K& (0+255)
  4450  00EA  0086               	movwf	6
  4451  00EB  0187               	clrf	7
  4452  00EC  3F40               	moviw [0]fsr1
  4453  00ED  07E0               	addwf	AsicPreCalc@x^(0+128),f
  4454  00EE  3F41               	moviw [1]fsr1
  4455  00EF  3DE1               	addwfc	(AsicPreCalc@x+1)^(0+128),f
  4456  00F0  3F42               	moviw [2]fsr1
  4457  00F1  3DE2               	addwfc	(AsicPreCalc@x+2)^(0+128),f
  4458  00F2  3F43               	moviw [3]fsr1
  4459  00F3  3DE3               	addwfc	(AsicPreCalc@x+3)^(0+128),f
  4460                           
  4461                           ;asic.c: 333: x += work->Merkle[n];
  4462  00F4  0864               	movf	AsicPreCalc@n^(0+128),w
  4463  00F5  00A2               	movwf	??_AsicPreCalc^(0+128)
  4464  00F6  01A3               	clrf	(??_AsicPreCalc^(0+128)+1)
  4465  00F7  35A2               	lslf	??_AsicPreCalc^(0+128),f
  4466  00F8  0DA3               	rlf	(??_AsicPreCalc^(0+128)+1),f
  4467  00F9  35A2               	lslf	??_AsicPreCalc^(0+128),f
  4468  00FA  0DA3               	rlf	(??_AsicPreCalc^(0+128)+1),f
  4469  00FB  0822               	movf	??_AsicPreCalc^(0+128),w
  4470  00FC  3E21               	addlw	33
  4471  00FD  00A4               	movwf	(??_AsicPreCalc+2)^(0+128)
  4472  00FE  3000               	movlw	0
  4473  00FF  3D23               	addwfc	(??_AsicPreCalc+1)^(0+128),w
  4474  0100  00A5               	movwf	(??_AsicPreCalc+3)^(0+128)
  4475  0101  0824               	movf	(??_AsicPreCalc+2)^(0+128),w
  4476  0102  0720               	addwf	AsicPreCalc@work^(0+128),w
  4477  0103  0086               	movwf	6
  4478  0104  0825               	movf	(??_AsicPreCalc+3)^(0+128),w
  4479  0105  3D21               	addwfc	(AsicPreCalc@work+1)^(0+128),w
  4480  0106  0087               	movwf	7
  4481  0107  3F40               	moviw [0]fsr1
  4482  0108  07E0               	addwf	AsicPreCalc@x^(0+128),f
  4483  0109  3F41               	moviw [1]fsr1
  4484  010A  3DE1               	addwfc	(AsicPreCalc@x+1)^(0+128),f
  4485  010B  3F42               	moviw [2]fsr1
  4486  010C  3DE2               	addwfc	(AsicPreCalc@x+2)^(0+128),f
  4487  010D  3F43               	moviw [3]fsr1
  4488  010E  3DE3               	addwfc	(AsicPreCalc@x+3)^(0+128),f
  4489                           
  4490                           ;asic.c: 334: x += m[7-n];
  4491  010F  0364               	decf	AsicPreCalc@n^(0+128),w
  4492  0110  3AFF               	xorlw	255
  4493  0111  00A2               	movwf	??_AsicPreCalc^(0+128)
  4494  0112  3001               	movlw	1
  4495  0113                     u7395:	
  4496  0113  35A2               	lslf	??_AsicPreCalc^(0+128),f
  4497  0114  3EFF               	addlw	-1
  4498  0115  1D03               	skipz
  4499  0116  2913               	goto	u7395
  4500  0117  3522               	lslf	??_AsicPreCalc^(0+128),w
  4501  0118  3E1C               	addlw	28
  4502  0119  3EB8               	addlw	AsicPreCalc@m& (0+255)
  4503  011A  0086               	movwf	6
  4504  011B  0187               	clrf	7
  4505  011C  3F40               	moviw [0]fsr1
  4506  011D  07E0               	addwf	AsicPreCalc@x^(0+128),f
  4507  011E  3F41               	moviw [1]fsr1
  4508  011F  3DE1               	addwfc	(AsicPreCalc@x+1)^(0+128),f
  4509  0120  3F42               	moviw [2]fsr1
  4510  0121  3DE2               	addwfc	(AsicPreCalc@x+2)^(0+128),f
  4511  0122  3F43               	moviw [3]fsr1
  4512  0123  3DE3               	addwfc	(AsicPreCalc@x+3)^(0+128),f
  4513                           
  4514                           ;asic.c: 335: y = rotate(m[4-n], 26);
  4515  0124  0364               	decf	AsicPreCalc@n^(0+128),w
  4516  0125  3AFF               	xorlw	255
  4517  0126  00A2               	movwf	??_AsicPreCalc^(0+128)
  4518  0127  3001               	movlw	1
  4519  0128                     u7405:	
  4520  0128  35A2               	lslf	??_AsicPreCalc^(0+128),f
  4521  0129  3EFF               	addlw	-1
  4522  012A  1D03               	skipz
  4523  012B  2928               	goto	u7405
  4524  012C  3522               	lslf	??_AsicPreCalc^(0+128),w
  4525  012D  3E10               	addlw	16
  4526  012E  3EB8               	addlw	AsicPreCalc@m& (0+255)
  4527  012F  0086               	movwf	6
  4528  0130  0187               	clrf	7
  4529  0131  3F40               	moviw [0]fsr1
  4530  0132  0020               	movlb	0	; select bank0
  4531  0133  00D8               	movwf	?_rotate
  4532  0134  3F41               	moviw [1]fsr1
  4533  0135  00D9               	movwf	?_rotate+1
  4534  0136  3F42               	moviw [2]fsr1
  4535  0137  00DA               	movwf	?_rotate+2
  4536  0138  3F43               	moviw [3]fsr1
  4537  0139  00DB               	movwf	?_rotate+3
  4538  013A  301A               	movlw	26
  4539  013B  0021               	movlb	1	; select bank1
  4540  013C  00A3               	movwf	(??_AsicPreCalc+1)^(0+128)
  4541  013D  0823               	movf	(??_AsicPreCalc+1)^(0+128),w
  4542  013E  0020               	movlb	0	; select bank0
  4543  013F  00DC               	movwf	?_rotate+4
  4544  0140  319E  267D  3180   	fcall	_rotate
  4545  0143  0020               	movlb	0	; select bank0
  4546  0144  085B               	movf	?_rotate+3,w
  4547  0145  0021               	movlb	1	; select bank1
  4548  0146  00DF               	movwf	(AsicPreCalc@y+3)^(0+128)
  4549  0147  0020               	movlb	0	; select bank0
  4550  0148  085A               	movf	?_rotate+2,w
  4551  0149  0021               	movlb	1	; select bank1
  4552  014A  00DE               	movwf	(AsicPreCalc@y+2)^(0+128)
  4553  014B  0020               	movlb	0	; select bank0
  4554  014C  0859               	movf	?_rotate+1,w
  4555  014D  0021               	movlb	1	; select bank1
  4556  014E  00DD               	movwf	(AsicPreCalc@y+1)^(0+128)
  4557  014F  0020               	movlb	0	; select bank0
  4558  0150  0858               	movf	?_rotate,w
  4559  0151  0021               	movlb	1	; select bank1
  4560  0152  00DC               	movwf	AsicPreCalc@y^(0+128)
  4561                           
  4562                           ;asic.c: 336: z = rotate(m[4-n], 21);
  4563  0153  0364               	decf	AsicPreCalc@n^(0+128),w
  4564  0154  3AFF               	xorlw	255
  4565  0155  00A2               	movwf	??_AsicPreCalc^(0+128)
  4566  0156  3001               	movlw	1
  4567  0157                     u7415:	
  4568  0157  35A2               	lslf	??_AsicPreCalc^(0+128),f
  4569  0158  3EFF               	addlw	-1
  4570  0159  1D03               	skipz
  4571  015A  2957               	goto	u7415
  4572  015B  3522               	lslf	??_AsicPreCalc^(0+128),w
  4573  015C  3E10               	addlw	16
  4574  015D  3EB8               	addlw	AsicPreCalc@m& (0+255)
  4575  015E  0086               	movwf	6
  4576  015F  0187               	clrf	7
  4577  0160  3F40               	moviw [0]fsr1
  4578  0161  0020               	movlb	0	; select bank0
  4579  0162  00D8               	movwf	?_rotate
  4580  0163  3F41               	moviw [1]fsr1
  4581  0164  00D9               	movwf	?_rotate+1
  4582  0165  3F42               	moviw [2]fsr1
  4583  0166  00DA               	movwf	?_rotate+2
  4584  0167  3F43               	moviw [3]fsr1
  4585  0168  00DB               	movwf	?_rotate+3
  4586  0169  3015               	movlw	21
  4587  016A  0021               	movlb	1	; select bank1
  4588  016B  00A3               	movwf	(??_AsicPreCalc+1)^(0+128)
  4589  016C  0823               	movf	(??_AsicPreCalc+1)^(0+128),w
  4590  016D  0020               	movlb	0	; select bank0
  4591  016E  00DC               	movwf	?_rotate+4
  4592  016F  319E  267D  3180   	fcall	_rotate
  4593  0172  0020               	movlb	0	; select bank0
  4594  0173  085B               	movf	?_rotate+3,w
  4595  0174  0021               	movlb	1	; select bank1
  4596  0175  00DB               	movwf	(AsicPreCalc@z+3)^(0+128)
  4597  0176  0020               	movlb	0	; select bank0
  4598  0177  085A               	movf	?_rotate+2,w
  4599  0178  0021               	movlb	1	; select bank1
  4600  0179  00DA               	movwf	(AsicPreCalc@z+2)^(0+128)
  4601  017A  0020               	movlb	0	; select bank0
  4602  017B  0859               	movf	?_rotate+1,w
  4603  017C  0021               	movlb	1	; select bank1
  4604  017D  00D9               	movwf	(AsicPreCalc@z+1)^(0+128)
  4605  017E  0020               	movlb	0	; select bank0
  4606  017F  0858               	movf	?_rotate,w
  4607  0180  0021               	movlb	1	; select bank1
  4608  0181  00D8               	movwf	AsicPreCalc@z^(0+128)
  4609                           
  4610                           ;asic.c: 337: z = y^z;
  4611  0182  085C               	movf	AsicPreCalc@y^(0+128),w
  4612  0183  0658               	xorwf	AsicPreCalc@z^(0+128),w
  4613  0184  00A2               	movwf	??_AsicPreCalc^(0+128)
  4614  0185  085D               	movf	(AsicPreCalc@y+1)^(0+128),w
  4615  0186  0659               	xorwf	(AsicPreCalc@z+1)^(0+128),w
  4616  0187  00A3               	movwf	(??_AsicPreCalc^(0+128)+1)
  4617  0188  085E               	movf	(AsicPreCalc@y+2)^(0+128),w
  4618  0189  065A               	xorwf	(AsicPreCalc@z+2)^(0+128),w
  4619  018A  00A4               	movwf	(??_AsicPreCalc^(0+128)+2)
  4620  018B  085F               	movf	(AsicPreCalc@y+3)^(0+128),w
  4621  018C  065B               	xorwf	(AsicPreCalc@z+3)^(0+128),w
  4622  018D  00A5               	movwf	(??_AsicPreCalc^(0+128)+3)
  4623  018E  0825               	movf	(??_AsicPreCalc+3)^(0+128),w
  4624  018F  00DB               	movwf	(AsicPreCalc@z+3)^(0+128)
  4625  0190  0824               	movf	(??_AsicPreCalc+2)^(0+128),w
  4626  0191  00DA               	movwf	(AsicPreCalc@z+2)^(0+128)
  4627  0192  0823               	movf	(??_AsicPreCalc+1)^(0+128),w
  4628  0193  00D9               	movwf	(AsicPreCalc@z+1)^(0+128)
  4629  0194  0822               	movf	??_AsicPreCalc^(0+128),w
  4630  0195  00D8               	movwf	AsicPreCalc@z^(0+128)
  4631                           
  4632                           ;asic.c: 338: y = rotate(m[4-n], 7);
  4633  0196  0364               	decf	AsicPreCalc@n^(0+128),w
  4634  0197  3AFF               	xorlw	255
  4635  0198  00A2               	movwf	??_AsicPreCalc^(0+128)
  4636  0199  3001               	movlw	1
  4637  019A                     u7425:	
  4638  019A  35A2               	lslf	??_AsicPreCalc^(0+128),f
  4639  019B  3EFF               	addlw	-1
  4640  019C  1D03               	skipz
  4641  019D  299A               	goto	u7425
  4642  019E  3522               	lslf	??_AsicPreCalc^(0+128),w
  4643  019F  3E10               	addlw	16
  4644  01A0  3EB8               	addlw	AsicPreCalc@m& (0+255)
  4645  01A1  0086               	movwf	6
  4646  01A2  0187               	clrf	7
  4647  01A3  3F40               	moviw [0]fsr1
  4648  01A4  0020               	movlb	0	; select bank0
  4649  01A5  00D8               	movwf	?_rotate
  4650  01A6  3F41               	moviw [1]fsr1
  4651  01A7  00D9               	movwf	?_rotate+1
  4652  01A8  3F42               	moviw [2]fsr1
  4653  01A9  00DA               	movwf	?_rotate+2
  4654  01AA  3F43               	moviw [3]fsr1
  4655  01AB  00DB               	movwf	?_rotate+3
  4656  01AC  3007               	movlw	7
  4657  01AD  0021               	movlb	1	; select bank1
  4658  01AE  00A3               	movwf	(??_AsicPreCalc+1)^(0+128)
  4659  01AF  0823               	movf	(??_AsicPreCalc+1)^(0+128),w
  4660  01B0  0020               	movlb	0	; select bank0
  4661  01B1  00DC               	movwf	?_rotate+4
  4662  01B2  319E  267D  3180   	fcall	_rotate
  4663  01B5  0020               	movlb	0	; select bank0
  4664  01B6  085B               	movf	?_rotate+3,w
  4665  01B7  0021               	movlb	1	; select bank1
  4666  01B8  00DF               	movwf	(AsicPreCalc@y+3)^(0+128)
  4667  01B9  0020               	movlb	0	; select bank0
  4668  01BA  085A               	movf	?_rotate+2,w
  4669  01BB  0021               	movlb	1	; select bank1
  4670  01BC  00DE               	movwf	(AsicPreCalc@y+2)^(0+128)
  4671  01BD  0020               	movlb	0	; select bank0
  4672  01BE  0859               	movf	?_rotate+1,w
  4673  01BF  0021               	movlb	1	; select bank1
  4674  01C0  00DD               	movwf	(AsicPreCalc@y+1)^(0+128)
  4675  01C1  0020               	movlb	0	; select bank0
  4676  01C2  0858               	movf	?_rotate,w
  4677  01C3  0021               	movlb	1	; select bank1
  4678  01C4  00DC               	movwf	AsicPreCalc@y^(0+128)
  4679                           
  4680                           ;asic.c: 339: z = y^z;
  4681  01C5  085C               	movf	AsicPreCalc@y^(0+128),w
  4682  01C6  0658               	xorwf	AsicPreCalc@z^(0+128),w
  4683  01C7  00A2               	movwf	??_AsicPreCalc^(0+128)
  4684  01C8  085D               	movf	(AsicPreCalc@y+1)^(0+128),w
  4685  01C9  0659               	xorwf	(AsicPreCalc@z+1)^(0+128),w
  4686  01CA  00A3               	movwf	(??_AsicPreCalc^(0+128)+1)
  4687  01CB  085E               	movf	(AsicPreCalc@y+2)^(0+128),w
  4688  01CC  065A               	xorwf	(AsicPreCalc@z+2)^(0+128),w
  4689  01CD  00A4               	movwf	(??_AsicPreCalc^(0+128)+2)
  4690  01CE  085F               	movf	(AsicPreCalc@y+3)^(0+128),w
  4691  01CF  065B               	xorwf	(AsicPreCalc@z+3)^(0+128),w
  4692  01D0  00A5               	movwf	(??_AsicPreCalc^(0+128)+3)
  4693  01D1  0825               	movf	(??_AsicPreCalc+3)^(0+128),w
  4694  01D2  00DB               	movwf	(AsicPreCalc@z+3)^(0+128)
  4695  01D3  0824               	movf	(??_AsicPreCalc+2)^(0+128),w
  4696  01D4  00DA               	movwf	(AsicPreCalc@z+2)^(0+128)
  4697  01D5  0823               	movf	(??_AsicPreCalc+1)^(0+128),w
  4698  01D6  00D9               	movwf	(AsicPreCalc@z+1)^(0+128)
  4699  01D7  0822               	movf	??_AsicPreCalc^(0+128),w
  4700  01D8  00D8               	movwf	AsicPreCalc@z^(0+128)
  4701                           
  4702                           ;asic.c: 340: m[7-n] = z+x;
  4703  01D9  0858               	movf	AsicPreCalc@z^(0+128),w
  4704  01DA  0760               	addwf	AsicPreCalc@x^(0+128),w
  4705  01DB  00A2               	movwf	??_AsicPreCalc^(0+128)
  4706  01DC  0859               	movf	(AsicPreCalc@z+1)^(0+128),w
  4707  01DD  3D61               	addwfc	(AsicPreCalc@x+1)^(0+128),w
  4708  01DE  00A3               	movwf	(??_AsicPreCalc^(0+128)+1)
  4709  01DF  085A               	movf	(AsicPreCalc@z+2)^(0+128),w
  4710  01E0  3D62               	addwfc	(AsicPreCalc@x+2)^(0+128),w
  4711  01E1  00A4               	movwf	(??_AsicPreCalc^(0+128)+2)
  4712  01E2  085B               	movf	(AsicPreCalc@z+3)^(0+128),w
  4713  01E3  3D63               	addwfc	(AsicPreCalc@x+3)^(0+128),w
  4714  01E4  00A5               	movwf	(??_AsicPreCalc^(0+128)+3)
  4715  01E5  0364               	decf	AsicPreCalc@n^(0+128),w
  4716  01E6  3AFF               	xorlw	255
  4717  01E7  00A6               	movwf	(??_AsicPreCalc+4)^(0+128)
  4718  01E8  3001               	movlw	1
  4719  01E9                     u7435:	
  4720  01E9  35A6               	lslf	(??_AsicPreCalc+4)^(0+128),f
  4721  01EA  3EFF               	addlw	-1
  4722  01EB  1D03               	skipz
  4723  01EC  29E9               	goto	u7435
  4724  01ED  3526               	lslf	(??_AsicPreCalc+4)^(0+128),w
  4725  01EE  3E1C               	addlw	28
  4726  01EF  3EB8               	addlw	AsicPreCalc@m& (0+255)
  4727  01F0  0086               	movwf	6
  4728  01F1  0187               	clrf	7
  4729  01F2  0822               	movf	??_AsicPreCalc^(0+128),w
  4730  01F3  3FC0               	movwi [0]fsr1
  4731  01F4  0823               	movf	(??_AsicPreCalc+1)^(0+128),w
  4732  01F5  3FC1               	movwi [1]fsr1
  4733  01F6  0824               	movf	(??_AsicPreCalc+2)^(0+128),w
  4734  01F7  3FC2               	movwi [2]fsr1
  4735  01F8  0825               	movf	(??_AsicPreCalc+3)^(0+128),w
  4736  01F9  3FC3               	movwi [3]fsr1
  4737                           
  4738                           ;asic.c: 341: m[3-n] = m[3-n] + m[7-n];
  4739  01FA  0364               	decf	AsicPreCalc@n^(0+128),w
  4740  01FB  3AFF               	xorlw	255
  4741  01FC  00A2               	movwf	??_AsicPreCalc^(0+128)
  4742  01FD  3001               	movlw	1
  4743  01FE                     u7445:	
  4744  01FE  35A2               	lslf	??_AsicPreCalc^(0+128),f
  4745  01FF  3EFF               	addlw	-1
  4746  0200  1D03               	skipz
  4747  0201  29FE               	goto	u7445
  4748  0202  3522               	lslf	??_AsicPreCalc^(0+128),w
  4749  0203  3E1C               	addlw	28
  4750  0204  3EB8               	addlw	AsicPreCalc@m& (0+255)
  4751  0205  0086               	movwf	6
  4752  0206  0187               	clrf	7
  4753  0207  3F40               	moviw [0]fsr1
  4754  0208  00A3               	movwf	(??_AsicPreCalc+1)^(0+128)
  4755  0209  3F41               	moviw [1]fsr1
  4756  020A  00A4               	movwf	((??_AsicPreCalc+1)^(0+128)+1)
  4757  020B  3F42               	moviw [2]fsr1
  4758  020C  00A5               	movwf	((??_AsicPreCalc+1)^(0+128)+2)
  4759  020D  3F43               	moviw [3]fsr1
  4760  020E  00A6               	movwf	((??_AsicPreCalc+1)^(0+128)+3)
  4761  020F  0364               	decf	AsicPreCalc@n^(0+128),w
  4762  0210  3AFF               	xorlw	255
  4763  0211  00A7               	movwf	(??_AsicPreCalc+5)^(0+128)
  4764  0212  3001               	movlw	1
  4765  0213                     u7455:	
  4766  0213  35A7               	lslf	(??_AsicPreCalc+5)^(0+128),f
  4767  0214  3EFF               	addlw	-1
  4768  0215  1D03               	skipz
  4769  0216  2A13               	goto	u7455
  4770  0217  3527               	lslf	(??_AsicPreCalc+5)^(0+128),w
  4771  0218  3E0C               	addlw	12
  4772  0219  3EB8               	addlw	AsicPreCalc@m& (0+255)
  4773  021A  0086               	movwf	6
  4774  021B  0187               	clrf	7
  4775  021C  3F40               	moviw [0]fsr1
  4776  021D  07A3               	addwf	(??_AsicPreCalc+1)^(0+128),f
  4777  021E  3F41               	moviw [1]fsr1
  4778  021F  3DA4               	addwfc	((??_AsicPreCalc+1)^(0+128)+1),f
  4779  0220  3F42               	moviw [2]fsr1
  4780  0221  3DA5               	addwfc	((??_AsicPreCalc+1)^(0+128)+2),f
  4781  0222  3F43               	moviw [3]fsr1
  4782  0223  3DA6               	addwfc	((??_AsicPreCalc+1)^(0+128)+3),f
  4783  0224  0364               	decf	AsicPreCalc@n^(0+128),w
  4784  0225  3AFF               	xorlw	255
  4785  0226  00A8               	movwf	(??_AsicPreCalc+6)^(0+128)
  4786  0227  3001               	movlw	1
  4787  0228                     u7465:	
  4788  0228  35A8               	lslf	(??_AsicPreCalc+6)^(0+128),f
  4789  0229  3EFF               	addlw	-1
  4790  022A  1D03               	skipz
  4791  022B  2A28               	goto	u7465
  4792  022C  3528               	lslf	(??_AsicPreCalc+6)^(0+128),w
  4793  022D  3E0C               	addlw	12
  4794  022E  3EB8               	addlw	AsicPreCalc@m& (0+255)
  4795  022F  0086               	movwf	6
  4796  0230  0187               	clrf	7
  4797  0231  0823               	movf	(??_AsicPreCalc+1)^(0+128),w
  4798  0232  3FC0               	movwi [0]fsr1
  4799  0233  0824               	movf	(??_AsicPreCalc+2)^(0+128),w
  4800  0234  3FC1               	movwi [1]fsr1
  4801  0235  0825               	movf	(??_AsicPreCalc+3)^(0+128),w
  4802  0236  3FC2               	movwi [2]fsr1
  4803  0237  0826               	movf	(??_AsicPreCalc+4)^(0+128),w
  4804  0238  3FC3               	movwi [3]fsr1
  4805                           
  4806                           ;asic.c: 342: x = rotate(m[((0-n)&7)], 30);
  4807  0239  0364               	decf	AsicPreCalc@n^(0+128),w
  4808  023A  3AFF               	xorlw	255
  4809  023B  3907               	andlw	7
  4810  023C  00A2               	movwf	??_AsicPreCalc^(0+128)
  4811  023D  3001               	movlw	1
  4812  023E                     u7475:	
  4813  023E  35A2               	lslf	??_AsicPreCalc^(0+128),f
  4814  023F  3EFF               	addlw	-1
  4815  0240  1D03               	skipz
  4816  0241  2A3E               	goto	u7475
  4817  0242  3522               	lslf	??_AsicPreCalc^(0+128),w
  4818  0243  3EB8               	addlw	AsicPreCalc@m& (0+255)
  4819  0244  0086               	movwf	6
  4820  0245  0187               	clrf	7
  4821  0246  3F40               	moviw [0]fsr1
  4822  0247  0020               	movlb	0	; select bank0
  4823  0248  00D8               	movwf	?_rotate
  4824  0249  3F41               	moviw [1]fsr1
  4825  024A  00D9               	movwf	?_rotate+1
  4826  024B  3F42               	moviw [2]fsr1
  4827  024C  00DA               	movwf	?_rotate+2
  4828  024D  3F43               	moviw [3]fsr1
  4829  024E  00DB               	movwf	?_rotate+3
  4830  024F  301E               	movlw	30
  4831  0250  0021               	movlb	1	; select bank1
  4832  0251  00A3               	movwf	(??_AsicPreCalc+1)^(0+128)
  4833  0252  0823               	movf	(??_AsicPreCalc+1)^(0+128),w
  4834  0253  0020               	movlb	0	; select bank0
  4835  0254  00DC               	movwf	?_rotate+4
  4836  0255  319E  267D  3180   	fcall	_rotate
  4837  0258  0020               	movlb	0	; select bank0
  4838  0259  085B               	movf	?_rotate+3,w
  4839  025A  0021               	movlb	1	; select bank1
  4840  025B  00E3               	movwf	(AsicPreCalc@x+3)^(0+128)
  4841  025C  0020               	movlb	0	; select bank0
  4842  025D  085A               	movf	?_rotate+2,w
  4843  025E  0021               	movlb	1	; select bank1
  4844  025F  00E2               	movwf	(AsicPreCalc@x+2)^(0+128)
  4845  0260  0020               	movlb	0	; select bank0
  4846  0261  0859               	movf	?_rotate+1,w
  4847  0262  0021               	movlb	1	; select bank1
  4848  0263  00E1               	movwf	(AsicPreCalc@x+1)^(0+128)
  4849  0264  0020               	movlb	0	; select bank0
  4850  0265  0858               	movf	?_rotate,w
  4851  0266  0021               	movlb	1	; select bank1
  4852  0267  00E0               	movwf	AsicPreCalc@x^(0+128)
  4853                           
  4854                           ;asic.c: 343: y = rotate(m[((0-n)&7)], 19);
  4855  0268  0364               	decf	AsicPreCalc@n^(0+128),w
  4856  0269  3AFF               	xorlw	255
  4857  026A  3907               	andlw	7
  4858  026B  00A2               	movwf	??_AsicPreCalc^(0+128)
  4859  026C  3001               	movlw	1
  4860  026D                     u7485:	
  4861  026D  35A2               	lslf	??_AsicPreCalc^(0+128),f
  4862  026E  3EFF               	addlw	-1
  4863  026F  1D03               	skipz
  4864  0270  2A6D               	goto	u7485
  4865  0271  3522               	lslf	??_AsicPreCalc^(0+128),w
  4866  0272  3EB8               	addlw	AsicPreCalc@m& (0+255)
  4867  0273  0086               	movwf	6
  4868  0274  0187               	clrf	7
  4869  0275  3F40               	moviw [0]fsr1
  4870  0276  0020               	movlb	0	; select bank0
  4871  0277  00D8               	movwf	?_rotate
  4872  0278  3F41               	moviw [1]fsr1
  4873  0279  00D9               	movwf	?_rotate+1
  4874  027A  3F42               	moviw [2]fsr1
  4875  027B  00DA               	movwf	?_rotate+2
  4876  027C  3F43               	moviw [3]fsr1
  4877  027D  00DB               	movwf	?_rotate+3
  4878  027E  3013               	movlw	19
  4879  027F  0021               	movlb	1	; select bank1
  4880  0280  00A3               	movwf	(??_AsicPreCalc+1)^(0+128)
  4881  0281  0823               	movf	(??_AsicPreCalc+1)^(0+128),w
  4882  0282  0020               	movlb	0	; select bank0
  4883  0283  00DC               	movwf	?_rotate+4
  4884  0284  319E  267D  3180   	fcall	_rotate
  4885  0287  0020               	movlb	0	; select bank0
  4886  0288  085B               	movf	?_rotate+3,w
  4887  0289  0021               	movlb	1	; select bank1
  4888  028A  00DF               	movwf	(AsicPreCalc@y+3)^(0+128)
  4889  028B  0020               	movlb	0	; select bank0
  4890  028C  085A               	movf	?_rotate+2,w
  4891  028D  0021               	movlb	1	; select bank1
  4892  028E  00DE               	movwf	(AsicPreCalc@y+2)^(0+128)
  4893  028F  0020               	movlb	0	; select bank0
  4894  0290  0859               	movf	?_rotate+1,w
  4895  0291  0021               	movlb	1	; select bank1
  4896  0292  00DD               	movwf	(AsicPreCalc@y+1)^(0+128)
  4897  0293  0020               	movlb	0	; select bank0
  4898  0294  0858               	movf	?_rotate,w
  4899  0295  0021               	movlb	1	; select bank1
  4900  0296  00DC               	movwf	AsicPreCalc@y^(0+128)
  4901                           
  4902                           ;asic.c: 344: y = y^x;
  4903  0297  085C               	movf	AsicPreCalc@y^(0+128),w
  4904  0298  0660               	xorwf	AsicPreCalc@x^(0+128),w
  4905  0299  00A2               	movwf	??_AsicPreCalc^(0+128)
  4906  029A  085D               	movf	(AsicPreCalc@y+1)^(0+128),w
  4907  029B  0661               	xorwf	(AsicPreCalc@x+1)^(0+128),w
  4908  029C  00A3               	movwf	(??_AsicPreCalc^(0+128)+1)
  4909  029D  085E               	movf	(AsicPreCalc@y+2)^(0+128),w
  4910  029E  0662               	xorwf	(AsicPreCalc@x+2)^(0+128),w
  4911  029F  00A4               	movwf	(??_AsicPreCalc^(0+128)+2)
  4912  02A0  085F               	movf	(AsicPreCalc@y+3)^(0+128),w
  4913  02A1  0663               	xorwf	(AsicPreCalc@x+3)^(0+128),w
  4914  02A2  00A5               	movwf	(??_AsicPreCalc^(0+128)+3)
  4915  02A3  0825               	movf	(??_AsicPreCalc+3)^(0+128),w
  4916  02A4  00DF               	movwf	(AsicPreCalc@y+3)^(0+128)
  4917  02A5  0824               	movf	(??_AsicPreCalc+2)^(0+128),w
  4918  02A6  00DE               	movwf	(AsicPreCalc@y+2)^(0+128)
  4919  02A7  0823               	movf	(??_AsicPreCalc+1)^(0+128),w
  4920  02A8  00DD               	movwf	(AsicPreCalc@y+1)^(0+128)
  4921  02A9  0822               	movf	??_AsicPreCalc^(0+128),w
  4922  02AA  00DC               	movwf	AsicPreCalc@y^(0+128)
  4923                           
  4924                           ;asic.c: 345: x = rotate(m[((0-n)&7)], 10);
  4925  02AB  0364               	decf	AsicPreCalc@n^(0+128),w
  4926  02AC  3AFF               	xorlw	255
  4927  02AD  3907               	andlw	7
  4928  02AE  00A2               	movwf	??_AsicPreCalc^(0+128)
  4929  02AF  3001               	movlw	1
  4930  02B0                     u7495:	
  4931  02B0  35A2               	lslf	??_AsicPreCalc^(0+128),f
  4932  02B1  3EFF               	addlw	-1
  4933  02B2  1D03               	skipz
  4934  02B3  2AB0               	goto	u7495
  4935  02B4  3522               	lslf	??_AsicPreCalc^(0+128),w
  4936  02B5  3EB8               	addlw	AsicPreCalc@m& (0+255)
  4937  02B6  0086               	movwf	6
  4938  02B7  0187               	clrf	7
  4939  02B8  3F40               	moviw [0]fsr1
  4940  02B9  0020               	movlb	0	; select bank0
  4941  02BA  00D8               	movwf	?_rotate
  4942  02BB  3F41               	moviw [1]fsr1
  4943  02BC  00D9               	movwf	?_rotate+1
  4944  02BD  3F42               	moviw [2]fsr1
  4945  02BE  00DA               	movwf	?_rotate+2
  4946  02BF  3F43               	moviw [3]fsr1
  4947  02C0  00DB               	movwf	?_rotate+3
  4948  02C1  300A               	movlw	10
  4949  02C2  0021               	movlb	1	; select bank1
  4950  02C3  00A3               	movwf	(??_AsicPreCalc+1)^(0+128)
  4951  02C4  0823               	movf	(??_AsicPreCalc+1)^(0+128),w
  4952  02C5  0020               	movlb	0	; select bank0
  4953  02C6  00DC               	movwf	?_rotate+4
  4954  02C7  319E  267D  3180   	fcall	_rotate
  4955  02CA  0020               	movlb	0	; select bank0
  4956  02CB  085B               	movf	?_rotate+3,w
  4957  02CC  0021               	movlb	1	; select bank1
  4958  02CD  00E3               	movwf	(AsicPreCalc@x+3)^(0+128)
  4959  02CE  0020               	movlb	0	; select bank0
  4960  02CF  085A               	movf	?_rotate+2,w
  4961  02D0  0021               	movlb	1	; select bank1
  4962  02D1  00E2               	movwf	(AsicPreCalc@x+2)^(0+128)
  4963  02D2  0020               	movlb	0	; select bank0
  4964  02D3  0859               	movf	?_rotate+1,w
  4965  02D4  0021               	movlb	1	; select bank1
  4966  02D5  00E1               	movwf	(AsicPreCalc@x+1)^(0+128)
  4967  02D6  0020               	movlb	0	; select bank0
  4968  02D7  0858               	movf	?_rotate,w
  4969  02D8  0021               	movlb	1	; select bank1
  4970  02D9  00E0               	movwf	AsicPreCalc@x^(0+128)
  4971                           
  4972                           ;asic.c: 346: y = x^y;
  4973  02DA  0860               	movf	AsicPreCalc@x^(0+128),w
  4974  02DB  065C               	xorwf	AsicPreCalc@y^(0+128),w
  4975  02DC  00A2               	movwf	??_AsicPreCalc^(0+128)
  4976  02DD  0861               	movf	(AsicPreCalc@x+1)^(0+128),w
  4977  02DE  065D               	xorwf	(AsicPreCalc@y+1)^(0+128),w
  4978  02DF  00A3               	movwf	(??_AsicPreCalc^(0+128)+1)
  4979  02E0  0862               	movf	(AsicPreCalc@x+2)^(0+128),w
  4980  02E1  065E               	xorwf	(AsicPreCalc@y+2)^(0+128),w
  4981  02E2  00A4               	movwf	(??_AsicPreCalc^(0+128)+2)
  4982  02E3  0863               	movf	(AsicPreCalc@x+3)^(0+128),w
  4983  02E4  065F               	xorwf	(AsicPreCalc@y+3)^(0+128),w
  4984  02E5  00A5               	movwf	(??_AsicPreCalc^(0+128)+3)
  4985  02E6  0825               	movf	(??_AsicPreCalc+3)^(0+128),w
  4986  02E7  00DF               	movwf	(AsicPreCalc@y+3)^(0+128)
  4987  02E8  0824               	movf	(??_AsicPreCalc+2)^(0+128),w
  4988  02E9  00DE               	movwf	(AsicPreCalc@y+2)^(0+128)
  4989  02EA  0823               	movf	(??_AsicPreCalc+1)^(0+128),w
  4990  02EB  00DD               	movwf	(AsicPreCalc@y+1)^(0+128)
  4991  02EC  0822               	movf	??_AsicPreCalc^(0+128),w
  4992  02ED  00DC               	movwf	AsicPreCalc@y^(0+128)
  4993                           
  4994                           ;asic.c: 347: x = m[((0-n)&7)] | m[((1-n)&7)];
  4995  02EE  0364               	decf	AsicPreCalc@n^(0+128),w
  4996  02EF  3AFF               	xorlw	255
  4997  02F0  3E01               	addlw	1
  4998  02F1  3907               	andlw	7
  4999  02F2  00A2               	movwf	??_AsicPreCalc^(0+128)
  5000  02F3  3001               	movlw	1
  5001  02F4                     u7505:	
  5002  02F4  35A2               	lslf	??_AsicPreCalc^(0+128),f
  5003  02F5  3EFF               	addlw	-1
  5004  02F6  1D03               	skipz
  5005  02F7  2AF4               	goto	u7505
  5006  02F8  3522               	lslf	??_AsicPreCalc^(0+128),w
  5007  02F9  3EB8               	addlw	AsicPreCalc@m& (0+255)
  5008  02FA  0086               	movwf	6
  5009  02FB  0187               	clrf	7
  5010  02FC  3F40               	moviw [0]fsr1
  5011  02FD  00A3               	movwf	(??_AsicPreCalc+1)^(0+128)
  5012  02FE  3F41               	moviw [1]fsr1
  5013  02FF  00A4               	movwf	((??_AsicPreCalc+1)^(0+128)+1)
  5014  0300  3F42               	moviw [2]fsr1
  5015  0301  00A5               	movwf	((??_AsicPreCalc+1)^(0+128)+2)
  5016  0302  3F43               	moviw [3]fsr1
  5017  0303  00A6               	movwf	((??_AsicPreCalc+1)^(0+128)+3)
  5018  0304  0364               	decf	AsicPreCalc@n^(0+128),w
  5019  0305  3AFF               	xorlw	255
  5020  0306  3907               	andlw	7
  5021  0307  00A7               	movwf	(??_AsicPreCalc+5)^(0+128)
  5022  0308  3001               	movlw	1
  5023  0309                     u7515:	
  5024  0309  35A7               	lslf	(??_AsicPreCalc+5)^(0+128),f
  5025  030A  3EFF               	addlw	-1
  5026  030B  1D03               	skipz
  5027  030C  2B09               	goto	u7515
  5028  030D  3527               	lslf	(??_AsicPreCalc+5)^(0+128),w
  5029  030E  3EB8               	addlw	AsicPreCalc@m& (0+255)
  5030  030F  0086               	movwf	6
  5031  0310  0187               	clrf	7
  5032  0311  3F40               	moviw [0]fsr1
  5033  0312  00A8               	movwf	(??_AsicPreCalc+6)^(0+128)
  5034  0313  3F41               	moviw [1]fsr1
  5035  0314  00A9               	movwf	((??_AsicPreCalc+6)^(0+128)+1)
  5036  0315  3F42               	moviw [2]fsr1
  5037  0316  00AA               	movwf	((??_AsicPreCalc+6)^(0+128)+2)
  5038  0317  3F43               	moviw [3]fsr1
  5039  0318  00AB               	movwf	((??_AsicPreCalc+6)^(0+128)+3)
  5040  0319  0823               	movf	(??_AsicPreCalc+1)^(0+128),w
  5041  031A  0428               	iorwf	(??_AsicPreCalc+6)^(0+128),w
  5042  031B  00E0               	movwf	AsicPreCalc@x^(0+128)
  5043  031C  0824               	movf	(??_AsicPreCalc+2)^(0+128),w
  5044  031D  0429               	iorwf	(??_AsicPreCalc+7)^(0+128),w
  5045  031E  00E1               	movwf	(AsicPreCalc@x+1)^(0+128)
  5046  031F  0825               	movf	(??_AsicPreCalc+3)^(0+128),w
  5047  0320  042A               	iorwf	(??_AsicPreCalc+8)^(0+128),w
  5048  0321  00E2               	movwf	(AsicPreCalc@x+2)^(0+128)
  5049  0322  0826               	movf	(??_AsicPreCalc+4)^(0+128),w
  5050  0323  042B               	iorwf	(??_AsicPreCalc+9)^(0+128),w
  5051  0324  00E3               	movwf	(AsicPreCalc@x+3)^(0+128)
  5052                           
  5053                           ;asic.c: 348: x = m[((2-n)&7)] & x;
  5054  0325  0364               	decf	AsicPreCalc@n^(0+128),w
  5055  0326  3AFF               	xorlw	255
  5056  0327  3E02               	addlw	2
  5057  0328  3907               	andlw	7
  5058  0329  00A2               	movwf	??_AsicPreCalc^(0+128)
  5059  032A  3001               	movlw	1
  5060  032B                     u7525:	
  5061  032B  35A2               	lslf	??_AsicPreCalc^(0+128),f
  5062  032C  3EFF               	addlw	-1
  5063  032D  1D03               	skipz
  5064  032E  2B2B               	goto	u7525
  5065  032F  3522               	lslf	??_AsicPreCalc^(0+128),w
  5066  0330  3EB8               	addlw	AsicPreCalc@m& (0+255)
  5067  0331  0086               	movwf	6
  5068  0332  0187               	clrf	7
  5069  0333  0860               	movf	AsicPreCalc@x^(0+128),w
  5070  0334  0501               	andwf	1,w
  5071  0335  00A3               	movwf	(??_AsicPreCalc+1)^(0+128)
  5072  0336  3141               	addfsr 1,1
  5073  0337  0861               	movf	(AsicPreCalc@x+1)^(0+128),w
  5074  0338  0501               	andwf	1,w
  5075  0339  00A4               	movwf	((??_AsicPreCalc+1)^(0+128)+1)
  5076  033A  3141               	addfsr 1,1
  5077  033B  0862               	movf	(AsicPreCalc@x+2)^(0+128),w
  5078  033C  0501               	andwf	1,w
  5079  033D  00A5               	movwf	((??_AsicPreCalc+1)^(0+128)+2)
  5080  033E  3141               	addfsr 1,1
  5081  033F  0863               	movf	(AsicPreCalc@x+3)^(0+128),w
  5082  0340  0501               	andwf	1,w
  5083  0341  00A6               	movwf	((??_AsicPreCalc+1)^(0+128)+3)
  5084  0342  0826               	movf	(??_AsicPreCalc+4)^(0+128),w
  5085  0343  00E3               	movwf	(AsicPreCalc@x+3)^(0+128)
  5086  0344  0825               	movf	(??_AsicPreCalc+3)^(0+128),w
  5087  0345  00E2               	movwf	(AsicPreCalc@x+2)^(0+128)
  5088  0346  0824               	movf	(??_AsicPreCalc+2)^(0+128),w
  5089  0347  00E1               	movwf	(AsicPreCalc@x+1)^(0+128)
  5090  0348  0823               	movf	(??_AsicPreCalc+1)^(0+128),w
  5091  0349  00E0               	movwf	AsicPreCalc@x^(0+128)
  5092                           
  5093                           ;asic.c: 349: z = m[((0-n)&7)] & m[((1-n)&7)];
  5094  034A  0364               	decf	AsicPreCalc@n^(0+128),w
  5095  034B  3AFF               	xorlw	255
  5096  034C  3E01               	addlw	1
  5097  034D  3907               	andlw	7
  5098  034E  00A2               	movwf	??_AsicPreCalc^(0+128)
  5099  034F  3001               	movlw	1
  5100  0350                     u7535:	
  5101  0350  35A2               	lslf	??_AsicPreCalc^(0+128),f
  5102  0351  3EFF               	addlw	-1
  5103  0352  1D03               	skipz
  5104  0353  2B50               	goto	u7535
  5105  0354  3522               	lslf	??_AsicPreCalc^(0+128),w
  5106  0355  3EB8               	addlw	AsicPreCalc@m& (0+255)
  5107  0356  0086               	movwf	6
  5108  0357  0187               	clrf	7
  5109  0358  3F40               	moviw [0]fsr1
  5110  0359  00A3               	movwf	(??_AsicPreCalc+1)^(0+128)
  5111  035A  3F41               	moviw [1]fsr1
  5112  035B  00A4               	movwf	((??_AsicPreCalc+1)^(0+128)+1)
  5113  035C  3F42               	moviw [2]fsr1
  5114  035D  00A5               	movwf	((??_AsicPreCalc+1)^(0+128)+2)
  5115  035E  3F43               	moviw [3]fsr1
  5116  035F  00A6               	movwf	((??_AsicPreCalc+1)^(0+128)+3)
  5117  0360  0364               	decf	AsicPreCalc@n^(0+128),w
  5118  0361  3AFF               	xorlw	255
  5119  0362  3907               	andlw	7
  5120  0363  00A7               	movwf	(??_AsicPreCalc+5)^(0+128)
  5121  0364  3001               	movlw	1
  5122  0365                     u7545:	
  5123  0365  35A7               	lslf	(??_AsicPreCalc+5)^(0+128),f
  5124  0366  3EFF               	addlw	-1
  5125  0367  1D03               	skipz
  5126  0368  2B65               	goto	u7545
  5127  0369  3527               	lslf	(??_AsicPreCalc+5)^(0+128),w
  5128  036A  3EB8               	addlw	AsicPreCalc@m& (0+255)
  5129  036B  0086               	movwf	6
  5130  036C  0187               	clrf	7
  5131  036D  3F40               	moviw [0]fsr1
  5132  036E  00A8               	movwf	(??_AsicPreCalc+6)^(0+128)
  5133  036F  3F41               	moviw [1]fsr1
  5134  0370  00A9               	movwf	((??_AsicPreCalc+6)^(0+128)+1)
  5135  0371  3F42               	moviw [2]fsr1
  5136  0372  00AA               	movwf	((??_AsicPreCalc+6)^(0+128)+2)
  5137  0373  3F43               	moviw [3]fsr1
  5138  0374  00AB               	movwf	((??_AsicPreCalc+6)^(0+128)+3)
  5139  0375  0823               	movf	(??_AsicPreCalc+1)^(0+128),w
  5140  0376  0528               	andwf	(??_AsicPreCalc+6)^(0+128),w
  5141  0377  00D8               	movwf	AsicPreCalc@z^(0+128)
  5142  0378  0824               	movf	(??_AsicPreCalc+2)^(0+128),w
  5143  0379  0529               	andwf	(??_AsicPreCalc+7)^(0+128),w
  5144  037A  00D9               	movwf	(AsicPreCalc@z+1)^(0+128)
  5145  037B  0825               	movf	(??_AsicPreCalc+3)^(0+128),w
  5146  037C  052A               	andwf	(??_AsicPreCalc+8)^(0+128),w
  5147  037D  00DA               	movwf	(AsicPreCalc@z+2)^(0+128)
  5148  037E  0826               	movf	(??_AsicPreCalc+4)^(0+128),w
  5149  037F  052B               	andwf	(??_AsicPreCalc+9)^(0+128),w
  5150  0380  00DB               	movwf	(AsicPreCalc@z+3)^(0+128)
  5151                           
  5152                           ;asic.c: 350: x = x | z;
  5153  0381  0860               	movf	AsicPreCalc@x^(0+128),w
  5154  0382  0458               	iorwf	AsicPreCalc@z^(0+128),w
  5155  0383  00A2               	movwf	??_AsicPreCalc^(0+128)
  5156  0384  0861               	movf	(AsicPreCalc@x+1)^(0+128),w
  5157  0385  0459               	iorwf	(AsicPreCalc@z+1)^(0+128),w
  5158  0386  00A3               	movwf	(??_AsicPreCalc^(0+128)+1)
  5159  0387  0862               	movf	(AsicPreCalc@x+2)^(0+128),w
  5160  0388  045A               	iorwf	(AsicPreCalc@z+2)^(0+128),w
  5161  0389  00A4               	movwf	(??_AsicPreCalc^(0+128)+2)
  5162  038A  0863               	movf	(AsicPreCalc@x+3)^(0+128),w
  5163  038B  045B               	iorwf	(AsicPreCalc@z+3)^(0+128),w
  5164  038C  00A5               	movwf	(??_AsicPreCalc^(0+128)+3)
  5165  038D  0825               	movf	(??_AsicPreCalc+3)^(0+128),w
  5166  038E  00E3               	movwf	(AsicPreCalc@x+3)^(0+128)
  5167  038F  0824               	movf	(??_AsicPreCalc+2)^(0+128),w
  5168  0390  00E2               	movwf	(AsicPreCalc@x+2)^(0+128)
  5169  0391  0823               	movf	(??_AsicPreCalc+1)^(0+128),w
  5170  0392  00E1               	movwf	(AsicPreCalc@x+1)^(0+128)
  5171  0393  0822               	movf	??_AsicPreCalc^(0+128),w
  5172  0394  00E0               	movwf	AsicPreCalc@x^(0+128)
  5173                           
  5174                           ;asic.c: 351: m[7-n] += y + x;
  5175  0395  085C               	movf	AsicPreCalc@y^(0+128),w
  5176  0396  0760               	addwf	AsicPreCalc@x^(0+128),w
  5177  0397  00A2               	movwf	??_AsicPreCalc^(0+128)
  5178  0398  085D               	movf	(AsicPreCalc@y+1)^(0+128),w
  5179  0399  3D61               	addwfc	(AsicPreCalc@x+1)^(0+128),w
  5180  039A  00A3               	movwf	(??_AsicPreCalc^(0+128)+1)
  5181  039B  085E               	movf	(AsicPreCalc@y+2)^(0+128),w
  5182  039C  3D62               	addwfc	(AsicPreCalc@x+2)^(0+128),w
  5183  039D  00A4               	movwf	(??_AsicPreCalc^(0+128)+2)
  5184  039E  085F               	movf	(AsicPreCalc@y+3)^(0+128),w
  5185  039F  3D63               	addwfc	(AsicPreCalc@x+3)^(0+128),w
  5186  03A0  00A5               	movwf	(??_AsicPreCalc^(0+128)+3)
  5187  03A1  0364               	decf	AsicPreCalc@n^(0+128),w
  5188  03A2  3AFF               	xorlw	255
  5189  03A3  00A6               	movwf	(??_AsicPreCalc+4)^(0+128)
  5190  03A4  3001               	movlw	1
  5191  03A5                     u7555:	
  5192  03A5  35A6               	lslf	(??_AsicPreCalc+4)^(0+128),f
  5193  03A6  3EFF               	addlw	-1
  5194  03A7  1D03               	skipz
  5195  03A8  2BA5               	goto	u7555
  5196  03A9  3526               	lslf	(??_AsicPreCalc+4)^(0+128),w
  5197  03AA  3E1C               	addlw	28
  5198  03AB  3EB8               	addlw	AsicPreCalc@m& (0+255)
  5199  03AC  0086               	movwf	6
  5200  03AD  0187               	clrf	7
  5201  03AE  0822               	movf	??_AsicPreCalc^(0+128),w
  5202  03AF  0781               	addwf	1,f
  5203  03B0  3141               	addfsr 1,1
  5204  03B1  0823               	movf	(??_AsicPreCalc+1)^(0+128),w
  5205  03B2  3D81               	addwfc	1,f
  5206  03B3  3141               	addfsr 1,1
  5207  03B4  0824               	movf	(??_AsicPreCalc+2)^(0+128),w
  5208  03B5  3D81               	addwfc	1,f
  5209  03B6  3141               	addfsr 1,1
  5210  03B7  0825               	movf	(??_AsicPreCalc+3)^(0+128),w
  5211  03B8  3D81               	addwfc	1,f
  5212                           
  5213                           ;asic.c: 353: PrecalcHashes[2-n] = m[7-n];
  5214  03B9  0364               	decf	AsicPreCalc@n^(0+128),w
  5215  03BA  3AFF               	xorlw	255
  5216  03BB  00A2               	movwf	??_AsicPreCalc^(0+128)
  5217  03BC  3001               	movlw	1
  5218  03BD                     u7565:	
  5219  03BD  35A2               	lslf	??_AsicPreCalc^(0+128),f
  5220  03BE  3EFF               	addlw	-1
  5221  03BF  1D03               	skipz
  5222  03C0  2BBD               	goto	u7565
  5223  03C1  3522               	lslf	??_AsicPreCalc^(0+128),w
  5224  03C2  3E1C               	addlw	28
  5225  03C3  3EB8               	addlw	AsicPreCalc@m& (0+255)
  5226  03C4  0086               	movwf	6
  5227  03C5  0187               	clrf	7
  5228  03C6  3F40               	moviw [0]fsr1
  5229  03C7  00A3               	movwf	(??_AsicPreCalc+1)^(0+128)
  5230  03C8  3F41               	moviw [1]fsr1
  5231  03C9  00A4               	movwf	((??_AsicPreCalc+1)^(0+128)+1)
  5232  03CA  3F42               	moviw [2]fsr1
  5233  03CB  00A5               	movwf	((??_AsicPreCalc+1)^(0+128)+2)
  5234  03CC  3F43               	moviw [3]fsr1
  5235  03CD  00A6               	movwf	((??_AsicPreCalc+1)^(0+128)+3)
  5236  03CE  0364               	decf	AsicPreCalc@n^(0+128),w
  5237  03CF  3AFF               	xorlw	255
  5238  03D0  00A7               	movwf	(??_AsicPreCalc+5)^(0+128)
  5239  03D1  3001               	movlw	1
  5240  03D2                     u7575:	
  5241  03D2  35A7               	lslf	(??_AsicPreCalc+5)^(0+128),f
  5242  03D3  3EFF               	addlw	-1
  5243  03D4  1D03               	skipz
  5244  03D5  2BD2               	goto	u7575
  5245  03D6  3527               	lslf	(??_AsicPreCalc+5)^(0+128),w
  5246  03D7  3E08               	addlw	8
  5247  03D8  3EB2               	addlw	_PrecalcHashes& (0+255)
  5248  03D9  0086               	movwf	6
  5249  03DA  3001               	movlw	1	; select bank3/4
  5250  03DB  0087               	movwf	7
  5251  03DC  0823               	movf	(??_AsicPreCalc+1)^(0+128),w
  5252  03DD  3FC0               	movwi [0]fsr1
  5253  03DE  0824               	movf	(??_AsicPreCalc+2)^(0+128),w
  5254  03DF  3FC1               	movwi [1]fsr1
  5255  03E0  0825               	movf	(??_AsicPreCalc+3)^(0+128),w
  5256  03E1  3FC2               	movwi [2]fsr1
  5257  03E2  0826               	movf	(??_AsicPreCalc+4)^(0+128),w
  5258  03E3  3FC3               	movwi [3]fsr1
  5259                           
  5260                           ;asic.c: 354: PrecalcHashes[5-n] = m[3-n];
  5261  03E4  0364               	decf	AsicPreCalc@n^(0+128),w
  5262  03E5  3AFF               	xorlw	255
  5263  03E6  00A2               	movwf	??_AsicPreCalc^(0+128)
  5264  03E7  3001               	movlw	1
  5265  03E8                     u7585:	
  5266  03E8  35A2               	lslf	??_AsicPreCalc^(0+128),f
  5267  03E9  3EFF               	addlw	-1
  5268  03EA  1D03               	skipz
  5269  03EB  2BE8               	goto	u7585
  5270  03EC  3522               	lslf	??_AsicPreCalc^(0+128),w
  5271  03ED  3E0C               	addlw	12
  5272  03EE  3EB8               	addlw	AsicPreCalc@m& (0+255)
  5273  03EF  0086               	movwf	6
  5274  03F0  0187               	clrf	7
  5275  03F1  3F40               	moviw [0]fsr1
  5276  03F2  00A3               	movwf	(??_AsicPreCalc+1)^(0+128)
  5277  03F3  3F41               	moviw [1]fsr1
  5278  03F4  00A4               	movwf	((??_AsicPreCalc+1)^(0+128)+1)
  5279  03F5  3F42               	moviw [2]fsr1
  5280  03F6  00A5               	movwf	((??_AsicPreCalc+1)^(0+128)+2)
  5281  03F7  3F43               	moviw [3]fsr1
  5282  03F8  00A6               	movwf	((??_AsicPreCalc+1)^(0+128)+3)
  5283  03F9  0364               	decf	AsicPreCalc@n^(0+128),w
  5284  03FA  3AFF               	xorlw	255
  5285  03FB  00A7               	movwf	(??_AsicPreCalc+5)^(0+128)
  5286  03FC  3001               	movlw	1
  5287  03FD                     u7595:	
  5288  03FD  35A7               	lslf	(??_AsicPreCalc+5)^(0+128),f
  5289  03FE  3EFF               	addlw	-1
  5290  03FF  1D03               	skipz
  5291  0400  2BFD               	goto	u7595
  5292  0401  3527               	lslf	(??_AsicPreCalc+5)^(0+128),w
  5293  0402  3E14               	addlw	20
  5294  0403  3EB2               	addlw	_PrecalcHashes& (0+255)
  5295  0404  0086               	movwf	6
  5296  0405  3001               	movlw	1	; select bank3/4
  5297  0406  0087               	movwf	7
  5298  0407  0823               	movf	(??_AsicPreCalc+1)^(0+128),w
  5299  0408  3FC0               	movwi [0]fsr1
  5300  0409  0824               	movf	(??_AsicPreCalc+2)^(0+128),w
  5301  040A  3FC1               	movwi [1]fsr1
  5302  040B  0825               	movf	(??_AsicPreCalc+3)^(0+128),w
  5303  040C  3FC2               	movwi [2]fsr1
  5304  040D  0826               	movf	(??_AsicPreCalc+4)^(0+128),w
  5305  040E  3FC3               	movwi [3]fsr1
  5306  040F  3001               	movlw	1
  5307  0410  00A2               	movwf	??_AsicPreCalc^(0+128)
  5308  0411  0822               	movf	??_AsicPreCalc^(0+128),w
  5309  0412  07E4               	addwf	AsicPreCalc@n^(0+128),f
  5310  0413  285F               	goto	L5
  5311  0414                     __end_of_AsicPreCalc:	
  5312                           
  5313                           	psect	text9
  5314  1E7D                     __ptext9:	
  5315 ;; *************** function _rotate *****************
  5316 ;; Defined at:
  5317 ;;		line 313 in file "asic.c"
  5318 ;; Parameters:    Size  Location     Type
  5319 ;;  x               4    8[BANK0 ] unsigned long 
  5320 ;;  y               1   12[BANK0 ] unsigned char 
  5321 ;; Auto vars:     Size  Location     Type
  5322 ;;		None
  5323 ;; Return value:  Size  Location     Type
  5324 ;;                  4    8[BANK0 ] unsigned long 
  5325 ;; Registers used:
  5326 ;;		wreg, status,2, status,0
  5327 ;; Tracked objects:
  5328 ;;		On entry : 0/0
  5329 ;;		On exit  : 0/0
  5330 ;;		Unchanged: 0/0
  5331 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5332 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5333 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5334 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5335 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5336 ;;Total ram usage:       13 bytes
  5337 ;; Hardware stack levels used:    1
  5338 ;; Hardware stack levels required when called:    4
  5339 ;; This function calls:
  5340 ;;		Nothing
  5341 ;; This function is called by:
  5342 ;;		_AsicPreCalc
  5343 ;; This function uses a non-reentrant model
  5344 ;;
  5345                           
  5346                           
  5347                           ;psect for function _rotate
  5348  1E7D                     _rotate:	
  5349                           
  5350                           ;asic.c: 314: return ((x<<y) | (x>>(32-y)));
  5351                           
  5352                           ;incstack = 0
  5353                           ; Regs used in _rotate: [wreg+status,2+status,0]
  5354  1E7D  0020               	movlb	0	; select bank0
  5355  1E7E  0858               	movf	rotate@x,w
  5356  1E7F  00DD               	movwf	??_rotate
  5357  1E80  0859               	movf	rotate@x+1,w
  5358  1E81  00DE               	movwf	??_rotate+1
  5359  1E82  085A               	movf	rotate@x+2,w
  5360  1E83  00DF               	movwf	??_rotate+2
  5361  1E84  085B               	movf	rotate@x+3,w
  5362  1E85  00E0               	movwf	??_rotate+3
  5363  1E86  035C               	decf	rotate@y,w
  5364  1E87  3AFF               	xorlw	255
  5365  1E88  3E20               	addlw	32
  5366  1E89  0A89               	incf	9,f
  5367  1E8A  2E90               	goto	u7270
  5368  1E8B                     u7275:	
  5369  1E8B  1003               	clrc
  5370  1E8C  0CE0               	rrf	??_rotate+3,f
  5371  1E8D  0CDF               	rrf	??_rotate+2,f
  5372  1E8E  0CDE               	rrf	??_rotate+1,f
  5373  1E8F  0CDD               	rrf	??_rotate,f
  5374  1E90                     u7270:	
  5375  1E90  3EFF               	addlw	-1
  5376  1E91  1D03               	skipz
  5377  1E92  2E8B               	goto	u7275
  5378  1E93  0858               	movf	rotate@x,w
  5379  1E94  00E1               	movwf	??_rotate+4
  5380  1E95  0859               	movf	rotate@x+1,w
  5381  1E96  00E2               	movwf	??_rotate+5
  5382  1E97  085A               	movf	rotate@x+2,w
  5383  1E98  00E3               	movwf	??_rotate+6
  5384  1E99  085B               	movf	rotate@x+3,w
  5385  1E9A  00E4               	movwf	??_rotate+7
  5386  1E9B  0A5C               	incf	rotate@y,w
  5387  1E9C  2EA1               	goto	u7280
  5388  1E9D                     u7285:	
  5389  1E9D  35E1               	lslf	??_rotate+4,f
  5390  1E9E  0DE2               	rlf	??_rotate+5,f
  5391  1E9F  0DE3               	rlf	??_rotate+6,f
  5392  1EA0  0DE4               	rlf	??_rotate+7,f
  5393  1EA1                     u7280:	
  5394  1EA1  0B89               	decfsz	9,f
  5395  1EA2  2E9D               	goto	u7285
  5396  1EA3  0861               	movf	??_rotate+4,w
  5397  1EA4  04DD               	iorwf	??_rotate,f
  5398  1EA5  0862               	movf	??_rotate+5,w
  5399  1EA6  04DE               	iorwf	??_rotate+1,f
  5400  1EA7  0863               	movf	??_rotate+6,w
  5401  1EA8  04DF               	iorwf	??_rotate+2,f
  5402  1EA9  0864               	movf	??_rotate+7,w
  5403  1EAA  04E0               	iorwf	??_rotate+3,f
  5404  1EAB  0860               	movf	??_rotate+3,w
  5405  1EAC  00DB               	movwf	?_rotate+3
  5406  1EAD  085F               	movf	??_rotate+2,w
  5407  1EAE  00DA               	movwf	?_rotate+2
  5408  1EAF  085E               	movf	??_rotate+1,w
  5409  1EB0  00D9               	movwf	?_rotate+1
  5410  1EB1  085D               	movf	??_rotate,w
  5411  1EB2  00D8               	movwf	?_rotate
  5412  1EB3  0008               	return
  5413  1EB4                     __end_of_rotate:	
  5414                           
  5415                           	psect	text10
  5416  0953                     __ptext10:	
  5417 ;; *************** function _SendAsicData *****************
  5418 ;; Defined at:
  5419 ;;		line 36 in file "asic.c"
  5420 ;; Parameters:    Size  Location     Type
  5421 ;;  work            2   14[BANK0 ] PTR struct _worktask
  5422 ;;		 -> WorkQue(180), 
  5423 ;; Auto vars:     Size  Location     Type
  5424 ;;		None
  5425 ;; Return value:  Size  Location     Type
  5426 ;;		None               void
  5427 ;; Registers used:
  5428 ;;		wreg, status,2, status,0, pclath, cstack
  5429 ;; Tracked objects:
  5430 ;;		On entry : 0/0
  5431 ;;		On exit  : 0/0
  5432 ;;		Unchanged: 0/0
  5433 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5434 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5435 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5436 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5437 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5438 ;;Total ram usage:        6 bytes
  5439 ;; Hardware stack levels used:    1
  5440 ;; Hardware stack levels required when called:    5
  5441 ;; This function calls:
  5442 ;;		_Send32
  5443 ;; This function is called by:
  5444 ;;		_AsicPushWork
  5445 ;; This function uses a non-reentrant model
  5446 ;;
  5447                           
  5448                           
  5449                           ;psect for function _SendAsicData
  5450  0953                     _SendAsicData:	
  5451                           
  5452                           ;asic.c: 37: GIE = 0;
  5453                           
  5454                           ;incstack = 0
  5455                           ; Regs used in _SendAsicData: [wreg+status,2+status,0+pclath+cstack]
  5456  0953  138B               	bcf	11,7	;volatile
  5457                           
  5458                           ;asic.c: 38: last_bit0 = 0x48; last_bit1 = 0x90;
  5459  0954  3048               	movlw	72
  5460  0955  0020               	movlb	0	; select bank0
  5461  0956  00E0               	movwf	??_SendAsicData
  5462  0957  0860               	movf	??_SendAsicData,w
  5463  0958  0022               	movlb	2	; select bank2
  5464  0959  00C8               	movwf	_last_bit0^(0+256)
  5465  095A  3090               	movlw	144
  5466  095B  0020               	movlb	0	; select bank0
  5467  095C  00E0               	movwf	??_SendAsicData
  5468  095D  0860               	movf	??_SendAsicData,w
  5469  095E  0022               	movlb	2	; select bank2
  5470  095F  00C9               	movwf	_last_bit1^(0+256)
  5471                           
  5472                           ;asic.c: 39: send32_data = (WORD)&ClockCfg; send32_count = 2;
  5473  0960  30DC               	movlw	low _ClockCfg
  5474  0961  00B0               	movwf	_send32_data^(0+256)
  5475  0962  3001               	movlw	high _ClockCfg
  5476  0963  00B1               	movwf	(_send32_data+1)^(0+256)
  5477  0964  3002               	movlw	2
  5478  0965  0020               	movlb	0	; select bank0
  5479  0966  00E0               	movwf	??_SendAsicData
  5480  0967  0860               	movf	??_SendAsicData,w
  5481  0968  0022               	movlb	2	; select bank2
  5482  0969  00CB               	movwf	_send32_count^(0+256)
  5483                           
  5484                           ;asic.c: 40: Send32();
  5485  096A  318B  23E0  3189   	fcall	_Send32
  5486                           
  5487                           ;asic.c: 41: send32_data = (WORD)&work->Merkle; send32_count = 3;
  5488  096D  0020               	movlb	0	; select bank0
  5489  096E  085E               	movf	SendAsicData@work,w
  5490  096F  3E21               	addlw	33
  5491  0970  0022               	movlb	2	; select bank2
  5492  0971  00B0               	movwf	_send32_data^(0+256)
  5493  0972  3000               	movlw	0
  5494  0973  0020               	movlb	0	; select bank0
  5495  0974  3D5F               	addwfc	SendAsicData@work+1,w
  5496  0975  0022               	movlb	2	; select bank2
  5497  0976  00B1               	movwf	(_send32_data+1)^(0+256)
  5498  0977  3003               	movlw	3
  5499  0978  0020               	movlb	0	; select bank0
  5500  0979  00E0               	movwf	??_SendAsicData
  5501  097A  0860               	movf	??_SendAsicData,w
  5502  097B  0022               	movlb	2	; select bank2
  5503  097C  00CB               	movwf	_send32_count^(0+256)
  5504                           
  5505                           ;asic.c: 42: Send32();
  5506  097D  318B  23E0  3189   	fcall	_Send32
  5507                           
  5508                           ;asic.c: 43: send32_data = (WORD)&PrecalcHashes[1]; send32_count = 5;
  5509  0980  30B6               	movlw	low (_PrecalcHashes+4)
  5510  0981  0022               	movlb	2	; select bank2
  5511  0982  00B0               	movwf	_send32_data^(0+256)
  5512  0983  3001               	movlw	high (_PrecalcHashes+4)
  5513  0984  00B1               	movwf	(_send32_data+1)^(0+256)
  5514  0985  3005               	movlw	5
  5515  0986  0020               	movlb	0	; select bank0
  5516  0987  00E0               	movwf	??_SendAsicData
  5517  0988  0860               	movf	??_SendAsicData,w
  5518  0989  0022               	movlb	2	; select bank2
  5519  098A  00CB               	movwf	_send32_count^(0+256)
  5520                           
  5521                           ;asic.c: 44: Send32();
  5522  098B  318B  23E0  3189   	fcall	_Send32
  5523                           
  5524                           ;asic.c: 45: send32_data = (WORD)&work->MidState; send32_count = 8;
  5525  098E  0020               	movlb	0	; select bank0
  5526  098F  085E               	movf	SendAsicData@work,w
  5527  0990  3E01               	addlw	1
  5528  0991  0022               	movlb	2	; select bank2
  5529  0992  00B0               	movwf	_send32_data^(0+256)
  5530  0993  3000               	movlw	0
  5531  0994  0020               	movlb	0	; select bank0
  5532  0995  3D5F               	addwfc	SendAsicData@work+1,w
  5533  0996  0022               	movlb	2	; select bank2
  5534  0997  00B1               	movwf	(_send32_data+1)^(0+256)
  5535  0998  3008               	movlw	8
  5536  0999  0020               	movlb	0	; select bank0
  5537  099A  00E0               	movwf	??_SendAsicData
  5538  099B  0860               	movf	??_SendAsicData,w
  5539  099C  0022               	movlb	2	; select bank2
  5540  099D  00CB               	movwf	_send32_count^(0+256)
  5541                           
  5542                           ;asic.c: 46: Send32();
  5543  099E  318B  23E0  3189   	fcall	_Send32
  5544                           
  5545                           ;asic.c: 47: send32_data = (WORD)&PrecalcHashes; send32_count = 1;
  5546  09A1  30B2               	movlw	low _PrecalcHashes
  5547  09A2  0022               	movlb	2	; select bank2
  5548  09A3  00B0               	movwf	_send32_data^(0+256)
  5549  09A4  3001               	movlw	high _PrecalcHashes
  5550  09A5  00B1               	movwf	(_send32_data+1)^(0+256)
  5551  09A6  01CB               	clrf	_send32_count^(0+256)
  5552  09A7  0ACB               	incf	_send32_count^(0+256),f
  5553                           
  5554                           ;asic.c: 48: Send32();
  5555  09A8  318B  23E0  3189   	fcall	_Send32
  5556                           
  5557                           ;asic.c: 49: last_bit0 = last_bit1 = 0x50;
  5558  09AB  3050               	movlw	80
  5559  09AC  0022               	movlb	2	; select bank2
  5560  09AD  00C9               	movwf	_last_bit1^(0+256)
  5561  09AE  0020               	movlb	0	; select bank0
  5562  09AF  00E0               	movwf	??_SendAsicData
  5563  09B0  0860               	movf	??_SendAsicData,w
  5564  09B1  0022               	movlb	2	; select bank2
  5565  09B2  00C8               	movwf	_last_bit0^(0+256)
  5566                           
  5567                           ;asic.c: 50: send32_data = (WORD)&NonceRanges; send32_count = BankSize;
  5568  09B3  3020               	movlw	low _NonceRanges
  5569  09B4  00B0               	movwf	_send32_data^(0+256)
  5570  09B5  3003               	movlw	high _NonceRanges
  5571  09B6  00B1               	movwf	(_send32_data+1)^(0+256)
  5572  09B7  086F               	movf	_BankSize^(0+256),w
  5573  09B8  0020               	movlb	0	; select bank0
  5574  09B9  00E0               	movwf	??_SendAsicData
  5575  09BA  0860               	movf	??_SendAsicData,w
  5576  09BB  0022               	movlb	2	; select bank2
  5577  09BC  00CB               	movwf	_send32_count^(0+256)
  5578                           
  5579                           ;asic.c: 51: Send32();
  5580  09BD  318B  23E0         	fcall	_Send32
  5581                           
  5582                           ;asic.c: 52: LATC = 0xD8;;
  5583  09BF  30D8               	movlw	216
  5584  09C0  0022               	movlb	2	; select bank2
  5585  09C1  008E               	movwf	14	;volatile
  5586                           
  5587                           ;asic.c: 53: GIE = 1;
  5588  09C2  178B               	bsf	11,7	;volatile
  5589                           
  5590                           ;asic.c: 54: ClockCfg[0] = ClockCfg[0] & ~0x00000002;
  5591  09C3  30FD               	movlw	253
  5592  09C4  0023               	movlb	3	; select bank3
  5593  09C5  055C               	andwf	_ClockCfg^(0+384),w
  5594  09C6  0020               	movlb	0	; select bank0
  5595  09C7  00E0               	movwf	??_SendAsicData
  5596  09C8  30FF               	movlw	255
  5597  09C9  0023               	movlb	3	; select bank3
  5598  09CA  055D               	andwf	(_ClockCfg+1)^(0+384),w
  5599  09CB  0020               	movlb	0	; select bank0
  5600  09CC  00E1               	movwf	??_SendAsicData+1
  5601  09CD  30FF               	movlw	255
  5602  09CE  0023               	movlb	3	; select bank3
  5603  09CF  055E               	andwf	(_ClockCfg+2)^(0+384),w
  5604  09D0  0020               	movlb	0	; select bank0
  5605  09D1  00E2               	movwf	??_SendAsicData+2
  5606  09D2  30FF               	movlw	255
  5607  09D3  0023               	movlb	3	; select bank3
  5608  09D4  055F               	andwf	(_ClockCfg+3)^(0+384),w
  5609  09D5  0020               	movlb	0	; select bank0
  5610  09D6  00E3               	movwf	??_SendAsicData+3
  5611  09D7  0863               	movf	??_SendAsicData+3,w
  5612  09D8  0023               	movlb	3	; select bank3
  5613  09D9  00DF               	movwf	(_ClockCfg+3)^(0+384)
  5614  09DA  0020               	movlb	0	; select bank0
  5615  09DB  0862               	movf	??_SendAsicData+2,w
  5616  09DC  0023               	movlb	3	; select bank3
  5617  09DD  00DE               	movwf	(_ClockCfg+2)^(0+384)
  5618  09DE  0020               	movlb	0	; select bank0
  5619  09DF  0861               	movf	??_SendAsicData+1,w
  5620  09E0  0023               	movlb	3	; select bank3
  5621  09E1  00DD               	movwf	(_ClockCfg+1)^(0+384)
  5622  09E2  0020               	movlb	0	; select bank0
  5623  09E3  0860               	movf	??_SendAsicData,w
  5624  09E4  0023               	movlb	3	; select bank3
  5625  09E5  00DC               	movwf	_ClockCfg^(0+384)
  5626  09E6  0008               	return
  5627  09E7                     __end_of_SendAsicData:	
  5628                           
  5629                           	psect	text11
  5630  0BE0                     __ptext11:	
  5631 ;; *************** function _Send32 *****************
  5632 ;; Defined at:
  5633 ;;		line 58 in file "asic.c"
  5634 ;; Parameters:    Size  Location     Type
  5635 ;;		None
  5636 ;; Auto vars:     Size  Location     Type
  5637 ;;		None
  5638 ;; Return value:  Size  Location     Type
  5639 ;;		None               void
  5640 ;; Registers used:
  5641 ;;		None
  5642 ;; Tracked objects:
  5643 ;;		On entry : 0/0
  5644 ;;		On exit  : 0/0
  5645 ;;		Unchanged: 0/0
  5646 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5647 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5648 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5649 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5650 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5651 ;;Total ram usage:        0 bytes
  5652 ;; Hardware stack levels used:    1
  5653 ;; Hardware stack levels required when called:    4
  5654 ;; This function calls:
  5655 ;;		Nothing
  5656 ;; This function is called by:
  5657 ;;		_SendAsicData
  5658 ;; This function uses a non-reentrant model
  5659 ;;
  5660                           
  5661                           
  5662                           ;psect for function _Send32
  5663  0BE0                     _Send32:	
  5664                           
  5665                           ;incstack = 0
  5666                           ; Regs used in _Send32: []
  5667  0BE0  0022               	banksel	270	;# 
  5668  0BE1  0830               	movf	_send32_data& (0+127),w	;# 
  5669  0BE2  0086               	movwf	6	;# 
  5670  0BE3  0831               	movf	(_send32_data+1)& (0+127),w	;# 
  5671  0BE4  0087               	movwf	7	;# 
  5672  0BE5                     next_word:	
  5673                           
  5674                           ;# 
  5675  0BE5  3048               	movlw	72	;# 
  5676  0BE6  018E               	clrf	14	;# 
  5677  0BE7  1801               	btfsc	1,0	;# 
  5678  0BE8  3090               	movlw	144	;# 
  5679  0BE9  008E               	movwf	14	;# 
  5680  0BEA  3048               	movlw	72	;# 
  5681  0BEB  018E               	clrf	14	;# 
  5682  0BEC  1881               	btfsc	1,1	;# 
  5683  0BED  3090               	movlw	144	;# 
  5684  0BEE  008E               	movwf	14	;# 
  5685  0BEF  3048               	movlw	72	;# 
  5686  0BF0  018E               	clrf	14	;# 
  5687  0BF1  1901               	btfsc	1,2	;# 
  5688  0BF2  3090               	movlw	144	;# 
  5689  0BF3  008E               	movwf	14	;# 
  5690  0BF4  3048               	movlw	72	;# 
  5691  0BF5  018E               	clrf	14	;# 
  5692  0BF6  1981               	btfsc	1,3	;# 
  5693  0BF7  3090               	movlw	144	;# 
  5694  0BF8  008E               	movwf	14	;# 
  5695  0BF9  3048               	movlw	72	;# 
  5696  0BFA  018E               	clrf	14	;# 
  5697  0BFB  1A01               	btfsc	1,4	;# 
  5698  0BFC  3090               	movlw	144	;# 
  5699  0BFD  008E               	movwf	14	;# 
  5700  0BFE  3048               	movlw	72	;# 
  5701  0BFF  018E               	clrf	14	;# 
  5702  0C00  1A81               	btfsc	1,5	;# 
  5703  0C01  3090               	movlw	144	;# 
  5704  0C02  008E               	movwf	14	;# 
  5705  0C03  3048               	movlw	72	;# 
  5706  0C04  018E               	clrf	14	;# 
  5707  0C05  1B01               	btfsc	1,6	;# 
  5708  0C06  3090               	movlw	144	;# 
  5709  0C07  008E               	movwf	14	;# 
  5710  0C08  3048               	movlw	72	;# 
  5711  0C09  018E               	clrf	14	;# 
  5712  0C0A  1B81               	btfsc	1,7	;# 
  5713  0C0B  3090               	movlw	144	;# 
  5714  0C0C  008E               	movwf	14	;# 
  5715  0C0D  3141               	addfsr 1,1	;# 
  5716  0C0E  3048               	movlw	72	;# 
  5717  0C0F  018E               	clrf	14	;# 
  5718  0C10  1801               	btfsc	1,0	;# 
  5719  0C11  3090               	movlw	144	;# 
  5720  0C12  008E               	movwf	14	;# 
  5721  0C13  3048               	movlw	72	;# 
  5722  0C14  018E               	clrf	14	;# 
  5723  0C15  1881               	btfsc	1,1	;# 
  5724  0C16  3090               	movlw	144	;# 
  5725  0C17  008E               	movwf	14	;# 
  5726  0C18  3048               	movlw	72	;# 
  5727  0C19  018E               	clrf	14	;# 
  5728  0C1A  1901               	btfsc	1,2	;# 
  5729  0C1B  3090               	movlw	144	;# 
  5730  0C1C  008E               	movwf	14	;# 
  5731  0C1D  3048               	movlw	72	;# 
  5732  0C1E  018E               	clrf	14	;# 
  5733  0C1F  1981               	btfsc	1,3	;# 
  5734  0C20  3090               	movlw	144	;# 
  5735  0C21  008E               	movwf	14	;# 
  5736  0C22  3048               	movlw	72	;# 
  5737  0C23  018E               	clrf	14	;# 
  5738  0C24  1A01               	btfsc	1,4	;# 
  5739  0C25  3090               	movlw	144	;# 
  5740  0C26  008E               	movwf	14	;# 
  5741  0C27  3048               	movlw	72	;# 
  5742  0C28  018E               	clrf	14	;# 
  5743  0C29  1A81               	btfsc	1,5	;# 
  5744  0C2A  3090               	movlw	144	;# 
  5745  0C2B  008E               	movwf	14	;# 
  5746  0C2C  3048               	movlw	72	;# 
  5747  0C2D  018E               	clrf	14	;# 
  5748  0C2E  1B01               	btfsc	1,6	;# 
  5749  0C2F  3090               	movlw	144	;# 
  5750  0C30  008E               	movwf	14	;# 
  5751  0C31  3048               	movlw	72	;# 
  5752  0C32  018E               	clrf	14	;# 
  5753  0C33  1B81               	btfsc	1,7	;# 
  5754  0C34  3090               	movlw	144	;# 
  5755  0C35  008E               	movwf	14	;# 
  5756  0C36  3141               	addfsr 1,1	;# 
  5757  0C37  3048               	movlw	72	;# 
  5758  0C38  018E               	clrf	14	;# 
  5759  0C39  1801               	btfsc	1,0	;# 
  5760  0C3A  3090               	movlw	144	;# 
  5761  0C3B  008E               	movwf	14	;# 
  5762  0C3C  3048               	movlw	72	;# 
  5763  0C3D  018E               	clrf	14	;# 
  5764  0C3E  1881               	btfsc	1,1	;# 
  5765  0C3F  3090               	movlw	144	;# 
  5766  0C40  008E               	movwf	14	;# 
  5767  0C41  3048               	movlw	72	;# 
  5768  0C42  018E               	clrf	14	;# 
  5769  0C43  1901               	btfsc	1,2	;# 
  5770  0C44  3090               	movlw	144	;# 
  5771  0C45  008E               	movwf	14	;# 
  5772  0C46  3048               	movlw	72	;# 
  5773  0C47  018E               	clrf	14	;# 
  5774  0C48  1981               	btfsc	1,3	;# 
  5775  0C49  3090               	movlw	144	;# 
  5776  0C4A  008E               	movwf	14	;# 
  5777  0C4B  3048               	movlw	72	;# 
  5778  0C4C  018E               	clrf	14	;# 
  5779  0C4D  1A01               	btfsc	1,4	;# 
  5780  0C4E  3090               	movlw	144	;# 
  5781  0C4F  008E               	movwf	14	;# 
  5782  0C50  3048               	movlw	72	;# 
  5783  0C51  018E               	clrf	14	;# 
  5784  0C52  1A81               	btfsc	1,5	;# 
  5785  0C53  3090               	movlw	144	;# 
  5786  0C54  008E               	movwf	14	;# 
  5787  0C55  3048               	movlw	72	;# 
  5788  0C56  018E               	clrf	14	;# 
  5789  0C57  1B01               	btfsc	1,6	;# 
  5790  0C58  3090               	movlw	144	;# 
  5791  0C59  008E               	movwf	14	;# 
  5792  0C5A  3048               	movlw	72	;# 
  5793  0C5B  018E               	clrf	14	;# 
  5794  0C5C  1B81               	btfsc	1,7	;# 
  5795  0C5D  3090               	movlw	144	;# 
  5796  0C5E  008E               	movwf	14	;# 
  5797  0C5F  3141               	addfsr 1,1	;# 
  5798  0C60  3048               	movlw	72	;# 
  5799  0C61  018E               	clrf	14	;# 
  5800  0C62  1801               	btfsc	1,0	;# 
  5801  0C63  3090               	movlw	144	;# 
  5802  0C64  008E               	movwf	14	;# 
  5803  0C65  3048               	movlw	72	;# 
  5804  0C66  018E               	clrf	14	;# 
  5805  0C67  1881               	btfsc	1,1	;# 
  5806  0C68  3090               	movlw	144	;# 
  5807  0C69  008E               	movwf	14	;# 
  5808  0C6A  3048               	movlw	72	;# 
  5809  0C6B  018E               	clrf	14	;# 
  5810  0C6C  1901               	btfsc	1,2	;# 
  5811  0C6D  3090               	movlw	144	;# 
  5812  0C6E  008E               	movwf	14	;# 
  5813  0C6F  3048               	movlw	72	;# 
  5814  0C70  018E               	clrf	14	;# 
  5815  0C71  1981               	btfsc	1,3	;# 
  5816  0C72  3090               	movlw	144	;# 
  5817  0C73  008E               	movwf	14	;# 
  5818  0C74  3048               	movlw	72	;# 
  5819  0C75  018E               	clrf	14	;# 
  5820  0C76  1A01               	btfsc	1,4	;# 
  5821  0C77  3090               	movlw	144	;# 
  5822  0C78  008E               	movwf	14	;# 
  5823  0C79  3048               	movlw	72	;# 
  5824  0C7A  018E               	clrf	14	;# 
  5825  0C7B  1A81               	btfsc	1,5	;# 
  5826  0C7C  3090               	movlw	144	;# 
  5827  0C7D  008E               	movwf	14	;# 
  5828  0C7E  3048               	movlw	72	;# 
  5829  0C7F  018E               	clrf	14	;# 
  5830  0C80  1B01               	btfsc	1,6	;# 
  5831  0C81  3090               	movlw	144	;# 
  5832  0C82  008E               	movwf	14	;# 
  5833  0C83  0848               	movf	_last_bit0& (0+127),w	;# 
  5834  0C84  018E               	clrf	14	;# 
  5835  0C85  1B81               	btfsc	1,7	;# 
  5836  0C86  0849               	movf	_last_bit1& (0+127),w	;# 
  5837  0C87  008E               	movwf	14	;# 
  5838  0C88  3141               	addfsr 1,1	;# 
  5839  0C89  0BCB               	decfsz	_send32_count& (0+127),f	;# 
  5840  0C8A  2BE5               	goto	next_word	;# 
  5841  0C8B  0008               	return
  5842  0C8C                     __end_of_Send32:	
  5843                           
  5844                           	psect	text12
  5845  1CB5                     __ptext12:	
  5846 ;; *************** function _InitializeSystem *****************
  5847 ;; Defined at:
  5848 ;;		line 146 in file "main.c"
  5849 ;; Parameters:    Size  Location     Type
  5850 ;;		None
  5851 ;; Auto vars:     Size  Location     Type
  5852 ;;		None
  5853 ;; Return value:  Size  Location     Type
  5854 ;;		None               void
  5855 ;; Registers used:
  5856 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5857 ;; Tracked objects:
  5858 ;;		On entry : 0/0
  5859 ;;		On exit  : 0/0
  5860 ;;		Unchanged: 0/0
  5861 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5862 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5863 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5864 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5865 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5866 ;;Total ram usage:        0 bytes
  5867 ;; Hardware stack levels used:    1
  5868 ;; Hardware stack levels required when called:    7
  5869 ;; This function calls:
  5870 ;;		_USBDeviceInit
  5871 ;;		_UserInit
  5872 ;; This function is called by:
  5873 ;;		_main
  5874 ;; This function uses a non-reentrant model
  5875 ;;
  5876                           
  5877                           
  5878                           ;psect for function _InitializeSystem
  5879  1CB5                     _InitializeSystem:	
  5880                           
  5881                           ;main.c: 148: ANSELA = 0x00;
  5882                           
  5883                           ;incstack = 0
  5884                           ; Regs used in _InitializeSystem: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5885  1CB5  0023               	movlb	3	; select bank3
  5886  1CB6  018C               	clrf	12	;volatile
  5887                           
  5888                           ;main.c: 149: ANSELB = 0x00;
  5889  1CB7  018D               	clrf	13	;volatile
  5890                           
  5891                           ;main.c: 150: ANSELC = 0x04;
  5892  1CB8  3004               	movlw	4
  5893  1CB9  008E               	movwf	14	;volatile
  5894                           
  5895                           ;main.c: 153: OSCTUNE = 0;
  5896  1CBA  0021               	movlb	1	; select bank1
  5897  1CBB  0198               	clrf	24	;volatile
  5898                           
  5899                           ;main.c: 154: OSCCON = 0xFC;
  5900  1CBC  30FC               	movlw	252
  5901  1CBD  0099               	movwf	25	;volatile
  5902                           
  5903                           ;main.c: 155: ACTCON = 0x90;
  5904  1CBE  3090               	movlw	144
  5905  1CBF  0027               	movlb	7	; select bank7
  5906  1CC0  009B               	movwf	27	;volatile
  5907                           
  5908                           ;main.c: 158: USBGenericOutHandle = 0;
  5909  1CC1  0022               	movlb	2	; select bank2
  5910  1CC2  01C1               	clrf	_USBGenericOutHandle^(0+256)
  5911                           
  5912                           ;main.c: 159: USBGenericInHandle = 0;
  5913  1CC3  01C0               	clrf	_USBGenericInHandle^(0+256)
  5914                           
  5915                           ;main.c: 160: WQI = WQX = 0;
  5916  1CC4  01D7               	clrf	_WQX^(0+256)
  5917  1CC5  01D6               	clrf	_WQI^(0+256)
  5918                           
  5919                           ;main.c: 162: UserInit();
  5920  1CC6  319C  2475  319C   	fcall	_UserInit
  5921                           
  5922                           ;main.c: 164: USBDeviceInit();
  5923  1CC9  3189  21E7         	fcall	_USBDeviceInit
  5924  1CCB  0008               	return
  5925  1CCC                     __end_of_InitializeSystem:	
  5926                           
  5927                           	psect	text13
  5928  1C75                     __ptext13:	
  5929 ;; *************** function _UserInit *****************
  5930 ;; Defined at:
  5931 ;;		line 170 in file "main.c"
  5932 ;; Parameters:    Size  Location     Type
  5933 ;;		None
  5934 ;; Auto vars:     Size  Location     Type
  5935 ;;		None
  5936 ;; Return value:  Size  Location     Type
  5937 ;;		None               void
  5938 ;; Registers used:
  5939 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5940 ;; Tracked objects:
  5941 ;;		On entry : 0/0
  5942 ;;		On exit  : 0/0
  5943 ;;		Unchanged: 0/0
  5944 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5945 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5946 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5947 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5948 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5949 ;;Total ram usage:        0 bytes
  5950 ;; Hardware stack levels used:    1
  5951 ;; Hardware stack levels required when called:    6
  5952 ;; This function calls:
  5953 ;;		_DetectAsics
  5954 ;;		_InitFAN
  5955 ;;		_InitTempSensor
  5956 ;;		_InitWorkTick
  5957 ;;		_InitResultRx
  5958 ;; This function is called by:
  5959 ;;		_InitializeSystem
  5960 ;; This function uses a non-reentrant model
  5961 ;;
  5962                           
  5963                           
  5964                           ;psect for function _UserInit
  5965  1C75                     _UserInit:	
  5966                           
  5967                           ;main.c: 171: TRISAbits.TRISA5 = 0; LATAbits.LATA5 = 1;;
  5968                           
  5969                           ;incstack = 0
  5970                           ; Regs used in _UserInit: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5971  1C75  0021               	movlb	1	; select bank1
  5972  1C76  128C               	bcf	12,5	;volatile
  5973  1C77  0022               	movlb	2	; select bank2
  5974  1C78  168C               	bsf	12,5	;volatile
  5975                           
  5976                           ;main.c: 172: InitTempSensor();
  5977  1C79  319C  249E  319C   	fcall	_InitTempSensor
  5978                           
  5979                           ;main.c: 173: InitFAN();
  5980  1C7C  319D  2550  319C   	fcall	_InitFAN
  5981                           
  5982                           ;main.c: 174: InitWorkTick();
  5983  1C7F  319C  2488  319C   	fcall	_InitWorkTick
  5984                           
  5985                           ;main.c: 176: InitResultRx();
  5986  1C82  319C  2462  319C   	fcall	_InitResultRx
  5987                           
  5988                           ;main.c: 177: DetectAsics();
  5989  1C85  318C  248C         	fcall	_DetectAsics
  5990  1C87  0008               	return
  5991  1C88                     __end_of_UserInit:	
  5992                           
  5993                           	psect	text14
  5994  1C62                     __ptext14:	
  5995 ;; *************** function _InitResultRx *****************
  5996 ;; Defined at:
  5997 ;;		line 312 in file "klondike.c"
  5998 ;; Parameters:    Size  Location     Type
  5999 ;;		None
  6000 ;; Auto vars:     Size  Location     Type
  6001 ;;		None
  6002 ;; Return value:  Size  Location     Type
  6003 ;;		None               void
  6004 ;; Registers used:
  6005 ;;		wreg, status,2
  6006 ;; Tracked objects:
  6007 ;;		On entry : 0/0
  6008 ;;		On exit  : 0/0
  6009 ;;		Unchanged: 0/0
  6010 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6011 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6012 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6013 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6014 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6015 ;;Total ram usage:        0 bytes
  6016 ;; Hardware stack levels used:    1
  6017 ;; Hardware stack levels required when called:    4
  6018 ;; This function calls:
  6019 ;;		Nothing
  6020 ;; This function is called by:
  6021 ;;		_UserInit
  6022 ;; This function uses a non-reentrant model
  6023 ;;
  6024                           
  6025                           
  6026                           ;psect for function _InitResultRx
  6027  1C62                     _InitResultRx:	
  6028                           
  6029                           ;klondike.c: 313: ResultQC = 0;
  6030                           
  6031                           ;incstack = 0
  6032                           ; Regs used in _InitResultRx: [wreg+status,2]
  6033  1C62  0022               	movlb	2	; select bank2
  6034  1C63  01B9               	clrf	_ResultQC^(0+256)
  6035                           
  6036                           ;klondike.c: 314: TXSTAbits.SYNC = 1;
  6037  1C64  0023               	movlb	3	; select bank3
  6038  1C65  161E               	bsf	30,4	;volatile
  6039                           
  6040                           ;klondike.c: 315: RCSTAbits.SPEN = 1;
  6041  1C66  179D               	bsf	29,7	;volatile
  6042                           
  6043                           ;klondike.c: 316: TXSTAbits.CSRC = 0;
  6044  1C67  139E               	bcf	30,7	;volatile
  6045                           
  6046                           ;klondike.c: 317: BAUDCONbits.SCKP = 0;
  6047  1C68  121F               	bcf	31,4	;volatile
  6048                           
  6049                           ;klondike.c: 318: BAUDCONbits.BRG16 = 1;
  6050  1C69  159F               	bsf	31,3	;volatile
  6051                           
  6052                           ;klondike.c: 319: ANSELBbits.ANSB5 = 0;
  6053  1C6A  128D               	bcf	13,5	;volatile
  6054                           
  6055                           ;klondike.c: 320: IOCBPbits.IOCBP7 = 1;
  6056  1C6B  0027               	movlb	7	; select bank7
  6057  1C6C  1794               	bsf	20,7	;volatile
  6058                           
  6059                           ;klondike.c: 321: INTCONbits.IOCIE = 1;
  6060  1C6D  158B               	bsf	11,3	;volatile
  6061                           
  6062                           ;klondike.c: 322: IOCBF = 0;
  6063  1C6E  0196               	clrf	22	;volatile
  6064                           
  6065                           ;klondike.c: 323: INTCONbits.GIE = 1;
  6066  1C6F  178B               	bsf	11,7	;volatile
  6067                           
  6068                           ;klondike.c: 324: RCSTAbits.CREN = 1;
  6069  1C70  0023               	movlb	3	; select bank3
  6070  1C71  161D               	bsf	29,4	;volatile
  6071                           
  6072                           ;klondike.c: 325: RCREG = 0xFF;
  6073  1C72  30FF               	movlw	255
  6074  1C73  0099               	movwf	25	;volatile
  6075  1C74  0008               	return
  6076  1C75                     __end_of_InitResultRx:	
  6077                           
  6078                           	psect	text15
  6079  1C88                     __ptext15:	
  6080 ;; *************** function _InitWorkTick *****************
  6081 ;; Defined at:
  6082 ;;		line 296 in file "klondike.c"
  6083 ;; Parameters:    Size  Location     Type
  6084 ;;		None
  6085 ;; Auto vars:     Size  Location     Type
  6086 ;;		None
  6087 ;; Return value:  Size  Location     Type
  6088 ;;		None               void
  6089 ;; Registers used:
  6090 ;;		wreg, status,2, status,0
  6091 ;; Tracked objects:
  6092 ;;		On entry : 0/0
  6093 ;;		On exit  : 0/0
  6094 ;;		Unchanged: 0/0
  6095 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6096 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6097 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6098 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6099 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6100 ;;Total ram usage:        0 bytes
  6101 ;; Hardware stack levels used:    1
  6102 ;; Hardware stack levels required when called:    4
  6103 ;; This function calls:
  6104 ;;		Nothing
  6105 ;; This function is called by:
  6106 ;;		_UserInit
  6107 ;; This function uses a non-reentrant model
  6108 ;;
  6109                           
  6110                           
  6111                           ;psect for function _InitWorkTick
  6112  1C88                     _InitWorkTick:	
  6113                           
  6114                           ;klondike.c: 297: TMR0CS = 0;
  6115                           
  6116                           ;incstack = 0
  6117                           ; Regs used in _InitWorkTick: [wreg+status,2+status,0]
  6118  1C88  0021               	movlb	1	; select bank1
  6119  1C89  1295               	bcf	21,5	;volatile
  6120                           
  6121                           ;klondike.c: 298: OPTION_REGbits.PSA = 0;
  6122  1C8A  1195               	bcf	21,3	;volatile
  6123                           
  6124                           ;klondike.c: 299: OPTION_REGbits.PS = 7;
  6125  1C8B  3007               	movlw	7
  6126  1C8C  0495               	iorwf	21,f	;volatile
  6127                           
  6128                           ;klondike.c: 300: TMR0 = HashTime;
  6129  1C8D  0022               	movlb	2	; select bank2
  6130  1C8E  0858               	movf	_HashTime^(0+256),w
  6131  1C8F  0020               	movlb	0	; select bank0
  6132  1C90  0095               	movwf	21	;volatile
  6133                           
  6134                           ;klondike.c: 302: TRISCbits.TRISC7 = 0;
  6135  1C91  0021               	movlb	1	; select bank1
  6136  1C92  138E               	bcf	14,7	;volatile
  6137                           
  6138                           ;klondike.c: 303: TRISCbits.TRISC6 = 0;
  6139  1C93  130E               	bcf	14,6	;volatile
  6140                           
  6141                           ;klondike.c: 304: TRISCbits.TRISC4 = 0;
  6142  1C94  120E               	bcf	14,4	;volatile
  6143                           
  6144                           ;klondike.c: 305: TRISCbits.TRISC3 = 0;
  6145  1C95  118E               	bcf	14,3	;volatile
  6146                           
  6147                           ;klondike.c: 306: LATC = 0xD8;;
  6148  1C96  30D8               	movlw	216
  6149  1C97  0022               	movlb	2	; select bank2
  6150  1C98  008E               	movwf	14	;volatile
  6151                           
  6152                           ;klondike.c: 307: TRISAbits.TRISA4 = 0;
  6153  1C99  0021               	movlb	1	; select bank1
  6154  1C9A  120C               	bcf	12,4	;volatile
  6155                           
  6156                           ;klondike.c: 308: LATAbits.LATA4 = 0;
  6157  1C9B  0022               	movlb	2	; select bank2
  6158  1C9C  120C               	bcf	12,4	;volatile
  6159  1C9D  0008               	return
  6160  1C9E                     __end_of_InitWorkTick:	
  6161                           
  6162                           	psect	text16
  6163  1C9E                     __ptext16:	
  6164 ;; *************** function _InitTempSensor *****************
  6165 ;; Defined at:
  6166 ;;		line 282 in file "klondike.c"
  6167 ;; Parameters:    Size  Location     Type
  6168 ;;		None
  6169 ;; Auto vars:     Size  Location     Type
  6170 ;;		None
  6171 ;; Return value:  Size  Location     Type
  6172 ;;		None               void
  6173 ;; Registers used:
  6174 ;;		wreg, status,2, status,0
  6175 ;; Tracked objects:
  6176 ;;		On entry : 0/0
  6177 ;;		On exit  : 0/0
  6178 ;;		Unchanged: 0/0
  6179 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6180 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6181 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6182 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6183 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6184 ;;Total ram usage:        1 bytes
  6185 ;; Hardware stack levels used:    1
  6186 ;; Hardware stack levels required when called:    4
  6187 ;; This function calls:
  6188 ;;		Nothing
  6189 ;; This function is called by:
  6190 ;;		_UserInit
  6191 ;; This function uses a non-reentrant model
  6192 ;;
  6193                           
  6194                           
  6195                           ;psect for function _InitTempSensor
  6196  1C9E                     _InitTempSensor:	
  6197                           
  6198                           ;klondike.c: 283: TRISCbits.TRISC2=1;
  6199                           
  6200                           ;incstack = 0
  6201                           ; Regs used in _InitTempSensor: [wreg+status,2+status,0]
  6202  1C9E  0021               	movlb	1	; select bank1
  6203  1C9F  150E               	bsf	14,2	;volatile
  6204                           
  6205                           ;klondike.c: 286: ADCON0bits.CHS = 6;
  6206  1CA0  081D               	movf	29,w	;volatile
  6207  1CA1  3983               	andlw	-125
  6208  1CA2  3818               	iorlw	24
  6209  1CA3  009D               	movwf	29	;volatile
  6210                           
  6211                           ;klondike.c: 287: ADCON0bits.ADON = 1;
  6212  1CA4  141D               	bsf	29,0	;volatile
  6213                           
  6214                           ;klondike.c: 288: ADCON1bits.ADFM = 0;
  6215  1CA5  139E               	bcf	30,7	;volatile
  6216                           
  6217                           ;klondike.c: 289: ADCON1bits.ADCS = 6;
  6218  1CA6  081E               	movf	30,w	;volatile
  6219  1CA7  398F               	andlw	-113
  6220  1CA8  3860               	iorlw	96
  6221  1CA9  009E               	movwf	30	;volatile
  6222                           
  6223                           ;klondike.c: 290: ADCON1bits.ADPREF = 0;
  6224  1CAA  30FC               	movlw	-4
  6225  1CAB  059E               	andwf	30,f	;volatile
  6226                           
  6227                           ;klondike.c: 291: ADCON2bits.TRIGSEL = 0;
  6228  1CAC  308F               	movlw	-113
  6229  1CAD  059F               	andwf	31,f	;volatile
  6230                           
  6231                           ;klondike.c: 292: TempTarget = 143;
  6232  1CAE  308F               	movlw	143
  6233  1CAF  0020               	movlb	0	; select bank0
  6234  1CB0  00D8               	movwf	??_InitTempSensor
  6235  1CB1  0858               	movf	??_InitTempSensor,w
  6236  1CB2  0023               	movlb	3	; select bank3
  6237  1CB3  00EA               	movwf	_TempTarget^(0+384)
  6238  1CB4  0008               	return
  6239  1CB5                     __end_of_InitTempSensor:	
  6240                           
  6241                           	psect	text17
  6242  1D50                     __ptext17:	
  6243 ;; *************** function _InitFAN *****************
  6244 ;; Defined at:
  6245 ;;		line 262 in file "klondike.c"
  6246 ;; Parameters:    Size  Location     Type
  6247 ;;		None
  6248 ;; Auto vars:     Size  Location     Type
  6249 ;;		None
  6250 ;; Return value:  Size  Location     Type
  6251 ;;		None               void
  6252 ;; Registers used:
  6253 ;;		wreg, status,2, status,0
  6254 ;; Tracked objects:
  6255 ;;		On entry : 0/0
  6256 ;;		On exit  : 0/0
  6257 ;;		Unchanged: 0/0
  6258 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6259 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6260 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6261 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6262 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6263 ;;Total ram usage:        0 bytes
  6264 ;; Hardware stack levels used:    1
  6265 ;; Hardware stack levels required when called:    4
  6266 ;; This function calls:
  6267 ;;		Nothing
  6268 ;; This function is called by:
  6269 ;;		_UserInit
  6270 ;; This function uses a non-reentrant model
  6271 ;;
  6272                           
  6273                           
  6274                           ;psect for function _InitFAN
  6275  1D50                     _InitFAN:	
  6276                           
  6277                           ;klondike.c: 263: TRISCbits.TRISC5 = 1;
  6278                           
  6279                           ;incstack = 0
  6280                           ; Regs used in _InitFAN: [wreg+status,2+status,0]
  6281  1D50  0021               	movlb	1	; select bank1
  6282  1D51  168E               	bsf	14,5	;volatile
  6283                           
  6284                           ;klondike.c: 264: PWM1CON = 0;
  6285  1D52  002C               	movlb	12	; select bank12
  6286  1D53  0193               	clrf	19	;volatile
  6287                           
  6288                           ;klondike.c: 265: PR2 = 0xFF;
  6289  1D54  30FF               	movlw	255
  6290  1D55  0020               	movlb	0	; select bank0
  6291  1D56  009B               	movwf	27	;volatile
  6292                           
  6293                           ;klondike.c: 266: PWM1CON = 0xC0;
  6294  1D57  30C0               	movlw	192
  6295  1D58  002C               	movlb	12	; select bank12
  6296  1D59  0093               	movwf	19	;volatile
  6297                           
  6298                           ;klondike.c: 267: PWM1DCH = FanLevel = 230;
  6299  1D5A  30E6               	movlw	230
  6300  1D5B  0022               	movlb	2	; select bank2
  6301  1D5C  00EE               	movwf	_FanLevel^(0+256)
  6302  1D5D  002C               	movlb	12	; select bank12
  6303  1D5E  0092               	movwf	18	;volatile
  6304                           
  6305                           ;klondike.c: 268: PWM1DCL = 0;
  6306  1D5F  0191               	clrf	17	;volatile
  6307                           
  6308                           ;klondike.c: 269: TMR2IF = 0;
  6309  1D60  0020               	movlb	0	; select bank0
  6310  1D61  1091               	bcf	17,1	;volatile
  6311                           
  6312                           ;klondike.c: 270: T2CONbits.T2CKPS = 1;
  6313  1D62  081C               	movf	28,w	;volatile
  6314  1D63  39FC               	andlw	-4
  6315  1D64  3801               	iorlw	1
  6316  1D65  009C               	movwf	28	;volatile
  6317                           
  6318                           ;klondike.c: 271: TMR2ON = 1;
  6319  1D66  151C               	bsf	28,2	;volatile
  6320                           
  6321                           ;klondike.c: 272: TRISCbits.TRISC5 = 0;
  6322  1D67  0021               	movlb	1	; select bank1
  6323  1D68  128E               	bcf	14,5	;volatile
  6324                           
  6325                           ;klondike.c: 273: PWM1OE=1;
  6326  1D69  002C               	movlb	12	; select bank12
  6327  1D6A  1713               	bsf	19,6	;volatile
  6328  1D6B  0008               	return
  6329  1D6C                     __end_of_InitFAN:	
  6330                           
  6331                           	psect	text18
  6332  0C8C                     __ptext18:	
  6333 ;; *************** function _DetectAsics *****************
  6334 ;; Defined at:
  6335 ;;		line 150 in file "klondike.c"
  6336 ;; Parameters:    Size  Location     Type
  6337 ;;		None
  6338 ;; Auto vars:     Size  Location     Type
  6339 ;;  x               1    2[BANK1 ] unsigned char 
  6340 ;; Return value:  Size  Location     Type
  6341 ;;		None               void
  6342 ;; Registers used:
  6343 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6344 ;; Tracked objects:
  6345 ;;		On entry : 0/0
  6346 ;;		On exit  : 0/0
  6347 ;;		Unchanged: 0/0
  6348 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6349 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6350 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  6351 ;;      Temps:          0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6352 ;;      Totals:         0       7       3       0       0       0       0       0       0       0       0       0       
      +0       0
  6353 ;;Total ram usage:       10 bytes
  6354 ;; Hardware stack levels used:    1
  6355 ;; Hardware stack levels required when called:    5
  6356 ;; This function calls:
  6357 ;;		___awdiv
  6358 ;; This function is called by:
  6359 ;;		_UserInit
  6360 ;; This function uses a non-reentrant model
  6361 ;;
  6362                           
  6363                           
  6364                           ;psect for function _DetectAsics
  6365  0C8C                     _DetectAsics:	
  6366                           
  6367                           ;klondike.c: 151: Status.ChipCount = 16;
  6368                           
  6369                           ;incstack = 0
  6370                           ; Regs used in _DetectAsics: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6371  0C8C  3010               	movlw	16
  6372  0C8D  0020               	movlb	0	; select bank0
  6373  0C8E  00E1               	movwf	??_DetectAsics
  6374  0C8F  0861               	movf	??_DetectAsics,w
  6375  0C90  0022               	movlb	2	; select bank2
  6376  0C91  00DA               	movwf	(_Status^(0+256)+1)	;volatile
  6377                           
  6378                           ;klondike.c: 154: BankSize = (Status.ChipCount)/2;
  6379  0C92  3002               	movlw	2
  6380  0C93  0020               	movlb	0	; select bank0
  6381  0C94  00D8               	movwf	?___awdiv
  6382  0C95  3000               	movlw	0
  6383  0C96  00D9               	movwf	?___awdiv+1
  6384  0C97  0022               	movlb	2	; select bank2
  6385  0C98  085A               	movf	(_Status^(0+256)+1),w	;volatile
  6386  0C99  0020               	movlb	0	; select bank0
  6387  0C9A  00E1               	movwf	??_DetectAsics
  6388  0C9B  01E2               	clrf	??_DetectAsics+1
  6389  0C9C  0861               	movf	??_DetectAsics,w
  6390  0C9D  00DA               	movwf	?___awdiv+2
  6391  0C9E  0862               	movf	??_DetectAsics+1,w
  6392  0C9F  00DB               	movwf	?___awdiv+3
  6393  0CA0  3190  20F4  318C   	fcall	___awdiv
  6394  0CA3  0020               	movlb	0	; select bank0
  6395  0CA4  0858               	movf	?___awdiv,w
  6396  0CA5  00E3               	movwf	??_DetectAsics+2
  6397  0CA6  0863               	movf	??_DetectAsics+2,w
  6398  0CA7  0022               	movlb	2	; select bank2
  6399  0CA8  00EF               	movwf	_BankSize^(0+256)
  6400                           
  6401                           ;klondike.c: 155: Status.MaxCount = 16384 / BankSize / 2;
  6402  0CA9  086F               	movf	_BankSize^(0+256),w
  6403  0CAA  0020               	movlb	0	; select bank0
  6404  0CAB  00E1               	movwf	??_DetectAsics
  6405  0CAC  01E2               	clrf	??_DetectAsics+1
  6406  0CAD  0861               	movf	??_DetectAsics,w
  6407  0CAE  00D8               	movwf	?___awdiv
  6408  0CAF  0862               	movf	??_DetectAsics+1,w
  6409  0CB0  00D9               	movwf	?___awdiv+1
  6410  0CB1  3000               	movlw	0
  6411  0CB2  00DA               	movwf	?___awdiv+2
  6412  0CB3  3040               	movlw	64
  6413  0CB4  00DB               	movwf	?___awdiv+3
  6414  0CB5  3190  20F4  318C   	fcall	___awdiv
  6415  0CB8  0020               	movlb	0	; select bank0
  6416  0CB9  0859               	movf	?___awdiv+1,w
  6417  0CBA  0021               	movlb	1	; select bank1
  6418  0CBB  01A1               	clrf	(_DetectAsics$2868+1)^(0+128)
  6419  0CBC  07A1               	addwf	(_DetectAsics$2868+1)^(0+128),f
  6420  0CBD  0020               	movlb	0	; select bank0
  6421  0CBE  0858               	movf	?___awdiv,w
  6422  0CBF  0021               	movlb	1	; select bank1
  6423  0CC0  01A0               	clrf	_DetectAsics$2868^(0+128)
  6424  0CC1  07A0               	addwf	_DetectAsics$2868^(0+128),f
  6425                           
  6426                           ;klondike.c: 155: Status.MaxCount = 16384 / BankSize / 2;
  6427  0CC2  3002               	movlw	2
  6428  0CC3  0020               	movlb	0	; select bank0
  6429  0CC4  00D8               	movwf	?___awdiv
  6430  0CC5  3000               	movlw	0
  6431  0CC6  00D9               	movwf	?___awdiv+1
  6432  0CC7  0021               	movlb	1	; select bank1
  6433  0CC8  0821               	movf	(_DetectAsics$2868+1)^(0+128),w
  6434  0CC9  0020               	movlb	0	; select bank0
  6435  0CCA  01DB               	clrf	?___awdiv+3
  6436  0CCB  07DB               	addwf	?___awdiv+3,f
  6437  0CCC  0021               	movlb	1	; select bank1
  6438  0CCD  0820               	movf	_DetectAsics$2868^(0+128),w
  6439  0CCE  0020               	movlb	0	; select bank0
  6440  0CCF  01DA               	clrf	?___awdiv+2
  6441  0CD0  07DA               	addwf	?___awdiv+2,f
  6442  0CD1  3190  20F4  318C   	fcall	___awdiv
  6443  0CD4  0020               	movlb	0	; select bank0
  6444  0CD5  0859               	movf	?___awdiv+1,w
  6445  0CD6  0022               	movlb	2	; select bank2
  6446  0CD7  01E4               	clrf	((_Status+1)^(0+256)+10)	;volatile
  6447  0CD8  07E4               	addwf	((_Status+1)^(0+256)+10),f	;volatile
  6448  0CD9  0020               	movlb	0	; select bank0
  6449  0CDA  0858               	movf	?___awdiv,w
  6450  0CDB  0022               	movlb	2	; select bank2
  6451  0CDC  01E3               	clrf	(_Status^(0+256)+10)	;volatile
  6452  0CDD  07E3               	addwf	(_Status^(0+256)+10),f	;volatile
  6453                           
  6454                           ;klondike.c: 157: NonceRanges[0] = 0;
  6455  0CDE  3000               	movlw	0
  6456  0CDF  0026               	movlb	6	; select bank6
  6457  0CE0  00A3               	movwf	(_NonceRanges+3)^(0+768)
  6458  0CE1  3000               	movlw	0
  6459  0CE2  00A2               	movwf	(_NonceRanges+2)^(0+768)
  6460  0CE3  3000               	movlw	0
  6461  0CE4  00A1               	movwf	(_NonceRanges+1)^(0+768)
  6462  0CE5  3000               	movlw	0
  6463  0CE6  00A0               	movwf	_NonceRanges^(0+768)
  6464                           
  6465                           ;klondike.c: 158: for(BYTE x = 1; x < BankSize; x++)
  6466  0CE7  0021               	movlb	1	; select bank1
  6467  0CE8  01A2               	clrf	DetectAsics@x^(0+128)
  6468  0CE9  0AA2               	incf	DetectAsics@x^(0+128),f
  6469  0CEA                     l7003:	
  6470  0CEA  0022               	movlb	2	; select bank2
  6471  0CEB  086F               	movf	_BankSize^(0+256),w
  6472  0CEC  0021               	movlb	1	; select bank1
  6473  0CED  0222               	subwf	DetectAsics@x^(0+128),w
  6474  0CEE  1803               	btfsc	3,0
  6475  0CEF  2D3A               	goto	l7005
  6476                           
  6477                           ;klondike.c: 159: NonceRanges[x] = NonceRanges[x-1] + BankRanges[BankSize-1];
  6478  0CF0  0022               	movlb	2	; select bank2
  6479  0CF1  086F               	movf	_BankSize^(0+256),w
  6480  0CF2  0020               	movlb	0	; select bank0
  6481  0CF3  00E1               	movwf	??_DetectAsics
  6482  0CF4  3001               	movlw	1
  6483  0CF5                     u7975:	
  6484  0CF5  35E1               	lslf	??_DetectAsics,f
  6485  0CF6  3EFF               	addlw	-1
  6486  0CF7  1D03               	skipz
  6487  0CF8  2CF5               	goto	u7975
  6488  0CF9  3561               	lslf	??_DetectAsics,w
  6489  0CFA  3EFC               	addlw	252
  6490  0CFB  3E40               	addlw	_BankRanges& (0+255)
  6491  0CFC  0086               	movwf	6
  6492  0CFD  3003               	movlw	3	; select bank6/7
  6493  0CFE  0087               	movwf	7
  6494  0CFF  3F40               	moviw [0]fsr1
  6495  0D00  00E2               	movwf	??_DetectAsics+1
  6496  0D01  3F41               	moviw [1]fsr1
  6497  0D02  00E3               	movwf	??_DetectAsics+2
  6498  0D03  3F42               	moviw [2]fsr1
  6499  0D04  00E4               	movwf	??_DetectAsics+3
  6500  0D05  3F43               	moviw [3]fsr1
  6501  0D06  00E5               	movwf	??_DetectAsics+4
  6502  0D07  0021               	movlb	1	; select bank1
  6503  0D08  0822               	movf	DetectAsics@x^(0+128),w
  6504  0D09  0020               	movlb	0	; select bank0
  6505  0D0A  00E6               	movwf	??_DetectAsics+5
  6506  0D0B  3001               	movlw	1
  6507  0D0C                     u7985:	
  6508  0D0C  35E6               	lslf	??_DetectAsics+5,f
  6509  0D0D  3EFF               	addlw	-1
  6510  0D0E  1D03               	skipz
  6511  0D0F  2D0C               	goto	u7985
  6512  0D10  3566               	lslf	??_DetectAsics+5,w
  6513  0D11  3EFC               	addlw	252
  6514  0D12  3E20               	addlw	_NonceRanges& (0+255)
  6515  0D13  0086               	movwf	6
  6516  0D14  3003               	movlw	3	; select bank6/7
  6517  0D15  0087               	movwf	7
  6518  0D16  3F40               	moviw [0]fsr1
  6519  0D17  07E2               	addwf	??_DetectAsics+1,f
  6520  0D18  3F41               	moviw [1]fsr1
  6521  0D19  3DE3               	addwfc	??_DetectAsics+2,f
  6522  0D1A  3F42               	moviw [2]fsr1
  6523  0D1B  3DE4               	addwfc	??_DetectAsics+3,f
  6524  0D1C  3F43               	moviw [3]fsr1
  6525  0D1D  3DE5               	addwfc	??_DetectAsics+4,f
  6526  0D1E  0021               	movlb	1	; select bank1
  6527  0D1F  0822               	movf	DetectAsics@x^(0+128),w
  6528  0D20  0020               	movlb	0	; select bank0
  6529  0D21  00E7               	movwf	??_DetectAsics+6
  6530  0D22  3001               	movlw	1
  6531  0D23                     u7995:	
  6532  0D23  35E7               	lslf	??_DetectAsics+6,f
  6533  0D24  3EFF               	addlw	-1
  6534  0D25  1D03               	skipz
  6535  0D26  2D23               	goto	u7995
  6536  0D27  3567               	lslf	??_DetectAsics+6,w
  6537  0D28  3E20               	addlw	_NonceRanges& (0+255)
  6538  0D29  0086               	movwf	6
  6539  0D2A  3003               	movlw	3	; select bank6/7
  6540  0D2B  0087               	movwf	7
  6541  0D2C  0862               	movf	??_DetectAsics+1,w
  6542  0D2D  3FC0               	movwi [0]fsr1
  6543  0D2E  0863               	movf	??_DetectAsics+2,w
  6544  0D2F  3FC1               	movwi [1]fsr1
  6545  0D30  0864               	movf	??_DetectAsics+3,w
  6546  0D31  3FC2               	movwi [2]fsr1
  6547  0D32  0865               	movf	??_DetectAsics+4,w
  6548  0D33  3FC3               	movwi [3]fsr1
  6549  0D34  3001               	movlw	1
  6550  0D35  00E1               	movwf	??_DetectAsics
  6551  0D36  0861               	movf	??_DetectAsics,w
  6552  0D37  0021               	movlb	1	; select bank1
  6553  0D38  07A2               	addwf	DetectAsics@x^(0+128),f
  6554  0D39  2CEA               	goto	l7003
  6555  0D3A                     l7005:	
  6556                           
  6557                           ;klondike.c: 161: Status.State = 'R';
  6558  0D3A  3052               	movlw	82
  6559  0D3B  0020               	movlb	0	; select bank0
  6560  0D3C  00E1               	movwf	??_DetectAsics
  6561  0D3D  0861               	movf	??_DetectAsics,w
  6562  0D3E  0022               	movlb	2	; select bank2
  6563  0D3F  00D9               	movwf	_Status^(0+256)	;volatile
  6564                           
  6565                           ;klondike.c: 162: Status.HashCount = 0;
  6566  0D40  01E1               	clrf	(_Status^(0+256)+8)	;volatile
  6567  0D41  01E2               	clrf	((_Status+1)^(0+256)+8)	;volatile
  6568  0D42  0008               	return
  6569  0D43                     __end_of_DetectAsics:	
  6570                           
  6571                           	psect	text19
  6572  10F4                     __ptext19:	
  6573 ;; *************** function ___awdiv *****************
  6574 ;; Defined at:
  6575 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.20\sources\pic\awdiv.c"
  6576 ;; Parameters:    Size  Location     Type
  6577 ;;  divisor         2    8[BANK0 ] int 
  6578 ;;  dividend        2   10[BANK0 ] int 
  6579 ;; Auto vars:     Size  Location     Type
  6580 ;;  quotient        2   15[BANK0 ] int 
  6581 ;;  sign            1   14[BANK0 ] unsigned char 
  6582 ;;  counter         1   13[BANK0 ] unsigned char 
  6583 ;; Return value:  Size  Location     Type
  6584 ;;                  2    8[BANK0 ] int 
  6585 ;; Registers used:
  6586 ;;		wreg, status,2, status,0
  6587 ;; Tracked objects:
  6588 ;;		On entry : 0/0
  6589 ;;		On exit  : 0/0
  6590 ;;		Unchanged: 0/0
  6591 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6592 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6593 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6594 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6595 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6596 ;;Total ram usage:        9 bytes
  6597 ;; Hardware stack levels used:    1
  6598 ;; Hardware stack levels required when called:    4
  6599 ;; This function calls:
  6600 ;;		Nothing
  6601 ;; This function is called by:
  6602 ;;		_DetectAsics
  6603 ;; This function uses a non-reentrant model
  6604 ;;
  6605                           
  6606                           
  6607                           ;psect for function ___awdiv
  6608  10F4                     ___awdiv:	
  6609                           
  6610                           ;incstack = 0
  6611                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  6612  10F4  0020               	movlb	0	; select bank0
  6613  10F5  01DE               	clrf	___awdiv@sign
  6614  10F6  1FD9               	btfss	___awdiv@divisor+1,7
  6615  10F7  28FF               	goto	l7083
  6616  10F8  09D8               	comf	___awdiv@divisor,f
  6617  10F9  09D9               	comf	___awdiv@divisor+1,f
  6618  10FA  0AD8               	incf	___awdiv@divisor,f
  6619  10FB  1903               	skipnz
  6620  10FC  0AD9               	incf	___awdiv@divisor+1,f
  6621  10FD  01DE               	clrf	___awdiv@sign
  6622  10FE  0ADE               	incf	___awdiv@sign,f
  6623  10FF                     l7083:	
  6624  10FF  1FDB               	btfss	___awdiv@dividend+1,7
  6625  1100  290A               	goto	l7089
  6626  1101  09DA               	comf	___awdiv@dividend,f
  6627  1102  09DB               	comf	___awdiv@dividend+1,f
  6628  1103  0ADA               	incf	___awdiv@dividend,f
  6629  1104  1903               	skipnz
  6630  1105  0ADB               	incf	___awdiv@dividend+1,f
  6631  1106  3001               	movlw	1
  6632  1107  00DC               	movwf	??___awdiv
  6633  1108  085C               	movf	??___awdiv,w
  6634  1109  06DE               	xorwf	___awdiv@sign,f
  6635  110A                     l7089:	
  6636  110A  01DF               	clrf	___awdiv@quotient
  6637  110B  01E0               	clrf	___awdiv@quotient+1
  6638  110C  0859               	movf	___awdiv@divisor+1,w
  6639  110D  0458               	iorwf	___awdiv@divisor,w
  6640  110E  1903               	skipnz
  6641  110F  2939               	goto	l7111
  6642  1110  01DD               	clrf	___awdiv@counter
  6643  1111  0ADD               	incf	___awdiv@counter,f
  6644  1112                     l7099:	
  6645  1112  1BD9               	btfsc	___awdiv@divisor+1,7
  6646  1113  291E               	goto	l7101
  6647  1114  3001               	movlw	1
  6648  1115                     u8135:	
  6649  1115  35D8               	lslf	___awdiv@divisor,f
  6650  1116  0DD9               	rlf	___awdiv@divisor+1,f
  6651  1117  0B89               	decfsz	9,f
  6652  1118  2915               	goto	u8135
  6653  1119  3001               	movlw	1
  6654  111A  00DC               	movwf	??___awdiv
  6655  111B  085C               	movf	??___awdiv,w
  6656  111C  07DD               	addwf	___awdiv@counter,f
  6657  111D  2912               	goto	l7099
  6658  111E                     l7101:	
  6659  111E  3001               	movlw	1
  6660  111F                     u8155:	
  6661  111F  35DF               	lslf	___awdiv@quotient,f
  6662  1120  0DE0               	rlf	___awdiv@quotient+1,f
  6663  1121  0B89               	decfsz	9,f
  6664  1122  291F               	goto	u8155
  6665  1123  0859               	movf	___awdiv@divisor+1,w
  6666  1124  025B               	subwf	___awdiv@dividend+1,w
  6667  1125  1D03               	skipz
  6668  1126  2929               	goto	u8165
  6669  1127  0858               	movf	___awdiv@divisor,w
  6670  1128  025A               	subwf	___awdiv@dividend,w
  6671  1129                     u8165:	
  6672  1129  1C03               	skipc
  6673  112A  2930               	goto	l7107
  6674  112B  0858               	movf	___awdiv@divisor,w
  6675  112C  02DA               	subwf	___awdiv@dividend,f
  6676  112D  0859               	movf	___awdiv@divisor+1,w
  6677  112E  3BDB               	subwfb	___awdiv@dividend+1,f
  6678  112F  145F               	bsf	___awdiv@quotient,0
  6679  1130                     l7107:	
  6680  1130  3001               	movlw	1
  6681  1131                     u8175:	
  6682  1131  36D9               	lsrf	___awdiv@divisor+1,f
  6683  1132  0CD8               	rrf	___awdiv@divisor,f
  6684  1133  0B89               	decfsz	9,f
  6685  1134  2931               	goto	u8175
  6686  1135  3001               	movlw	1
  6687  1136  02DD               	subwf	___awdiv@counter,f
  6688  1137  1D03               	btfss	3,2
  6689  1138  291E               	goto	l7101
  6690  1139                     l7111:	
  6691  1139  085E               	movf	___awdiv@sign,w
  6692  113A  1903               	btfsc	3,2
  6693  113B  2941               	goto	l7115
  6694  113C  09DF               	comf	___awdiv@quotient,f
  6695  113D  09E0               	comf	___awdiv@quotient+1,f
  6696  113E  0ADF               	incf	___awdiv@quotient,f
  6697  113F  1903               	skipnz
  6698  1140  0AE0               	incf	___awdiv@quotient+1,f
  6699  1141                     l7115:	
  6700  1141  0860               	movf	___awdiv@quotient+1,w
  6701  1142  01D9               	clrf	?___awdiv+1
  6702  1143  07D9               	addwf	?___awdiv+1,f
  6703  1144  085F               	movf	___awdiv@quotient,w
  6704  1145  01D8               	clrf	?___awdiv
  6705  1146  07D8               	addwf	?___awdiv,f
  6706  1147  0008               	return
  6707  1148                     __end_of___awdiv:	
  6708                           
  6709                           	psect	text20
  6710  11A3                     __ptext20:	
  6711 ;; *************** function _WorkTick *****************
  6712 ;; Defined at:
  6713 ;;		line 168 in file "klondike.c"
  6714 ;; Parameters:    Size  Location     Type
  6715 ;;		None
  6716 ;; Auto vars:     Size  Location     Type
  6717 ;;		None
  6718 ;; Return value:  Size  Location     Type
  6719 ;;		None               void
  6720 ;; Registers used:
  6721 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  6722 ;; Tracked objects:
  6723 ;;		On entry : 0/0
  6724 ;;		On exit  : 0/0
  6725 ;;		Unchanged: 0/0
  6726 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6727 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6728 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6729 ;;      Temps:          0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  6730 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  6731 ;;Total ram usage:        3 bytes
  6732 ;; Hardware stack levels used:    1
  6733 ;; Hardware stack levels required when called:    7
  6734 ;; This function calls:
  6735 ;;		_UpdateFanLevel
  6736 ;;		___awmod
  6737 ;; This function is called by:
  6738 ;;		_main
  6739 ;; This function uses a non-reentrant model
  6740 ;;
  6741                           
  6742                           
  6743                           ;psect for function _WorkTick
  6744  11A3                     _WorkTick:	
  6745                           
  6746                           ;klondike.c: 169: TMR0 += HashTime;
  6747                           
  6748                           ;incstack = 0
  6749                           ; Regs used in _WorkTick: [allreg]
  6750  11A3  0022               	movlb	2	; select bank2
  6751  11A4  0858               	movf	_HashTime^(0+256),w
  6752  11A5  0021               	movlb	1	; select bank1
  6753  11A6  00D5               	movwf	??_WorkTick^(0+128)
  6754  11A7  0855               	movf	??_WorkTick^(0+128),w
  6755  11A8  0020               	movlb	0	; select bank0
  6756  11A9  0795               	addwf	21,f	;volatile
  6757                           
  6758                           ;klondike.c: 170: TMR0IF = 0;
  6759  11AA  110B               	bcf	11,2	;volatile
  6760                           
  6761                           ;klondike.c: 172: if((Status.State == 'W') && (++Status.HashCount == Status.MaxCount)) {
  6762  11AB  0022               	movlb	2	; select bank2
  6763  11AC  0859               	movf	_Status^(0+256),w	;volatile
  6764  11AD  3A57               	xorlw	87
  6765  11AE  1D03               	skipz
  6766  11AF  29CE               	goto	l5407
  6767  11B0  3008               	movlw	8
  6768  11B1  3E59               	addlw	_Status& (0+255)
  6769  11B2  0086               	movwf	6
  6770  11B3  3001               	movlw	1	; select bank2/3
  6771  11B4  0087               	movwf	7
  6772  11B5  3001               	movlw	1
  6773  11B6  0781               	addwf	1,f
  6774  11B7  3141               	addfsr 1,1
  6775  11B8  1803               	skipnc
  6776  11B9  0A81               	incf	1,f
  6777  11BA  317F               	addfsr 1,-1
  6778  11BB  3F40               	moviw [0]fsr1
  6779  11BC  0663               	xorwf	(_Status^(0+256)+10),w	;volatile
  6780  11BD  1D03               	skipz
  6781  11BE  29C1               	goto	u5455
  6782  11BF  3F41               	moviw [1]fsr1
  6783  11C0  0664               	xorwf	((_Status+1)^(0+256)+10),w	;volatile
  6784  11C1                     u5455:	
  6785  11C1  1D03               	skipz
  6786  11C2  29CE               	goto	l5407
  6787                           
  6788                           ;klondike.c: 173: if(Status.WorkQC > 0) {
  6789  11C3  085C               	movf	(_Status^(0+256)+3),w	;volatile
  6790  11C4  1903               	btfsc	3,2
  6791  11C5  29C8               	goto	l5405
  6792                           
  6793                           ;klondike.c: 174: Status.State = 'P';
  6794  11C6  3050               	movlw	80
  6795  11C7  29C9               	goto	L6
  6796  11C8                     l5405:	
  6797                           ;klondike.c: 175: }
  6798                           
  6799                           
  6800                           ;klondike.c: 176: else {
  6801                           ;klondike.c: 177: Status.State = 'R';
  6802  11C8  3052               	movlw	82
  6803  11C9                     L6:	
  6804  11C9  0021               	movlb	1	; select bank1
  6805  11CA  00D5               	movwf	??_WorkTick^(0+128)
  6806  11CB  0855               	movf	??_WorkTick^(0+128),w
  6807  11CC  0022               	movlb	2	; select bank2
  6808  11CD  00D9               	movwf	_Status^(0+256)	;volatile
  6809  11CE                     l5407:	
  6810                           
  6811                           ;klondike.c: 178: }
  6812                           ;klondike.c: 179: }
  6813                           ;klondike.c: 181: if(++SlowTick == 0) {
  6814  11CE  3001               	movlw	1
  6815  11CF  0021               	movlb	1	; select bank1
  6816  11D0  00D5               	movwf	??_WorkTick^(0+128)
  6817  11D1  0855               	movf	??_WorkTick^(0+128),w
  6818  11D2  0022               	movlb	2	; select bank2
  6819  11D3  07BB               	addwf	_SlowTick^(0+256),f
  6820  11D4  1D03               	btfss	3,2
  6821  11D5  0008               	return
  6822                           
  6823                           ;klondike.c: 182: LATAbits.LATA5 = 0;;
  6824  11D6  128C               	bcf	12,5	;volatile
  6825                           
  6826                           ;klondike.c: 183: Status.Temp = ADRESH;
  6827  11D7  0021               	movlb	1	; select bank1
  6828  11D8  081C               	movf	28,w	;volatile
  6829  11D9  00D5               	movwf	??_WorkTick^(0+128)
  6830  11DA  0855               	movf	??_WorkTick^(0+128),w
  6831  11DB  0022               	movlb	2	; select bank2
  6832  11DC  00DE               	movwf	(_Status^(0+256)+5)	;volatile
  6833                           
  6834                           ;klondike.c: 184: ADCON0bits.GO_nDONE = 1;
  6835  11DD  0021               	movlb	1	; select bank1
  6836  11DE  149D               	bsf	29,1	;volatile
  6837                           
  6838                           ;klondike.c: 185: if((++VerySlowTick % 15) == 0) {
  6839  11DF  300F               	movlw	15
  6840  11E0  0020               	movlb	0	; select bank0
  6841  11E1  00D8               	movwf	?___awmod
  6842  11E2  3000               	movlw	0
  6843  11E3  00D9               	movwf	?___awmod+1
  6844  11E4  3001               	movlw	1
  6845  11E5  0021               	movlb	1	; select bank1
  6846  11E6  00D5               	movwf	??_WorkTick^(0+128)
  6847  11E7  0855               	movf	??_WorkTick^(0+128),w
  6848  11E8  0022               	movlb	2	; select bank2
  6849  11E9  07C5               	addwf	_VerySlowTick^(0+256),f
  6850  11EA  0845               	movf	_VerySlowTick^(0+256),w
  6851  11EB  0021               	movlb	1	; select bank1
  6852  11EC  00D6               	movwf	(??_WorkTick+1)^(0+128)
  6853  11ED  01D7               	clrf	((??_WorkTick+1)^(0+128)+1)
  6854  11EE  0856               	movf	(??_WorkTick+1)^(0+128),w
  6855  11EF  0020               	movlb	0	; select bank0
  6856  11F0  00DA               	movwf	?___awmod+2
  6857  11F1  0021               	movlb	1	; select bank1
  6858  11F2  0857               	movf	(??_WorkTick+2)^(0+128),w
  6859  11F3  0020               	movlb	0	; select bank0
  6860  11F4  00DB               	movwf	?___awmod+3
  6861  11F5  319F  276A  3191   	fcall	___awmod
  6862  11F8  0020               	movlb	0	; select bank0
  6863  11F9  0859               	movf	?___awmod+1,w
  6864  11FA  0458               	iorwf	?___awmod,w
  6865  11FB  1D03               	skipz
  6866  11FC  0008               	return
  6867                           
  6868                           ;klondike.c: 186: UpdateFanLevel();
  6869  11FD  3185  2594         	fcall	_UpdateFanLevel
  6870  11FF  0008               	return
  6871  1200                     __end_of_WorkTick:	
  6872                           
  6873                           	psect	text21
  6874  1F6A                     __ptext21:	
  6875 ;; *************** function ___awmod *****************
  6876 ;; Defined at:
  6877 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.20\sources\pic\awmod.c"
  6878 ;; Parameters:    Size  Location     Type
  6879 ;;  divisor         2    8[BANK0 ] int 
  6880 ;;  dividend        2   10[BANK0 ] int 
  6881 ;; Auto vars:     Size  Location     Type
  6882 ;;  sign            1   14[BANK0 ] unsigned char 
  6883 ;;  counter         1   13[BANK0 ] unsigned char 
  6884 ;; Return value:  Size  Location     Type
  6885 ;;                  2    8[BANK0 ] int 
  6886 ;; Registers used:
  6887 ;;		wreg, status,2, status,0
  6888 ;; Tracked objects:
  6889 ;;		On entry : 0/0
  6890 ;;		On exit  : 0/0
  6891 ;;		Unchanged: 0/0
  6892 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6893 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6894 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6895 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6896 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6897 ;;Total ram usage:        7 bytes
  6898 ;; Hardware stack levels used:    1
  6899 ;; Hardware stack levels required when called:    4
  6900 ;; This function calls:
  6901 ;;		Nothing
  6902 ;; This function is called by:
  6903 ;;		_WorkTick
  6904 ;; This function uses a non-reentrant model
  6905 ;;
  6906                           
  6907                           
  6908                           ;psect for function ___awmod
  6909  1F6A                     ___awmod:	
  6910                           
  6911                           ;incstack = 0
  6912                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  6913  1F6A  0020               	movlb	0	; select bank0
  6914  1F6B  01DE               	clrf	___awmod@sign
  6915  1F6C  1FDB               	btfss	___awmod@dividend+1,7
  6916  1F6D  2F75               	goto	l5697
  6917  1F6E  09DA               	comf	___awmod@dividend,f
  6918  1F6F  09DB               	comf	___awmod@dividend+1,f
  6919  1F70  0ADA               	incf	___awmod@dividend,f
  6920  1F71  1903               	skipnz
  6921  1F72  0ADB               	incf	___awmod@dividend+1,f
  6922  1F73  01DE               	clrf	___awmod@sign
  6923  1F74  0ADE               	incf	___awmod@sign,f
  6924  1F75                     l5697:	
  6925  1F75  1FD9               	btfss	___awmod@divisor+1,7
  6926  1F76  2F7C               	goto	l5701
  6927  1F77  09D8               	comf	___awmod@divisor,f
  6928  1F78  09D9               	comf	___awmod@divisor+1,f
  6929  1F79  0AD8               	incf	___awmod@divisor,f
  6930  1F7A  1903               	skipnz
  6931  1F7B  0AD9               	incf	___awmod@divisor+1,f
  6932  1F7C                     l5701:	
  6933  1F7C  0859               	movf	___awmod@divisor+1,w
  6934  1F7D  0458               	iorwf	___awmod@divisor,w
  6935  1F7E  1903               	skipnz
  6936  1F7F  2FA3               	goto	l5719
  6937  1F80  01DD               	clrf	___awmod@counter
  6938  1F81  0ADD               	incf	___awmod@counter,f
  6939  1F82                     l5709:	
  6940  1F82  1BD9               	btfsc	___awmod@divisor+1,7
  6941  1F83  2F8E               	goto	l5711
  6942  1F84  3001               	movlw	1
  6943  1F85                     u5905:	
  6944  1F85  35D8               	lslf	___awmod@divisor,f
  6945  1F86  0DD9               	rlf	___awmod@divisor+1,f
  6946  1F87  0B89               	decfsz	9,f
  6947  1F88  2F85               	goto	u5905
  6948  1F89  3001               	movlw	1
  6949  1F8A  00DC               	movwf	??___awmod
  6950  1F8B  085C               	movf	??___awmod,w
  6951  1F8C  07DD               	addwf	___awmod@counter,f
  6952  1F8D  2F82               	goto	l5709
  6953  1F8E                     l5711:	
  6954  1F8E  0859               	movf	___awmod@divisor+1,w
  6955  1F8F  025B               	subwf	___awmod@dividend+1,w
  6956  1F90  1D03               	skipz
  6957  1F91  2F94               	goto	u5925
  6958  1F92  0858               	movf	___awmod@divisor,w
  6959  1F93  025A               	subwf	___awmod@dividend,w
  6960  1F94                     u5925:	
  6961  1F94  1C03               	skipc
  6962  1F95  2F9A               	goto	l5715
  6963  1F96  0858               	movf	___awmod@divisor,w
  6964  1F97  02DA               	subwf	___awmod@dividend,f
  6965  1F98  0859               	movf	___awmod@divisor+1,w
  6966  1F99  3BDB               	subwfb	___awmod@dividend+1,f
  6967  1F9A                     l5715:	
  6968  1F9A  3001               	movlw	1
  6969  1F9B                     u5935:	
  6970  1F9B  36D9               	lsrf	___awmod@divisor+1,f
  6971  1F9C  0CD8               	rrf	___awmod@divisor,f
  6972  1F9D  0B89               	decfsz	9,f
  6973  1F9E  2F9B               	goto	u5935
  6974  1F9F  3001               	movlw	1
  6975  1FA0  02DD               	subwf	___awmod@counter,f
  6976  1FA1  1D03               	btfss	3,2
  6977  1FA2  2F8E               	goto	l5711
  6978  1FA3                     l5719:	
  6979  1FA3  085E               	movf	___awmod@sign,w
  6980  1FA4  1903               	btfsc	3,2
  6981  1FA5  2FAB               	goto	l5723
  6982  1FA6  09DA               	comf	___awmod@dividend,f
  6983  1FA7  09DB               	comf	___awmod@dividend+1,f
  6984  1FA8  0ADA               	incf	___awmod@dividend,f
  6985  1FA9  1903               	skipnz
  6986  1FAA  0ADB               	incf	___awmod@dividend+1,f
  6987  1FAB                     l5723:	
  6988  1FAB  085B               	movf	___awmod@dividend+1,w
  6989  1FAC  01D9               	clrf	?___awmod+1
  6990  1FAD  07D9               	addwf	?___awmod+1,f
  6991  1FAE  085A               	movf	___awmod@dividend,w
  6992  1FAF  01D8               	clrf	?___awmod
  6993  1FB0  07D8               	addwf	?___awmod,f
  6994  1FB1  0008               	return
  6995  1FB2                     __end_of___awmod:	
  6996                           
  6997                           	psect	text22
  6998  0594                     __ptext22:	
  6999 ;; *************** function _UpdateFanLevel *****************
  7000 ;; Defined at:
  7001 ;;		line 229 in file "klondike.c"
  7002 ;; Parameters:    Size  Location     Type
  7003 ;;		None
  7004 ;; Auto vars:     Size  Location     Type
  7005 ;;		None
  7006 ;; Return value:  Size  Location     Type
  7007 ;;		None               void
  7008 ;; Registers used:
  7009 ;;		wreg, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  7010 ;; Tracked objects:
  7011 ;;		On entry : 0/0
  7012 ;;		On exit  : 0/0
  7013 ;;		Unchanged: 0/0
  7014 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7015 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7016 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  7017 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  7018 ;;      Totals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
  7019 ;;Total ram usage:        7 bytes
  7020 ;; Hardware stack levels used:    1
  7021 ;; Hardware stack levels required when called:    6
  7022 ;; This function calls:
  7023 ;;		___awtoft
  7024 ;;		___ftadd
  7025 ;;		___ftmul
  7026 ;;		___ftneg
  7027 ;;		___fttol
  7028 ;; This function is called by:
  7029 ;;		_WorkTick
  7030 ;; This function uses a non-reentrant model
  7031 ;;
  7032                           
  7033                           
  7034                           ;psect for function _UpdateFanLevel
  7035  0594                     _UpdateFanLevel:	
  7036                           
  7037                           ;klondike.c: 230: Error = Status.Temp - TempTarget;
  7038                           
  7039                           ;incstack = 0
  7040                           ; Regs used in _UpdateFanLevel: [wreg+fsr1l+fsr1h+status,2+status,0+btemp+1+pclath+cstac
      +                          k]
  7041  0594  0023               	movlb	3	; select bank3
  7042  0595  086A               	movf	_TempTarget^(0+384),w
  7043  0596  0021               	movlb	1	; select bank1
  7044  0597  00CE               	movwf	??_UpdateFanLevel^(0+128)
  7045  0598  01CF               	clrf	(??_UpdateFanLevel^(0+128)+1)
  7046  0599  09CE               	comf	??_UpdateFanLevel^(0+128),f
  7047  059A  09CF               	comf	(??_UpdateFanLevel^(0+128)+1),f
  7048  059B  0ACE               	incf	??_UpdateFanLevel^(0+128),f
  7049  059C  1903               	skipnz
  7050  059D  0ACF               	incf	(??_UpdateFanLevel^(0+128)+1),f
  7051  059E  0022               	movlb	2	; select bank2
  7052  059F  085E               	movf	(_Status^(0+256)+5),w	;volatile
  7053  05A0  0021               	movlb	1	; select bank1
  7054  05A1  074E               	addwf	??_UpdateFanLevel^(0+128),w
  7055  05A2  00D0               	movwf	(??_UpdateFanLevel+2)^(0+128)
  7056  05A3  084F               	movf	(??_UpdateFanLevel+1)^(0+128),w
  7057  05A4  1803               	skipnc
  7058  05A5  0A4F               	incf	(??_UpdateFanLevel+1)^(0+128),w
  7059  05A6  00D1               	movwf	((??_UpdateFanLevel+2)^(0+128)+1)
  7060  05A7  0850               	movf	(??_UpdateFanLevel+2)^(0+128),w
  7061  05A8  0022               	movlb	2	; select bank2
  7062  05A9  00D2               	movwf	_Error^(0+256)
  7063  05AA  0021               	movlb	1	; select bank1
  7064  05AB  0851               	movf	(??_UpdateFanLevel+3)^(0+128),w
  7065  05AC  0022               	movlb	2	; select bank2
  7066  05AD  00D3               	movwf	(_Error+1)^(0+256)
  7067                           
  7068                           ;klondike.c: 231: Step = 1*Error - 0.5*LastError - 8*(LastTemp - Status.Temp);
  7069  05AE  0853               	movf	(_Error+1)^(0+256),w
  7070  05AF  0020               	movlb	0	; select bank0
  7071  05B0  01E1               	clrf	?___awtoft+1
  7072  05B1  07E1               	addwf	?___awtoft+1,f
  7073  05B2  0022               	movlb	2	; select bank2
  7074  05B3  0852               	movf	_Error^(0+256),w
  7075  05B4  0020               	movlb	0	; select bank0
  7076  05B5  01E0               	clrf	?___awtoft
  7077  05B6  07E0               	addwf	?___awtoft,f
  7078  05B7  319E  2609  3185   	fcall	___awtoft
  7079  05BA  0020               	movlb	0	; select bank0
  7080  05BB  0860               	movf	?___awtoft,w
  7081  05BC  0021               	movlb	1	; select bank1
  7082  05BD  00B6               	movwf	(?___ftadd^(0+128)+3)
  7083  05BE  0020               	movlb	0	; select bank0
  7084  05BF  0861               	movf	?___awtoft+1,w
  7085  05C0  0021               	movlb	1	; select bank1
  7086  05C1  00B7               	movwf	((?___ftadd+1)^(0+128)+3)
  7087  05C2  0020               	movlb	0	; select bank0
  7088  05C3  0862               	movf	?___awtoft+2,w
  7089  05C4  0021               	movlb	1	; select bank1
  7090  05C5  00B8               	movwf	((?___ftadd+2)^(0+128)+3)
  7091  05C6  0022               	movlb	2	; select bank2
  7092  05C7  085E               	movf	(_Status^(0+256)+5),w	;volatile
  7093  05C8  0021               	movlb	1	; select bank1
  7094  05C9  00CE               	movwf	??_UpdateFanLevel^(0+128)
  7095  05CA  01CF               	clrf	(??_UpdateFanLevel^(0+128)+1)
  7096  05CB  09CE               	comf	??_UpdateFanLevel^(0+128),f
  7097  05CC  09CF               	comf	(??_UpdateFanLevel^(0+128)+1),f
  7098  05CD  0ACE               	incf	??_UpdateFanLevel^(0+128),f
  7099  05CE  1903               	skipnz
  7100  05CF  0ACF               	incf	(??_UpdateFanLevel^(0+128)+1),f
  7101  05D0  0022               	movlb	2	; select bank2
  7102  05D1  0837               	movf	_LastTemp^(0+256),w
  7103  05D2  0021               	movlb	1	; select bank1
  7104  05D3  074E               	addwf	??_UpdateFanLevel^(0+128),w
  7105  05D4  00D0               	movwf	(??_UpdateFanLevel+2)^(0+128)
  7106  05D5  084F               	movf	(??_UpdateFanLevel+1)^(0+128),w
  7107  05D6  1803               	skipnc
  7108  05D7  0A4F               	incf	(??_UpdateFanLevel+1)^(0+128),w
  7109  05D8  00D1               	movwf	((??_UpdateFanLevel+2)^(0+128)+1)
  7110  05D9  35D0               	lslf	(??_UpdateFanLevel+2)^(0+128),f
  7111  05DA  0DD1               	rlf	((??_UpdateFanLevel+2)^(0+128)+1),f
  7112  05DB  35D0               	lslf	(??_UpdateFanLevel+2)^(0+128),f
  7113  05DC  0DD1               	rlf	((??_UpdateFanLevel+2)^(0+128)+1),f
  7114  05DD  35D0               	lslf	(??_UpdateFanLevel+2)^(0+128),f
  7115  05DE  0DD1               	rlf	((??_UpdateFanLevel+2)^(0+128)+1),f
  7116  05DF  0850               	movf	(??_UpdateFanLevel+2)^(0+128),w
  7117  05E0  0020               	movlb	0	; select bank0
  7118  05E1  00E0               	movwf	?___awtoft
  7119  05E2  0021               	movlb	1	; select bank1
  7120  05E3  0851               	movf	(??_UpdateFanLevel+3)^(0+128),w
  7121  05E4  0020               	movlb	0	; select bank0
  7122  05E5  00E1               	movwf	?___awtoft+1
  7123  05E6  319E  2609  3185   	fcall	___awtoft
  7124  05E9  0020               	movlb	0	; select bank0
  7125  05EA  0860               	movf	?___awtoft,w
  7126  05EB  0021               	movlb	1	; select bank1
  7127  05EC  00B0               	movwf	?___ftneg^(0+128)
  7128  05ED  0020               	movlb	0	; select bank0
  7129  05EE  0861               	movf	?___awtoft+1,w
  7130  05EF  0021               	movlb	1	; select bank1
  7131  05F0  00B1               	movwf	(?___ftneg+1)^(0+128)
  7132  05F1  0020               	movlb	0	; select bank0
  7133  05F2  0862               	movf	?___awtoft+2,w
  7134  05F3  0021               	movlb	1	; select bank1
  7135  05F4  00B2               	movwf	(?___ftneg+2)^(0+128)
  7136  05F5  3187  27F6  3185   	fcall	___ftneg
  7137  05F8  0021               	movlb	1	; select bank1
  7138  05F9  0830               	movf	?___ftneg^(0+128),w
  7139  05FA  00B3               	movwf	?___ftadd^(0+128)
  7140  05FB  0831               	movf	(?___ftneg+1)^(0+128),w
  7141  05FC  00B4               	movwf	(?___ftadd+1)^(0+128)
  7142  05FD  0832               	movf	(?___ftneg+2)^(0+128),w
  7143  05FE  00B5               	movwf	(?___ftadd+2)^(0+128)
  7144  05FF  318E  26FC  3185   	fcall	___ftadd
  7145  0602  0021               	movlb	1	; select bank1
  7146  0603  0833               	movf	?___ftadd^(0+128),w
  7147  0604  00D2               	movwf	_UpdateFanLevel$2869^(0+128)
  7148  0605  0834               	movf	(?___ftadd+1)^(0+128),w
  7149  0606  00D3               	movwf	(_UpdateFanLevel$2869+1)^(0+128)
  7150  0607  0835               	movf	(?___ftadd+2)^(0+128),w
  7151  0608  00D4               	movwf	(_UpdateFanLevel$2869+2)^(0+128)
  7152                           
  7153                           ;klondike.c: 231: Step = 1*Error - 0.5*LastError - 8*(LastTemp - Status.Temp);
  7154  0609  0852               	movf	_UpdateFanLevel$2869^(0+128),w
  7155  060A  00B6               	movwf	(?___ftadd^(0+128)+3)
  7156  060B  0853               	movf	(_UpdateFanLevel$2869+1)^(0+128),w
  7157  060C  00B7               	movwf	((?___ftadd+1)^(0+128)+3)
  7158  060D  0854               	movf	(_UpdateFanLevel$2869+2)^(0+128),w
  7159  060E  00B8               	movwf	((?___ftadd+2)^(0+128)+3)
  7160  060F  0023               	movlb	3	; select bank3
  7161  0610  0831               	movf	(_LastError+1)^(0+384),w
  7162  0611  0020               	movlb	0	; select bank0
  7163  0612  01E1               	clrf	?___awtoft+1
  7164  0613  07E1               	addwf	?___awtoft+1,f
  7165  0614  0023               	movlb	3	; select bank3
  7166  0615  0830               	movf	_LastError^(0+384),w
  7167  0616  0020               	movlb	0	; select bank0
  7168  0617  01E0               	clrf	?___awtoft
  7169  0618  07E0               	addwf	?___awtoft,f
  7170  0619  319E  2609  3185   	fcall	___awtoft
  7171  061C  0020               	movlb	0	; select bank0
  7172  061D  0860               	movf	?___awtoft,w
  7173  061E  0021               	movlb	1	; select bank1
  7174  061F  00A3               	movwf	(?___ftmul^(0+128)+3)
  7175  0620  0020               	movlb	0	; select bank0
  7176  0621  0861               	movf	?___awtoft+1,w
  7177  0622  0021               	movlb	1	; select bank1
  7178  0623  00A4               	movwf	((?___ftmul+1)^(0+128)+3)
  7179  0624  0020               	movlb	0	; select bank0
  7180  0625  0862               	movf	?___awtoft+2,w
  7181  0626  0021               	movlb	1	; select bank1
  7182  0627  00A5               	movwf	((?___ftmul+2)^(0+128)+3)
  7183  0628  3000               	movlw	0
  7184  0629  00A0               	movwf	?___ftmul^(0+128)
  7185  062A  3000               	movlw	0
  7186  062B  00A1               	movwf	(?___ftmul+1)^(0+128)
  7187  062C  303F               	movlw	63
  7188  062D  00A2               	movwf	(?___ftmul+2)^(0+128)
  7189  062E  318D  2543  3185   	fcall	___ftmul
  7190  0631  0021               	movlb	1	; select bank1
  7191  0632  0820               	movf	?___ftmul^(0+128),w
  7192  0633  00B0               	movwf	?___ftneg^(0+128)
  7193  0634  0821               	movf	(?___ftmul+1)^(0+128),w
  7194  0635  00B1               	movwf	(?___ftneg+1)^(0+128)
  7195  0636  0822               	movf	(?___ftmul+2)^(0+128),w
  7196  0637  00B2               	movwf	(?___ftneg+2)^(0+128)
  7197  0638  3187  27F6  3185   	fcall	___ftneg
  7198  063B  0021               	movlb	1	; select bank1
  7199  063C  0830               	movf	?___ftneg^(0+128),w
  7200  063D  00B3               	movwf	?___ftadd^(0+128)
  7201  063E  0831               	movf	(?___ftneg+1)^(0+128),w
  7202  063F  00B4               	movwf	(?___ftadd+1)^(0+128)
  7203  0640  0832               	movf	(?___ftneg+2)^(0+128),w
  7204  0641  00B5               	movwf	(?___ftadd+2)^(0+128)
  7205  0642  318E  26FC  3185   	fcall	___ftadd
  7206  0645  0021               	movlb	1	; select bank1
  7207  0646  0833               	movf	?___ftadd^(0+128),w
  7208  0647  00C0               	movwf	?___fttol^(0+128)
  7209  0648  0834               	movf	(?___ftadd+1)^(0+128),w
  7210  0649  00C1               	movwf	(?___fttol+1)^(0+128)
  7211  064A  0835               	movf	(?___ftadd+2)^(0+128),w
  7212  064B  00C2               	movwf	(?___fttol+2)^(0+128)
  7213  064C  3196  265C  3185   	fcall	___fttol
  7214  064F  0021               	movlb	1	; select bank1
  7215  0650  0841               	movf	(?___fttol^(0+128)+1),w
  7216  0651  0022               	movlb	2	; select bank2
  7217  0652  01A9               	clrf	(_Step+1)^(0+256)
  7218  0653  07A9               	addwf	(_Step+1)^(0+256),f
  7219  0654  0021               	movlb	1	; select bank1
  7220  0655  0840               	movf	?___fttol^(0+128),w
  7221  0656  0022               	movlb	2	; select bank2
  7222  0657  01A8               	clrf	_Step^(0+256)
  7223  0658  07A8               	addwf	_Step^(0+256),f
  7224                           
  7225                           ;klondike.c: 233: if(FanLevel + Step > 75 && FanLevel + Step <= 255) {
  7226  0659  086E               	movf	_FanLevel^(0+256),w
  7227  065A  0728               	addwf	_Step^(0+256),w
  7228  065B  0021               	movlb	1	; select bank1
  7229  065C  00CE               	movwf	??_UpdateFanLevel^(0+128)
  7230  065D  0022               	movlb	2	; select bank2
  7231  065E  0829               	movf	(_Step+1)^(0+256),w
  7232  065F  1803               	skipnc
  7233  0660  0A29               	incf	(_Step+1)^(0+256),w
  7234  0661  0021               	movlb	1	; select bank1
  7235  0662  00CF               	movwf	(??_UpdateFanLevel^(0+128)+1)
  7236  0663  084F               	movf	(??_UpdateFanLevel+1)^(0+128),w
  7237  0664  3A80               	xorlw	128
  7238  0665  00FF               	movwf	127
  7239  0666  3080               	movlw	128
  7240  0667  027F               	subwf	127,w
  7241  0668  1D03               	skipz
  7242  0669  2E6C               	goto	u5495
  7243  066A  304C               	movlw	76
  7244  066B  024E               	subwf	??_UpdateFanLevel^(0+128),w
  7245  066C                     u5495:	
  7246  066C  1C03               	skipc
  7247  066D  2E8C               	goto	l5431
  7248  066E  0022               	movlb	2	; select bank2
  7249  066F  086E               	movf	_FanLevel^(0+256),w
  7250  0670  0728               	addwf	_Step^(0+256),w
  7251  0671  0021               	movlb	1	; select bank1
  7252  0672  00CE               	movwf	??_UpdateFanLevel^(0+128)
  7253  0673  0022               	movlb	2	; select bank2
  7254  0674  0829               	movf	(_Step+1)^(0+256),w
  7255  0675  1803               	skipnc
  7256  0676  0A29               	incf	(_Step+1)^(0+256),w
  7257  0677  0021               	movlb	1	; select bank1
  7258  0678  00CF               	movwf	(??_UpdateFanLevel^(0+128)+1)
  7259  0679  084F               	movf	(??_UpdateFanLevel+1)^(0+128),w
  7260  067A  3A80               	xorlw	128
  7261  067B  00FF               	movwf	127
  7262  067C  3081               	movlw	129
  7263  067D  027F               	subwf	127,w
  7264  067E  1D03               	skipz
  7265  067F  2E82               	goto	u5505
  7266  0680  3000               	movlw	0
  7267  0681  024E               	subwf	??_UpdateFanLevel^(0+128),w
  7268  0682                     u5505:	
  7269  0682  1803               	skipnc
  7270  0683  2E8C               	goto	l5431
  7271                           
  7272                           ;klondike.c: 234: FanLevel += Step;
  7273  0684  0022               	movlb	2	; select bank2
  7274  0685  0828               	movf	_Step^(0+256),w
  7275  0686  0021               	movlb	1	; select bank1
  7276  0687  00CE               	movwf	??_UpdateFanLevel^(0+128)
  7277  0688  084E               	movf	??_UpdateFanLevel^(0+128),w
  7278  0689  0022               	movlb	2	; select bank2
  7279  068A  07EE               	addwf	_FanLevel^(0+256),f
  7280                           
  7281                           ;klondike.c: 235: }
  7282  068B  2EC0               	goto	l753
  7283  068C                     l5431:	
  7284                           
  7285                           ;klondike.c: 236: else if(FanLevel + Step > 255) {
  7286  068C  0022               	movlb	2	; select bank2
  7287  068D  086E               	movf	_FanLevel^(0+256),w
  7288  068E  0728               	addwf	_Step^(0+256),w
  7289  068F  0021               	movlb	1	; select bank1
  7290  0690  00CE               	movwf	??_UpdateFanLevel^(0+128)
  7291  0691  0022               	movlb	2	; select bank2
  7292  0692  0829               	movf	(_Step+1)^(0+256),w
  7293  0693  1803               	skipnc
  7294  0694  0A29               	incf	(_Step+1)^(0+256),w
  7295  0695  0021               	movlb	1	; select bank1
  7296  0696  00CF               	movwf	(??_UpdateFanLevel^(0+128)+1)
  7297  0697  084F               	movf	(??_UpdateFanLevel+1)^(0+128),w
  7298  0698  3A80               	xorlw	128
  7299  0699  00FF               	movwf	127
  7300  069A  3081               	movlw	129
  7301  069B  027F               	subwf	127,w
  7302  069C  1D03               	skipz
  7303  069D  2EA0               	goto	u5515
  7304  069E  3000               	movlw	0
  7305  069F  024E               	subwf	??_UpdateFanLevel^(0+128),w
  7306  06A0                     u5515:	
  7307  06A0  1C03               	skipc
  7308  06A1  2EA4               	goto	l5435
  7309                           
  7310                           ;klondike.c: 237: FanLevel = 255;
  7311  06A2  30FF               	movlw	255
  7312  06A3  2EBB               	goto	L7
  7313  06A4                     l5435:	
  7314                           ;klondike.c: 238: }
  7315                           
  7316                           
  7317                           ;klondike.c: 239: else if(FanLevel + Step < 75) {
  7318  06A4  0022               	movlb	2	; select bank2
  7319  06A5  086E               	movf	_FanLevel^(0+256),w
  7320  06A6  0728               	addwf	_Step^(0+256),w
  7321  06A7  0021               	movlb	1	; select bank1
  7322  06A8  00CE               	movwf	??_UpdateFanLevel^(0+128)
  7323  06A9  0022               	movlb	2	; select bank2
  7324  06AA  0829               	movf	(_Step+1)^(0+256),w
  7325  06AB  1803               	skipnc
  7326  06AC  0A29               	incf	(_Step+1)^(0+256),w
  7327  06AD  0021               	movlb	1	; select bank1
  7328  06AE  00CF               	movwf	(??_UpdateFanLevel^(0+128)+1)
  7329  06AF  084F               	movf	(??_UpdateFanLevel+1)^(0+128),w
  7330  06B0  3A80               	xorlw	128
  7331  06B1  00FF               	movwf	127
  7332  06B2  3080               	movlw	128
  7333  06B3  027F               	subwf	127,w
  7334  06B4  1D03               	skipz
  7335  06B5  2EB8               	goto	u5525
  7336  06B6  304B               	movlw	75
  7337  06B7  024E               	subwf	??_UpdateFanLevel^(0+128),w
  7338  06B8                     u5525:	
  7339  06B8  1803               	skipnc
  7340  06B9  2EC0               	goto	l753
  7341                           
  7342                           ;klondike.c: 240: FanLevel = 75;
  7343  06BA  304B               	movlw	75
  7344  06BB                     L7:	
  7345  06BB  0021               	movlb	1	; select bank1
  7346  06BC  00CE               	movwf	??_UpdateFanLevel^(0+128)
  7347  06BD  084E               	movf	??_UpdateFanLevel^(0+128),w
  7348  06BE  0022               	movlb	2	; select bank2
  7349  06BF  00EE               	movwf	_FanLevel^(0+256)
  7350  06C0                     l753:	
  7351                           
  7352                           ;klondike.c: 241: }
  7353                           ;klondike.c: 243: LastTemp = Status.Temp;
  7354  06C0  0022               	movlb	2	; select bank2
  7355  06C1  085E               	movf	(_Status^(0+256)+5),w	;volatile
  7356  06C2  0021               	movlb	1	; select bank1
  7357  06C3  00CE               	movwf	??_UpdateFanLevel^(0+128)
  7358  06C4  084E               	movf	??_UpdateFanLevel^(0+128),w
  7359  06C5  0022               	movlb	2	; select bank2
  7360  06C6  00B7               	movwf	_LastTemp^(0+256)
  7361                           
  7362                           ;klondike.c: 244: LastError = Error;
  7363  06C7  0853               	movf	(_Error+1)^(0+256),w
  7364  06C8  0023               	movlb	3	; select bank3
  7365  06C9  01B1               	clrf	(_LastError+1)^(0+384)
  7366  06CA  07B1               	addwf	(_LastError+1)^(0+384),f
  7367  06CB  0022               	movlb	2	; select bank2
  7368  06CC  0852               	movf	_Error^(0+256),w
  7369  06CD  0023               	movlb	3	; select bank3
  7370  06CE  01B0               	clrf	_LastError^(0+384)
  7371  06CF  07B0               	addwf	_LastError^(0+384),f
  7372                           
  7373                           ;klondike.c: 246: PWM1DCH = Status.FanSpeed = FanLevel;
  7374  06D0  3006               	movlw	6
  7375  06D1  3E59               	addlw	_Status& (0+255)
  7376  06D2  0086               	movwf	6
  7377  06D3  3001               	movlw	1	; select bank2/3
  7378  06D4  0087               	movwf	7
  7379  06D5  0022               	movlb	2	; select bank2
  7380  06D6  086E               	movf	_FanLevel^(0+256),w
  7381  06D7  3FC0               	movwi [0]fsr1
  7382  06D8  002C               	movlb	12	; select bank12
  7383  06D9  0092               	movwf	18	;volatile
  7384  06DA  0008               	return
  7385  06DB                     __end_of_UpdateFanLevel:	
  7386                           
  7387                           	psect	text23
  7388  165C                     __ptext23:	
  7389 ;; *************** function ___fttol *****************
  7390 ;; Defined at:
  7391 ;;		line 45 in file "C:\Program Files (x86)\Microchip\xc8\v1.20\sources\pic\fttol.c"
  7392 ;; Parameters:    Size  Location     Type
  7393 ;;  f1              3   32[BANK1 ] float 
  7394 ;; Auto vars:     Size  Location     Type
  7395 ;;  lval            4   41[BANK1 ] unsigned long 
  7396 ;;  exp1            1   45[BANK1 ] unsigned char 
  7397 ;;  sign1           1   40[BANK1 ] unsigned char 
  7398 ;; Return value:  Size  Location     Type
  7399 ;;                  4   32[BANK1 ] long 
  7400 ;; Registers used:
  7401 ;;		wreg, status,2, status,0
  7402 ;; Tracked objects:
  7403 ;;		On entry : 0/0
  7404 ;;		On exit  : 0/0
  7405 ;;		Unchanged: 0/0
  7406 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7407 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  7408 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
  7409 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  7410 ;;      Totals:         0       0      14       0       0       0       0       0       0       0       0       0       
      +0       0
  7411 ;;Total ram usage:       14 bytes
  7412 ;; Hardware stack levels used:    1
  7413 ;; Hardware stack levels required when called:    4
  7414 ;; This function calls:
  7415 ;;		Nothing
  7416 ;; This function is called by:
  7417 ;;		_UpdateFanLevel
  7418 ;; This function uses a non-reentrant model
  7419 ;;
  7420                           
  7421                           
  7422                           ;psect for function ___fttol
  7423  165C                     ___fttol:	
  7424                           
  7425                           ;incstack = 0
  7426                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  7427  165C  0021               	movlb	1	; select bank1
  7428  165D  0840               	movf	___fttol@f1^(0+128),w
  7429  165E  00C4               	movwf	??___fttol^(0+128)
  7430  165F  0841               	movf	(___fttol@f1+1)^(0+128),w
  7431  1660  00C5               	movwf	(??___fttol^(0+128)+1)
  7432  1661  0842               	movf	(___fttol@f1+2)^(0+128),w
  7433  1662  00C6               	movwf	(??___fttol^(0+128)+2)
  7434  1663  1003               	clrc
  7435  1664  0D45               	rlf	(??___fttol^(0+128)+1),w
  7436  1665  0D46               	rlf	(??___fttol^(0+128)+2),w
  7437  1666  00C7               	movwf	(??___fttol+3)^(0+128)
  7438  1667  0847               	movf	(??___fttol+3)^(0+128),w
  7439  1668  00CD               	movwf	___fttol@exp1^(0+128)
  7440  1669  08CD               	movf	___fttol@exp1^(0+128),f
  7441  166A  1D03               	skipz
  7442  166B  2E75               	goto	l5891
  7443  166C  3000               	movlw	0
  7444  166D  00C3               	movwf	(?___fttol+3)^(0+128)
  7445  166E  3000               	movlw	0
  7446  166F  00C2               	movwf	(?___fttol+2)^(0+128)
  7447  1670  3000               	movlw	0
  7448  1671  00C1               	movwf	(?___fttol+1)^(0+128)
  7449  1672  3000               	movlw	0
  7450  1673  00C0               	movwf	?___fttol^(0+128)
  7451  1674  0008               	return
  7452  1675                     l5891:	
  7453  1675  0840               	movf	___fttol@f1^(0+128),w
  7454  1676  00C4               	movwf	??___fttol^(0+128)
  7455  1677  0841               	movf	(___fttol@f1+1)^(0+128),w
  7456  1678  00C5               	movwf	(??___fttol^(0+128)+1)
  7457  1679  0842               	movf	(___fttol@f1+2)^(0+128),w
  7458  167A  00C6               	movwf	(??___fttol^(0+128)+2)
  7459  167B  3017               	movlw	23
  7460  167C                     u6365:	
  7461  167C  36C6               	lsrf	(??___fttol^(0+128)+2),f
  7462  167D  0CC5               	rrf	(??___fttol^(0+128)+1),f
  7463  167E  0CC4               	rrf	??___fttol^(0+128),f
  7464  167F  0B89               	decfsz	9,f
  7465  1680  2E7C               	goto	u6365
  7466  1681  0844               	movf	??___fttol^(0+128),w
  7467  1682  00C7               	movwf	(??___fttol+3)^(0+128)
  7468  1683  0847               	movf	(??___fttol+3)^(0+128),w
  7469  1684  00C8               	movwf	___fttol@sign1^(0+128)
  7470  1685  17C1               	bsf	(___fttol@f1^(0+128)+1),7
  7471  1686  30FF               	movlw	255
  7472  1687  05C0               	andwf	___fttol@f1^(0+128),f
  7473  1688  30FF               	movlw	255
  7474  1689  05C1               	andwf	(___fttol@f1+1)^(0+128),f
  7475  168A  3000               	movlw	0
  7476  168B  05C2               	andwf	(___fttol@f1+2)^(0+128),f
  7477  168C  0840               	movf	___fttol@f1^(0+128),w
  7478  168D  00C9               	movwf	___fttol@lval^(0+128)
  7479  168E  0841               	movf	(___fttol@f1+1)^(0+128),w
  7480  168F  00CA               	movwf	(___fttol@lval^(0+128)+1)
  7481  1690  0842               	movf	(___fttol@f1+2)^(0+128),w
  7482  1691  00CB               	movwf	(___fttol@lval^(0+128)+2)
  7483  1692  01CC               	clrf	(___fttol@lval^(0+128)+3)
  7484  1693  308E               	movlw	142
  7485  1694  02CD               	subwf	___fttol@exp1^(0+128),f
  7486  1695  1FCD               	btfss	___fttol@exp1^(0+128),7
  7487  1696  2EB3               	goto	l5911
  7488  1697  084D               	movf	___fttol@exp1^(0+128),w
  7489  1698  3A80               	xorlw	128
  7490  1699  3E8F               	addlw	143
  7491  169A  1803               	skipnc
  7492  169B  2EA5               	goto	l5909
  7493  169C  3000               	movlw	0
  7494  169D  00C3               	movwf	(?___fttol+3)^(0+128)
  7495  169E  3000               	movlw	0
  7496  169F  00C2               	movwf	(?___fttol+2)^(0+128)
  7497  16A0  3000               	movlw	0
  7498  16A1  00C1               	movwf	(?___fttol+1)^(0+128)
  7499  16A2  3000               	movlw	0
  7500  16A3  00C0               	movwf	?___fttol^(0+128)
  7501  16A4  0008               	return
  7502  16A5                     l5909:	
  7503  16A5  3001               	movlw	1
  7504  16A6                     u6395:	
  7505  16A6  36CC               	lsrf	(___fttol@lval+3)^(0+128),f
  7506  16A7  0CCB               	rrf	(___fttol@lval+2)^(0+128),f
  7507  16A8  0CCA               	rrf	(___fttol@lval+1)^(0+128),f
  7508  16A9  0CC9               	rrf	___fttol@lval^(0+128),f
  7509  16AA  0B89               	decfsz	9,f
  7510  16AB  2EA6               	goto	u6395
  7511  16AC  3001               	movlw	1
  7512  16AD  00C4               	movwf	??___fttol^(0+128)
  7513  16AE  0844               	movf	??___fttol^(0+128),w
  7514  16AF  07CD               	addwf	___fttol@exp1^(0+128),f
  7515  16B0  1903               	btfsc	3,2
  7516  16B1  2ECC               	goto	l5921
  7517  16B2  2EA5               	goto	l5909
  7518  16B3                     l5911:	
  7519  16B3  3018               	movlw	24
  7520  16B4  024D               	subwf	___fttol@exp1^(0+128),w
  7521  16B5  1C03               	skipc
  7522  16B6  2EC9               	goto	l5919
  7523  16B7  3000               	movlw	0
  7524  16B8  00C3               	movwf	(?___fttol+3)^(0+128)
  7525  16B9  3000               	movlw	0
  7526  16BA  00C2               	movwf	(?___fttol+2)^(0+128)
  7527  16BB  3000               	movlw	0
  7528  16BC  00C1               	movwf	(?___fttol+1)^(0+128)
  7529  16BD  3000               	movlw	0
  7530  16BE  00C0               	movwf	?___fttol^(0+128)
  7531  16BF  0008               	return
  7532  16C0                     l5917:	
  7533  16C0  3001               	movlw	1
  7534  16C1                     u6425:	
  7535  16C1  35C9               	lslf	___fttol@lval^(0+128),f
  7536  16C2  0DCA               	rlf	(___fttol@lval+1)^(0+128),f
  7537  16C3  0DCB               	rlf	(___fttol@lval+2)^(0+128),f
  7538  16C4  0DCC               	rlf	(___fttol@lval+3)^(0+128),f
  7539  16C5  0B89               	decfsz	9,f
  7540  16C6  2EC1               	goto	u6425
  7541  16C7  3001               	movlw	1
  7542  16C8  02CD               	subwf	___fttol@exp1^(0+128),f
  7543  16C9                     l5919:	
  7544  16C9  08CD               	movf	___fttol@exp1^(0+128),f
  7545  16CA  1D03               	skipz
  7546  16CB  2EC0               	goto	l5917
  7547  16CC                     l5921:	
  7548  16CC  0848               	movf	___fttol@sign1^(0+128),w
  7549  16CD  1903               	btfsc	3,2
  7550  16CE  2EDA               	goto	l5925
  7551  16CF  09C9               	comf	___fttol@lval^(0+128),f
  7552  16D0  09CA               	comf	(___fttol@lval+1)^(0+128),f
  7553  16D1  09CB               	comf	(___fttol@lval+2)^(0+128),f
  7554  16D2  09CC               	comf	(___fttol@lval+3)^(0+128),f
  7555  16D3  0AC9               	incf	___fttol@lval^(0+128),f
  7556  16D4  1903               	skipnz
  7557  16D5  0ACA               	incf	(___fttol@lval+1)^(0+128),f
  7558  16D6  1903               	skipnz
  7559  16D7  0ACB               	incf	(___fttol@lval+2)^(0+128),f
  7560  16D8  1903               	skipnz
  7561  16D9  0ACC               	incf	(___fttol@lval+3)^(0+128),f
  7562  16DA                     l5925:	
  7563  16DA  084C               	movf	(___fttol@lval+3)^(0+128),w
  7564  16DB  00C3               	movwf	(?___fttol+3)^(0+128)
  7565  16DC  084B               	movf	(___fttol@lval+2)^(0+128),w
  7566  16DD  00C2               	movwf	(?___fttol+2)^(0+128)
  7567  16DE  084A               	movf	(___fttol@lval+1)^(0+128),w
  7568  16DF  00C1               	movwf	(?___fttol+1)^(0+128)
  7569  16E0  0849               	movf	___fttol@lval^(0+128),w
  7570  16E1  00C0               	movwf	?___fttol^(0+128)
  7571  16E2  0008               	return
  7572  16E3                     __end_of___fttol:	
  7573                           
  7574                           	psect	text24
  7575  07F6                     __ptext24:	
  7576 ;; *************** function ___ftneg *****************
  7577 ;; Defined at:
  7578 ;;		line 16 in file "C:\Program Files (x86)\Microchip\xc8\v1.20\sources\pic\ftneg.c"
  7579 ;; Parameters:    Size  Location     Type
  7580 ;;  f1              3   16[BANK1 ] float 
  7581 ;; Auto vars:     Size  Location     Type
  7582 ;;		None
  7583 ;; Return value:  Size  Location     Type
  7584 ;;                  3   16[BANK1 ] float 
  7585 ;; Registers used:
  7586 ;;		wreg
  7587 ;; Tracked objects:
  7588 ;;		On entry : 0/0
  7589 ;;		On exit  : 0/0
  7590 ;;		Unchanged: 0/0
  7591 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7592 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  7593 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7594 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7595 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  7596 ;;Total ram usage:        3 bytes
  7597 ;; Hardware stack levels used:    1
  7598 ;; Hardware stack levels required when called:    4
  7599 ;; This function calls:
  7600 ;;		Nothing
  7601 ;; This function is called by:
  7602 ;;		_UpdateFanLevel
  7603 ;; This function uses a non-reentrant model
  7604 ;;
  7605                           
  7606                           
  7607                           ;psect for function ___ftneg
  7608  07F6                     ___ftneg:	
  7609                           
  7610                           ;incstack = 0
  7611                           ; Regs used in ___ftneg: [wreg]
  7612  07F6  0021               	movlb	1	; select bank1
  7613  07F7  0832               	movf	(___ftneg@f1+2)^(0+128),w
  7614  07F8  0431               	iorwf	(___ftneg@f1+1)^(0+128),w
  7615  07F9  0430               	iorwf	___ftneg@f1^(0+128),w
  7616  07FA  1903               	skipnz
  7617  07FB  0008               	return
  7618  07FC  3080               	movlw	128
  7619  07FD  06B2               	xorwf	(___ftneg@f1+2)^(0+128),f
  7620  07FE  0008               	return
  7621  07FF                     __end_of___ftneg:	
  7622                           
  7623                           	psect	text25
  7624  0D43                     __ptext25:	
  7625 ;; *************** function ___ftmul *****************
  7626 ;; Defined at:
  7627 ;;		line 52 in file "C:\Program Files (x86)\Microchip\xc8\v1.20\sources\pic\ftmul.c"
  7628 ;; Parameters:    Size  Location     Type
  7629 ;;  f1              3    0[BANK1 ] float 
  7630 ;;  f2              3    3[BANK1 ] float 
  7631 ;; Auto vars:     Size  Location     Type
  7632 ;;  f3_as_produc    3   11[BANK1 ] unsigned um
  7633 ;;  sign            1   15[BANK1 ] unsigned char 
  7634 ;;  cntr            1   14[BANK1 ] unsigned char 
  7635 ;;  exp             1   10[BANK1 ] unsigned char 
  7636 ;; Return value:  Size  Location     Type
  7637 ;;                  3    0[BANK1 ] float 
  7638 ;; Registers used:
  7639 ;;		wreg, status,2, status,0, pclath, cstack
  7640 ;; Tracked objects:
  7641 ;;		On entry : 0/0
  7642 ;;		On exit  : 0/0
  7643 ;;		Unchanged: 0/0
  7644 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7645 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
  7646 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
  7647 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  7648 ;;      Totals:         0       0      16       0       0       0       0       0       0       0       0       0       
      +0       0
  7649 ;;Total ram usage:       16 bytes
  7650 ;; Hardware stack levels used:    1
  7651 ;; Hardware stack levels required when called:    5
  7652 ;; This function calls:
  7653 ;;		___ftpack
  7654 ;; This function is called by:
  7655 ;;		_UpdateFanLevel
  7656 ;; This function uses a non-reentrant model
  7657 ;;
  7658                           
  7659                           
  7660                           ;psect for function ___ftmul
  7661  0D43                     ___ftmul:	
  7662                           
  7663                           ;incstack = 0
  7664                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  7665  0D43  0021               	movlb	1	; select bank1
  7666  0D44  0820               	movf	___ftmul@f1^(0+128),w
  7667  0D45  00A6               	movwf	??___ftmul^(0+128)
  7668  0D46  0821               	movf	(___ftmul@f1+1)^(0+128),w
  7669  0D47  00A7               	movwf	(??___ftmul^(0+128)+1)
  7670  0D48  0822               	movf	(___ftmul@f1+2)^(0+128),w
  7671  0D49  00A8               	movwf	(??___ftmul^(0+128)+2)
  7672  0D4A  1003               	clrc
  7673  0D4B  0D27               	rlf	(??___ftmul^(0+128)+1),w
  7674  0D4C  0D28               	rlf	(??___ftmul^(0+128)+2),w
  7675  0D4D  00A9               	movwf	(??___ftmul+3)^(0+128)
  7676  0D4E  0829               	movf	(??___ftmul+3)^(0+128),w
  7677  0D4F  00AA               	movwf	___ftmul@exp^(0+128)
  7678  0D50  08AA               	movf	___ftmul@exp^(0+128),f
  7679  0D51  1D03               	skipz
  7680  0D52  2D5A               	goto	l5833
  7681  0D53  3000               	movlw	0
  7682  0D54  00A0               	movwf	?___ftmul^(0+128)
  7683  0D55  3000               	movlw	0
  7684  0D56  00A1               	movwf	(?___ftmul+1)^(0+128)
  7685  0D57  3000               	movlw	0
  7686  0D58  00A2               	movwf	(?___ftmul+2)^(0+128)
  7687  0D59  0008               	return
  7688  0D5A                     l5833:	
  7689  0D5A  0823               	movf	___ftmul@f2^(0+128),w
  7690  0D5B  00A6               	movwf	??___ftmul^(0+128)
  7691  0D5C  0824               	movf	(___ftmul@f2+1)^(0+128),w
  7692  0D5D  00A7               	movwf	(??___ftmul^(0+128)+1)
  7693  0D5E  0825               	movf	(___ftmul@f2+2)^(0+128),w
  7694  0D5F  00A8               	movwf	(??___ftmul^(0+128)+2)
  7695  0D60  1003               	clrc
  7696  0D61  0D27               	rlf	(??___ftmul^(0+128)+1),w
  7697  0D62  0D28               	rlf	(??___ftmul^(0+128)+2),w
  7698  0D63  00A9               	movwf	(??___ftmul+3)^(0+128)
  7699  0D64  0829               	movf	(??___ftmul+3)^(0+128),w
  7700  0D65  00AF               	movwf	___ftmul@sign^(0+128)
  7701  0D66  08AF               	movf	___ftmul@sign^(0+128),f
  7702  0D67  1D03               	skipz
  7703  0D68  2D70               	goto	l5839
  7704  0D69  3000               	movlw	0
  7705  0D6A  00A0               	movwf	?___ftmul^(0+128)
  7706  0D6B  3000               	movlw	0
  7707  0D6C  00A1               	movwf	(?___ftmul+1)^(0+128)
  7708  0D6D  3000               	movlw	0
  7709  0D6E  00A2               	movwf	(?___ftmul+2)^(0+128)
  7710  0D6F  0008               	return
  7711  0D70                     l5839:	
  7712  0D70  082F               	movf	___ftmul@sign^(0+128),w
  7713  0D71  3E7B               	addlw	123
  7714  0D72  00A6               	movwf	??___ftmul^(0+128)
  7715  0D73  0826               	movf	??___ftmul^(0+128),w
  7716  0D74  07AA               	addwf	___ftmul@exp^(0+128),f
  7717  0D75  0820               	movf	___ftmul@f1^(0+128),w
  7718  0D76  00A6               	movwf	??___ftmul^(0+128)
  7719  0D77  0821               	movf	(___ftmul@f1+1)^(0+128),w
  7720  0D78  00A7               	movwf	(??___ftmul^(0+128)+1)
  7721  0D79  0822               	movf	(___ftmul@f1+2)^(0+128),w
  7722  0D7A  00A8               	movwf	(??___ftmul^(0+128)+2)
  7723  0D7B  3010               	movlw	16
  7724  0D7C                     u6245:	
  7725  0D7C  36A8               	lsrf	(??___ftmul^(0+128)+2),f
  7726  0D7D  0CA7               	rrf	(??___ftmul^(0+128)+1),f
  7727  0D7E  0CA6               	rrf	??___ftmul^(0+128),f
  7728  0D7F  0B89               	decfsz	9,f
  7729  0D80  2D7C               	goto	u6245
  7730  0D81  0826               	movf	??___ftmul^(0+128),w
  7731  0D82  00A9               	movwf	(??___ftmul+3)^(0+128)
  7732  0D83  0829               	movf	(??___ftmul+3)^(0+128),w
  7733  0D84  00AF               	movwf	___ftmul@sign^(0+128)
  7734  0D85  0823               	movf	___ftmul@f2^(0+128),w
  7735  0D86  00A6               	movwf	??___ftmul^(0+128)
  7736  0D87  0824               	movf	(___ftmul@f2+1)^(0+128),w
  7737  0D88  00A7               	movwf	(??___ftmul^(0+128)+1)
  7738  0D89  0825               	movf	(___ftmul@f2+2)^(0+128),w
  7739  0D8A  00A8               	movwf	(??___ftmul^(0+128)+2)
  7740  0D8B  3010               	movlw	16
  7741  0D8C                     u6255:	
  7742  0D8C  36A8               	lsrf	(??___ftmul^(0+128)+2),f
  7743  0D8D  0CA7               	rrf	(??___ftmul^(0+128)+1),f
  7744  0D8E  0CA6               	rrf	??___ftmul^(0+128),f
  7745  0D8F  0B89               	decfsz	9,f
  7746  0D90  2D8C               	goto	u6255
  7747  0D91  0826               	movf	??___ftmul^(0+128),w
  7748  0D92  00A9               	movwf	(??___ftmul+3)^(0+128)
  7749  0D93  0829               	movf	(??___ftmul+3)^(0+128),w
  7750  0D94  06AF               	xorwf	___ftmul@sign^(0+128),f
  7751  0D95  3080               	movlw	128
  7752  0D96  00A6               	movwf	??___ftmul^(0+128)
  7753  0D97  0826               	movf	??___ftmul^(0+128),w
  7754  0D98  05AF               	andwf	___ftmul@sign^(0+128),f
  7755  0D99  17A1               	bsf	(___ftmul@f1^(0+128)+1),7
  7756  0D9A  17A4               	bsf	(___ftmul@f2^(0+128)+1),7
  7757  0D9B  30FF               	movlw	255
  7758  0D9C  05A3               	andwf	___ftmul@f2^(0+128),f
  7759  0D9D  30FF               	movlw	255
  7760  0D9E  05A4               	andwf	(___ftmul@f2+1)^(0+128),f
  7761  0D9F  3000               	movlw	0
  7762  0DA0  05A5               	andwf	(___ftmul@f2+2)^(0+128),f
  7763  0DA1  3000               	movlw	0
  7764  0DA2  00AB               	movwf	___ftmul@f3_as_product^(0+128)
  7765  0DA3  3000               	movlw	0
  7766  0DA4  00AC               	movwf	(___ftmul@f3_as_product+1)^(0+128)
  7767  0DA5  3000               	movlw	0
  7768  0DA6  00AD               	movwf	(___ftmul@f3_as_product+2)^(0+128)
  7769  0DA7  3007               	movlw	7
  7770  0DA8  00A6               	movwf	??___ftmul^(0+128)
  7771  0DA9  0826               	movf	??___ftmul^(0+128),w
  7772  0DAA  00AE               	movwf	___ftmul@cntr^(0+128)
  7773  0DAB                     l5851:	
  7774  0DAB  1C20               	btfss	___ftmul@f1^(0+128),0
  7775  0DAC  2DB3               	goto	l5855
  7776  0DAD  0823               	movf	___ftmul@f2^(0+128),w
  7777  0DAE  07AB               	addwf	___ftmul@f3_as_product^(0+128),f
  7778  0DAF  0824               	movf	(___ftmul@f2+1)^(0+128),w
  7779  0DB0  3DAC               	addwfc	(___ftmul@f3_as_product+1)^(0+128),f
  7780  0DB1  0825               	movf	(___ftmul@f2+2)^(0+128),w
  7781  0DB2  3DAD               	addwfc	(___ftmul@f3_as_product+2)^(0+128),f
  7782  0DB3                     l5855:	
  7783  0DB3  3001               	movlw	1
  7784  0DB4                     u6275:	
  7785  0DB4  36A2               	lsrf	(___ftmul@f1+2)^(0+128),f
  7786  0DB5  0CA1               	rrf	(___ftmul@f1+1)^(0+128),f
  7787  0DB6  0CA0               	rrf	___ftmul@f1^(0+128),f
  7788  0DB7  0B89               	decfsz	9,f
  7789  0DB8  2DB4               	goto	u6275
  7790  0DB9  3001               	movlw	1
  7791  0DBA                     u6285:	
  7792  0DBA  35A3               	lslf	___ftmul@f2^(0+128),f
  7793  0DBB  0DA4               	rlf	(___ftmul@f2+1)^(0+128),f
  7794  0DBC  0DA5               	rlf	(___ftmul@f2+2)^(0+128),f
  7795  0DBD  0B89               	decfsz	9,f
  7796  0DBE  2DBA               	goto	u6285
  7797  0DBF  3001               	movlw	1
  7798  0DC0  02AE               	subwf	___ftmul@cntr^(0+128),f
  7799  0DC1  1D03               	btfss	3,2
  7800  0DC2  2DAB               	goto	l5851
  7801  0DC3  3009               	movlw	9
  7802  0DC4  00A6               	movwf	??___ftmul^(0+128)
  7803  0DC5  0826               	movf	??___ftmul^(0+128),w
  7804  0DC6  00AE               	movwf	___ftmul@cntr^(0+128)
  7805  0DC7                     l5863:	
  7806  0DC7  1C20               	btfss	___ftmul@f1^(0+128),0
  7807  0DC8  2DCF               	goto	l5867
  7808  0DC9  0823               	movf	___ftmul@f2^(0+128),w
  7809  0DCA  07AB               	addwf	___ftmul@f3_as_product^(0+128),f
  7810  0DCB  0824               	movf	(___ftmul@f2+1)^(0+128),w
  7811  0DCC  3DAC               	addwfc	(___ftmul@f3_as_product+1)^(0+128),f
  7812  0DCD  0825               	movf	(___ftmul@f2+2)^(0+128),w
  7813  0DCE  3DAD               	addwfc	(___ftmul@f3_as_product+2)^(0+128),f
  7814  0DCF                     l5867:	
  7815  0DCF  3001               	movlw	1
  7816  0DD0                     u6315:	
  7817  0DD0  36A2               	lsrf	(___ftmul@f1+2)^(0+128),f
  7818  0DD1  0CA1               	rrf	(___ftmul@f1+1)^(0+128),f
  7819  0DD2  0CA0               	rrf	___ftmul@f1^(0+128),f
  7820  0DD3  0B89               	decfsz	9,f
  7821  0DD4  2DD0               	goto	u6315
  7822  0DD5  3001               	movlw	1
  7823  0DD6                     u6325:	
  7824  0DD6  36AD               	lsrf	(___ftmul@f3_as_product+2)^(0+128),f
  7825  0DD7  0CAC               	rrf	(___ftmul@f3_as_product+1)^(0+128),f
  7826  0DD8  0CAB               	rrf	___ftmul@f3_as_product^(0+128),f
  7827  0DD9  0B89               	decfsz	9,f
  7828  0DDA  2DD6               	goto	u6325
  7829  0DDB  3001               	movlw	1
  7830  0DDC  02AE               	subwf	___ftmul@cntr^(0+128),f
  7831  0DDD  1D03               	btfss	3,2
  7832  0DDE  2DC7               	goto	l5863
  7833  0DDF  082B               	movf	___ftmul@f3_as_product^(0+128),w
  7834  0DE0  0020               	movlb	0	; select bank0
  7835  0DE1  00D8               	movwf	?___ftpack
  7836  0DE2  0021               	movlb	1	; select bank1
  7837  0DE3  082C               	movf	(___ftmul@f3_as_product+1)^(0+128),w
  7838  0DE4  0020               	movlb	0	; select bank0
  7839  0DE5  00D9               	movwf	?___ftpack+1
  7840  0DE6  0021               	movlb	1	; select bank1
  7841  0DE7  082D               	movf	(___ftmul@f3_as_product+2)^(0+128),w
  7842  0DE8  0020               	movlb	0	; select bank0
  7843  0DE9  00DA               	movwf	?___ftpack+2
  7844  0DEA  0021               	movlb	1	; select bank1
  7845  0DEB  082A               	movf	___ftmul@exp^(0+128),w
  7846  0DEC  00A6               	movwf	??___ftmul^(0+128)
  7847  0DED  0826               	movf	??___ftmul^(0+128),w
  7848  0DEE  0020               	movlb	0	; select bank0
  7849  0DEF  00DB               	movwf	?___ftpack+3
  7850  0DF0  0021               	movlb	1	; select bank1
  7851  0DF1  082F               	movf	___ftmul@sign^(0+128),w
  7852  0DF2  00A7               	movwf	(??___ftmul+1)^(0+128)
  7853  0DF3  0827               	movf	(??___ftmul+1)^(0+128),w
  7854  0DF4  0020               	movlb	0	; select bank0
  7855  0DF5  00DC               	movwf	?___ftpack+4
  7856  0DF6  3192  225E         	fcall	___ftpack
  7857  0DF8  0020               	movlb	0	; select bank0
  7858  0DF9  0858               	movf	?___ftpack,w
  7859  0DFA  0021               	movlb	1	; select bank1
  7860  0DFB  00A0               	movwf	?___ftmul^(0+128)
  7861  0DFC  0020               	movlb	0	; select bank0
  7862  0DFD  0859               	movf	?___ftpack+1,w
  7863  0DFE  0021               	movlb	1	; select bank1
  7864  0DFF  00A1               	movwf	(?___ftmul+1)^(0+128)
  7865  0E00  0020               	movlb	0	; select bank0
  7866  0E01  085A               	movf	?___ftpack+2,w
  7867  0E02  0021               	movlb	1	; select bank1
  7868  0E03  00A2               	movwf	(?___ftmul+2)^(0+128)
  7869  0E04  0008               	return
  7870  0E05                     __end_of___ftmul:	
  7871                           
  7872                           	psect	text26
  7873  0EFC                     __ptext26:	
  7874 ;; *************** function ___ftadd *****************
  7875 ;; Defined at:
  7876 ;;		line 87 in file "C:\Program Files (x86)\Microchip\xc8\v1.20\sources\pic\ftadd.c"
  7877 ;; Parameters:    Size  Location     Type
  7878 ;;  f1              3   19[BANK1 ] float 
  7879 ;;  f2              3   22[BANK1 ] float 
  7880 ;; Auto vars:     Size  Location     Type
  7881 ;;  exp1            1   31[BANK1 ] unsigned char 
  7882 ;;  exp2            1   30[BANK1 ] unsigned char 
  7883 ;;  sign            1   29[BANK1 ] unsigned char 
  7884 ;; Return value:  Size  Location     Type
  7885 ;;                  3   19[BANK1 ] float 
  7886 ;; Registers used:
  7887 ;;		wreg, status,2, status,0, pclath, cstack
  7888 ;; Tracked objects:
  7889 ;;		On entry : 0/0
  7890 ;;		On exit  : 0/0
  7891 ;;		Unchanged: 0/0
  7892 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7893 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
  7894 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  7895 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  7896 ;;      Totals:         0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0
  7897 ;;Total ram usage:       13 bytes
  7898 ;; Hardware stack levels used:    1
  7899 ;; Hardware stack levels required when called:    5
  7900 ;; This function calls:
  7901 ;;		___ftpack
  7902 ;; This function is called by:
  7903 ;;		_UpdateFanLevel
  7904 ;; This function uses a non-reentrant model
  7905 ;;
  7906                           
  7907                           
  7908                           ;psect for function ___ftadd
  7909  0EFC                     ___ftadd:	
  7910                           
  7911                           ;incstack = 0
  7912                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  7913  0EFC  0021               	movlb	1	; select bank1
  7914  0EFD  0833               	movf	___ftadd@f1^(0+128),w
  7915  0EFE  00B9               	movwf	??___ftadd^(0+128)
  7916  0EFF  0834               	movf	(___ftadd@f1+1)^(0+128),w
  7917  0F00  00BA               	movwf	(??___ftadd^(0+128)+1)
  7918  0F01  0835               	movf	(___ftadd@f1+2)^(0+128),w
  7919  0F02  00BB               	movwf	(??___ftadd^(0+128)+2)
  7920  0F03  1003               	clrc
  7921  0F04  0D3A               	rlf	(??___ftadd^(0+128)+1),w
  7922  0F05  0D3B               	rlf	(??___ftadd^(0+128)+2),w
  7923  0F06  00BC               	movwf	(??___ftadd+3)^(0+128)
  7924  0F07  083C               	movf	(??___ftadd+3)^(0+128),w
  7925  0F08  00BF               	movwf	___ftadd@exp1^(0+128)
  7926  0F09  0836               	movf	___ftadd@f2^(0+128),w
  7927  0F0A  00B9               	movwf	??___ftadd^(0+128)
  7928  0F0B  0837               	movf	(___ftadd@f2+1)^(0+128),w
  7929  0F0C  00BA               	movwf	(??___ftadd^(0+128)+1)
  7930  0F0D  0838               	movf	(___ftadd@f2+2)^(0+128),w
  7931  0F0E  00BB               	movwf	(??___ftadd^(0+128)+2)
  7932  0F0F  1003               	clrc
  7933  0F10  0D3A               	rlf	(??___ftadd^(0+128)+1),w
  7934  0F11  0D3B               	rlf	(??___ftadd^(0+128)+2),w
  7935  0F12  00BC               	movwf	(??___ftadd+3)^(0+128)
  7936  0F13  083C               	movf	(??___ftadd+3)^(0+128),w
  7937  0F14  00BE               	movwf	___ftadd@exp2^(0+128)
  7938  0F15  083F               	movf	___ftadd@exp1^(0+128),w
  7939  0F16  1903               	btfsc	3,2
  7940  0F17  2F24               	goto	l5763
  7941  0F18  083E               	movf	___ftadd@exp2^(0+128),w
  7942  0F19  023F               	subwf	___ftadd@exp1^(0+128),w
  7943  0F1A  1803               	skipnc
  7944  0F1B  2F2B               	goto	l5767
  7945  0F1C  033F               	decf	___ftadd@exp1^(0+128),w
  7946  0F1D  3AFF               	xorlw	255
  7947  0F1E  073E               	addwf	___ftadd@exp2^(0+128),w
  7948  0F1F  00B9               	movwf	??___ftadd^(0+128)
  7949  0F20  3019               	movlw	25
  7950  0F21  0239               	subwf	??___ftadd^(0+128),w
  7951  0F22  1C03               	skipc
  7952  0F23  2F2B               	goto	l5767
  7953  0F24                     l5763:	
  7954  0F24  0836               	movf	___ftadd@f2^(0+128),w
  7955  0F25  00B3               	movwf	?___ftadd^(0+128)
  7956  0F26  0837               	movf	(___ftadd@f2+1)^(0+128),w
  7957  0F27  00B4               	movwf	(?___ftadd+1)^(0+128)
  7958  0F28  0838               	movf	(___ftadd@f2+2)^(0+128),w
  7959  0F29  00B5               	movwf	(?___ftadd+2)^(0+128)
  7960  0F2A  0008               	return
  7961  0F2B                     l5767:	
  7962  0F2B  083E               	movf	___ftadd@exp2^(0+128),w
  7963  0F2C  1903               	btfsc	3,2
  7964  0F2D  0008               	return
  7965  0F2E  083F               	movf	___ftadd@exp1^(0+128),w
  7966  0F2F  023E               	subwf	___ftadd@exp2^(0+128),w
  7967  0F30  1803               	skipnc
  7968  0F31  2F3A               	goto	l5773
  7969  0F32  033E               	decf	___ftadd@exp2^(0+128),w
  7970  0F33  3AFF               	xorlw	255
  7971  0F34  073F               	addwf	___ftadd@exp1^(0+128),w
  7972  0F35  00B9               	movwf	??___ftadd^(0+128)
  7973  0F36  3019               	movlw	25
  7974  0F37  0239               	subwf	??___ftadd^(0+128),w
  7975  0F38  1803               	btfsc	3,0
  7976  0F39  0008               	return
  7977  0F3A                     l5773:	
  7978  0F3A  3006               	movlw	6
  7979  0F3B  00B9               	movwf	??___ftadd^(0+128)
  7980  0F3C  0839               	movf	??___ftadd^(0+128),w
  7981  0F3D  00BD               	movwf	___ftadd@sign^(0+128)
  7982  0F3E  1BB5               	btfsc	(___ftadd@f1+2)^(0+128),7
  7983  0F3F  17BD               	bsf	___ftadd@sign^(0+128),7
  7984  0F40  1BB8               	btfsc	(___ftadd@f2+2)^(0+128),7
  7985  0F41  173D               	bsf	___ftadd@sign^(0+128),6
  7986  0F42  17B4               	bsf	(___ftadd@f1^(0+128)+1),7
  7987  0F43  30FF               	movlw	255
  7988  0F44  05B3               	andwf	___ftadd@f1^(0+128),f
  7989  0F45  30FF               	movlw	255
  7990  0F46  05B4               	andwf	(___ftadd@f1+1)^(0+128),f
  7991  0F47  3000               	movlw	0
  7992  0F48  05B5               	andwf	(___ftadd@f1+2)^(0+128),f
  7993  0F49  17B7               	bsf	(___ftadd@f2^(0+128)+1),7
  7994  0F4A  30FF               	movlw	255
  7995  0F4B  05B6               	andwf	___ftadd@f2^(0+128),f
  7996  0F4C  30FF               	movlw	255
  7997  0F4D  05B7               	andwf	(___ftadd@f2+1)^(0+128),f
  7998  0F4E  3000               	movlw	0
  7999  0F4F  05B8               	andwf	(___ftadd@f2+2)^(0+128),f
  8000  0F50  083E               	movf	___ftadd@exp2^(0+128),w
  8001  0F51  023F               	subwf	___ftadd@exp1^(0+128),w
  8002  0F52  1803               	skipnc
  8003  0F53  2F76               	goto	l5795
  8004  0F54                     l5785:	
  8005  0F54  3001               	movlw	1
  8006  0F55                     u6085:	
  8007  0F55  35B6               	lslf	___ftadd@f2^(0+128),f
  8008  0F56  0DB7               	rlf	(___ftadd@f2+1)^(0+128),f
  8009  0F57  0DB8               	rlf	(___ftadd@f2+2)^(0+128),f
  8010  0F58  0B89               	decfsz	9,f
  8011  0F59  2F55               	goto	u6085
  8012  0F5A  3001               	movlw	1
  8013  0F5B  02BE               	subwf	___ftadd@exp2^(0+128),f
  8014  0F5C  083E               	movf	___ftadd@exp2^(0+128),w
  8015  0F5D  063F               	xorwf	___ftadd@exp1^(0+128),w
  8016  0F5E  1903               	skipnz
  8017  0F5F  2F71               	goto	l5793
  8018  0F60  3001               	movlw	1
  8019  0F61  02BD               	subwf	___ftadd@sign^(0+128),f
  8020  0F62  083D               	movf	___ftadd@sign^(0+128),w
  8021  0F63  3907               	andlw	7
  8022  0F64  1903               	btfsc	3,2
  8023  0F65  2F71               	goto	l5793
  8024  0F66  2F54               	goto	l5785
  8025  0F67                     l5791:	
  8026  0F67  3001               	movlw	1
  8027  0F68                     u6115:	
  8028  0F68  36B5               	lsrf	(___ftadd@f1+2)^(0+128),f
  8029  0F69  0CB4               	rrf	(___ftadd@f1+1)^(0+128),f
  8030  0F6A  0CB3               	rrf	___ftadd@f1^(0+128),f
  8031  0F6B  0B89               	decfsz	9,f
  8032  0F6C  2F68               	goto	u6115
  8033  0F6D  3001               	movlw	1
  8034  0F6E  00B9               	movwf	??___ftadd^(0+128)
  8035  0F6F  0839               	movf	??___ftadd^(0+128),w
  8036  0F70  07BF               	addwf	___ftadd@exp1^(0+128),f
  8037  0F71                     l5793:	
  8038  0F71  083F               	movf	___ftadd@exp1^(0+128),w
  8039  0F72  063E               	xorwf	___ftadd@exp2^(0+128),w
  8040  0F73  1903               	btfsc	3,2
  8041  0F74  2F9B               	goto	l1114
  8042  0F75  2F67               	goto	l5791
  8043  0F76                     l5795:	
  8044  0F76  083F               	movf	___ftadd@exp1^(0+128),w
  8045  0F77  023E               	subwf	___ftadd@exp2^(0+128),w
  8046  0F78  1803               	skipnc
  8047  0F79  2F9B               	goto	l1114
  8048  0F7A                     l5797:	
  8049  0F7A  3001               	movlw	1
  8050  0F7B                     u6145:	
  8051  0F7B  35B3               	lslf	___ftadd@f1^(0+128),f
  8052  0F7C  0DB4               	rlf	(___ftadd@f1+1)^(0+128),f
  8053  0F7D  0DB5               	rlf	(___ftadd@f1+2)^(0+128),f
  8054  0F7E  0B89               	decfsz	9,f
  8055  0F7F  2F7B               	goto	u6145
  8056  0F80  3001               	movlw	1
  8057  0F81  02BF               	subwf	___ftadd@exp1^(0+128),f
  8058  0F82  083E               	movf	___ftadd@exp2^(0+128),w
  8059  0F83  063F               	xorwf	___ftadd@exp1^(0+128),w
  8060  0F84  1903               	skipnz
  8061  0F85  2F97               	goto	l5805
  8062  0F86  3001               	movlw	1
  8063  0F87  02BD               	subwf	___ftadd@sign^(0+128),f
  8064  0F88  083D               	movf	___ftadd@sign^(0+128),w
  8065  0F89  3907               	andlw	7
  8066  0F8A  1903               	btfsc	3,2
  8067  0F8B  2F97               	goto	l5805
  8068  0F8C  2F7A               	goto	l5797
  8069  0F8D                     l5803:	
  8070  0F8D  3001               	movlw	1
  8071  0F8E                     u6175:	
  8072  0F8E  36B8               	lsrf	(___ftadd@f2+2)^(0+128),f
  8073  0F8F  0CB7               	rrf	(___ftadd@f2+1)^(0+128),f
  8074  0F90  0CB6               	rrf	___ftadd@f2^(0+128),f
  8075  0F91  0B89               	decfsz	9,f
  8076  0F92  2F8E               	goto	u6175
  8077  0F93  3001               	movlw	1
  8078  0F94  00B9               	movwf	??___ftadd^(0+128)
  8079  0F95  0839               	movf	??___ftadd^(0+128),w
  8080  0F96  07BE               	addwf	___ftadd@exp2^(0+128),f
  8081  0F97                     l5805:	
  8082  0F97  083F               	movf	___ftadd@exp1^(0+128),w
  8083  0F98  063E               	xorwf	___ftadd@exp2^(0+128),w
  8084  0F99  1D03               	skipz
  8085  0F9A  2F8D               	goto	l5803
  8086  0F9B                     l1114:	
  8087  0F9B  1FBD               	btfss	___ftadd@sign^(0+128),7
  8088  0F9C  2FAD               	goto	l5809
  8089  0F9D  30FF               	movlw	255
  8090  0F9E  06B3               	xorwf	___ftadd@f1^(0+128),f
  8091  0F9F  30FF               	movlw	255
  8092  0FA0  06B4               	xorwf	(___ftadd@f1+1)^(0+128),f
  8093  0FA1  30FF               	movlw	255
  8094  0FA2  06B5               	xorwf	(___ftadd@f1+2)^(0+128),f
  8095  0FA3  3001               	movlw	1
  8096  0FA4  07B3               	addwf	___ftadd@f1^(0+128),f
  8097  0FA5  3000               	movlw	0
  8098  0FA6  1803               	skipnc
  8099  0FA7  3001               	movlw	1
  8100  0FA8  07B4               	addwf	(___ftadd@f1+1)^(0+128),f
  8101  0FA9  3000               	movlw	0
  8102  0FAA  1803               	skipnc
  8103  0FAB  3001               	movlw	1
  8104  0FAC  07B5               	addwf	(___ftadd@f1+2)^(0+128),f
  8105  0FAD                     l5809:	
  8106  0FAD  1F3D               	btfss	___ftadd@sign^(0+128),6
  8107  0FAE  2FBF               	goto	l5813
  8108  0FAF  30FF               	movlw	255
  8109  0FB0  06B6               	xorwf	___ftadd@f2^(0+128),f
  8110  0FB1  30FF               	movlw	255
  8111  0FB2  06B7               	xorwf	(___ftadd@f2+1)^(0+128),f
  8112  0FB3  30FF               	movlw	255
  8113  0FB4  06B8               	xorwf	(___ftadd@f2+2)^(0+128),f
  8114  0FB5  3001               	movlw	1
  8115  0FB6  07B6               	addwf	___ftadd@f2^(0+128),f
  8116  0FB7  3000               	movlw	0
  8117  0FB8  1803               	skipnc
  8118  0FB9  3001               	movlw	1
  8119  0FBA  07B7               	addwf	(___ftadd@f2+1)^(0+128),f
  8120  0FBB  3000               	movlw	0
  8121  0FBC  1803               	skipnc
  8122  0FBD  3001               	movlw	1
  8123  0FBE  07B8               	addwf	(___ftadd@f2+2)^(0+128),f
  8124  0FBF                     l5813:	
  8125  0FBF  01BD               	clrf	___ftadd@sign^(0+128)
  8126  0FC0  0833               	movf	___ftadd@f1^(0+128),w
  8127  0FC1  07B6               	addwf	___ftadd@f2^(0+128),f
  8128  0FC2  0834               	movf	(___ftadd@f1+1)^(0+128),w
  8129  0FC3  3DB7               	addwfc	(___ftadd@f2+1)^(0+128),f
  8130  0FC4  0835               	movf	(___ftadd@f1+2)^(0+128),w
  8131  0FC5  3DB8               	addwfc	(___ftadd@f2+2)^(0+128),f
  8132  0FC6  1FB8               	btfss	(___ftadd@f2+2)^(0+128),7
  8133  0FC7  2FDA               	goto	l5823
  8134  0FC8  30FF               	movlw	255
  8135  0FC9  06B6               	xorwf	___ftadd@f2^(0+128),f
  8136  0FCA  30FF               	movlw	255
  8137  0FCB  06B7               	xorwf	(___ftadd@f2+1)^(0+128),f
  8138  0FCC  30FF               	movlw	255
  8139  0FCD  06B8               	xorwf	(___ftadd@f2+2)^(0+128),f
  8140  0FCE  3001               	movlw	1
  8141  0FCF  07B6               	addwf	___ftadd@f2^(0+128),f
  8142  0FD0  3000               	movlw	0
  8143  0FD1  1803               	skipnc
  8144  0FD2  3001               	movlw	1
  8145  0FD3  07B7               	addwf	(___ftadd@f2+1)^(0+128),f
  8146  0FD4  3000               	movlw	0
  8147  0FD5  1803               	skipnc
  8148  0FD6  3001               	movlw	1
  8149  0FD7  07B8               	addwf	(___ftadd@f2+2)^(0+128),f
  8150  0FD8  01BD               	clrf	___ftadd@sign^(0+128)
  8151  0FD9  0ABD               	incf	___ftadd@sign^(0+128),f
  8152  0FDA                     l5823:	
  8153  0FDA  0836               	movf	___ftadd@f2^(0+128),w
  8154  0FDB  0020               	movlb	0	; select bank0
  8155  0FDC  00D8               	movwf	?___ftpack
  8156  0FDD  0021               	movlb	1	; select bank1
  8157  0FDE  0837               	movf	(___ftadd@f2+1)^(0+128),w
  8158  0FDF  0020               	movlb	0	; select bank0
  8159  0FE0  00D9               	movwf	?___ftpack+1
  8160  0FE1  0021               	movlb	1	; select bank1
  8161  0FE2  0838               	movf	(___ftadd@f2+2)^(0+128),w
  8162  0FE3  0020               	movlb	0	; select bank0
  8163  0FE4  00DA               	movwf	?___ftpack+2
  8164  0FE5  0021               	movlb	1	; select bank1
  8165  0FE6  083F               	movf	___ftadd@exp1^(0+128),w
  8166  0FE7  00B9               	movwf	??___ftadd^(0+128)
  8167  0FE8  0839               	movf	??___ftadd^(0+128),w
  8168  0FE9  0020               	movlb	0	; select bank0
  8169  0FEA  00DB               	movwf	?___ftpack+3
  8170  0FEB  0021               	movlb	1	; select bank1
  8171  0FEC  083D               	movf	___ftadd@sign^(0+128),w
  8172  0FED  00BA               	movwf	(??___ftadd+1)^(0+128)
  8173  0FEE  083A               	movf	(??___ftadd+1)^(0+128),w
  8174  0FEF  0020               	movlb	0	; select bank0
  8175  0FF0  00DC               	movwf	?___ftpack+4
  8176  0FF1  3192  225E         	fcall	___ftpack
  8177  0FF3  0020               	movlb	0	; select bank0
  8178  0FF4  0858               	movf	?___ftpack,w
  8179  0FF5  0021               	movlb	1	; select bank1
  8180  0FF6  00B3               	movwf	?___ftadd^(0+128)
  8181  0FF7  0020               	movlb	0	; select bank0
  8182  0FF8  0859               	movf	?___ftpack+1,w
  8183  0FF9  0021               	movlb	1	; select bank1
  8184  0FFA  00B4               	movwf	(?___ftadd+1)^(0+128)
  8185  0FFB  0020               	movlb	0	; select bank0
  8186  0FFC  085A               	movf	?___ftpack+2,w
  8187  0FFD  0021               	movlb	1	; select bank1
  8188  0FFE  00B5               	movwf	(?___ftadd+2)^(0+128)
  8189  0FFF  0008               	return
  8190  1000                     __end_of___ftadd:	
  8191                           
  8192                           	psect	text27
  8193  1E09                     __ptext27:	
  8194 ;; *************** function ___awtoft *****************
  8195 ;; Defined at:
  8196 ;;		line 33 in file "C:\Program Files (x86)\Microchip\xc8\v1.20\sources\pic\awtoft.c"
  8197 ;; Parameters:    Size  Location     Type
  8198 ;;  c               2   16[BANK0 ] int 
  8199 ;; Auto vars:     Size  Location     Type
  8200 ;;  sign            1   21[BANK0 ] unsigned char 
  8201 ;; Return value:  Size  Location     Type
  8202 ;;                  3   16[BANK0 ] float 
  8203 ;; Registers used:
  8204 ;;		wreg, status,2, status,0, pclath, cstack
  8205 ;; Tracked objects:
  8206 ;;		On entry : 0/0
  8207 ;;		On exit  : 0/0
  8208 ;;		Unchanged: 0/0
  8209 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8210 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8211 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8212 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8213 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8214 ;;Total ram usage:        6 bytes
  8215 ;; Hardware stack levels used:    1
  8216 ;; Hardware stack levels required when called:    5
  8217 ;; This function calls:
  8218 ;;		___ftpack
  8219 ;; This function is called by:
  8220 ;;		_UpdateFanLevel
  8221 ;; This function uses a non-reentrant model
  8222 ;;
  8223                           
  8224                           
  8225                           ;psect for function ___awtoft
  8226  1E09                     ___awtoft:	
  8227                           
  8228                           ;incstack = 0
  8229                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
  8230  1E09  0020               	movlb	0	; select bank0
  8231  1E0A  01E5               	clrf	___awtoft@sign
  8232  1E0B  1FE1               	btfss	___awtoft@c+1,7
  8233  1E0C  2E14               	goto	l5735
  8234  1E0D  09E0               	comf	___awtoft@c,f
  8235  1E0E  09E1               	comf	___awtoft@c+1,f
  8236  1E0F  0AE0               	incf	___awtoft@c,f
  8237  1E10  1903               	skipnz
  8238  1E11  0AE1               	incf	___awtoft@c+1,f
  8239  1E12  01E5               	clrf	___awtoft@sign
  8240  1E13  0AE5               	incf	___awtoft@sign,f
  8241  1E14                     l5735:	
  8242  1E14  0860               	movf	___awtoft@c,w
  8243  1E15  00D8               	movwf	?___ftpack
  8244  1E16  0861               	movf	___awtoft@c+1,w
  8245  1E17  00D9               	movwf	?___ftpack+1
  8246  1E18  01DA               	clrf	?___ftpack+2
  8247  1E19  308E               	movlw	142
  8248  1E1A  00E3               	movwf	??___awtoft
  8249  1E1B  0863               	movf	??___awtoft,w
  8250  1E1C  00DB               	movwf	?___ftpack+3
  8251  1E1D  0865               	movf	___awtoft@sign,w
  8252  1E1E  00E4               	movwf	??___awtoft+1
  8253  1E1F  0864               	movf	??___awtoft+1,w
  8254  1E20  00DC               	movwf	?___ftpack+4
  8255  1E21  3192  225E         	fcall	___ftpack
  8256  1E23  0020               	movlb	0	; select bank0
  8257  1E24  0858               	movf	?___ftpack,w
  8258  1E25  00E0               	movwf	?___awtoft
  8259  1E26  0859               	movf	?___ftpack+1,w
  8260  1E27  00E1               	movwf	?___awtoft+1
  8261  1E28  085A               	movf	?___ftpack+2,w
  8262  1E29  00E2               	movwf	?___awtoft+2
  8263  1E2A  0008               	return
  8264  1E2B                     __end_of___awtoft:	
  8265                           
  8266                           	psect	text28
  8267  125E                     __ptext28:	
  8268 ;; *************** function ___ftpack *****************
  8269 ;; Defined at:
  8270 ;;		line 63 in file "C:\Program Files (x86)\Microchip\xc8\v1.20\sources\pic\float.c"
  8271 ;; Parameters:    Size  Location     Type
  8272 ;;  arg             3    8[BANK0 ] unsigned um
  8273 ;;  exp             1   11[BANK0 ] unsigned char 
  8274 ;;  sign            1   12[BANK0 ] unsigned char 
  8275 ;; Auto vars:     Size  Location     Type
  8276 ;;		None
  8277 ;; Return value:  Size  Location     Type
  8278 ;;                  3    8[BANK0 ] float 
  8279 ;; Registers used:
  8280 ;;		wreg, status,2, status,0
  8281 ;; Tracked objects:
  8282 ;;		On entry : 0/0
  8283 ;;		On exit  : 0/0
  8284 ;;		Unchanged: 0/0
  8285 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8286 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8287 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8288 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8289 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8290 ;;Total ram usage:        8 bytes
  8291 ;; Hardware stack levels used:    1
  8292 ;; Hardware stack levels required when called:    4
  8293 ;; This function calls:
  8294 ;;		Nothing
  8295 ;; This function is called by:
  8296 ;;		___awtoft
  8297 ;;		___ftadd
  8298 ;;		___ftmul
  8299 ;; This function uses a non-reentrant model
  8300 ;;
  8301                           
  8302                           
  8303                           ;psect for function ___ftpack
  8304  125E                     ___ftpack:	
  8305                           
  8306                           ;incstack = 0
  8307                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  8308  125E  0020               	movlb	0	; select bank0
  8309  125F  085B               	movf	___ftpack@exp,w
  8310  1260  1903               	btfsc	3,2
  8311  1261  2A67               	goto	l5619
  8312  1262  085A               	movf	___ftpack@arg+2,w
  8313  1263  0459               	iorwf	___ftpack@arg+1,w
  8314  1264  0458               	iorwf	___ftpack@arg,w
  8315  1265  1D03               	skipz
  8316  1266  2A78               	goto	l5625
  8317  1267                     l5619:	
  8318  1267  3000               	movlw	0
  8319  1268  00D8               	movwf	?___ftpack
  8320  1269  3000               	movlw	0
  8321  126A  00D9               	movwf	?___ftpack+1
  8322  126B  3000               	movlw	0
  8323  126C  00DA               	movwf	?___ftpack+2
  8324  126D  0008               	return
  8325  126E                     l5623:	
  8326  126E  3001               	movlw	1
  8327  126F  00DD               	movwf	??___ftpack
  8328  1270  085D               	movf	??___ftpack,w
  8329  1271  07DB               	addwf	___ftpack@exp,f
  8330  1272  3001               	movlw	1
  8331  1273                     u5685:	
  8332  1273  36DA               	lsrf	___ftpack@arg+2,f
  8333  1274  0CD9               	rrf	___ftpack@arg+1,f
  8334  1275  0CD8               	rrf	___ftpack@arg,f
  8335  1276  0B89               	decfsz	9,f
  8336  1277  2A73               	goto	u5685
  8337  1278                     l5625:	
  8338  1278  30FE               	movlw	254
  8339  1279  055A               	andwf	___ftpack@arg+2,w
  8340  127A  1903               	btfsc	3,2
  8341  127B  2A91               	goto	l1085
  8342  127C  2A6E               	goto	l5623
  8343  127D                     l5627:	
  8344  127D  3001               	movlw	1
  8345  127E  00DD               	movwf	??___ftpack
  8346  127F  085D               	movf	??___ftpack,w
  8347  1280  07DB               	addwf	___ftpack@exp,f
  8348  1281  3001               	movlw	1
  8349  1282  07D8               	addwf	___ftpack@arg,f
  8350  1283  3000               	movlw	0
  8351  1284  1803               	skipnc
  8352  1285  3001               	movlw	1
  8353  1286  07D9               	addwf	___ftpack@arg+1,f
  8354  1287  3000               	movlw	0
  8355  1288  1803               	skipnc
  8356  1289  3001               	movlw	1
  8357  128A  07DA               	addwf	___ftpack@arg+2,f
  8358  128B  3001               	movlw	1
  8359  128C                     u5705:	
  8360  128C  36DA               	lsrf	___ftpack@arg+2,f
  8361  128D  0CD9               	rrf	___ftpack@arg+1,f
  8362  128E  0CD8               	rrf	___ftpack@arg,f
  8363  128F  0B89               	decfsz	9,f
  8364  1290  2A8C               	goto	u5705
  8365  1291                     l1085:	
  8366  1291  30FF               	movlw	255
  8367  1292  055A               	andwf	___ftpack@arg+2,w
  8368  1293  1903               	btfsc	3,2
  8369  1294  2A9E               	goto	l5635
  8370  1295  2A7D               	goto	l5627
  8371  1296                     l5633:	
  8372  1296  3001               	movlw	1
  8373  1297  02DB               	subwf	___ftpack@exp,f
  8374  1298  3001               	movlw	1
  8375  1299                     u5725:	
  8376  1299  35D8               	lslf	___ftpack@arg,f
  8377  129A  0DD9               	rlf	___ftpack@arg+1,f
  8378  129B  0DDA               	rlf	___ftpack@arg+2,f
  8379  129C  0B89               	decfsz	9,f
  8380  129D  2A99               	goto	u5725
  8381  129E                     l5635:	
  8382  129E  1FD9               	btfss	___ftpack@arg+1,7
  8383  129F  2A96               	goto	l5633
  8384  12A0  185B               	btfsc	___ftpack@exp,0
  8385  12A1  2AA8               	goto	l1091
  8386  12A2  30FF               	movlw	255
  8387  12A3  05D8               	andwf	___ftpack@arg,f
  8388  12A4  307F               	movlw	127
  8389  12A5  05D9               	andwf	___ftpack@arg+1,f
  8390  12A6  30FF               	movlw	255
  8391  12A7  05DA               	andwf	___ftpack@arg+2,f
  8392  12A8                     l1091:	
  8393  12A8  1003               	clrc
  8394  12A9  0CDB               	rrf	___ftpack@exp,f
  8395  12AA  085B               	movf	___ftpack@exp,w
  8396  12AB  00DD               	movwf	??___ftpack
  8397  12AC  01DE               	clrf	??___ftpack+1
  8398  12AD  01DF               	clrf	??___ftpack+2
  8399  12AE  3010               	movlw	16
  8400  12AF                     u5755:	
  8401  12AF  35DD               	lslf	??___ftpack,f
  8402  12B0  0DDE               	rlf	??___ftpack+1,f
  8403  12B1  0DDF               	rlf	??___ftpack+2,f
  8404  12B2  0B89               	decfsz	9,f
  8405  12B3  2AAF               	goto	u5755
  8406  12B4  085D               	movf	??___ftpack,w
  8407  12B5  04D8               	iorwf	___ftpack@arg,f
  8408  12B6  085E               	movf	??___ftpack+1,w
  8409  12B7  04D9               	iorwf	___ftpack@arg+1,f
  8410  12B8  085F               	movf	??___ftpack+2,w
  8411  12B9  04DA               	iorwf	___ftpack@arg+2,f
  8412  12BA  085C               	movf	___ftpack@sign,w
  8413  12BB  1903               	btfsc	3,2
  8414  12BC  0008               	return
  8415  12BD  17DA               	bsf	___ftpack@arg+2,7
  8416  12BE  0008               	return
  8417  12BF                     __end_of___ftpack:	
  8418                           
  8419                           	psect	text29
  8420  0E05                     __ptext29:	
  8421 ;; *************** function _USBDeviceTasks *****************
  8422 ;; Defined at:
  8423 ;;		line 669 in file "../USB/usb_device.c"
  8424 ;; Parameters:    Size  Location     Type
  8425 ;;		None
  8426 ;; Auto vars:     Size  Location     Type
  8427 ;;  i               1   20[BANK1 ] unsigned char 
  8428 ;; Return value:  Size  Location     Type
  8429 ;;		None               void
  8430 ;; Registers used:
  8431 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  8432 ;; Tracked objects:
  8433 ;;		On entry : 0/0
  8434 ;;		On exit  : 0/0
  8435 ;;		Unchanged: 0/0
  8436 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8437 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8438 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  8439 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  8440 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  8441 ;;Total ram usage:        3 bytes
  8442 ;; Hardware stack levels used:    1
  8443 ;; Hardware stack levels required when called:   12
  8444 ;; This function calls:
  8445 ;;		_USBDeviceInit
  8446 ;;		_USBWakeFromSuspend
  8447 ;;		_USBSuspend
  8448 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
  8449 ;;		_USBCtrlEPAllowStatusStage
  8450 ;;		_USBStallHandler
  8451 ;;		_USBCtrlEPService
  8452 ;; This function is called by:
  8453 ;;		_main
  8454 ;; This function uses a non-reentrant model
  8455 ;;
  8456                           
  8457                           
  8458                           ;psect for function _USBDeviceTasks
  8459  0E05                     _USBDeviceTasks:	
  8460                           
  8461                           ;usb_device.c: 735: }
  8462                           ;usb_device.c: 757: if(USBDeviceState == DETACHED_STATE)
  8463                           
  8464                           ;usb_device.c: 734: return;
  8465                           
  8466                           ;usb_device.c: 733: PIR2bits.USBIF = 0;;
  8467                           
  8468                           ;usb_device.c: 705: USBDeviceState = DETACHED_STATE;
  8469                           
  8470                           ;usb_device.c: 702: UIE = 0;
  8471                           
  8472                           ;usb_device.c: 697: {
  8473                           ;usb_device.c: 699: UCON = 0;
  8474                           
  8475                           ;usb_device.c: 670: BYTE i;
  8476                           ;usb_device.c: 696: if (1 != 1)
  8477                           
  8478                           ;incstack = 0
  8479                           ; Regs used in _USBDeviceTasks: [allreg]
  8480  0E05  0021               	movlb	1	; select bank1
  8481  0E06  08EE               	movf	_USBDeviceState^(0+128),f
  8482  0E07  1D03               	skipz
  8483  0E08  2E19               	goto	l6157
  8484                           
  8485                           ;usb_device.c: 758: {
  8486                           ;usb_device.c: 760: UCON = 0;
  8487  0E09  003D               	movlb	29	; select bank29
  8488  0E0A  018E               	clrf	14	;volatile
  8489                           
  8490                           ;usb_device.c: 763: UIE = 0;
  8491  0E0B  0192               	clrf	18	;volatile
  8492                           
  8493                           ;usb_device.c: 767: { UCFG = 0x10 | 0x00 | 0x04 | 0x02; UEIE = 0x9F; UIE = 0x39 | 0x40 |
      +                           0x02; };
  8494  0E0C  3016               	movlw	22
  8495  0E0D  0091               	movwf	17	;volatile
  8496  0E0E  309F               	movlw	159
  8497  0E0F  0097               	movwf	23	;volatile
  8498  0E10  307B               	movlw	123
  8499  0E11  0092               	movwf	18	;volatile
  8500  0E12                     l140:	
  8501                           ;usb_device.c: 770: while(!UCONbits.USBEN){UCONbits.USBEN = 1;}
  8502                           
  8503  0E12  198E               	btfsc	14,3	;volatile
  8504  0E13  2E16               	goto	l142
  8505  0E14  158E               	bsf	14,3	;volatile
  8506  0E15  2E12               	goto	l140
  8507  0E16                     l142:	
  8508                           
  8509                           ;usb_device.c: 773: USBDeviceState = ATTACHED_STATE;
  8510  0E16  0021               	movlb	1	; select bank1
  8511  0E17  01EE               	clrf	_USBDeviceState^(0+128)
  8512  0E18  0AEE               	incf	_USBDeviceState^(0+128),f
  8513  0E19                     l6157:	
  8514                           
  8515                           ;usb_device.c: 778: }
  8516                           ;usb_device.c: 781: if(USBDeviceState == ATTACHED_STATE)
  8517  0E19  086E               	movf	_USBDeviceState^(0+128),w
  8518  0E1A  3A01               	xorlw	1
  8519  0E1B  1D03               	skipz
  8520  0E1C  2E29               	goto	l6169
  8521                           
  8522                           ;usb_device.c: 782: {
  8523                           ;usb_device.c: 792: if(!UCONbits.SE0)
  8524  0E1D  003D               	movlb	29	; select bank29
  8525  0E1E  1A8E               	btfsc	14,5	;volatile
  8526  0E1F  2E29               	goto	l6169
  8527                           
  8528                           ;usb_device.c: 793: {
  8529                           ;usb_device.c: 794: UIR = 0;;
  8530  0E20  0190               	clrf	16	;volatile
  8531                           
  8532                           ;usb_device.c: 796: UIE=0;
  8533  0E21  0192               	clrf	18	;volatile
  8534                           
  8535                           ;usb_device.c: 798: UIEbits.URSTIE = 1;
  8536  0E22  1412               	bsf	18,0	;volatile
  8537                           
  8538                           ;usb_device.c: 799: UIEbits.IDLEIE = 1;
  8539  0E23  1612               	bsf	18,4	;volatile
  8540                           
  8541                           ;usb_device.c: 800: USBDeviceState = POWERED_STATE;
  8542  0E24  3002               	movlw	2
  8543  0E25  0021               	movlb	1	; select bank1
  8544  0E26  00B2               	movwf	??_USBDeviceTasks^(0+128)
  8545  0E27  0832               	movf	??_USBDeviceTasks^(0+128),w
  8546  0E28  00EE               	movwf	_USBDeviceState^(0+128)
  8547  0E29                     l6169:	
  8548                           
  8549                           ;usb_device.c: 801: }
  8550                           ;usb_device.c: 802: }
  8551                           ;usb_device.c: 818: if(UIRbits.ACTVIF && UIEbits.ACTVIE)
  8552  0E29  003D               	movlb	29	; select bank29
  8553  0E2A  1910               	btfsc	16,2	;volatile
  8554  0E2B  1D12               	btfss	18,2	;volatile
  8555  0E2C  2E36               	goto	l6177
  8556                           
  8557                           ;usb_device.c: 819: {
  8558                           ;usb_device.c: 820: (UIR &= 0xFB);
  8559  0E2D  30FB               	movlw	251
  8560  0E2E  0021               	movlb	1	; select bank1
  8561  0E2F  00B2               	movwf	??_USBDeviceTasks^(0+128)
  8562  0E30  0832               	movf	??_USBDeviceTasks^(0+128),w
  8563  0E31  003D               	movlb	29	; select bank29
  8564  0E32  0590               	andwf	16,f	;volatile
  8565                           
  8566                           ;usb_device.c: 824: USBWakeFromSuspend();
  8567  0E33  319C  24FD  318E   	fcall	_USBWakeFromSuspend
  8568  0E36                     l6177:	
  8569                           
  8570                           ;usb_device.c: 826: }
  8571                           ;usb_device.c: 831: if(UCONbits.SUSPND==1)
  8572  0E36  003D               	movlb	29	; select bank29
  8573  0E37  1C8E               	btfss	14,1	;volatile
  8574  0E38  2E3C               	goto	l146
  8575                           
  8576                           ;usb_device.c: 832: {
  8577                           ;usb_device.c: 833: PIR2bits.USBIF = 0;;
  8578  0E39  0020               	movlb	0	; select bank0
  8579  0E3A  1112               	bcf	18,2	;volatile
  8580                           
  8581                           ;usb_device.c: 834: return;
  8582  0E3B  0008               	return
  8583  0E3C                     l146:	
  8584                           
  8585                           ;usb_device.c: 835: }
  8586                           ;usb_device.c: 847: if(UIRbits.URSTIF && UIEbits.URSTIE)
  8587  0E3C  1810               	btfsc	16,0	;volatile
  8588  0E3D  1C12               	btfss	18,0	;volatile
  8589  0E3E  2E4C               	goto	l6189
  8590                           
  8591                           ;usb_device.c: 848: {
  8592                           ;usb_device.c: 849: USBDeviceInit();
  8593  0E3F  3189  21E7  318E   	fcall	_USBDeviceInit
  8594                           
  8595                           ;usb_device.c: 853: ;
  8596                           ;usb_device.c: 855: USBDeviceState = DEFAULT_STATE;
  8597  0E42  3004               	movlw	4
  8598  0E43  0021               	movlb	1	; select bank1
  8599  0E44  00B2               	movwf	??_USBDeviceTasks^(0+128)
  8600  0E45  0832               	movf	??_USBDeviceTasks^(0+128),w
  8601  0E46  00EE               	movwf	_USBDeviceState^(0+128)
  8602                           
  8603                           ;usb_device.c: 865: (UIR &= 0xFE);
  8604  0E47  30FE               	movlw	254
  8605  0E48  00B2               	movwf	??_USBDeviceTasks^(0+128)
  8606  0E49  0832               	movf	??_USBDeviceTasks^(0+128),w
  8607  0E4A  003D               	movlb	29	; select bank29
  8608  0E4B  0590               	andwf	16,f	;volatile
  8609  0E4C                     l6189:	
  8610                           
  8611                           ;usb_device.c: 866: }
  8612                           ;usb_device.c: 871: if(UIRbits.IDLEIF && UIEbits.IDLEIE)
  8613  0E4C  1A10               	btfsc	16,4	;volatile
  8614  0E4D  1E12               	btfss	18,4	;volatile
  8615  0E4E  2E58               	goto	l6197
  8616                           
  8617                           ;usb_device.c: 872: {
  8618                           ;usb_device.c: 877: USBSuspend();
  8619  0E4F  319D  2534  318E   	fcall	_USBSuspend
  8620                           
  8621                           ;usb_device.c: 880: (UIR &= 0xEF);
  8622  0E52  30EF               	movlw	239
  8623  0E53  0021               	movlb	1	; select bank1
  8624  0E54  00B2               	movwf	??_USBDeviceTasks^(0+128)
  8625  0E55  0832               	movf	??_USBDeviceTasks^(0+128),w
  8626  0E56  003D               	movlb	29	; select bank29
  8627  0E57  0590               	andwf	16,f	;volatile
  8628  0E58                     l6197:	
  8629                           
  8630                           ;usb_device.c: 881: }
  8631                           ;usb_device.c: 883: if(UIRbits.SOFIF)
  8632  0E58  1F10               	btfss	16,6	;volatile
  8633  0E59  2E7E               	goto	l6213
  8634                           
  8635                           ;usb_device.c: 884: {
  8636                           ;usb_device.c: 885: if(UIEbits.SOFIE)
  8637  0E5A  1F12               	btfss	18,6	;volatile
  8638  0E5B  2E6C               	goto	l6203
  8639                           
  8640                           ;usb_device.c: 886: {
  8641                           ;usb_device.c: 887: USER_USB_CALLBACK_EVENT_HANDLER(EVENT_SOF,0,1);
  8642  0E5C  3073               	movlw	115
  8643  0E5D  0021               	movlb	1	; select bank1
  8644  0E5E  00A0               	movwf	?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)
  8645  0E5F  3000               	movlw	0
  8646  0E60  00A1               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)+1)
  8647  0E61  3000               	movlw	0
  8648  0E62  00A2               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER+2)^(0+128)
  8649  0E63  3000               	movlw	0
  8650  0E64  00A3               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER+3)^(0+128)
  8651  0E65  3001               	movlw	1
  8652  0E66  00A4               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)+4)
  8653  0E67  3000               	movlw	0
  8654  0E68  00A5               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)+5)
  8655  0E69  319E  26EB  318E   	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
  8656  0E6C                     l6203:	
  8657                           
  8658                           ;usb_device.c: 888: }
  8659                           ;usb_device.c: 889: (UIR &= 0xBF);
  8660  0E6C  30BF               	movlw	191
  8661  0E6D  0021               	movlb	1	; select bank1
  8662  0E6E  00B2               	movwf	??_USBDeviceTasks^(0+128)
  8663  0E6F  0832               	movf	??_USBDeviceTasks^(0+128),w
  8664  0E70  003D               	movlb	29	; select bank29
  8665  0E71  0590               	andwf	16,f	;volatile
  8666                           
  8667                           ;usb_device.c: 914: if(USBStatusStageTimeoutCounter != 0u)
  8668  0E72  0022               	movlb	2	; select bank2
  8669  0E73  0844               	movf	_USBStatusStageTimeoutCounter^(0+256),w
  8670  0E74  1903               	btfsc	3,2
  8671  0E75  2E78               	goto	l6209
  8672                           
  8673                           ;usb_device.c: 915: {
  8674                           ;usb_device.c: 916: USBStatusStageTimeoutCounter--;
  8675  0E76  3001               	movlw	1
  8676  0E77  02C4               	subwf	_USBStatusStageTimeoutCounter^(0+256),f
  8677  0E78                     l6209:	
  8678                           
  8679                           ;usb_device.c: 917: }
  8680                           ;usb_device.c: 923: if(USBStatusStageTimeoutCounter == 0)
  8681  0E78  08C4               	movf	_USBStatusStageTimeoutCounter^(0+256),f
  8682  0E79  1D03               	skipz
  8683  0E7A  2E7E               	goto	l6213
  8684                           
  8685                           ;usb_device.c: 924: {
  8686                           ;usb_device.c: 925: USBCtrlEPAllowStatusStage();
  8687  0E7B  3193  2385  318E   	fcall	_USBCtrlEPAllowStatusStage
  8688  0E7E                     l6213:	
  8689                           
  8690                           ;usb_device.c: 926: }
  8691                           ;usb_device.c: 928: }
  8692                           ;usb_device.c: 930: if(UIRbits.STALLIF && UIEbits.STALLIE)
  8693  0E7E  003D               	movlb	29	; select bank29
  8694  0E7F  1A90               	btfsc	16,5	;volatile
  8695  0E80  1E92               	btfss	18,5	;volatile
  8696  0E81  2E85               	goto	l6219
  8697                           
  8698                           ;usb_device.c: 931: {
  8699                           ;usb_device.c: 932: USBStallHandler();
  8700  0E82  319D  25E7  318E   	fcall	_USBStallHandler
  8701  0E85                     l6219:	
  8702                           
  8703                           ;usb_device.c: 933: }
  8704                           ;usb_device.c: 935: if(UIRbits.UERRIF && UIEbits.UERRIE)
  8705  0E85  003D               	movlb	29	; select bank29
  8706  0E86  1890               	btfsc	16,1	;volatile
  8707  0E87  1C92               	btfss	18,1	;volatile
  8708  0E88  2E9B               	goto	l6227
  8709                           
  8710                           ;usb_device.c: 936: {
  8711                           ;usb_device.c: 937: USER_USB_CALLBACK_EVENT_HANDLER(EVENT_BUS_ERROR,0,1);
  8712  0E89  30FF               	movlw	255
  8713  0E8A  0021               	movlb	1	; select bank1
  8714  0E8B  00A0               	movwf	?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)
  8715  0E8C  307F               	movlw	127
  8716  0E8D  00A1               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)+1)
  8717  0E8E  3000               	movlw	0
  8718  0E8F  00A2               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER+2)^(0+128)
  8719  0E90  3000               	movlw	0
  8720  0E91  00A3               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER+3)^(0+128)
  8721  0E92  3001               	movlw	1
  8722  0E93  00A4               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)+4)
  8723  0E94  3000               	movlw	0
  8724  0E95  00A5               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)+5)
  8725  0E96  319E  26EB  318E   	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
  8726                           
  8727                           ;usb_device.c: 938: UEIR = 0;;
  8728  0E99  003D               	movlb	29	; select bank29
  8729  0E9A  0193               	clrf	19	;volatile
  8730  0E9B                     l6227:	
  8731                           
  8732                           ;usb_device.c: 946: }
  8733                           ;usb_device.c: 953: if(USBDeviceState < DEFAULT_STATE)
  8734  0E9B  3004               	movlw	4
  8735  0E9C  0021               	movlb	1	; select bank1
  8736  0E9D  026E               	subwf	_USBDeviceState^(0+128),w
  8737  0E9E  1803               	skipnc
  8738  0E9F  2EA3               	goto	l155
  8739                           
  8740                           ;usb_device.c: 954: {
  8741                           ;usb_device.c: 955: PIR2bits.USBIF = 0;;
  8742  0EA0  0020               	movlb	0	; select bank0
  8743  0EA1  1112               	bcf	18,2	;volatile
  8744                           
  8745                           ;usb_device.c: 956: return;
  8746  0EA2  0008               	return
  8747  0EA3                     l155:	
  8748                           
  8749                           ;usb_device.c: 957: }
  8750                           ;usb_device.c: 962: if(UIEbits.TRNIE)
  8751  0EA3  003D               	movlb	29	; select bank29
  8752  0EA4  1D92               	btfss	18,3	;volatile
  8753  0EA5  2EF9               	goto	l156
  8754                           
  8755                           ;usb_device.c: 963: {
  8756                           ;usb_device.c: 964: for(i = 0; i < 4u; i++)
  8757  0EA6  0021               	movlb	1	; select bank1
  8758  0EA7  01B4               	clrf	USBDeviceTasks@i^(0+128)
  8759  0EA8  2EF2               	goto	L9
  8760  0EA9                     l6237:	
  8761                           
  8762                           ;usb_device.c: 967: {
  8763                           ;usb_device.c: 969: USTATcopy.Val = USTAT;
  8764  0EA9  080F               	movf	15,w	;volatile
  8765  0EAA  0021               	movlb	1	; select bank1
  8766  0EAB  00B2               	movwf	??_USBDeviceTasks^(0+128)
  8767  0EAC  0832               	movf	??_USBDeviceTasks^(0+128),w
  8768  0EAD  00EF               	movwf	_USTATcopy^(0+128)
  8769                           
  8770                           ;usb_device.c: 970: endpoint_number = USTATcopy.endpoint_number;
  8771  0EAE  0C6F               	rrf	_USTATcopy^(0+128),w
  8772  0EAF  00B2               	movwf	??_USBDeviceTasks^(0+128)
  8773  0EB0  0CB2               	rrf	??_USBDeviceTasks^(0+128),f
  8774  0EB1  0C32               	rrf	??_USBDeviceTasks^(0+128),w
  8775  0EB2  390F               	andlw	15
  8776  0EB3  00B3               	movwf	(??_USBDeviceTasks+1)^(0+128)
  8777  0EB4  0833               	movf	(??_USBDeviceTasks+1)^(0+128),w
  8778  0EB5  0022               	movlb	2	; select bank2
  8779  0EB6  00C7               	movwf	_endpoint_number^(0+256)
  8780                           
  8781                           ;usb_device.c: 972: (UIR &= 0xF7);
  8782  0EB7  30F7               	movlw	247
  8783  0EB8  0021               	movlb	1	; select bank1
  8784  0EB9  00B2               	movwf	??_USBDeviceTasks^(0+128)
  8785  0EBA  0832               	movf	??_USBDeviceTasks^(0+128),w
  8786  0EBB  003D               	movlb	29	; select bank29
  8787  0EBC  0590               	andwf	16,f	;volatile
  8788                           
  8789                           ;usb_device.c: 977: if(USTATcopy.direction == 0)
  8790  0EBD  0021               	movlb	1	; select bank1
  8791  0EBE  196F               	btfsc	_USTATcopy^(0+128),2
  8792  0EBF  2EC4               	goto	l6247
  8793                           
  8794                           ;usb_device.c: 978: {
  8795                           ;usb_device.c: 979: ep_data_out[endpoint_number].bits.ping_pong_state ^= 1;
  8796  0EC0  0022               	movlb	2	; select bank2
  8797  0EC1  0847               	movf	_endpoint_number^(0+256),w
  8798  0EC2  3E2C               	addlw	_ep_data_out& (0+255)
  8799  0EC3  2EC7               	goto	L8
  8800  0EC4                     l6247:	
  8801                           ;usb_device.c: 980: }
  8802                           
  8803                           
  8804                           ;usb_device.c: 981: else
  8805                           ;usb_device.c: 982: {
  8806                           ;usb_device.c: 983: ep_data_in[endpoint_number].bits.ping_pong_state ^= 1;
  8807  0EC4  0022               	movlb	2	; select bank2
  8808  0EC5  0847               	movf	_endpoint_number^(0+256),w
  8809  0EC6  3E2A               	addlw	_ep_data_in& (0+255)
  8810  0EC7                     L8:	
  8811  0EC7  0086               	movwf	6
  8812  0EC8  3001               	movlw	1	; select bank2/3
  8813  0EC9  0087               	movwf	7
  8814  0ECA  0801               	movf	1,w
  8815  0ECB  3901               	andlw	1
  8816  0ECC  0021               	movlb	1	; select bank1
  8817  0ECD  00B2               	movwf	??_USBDeviceTasks^(0+128)
  8818  0ECE  3001               	movlw	1
  8819  0ECF  06B2               	xorwf	??_USBDeviceTasks^(0+128),f
  8820  0ED0  0801               	movf	1,w
  8821  0ED1  0632               	xorwf	??_USBDeviceTasks^(0+128),w
  8822  0ED2  39FE               	andlw	-2
  8823  0ED3  0632               	xorwf	??_USBDeviceTasks^(0+128),w
  8824  0ED4  0081               	movwf	1
  8825                           
  8826                           ;usb_device.c: 984: }
  8827                           ;usb_device.c: 989: if(endpoint_number == 0)
  8828  0ED5  0022               	movlb	2	; select bank2
  8829  0ED6  08C7               	movf	_endpoint_number^(0+256),f
  8830  0ED7  1D03               	skipz
  8831  0ED8  2EDD               	goto	l6253
  8832                           
  8833                           ;usb_device.c: 990: {
  8834                           ;usb_device.c: 991: USBCtrlEPService();
  8835  0ED9  3194  24DB  318E   	fcall	_USBCtrlEPService
  8836                           
  8837                           ;usb_device.c: 992: }
  8838  0EDC  2EED               	goto	l6255
  8839  0EDD                     l6253:	
  8840                           
  8841                           ;usb_device.c: 993: else
  8842                           ;usb_device.c: 994: {
  8843                           ;usb_device.c: 995: USER_USB_CALLBACK_EVENT_HANDLER(EVENT_TRANSFER,(BYTE*)&USTATcopy.Val
      +                          ,0);
  8844  0EDD  3072               	movlw	114
  8845  0EDE  0021               	movlb	1	; select bank1
  8846  0EDF  00A0               	movwf	?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)
  8847  0EE0  3000               	movlw	0
  8848  0EE1  00A1               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)+1)
  8849  0EE2  30EF               	movlw	low _USTATcopy
  8850  0EE3  00A2               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER+2)^(0+128)
  8851  0EE4  3000               	movlw	high _USTATcopy
  8852  0EE5  00A3               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER+3)^(0+128)
  8853  0EE6  3000               	movlw	0
  8854  0EE7  00A4               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)+4)
  8855  0EE8  3000               	movlw	0
  8856  0EE9  00A5               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)+5)
  8857  0EEA  319E  26EB  318E   	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
  8858  0EED                     l6255:	
  8859                           ;usb_device.c: 998: else
  8860                           ;usb_device.c: 999: break;
  8861                           
  8862                           ;usb_device.c: 996: }
  8863                           ;usb_device.c: 997: }
  8864                           
  8865  0EED  3001               	movlw	1
  8866  0EEE  0021               	movlb	1	; select bank1
  8867  0EEF  00B2               	movwf	??_USBDeviceTasks^(0+128)
  8868  0EF0  0832               	movf	??_USBDeviceTasks^(0+128),w
  8869  0EF1  07B4               	addwf	USBDeviceTasks@i^(0+128),f
  8870  0EF2                     L9:	
  8871  0EF2  3004               	movlw	4
  8872  0EF3  0234               	subwf	USBDeviceTasks@i^(0+128),w
  8873  0EF4  1803               	btfsc	3,0
  8874  0EF5  2EF9               	goto	l156
  8875                           
  8876                           ;usb_device.c: 965: {
  8877                           ;usb_device.c: 966: if(UIRbits.TRNIF)
  8878  0EF6  003D               	movlb	29	; select bank29
  8879  0EF7  1990               	btfsc	16,3	;volatile
  8880  0EF8  2EA9               	goto	l6237
  8881  0EF9                     l156:	
  8882                           
  8883                           ;usb_device.c: 1000: }
  8884                           ;usb_device.c: 1001: }
  8885                           ;usb_device.c: 1003: PIR2bits.USBIF = 0;;
  8886  0EF9  0020               	movlb	0	; select bank0
  8887  0EFA  1112               	bcf	18,2	;volatile
  8888  0EFB  0008               	return
  8889  0EFC                     __end_of_USBDeviceTasks:	
  8890                           
  8891                           	psect	text30
  8892  14DB                     __ptext30:	
  8893 ;; *************** function _USBCtrlEPService *****************
  8894 ;; Defined at:
  8895 ;;		line 2523 in file "../USB/usb_device.c"
  8896 ;; Parameters:    Size  Location     Type
  8897 ;;		None
  8898 ;; Auto vars:     Size  Location     Type
  8899 ;;  setup_cnt       1   17[BANK1 ] unsigned char 
  8900 ;; Return value:  Size  Location     Type
  8901 ;;		None               void
  8902 ;; Registers used:
  8903 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  8904 ;; Tracked objects:
  8905 ;;		On entry : 0/0
  8906 ;;		On exit  : 0/0
  8907 ;;		Unchanged: 0/0
  8908 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8909 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8910 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  8911 ;;      Temps:          0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  8912 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  8913 ;;Total ram usage:        4 bytes
  8914 ;; Hardware stack levels used:    1
  8915 ;; Hardware stack levels required when called:   11
  8916 ;; This function calls:
  8917 ;;		_USBCtrlTrfSetupHandler
  8918 ;;		_USBCtrlTrfOutHandler
  8919 ;;		_USBCtrlTrfInHandler
  8920 ;; This function is called by:
  8921 ;;		_USBDeviceTasks
  8922 ;; This function uses a non-reentrant model
  8923 ;;
  8924                           
  8925                           
  8926                           ;psect for function _USBCtrlEPService
  8927  14DB                     _USBCtrlEPService:	
  8928                           
  8929                           ;usb_device.c: 2528: USBStatusStageTimeoutCounter = (BYTE)40;
  8930                           
  8931                           ;incstack = 0
  8932                           ; Regs used in _USBCtrlEPService: [allreg]
  8933  14DB  3028               	movlw	40
  8934  14DC  0021               	movlb	1	; select bank1
  8935  14DD  00AE               	movwf	??_USBCtrlEPService^(0+128)
  8936  14DE  082E               	movf	??_USBCtrlEPService^(0+128),w
  8937  14DF  0022               	movlb	2	; select bank2
  8938  14E0  00C4               	movwf	_USBStatusStageTimeoutCounter^(0+256)
  8939                           
  8940                           ;usb_device.c: 2532: if((USTATcopy.Val & ~0x02) == 0x00)
  8941  14E1  0021               	movlb	1	; select bank1
  8942  14E2  086F               	movf	_USTATcopy^(0+128),w
  8943  14E3  39FD               	andlw	253
  8944  14E4  1D03               	btfss	3,2
  8945  14E5  2D4C               	goto	l6337
  8946                           
  8947                           ;usb_device.c: 2533: {
  8948                           ;usb_device.c: 2536: pBDTEntryEP0OutCurrent = (volatile BDT_ENTRY*)&BDT[(USTATcopy.Val &
      +                           0x7E)>>1];
  8949  14E6  366F               	lsrf	_USTATcopy^(0+128),w
  8950  14E7  393F               	andlw	63
  8951  14E8  00AE               	movwf	??_USBCtrlEPService^(0+128)
  8952  14E9  3001               	movlw	1
  8953  14EA                     u6985:	
  8954  14EA  35AE               	lslf	??_USBCtrlEPService^(0+128),f
  8955  14EB  3EFF               	addlw	-1
  8956  14EC  1D03               	skipz
  8957  14ED  2CEA               	goto	u6985
  8958  14EE  352E               	lslf	??_USBCtrlEPService^(0+128),w
  8959  14EF  3E20               	addlw	32
  8960  14F0  00AF               	movwf	(??_USBCtrlEPService+1)^(0+128)
  8961  14F1  082F               	movf	(??_USBCtrlEPService+1)^(0+128),w
  8962  14F2  0020               	movlb	0	; select bank0
  8963  14F3  00ED               	movwf	_pBDTEntryEP0OutCurrent
  8964                           
  8965                           ;usb_device.c: 2544: pBDTEntryEP0OutNext = pBDTEntryEP0OutCurrent;
  8966  14F4  086D               	movf	_pBDTEntryEP0OutCurrent,w
  8967  14F5  0021               	movlb	1	; select bank1
  8968  14F6  00AE               	movwf	??_USBCtrlEPService^(0+128)
  8969  14F7  082E               	movf	??_USBCtrlEPService^(0+128),w
  8970  14F8  0020               	movlb	0	; select bank0
  8971  14F9  00EE               	movwf	_pBDTEntryEP0OutNext
  8972                           
  8973                           ;usb_device.c: 2546: ((BYTE_VAL*)&pBDTEntryEP0OutNext)->Val ^= 0x0004;
  8974  14FA  3004               	movlw	4
  8975  14FB  0021               	movlb	1	; select bank1
  8976  14FC  00AE               	movwf	??_USBCtrlEPService^(0+128)
  8977  14FD  082E               	movf	??_USBCtrlEPService^(0+128),w
  8978  14FE  0020               	movlb	0	; select bank0
  8979  14FF  06EE               	xorwf	_pBDTEntryEP0OutNext,f
  8980                           
  8981                           ;usb_device.c: 2549: if(pBDTEntryEP0OutCurrent->STAT.PID == 0xD)
  8982  1500  086D               	movf	_pBDTEntryEP0OutCurrent,w
  8983  1501  0086               	movwf	6
  8984  1502  0187               	clrf	7
  8985  1503  0C01               	rrf	1,w
  8986  1504  0C89               	rrf	9,f
  8987  1505  390F               	andlw	15
  8988  1506  3A0D               	xorlw	13
  8989  1507  1D03               	skipz
  8990  1508  2D49               	goto	l6335
  8991                           
  8992                           ;usb_device.c: 2550: {
  8993                           ;usb_device.c: 2551: unsigned char setup_cnt;
  8994                           ;usb_device.c: 2557: for(setup_cnt = 0; setup_cnt < 8u; setup_cnt++)
  8995  1509  0021               	movlb	1	; select bank1
  8996  150A  01B1               	clrf	USBCtrlEPService@setup_cnt^(0+128)
  8997  150B  3008               	movlw	8
  8998  150C  0231               	subwf	USBCtrlEPService@setup_cnt^(0+128),w
  8999  150D  1803               	btfsc	3,0
  9000  150E  2D38               	goto	l6331
  9001  150F                     l6325:	
  9002                           
  9003                           ;usb_device.c: 2558: {
  9004                           ;usb_device.c: 2559: *(BYTE*)((BYTE*)&SetupPkt + setup_cnt) = *(BYTE*)((void *)(pBDTEntr
      +                          yEP0OutCurrent->ADR));
  9005  150F  0020               	movlb	0	; select bank0
  9006  1510  086D               	movf	_pBDTEntryEP0OutCurrent,w
  9007  1511  3E02               	addlw	2
  9008  1512  0086               	movwf	6
  9009  1513  0187               	clrf	7
  9010  1514  3F40               	moviw [0]fsr1
  9011  1515  0021               	movlb	1	; select bank1
  9012  1516  00AE               	movwf	??_USBCtrlEPService^(0+128)
  9013  1517  3F41               	moviw [1]fsr1
  9014  1518  00AF               	movwf	(??_USBCtrlEPService^(0+128)+1)
  9015  1519  082E               	movf	??_USBCtrlEPService^(0+128),w
  9016  151A  0086               	movwf	6
  9017  151B  082F               	movf	(??_USBCtrlEPService+1)^(0+128),w
  9018  151C  0087               	movwf	7
  9019  151D  0801               	movf	1,w
  9020  151E  00B0               	movwf	(??_USBCtrlEPService+2)^(0+128)
  9021  151F  0831               	movf	USBCtrlEPService@setup_cnt^(0+128),w
  9022  1520  3E40               	addlw	64
  9023  1521  0086               	movwf	6
  9024  1522  0187               	clrf	7
  9025  1523  0830               	movf	(??_USBCtrlEPService+2)^(0+128),w
  9026  1524  0081               	movwf	1
  9027                           
  9028                           ;usb_device.c: 2560: pBDTEntryEP0OutCurrent->ADR++;
  9029  1525  0020               	movlb	0	; select bank0
  9030  1526  086D               	movf	_pBDTEntryEP0OutCurrent,w
  9031  1527  3E02               	addlw	2
  9032  1528  0086               	movwf	6
  9033  1529  0187               	clrf	7
  9034  152A  3001               	movlw	1
  9035  152B  0781               	addwf	1,f
  9036  152C  3141               	addfsr 1,1
  9037  152D  1803               	skipnc
  9038  152E  0A81               	incf	1,f
  9039  152F  3001               	movlw	1
  9040  1530  0021               	movlb	1	; select bank1
  9041  1531  00AE               	movwf	??_USBCtrlEPService^(0+128)
  9042  1532  082E               	movf	??_USBCtrlEPService^(0+128),w
  9043  1533  07B1               	addwf	USBCtrlEPService@setup_cnt^(0+128),f
  9044  1534  3008               	movlw	8
  9045  1535  0231               	subwf	USBCtrlEPService@setup_cnt^(0+128),w
  9046  1536  1C03               	skipc
  9047  1537  2D0F               	goto	l6325
  9048  1538                     l6331:	
  9049                           
  9050                           ;usb_device.c: 2561: }
  9051                           ;usb_device.c: 2562: pBDTEntryEP0OutCurrent->ADR = (((WORD)(&SetupPkt))& 0x7FFF);
  9052  1538  3040               	movlw	64
  9053  1539  00AE               	movwf	??_USBCtrlEPService^(0+128)
  9054  153A  3000               	movlw	0
  9055  153B  00AF               	movwf	(??_USBCtrlEPService^(0+128)+1)
  9056  153C  0020               	movlb	0	; select bank0
  9057  153D  086D               	movf	_pBDTEntryEP0OutCurrent,w
  9058  153E  3E02               	addlw	2
  9059  153F  0086               	movwf	6
  9060  1540  0187               	clrf	7
  9061  1541  0021               	movlb	1	; select bank1
  9062  1542  082E               	movf	??_USBCtrlEPService^(0+128),w
  9063  1543  3FC0               	movwi [0]fsr1
  9064  1544  082F               	movf	(??_USBCtrlEPService+1)^(0+128),w
  9065  1545  3FC1               	movwi [1]fsr1
  9066                           
  9067                           ;usb_device.c: 2565: USBCtrlTrfSetupHandler();
  9068  1546  3190  2002         	fcall	_USBCtrlTrfSetupHandler
  9069                           
  9070                           ;usb_device.c: 2566: }
  9071  1548  0008               	return
  9072  1549                     l6335:	
  9073                           
  9074                           ;usb_device.c: 2567: else
  9075                           ;usb_device.c: 2568: {
  9076                           ;usb_device.c: 2570: USBCtrlTrfOutHandler();
  9077  1549  319E  2650         	fcall	_USBCtrlTrfOutHandler
  9078                           
  9079                           ;usb_device.c: 2571: }
  9080                           ;usb_device.c: 2572: }
  9081  154B  0008               	return
  9082  154C                     l6337:	
  9083                           
  9084                           ;usb_device.c: 2573: else if((USTATcopy.Val & ~0x02) == 0x04)
  9085  154C  30FD               	movlw	253
  9086  154D  0021               	movlb	1	; select bank1
  9087  154E  056F               	andwf	_USTATcopy^(0+128),w
  9088  154F  00AE               	movwf	??_USBCtrlEPService^(0+128)
  9089  1550  082E               	movf	??_USBCtrlEPService^(0+128),w
  9090  1551  3A04               	xorlw	4
  9091  1552  1D03               	skipz
  9092  1553  0008               	return
  9093                           
  9094                           ;usb_device.c: 2574: {
  9095                           ;usb_device.c: 2577: USBCtrlTrfInHandler();
  9096  1554  3192  22BF         	fcall	_USBCtrlTrfInHandler
  9097  1556  0008               	return
  9098  1557                     __end_of_USBCtrlEPService:	
  9099                           
  9100                           	psect	text31
  9101  12BF                     __ptext31:	
  9102 ;; *************** function _USBCtrlTrfInHandler *****************
  9103 ;; Defined at:
  9104 ;;		line 2748 in file "../USB/usb_device.c"
  9105 ;; Parameters:    Size  Location     Type
  9106 ;;		None
  9107 ;; Auto vars:     Size  Location     Type
  9108 ;;  lastDTS         1   13[BANK0 ] unsigned char 
  9109 ;; Return value:  Size  Location     Type
  9110 ;;		None               void
  9111 ;; Registers used:
  9112 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9113 ;; Tracked objects:
  9114 ;;		On entry : 0/0
  9115 ;;		On exit  : 0/0
  9116 ;;		Unchanged: 0/0
  9117 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9118 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9119 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9120 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9121 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9122 ;;Total ram usage:        3 bytes
  9123 ;; Hardware stack levels used:    1
  9124 ;; Hardware stack levels required when called:    5
  9125 ;; This function calls:
  9126 ;;		_USBCtrlTrfTxService
  9127 ;; This function is called by:
  9128 ;;		_USBCtrlEPService
  9129 ;; This function uses a non-reentrant model
  9130 ;;
  9131                           
  9132                           
  9133                           ;psect for function _USBCtrlTrfInHandler
  9134  12BF                     _USBCtrlTrfInHandler:	
  9135                           
  9136                           ;usb_device.c: 2749: BYTE lastDTS;
  9137                           ;usb_device.c: 2751: lastDTS = pBDTEntryIn[0]->STAT.DTS;
  9138                           
  9139                           ;incstack = 0
  9140                           ; Regs used in _USBCtrlTrfInHandler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9141  12BF  0020               	movlb	0	; select bank0
  9142  12C0  0868               	movf	_pBDTEntryIn,w
  9143  12C1  0086               	movwf	6
  9144  12C2  0187               	clrf	7
  9145  12C3  3000               	movlw	0
  9146  12C4  1B01               	btfsc	1,6
  9147  12C5  3001               	movlw	1
  9148  12C6  00DD               	movwf	USBCtrlTrfInHandler@lastDTS
  9149                           
  9150                           ;usb_device.c: 2754: ((BYTE_VAL*)&pBDTEntryIn[0])->Val ^= 0x0004;
  9151  12C7  3004               	movlw	4
  9152  12C8  00DB               	movwf	??_USBCtrlTrfInHandler
  9153  12C9  085B               	movf	??_USBCtrlTrfInHandler,w
  9154  12CA  06E8               	xorwf	_pBDTEntryIn,f
  9155                           
  9156                           ;usb_device.c: 2759: if(USBDeviceState == ADR_PENDING_STATE)
  9157  12CB  0021               	movlb	1	; select bank1
  9158  12CC  086E               	movf	_USBDeviceState^(0+128),w
  9159  12CD  3A08               	xorlw	8
  9160  12CE  1D03               	skipz
  9161  12CF  2ADF               	goto	l315
  9162                           
  9163                           ;usb_device.c: 2760: {
  9164                           ;usb_device.c: 2761: UADDR = SetupPkt.bDevADR.Val;
  9165  12D0  0020               	movlb	0	; select bank0
  9166  12D1  0842               	movf	66,w	;volatile
  9167  12D2  003D               	movlb	29	; select bank29
  9168  12D3  0096               	movwf	22	;volatile
  9169                           
  9170                           ;usb_device.c: 2762: if(UADDR != 0u)
  9171  12D4  0816               	movf	22,w	;volatile
  9172  12D5  1903               	btfsc	3,2
  9173  12D6  2AD9               	goto	l4757
  9174                           
  9175                           ;usb_device.c: 2763: {
  9176                           ;usb_device.c: 2764: USBDeviceState=ADDRESS_STATE;
  9177  12D7  3010               	movlw	16
  9178  12D8  2ADA               	goto	L10
  9179  12D9                     l4757:	
  9180                           ;usb_device.c: 2765: }
  9181                           
  9182                           
  9183                           ;usb_device.c: 2766: else
  9184                           ;usb_device.c: 2767: {
  9185                           ;usb_device.c: 2768: USBDeviceState=DEFAULT_STATE;
  9186  12D9  3004               	movlw	4
  9187  12DA                     L10:	
  9188  12DA  0020               	movlb	0	; select bank0
  9189  12DB  00DB               	movwf	??_USBCtrlTrfInHandler
  9190  12DC  085B               	movf	??_USBCtrlTrfInHandler,w
  9191  12DD  0021               	movlb	1	; select bank1
  9192  12DE  00EE               	movwf	_USBDeviceState^(0+128)
  9193  12DF                     l315:	
  9194                           
  9195                           ;usb_device.c: 2769: }
  9196                           ;usb_device.c: 2770: }
  9197                           ;usb_device.c: 2773: if(controlTransferState == 1)
  9198  12DF  0020               	movlb	0	; select bank0
  9199  12E0  086C               	movf	_controlTransferState,w
  9200  12E1  3A01               	xorlw	1
  9201  12E2  1D03               	skipz
  9202  12E3  2B15               	goto	l318
  9203                           
  9204                           ;usb_device.c: 2774: {
  9205                           ;usb_device.c: 2775: pBDTEntryIn[0]->ADR = (((WORD)(CtrlTrfData))& 0x7FFF);
  9206  12E4  3048               	movlw	72
  9207  12E5  00DB               	movwf	??_USBCtrlTrfInHandler
  9208  12E6  3000               	movlw	0
  9209  12E7  00DC               	movwf	??_USBCtrlTrfInHandler+1
  9210  12E8  0868               	movf	_pBDTEntryIn,w
  9211  12E9  3E02               	addlw	2
  9212  12EA  0086               	movwf	6
  9213  12EB  0187               	clrf	7
  9214  12EC  085B               	movf	??_USBCtrlTrfInHandler,w
  9215  12ED  3FC0               	movwi [0]fsr1
  9216  12EE  085C               	movf	??_USBCtrlTrfInHandler+1,w
  9217  12EF  3FC1               	movwi [1]fsr1
  9218                           
  9219                           ;usb_device.c: 2776: USBCtrlTrfTxService();
  9220  12F0  3196  26E3  3192   	fcall	_USBCtrlTrfTxService
  9221                           
  9222                           ;usb_device.c: 2782: if(shortPacketStatus == 2)
  9223  12F3  0022               	movlb	2	; select bank2
  9224  12F4  084C               	movf	_shortPacketStatus^(0+256),w
  9225  12F5  3A02               	xorlw	2
  9226  12F6  1D03               	skipz
  9227  12F7  2B01               	goto	l4767
  9228                           
  9229                           ;usb_device.c: 2783: {
  9230                           ;usb_device.c: 2786: pBDTEntryIn[0]->STAT.Val = 0x80|0x04;
  9231  12F8  3084               	movlw	132
  9232  12F9  0020               	movlb	0	; select bank0
  9233  12FA  00DB               	movwf	??_USBCtrlTrfInHandler
  9234  12FB  0868               	movf	_pBDTEntryIn,w
  9235  12FC  0086               	movwf	6
  9236  12FD  0187               	clrf	7
  9237  12FE  085B               	movf	??_USBCtrlTrfInHandler,w
  9238  12FF  0081               	movwf	1
  9239                           
  9240                           ;usb_device.c: 2787: }
  9241  1300  0008               	return
  9242  1301                     l4767:	
  9243                           
  9244                           ;usb_device.c: 2788: else
  9245                           ;usb_device.c: 2789: {
  9246                           ;usb_device.c: 2790: if(lastDTS == 0)
  9247  1301  0020               	movlb	0	; select bank0
  9248  1302  08DD               	movf	USBCtrlTrfInHandler@lastDTS,f
  9249  1303  1D03               	skipz
  9250  1304  2B0D               	goto	l4771
  9251                           
  9252                           ;usb_device.c: 2791: {
  9253                           ;usb_device.c: 2792: pBDTEntryIn[0]->STAT.Val = 0x80|0x40|(0x08 & 0x08);
  9254  1305  30C8               	movlw	200
  9255  1306  00DB               	movwf	??_USBCtrlTrfInHandler
  9256  1307  0868               	movf	_pBDTEntryIn,w
  9257  1308  0086               	movwf	6
  9258  1309  0187               	clrf	7
  9259  130A  085B               	movf	??_USBCtrlTrfInHandler,w
  9260  130B  0081               	movwf	1
  9261                           
  9262                           ;usb_device.c: 2793: }
  9263  130C  0008               	return
  9264  130D                     l4771:	
  9265                           
  9266                           ;usb_device.c: 2794: else
  9267                           ;usb_device.c: 2795: {
  9268                           ;usb_device.c: 2796: pBDTEntryIn[0]->STAT.Val = 0x80|0x00|(0x08 & 0x08);
  9269  130D  3088               	movlw	136
  9270  130E  00DB               	movwf	??_USBCtrlTrfInHandler
  9271  130F  0868               	movf	_pBDTEntryIn,w
  9272  1310  0086               	movwf	6
  9273  1311  0187               	clrf	7
  9274  1312  085B               	movf	??_USBCtrlTrfInHandler,w
  9275  1313  0081               	movwf	1
  9276                           
  9277                           ;usb_device.c: 2797: }
  9278                           ;usb_device.c: 2798: }
  9279                           ;usb_device.c: 2799: }
  9280  1314  0008               	return
  9281  1315                     l318:	
  9282                           
  9283                           ;usb_device.c: 2800: else
  9284                           ;usb_device.c: 2801: {
  9285                           ;usb_device.c: 2805: if(outPipes[0].info.bits.busy == 1)
  9286  1315  0022               	movlb	2	; select bank2
  9287  1316  1FA2               	btfss	(_outPipes^(0+256)+2),7
  9288  1317  2B1F               	goto	l4779
  9289                           
  9290                           ;usb_device.c: 2806: {
  9291                           ;usb_device.c: 2807: if(outPipes[0].pFunc != (0))
  9292  1318  0825               	movf	(_outPipes+5)^(0+256),w
  9293  1319  1903               	btfsc	3,2
  9294  131A  2B1E               	goto	l4777
  9295                           
  9296                           ;usb_device.c: 2808: {
  9297                           ;usb_device.c: 2809: outPipes[0].pFunc();
  9298  131B  0825               	movf	(_outPipes+5)^(0+256),w
  9299  131C  3192  2ABF         	ljmp	$	;if you get stuck here, you called an invalid pointer
  9300  131E                     l4777:	
  9301                           
  9302                           ;usb_device.c: 2810: }
  9303                           ;usb_device.c: 2811: outPipes[0].info.bits.busy = 0;
  9304  131E  13A2               	bcf	(_outPipes^(0+256)+2),7
  9305  131F                     l4779:	
  9306                           
  9307                           ;usb_device.c: 2812: }
  9308                           ;usb_device.c: 2814: controlTransferState = 0;
  9309  131F  0020               	movlb	0	; select bank0
  9310  1320  01EC               	clrf	_controlTransferState
  9311  1321  0008               	return
  9312  1322                     __end_of_USBCtrlTrfInHandler:	
  9313                           
  9314                           	psect	text32
  9315  1E50                     __ptext32:	
  9316 ;; *************** function _USBCtrlTrfOutHandler *****************
  9317 ;; Defined at:
  9318 ;;		line 2695 in file "../USB/usb_device.c"
  9319 ;; Parameters:    Size  Location     Type
  9320 ;;		None
  9321 ;; Auto vars:     Size  Location     Type
  9322 ;;		None
  9323 ;; Return value:  Size  Location     Type
  9324 ;;		None               void
  9325 ;; Registers used:
  9326 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9327 ;; Tracked objects:
  9328 ;;		On entry : 0/0
  9329 ;;		On exit  : 0/0
  9330 ;;		Unchanged: 0/0
  9331 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9332 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9333 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9334 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9335 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9336 ;;Total ram usage:        2 bytes
  9337 ;; Hardware stack levels used:    1
  9338 ;; Hardware stack levels required when called:    6
  9339 ;; This function calls:
  9340 ;;		_USBCtrlTrfRxService
  9341 ;; This function is called by:
  9342 ;;		_USBCtrlEPService
  9343 ;; This function uses a non-reentrant model
  9344 ;;
  9345                           
  9346                           
  9347                           ;psect for function _USBCtrlTrfOutHandler
  9348  1E50                     _USBCtrlTrfOutHandler:	
  9349                           
  9350                           ;usb_device.c: 2696: if(controlTransferState == 2)
  9351                           
  9352                           ;incstack = 0
  9353                           ; Regs used in _USBCtrlTrfOutHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9354  1E50  0020               	movlb	0	; select bank0
  9355  1E51  086C               	movf	_controlTransferState,w
  9356  1E52  3A02               	xorlw	2
  9357  1E53  1D03               	skipz
  9358  1E54  2E58               	goto	l4739
  9359                           
  9360                           ;usb_device.c: 2697: {
  9361                           ;usb_device.c: 2698: USBCtrlTrfRxService();
  9362  1E55  318A  228F         	fcall	_USBCtrlTrfRxService
  9363                           
  9364                           ;usb_device.c: 2699: }
  9365  1E57  0008               	return
  9366  1E58                     l4739:	
  9367                           
  9368                           ;usb_device.c: 2700: else
  9369                           ;usb_device.c: 2701: {
  9370                           ;usb_device.c: 2704: controlTransferState = 0;
  9371  1E58  0020               	movlb	0	; select bank0
  9372  1E59  01EC               	clrf	_controlTransferState
  9373                           
  9374                           ;usb_device.c: 2711: if(BothEP0OutUOWNsSet == FALSE)
  9375  1E5A  0022               	movlb	2	; select bank2
  9376  1E5B  08B2               	movf	_BothEP0OutUOWNsSet^(0+256),f
  9377  1E5C  1D03               	skipz
  9378  1E5D  2E7A               	goto	l4745
  9379                           
  9380                           ;usb_device.c: 2712: {
  9381                           ;usb_device.c: 2713: pBDTEntryEP0OutNext->CNT = 8;
  9382  1E5E  3008               	movlw	8
  9383  1E5F  0020               	movlb	0	; select bank0
  9384  1E60  00DE               	movwf	??_USBCtrlTrfOutHandler
  9385  1E61  0A6E               	incf	_pBDTEntryEP0OutNext,w
  9386  1E62  0086               	movwf	6
  9387  1E63  0187               	clrf	7
  9388  1E64  085E               	movf	??_USBCtrlTrfOutHandler,w
  9389  1E65  0081               	movwf	1
  9390                           
  9391                           ;usb_device.c: 2714: pBDTEntryEP0OutNext->ADR = (((WORD)(&SetupPkt))& 0x7FFF);
  9392  1E66  3040               	movlw	64
  9393  1E67  00DE               	movwf	??_USBCtrlTrfOutHandler
  9394  1E68  3000               	movlw	0
  9395  1E69  00DF               	movwf	??_USBCtrlTrfOutHandler+1
  9396  1E6A  086E               	movf	_pBDTEntryEP0OutNext,w
  9397  1E6B  3E02               	addlw	2
  9398  1E6C  0086               	movwf	6
  9399  1E6D  0187               	clrf	7
  9400  1E6E  085E               	movf	??_USBCtrlTrfOutHandler,w
  9401  1E6F  3FC0               	movwi [0]fsr1
  9402  1E70  085F               	movf	??_USBCtrlTrfOutHandler+1,w
  9403  1E71  3FC1               	movwi [1]fsr1
  9404                           
  9405                           ;usb_device.c: 2715: pBDTEntryEP0OutNext->STAT.Val = 0x80|0x00|(0x08 & 0x08)|0x04;
  9406  1E72  308C               	movlw	140
  9407  1E73  00DE               	movwf	??_USBCtrlTrfOutHandler
  9408  1E74  086E               	movf	_pBDTEntryEP0OutNext,w
  9409  1E75  0086               	movwf	6
  9410  1E76  0187               	clrf	7
  9411  1E77  085E               	movf	??_USBCtrlTrfOutHandler,w
  9412  1E78  0081               	movwf	1
  9413                           
  9414                           ;usb_device.c: 2716: }
  9415  1E79  0008               	return
  9416  1E7A                     l4745:	
  9417                           
  9418                           ;usb_device.c: 2717: else
  9419                           ;usb_device.c: 2718: {
  9420                           ;usb_device.c: 2719: BothEP0OutUOWNsSet = FALSE;
  9421  1E7A  0022               	movlb	2	; select bank2
  9422  1E7B  01B2               	clrf	_BothEP0OutUOWNsSet^(0+256)
  9423  1E7C  0008               	return
  9424  1E7D                     __end_of_USBCtrlTrfOutHandler:	
  9425                           
  9426                           	psect	text33
  9427  0A8F                     __ptext33:	
  9428 ;; *************** function _USBCtrlTrfRxService *****************
  9429 ;; Defined at:
  9430 ;;		line 2019 in file "../USB/usb_device.c"
  9431 ;; Parameters:    Size  Location     Type
  9432 ;;		None
  9433 ;; Auto vars:     Size  Location     Type
  9434 ;;  byteToRead      1   13[BANK0 ] unsigned char 
  9435 ;;  i               1   12[BANK0 ] unsigned char 
  9436 ;; Return value:  Size  Location     Type
  9437 ;;		None               void
  9438 ;; Registers used:
  9439 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9440 ;; Tracked objects:
  9441 ;;		On entry : 0/0
  9442 ;;		On exit  : 0/0
  9443 ;;		Unchanged: 0/0
  9444 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9445 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9446 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9447 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9448 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9449 ;;Total ram usage:        4 bytes
  9450 ;; Hardware stack levels used:    1
  9451 ;; Hardware stack levels required when called:    5
  9452 ;; This function calls:
  9453 ;;		_USBCtrlEPAllowStatusStage
  9454 ;; This function is called by:
  9455 ;;		_USBCtrlTrfOutHandler
  9456 ;; This function uses a non-reentrant model
  9457 ;;
  9458                           
  9459                           
  9460                           ;psect for function _USBCtrlTrfRxService
  9461  0A8F                     _USBCtrlTrfRxService:	
  9462                           
  9463                           ;usb_device.c: 2020: BYTE byteToRead;
  9464                           ;usb_device.c: 2021: BYTE i;
  9465                           ;usb_device.c: 2025: byteToRead = pBDTEntryEP0OutCurrent->CNT;
  9466                           
  9467                           ;incstack = 0
  9468                           ; Regs used in _USBCtrlTrfRxService: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9469  0A8F  0020               	movlb	0	; select bank0
  9470  0A90  086D               	movf	_pBDTEntryEP0OutCurrent,w
  9471  0A91  0086               	movwf	6
  9472  0A92  0187               	clrf	7
  9473  0A93  3F41               	moviw [1]fsr1
  9474  0A94  00DD               	movwf	USBCtrlTrfRxService@byteToRead
  9475                           
  9476                           ;usb_device.c: 2031: if(byteToRead > outPipes[0].wCount.Val)
  9477  0A95  085D               	movf	USBCtrlTrfRxService@byteToRead,w
  9478  0A96  00DA               	movwf	??_USBCtrlTrfRxService
  9479  0A97  01DB               	clrf	??_USBCtrlTrfRxService+1
  9480  0A98  085B               	movf	??_USBCtrlTrfRxService+1,w
  9481  0A99  0022               	movlb	2	; select bank2
  9482  0A9A  0224               	subwf	((_outPipes+1)^(0+256)+3),w
  9483  0A9B  1D03               	skipz
  9484  0A9C  2AA1               	goto	u4195
  9485  0A9D  0020               	movlb	0	; select bank0
  9486  0A9E  085A               	movf	??_USBCtrlTrfRxService,w
  9487  0A9F  0022               	movlb	2	; select bank2
  9488  0AA0  0223               	subwf	(_outPipes^(0+256)+3),w
  9489  0AA1                     u4195:	
  9490  0AA1  1803               	skipnc
  9491  0AA2  2AA8               	goto	l4563
  9492                           
  9493                           ;usb_device.c: 2032: {
  9494                           ;usb_device.c: 2033: byteToRead = outPipes[0].wCount.Val;
  9495  0AA3  0823               	movf	(_outPipes^(0+256)+3),w
  9496  0AA4  0020               	movlb	0	; select bank0
  9497  0AA5  00DA               	movwf	??_USBCtrlTrfRxService
  9498  0AA6  085A               	movf	??_USBCtrlTrfRxService,w
  9499  0AA7  00DD               	movwf	USBCtrlTrfRxService@byteToRead
  9500  0AA8                     l4563:	
  9501                           
  9502                           ;usb_device.c: 2034: }
  9503                           ;usb_device.c: 2036: outPipes[0].wCount.Val = outPipes[0].wCount.Val - byteToRead;
  9504  0AA8  3003               	movlw	3
  9505  0AA9  3E20               	addlw	_outPipes& (0+255)
  9506  0AAA  0086               	movwf	6
  9507  0AAB  3001               	movlw	1	; select bank2/3
  9508  0AAC  0087               	movwf	7
  9509  0AAD  0020               	movlb	0	; select bank0
  9510  0AAE  085D               	movf	USBCtrlTrfRxService@byteToRead,w
  9511  0AAF  00DA               	movwf	??_USBCtrlTrfRxService
  9512  0AB0  01DB               	clrf	??_USBCtrlTrfRxService+1
  9513  0AB1  09DA               	comf	??_USBCtrlTrfRxService,f
  9514  0AB2  09DB               	comf	??_USBCtrlTrfRxService+1,f
  9515  0AB3  0ADA               	incf	??_USBCtrlTrfRxService,f
  9516  0AB4  1903               	skipnz
  9517  0AB5  0ADB               	incf	??_USBCtrlTrfRxService+1,f
  9518  0AB6  3F40               	moviw [0]fsr1
  9519  0AB7  075A               	addwf	??_USBCtrlTrfRxService,w
  9520  0AB8  0022               	movlb	2	; select bank2
  9521  0AB9  00A3               	movwf	(_outPipes^(0+256)+3)
  9522  0ABA  3F41               	moviw [1]fsr1
  9523  0ABB  0020               	movlb	0	; select bank0
  9524  0ABC  3D5B               	addwfc	??_USBCtrlTrfRxService+1,w
  9525  0ABD  0022               	movlb	2	; select bank2
  9526  0ABE  00A4               	movwf	(_outPipes^(0+256)+4)
  9527                           
  9528                           ;usb_device.c: 2040: for(i=0;i<byteToRead;i++)
  9529  0ABF  0020               	movlb	0	; select bank0
  9530  0AC0  01DC               	clrf	USBCtrlTrfRxService@i
  9531  0AC1                     l4573:	
  9532  0AC1  085D               	movf	USBCtrlTrfRxService@byteToRead,w
  9533  0AC2  025C               	subwf	USBCtrlTrfRxService@i,w
  9534  0AC3  1803               	btfsc	3,0
  9535  0AC4  2ADD               	goto	l4575
  9536                           
  9537                           ;usb_device.c: 2041: {
  9538                           ;usb_device.c: 2042: *outPipes[0].pDst.bRam++ = CtrlTrfData[i];
  9539  0AC5  085C               	movf	USBCtrlTrfRxService@i,w
  9540  0AC6  3E48               	addlw	72
  9541  0AC7  0086               	movwf	6
  9542  0AC8  0187               	clrf	7
  9543  0AC9  0801               	movf	1,w
  9544  0ACA  00DA               	movwf	??_USBCtrlTrfRxService
  9545  0ACB  0022               	movlb	2	; select bank2
  9546  0ACC  0820               	movf	_outPipes^(0+256),w
  9547  0ACD  0086               	movwf	6
  9548  0ACE  0187               	clrf	7
  9549  0ACF  0020               	movlb	0	; select bank0
  9550  0AD0  085A               	movf	??_USBCtrlTrfRxService,w
  9551  0AD1  0081               	movwf	1
  9552  0AD2  3001               	movlw	1
  9553  0AD3  00DA               	movwf	??_USBCtrlTrfRxService
  9554  0AD4  085A               	movf	??_USBCtrlTrfRxService,w
  9555  0AD5  0022               	movlb	2	; select bank2
  9556  0AD6  07A0               	addwf	_outPipes^(0+256),f
  9557  0AD7  3001               	movlw	1
  9558  0AD8  0020               	movlb	0	; select bank0
  9559  0AD9  00DA               	movwf	??_USBCtrlTrfRxService
  9560  0ADA  085A               	movf	??_USBCtrlTrfRxService,w
  9561  0ADB  07DC               	addwf	USBCtrlTrfRxService@i,f
  9562  0ADC  2AC1               	goto	l4573
  9563  0ADD                     l4575:	
  9564                           
  9565                           ;usb_device.c: 2043: }
  9566                           ;usb_device.c: 2047: if(outPipes[0].wCount.Val > 0)
  9567  0ADD  3003               	movlw	3
  9568  0ADE  3E20               	addlw	_outPipes& (0+255)
  9569  0ADF  0086               	movwf	6
  9570  0AE0  3001               	movlw	1	; select bank2/3
  9571  0AE1  0087               	movwf	7
  9572  0AE2  0016               	moviw fsr1++
  9573  0AE3  0401               	iorwf	1,w
  9574  0AE4  1903               	skipnz
  9575  0AE5  2B0E               	goto	l4583
  9576                           
  9577                           ;usb_device.c: 2048: {
  9578                           ;usb_device.c: 2049: pBDTEntryEP0OutNext->CNT = 8;
  9579  0AE6  3008               	movlw	8
  9580  0AE7  00DA               	movwf	??_USBCtrlTrfRxService
  9581  0AE8  0A6E               	incf	_pBDTEntryEP0OutNext,w
  9582  0AE9  0086               	movwf	6
  9583  0AEA  0187               	clrf	7
  9584  0AEB  085A               	movf	??_USBCtrlTrfRxService,w
  9585  0AEC  0081               	movwf	1
  9586                           
  9587                           ;usb_device.c: 2050: pBDTEntryEP0OutNext->ADR = (((WORD)(&CtrlTrfData))& 0x7FFF);
  9588  0AED  3048               	movlw	72
  9589  0AEE  00DA               	movwf	??_USBCtrlTrfRxService
  9590  0AEF  3000               	movlw	0
  9591  0AF0  00DB               	movwf	??_USBCtrlTrfRxService+1
  9592  0AF1  086E               	movf	_pBDTEntryEP0OutNext,w
  9593  0AF2  3E02               	addlw	2
  9594  0AF3  0086               	movwf	6
  9595  0AF4  0187               	clrf	7
  9596  0AF5  085A               	movf	??_USBCtrlTrfRxService,w
  9597  0AF6  3FC0               	movwi [0]fsr1
  9598  0AF7  085B               	movf	??_USBCtrlTrfRxService+1,w
  9599  0AF8  3FC1               	movwi [1]fsr1
  9600                           
  9601                           ;usb_device.c: 2051: if(pBDTEntryEP0OutCurrent->STAT.DTS == 0)
  9602  0AF9  086D               	movf	_pBDTEntryEP0OutCurrent,w
  9603  0AFA  0086               	movwf	6
  9604  0AFB  0187               	clrf	7
  9605  0AFC  1B01               	btfsc	1,6
  9606  0AFD  2B06               	goto	l4581
  9607                           
  9608                           ;usb_device.c: 2052: {
  9609                           ;usb_device.c: 2053: pBDTEntryEP0OutNext->STAT.Val = 0x80|0x40|(0x08 & 0x08);
  9610  0AFE  30C8               	movlw	200
  9611  0AFF  00DA               	movwf	??_USBCtrlTrfRxService
  9612  0B00  086E               	movf	_pBDTEntryEP0OutNext,w
  9613  0B01  0086               	movwf	6
  9614  0B02  0187               	clrf	7
  9615  0B03  085A               	movf	??_USBCtrlTrfRxService,w
  9616  0B04  0081               	movwf	1
  9617                           
  9618                           ;usb_device.c: 2054: }
  9619  0B05  0008               	return
  9620  0B06                     l4581:	
  9621                           
  9622                           ;usb_device.c: 2055: else
  9623                           ;usb_device.c: 2056: {
  9624                           ;usb_device.c: 2057: pBDTEntryEP0OutNext->STAT.Val = 0x80|0x00|(0x08 & 0x08);
  9625  0B06  3088               	movlw	136
  9626  0B07  00DA               	movwf	??_USBCtrlTrfRxService
  9627  0B08  086E               	movf	_pBDTEntryEP0OutNext,w
  9628  0B09  0086               	movwf	6
  9629  0B0A  0187               	clrf	7
  9630  0B0B  085A               	movf	??_USBCtrlTrfRxService,w
  9631  0B0C  0081               	movwf	1
  9632                           
  9633                           ;usb_device.c: 2058: }
  9634                           ;usb_device.c: 2059: }
  9635  0B0D  0008               	return
  9636  0B0E                     l4583:	
  9637                           
  9638                           ;usb_device.c: 2060: else
  9639                           ;usb_device.c: 2061: {
  9640                           ;usb_device.c: 2065: pBDTEntryEP0OutNext->CNT = 8;
  9641  0B0E  3008               	movlw	8
  9642  0B0F  00DA               	movwf	??_USBCtrlTrfRxService
  9643  0B10  0A6E               	incf	_pBDTEntryEP0OutNext,w
  9644  0B11  0086               	movwf	6
  9645  0B12  0187               	clrf	7
  9646  0B13  085A               	movf	??_USBCtrlTrfRxService,w
  9647  0B14  0081               	movwf	1
  9648                           
  9649                           ;usb_device.c: 2066: pBDTEntryEP0OutNext->ADR = (((WORD)(&SetupPkt))& 0x7FFF);
  9650  0B15  3040               	movlw	64
  9651  0B16  00DA               	movwf	??_USBCtrlTrfRxService
  9652  0B17  3000               	movlw	0
  9653  0B18  00DB               	movwf	??_USBCtrlTrfRxService+1
  9654  0B19  086E               	movf	_pBDTEntryEP0OutNext,w
  9655  0B1A  3E02               	addlw	2
  9656  0B1B  0086               	movwf	6
  9657  0B1C  0187               	clrf	7
  9658  0B1D  085A               	movf	??_USBCtrlTrfRxService,w
  9659  0B1E  3FC0               	movwi [0]fsr1
  9660  0B1F  085B               	movf	??_USBCtrlTrfRxService+1,w
  9661  0B20  3FC1               	movwi [1]fsr1
  9662                           
  9663                           ;usb_device.c: 2070: pBDTEntryEP0OutNext->STAT.Val = 0x80|0x04;
  9664  0B21  3084               	movlw	132
  9665  0B22  00DA               	movwf	??_USBCtrlTrfRxService
  9666  0B23  086E               	movf	_pBDTEntryEP0OutNext,w
  9667  0B24  0086               	movwf	6
  9668  0B25  0187               	clrf	7
  9669  0B26  085A               	movf	??_USBCtrlTrfRxService,w
  9670  0B27  0081               	movwf	1
  9671                           
  9672                           ;usb_device.c: 2077: if(outPipes[0].pFunc != (0))
  9673  0B28  0022               	movlb	2	; select bank2
  9674  0B29  0825               	movf	(_outPipes+5)^(0+256),w
  9675  0B2A  1903               	btfsc	3,2
  9676  0B2B  2B2F               	goto	l4589
  9677                           
  9678                           ;usb_device.c: 2078: {
  9679                           ;usb_device.c: 2084: outPipes[0].pFunc();
  9680  0B2C  0825               	movf	(_outPipes+5)^(0+256),w
  9681  0B2D  318A  2A8F         	ljmp	$	;if you get stuck here, you called an invalid pointer
  9682  0B2F                     l4589:	
  9683                           
  9684                           ;usb_device.c: 2089: }
  9685                           ;usb_device.c: 2090: outPipes[0].info.bits.busy = 0;
  9686  0B2F  13A2               	bcf	(_outPipes^(0+256)+2),7
  9687                           
  9688                           ;usb_device.c: 2104: if(USBDeferStatusStagePacket == FALSE)
  9689  0B30  0020               	movlb	0	; select bank0
  9690  0B31  08EB               	movf	_USBDeferStatusStagePacket,f
  9691  0B32  1D03               	skipz
  9692  0B33  0008               	return
  9693                           
  9694                           ;usb_device.c: 2105: {
  9695                           ;usb_device.c: 2106: USBCtrlEPAllowStatusStage();
  9696  0B34  3193  2385         	fcall	_USBCtrlEPAllowStatusStage
  9697  0B36  0008               	return
  9698  0B37                     __end_of_USBCtrlTrfRxService:	
  9699                           
  9700                           	psect	text34
  9701  1002                     __ptext34:	
  9702 ;; *************** function _USBCtrlTrfSetupHandler *****************
  9703 ;; Defined at:
  9704 ;;		line 2623 in file "../USB/usb_device.c"
  9705 ;; Parameters:    Size  Location     Type
  9706 ;;		None
  9707 ;; Auto vars:     Size  Location     Type
  9708 ;;		None
  9709 ;; Return value:  Size  Location     Type
  9710 ;;		None               void
  9711 ;; Registers used:
  9712 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  9713 ;; Tracked objects:
  9714 ;;		On entry : 0/0
  9715 ;;		On exit  : 0/0
  9716 ;;		Unchanged: 0/0
  9717 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9718 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9719 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9720 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  9721 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  9722 ;;Total ram usage:        1 bytes
  9723 ;; Hardware stack levels used:    1
  9724 ;; Hardware stack levels required when called:   10
  9725 ;; This function calls:
  9726 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
  9727 ;;		_USBCtrlEPServiceComplete
  9728 ;;		_USBCheckStdRequest
  9729 ;; This function is called by:
  9730 ;;		_USBCtrlEPService
  9731 ;; This function uses a non-reentrant model
  9732 ;;
  9733                           
  9734                           
  9735                           ;psect for function _USBCtrlTrfSetupHandler
  9736  1002                     _USBCtrlTrfSetupHandler:	
  9737                           
  9738                           ;usb_device.c: 2627: shortPacketStatus = 0;
  9739                           
  9740                           ;incstack = 0
  9741                           ; Regs used in _USBCtrlTrfSetupHandler: [allreg]
  9742  1002  0022               	movlb	2	; select bank2
  9743  1003  01CC               	clrf	_shortPacketStatus^(0+256)
  9744                           
  9745                           ;usb_device.c: 2628: USBDeferStatusStagePacket = FALSE;
  9746  1004  0020               	movlb	0	; select bank0
  9747  1005  01EB               	clrf	_USBDeferStatusStagePacket	;volatile
  9748                           
  9749                           ;usb_device.c: 2629: USBDeferINDataStagePackets = FALSE;
  9750  1006  0022               	movlb	2	; select bank2
  9751  1007  01BE               	clrf	_USBDeferINDataStagePackets^(0+256)	;volatile
  9752                           
  9753                           ;usb_device.c: 2630: USBDeferOUTDataStagePackets = FALSE;
  9754  1008  01BF               	clrf	_USBDeferOUTDataStagePackets^(0+256)	;volatile
  9755                           
  9756                           ;usb_device.c: 2631: BothEP0OutUOWNsSet = FALSE;
  9757  1009  01B2               	clrf	_BothEP0OutUOWNsSet^(0+256)
  9758                           
  9759                           ;usb_device.c: 2632: controlTransferState = 0;
  9760  100A  0020               	movlb	0	; select bank0
  9761  100B  01EC               	clrf	_controlTransferState
  9762                           
  9763                           ;usb_device.c: 2641: pBDTEntryIn[0]->STAT.Val &= ~(0x80);
  9764  100C  307F               	movlw	127
  9765  100D  0021               	movlb	1	; select bank1
  9766  100E  00AD               	movwf	??_USBCtrlTrfSetupHandler^(0+128)
  9767  100F  0020               	movlb	0	; select bank0
  9768  1010  0868               	movf	_pBDTEntryIn,w
  9769  1011  0086               	movwf	6
  9770  1012  0187               	clrf	7
  9771  1013  0021               	movlb	1	; select bank1
  9772  1014  082D               	movf	??_USBCtrlTrfSetupHandler^(0+128),w
  9773  1015  0581               	andwf	1,f
  9774                           
  9775                           ;usb_device.c: 2642: ((BYTE_VAL*)&pBDTEntryIn[0])->Val ^= 0x0004;
  9776  1016  3004               	movlw	4
  9777  1017  00AD               	movwf	??_USBCtrlTrfSetupHandler^(0+128)
  9778  1018  082D               	movf	??_USBCtrlTrfSetupHandler^(0+128),w
  9779  1019  0020               	movlb	0	; select bank0
  9780  101A  06E8               	xorwf	_pBDTEntryIn,f
  9781                           
  9782                           ;usb_device.c: 2643: pBDTEntryIn[0]->STAT.Val &= ~(0x80);
  9783  101B  307F               	movlw	127
  9784  101C  0021               	movlb	1	; select bank1
  9785  101D  00AD               	movwf	??_USBCtrlTrfSetupHandler^(0+128)
  9786  101E  0020               	movlb	0	; select bank0
  9787  101F  0868               	movf	_pBDTEntryIn,w
  9788  1020  0086               	movwf	6
  9789  1021  0187               	clrf	7
  9790  1022  0021               	movlb	1	; select bank1
  9791  1023  082D               	movf	??_USBCtrlTrfSetupHandler^(0+128),w
  9792  1024  0581               	andwf	1,f
  9793                           
  9794                           ;usb_device.c: 2644: ((BYTE_VAL*)&pBDTEntryIn[0])->Val ^= 0x0004;
  9795  1025  3004               	movlw	4
  9796  1026  00AD               	movwf	??_USBCtrlTrfSetupHandler^(0+128)
  9797  1027  082D               	movf	??_USBCtrlTrfSetupHandler^(0+128),w
  9798  1028  0020               	movlb	0	; select bank0
  9799  1029  06E8               	xorwf	_pBDTEntryIn,f
  9800                           
  9801                           ;usb_device.c: 2645: pBDTEntryEP0OutNext->STAT.Val &= ~(0x80);
  9802  102A  307F               	movlw	127
  9803  102B  0021               	movlb	1	; select bank1
  9804  102C  00AD               	movwf	??_USBCtrlTrfSetupHandler^(0+128)
  9805  102D  0020               	movlb	0	; select bank0
  9806  102E  086E               	movf	_pBDTEntryEP0OutNext,w
  9807  102F  0086               	movwf	6
  9808  1030  0187               	clrf	7
  9809  1031  0021               	movlb	1	; select bank1
  9810  1032  082D               	movf	??_USBCtrlTrfSetupHandler^(0+128),w
  9811  1033  0581               	andwf	1,f
  9812                           
  9813                           ;usb_device.c: 2647: inPipes[0].info.Val = 0;
  9814  1034  0022               	movlb	2	; select bank2
  9815  1035  01CF               	clrf	(_inPipes^(0+256)+2)
  9816                           
  9817                           ;usb_device.c: 2648: inPipes[0].wCount.Val = 0;
  9818  1036  01D0               	clrf	(_inPipes^(0+256)+3)
  9819  1037  01D1               	clrf	((_inPipes+1)^(0+256)+3)
  9820                           
  9821                           ;usb_device.c: 2649: outPipes[0].info.Val = 0;
  9822  1038  01A2               	clrf	(_outPipes^(0+256)+2)
  9823                           
  9824                           ;usb_device.c: 2650: outPipes[0].wCount.Val = 0;
  9825  1039  01A3               	clrf	(_outPipes^(0+256)+3)
  9826  103A  01A4               	clrf	((_outPipes+1)^(0+256)+3)
  9827                           
  9828                           ;usb_device.c: 2656: USBCheckStdRequest();
  9829  103B  3192  2200  3190   	fcall	_USBCheckStdRequest
  9830                           
  9831                           ;usb_device.c: 2657: USER_USB_CALLBACK_EVENT_HANDLER(EVENT_EP0_REQUEST,0,0);
  9832  103E  3003               	movlw	3
  9833  103F  0021               	movlb	1	; select bank1
  9834  1040  00A0               	movwf	?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)
  9835  1041  3000               	movlw	0
  9836  1042  00A1               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)+1)
  9837  1043  3000               	movlw	0
  9838  1044  00A2               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER+2)^(0+128)
  9839  1045  3000               	movlw	0
  9840  1046  00A3               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER+3)^(0+128)
  9841  1047  3000               	movlw	0
  9842  1048  00A4               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)+4)
  9843  1049  3000               	movlw	0
  9844  104A  00A5               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)+5)
  9845  104B  319E  26EB  3190   	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
  9846                           
  9847                           ;usb_device.c: 2670: USBCtrlEPServiceComplete();
  9848  104E  3193  23E9         	fcall	_USBCtrlEPServiceComplete
  9849  1050  0008               	return
  9850  1051                     __end_of_USBCtrlTrfSetupHandler:	
  9851                           
  9852                           	psect	text35
  9853  1200                     __ptext35:	
  9854 ;; *************** function _USBCheckStdRequest *****************
  9855 ;; Defined at:
  9856 ;;		line 2839 in file "../USB/usb_device.c"
  9857 ;; Parameters:    Size  Location     Type
  9858 ;;		None
  9859 ;; Auto vars:     Size  Location     Type
  9860 ;;		None
  9861 ;; Return value:  Size  Location     Type
  9862 ;;		None               void
  9863 ;; Registers used:
  9864 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  9865 ;; Tracked objects:
  9866 ;;		On entry : 0/0
  9867 ;;		On exit  : 0/0
  9868 ;;		Unchanged: 0/0
  9869 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9870 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9871 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9872 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  9873 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  9874 ;;Total ram usage:        1 bytes
  9875 ;; Hardware stack levels used:    1
  9876 ;; Hardware stack levels required when called:    9
  9877 ;; This function calls:
  9878 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
  9879 ;;		_USBStdSetCfgHandler
  9880 ;;		_USBStdGetDscHandler
  9881 ;;		_USBStdGetStatusHandler
  9882 ;;		_USBStdFeatureReqHandler
  9883 ;; This function is called by:
  9884 ;;		_USBCtrlTrfSetupHandler
  9885 ;; This function uses a non-reentrant model
  9886 ;;
  9887                           
  9888                           
  9889                           ;psect for function _USBCheckStdRequest
  9890  1200                     _USBCheckStdRequest:	
  9891                           
  9892                           ;usb_device.c: 2840: if(SetupPkt.RequestType != (0x00>>5)) return;
  9893                           
  9894                           ;incstack = 0
  9895                           ; Regs used in _USBCheckStdRequest: [allreg]
  9896  1200  0020               	movlb	0	; select bank0
  9897  1201  0E40               	swapf	64,w	;volatile
  9898  1202  0C89               	rrf	9,f
  9899  1203  3903               	andlw	3
  9900  1204  3A00               	xorlw	0
  9901  1205  1D03               	btfss	3,2
  9902  1206  0008               	return
  9903  1207  2A52               	goto	l6455
  9904  1208                     l332:	
  9905                           ;usb_device.c: 2843: {
  9906                           ;usb_device.c: 2844: case 5:
  9907                           
  9908                           ;usb_device.c: 2842: switch(SetupPkt.bRequest)
  9909                           
  9910                           
  9911                           ;usb_device.c: 2845: inPipes[0].info.bits.busy = 1;
  9912  1208  0022               	movlb	2	; select bank2
  9913  1209  17CF               	bsf	(_inPipes^(0+256)+2),7
  9914                           
  9915                           ;usb_device.c: 2846: USBDeviceState = ADR_PENDING_STATE;
  9916  120A  3008               	movlw	8
  9917  120B  0021               	movlb	1	; select bank1
  9918  120C  00AC               	movwf	??_USBCheckStdRequest^(0+128)
  9919  120D  082C               	movf	??_USBCheckStdRequest^(0+128),w
  9920  120E  00EE               	movwf	_USBDeviceState^(0+128)
  9921                           
  9922                           ;usb_device.c: 2848: break;
  9923  120F  0008               	return
  9924  1210                     l6425:	
  9925                           ;usb_device.c: 2849: case 6:
  9926                           
  9927                           
  9928                           ;usb_device.c: 2850: USBStdGetDscHandler();
  9929  1210  3195  2557         	fcall	_USBStdGetDscHandler
  9930                           
  9931                           ;usb_device.c: 2851: break;
  9932  1212  0008               	return
  9933  1213                     l6427:	
  9934                           ;usb_device.c: 2852: case 9:
  9935                           
  9936                           
  9937                           ;usb_device.c: 2853: USBStdSetCfgHandler();
  9938  1213  3197  2771         	fcall	_USBStdSetCfgHandler
  9939                           
  9940                           ;usb_device.c: 2854: break;
  9941  1215  0008               	return
  9942  1216                     l6429:	
  9943                           ;usb_device.c: 2855: case 8:
  9944                           
  9945                           
  9946                           ;usb_device.c: 2856: inPipes[0].pSrc.bRam = (BYTE*)&USBActiveConfiguration;
  9947  1216  3054               	movlw	low _USBActiveConfiguration
  9948  1217  0022               	movlb	2	; select bank2
  9949  1218  00CD               	movwf	_inPipes^(0+256)
  9950  1219  3001               	movlw	high _USBActiveConfiguration
  9951  121A  00CE               	movwf	(_inPipes+1)^(0+256)
  9952                           
  9953                           ;usb_device.c: 2857: inPipes[0].info.bits.ctrl_trf_mem = 0x01;
  9954  121B  144F               	bsf	(_inPipes^(0+256)+2),0
  9955                           
  9956                           ;usb_device.c: 2858: inPipes[0].wCount.v[0] = 1;
  9957  121C  01D0               	clrf	(_inPipes^(0+256)+3)
  9958  121D  0AD0               	incf	(_inPipes^(0+256)+3),f
  9959                           
  9960                           ;usb_device.c: 2859: inPipes[0].info.bits.busy = 1;
  9961  121E  17CF               	bsf	(_inPipes^(0+256)+2),7
  9962                           
  9963                           ;usb_device.c: 2860: break;
  9964  121F  0008               	return
  9965  1220                     l6437:	
  9966                           ;usb_device.c: 2861: case 0:
  9967                           
  9968                           
  9969                           ;usb_device.c: 2862: USBStdGetStatusHandler();
  9970  1220  3190  20A1         	fcall	_USBStdGetStatusHandler
  9971                           
  9972                           ;usb_device.c: 2863: break;
  9973  1222  0008               	return
  9974  1223                     l6439:	
  9975                           ;usb_device.c: 2864: case 1:
  9976                           
  9977                           
  9978                           ;usb_device.c: 2865: case 3:
  9979                           ;usb_device.c: 2866: USBStdFeatureReqHandler();
  9980  1223  3186  26DB         	fcall	_USBStdFeatureReqHandler
  9981                           
  9982                           ;usb_device.c: 2867: break;
  9983  1225  0008               	return
  9984  1226                     l6441:	
  9985                           ;usb_device.c: 2868: case 10:
  9986                           
  9987                           
  9988                           ;usb_device.c: 2869: inPipes[0].pSrc.bRam = (BYTE*)&USBAlternateInterface[SetupPkt.bIntf
      +                          ID];
  9989  1226  0020               	movlb	0	; select bank0
  9990  1227  0844               	movf	68,w	;volatile
  9991  1228  3E55               	addlw	_USBAlternateInterface& (0+255)
  9992  1229  0022               	movlb	2	; select bank2
  9993  122A  00CD               	movwf	_inPipes^(0+256)
  9994  122B  3001               	movlw	1
  9995  122C  00CE               	movwf	(_inPipes+1)^(0+256)
  9996                           
  9997                           ;usb_device.c: 2870: inPipes[0].info.bits.ctrl_trf_mem = 0x01;
  9998  122D  144F               	bsf	(_inPipes^(0+256)+2),0
  9999                           
 10000                           ;usb_device.c: 2871: inPipes[0].wCount.v[0] = 1;
 10001  122E  01D0               	clrf	(_inPipes^(0+256)+3)
 10002  122F  0AD0               	incf	(_inPipes^(0+256)+3),f
 10003                           
 10004                           ;usb_device.c: 2872: inPipes[0].info.bits.busy = 1;
 10005  1230  17CF               	bsf	(_inPipes^(0+256)+2),7
 10006                           
 10007                           ;usb_device.c: 2873: break;
 10008  1231  0008               	return
 10009  1232                     l341:	
 10010                           ;usb_device.c: 2874: case 11:
 10011                           
 10012                           
 10013                           ;usb_device.c: 2875: inPipes[0].info.bits.busy = 1;
 10014  1232  0022               	movlb	2	; select bank2
 10015  1233  17CF               	bsf	(_inPipes^(0+256)+2),7
 10016                           
 10017                           ;usb_device.c: 2876: USBAlternateInterface[SetupPkt.bIntfID] = SetupPkt.bAltID;
 10018  1234  0020               	movlb	0	; select bank0
 10019  1235  0842               	movf	66,w	;volatile
 10020  1236  0021               	movlb	1	; select bank1
 10021  1237  00AC               	movwf	??_USBCheckStdRequest^(0+128)
 10022  1238  0020               	movlb	0	; select bank0
 10023  1239  0844               	movf	68,w	;volatile
 10024  123A  3E55               	addlw	_USBAlternateInterface& (0+255)
 10025  123B  0086               	movwf	6
 10026  123C  3001               	movlw	1	; select bank2/3
 10027  123D  0087               	movwf	7
 10028  123E  0021               	movlb	1	; select bank1
 10029  123F  082C               	movf	??_USBCheckStdRequest^(0+128),w
 10030  1240  0081               	movwf	1
 10031                           
 10032                           ;usb_device.c: 2877: break;
 10033  1241  0008               	return
 10034  1242                     l6451:	
 10035                           ;usb_device.c: 2878: case 7:
 10036                           
 10037                           
 10038                           ;usb_device.c: 2879: USER_USB_CALLBACK_EVENT_HANDLER(EVENT_SET_DESCRIPTOR,0,0);
 10039  1242  3002               	movlw	2
 10040  1243  0021               	movlb	1	; select bank1
 10041  1244  00A0               	movwf	?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)
 10042  1245  3000               	movlw	0
 10043  1246  00A1               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)+1)
 10044  1247  3000               	movlw	0
 10045  1248  00A2               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER+2)^(0+128)
 10046  1249  3000               	movlw	0
 10047  124A  00A3               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER+3)^(0+128)
 10048  124B  3000               	movlw	0
 10049  124C  00A4               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)+4)
 10050  124D  3000               	movlw	0
 10051  124E  00A5               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)+5)
 10052  124F  319E  26EB         	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
 10053                           
 10054                           ;usb_device.c: 2884: }
 10055                           
 10056                           ;usb_device.c: 2883: break;
 10057                           
 10058                           ;usb_device.c: 2882: default:
 10059                           
 10060                           ;usb_device.c: 2881: case 12:
 10061                           
 10062                           ;usb_device.c: 2880: break;
 10063  1251  0008               	return
 10064  1252                     l6455:	
 10065  1252  0020               	movlb	0	; select bank0
 10066  1253  0841               	movf	65,w	;volatile
 10067                           
 10068                           ; Switch size 1, requested type "space"
 10069                           ; Number of cases is 11, Range of values is 0 to 12
 10070                           ; switch strategies available:
 10071                           ; Name         Instructions Cycles
 10072                           ; direct_byte           32     6 (fixed)
 10073                           ; simple_byte           34    18 (average)
 10074                           ; jumptable            260     6 (fixed)
 10075                           ; rangetable            17     4 (fixed)
 10076                           ; spacedrange           31     6 (fixed)
 10077                           ; locatedrange          13     3 (fixed)
 10078                           ;	Chosen strategy is direct_byte
 10079  1254  0084               	movwf	4
 10080  1255  300D               	movlw	13
 10081  1256  0204               	subwf	4,w
 10082  1257  1803               	skipnc
 10083  1258  0008               	return
 10084  1259  3198               	movlp	high S7295
 10085  125A  3504               	lslf	4,w
 10086  125B  3E00               	addlw	low S7295
 10087  125C  0082               	movwf	2
 10088  125D                     l330:	
 10089  125D  0008               	return
 10090  125E                     __end_of_USBCheckStdRequest:	
 10091                           
 10092                           	psect	swtext1
 10093  1800                     __pswtext1:	
 10094  1800                     S7295:	
 10095  1800  3192  2A20         	ljmp	l6437
 10096  1802  3192  2A23         	ljmp	l6439
 10097  1804  3192  2A5D         	ljmp	l330
 10098  1806  3192  2A23         	ljmp	l6439
 10099  1808  3192  2A5D         	ljmp	l330
 10100  180A  3192  2A08         	ljmp	l332
 10101  180C  3192  2A10         	ljmp	l6425
 10102  180E  3192  2A42         	ljmp	l6451
 10103  1810  3192  2A16         	ljmp	l6429
 10104  1812  3192  2A13         	ljmp	l6427
 10105  1814  3192  2A26         	ljmp	l6441
 10106  1816  3192  2A32         	ljmp	l341
 10107  1818  3192  2A5D         	ljmp	l330
 10108                           
 10109                           	psect	text36
 10110  06DB                     __ptext36:	
 10111 ;; *************** function _USBStdFeatureReqHandler *****************
 10112 ;; Defined at:
 10113 ;;		line 2907 in file "../USB/usb_device.c"
 10114 ;; Parameters:    Size  Location     Type
 10115 ;;		None
 10116 ;; Auto vars:     Size  Location     Type
 10117 ;;  pUEP            2    8[BANK1 ] PTR unsigned char 
 10118 ;;		 -> UEP0(1), 
 10119 ;;  p               1   11[BANK1 ] PTR struct __BDT
 10120 ;;		 -> NULL(0), BDT(32), 
 10121 ;;  current_ep_d    1   10[BANK1 ] struct .
 10122 ;; Return value:  Size  Location     Type
 10123 ;;		None               void
 10124 ;; Registers used:
 10125 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10126 ;; Tracked objects:
 10127 ;;		On entry : 0/0
 10128 ;;		On exit  : 0/0
 10129 ;;		Unchanged: 0/0
 10130 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10131 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10132 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
 10133 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
 10134 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
 10135 ;;Total ram usage:        6 bytes
 10136 ;; Hardware stack levels used:    1
 10137 ;; Hardware stack levels required when called:    8
 10138 ;; This function calls:
 10139 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 10140 ;; This function is called by:
 10141 ;;		_USBCheckStdRequest
 10142 ;; This function uses a non-reentrant model
 10143 ;;
 10144                           
 10145                           
 10146                           ;psect for function _USBStdFeatureReqHandler
 10147  06DB                     _USBStdFeatureReqHandler:	
 10148                           
 10149                           ;usb_device.c: 2908: BDT_ENTRY *p;
 10150                           ;usb_device.c: 2909: EP_STATUS current_ep_data;
 10151                           ;usb_device.c: 2913: unsigned char* pUEP;
 10152                           ;usb_device.c: 2951: if((SetupPkt.bFeature == 1)&&
 10153                           ;usb_device.c: 2952: (SetupPkt.Recipient == (0x00)))
 10154                           
 10155                           ;incstack = 0
 10156                           ; Regs used in _USBStdFeatureReqHandler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10157  06DB  0020               	movlb	0	; select bank0
 10158  06DC  0842               	movf	66,w	;volatile
 10159  06DD  3A01               	xorlw	1
 10160  06DE  1D03               	skipz
 10161  06DF  2EF2               	goto	l6473
 10162  06E0  0840               	movf	64,w	;volatile
 10163  06E1  391F               	andlw	31
 10164  06E2  3800               	iorlw	0
 10165  06E3  1D03               	skipz
 10166  06E4  2EF2               	goto	l6473
 10167                           
 10168                           ;usb_device.c: 2953: {
 10169                           ;usb_device.c: 2954: inPipes[0].info.bits.busy = 1;
 10170  06E5  0022               	movlb	2	; select bank2
 10171  06E6  17CF               	bsf	(_inPipes^(0+256)+2),7
 10172                           
 10173                           ;usb_device.c: 2955: if(SetupPkt.bRequest == 3)
 10174  06E7  0020               	movlb	0	; select bank0
 10175  06E8  0841               	movf	65,w	;volatile
 10176  06E9  3A03               	xorlw	3
 10177  06EA  1D03               	skipz
 10178  06EB  2EF0               	goto	l6471
 10179                           
 10180                           ;usb_device.c: 2956: RemoteWakeup = TRUE;
 10181  06EC  0022               	movlb	2	; select bank2
 10182  06ED  01B8               	clrf	_RemoteWakeup^(0+256)
 10183  06EE  0AB8               	incf	_RemoteWakeup^(0+256),f
 10184  06EF  2EF2               	goto	l6473
 10185  06F0                     l6471:	
 10186                           
 10187                           ;usb_device.c: 2957: else
 10188                           ;usb_device.c: 2958: RemoteWakeup = FALSE;
 10189  06F0  0022               	movlb	2	; select bank2
 10190  06F1  01B8               	clrf	_RemoteWakeup^(0+256)
 10191  06F2                     l6473:	
 10192                           
 10193                           ;usb_device.c: 2959: }
 10194                           ;usb_device.c: 2962: if((SetupPkt.bFeature == 0)&&
 10195                           ;usb_device.c: 2963: (SetupPkt.Recipient == (0x02))&&
 10196                           ;usb_device.c: 2964: (SetupPkt.EPNum != 0) && (SetupPkt.EPNum <= 1)&&
 10197                           ;usb_device.c: 2965: (USBDeviceState == CONFIGURED_STATE))
 10198  06F2  0020               	movlb	0	; select bank0
 10199  06F3  0842               	movf	66,w
 10200  06F4  1D03               	skipz
 10201  06F5  0008               	return
 10202  06F6  0840               	movf	64,w	;volatile
 10203  06F7  391F               	andlw	31
 10204  06F8  3A02               	xorlw	2
 10205  06F9  1D03               	skipz
 10206  06FA  0008               	return
 10207  06FB  0844               	movf	68,w	;volatile
 10208  06FC  390F               	andlw	15
 10209  06FD  3A00               	xorlw	0
 10210  06FE  1903               	skipnz
 10211  06FF  0008               	return
 10212  0700  0844               	movf	68,w	;volatile
 10213  0701  390F               	andlw	15
 10214  0702  0021               	movlb	1	; select bank1
 10215  0703  00A6               	movwf	??_USBStdFeatureReqHandler^(0+128)
 10216  0704  3002               	movlw	2
 10217  0705  0226               	subwf	??_USBStdFeatureReqHandler^(0+128),w
 10218  0706  1803               	skipnc
 10219  0707  0008               	return
 10220  0708  086E               	movf	_USBDeviceState^(0+128),w
 10221  0709  3A20               	xorlw	32
 10222  070A  1D03               	skipz
 10223  070B  0008               	return
 10224                           
 10225                           ;usb_device.c: 2966: {
 10226                           ;usb_device.c: 2969: inPipes[0].info.bits.busy = 1;
 10227  070C  0022               	movlb	2	; select bank2
 10228  070D  17CF               	bsf	(_inPipes^(0+256)+2),7
 10229                           
 10230                           ;usb_device.c: 2972: if(SetupPkt.EPDir == 0)
 10231  070E  0020               	movlb	0	; select bank0
 10232  070F  1BC4               	btfsc	68,7	;volatile
 10233  0710  2F21               	goto	l6487
 10234                           
 10235                           ;usb_device.c: 2973: {
 10236                           ;usb_device.c: 2974: p = (BDT_ENTRY*)pBDTEntryOut[SetupPkt.EPNum];
 10237  0711  0844               	movf	68,w	;volatile
 10238  0712  390F               	andlw	15
 10239  0713  3E2E               	addlw	_pBDTEntryOut& (0+255)
 10240  0714  0086               	movwf	6
 10241  0715  3001               	movlw	1	; select bank2/3
 10242  0716  0087               	movwf	7
 10243  0717  0801               	movf	1,w
 10244  0718  0021               	movlb	1	; select bank1
 10245  0719  00A6               	movwf	??_USBStdFeatureReqHandler^(0+128)
 10246  071A  0826               	movf	??_USBStdFeatureReqHandler^(0+128),w
 10247  071B  00AB               	movwf	USBStdFeatureReqHandler@p^(0+128)
 10248                           
 10249                           ;usb_device.c: 2975: current_ep_data.Val = ep_data_out[SetupPkt.EPNum].Val;
 10250  071C  0020               	movlb	0	; select bank0
 10251  071D  0844               	movf	68,w	;volatile
 10252  071E  390F               	andlw	15
 10253  071F  3E2C               	addlw	_ep_data_out& (0+255)
 10254  0720  2F30               	goto	L11
 10255  0721                     l6487:	
 10256                           ;usb_device.c: 2976: }
 10257                           
 10258                           
 10259                           ;usb_device.c: 2977: else
 10260                           ;usb_device.c: 2978: {
 10261                           ;usb_device.c: 2979: p = (BDT_ENTRY*)pBDTEntryIn[SetupPkt.EPNum];
 10262  0721  0020               	movlb	0	; select bank0
 10263  0722  0844               	movf	68,w	;volatile
 10264  0723  390F               	andlw	15
 10265  0724  3E68               	addlw	_pBDTEntryIn& (0+255)
 10266  0725  0086               	movwf	6
 10267  0726  0187               	clrf	7
 10268  0727  0801               	movf	1,w
 10269  0728  0021               	movlb	1	; select bank1
 10270  0729  00A6               	movwf	??_USBStdFeatureReqHandler^(0+128)
 10271  072A  0826               	movf	??_USBStdFeatureReqHandler^(0+128),w
 10272  072B  00AB               	movwf	USBStdFeatureReqHandler@p^(0+128)
 10273                           
 10274                           ;usb_device.c: 2980: current_ep_data.Val = ep_data_in[SetupPkt.EPNum].Val;
 10275  072C  0020               	movlb	0	; select bank0
 10276  072D  0844               	movf	68,w	;volatile
 10277  072E  390F               	andlw	15
 10278  072F  3E2A               	addlw	_ep_data_in& (0+255)
 10279  0730                     L11:	
 10280  0730  0086               	movwf	6
 10281  0731  3001               	movlw	1	; select bank2/3
 10282  0732  0087               	movwf	7
 10283  0733  0801               	movf	1,w
 10284  0734  0021               	movlb	1	; select bank1
 10285  0735  00A6               	movwf	??_USBStdFeatureReqHandler^(0+128)
 10286  0736  0826               	movf	??_USBStdFeatureReqHandler^(0+128),w
 10287  0737  00AA               	movwf	USBStdFeatureReqHandler@current_ep_data^(0+128)
 10288                           
 10289                           ;usb_device.c: 2981: }
 10290                           ;usb_device.c: 2987: if(current_ep_data.bits.ping_pong_state == 0)
 10291  0738  182A               	btfsc	USBStdFeatureReqHandler@current_ep_data^(0+128),0
 10292  0739  2F3F               	goto	l353
 10293                           
 10294                           ;usb_device.c: 2988: {
 10295                           ;usb_device.c: 2989: {((BYTE_VAL*)&p)->Val &= ~0x0004;};
 10296  073A  30FB               	movlw	251
 10297  073B  00A6               	movwf	??_USBStdFeatureReqHandler^(0+128)
 10298  073C  0826               	movf	??_USBStdFeatureReqHandler^(0+128),w
 10299  073D  05AB               	andwf	USBStdFeatureReqHandler@p^(0+128),f
 10300                           
 10301                           ;usb_device.c: 2990: }
 10302  073E  2F40               	goto	l354
 10303  073F                     l353:	
 10304                           
 10305                           ;usb_device.c: 2991: else
 10306                           ;usb_device.c: 2992: {
 10307                           ;usb_device.c: 2993: {((BYTE_VAL*)&p)->Val |= 0x0004;};
 10308  073F  152B               	bsf	USBStdFeatureReqHandler@p^(0+128),2
 10309  0740                     l354:	
 10310                           
 10311                           ;usb_device.c: 2994: }
 10312                           ;usb_device.c: 2999: if(SetupPkt.EPDir == 0)
 10313  0740  0020               	movlb	0	; select bank0
 10314  0741  1BC4               	btfsc	68,7	;volatile
 10315  0742  2F4E               	goto	l6495
 10316                           
 10317                           ;usb_device.c: 3000: {
 10318                           ;usb_device.c: 3001: pBDTEntryOut[SetupPkt.EPNum] = (volatile BDT_ENTRY *)p;
 10319  0743  0021               	movlb	1	; select bank1
 10320  0744  082B               	movf	USBStdFeatureReqHandler@p^(0+128),w
 10321  0745  00A6               	movwf	??_USBStdFeatureReqHandler^(0+128)
 10322  0746  0020               	movlb	0	; select bank0
 10323  0747  0844               	movf	68,w	;volatile
 10324  0748  390F               	andlw	15
 10325  0749  3E2E               	addlw	_pBDTEntryOut& (0+255)
 10326  074A  0086               	movwf	6
 10327  074B  3001               	movlw	1	; select bank2/3
 10328  074C  0087               	movwf	7
 10329  074D  2F57               	goto	L12
 10330  074E                     l6495:	
 10331                           ;usb_device.c: 3002: }
 10332                           
 10333                           
 10334                           ;usb_device.c: 3003: else
 10335                           ;usb_device.c: 3004: {
 10336                           ;usb_device.c: 3005: pBDTEntryIn[SetupPkt.EPNum] = (volatile BDT_ENTRY *)p;
 10337  074E  0021               	movlb	1	; select bank1
 10338  074F  082B               	movf	USBStdFeatureReqHandler@p^(0+128),w
 10339  0750  00A6               	movwf	??_USBStdFeatureReqHandler^(0+128)
 10340  0751  0020               	movlb	0	; select bank0
 10341  0752  0844               	movf	68,w	;volatile
 10342  0753  390F               	andlw	15
 10343  0754  3E68               	addlw	_pBDTEntryIn& (0+255)
 10344  0755  0086               	movwf	6
 10345  0756  0187               	clrf	7
 10346  0757                     L12:	
 10347  0757  0021               	movlb	1	; select bank1
 10348  0758  0826               	movf	??_USBStdFeatureReqHandler^(0+128),w
 10349  0759  0081               	movwf	1
 10350                           
 10351                           ;usb_device.c: 3006: }
 10352                           ;usb_device.c: 3009: if(SetupPkt.bRequest == 3)
 10353  075A  0020               	movlb	0	; select bank0
 10354  075B  0841               	movf	65,w	;volatile
 10355  075C  3A03               	xorlw	3
 10356  075D  1D03               	skipz
 10357  075E  2F7C               	goto	l6507
 10358                           
 10359                           ;usb_device.c: 3010: {
 10360                           ;usb_device.c: 3011: if(p->STAT.UOWN == 1)
 10361  075F  0021               	movlb	1	; select bank1
 10362  0760  082B               	movf	USBStdFeatureReqHandler@p^(0+128),w
 10363  0761  0086               	movwf	6
 10364  0762  0187               	clrf	7
 10365  0763  1F81               	btfss	1,7
 10366  0764  2F73               	goto	l358
 10367                           
 10368                           ;usb_device.c: 3012: {
 10369                           ;usb_device.c: 3015: if(SetupPkt.EPDir == 0)
 10370  0765  0020               	movlb	0	; select bank0
 10371  0766  1BC4               	btfsc	68,7	;volatile
 10372  0767  2F6C               	goto	l6505
 10373                           
 10374                           ;usb_device.c: 3016: {
 10375                           ;usb_device.c: 3017: ep_data_out[SetupPkt.EPNum].bits.transfer_terminated = 1;
 10376  0768  0844               	movf	68,w	;volatile
 10377  0769  390F               	andlw	15
 10378  076A  3E2C               	addlw	_ep_data_out& (0+255)
 10379  076B  2F6F               	goto	L13
 10380  076C                     l6505:	
 10381                           ;usb_device.c: 3018: }
 10382                           
 10383                           
 10384                           ;usb_device.c: 3019: else
 10385                           ;usb_device.c: 3020: {
 10386                           ;usb_device.c: 3021: ep_data_in[SetupPkt.EPNum].bits.transfer_terminated = 1;
 10387  076C  0844               	movf	68,w	;volatile
 10388  076D  390F               	andlw	15
 10389  076E  3E2A               	addlw	_ep_data_in& (0+255)
 10390  076F                     L13:	
 10391  076F  0086               	movwf	6
 10392  0770  3001               	movlw	1	; select bank2/3
 10393  0771  0087               	movwf	7
 10394  0772  1481               	bsf	1,1
 10395  0773                     l358:	
 10396                           
 10397                           ;usb_device.c: 3022: }
 10398                           ;usb_device.c: 3023: }
 10399                           ;usb_device.c: 3026: p->STAT.Val |= 0x80|0x04;
 10400  0773  3084               	movlw	132
 10401  0774  0021               	movlb	1	; select bank1
 10402  0775  00A6               	movwf	??_USBStdFeatureReqHandler^(0+128)
 10403  0776  082B               	movf	USBStdFeatureReqHandler@p^(0+128),w
 10404  0777  0086               	movwf	6
 10405  0778  0187               	clrf	7
 10406  0779  0826               	movf	??_USBStdFeatureReqHandler^(0+128),w
 10407  077A  0481               	iorwf	1,f
 10408                           
 10409                           ;usb_device.c: 3027: }
 10410  077B  0008               	return
 10411  077C                     l6507:	
 10412                           
 10413                           ;usb_device.c: 3028: else
 10414                           ;usb_device.c: 3029: {
 10415                           ;usb_device.c: 3033: ((BYTE_VAL*)&p)->Val ^= 0x0004;;
 10416  077C  3004               	movlw	4
 10417  077D  0021               	movlb	1	; select bank1
 10418  077E  00A6               	movwf	??_USBStdFeatureReqHandler^(0+128)
 10419  077F  0826               	movf	??_USBStdFeatureReqHandler^(0+128),w
 10420  0780  06AB               	xorwf	USBStdFeatureReqHandler@p^(0+128),f
 10421                           
 10422                           ;usb_device.c: 3035: if(p->STAT.UOWN == 1)
 10423  0781  082B               	movf	USBStdFeatureReqHandler@p^(0+128),w
 10424  0782  0086               	movwf	6
 10425  0783  0187               	clrf	7
 10426  0784  1F81               	btfss	1,7
 10427  0785  2FA1               	goto	l6517
 10428                           
 10429                           ;usb_device.c: 3036: {
 10430                           ;usb_device.c: 3039: p->STAT.Val &= (~0x80);
 10431  0786  307F               	movlw	127
 10432  0787  00A6               	movwf	??_USBStdFeatureReqHandler^(0+128)
 10433  0788  082B               	movf	USBStdFeatureReqHandler@p^(0+128),w
 10434  0789  0086               	movwf	6
 10435  078A  0187               	clrf	7
 10436  078B  0826               	movf	??_USBStdFeatureReqHandler^(0+128),w
 10437  078C  0581               	andwf	1,f
 10438                           
 10439                           ;usb_device.c: 3040: p->STAT.Val |= 0x40;
 10440  078D  082B               	movf	USBStdFeatureReqHandler@p^(0+128),w
 10441  078E  0086               	movwf	6
 10442  078F  0187               	clrf	7
 10443  0790  1701               	bsf	1,6
 10444                           
 10445                           ;usb_device.c: 3041: USER_USB_CALLBACK_EVENT_HANDLER(EVENT_TRANSFER_TERMINATED,p,sizeof(
      +                          p));
 10446  0791  3005               	movlw	5
 10447  0792  00A0               	movwf	?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)
 10448  0793  3000               	movlw	0
 10449  0794  00A1               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)+1)
 10450  0795  082B               	movf	USBStdFeatureReqHandler@p^(0+128),w
 10451  0796  00A2               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER+2)^(0+128)
 10452  0797  3000               	movlw	0
 10453  0798  00A3               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER+3)^(0+128)
 10454  0799  3001               	movlw	1
 10455  079A  00A4               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)+4)
 10456  079B  3000               	movlw	0
 10457  079C  00A5               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)+5)
 10458  079D  319E  26EB  3186   	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
 10459                           
 10460                           ;usb_device.c: 3042: }
 10461  07A0  2FA6               	goto	l6519
 10462  07A1                     l6517:	
 10463                           
 10464                           ;usb_device.c: 3043: else
 10465                           ;usb_device.c: 3044: {
 10466                           ;usb_device.c: 3046: p->STAT.Val |= 0x40;
 10467  07A1  0021               	movlb	1	; select bank1
 10468  07A2  082B               	movf	USBStdFeatureReqHandler@p^(0+128),w
 10469  07A3  0086               	movwf	6
 10470  07A4  0187               	clrf	7
 10471  07A5  1701               	bsf	1,6
 10472  07A6                     l6519:	
 10473                           
 10474                           ;usb_device.c: 3047: }
 10475                           ;usb_device.c: 3051: ((BYTE_VAL*)&p)->Val ^= 0x0004;;
 10476  07A6  3004               	movlw	4
 10477  07A7  0021               	movlb	1	; select bank1
 10478  07A8  00A6               	movwf	??_USBStdFeatureReqHandler^(0+128)
 10479  07A9  0826               	movf	??_USBStdFeatureReqHandler^(0+128),w
 10480  07AA  06AB               	xorwf	USBStdFeatureReqHandler@p^(0+128),f
 10481                           
 10482                           ;usb_device.c: 3057: if((current_ep_data.bits.transfer_terminated != 0) || (p->STAT.UOWN
      +                           == 1))
 10483  07AB  18AA               	btfsc	USBStdFeatureReqHandler@current_ep_data^(0+128),1
 10484  07AC  2FB2               	goto	l366
 10485  07AD  082B               	movf	USBStdFeatureReqHandler@p^(0+128),w
 10486  07AE  0086               	movwf	6
 10487  07AF  0187               	clrf	7
 10488  07B0  1F81               	btfss	1,7
 10489  07B1  2FD8               	goto	l6531
 10490  07B2                     l366:	
 10491                           
 10492                           ;usb_device.c: 3058: {
 10493                           ;usb_device.c: 3059: if(SetupPkt.EPDir == 0)
 10494  07B2  0020               	movlb	0	; select bank0
 10495  07B3  1BC4               	btfsc	68,7	;volatile
 10496  07B4  2FB9               	goto	l6527
 10497                           
 10498                           ;usb_device.c: 3060: {
 10499                           ;usb_device.c: 3061: ep_data_out[SetupPkt.EPNum].bits.transfer_terminated = 0;
 10500  07B5  0844               	movf	68,w	;volatile
 10501  07B6  390F               	andlw	15
 10502  07B7  3E2C               	addlw	_ep_data_out& (0+255)
 10503  07B8  2FBC               	goto	L14
 10504  07B9                     l6527:	
 10505                           ;usb_device.c: 3062: }
 10506                           
 10507                           
 10508                           ;usb_device.c: 3063: else
 10509                           ;usb_device.c: 3064: {
 10510                           ;usb_device.c: 3065: ep_data_in[SetupPkt.EPNum].bits.transfer_terminated = 0;
 10511  07B9  0844               	movf	68,w	;volatile
 10512  07BA  390F               	andlw	15
 10513  07BB  3E2A               	addlw	_ep_data_in& (0+255)
 10514  07BC                     L14:	
 10515  07BC  0086               	movwf	6
 10516  07BD  3001               	movlw	1	; select bank2/3
 10517  07BE  0087               	movwf	7
 10518  07BF  1081               	bcf	1,1
 10519                           
 10520                           ;usb_device.c: 3066: }
 10521                           ;usb_device.c: 3068: p->STAT.Val &= ~(0x80 | 0x40 | 0x04);
 10522  07C0  303B               	movlw	59
 10523  07C1  0021               	movlb	1	; select bank1
 10524  07C2  00A6               	movwf	??_USBStdFeatureReqHandler^(0+128)
 10525  07C3  082B               	movf	USBStdFeatureReqHandler@p^(0+128),w
 10526  07C4  0086               	movwf	6
 10527  07C5  0187               	clrf	7
 10528  07C6  0826               	movf	??_USBStdFeatureReqHandler^(0+128),w
 10529  07C7  0581               	andwf	1,f
 10530                           
 10531                           ;usb_device.c: 3071: USER_USB_CALLBACK_EVENT_HANDLER(EVENT_TRANSFER_TERMINATED,p,sizeof(
      +                          p));
 10532  07C8  3005               	movlw	5
 10533  07C9  00A0               	movwf	?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)
 10534  07CA  3000               	movlw	0
 10535  07CB  00A1               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)+1)
 10536  07CC  082B               	movf	USBStdFeatureReqHandler@p^(0+128),w
 10537  07CD  00A2               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER+2)^(0+128)
 10538  07CE  3000               	movlw	0
 10539  07CF  00A3               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER+3)^(0+128)
 10540  07D0  3001               	movlw	1
 10541  07D1  00A4               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)+4)
 10542  07D2  3000               	movlw	0
 10543  07D3  00A5               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)+5)
 10544  07D4  319E  26EB  3186   	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
 10545                           
 10546                           ;usb_device.c: 3072: }
 10547  07D7  2FE0               	goto	l6533
 10548  07D8                     l6531:	
 10549                           
 10550                           ;usb_device.c: 3073: else
 10551                           ;usb_device.c: 3074: {
 10552                           ;usb_device.c: 3076: p->STAT.Val &= ~(0x80 | 0x40 | 0x04);
 10553  07D8  303B               	movlw	59
 10554  07D9  0021               	movlb	1	; select bank1
 10555  07DA  00A6               	movwf	??_USBStdFeatureReqHandler^(0+128)
 10556  07DB  082B               	movf	USBStdFeatureReqHandler@p^(0+128),w
 10557  07DC  0086               	movwf	6
 10558  07DD  0187               	clrf	7
 10559  07DE  0826               	movf	??_USBStdFeatureReqHandler^(0+128),w
 10560  07DF  0581               	andwf	1,f
 10561  07E0                     l6533:	
 10562                           
 10563                           ;usb_device.c: 3077: }
 10564                           ;usb_device.c: 3124: pUEP = (unsigned char*)(&UEP0+SetupPkt.EPNum);
 10565  07E0  0020               	movlb	0	; select bank0
 10566  07E1  0844               	movf	68,w	;volatile
 10567  07E2  390F               	andlw	15
 10568  07E3  3E98               	addlw	152
 10569  07E4  0021               	movlb	1	; select bank1
 10570  07E5  00A6               	movwf	??_USBStdFeatureReqHandler^(0+128)
 10571  07E6  01A7               	clrf	(??_USBStdFeatureReqHandler^(0+128)+1)
 10572  07E7  300E               	movlw	14
 10573  07E8  3DA7               	addwfc	(??_USBStdFeatureReqHandler^(0+128)+1),f
 10574  07E9  0826               	movf	??_USBStdFeatureReqHandler^(0+128),w
 10575  07EA  00A8               	movwf	USBStdFeatureReqHandler@pUEP^(0+128)
 10576  07EB  0827               	movf	(??_USBStdFeatureReqHandler+1)^(0+128),w
 10577  07EC  00A9               	movwf	(USBStdFeatureReqHandler@pUEP+1)^(0+128)
 10578                           
 10579                           ;usb_device.c: 3128: *pUEP &= ~0x0001;
 10580  07ED  30FE               	movlw	254
 10581  07EE  00A6               	movwf	??_USBStdFeatureReqHandler^(0+128)
 10582  07EF  0828               	movf	USBStdFeatureReqHandler@pUEP^(0+128),w
 10583  07F0  0086               	movwf	6
 10584  07F1  0829               	movf	(USBStdFeatureReqHandler@pUEP+1)^(0+128),w
 10585  07F2  0087               	movwf	7
 10586  07F3  0826               	movf	??_USBStdFeatureReqHandler^(0+128),w
 10587  07F4  0581               	andwf	1,f
 10588  07F5  0008               	return
 10589  07F6                     __end_of_USBStdFeatureReqHandler:	
 10590                           
 10591                           	psect	text37
 10592  10A1                     __ptext37:	
 10593 ;; *************** function _USBStdGetStatusHandler *****************
 10594 ;; Defined at:
 10595 ;;		line 2283 in file "../USB/usb_device.c"
 10596 ;; Parameters:    Size  Location     Type
 10597 ;;		None
 10598 ;; Auto vars:     Size  Location     Type
 10599 ;;  p               1    9[BANK0 ] PTR struct __BDT
 10600 ;;		 -> NULL(0), BDT(32), 
 10601 ;; Return value:  Size  Location     Type
 10602 ;;		None               void
 10603 ;; Registers used:
 10604 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 10605 ;; Tracked objects:
 10606 ;;		On entry : 0/0
 10607 ;;		On exit  : 0/0
 10608 ;;		Unchanged: 0/0
 10609 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10610 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10611 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10612 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10613 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10614 ;;Total ram usage:        2 bytes
 10615 ;; Hardware stack levels used:    1
 10616 ;; Hardware stack levels required when called:    4
 10617 ;; This function calls:
 10618 ;;		Nothing
 10619 ;; This function is called by:
 10620 ;;		_USBCheckStdRequest
 10621 ;; This function uses a non-reentrant model
 10622 ;;
 10623                           
 10624                           
 10625                           ;psect for function _USBStdGetStatusHandler
 10626  10A1                     _USBStdGetStatusHandler:	
 10627                           
 10628                           ;usb_device.c: 2284: CtrlTrfData[0] = 0;
 10629                           
 10630                           ;incstack = 0
 10631                           ; Regs used in _USBStdGetStatusHandler: [wreg-fsr1h+status,2+status,0]
 10632  10A1  0020               	movlb	0	; select bank0
 10633  10A2  01C8               	clrf	72	;volatile
 10634                           
 10635                           ;usb_device.c: 2285: CtrlTrfData[1] = 0;
 10636  10A3  3000               	movlw	0
 10637  10A4  00C9               	movwf	73	;volatile
 10638                           
 10639                           ;usb_device.c: 2287: switch(SetupPkt.Recipient)
 10640  10A5  28D9               	goto	l4701
 10641  10A6                     l271:	
 10642                           ;usb_device.c: 2288: {
 10643                           ;usb_device.c: 2289: case (0x00):
 10644                           
 10645                           
 10646                           ;usb_device.c: 2295: if(1 == 1)
 10647  10A6  0022               	movlb	2	; select bank2
 10648  10A7  17CF               	bsf	(_inPipes^(0+256)+2),7
 10649                           
 10650                           ;usb_device.c: 2296: {
 10651                           ;usb_device.c: 2297: CtrlTrfData[0]|=0x01;
 10652  10A8  0020               	movlb	0	; select bank0
 10653  10A9  1448               	bsf	72,0	;volatile
 10654                           
 10655                           ;usb_device.c: 2298: }
 10656                           ;usb_device.c: 2300: if(RemoteWakeup == TRUE)
 10657  10AA  0022               	movlb	2	; select bank2
 10658  10AB  0838               	movf	_RemoteWakeup^(0+256),w
 10659  10AC  3A01               	xorlw	1
 10660  10AD  1D03               	skipz
 10661  10AE  28E5               	goto	l274
 10662                           
 10663                           ;usb_device.c: 2301: {
 10664                           ;usb_device.c: 2302: CtrlTrfData[0]|=0x02;
 10665  10AF  0020               	movlb	0	; select bank0
 10666  10B0  14C8               	bsf	72,1	;volatile
 10667                           
 10668                           ;usb_device.c: 2303: }
 10669                           ;usb_device.c: 2304: break;
 10670  10B1  28E5               	goto	l274
 10671  10B2                     l275:	
 10672                           ;usb_device.c: 2305: case (0x01):
 10673                           
 10674                           
 10675                           ;usb_device.c: 2306: inPipes[0].info.bits.busy = 1;
 10676  10B2  0022               	movlb	2	; select bank2
 10677  10B3  17CF               	bsf	(_inPipes^(0+256)+2),7
 10678                           
 10679                           ;usb_device.c: 2307: break;
 10680  10B4  28E5               	goto	l274
 10681  10B5                     l276:	
 10682                           ;usb_device.c: 2308: case (0x02):
 10683                           
 10684                           
 10685                           ;usb_device.c: 2309: inPipes[0].info.bits.busy = 1;
 10686  10B5  0022               	movlb	2	; select bank2
 10687  10B6  17CF               	bsf	(_inPipes^(0+256)+2),7
 10688                           
 10689                           ;usb_device.c: 2313: {
 10690                           ;usb_device.c: 2314: BDT_ENTRY *p;
 10691                           ;usb_device.c: 2316: if(SetupPkt.EPDir == 0)
 10692  10B7  0020               	movlb	0	; select bank0
 10693  10B8  1BC4               	btfsc	68,7	;volatile
 10694  10B9  28C1               	goto	l4691
 10695                           
 10696                           ;usb_device.c: 2317: {
 10697                           ;usb_device.c: 2318: p = (BDT_ENTRY*)pBDTEntryOut[SetupPkt.EPNum];
 10698  10BA  0844               	movf	68,w	;volatile
 10699  10BB  390F               	andlw	15
 10700  10BC  3E2E               	addlw	_pBDTEntryOut& (0+255)
 10701  10BD  0086               	movwf	6
 10702  10BE  3001               	movlw	1	; select bank2/3
 10703  10BF  0087               	movwf	7
 10704  10C0  28C6               	goto	L15
 10705  10C1                     l4691:	
 10706                           ;usb_device.c: 2319: }
 10707                           
 10708                           
 10709                           ;usb_device.c: 2320: else
 10710                           ;usb_device.c: 2321: {
 10711                           ;usb_device.c: 2322: p = (BDT_ENTRY*)pBDTEntryIn[SetupPkt.EPNum];
 10712  10C1  0844               	movf	68,w	;volatile
 10713  10C2  390F               	andlw	15
 10714  10C3  3E68               	addlw	_pBDTEntryIn& (0+255)
 10715  10C4  0086               	movwf	6
 10716  10C5  0187               	clrf	7
 10717  10C6                     L15:	
 10718  10C6  0801               	movf	1,w
 10719  10C7  00D8               	movwf	??_USBStdGetStatusHandler
 10720  10C8  0858               	movf	??_USBStdGetStatusHandler,w
 10721  10C9  00D9               	movwf	USBStdGetStatusHandler@p
 10722                           
 10723                           ;usb_device.c: 2323: }
 10724                           ;usb_device.c: 2325: if((p->STAT.UOWN == 1) && (p->STAT.BSTALL == 1))
 10725  10CA  0859               	movf	USBStdGetStatusHandler@p,w
 10726  10CB  0086               	movwf	6
 10727  10CC  0187               	clrf	7
 10728  10CD  1F81               	btfss	1,7
 10729  10CE  28E5               	goto	l274
 10730  10CF  0859               	movf	USBStdGetStatusHandler@p,w
 10731  10D0  0086               	movwf	6
 10732  10D1  0187               	clrf	7
 10733  10D2  1D01               	btfss	1,2
 10734  10D3  28E5               	goto	l274
 10735                           
 10736                           ;usb_device.c: 2326: CtrlTrfData[0]=0x01;
 10737  10D4  3001               	movlw	1
 10738  10D5  00D8               	movwf	??_USBStdGetStatusHandler
 10739  10D6  0858               	movf	??_USBStdGetStatusHandler,w
 10740  10D7  00C8               	movwf	72	;volatile
 10741                           
 10742                           ;usb_device.c: 2328: }
 10743                           ;usb_device.c: 2329: }
 10744                           
 10745                           ;usb_device.c: 2327: break;
 10746  10D8  28E5               	goto	l274
 10747  10D9                     l4701:	
 10748  10D9  0840               	movf	64,w	;volatile
 10749  10DA  391F               	andlw	31
 10750                           
 10751                           ; Switch size 1, requested type "space"
 10752                           ; Number of cases is 3, Range of values is 0 to 2
 10753                           ; switch strategies available:
 10754                           ; Name         Instructions Cycles
 10755                           ; simple_byte           10     6 (average)
 10756                           ; direct_byte           12     6 (fixed)
 10757                           ; jumptable            260     6 (fixed)
 10758                           ; rangetable             7     4 (fixed)
 10759                           ; spacedrange           11     6 (fixed)
 10760                           ; locatedrange           3     3 (fixed)
 10761                           ;	Chosen strategy is simple_byte
 10762  10DB  3A00               	xorlw	0	; case 0
 10763  10DC  1903               	skipnz
 10764  10DD  28A6               	goto	l271
 10765  10DE  3A01               	xorlw	1	; case 1
 10766  10DF  1903               	skipnz
 10767  10E0  28B2               	goto	l275
 10768  10E1  3A03               	xorlw	3	; case 2
 10769  10E2  1903               	skipnz
 10770  10E3  28B5               	goto	l276
 10771  10E4  28E5               	goto	l274
 10772  10E5                     l274:	
 10773                           
 10774                           ;usb_device.c: 2331: if(inPipes[0].info.bits.busy == 1)
 10775  10E5  0022               	movlb	2	; select bank2
 10776  10E6  1FCF               	btfss	(_inPipes^(0+256)+2),7
 10777  10E7  0008               	return
 10778                           
 10779                           ;usb_device.c: 2332: {
 10780                           ;usb_device.c: 2333: inPipes[0].pSrc.bRam = (BYTE*)&CtrlTrfData;
 10781  10E8  3048               	movlw	72
 10782  10E9  00CD               	movwf	_inPipes^(0+256)
 10783  10EA  3000               	movlw	0
 10784  10EB  00CE               	movwf	(_inPipes+1)^(0+256)
 10785                           
 10786                           ;usb_device.c: 2334: inPipes[0].info.bits.ctrl_trf_mem = 0x01;
 10787  10EC  144F               	bsf	(_inPipes^(0+256)+2),0
 10788                           
 10789                           ;usb_device.c: 2335: inPipes[0].wCount.v[0] = 2;
 10790  10ED  3002               	movlw	2
 10791  10EE  0020               	movlb	0	; select bank0
 10792  10EF  00D8               	movwf	??_USBStdGetStatusHandler
 10793  10F0  0858               	movf	??_USBStdGetStatusHandler,w
 10794  10F1  0022               	movlb	2	; select bank2
 10795  10F2  00D0               	movwf	(_inPipes^(0+256)+3)
 10796  10F3  0008               	return
 10797  10F4                     __end_of_USBStdGetStatusHandler:	
 10798                           
 10799                           	psect	text38
 10800  1557                     __ptext38:	
 10801 ;; *************** function _USBStdGetDscHandler *****************
 10802 ;; Defined at:
 10803 ;;		line 2207 in file "../USB/usb_device.c"
 10804 ;; Parameters:    Size  Location     Type
 10805 ;;		None
 10806 ;; Auto vars:     Size  Location     Type
 10807 ;;		None
 10808 ;; Return value:  Size  Location     Type
 10809 ;;		None               void
 10810 ;; Registers used:
 10811 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
 10812 ;; Tracked objects:
 10813 ;;		On entry : 0/0
 10814 ;;		On exit  : 0/0
 10815 ;;		Unchanged: 0/0
 10816 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10817 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10818 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10819 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10820 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10821 ;;Total ram usage:        3 bytes
 10822 ;; Hardware stack levels used:    1
 10823 ;; Hardware stack levels required when called:    4
 10824 ;; This function calls:
 10825 ;;		Nothing
 10826 ;; This function is called by:
 10827 ;;		_USBCheckStdRequest
 10828 ;; This function uses a non-reentrant model
 10829 ;;
 10830                           
 10831                           
 10832                           ;psect for function _USBStdGetDscHandler
 10833  1557                     _USBStdGetDscHandler:	
 10834                           
 10835                           ;usb_device.c: 2208: if(SetupPkt.bmRequestType == 0x80)
 10836                           
 10837                           ;incstack = 0
 10838                           ; Regs used in _USBStdGetDscHandler: [wreg-fsr0h+status,2+status,0+pclath]
 10839  1557  0020               	movlb	0	; select bank0
 10840  1558  0840               	movf	64,w	;volatile
 10841  1559  3A80               	xorlw	128
 10842  155A  1D03               	skipz
 10843  155B  0008               	return
 10844                           
 10845                           ;usb_device.c: 2209: {
 10846                           ;usb_device.c: 2210: inPipes[0].info.Val = 0x00 | 0x80 | 0x40;
 10847  155C  30C0               	movlw	192
 10848  155D  00D8               	movwf	??_USBStdGetDscHandler
 10849  155E  0858               	movf	??_USBStdGetDscHandler,w
 10850  155F  0022               	movlb	2	; select bank2
 10851  1560  00CF               	movwf	(_inPipes^(0+256)+2)
 10852                           
 10853                           ;usb_device.c: 2212: switch(SetupPkt.bDescriptorType)
 10854  1561  2DC9               	goto	l4679
 10855  1562                     l4659:	
 10856                           ;usb_device.c: 2213: {
 10857                           ;usb_device.c: 2214: case 0x01:
 10858                           
 10859                           
 10860                           ;usb_device.c: 2218: inPipes[0].pSrc.bRom = (const BYTE*)&device_dsc;
 10861  1562  308D               	movlw	low (_device_dsc| (0+32768))
 10862  1563  0022               	movlb	2	; select bank2
 10863  1564  00CD               	movwf	_inPipes^(0+256)
 10864  1565  3088               	movlw	high (_device_dsc| (0+32768))
 10865  1566  00CE               	movwf	(_inPipes+1)^(0+256)
 10866                           
 10867                           ;usb_device.c: 2220: inPipes[0].wCount.Val = sizeof(device_dsc);
 10868  1567  3012               	movlw	18
 10869  1568  00D0               	movwf	(_inPipes^(0+256)+3)
 10870  1569  3000               	movlw	0
 10871  156A  00D1               	movwf	(_inPipes^(0+256)+4)
 10872                           
 10873                           ;usb_device.c: 2221: break;
 10874  156B  0008               	return
 10875  156C                     l4661:	
 10876                           ;usb_device.c: 2222: case 0x02:
 10877                           
 10878                           
 10879                           ;usb_device.c: 2226: inPipes[0].pSrc.bRom = *(USB_CD_Ptr+SetupPkt.bDscIndex);
 10880  156C  3004               	movlw	low (_USB_CD_Ptr| (0+32768))
 10881  156D  0084               	movwf	4
 10882  156E  3088               	movlw	high (_USB_CD_Ptr| (0+32768))
 10883  156F  0085               	movwf	5
 10884  1570  0020               	movlb	0	; select bank0
 10885  1571  0842               	movf	66,w	;volatile
 10886  1572  0784               	addwf	4,f
 10887  1573  1803               	skipnc
 10888  1574  0A85               	incf	5,f
 10889  1575  3F00               	moviw [0]fsr0
 10890  1576  0022               	movlb	2	; select bank2
 10891  1577  00CD               	movwf	_inPipes^(0+256)
 10892  1578  3088               	movlw	(high __stringtab)| (0+128)
 10893  1579  00CE               	movwf	(_inPipes+1)^(0+256)
 10894                           
 10895                           ;usb_device.c: 2232: inPipes[0].wCount.byte.LB = *(inPipes[0].pSrc.bRom+2);
 10896  157A  084E               	movf	(_inPipes+1)^(0+256),w
 10897  157B  0020               	movlb	0	; select bank0
 10898  157C  00D9               	movwf	??_USBStdGetDscHandler+1
 10899  157D  0022               	movlb	2	; select bank2
 10900  157E  084D               	movf	_inPipes^(0+256),w
 10901  157F  0020               	movlb	0	; select bank0
 10902  1580  00D8               	movwf	??_USBStdGetDscHandler
 10903  1581  3002               	movlw	2
 10904  1582  0758               	addwf	??_USBStdGetDscHandler,w
 10905  1583  0084               	movwf	4
 10906  1584  0859               	movf	??_USBStdGetDscHandler+1,w
 10907  1585  1803               	skipnc
 10908  1586  0A59               	incf	??_USBStdGetDscHandler+1,w
 10909  1587  0085               	movwf	5
 10910  1588  0800               	movf	0,w	;code access
 10911  1589  00DA               	movwf	??_USBStdGetDscHandler+2
 10912  158A  085A               	movf	??_USBStdGetDscHandler+2,w
 10913  158B  0022               	movlb	2	; select bank2
 10914  158C  00D0               	movwf	(_inPipes^(0+256)+3)
 10915                           
 10916                           ;usb_device.c: 2233: inPipes[0].wCount.byte.HB = *(inPipes[0].pSrc.bRom+3);
 10917  158D  084E               	movf	(_inPipes+1)^(0+256),w
 10918  158E  0020               	movlb	0	; select bank0
 10919  158F  00D9               	movwf	??_USBStdGetDscHandler+1
 10920  1590  0022               	movlb	2	; select bank2
 10921  1591  084D               	movf	_inPipes^(0+256),w
 10922  1592  0020               	movlb	0	; select bank0
 10923  1593  00D8               	movwf	??_USBStdGetDscHandler
 10924  1594  3003               	movlw	3
 10925  1595  0758               	addwf	??_USBStdGetDscHandler,w
 10926  1596  0084               	movwf	4
 10927  1597  0859               	movf	??_USBStdGetDscHandler+1,w
 10928  1598  1803               	skipnc
 10929  1599  0A59               	incf	??_USBStdGetDscHandler+1,w
 10930  159A  0085               	movwf	5
 10931  159B  0800               	movf	0,w	;code access
 10932  159C  00DA               	movwf	??_USBStdGetDscHandler+2
 10933  159D  085A               	movf	??_USBStdGetDscHandler+2,w
 10934  159E  0022               	movlb	2	; select bank2
 10935  159F  00D1               	movwf	(_inPipes^(0+256)+4)
 10936                           
 10937                           ;usb_device.c: 2234: break;
 10938  15A0  0008               	return
 10939  15A1                     l4667:	
 10940                           ;usb_device.c: 2235: case 0x03:
 10941                           
 10942                           
 10943                           ;usb_device.c: 2239: if(SetupPkt.bDscIndex<3)
 10944  15A1  3003               	movlw	3
 10945  15A2  0020               	movlb	0	; select bank0
 10946  15A3  0242               	subwf	66,w	;volatile
 10947  15A4  1803               	skipnc
 10948  15A5  2DC3               	goto	l4673
 10949                           
 10950                           ;usb_device.c: 2240: {
 10951                           ;usb_device.c: 2242: inPipes[0].pSrc.bRom = *(USB_SD_Ptr+SetupPkt.bDscIndex);
 10952  15A6  3001               	movlw	low (_USB_SD_Ptr| (0+32768))
 10953  15A7  0084               	movwf	4
 10954  15A8  3088               	movlw	high (_USB_SD_Ptr| (0+32768))
 10955  15A9  0085               	movwf	5
 10956  15AA  0842               	movf	66,w	;volatile
 10957  15AB  0784               	addwf	4,f
 10958  15AC  1803               	skipnc
 10959  15AD  0A85               	incf	5,f
 10960  15AE  3F00               	moviw [0]fsr0
 10961  15AF  0022               	movlb	2	; select bank2
 10962  15B0  00CD               	movwf	_inPipes^(0+256)
 10963  15B1  3088               	movlw	(high __stringtab)| (0+128)
 10964  15B2  00CE               	movwf	(_inPipes+1)^(0+256)
 10965                           
 10966                           ;usb_device.c: 2244: inPipes[0].wCount.Val = *inPipes[0].pSrc.bRom;
 10967  15B3  084D               	movf	_inPipes^(0+256),w
 10968  15B4  0084               	movwf	4
 10969  15B5  084E               	movf	(_inPipes+1)^(0+256),w
 10970  15B6  0085               	movwf	5
 10971  15B7  0800               	movf	0,w	;code access
 10972  15B8  0020               	movlb	0	; select bank0
 10973  15B9  00D8               	movwf	??_USBStdGetDscHandler
 10974  15BA  01D9               	clrf	??_USBStdGetDscHandler+1
 10975  15BB  0858               	movf	??_USBStdGetDscHandler,w
 10976  15BC  0022               	movlb	2	; select bank2
 10977  15BD  00D0               	movwf	(_inPipes^(0+256)+3)
 10978  15BE  0020               	movlb	0	; select bank0
 10979  15BF  0859               	movf	??_USBStdGetDscHandler+1,w
 10980  15C0  0022               	movlb	2	; select bank2
 10981  15C1  00D1               	movwf	((_inPipes+1)^(0+256)+3)
 10982                           
 10983                           ;usb_device.c: 2245: }
 10984  15C2  0008               	return
 10985  15C3                     l4673:	
 10986                           
 10987                           ;usb_device.c: 2255: else
 10988                           ;usb_device.c: 2256: {
 10989                           ;usb_device.c: 2257: inPipes[0].info.Val = 0;
 10990  15C3  0022               	movlb	2	; select bank2
 10991  15C4  01CF               	clrf	(_inPipes^(0+256)+2)
 10992                           
 10993                           ;usb_device.c: 2258: }
 10994                           ;usb_device.c: 2259: break;
 10995  15C5  0008               	return
 10996  15C6                     l4675:	
 10997                           ;usb_device.c: 2260: default:
 10998                           
 10999                           
 11000                           ;usb_device.c: 2261: inPipes[0].info.Val = 0;
 11001  15C6  0022               	movlb	2	; select bank2
 11002  15C7  01CF               	clrf	(_inPipes^(0+256)+2)
 11003                           
 11004                           ;usb_device.c: 2263: }
 11005                           
 11006                           ;usb_device.c: 2262: break;
 11007  15C8  0008               	return
 11008  15C9                     l4679:	
 11009  15C9  0020               	movlb	0	; select bank0
 11010  15CA  0843               	movf	67,w	;volatile
 11011                           
 11012                           ; Switch size 1, requested type "space"
 11013                           ; Number of cases is 3, Range of values is 1 to 3
 11014                           ; switch strategies available:
 11015                           ; Name         Instructions Cycles
 11016                           ; simple_byte           10     6 (average)
 11017                           ; direct_byte           15     9 (fixed)
 11018                           ; jumptable            263     9 (fixed)
 11019                           ;	Chosen strategy is simple_byte
 11020  15CB  3A01               	xorlw	1	; case 1
 11021  15CC  1903               	skipnz
 11022  15CD  2D62               	goto	l4659
 11023  15CE  3A03               	xorlw	3	; case 2
 11024  15CF  1903               	skipnz
 11025  15D0  2D6C               	goto	l4661
 11026  15D1  3A01               	xorlw	1	; case 3
 11027  15D2  1903               	skipnz
 11028  15D3  2DA1               	goto	l4667
 11029  15D4  2DC6               	goto	l4675
 11030  15D5  0008               	return
 11031  15D6                     __end_of_USBStdGetDscHandler:	
 11032                           
 11033                           	psect	text39
 11034  1771                     __ptext39:	
 11035 ;; *************** function _USBStdSetCfgHandler *****************
 11036 ;; Defined at:
 11037 ;;		line 2132 in file "../USB/usb_device.c"
 11038 ;; Parameters:    Size  Location     Type
 11039 ;;		None
 11040 ;; Auto vars:     Size  Location     Type
 11041 ;;  p               2    7[BANK1 ] PTR unsigned char 
 11042 ;;		 -> UEP1(1), 
 11043 ;;  i               1    9[BANK1 ] unsigned char 
 11044 ;;  i               1   10[BANK1 ] unsigned char 
 11045 ;; Return value:  Size  Location     Type
 11046 ;;		None               void
 11047 ;; Registers used:
 11048 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11049 ;; Tracked objects:
 11050 ;;		On entry : 0/0
 11051 ;;		On exit  : 0/0
 11052 ;;		Unchanged: 0/0
 11053 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11054 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11055 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
 11056 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 11057 ;;      Totals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
 11058 ;;Total ram usage:        5 bytes
 11059 ;; Hardware stack levels used:    1
 11060 ;; Hardware stack levels required when called:    8
 11061 ;; This function calls:
 11062 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 11063 ;;		_memset
 11064 ;; This function is called by:
 11065 ;;		_USBCheckStdRequest
 11066 ;; This function uses a non-reentrant model
 11067 ;;
 11068                           
 11069                           
 11070                           ;psect for function _USBStdSetCfgHandler
 11071  1771                     _USBStdSetCfgHandler:	
 11072                           
 11073                           ;usb_device.c: 2133: BYTE i;
 11074                           ;usb_device.c: 2136: inPipes[0].info.bits.busy = 1;
 11075                           
 11076                           ;incstack = 0
 11077                           ; Regs used in _USBStdSetCfgHandler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11078  1771  0022               	movlb	2	; select bank2
 11079  1772  17CF               	bsf	(_inPipes^(0+256)+2),7
 11080                           
 11081                           ;usb_device.c: 2139: { BYTE i; BYTE* p = (BYTE*)&UEP1; for(i=0;i<1;i++) *p++ = 0; };
 11082  1773  300E               	movlw	14
 11083  1774  0021               	movlb	1	; select bank1
 11084  1775  00A8               	movwf	(USBStdSetCfgHandler@p+1)^(0+128)
 11085  1776  3099               	movlw	153
 11086  1777  00A7               	movwf	USBStdSetCfgHandler@p^(0+128)
 11087  1778  01A9               	clrf	USBStdSetCfgHandler@i_1089^(0+128)
 11088  1779  0829               	movf	USBStdSetCfgHandler@i_1089^(0+128),w
 11089  177A  1D03               	skipz
 11090  177B  2F8C               	goto	l6357
 11091  177C                     l6349:	
 11092  177C  0827               	movf	USBStdSetCfgHandler@p^(0+128),w
 11093  177D  0086               	movwf	6
 11094  177E  0828               	movf	(USBStdSetCfgHandler@p+1)^(0+128),w
 11095  177F  0087               	movwf	7
 11096  1780  0181               	clrf	1
 11097  1781  3001               	movlw	1
 11098  1782  07A7               	addwf	USBStdSetCfgHandler@p^(0+128),f
 11099  1783  3000               	movlw	0
 11100  1784  3DA8               	addwfc	(USBStdSetCfgHandler@p+1)^(0+128),f
 11101  1785  3001               	movlw	1
 11102  1786  00A6               	movwf	??_USBStdSetCfgHandler^(0+128)
 11103  1787  0826               	movf	??_USBStdSetCfgHandler^(0+128),w
 11104  1788  07A9               	addwf	USBStdSetCfgHandler@i_1089^(0+128),f
 11105  1789  0829               	movf	USBStdSetCfgHandler@i_1089^(0+128),w
 11106  178A  1903               	btfsc	3,2
 11107  178B  2F7C               	goto	l6349
 11108  178C                     l6357:	
 11109                           
 11110                           ;usb_device.c: 2142: memset((void*)&BDT[0], 0x00, sizeof(BDT));
 11111  178C  3020               	movlw	32
 11112  178D  0020               	movlb	0	; select bank0
 11113  178E  00D8               	movwf	?_memset
 11114  178F  3000               	movlw	0
 11115  1790  00D9               	movwf	?_memset+1
 11116  1791  3000               	movlw	0
 11117  1792  00DA               	movwf	?_memset+2
 11118  1793  3000               	movlw	0
 11119  1794  00DB               	movwf	?_memset+3
 11120  1795  3020               	movlw	32
 11121  1796  00DC               	movwf	?_memset+4
 11122  1797  3000               	movlw	0
 11123  1798  00DD               	movwf	?_memset+5
 11124  1799  319D  25A7  3197   	fcall	_memset
 11125                           
 11126                           ;usb_device.c: 2145: UCONbits.PPBRST = 1;
 11127  179C  003D               	movlb	29	; select bank29
 11128  179D  170E               	bsf	14,6	;volatile
 11129                           
 11130                           ;usb_device.c: 2150: for(i = 0; i < (BYTE)(1+1u); i++)
 11131  179E  0021               	movlb	1	; select bank1
 11132  179F  01AA               	clrf	USBStdSetCfgHandler@i^(0+128)
 11133  17A0  3002               	movlw	2
 11134  17A1  022A               	subwf	USBStdSetCfgHandler@i^(0+128),w
 11135  17A2  1803               	btfsc	3,0
 11136  17A3  2FB8               	goto	l6373
 11137  17A4                     l6367:	
 11138                           
 11139                           ;usb_device.c: 2151: {
 11140                           ;usb_device.c: 2152: ep_data_in[i].Val = 0u;
 11141  17A4  082A               	movf	USBStdSetCfgHandler@i^(0+128),w
 11142  17A5  3E2A               	addlw	_ep_data_in& (0+255)
 11143  17A6  0086               	movwf	6
 11144  17A7  3001               	movlw	1	; select bank2/3
 11145  17A8  0087               	movwf	7
 11146  17A9  0181               	clrf	1
 11147                           
 11148                           ;usb_device.c: 2153: ep_data_out[i].Val = 0u;
 11149  17AA  082A               	movf	USBStdSetCfgHandler@i^(0+128),w
 11150  17AB  3E2C               	addlw	_ep_data_out& (0+255)
 11151  17AC  0086               	movwf	6
 11152  17AD  3001               	movlw	1	; select bank2/3
 11153  17AE  0087               	movwf	7
 11154  17AF  0181               	clrf	1
 11155  17B0  3001               	movlw	1
 11156  17B1  00A6               	movwf	??_USBStdSetCfgHandler^(0+128)
 11157  17B2  0826               	movf	??_USBStdSetCfgHandler^(0+128),w
 11158  17B3  07AA               	addwf	USBStdSetCfgHandler@i^(0+128),f
 11159  17B4  3002               	movlw	2
 11160  17B5  022A               	subwf	USBStdSetCfgHandler@i^(0+128),w
 11161  17B6  1C03               	skipc
 11162  17B7  2FA4               	goto	l6367
 11163  17B8                     l6373:	
 11164                           
 11165                           ;usb_device.c: 2154: }
 11166                           ;usb_device.c: 2157: memset((void*)&USBAlternateInterface,0x00,1);
 11167  17B8  3055               	movlw	low _USBAlternateInterface
 11168  17B9  0020               	movlb	0	; select bank0
 11169  17BA  00D8               	movwf	?_memset
 11170  17BB  3001               	movlw	high _USBAlternateInterface
 11171  17BC  00D9               	movwf	?_memset+1
 11172  17BD  3000               	movlw	0
 11173  17BE  00DA               	movwf	?_memset+2
 11174  17BF  3000               	movlw	0
 11175  17C0  00DB               	movwf	?_memset+3
 11176  17C1  3001               	movlw	1
 11177  17C2  00DC               	movwf	?_memset+4
 11178  17C3  3000               	movlw	0
 11179  17C4  00DD               	movwf	?_memset+5
 11180  17C5  319D  25A7  3197   	fcall	_memset
 11181                           
 11182                           ;usb_device.c: 2160: UCONbits.PPBRST = 0;
 11183  17C8  003D               	movlb	29	; select bank29
 11184  17C9  130E               	bcf	14,6	;volatile
 11185                           
 11186                           ;usb_device.c: 2162: pBDTEntryIn[0] = (volatile BDT_ENTRY*)&BDT[2];
 11187  17CA  3028               	movlw	40
 11188  17CB  0021               	movlb	1	; select bank1
 11189  17CC  00A6               	movwf	??_USBStdSetCfgHandler^(0+128)
 11190  17CD  0826               	movf	??_USBStdSetCfgHandler^(0+128),w
 11191  17CE  0020               	movlb	0	; select bank0
 11192  17CF  00E8               	movwf	_pBDTEntryIn
 11193                           
 11194                           ;usb_device.c: 2165: pBDTEntryEP0OutCurrent = (volatile BDT_ENTRY*)&BDT[0];
 11195  17D0  3020               	movlw	32
 11196  17D1  0021               	movlb	1	; select bank1
 11197  17D2  00A6               	movwf	??_USBStdSetCfgHandler^(0+128)
 11198  17D3  0826               	movf	??_USBStdSetCfgHandler^(0+128),w
 11199  17D4  0020               	movlb	0	; select bank0
 11200  17D5  00ED               	movwf	_pBDTEntryEP0OutCurrent
 11201                           
 11202                           ;usb_device.c: 2166: pBDTEntryEP0OutNext = pBDTEntryEP0OutCurrent;
 11203  17D6  086D               	movf	_pBDTEntryEP0OutCurrent,w
 11204  17D7  0021               	movlb	1	; select bank1
 11205  17D8  00A6               	movwf	??_USBStdSetCfgHandler^(0+128)
 11206  17D9  0826               	movf	??_USBStdSetCfgHandler^(0+128),w
 11207  17DA  0020               	movlb	0	; select bank0
 11208  17DB  00EE               	movwf	_pBDTEntryEP0OutNext
 11209                           
 11210                           ;usb_device.c: 2169: USBActiveConfiguration = SetupPkt.bConfigurationValue;
 11211  17DC  0842               	movf	66,w	;volatile
 11212  17DD  0021               	movlb	1	; select bank1
 11213  17DE  00A6               	movwf	??_USBStdSetCfgHandler^(0+128)
 11214  17DF  0826               	movf	??_USBStdSetCfgHandler^(0+128),w
 11215  17E0  0022               	movlb	2	; select bank2
 11216  17E1  00D4               	movwf	_USBActiveConfiguration^(0+256)
 11217                           
 11218                           ;usb_device.c: 2172: if(USBActiveConfiguration == 0)
 11219  17E2  08D4               	movf	_USBActiveConfiguration^(0+256),f
 11220  17E3  1D03               	skipz
 11221  17E4  2FEB               	goto	l6389
 11222                           
 11223                           ;usb_device.c: 2173: {
 11224                           ;usb_device.c: 2175: USBDeviceState = ADDRESS_STATE;
 11225  17E5  3010               	movlw	16
 11226  17E6  0021               	movlb	1	; select bank1
 11227  17E7  00A6               	movwf	??_USBStdSetCfgHandler^(0+128)
 11228  17E8  0826               	movf	??_USBStdSetCfgHandler^(0+128),w
 11229  17E9  00EE               	movwf	_USBDeviceState^(0+128)
 11230                           
 11231                           ;usb_device.c: 2176: }
 11232  17EA  0008               	return
 11233  17EB                     l6389:	
 11234                           
 11235                           ;usb_device.c: 2177: else
 11236                           ;usb_device.c: 2178: {
 11237                           ;usb_device.c: 2180: USER_USB_CALLBACK_EVENT_HANDLER(EVENT_CONFIGURED,(void*)&USBActiveC
      +                          onfiguration,1);
 11238  17EB  3001               	movlw	1
 11239  17EC  0021               	movlb	1	; select bank1
 11240  17ED  00A0               	movwf	?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)
 11241  17EE  3000               	movlw	0
 11242  17EF  00A1               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)+1)
 11243  17F0  3054               	movlw	low _USBActiveConfiguration
 11244  17F1  00A2               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER+2)^(0+128)
 11245  17F2  3001               	movlw	high _USBActiveConfiguration
 11246  17F3  00A3               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER+3)^(0+128)
 11247  17F4  3001               	movlw	1
 11248  17F5  00A4               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)+4)
 11249  17F6  3000               	movlw	0
 11250  17F7  00A5               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)+5)
 11251  17F8  319E  26EB         	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
 11252                           
 11253                           ;usb_device.c: 2185: USBDeviceState = CONFIGURED_STATE;
 11254  17FA  3020               	movlw	32
 11255  17FB  0021               	movlb	1	; select bank1
 11256  17FC  00A6               	movwf	??_USBStdSetCfgHandler^(0+128)
 11257  17FD  0826               	movf	??_USBStdSetCfgHandler^(0+128),w
 11258  17FE  00EE               	movwf	_USBDeviceState^(0+128)
 11259  17FF  0008               	return
 11260  1800                     __end_of_USBStdSetCfgHandler:	
 11261                           
 11262                           	psect	text40
 11263  1DA7                     __ptext40:	
 11264 ;; *************** function _memset *****************
 11265 ;; Defined at:
 11266 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.20\sources\common\memset.c"
 11267 ;; Parameters:    Size  Location     Type
 11268 ;;  p1              2    8[BANK0 ] PTR void 
 11269 ;;		 -> USBAlternateInterface(1), BDT(32), 
 11270 ;;  c               2   10[BANK0 ] int 
 11271 ;;  n               2   12[BANK0 ] unsigned int 
 11272 ;; Auto vars:     Size  Location     Type
 11273 ;;  p               2   15[BANK0 ] PTR unsigned char 
 11274 ;;		 -> USBAlternateInterface(1), BDT(32), 
 11275 ;; Return value:  Size  Location     Type
 11276 ;;                  2    wreg      PTR void 
 11277 ;; Registers used:
 11278 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11279 ;; Tracked objects:
 11280 ;;		On entry : 0/0
 11281 ;;		On exit  : 0/0
 11282 ;;		Unchanged: 0/0
 11283 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11284 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11285 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11286 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11287 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11288 ;;Total ram usage:        9 bytes
 11289 ;; Hardware stack levels used:    1
 11290 ;; Hardware stack levels required when called:    4
 11291 ;; This function calls:
 11292 ;;		Nothing
 11293 ;; This function is called by:
 11294 ;;		_USBStdSetCfgHandler
 11295 ;; This function uses a non-reentrant model
 11296 ;;
 11297                           
 11298                           
 11299                           ;psect for function _memset
 11300  1DA7                     _memset:	
 11301                           
 11302                           ;incstack = 0
 11303                           ; Regs used in _memset: [wreg+fsr1l+fsr1h+status,2+status,0]
 11304  1DA7  0020               	movlb	0	; select bank0
 11305  1DA8  0859               	movf	memset@p1+1,w
 11306  1DA9  01E0               	clrf	memset@p+1
 11307  1DAA  07E0               	addwf	memset@p+1,f
 11308  1DAB  0858               	movf	memset@p1,w
 11309  1DAC  01DF               	clrf	memset@p
 11310  1DAD  07DF               	addwf	memset@p,f
 11311  1DAE                     l4653:	
 11312  1DAE  3001               	movlw	1
 11313  1DAF  02DC               	subwf	memset@n,f
 11314  1DB0  3000               	movlw	0
 11315  1DB1  3BDD               	subwfb	memset@n+1,f
 11316  1DB2  30FF               	movlw	255
 11317  1DB3  065D               	xorwf	memset@n+1,w
 11318  1DB4  1D03               	skipz
 11319  1DB5  2DB8               	goto	u4305
 11320  1DB6  30FF               	movlw	255
 11321  1DB7  065C               	xorwf	memset@n,w
 11322  1DB8                     u4305:	
 11323  1DB8  1903               	btfsc	3,2
 11324  1DB9  0008               	return
 11325  1DBA  085A               	movf	memset@c,w
 11326  1DBB  00DE               	movwf	??_memset
 11327  1DBC  085F               	movf	memset@p,w
 11328  1DBD  0086               	movwf	6
 11329  1DBE  0860               	movf	memset@p+1,w
 11330  1DBF  0087               	movwf	7
 11331  1DC0  085E               	movf	??_memset,w
 11332  1DC1  0081               	movwf	1
 11333  1DC2  3001               	movlw	1
 11334  1DC3  07DF               	addwf	memset@p,f
 11335  1DC4  3000               	movlw	0
 11336  1DC5  3DE0               	addwfc	memset@p+1,f
 11337  1DC6  2DAE               	goto	l4653
 11338  1DC7                     __end_of_memset:	
 11339                           ;	Return value of _memset is never used
 11340                           
 11341                           
 11342                           	psect	text41
 11343  13E9                     __ptext41:	
 11344 ;; *************** function _USBCtrlEPServiceComplete *****************
 11345 ;; Defined at:
 11346 ;;		line 1786 in file "../USB/usb_device.c"
 11347 ;; Parameters:    Size  Location     Type
 11348 ;;		None
 11349 ;; Auto vars:     Size  Location     Type
 11350 ;;		None
 11351 ;; Return value:  Size  Location     Type
 11352 ;;		None               void
 11353 ;; Registers used:
 11354 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11355 ;; Tracked objects:
 11356 ;;		On entry : 0/0
 11357 ;;		On exit  : 0/0
 11358 ;;		Unchanged: 0/0
 11359 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11360 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11361 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11362 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11363 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11364 ;;Total ram usage:        2 bytes
 11365 ;; Hardware stack levels used:    1
 11366 ;; Hardware stack levels required when called:    6
 11367 ;; This function calls:
 11368 ;;		_USBCtrlEPAllowStatusStage
 11369 ;;		_USBCtrlEPAllowDataStage
 11370 ;; This function is called by:
 11371 ;;		_USBCtrlTrfSetupHandler
 11372 ;; This function uses a non-reentrant model
 11373 ;;
 11374                           
 11375                           
 11376                           ;psect for function _USBCtrlEPServiceComplete
 11377  13E9                     _USBCtrlEPServiceComplete:	
 11378                           
 11379                           ;usb_device.c: 1791: UCONbits.PKTDIS = 0;
 11380                           
 11381                           ;incstack = 0
 11382                           ; Regs used in _USBCtrlEPServiceComplete: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11383  13E9  003D               	movlb	29	; select bank29
 11384  13EA  120E               	bcf	14,4	;volatile
 11385                           
 11386                           ;usb_device.c: 1797: if(inPipes[0].info.bits.busy == 0)
 11387  13EB  0022               	movlb	2	; select bank2
 11388  13EC  1BCF               	btfsc	(_inPipes^(0+256)+2),7
 11389  13ED  2C22               	goto	l208
 11390                           
 11391                           ;usb_device.c: 1798: {
 11392                           ;usb_device.c: 1799: if(outPipes[0].info.bits.busy == 1)
 11393  13EE  1FA2               	btfss	(_outPipes^(0+256)+2),7
 11394  13EF  2BFF               	goto	l4525
 11395                           
 11396                           ;usb_device.c: 1800: {
 11397                           ;usb_device.c: 1801: controlTransferState = 2;
 11398  13F0  3002               	movlw	2
 11399  13F1  0020               	movlb	0	; select bank0
 11400  13F2  00DD               	movwf	??_USBCtrlEPServiceComplete
 11401  13F3  085D               	movf	??_USBCtrlEPServiceComplete,w
 11402  13F4  00EC               	movwf	_controlTransferState
 11403                           
 11404                           ;usb_device.c: 1812: if(USBDeferOUTDataStagePackets == FALSE)
 11405  13F5  0022               	movlb	2	; select bank2
 11406  13F6  08BF               	movf	_USBDeferOUTDataStagePackets^(0+256),f
 11407  13F7  1D03               	skipz
 11408  13F8  2BFB               	goto	l4521
 11409                           
 11410                           ;usb_device.c: 1813: {
 11411                           ;usb_device.c: 1814: USBCtrlEPAllowDataStage();
 11412  13F9  3190  2051         	fcall	_USBCtrlEPAllowDataStage
 11413  13FB                     l4521:	
 11414                           
 11415                           ;usb_device.c: 1815: }
 11416                           ;usb_device.c: 1819: USBStatusStageEnabledFlag2 = FALSE;
 11417  13FB  0022               	movlb	2	; select bank2
 11418  13FC  01C3               	clrf	_USBStatusStageEnabledFlag2^(0+256)	;volatile
 11419                           
 11420                           ;usb_device.c: 1820: USBStatusStageEnabledFlag1 = FALSE;
 11421  13FD  01C2               	clrf	_USBStatusStageEnabledFlag1^(0+256)	;volatile
 11422                           
 11423                           ;usb_device.c: 1821: }
 11424  13FE  0008               	return
 11425  13FF                     l4525:	
 11426                           
 11427                           ;usb_device.c: 1822: else
 11428                           ;usb_device.c: 1823: {
 11429                           ;usb_device.c: 1828: pBDTEntryEP0OutNext->CNT = 8;
 11430  13FF  3008               	movlw	8
 11431  1400  0020               	movlb	0	; select bank0
 11432  1401  00DD               	movwf	??_USBCtrlEPServiceComplete
 11433  1402  0A6E               	incf	_pBDTEntryEP0OutNext,w
 11434  1403  0086               	movwf	6
 11435  1404  0187               	clrf	7
 11436  1405  085D               	movf	??_USBCtrlEPServiceComplete,w
 11437  1406  0081               	movwf	1
 11438                           
 11439                           ;usb_device.c: 1829: pBDTEntryEP0OutNext->ADR = (((WORD)(&SetupPkt))& 0x7FFF);
 11440  1407  3040               	movlw	64
 11441  1408  00DD               	movwf	??_USBCtrlEPServiceComplete
 11442  1409  3000               	movlw	0
 11443  140A  00DE               	movwf	??_USBCtrlEPServiceComplete+1
 11444  140B  086E               	movf	_pBDTEntryEP0OutNext,w
 11445  140C  3E02               	addlw	2
 11446  140D  0086               	movwf	6
 11447  140E  0187               	clrf	7
 11448  140F  085D               	movf	??_USBCtrlEPServiceComplete,w
 11449  1410  3FC0               	movwi [0]fsr1
 11450  1411  085E               	movf	??_USBCtrlEPServiceComplete+1,w
 11451  1412  3FC1               	movwi [1]fsr1
 11452                           
 11453                           ;usb_device.c: 1830: pBDTEntryEP0OutNext->STAT.Val = 0x80|0x00|(0x08 & 0x08)|0x04;
 11454  1413  308C               	movlw	140
 11455  1414  00DD               	movwf	??_USBCtrlEPServiceComplete
 11456  1415  086E               	movf	_pBDTEntryEP0OutNext,w
 11457  1416  0086               	movwf	6
 11458  1417  0187               	clrf	7
 11459  1418  085D               	movf	??_USBCtrlEPServiceComplete,w
 11460  1419  0081               	movwf	1
 11461                           
 11462                           ;usb_device.c: 1831: pBDTEntryIn[0]->STAT.Val = 0x80|0x04;
 11463  141A  3084               	movlw	132
 11464  141B  00DD               	movwf	??_USBCtrlEPServiceComplete
 11465  141C  0868               	movf	_pBDTEntryIn,w
 11466  141D  0086               	movwf	6
 11467  141E  0187               	clrf	7
 11468  141F  085D               	movf	??_USBCtrlEPServiceComplete,w
 11469  1420  0081               	movwf	1
 11470                           
 11471                           ;usb_device.c: 1832: }
 11472                           ;usb_device.c: 1833: }
 11473  1421  0008               	return
 11474  1422                     l208:	
 11475                           
 11476                           ;usb_device.c: 1834: else
 11477                           ;usb_device.c: 1835: {
 11478                           ;usb_device.c: 1836: if(SetupPkt.DataDir == (0x80>>7))
 11479  1422  0020               	movlb	0	; select bank0
 11480  1423  1FC0               	btfss	64,7	;volatile
 11481  1424  2C38               	goto	l4541
 11482                           
 11483                           ;usb_device.c: 1837: {
 11484                           ;usb_device.c: 1838: controlTransferState = 1;
 11485  1425  01EC               	clrf	_controlTransferState
 11486  1426  0AEC               	incf	_controlTransferState,f
 11487                           
 11488                           ;usb_device.c: 1852: if(USBDeferINDataStagePackets == FALSE)
 11489  1427  0022               	movlb	2	; select bank2
 11490  1428  08BE               	movf	_USBDeferINDataStagePackets^(0+256),f
 11491  1429  1D03               	skipz
 11492  142A  2C2E               	goto	l4533
 11493                           
 11494                           ;usb_device.c: 1853: {
 11495                           ;usb_device.c: 1854: USBCtrlEPAllowDataStage();
 11496  142B  3190  2051  3193   	fcall	_USBCtrlEPAllowDataStage
 11497  142E                     l4533:	
 11498                           
 11499                           ;usb_device.c: 1855: }
 11500                           ;usb_device.c: 1877: USBStatusStageEnabledFlag2 = FALSE;
 11501  142E  0022               	movlb	2	; select bank2
 11502  142F  01C3               	clrf	_USBStatusStageEnabledFlag2^(0+256)	;volatile
 11503                           
 11504                           ;usb_device.c: 1878: USBStatusStageEnabledFlag1 = FALSE;
 11505  1430  01C2               	clrf	_USBStatusStageEnabledFlag1^(0+256)	;volatile
 11506                           
 11507                           ;usb_device.c: 1879: if(USBDeferStatusStagePacket == FALSE)
 11508  1431  0020               	movlb	0	; select bank0
 11509  1432  08EB               	movf	_USBDeferStatusStagePacket,f
 11510  1433  1D03               	skipz
 11511  1434  0008               	return
 11512                           
 11513                           ;usb_device.c: 1880: {
 11514                           ;usb_device.c: 1881: USBCtrlEPAllowStatusStage();
 11515  1435  3193  2385         	fcall	_USBCtrlEPAllowStatusStage
 11516                           
 11517                           ;usb_device.c: 1882: }
 11518                           ;usb_device.c: 1883: }
 11519  1437  0008               	return
 11520  1438                     l4541:	
 11521                           
 11522                           ;usb_device.c: 1884: else
 11523                           ;usb_device.c: 1885: {
 11524                           ;usb_device.c: 1896: controlTransferState = 2;
 11525  1438  3002               	movlw	2
 11526  1439  0020               	movlb	0	; select bank0
 11527  143A  00DD               	movwf	??_USBCtrlEPServiceComplete
 11528  143B  085D               	movf	??_USBCtrlEPServiceComplete,w
 11529  143C  00EC               	movwf	_controlTransferState
 11530                           
 11531                           ;usb_device.c: 1899: pBDTEntryEP0OutNext->CNT = 8;
 11532  143D  3008               	movlw	8
 11533  143E  00DD               	movwf	??_USBCtrlEPServiceComplete
 11534  143F  0A6E               	incf	_pBDTEntryEP0OutNext,w
 11535  1440  0086               	movwf	6
 11536  1441  0187               	clrf	7
 11537  1442  085D               	movf	??_USBCtrlEPServiceComplete,w
 11538  1443  0081               	movwf	1
 11539                           
 11540                           ;usb_device.c: 1900: pBDTEntryEP0OutNext->ADR = (((WORD)(&SetupPkt))& 0x7FFF);
 11541  1444  3040               	movlw	64
 11542  1445  00DD               	movwf	??_USBCtrlEPServiceComplete
 11543  1446  3000               	movlw	0
 11544  1447  00DE               	movwf	??_USBCtrlEPServiceComplete+1
 11545  1448  086E               	movf	_pBDTEntryEP0OutNext,w
 11546  1449  3E02               	addlw	2
 11547  144A  0086               	movwf	6
 11548  144B  0187               	clrf	7
 11549  144C  085D               	movf	??_USBCtrlEPServiceComplete,w
 11550  144D  3FC0               	movwi [0]fsr1
 11551  144E  085E               	movf	??_USBCtrlEPServiceComplete+1,w
 11552  144F  3FC1               	movwi [1]fsr1
 11553                           
 11554                           ;usb_device.c: 1901: pBDTEntryEP0OutNext->STAT.Val = 0x80|0x04;
 11555  1450  3084               	movlw	132
 11556  1451  00DD               	movwf	??_USBCtrlEPServiceComplete
 11557  1452  086E               	movf	_pBDTEntryEP0OutNext,w
 11558  1453  0086               	movwf	6
 11559  1454  0187               	clrf	7
 11560  1455  085D               	movf	??_USBCtrlEPServiceComplete,w
 11561  1456  0081               	movwf	1
 11562                           
 11563                           ;usb_device.c: 1904: USBStatusStageEnabledFlag2 = FALSE;
 11564  1457  0022               	movlb	2	; select bank2
 11565  1458  01C3               	clrf	_USBStatusStageEnabledFlag2^(0+256)	;volatile
 11566                           
 11567                           ;usb_device.c: 1905: USBStatusStageEnabledFlag1 = FALSE;
 11568  1459  01C2               	clrf	_USBStatusStageEnabledFlag1^(0+256)	;volatile
 11569                           
 11570                           ;usb_device.c: 1906: if(USBDeferStatusStagePacket == FALSE)
 11571  145A  0020               	movlb	0	; select bank0
 11572  145B  08EB               	movf	_USBDeferStatusStagePacket,f
 11573  145C  1D03               	skipz
 11574  145D  0008               	return
 11575                           
 11576                           ;usb_device.c: 1907: {
 11577                           ;usb_device.c: 1908: USBCtrlEPAllowStatusStage();
 11578  145E  3193  2385         	fcall	_USBCtrlEPAllowStatusStage
 11579  1460  0008               	return
 11580  1461                     __end_of_USBCtrlEPServiceComplete:	
 11581                           
 11582                           	psect	text42
 11583  1051                     __ptext42:	
 11584 ;; *************** function _USBCtrlEPAllowDataStage *****************
 11585 ;; Defined at:
 11586 ;;		line 1660 in file "../USB/usb_device.c"
 11587 ;; Parameters:    Size  Location     Type
 11588 ;;		None
 11589 ;; Auto vars:     Size  Location     Type
 11590 ;;		None
 11591 ;; Return value:  Size  Location     Type
 11592 ;;		None               void
 11593 ;; Registers used:
 11594 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11595 ;; Tracked objects:
 11596 ;;		On entry : 0/0
 11597 ;;		On exit  : 0/0
 11598 ;;		Unchanged: 0/0
 11599 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11600 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11601 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11602 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11603 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11604 ;;Total ram usage:        2 bytes
 11605 ;; Hardware stack levels used:    1
 11606 ;; Hardware stack levels required when called:    5
 11607 ;; This function calls:
 11608 ;;		_USBCtrlTrfTxService
 11609 ;; This function is called by:
 11610 ;;		_USBCtrlEPServiceComplete
 11611 ;; This function uses a non-reentrant model
 11612 ;;
 11613                           
 11614                           
 11615                           ;psect for function _USBCtrlEPAllowDataStage
 11616  1051                     _USBCtrlEPAllowDataStage:	
 11617                           
 11618                           ;usb_device.c: 1661: USBDeferINDataStagePackets = FALSE;
 11619                           
 11620                           ;incstack = 0
 11621                           ; Regs used in _USBCtrlEPAllowDataStage: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11622  1051  0022               	movlb	2	; select bank2
 11623  1052  01BE               	clrf	_USBDeferINDataStagePackets^(0+256)	;volatile
 11624                           
 11625                           ;usb_device.c: 1662: USBDeferOUTDataStagePackets = FALSE;
 11626  1053  01BF               	clrf	_USBDeferOUTDataStagePackets^(0+256)	;volatile
 11627                           
 11628                           ;usb_device.c: 1664: if(controlTransferState == 2)
 11629  1054  0020               	movlb	0	; select bank0
 11630  1055  086C               	movf	_controlTransferState,w
 11631  1056  3A02               	xorlw	2
 11632  1057  1D03               	skipz
 11633  1058  2874               	goto	l4459
 11634                           
 11635                           ;usb_device.c: 1665: {
 11636                           ;usb_device.c: 1667: pBDTEntryEP0OutNext->CNT = 8;
 11637  1059  3008               	movlw	8
 11638  105A  00DB               	movwf	??_USBCtrlEPAllowDataStage
 11639  105B  0A6E               	incf	_pBDTEntryEP0OutNext,w
 11640  105C  0086               	movwf	6
 11641  105D  0187               	clrf	7
 11642  105E  085B               	movf	??_USBCtrlEPAllowDataStage,w
 11643  105F  0081               	movwf	1
 11644                           
 11645                           ;usb_device.c: 1668: pBDTEntryEP0OutNext->ADR = (((WORD)(&CtrlTrfData))& 0x7FFF);
 11646  1060  3048               	movlw	72
 11647  1061  00DB               	movwf	??_USBCtrlEPAllowDataStage
 11648  1062  3000               	movlw	0
 11649  1063  00DC               	movwf	??_USBCtrlEPAllowDataStage+1
 11650  1064  086E               	movf	_pBDTEntryEP0OutNext,w
 11651  1065  3E02               	addlw	2
 11652  1066  0086               	movwf	6
 11653  1067  0187               	clrf	7
 11654  1068  085B               	movf	??_USBCtrlEPAllowDataStage,w
 11655  1069  3FC0               	movwi [0]fsr1
 11656  106A  085C               	movf	??_USBCtrlEPAllowDataStage+1,w
 11657  106B  3FC1               	movwi [1]fsr1
 11658                           
 11659                           ;usb_device.c: 1669: pBDTEntryEP0OutNext->STAT.Val = 0x80|0x40|(0x08 & 0x08);
 11660  106C  30C8               	movlw	200
 11661  106D  00DB               	movwf	??_USBCtrlEPAllowDataStage
 11662  106E  086E               	movf	_pBDTEntryEP0OutNext,w
 11663  106F  0086               	movwf	6
 11664  1070  0187               	clrf	7
 11665  1071  085B               	movf	??_USBCtrlEPAllowDataStage,w
 11666  1072  0081               	movwf	1
 11667                           
 11668                           ;usb_device.c: 1670: }
 11669  1073  0008               	return
 11670  1074                     l4459:	
 11671                           
 11672                           ;usb_device.c: 1671: else
 11673                           ;usb_device.c: 1672: {
 11674                           ;usb_device.c: 1675: if(SetupPkt.wLength < inPipes[0].wCount.Val)
 11675  1074  0022               	movlb	2	; select bank2
 11676  1075  0851               	movf	((_inPipes+1)^(0+256)+3),w
 11677  1076  0020               	movlb	0	; select bank0
 11678  1077  0247               	subwf	71,w	;volatile
 11679  1078  1D03               	skipz
 11680  1079  287E               	goto	u4055
 11681  107A  0022               	movlb	2	; select bank2
 11682  107B  0850               	movf	(_inPipes^(0+256)+3),w
 11683  107C  0020               	movlb	0	; select bank0
 11684  107D  0246               	subwf	70,w	;volatile
 11685  107E                     u4055:	
 11686  107E  1803               	skipnc
 11687  107F  2889               	goto	l4463
 11688                           
 11689                           ;usb_device.c: 1676: {
 11690                           ;usb_device.c: 1677: inPipes[0].wCount.Val = SetupPkt.wLength;
 11691  1080  0847               	movf	71,w	;volatile
 11692  1081  0022               	movlb	2	; select bank2
 11693  1082  01D1               	clrf	((_inPipes+1)^(0+256)+3)
 11694  1083  07D1               	addwf	((_inPipes+1)^(0+256)+3),f
 11695  1084  0020               	movlb	0	; select bank0
 11696  1085  0846               	movf	70,w	;volatile
 11697  1086  0022               	movlb	2	; select bank2
 11698  1087  01D0               	clrf	(_inPipes^(0+256)+3)
 11699  1088  07D0               	addwf	(_inPipes^(0+256)+3),f
 11700  1089                     l4463:	
 11701                           
 11702                           ;usb_device.c: 1678: }
 11703                           ;usb_device.c: 1679: USBCtrlTrfTxService();
 11704  1089  3196  26E3  3190   	fcall	_USBCtrlTrfTxService
 11705                           
 11706                           ;usb_device.c: 1684: pBDTEntryIn[0]->ADR = (((WORD)(&CtrlTrfData))& 0x7FFF);
 11707  108C  3048               	movlw	72
 11708  108D  0020               	movlb	0	; select bank0
 11709  108E  00DB               	movwf	??_USBCtrlEPAllowDataStage
 11710  108F  3000               	movlw	0
 11711  1090  00DC               	movwf	??_USBCtrlEPAllowDataStage+1
 11712  1091  0868               	movf	_pBDTEntryIn,w
 11713  1092  3E02               	addlw	2
 11714  1093  0086               	movwf	6
 11715  1094  0187               	clrf	7
 11716  1095  085B               	movf	??_USBCtrlEPAllowDataStage,w
 11717  1096  3FC0               	movwi [0]fsr1
 11718  1097  085C               	movf	??_USBCtrlEPAllowDataStage+1,w
 11719  1098  3FC1               	movwi [1]fsr1
 11720                           
 11721                           ;usb_device.c: 1685: pBDTEntryIn[0]->STAT.Val = 0x80|0x40|(0x08 & 0x08);
 11722  1099  30C8               	movlw	200
 11723  109A  00DB               	movwf	??_USBCtrlEPAllowDataStage
 11724  109B  0868               	movf	_pBDTEntryIn,w
 11725  109C  0086               	movwf	6
 11726  109D  0187               	clrf	7
 11727  109E  085B               	movf	??_USBCtrlEPAllowDataStage,w
 11728  109F  0081               	movwf	1
 11729  10A0  0008               	return
 11730  10A1                     __end_of_USBCtrlEPAllowDataStage:	
 11731                           
 11732                           	psect	text43
 11733  16E3                     __ptext43:	
 11734 ;; *************** function _USBCtrlTrfTxService *****************
 11735 ;; Defined at:
 11736 ;;		line 1938 in file "../USB/usb_device.c"
 11737 ;; Parameters:    Size  Location     Type
 11738 ;;		None
 11739 ;; Auto vars:     Size  Location     Type
 11740 ;;  byteToSend      1   10[BANK0 ] unsigned char 
 11741 ;; Return value:  Size  Location     Type
 11742 ;;		None               void
 11743 ;; Registers used:
 11744 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
 11745 ;; Tracked objects:
 11746 ;;		On entry : 0/0
 11747 ;;		On exit  : 0/0
 11748 ;;		Unchanged: 0/0
 11749 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11750 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11751 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11752 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11753 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11754 ;;Total ram usage:        3 bytes
 11755 ;; Hardware stack levels used:    1
 11756 ;; Hardware stack levels required when called:    4
 11757 ;; This function calls:
 11758 ;;		Nothing
 11759 ;; This function is called by:
 11760 ;;		_USBCtrlEPAllowDataStage
 11761 ;;		_USBCtrlTrfInHandler
 11762 ;; This function uses a non-reentrant model
 11763 ;;
 11764                           
 11765                           
 11766                           ;psect for function _USBCtrlTrfTxService
 11767  16E3                     _USBCtrlTrfTxService:	
 11768                           
 11769                           ;usb_device.c: 1939: BYTE byteToSend;
 11770                           ;usb_device.c: 1943: byteToSend = 8;
 11771                           
 11772                           ;incstack = 0
 11773                           ; Regs used in _USBCtrlTrfTxService: [wreg-fsr1h+status,2+status,0+pclath]
 11774  16E3  3008               	movlw	8
 11775  16E4  0020               	movlb	0	; select bank0
 11776  16E5  00D8               	movwf	??_USBCtrlTrfTxService
 11777  16E6  0858               	movf	??_USBCtrlTrfTxService,w
 11778  16E7  00DA               	movwf	USBCtrlTrfTxService@byteToSend
 11779                           
 11780                           ;usb_device.c: 1944: if(inPipes[0].wCount.Val < (BYTE)8)
 11781  16E8  3000               	movlw	0
 11782  16E9  0022               	movlb	2	; select bank2
 11783  16EA  0251               	subwf	((_inPipes+1)^(0+256)+3),w
 11784  16EB  3008               	movlw	8
 11785  16EC  1903               	skipnz
 11786  16ED  0250               	subwf	(_inPipes^(0+256)+3),w
 11787  16EE  1803               	skipnc
 11788  16EF  2F06               	goto	l4481
 11789                           
 11790                           ;usb_device.c: 1945: {
 11791                           ;usb_device.c: 1946: byteToSend = inPipes[0].wCount.Val;
 11792  16F0  0850               	movf	(_inPipes^(0+256)+3),w
 11793  16F1  0020               	movlb	0	; select bank0
 11794  16F2  00D8               	movwf	??_USBCtrlTrfTxService
 11795  16F3  0858               	movf	??_USBCtrlTrfTxService,w
 11796  16F4  00DA               	movwf	USBCtrlTrfTxService@byteToSend
 11797                           
 11798                           ;usb_device.c: 1953: if(shortPacketStatus == 0)
 11799  16F5  0022               	movlb	2	; select bank2
 11800  16F6  08CC               	movf	_shortPacketStatus^(0+256),f
 11801  16F7  1D03               	skipz
 11802  16F8  2EFC               	goto	l4477
 11803                           
 11804                           ;usb_device.c: 1954: {
 11805                           ;usb_device.c: 1955: shortPacketStatus = 1;
 11806  16F9  01CC               	clrf	_shortPacketStatus^(0+256)
 11807  16FA  0ACC               	incf	_shortPacketStatus^(0+256),f
 11808                           
 11809                           ;usb_device.c: 1956: }
 11810  16FB  2F06               	goto	l4481
 11811  16FC                     l4477:	
 11812                           
 11813                           ;usb_device.c: 1957: else if(shortPacketStatus == 1)
 11814  16FC  084C               	movf	_shortPacketStatus^(0+256),w
 11815  16FD  3A01               	xorlw	1
 11816  16FE  1D03               	skipz
 11817  16FF  2F06               	goto	l4481
 11818                           
 11819                           ;usb_device.c: 1958: {
 11820                           ;usb_device.c: 1959: shortPacketStatus = 2;
 11821  1700  3002               	movlw	2
 11822  1701  0020               	movlb	0	; select bank0
 11823  1702  00D8               	movwf	??_USBCtrlTrfTxService
 11824  1703  0858               	movf	??_USBCtrlTrfTxService,w
 11825  1704  0022               	movlb	2	; select bank2
 11826  1705  00CC               	movwf	_shortPacketStatus^(0+256)
 11827  1706                     l4481:	
 11828                           
 11829                           ;usb_device.c: 1960: }
 11830                           ;usb_device.c: 1961: }
 11831                           ;usb_device.c: 1965: inPipes[0].wCount.Val = inPipes[0].wCount.Val - byteToSend;
 11832  1706  3003               	movlw	3
 11833  1707  3E4D               	addlw	_inPipes& (0+255)
 11834  1708  0086               	movwf	6
 11835  1709  3001               	movlw	1	; select bank2/3
 11836  170A  0087               	movwf	7
 11837  170B  0020               	movlb	0	; select bank0
 11838  170C  085A               	movf	USBCtrlTrfTxService@byteToSend,w
 11839  170D  00D8               	movwf	??_USBCtrlTrfTxService
 11840  170E  01D9               	clrf	??_USBCtrlTrfTxService+1
 11841  170F  09D8               	comf	??_USBCtrlTrfTxService,f
 11842  1710  09D9               	comf	??_USBCtrlTrfTxService+1,f
 11843  1711  0AD8               	incf	??_USBCtrlTrfTxService,f
 11844  1712  1903               	skipnz
 11845  1713  0AD9               	incf	??_USBCtrlTrfTxService+1,f
 11846  1714  3F40               	moviw [0]fsr1
 11847  1715  0758               	addwf	??_USBCtrlTrfTxService,w
 11848  1716  0022               	movlb	2	; select bank2
 11849  1717  00D0               	movwf	(_inPipes^(0+256)+3)
 11850  1718  3F41               	moviw [1]fsr1
 11851  1719  0020               	movlb	0	; select bank0
 11852  171A  3D59               	addwfc	??_USBCtrlTrfTxService+1,w
 11853  171B  0022               	movlb	2	; select bank2
 11854  171C  00D1               	movwf	(_inPipes^(0+256)+4)
 11855                           
 11856                           ;usb_device.c: 1970: pBDTEntryIn[0]->CNT = byteToSend;
 11857  171D  0020               	movlb	0	; select bank0
 11858  171E  085A               	movf	USBCtrlTrfTxService@byteToSend,w
 11859  171F  00D8               	movwf	??_USBCtrlTrfTxService
 11860  1720  0A68               	incf	_pBDTEntryIn,w
 11861  1721  0086               	movwf	6
 11862  1722  0187               	clrf	7
 11863  1723  0858               	movf	??_USBCtrlTrfTxService,w
 11864  1724  0081               	movwf	1
 11865                           
 11866                           ;usb_device.c: 1974: pDst = ( BYTE*)CtrlTrfData;
 11867  1725  3048               	movlw	72
 11868  1726  00D8               	movwf	??_USBCtrlTrfTxService
 11869  1727  0858               	movf	??_USBCtrlTrfTxService,w
 11870  1728  0022               	movlb	2	; select bank2
 11871  1729  00CA               	movwf	_pDst^(0+256)
 11872                           
 11873                           ;usb_device.c: 1975: if(inPipes[0].info.bits.ctrl_trf_mem == 0x00)
 11874  172A  1C4F               	btfss	(_inPipes^(0+256)+2),0
 11875  172B  2F4A               	goto	l4499
 11876  172C  2F6C               	goto	l4509
 11877  172D                     l4491:	
 11878                           ;usb_device.c: 1976: {
 11879                           ;usb_device.c: 1977: while(byteToSend)
 11880                           
 11881                           
 11882                           ;usb_device.c: 1978: {
 11883                           ;usb_device.c: 1979: *pDst++ = *inPipes[0].pSrc.bRom++;
 11884  172D  0022               	movlb	2	; select bank2
 11885  172E  084D               	movf	_inPipes^(0+256),w
 11886  172F  0084               	movwf	4
 11887  1730  084E               	movf	(_inPipes+1)^(0+256),w
 11888  1731  0085               	movwf	5
 11889  1732  0800               	movf	0,w	;code access
 11890  1733  0020               	movlb	0	; select bank0
 11891  1734  00D8               	movwf	??_USBCtrlTrfTxService
 11892  1735  0022               	movlb	2	; select bank2
 11893  1736  084A               	movf	_pDst^(0+256),w
 11894  1737  0086               	movwf	6
 11895  1738  0187               	clrf	7
 11896  1739  0020               	movlb	0	; select bank0
 11897  173A  0858               	movf	??_USBCtrlTrfTxService,w
 11898  173B  0081               	movwf	1
 11899  173C  3001               	movlw	1
 11900  173D  0022               	movlb	2	; select bank2
 11901  173E  07CD               	addwf	_inPipes^(0+256),f
 11902  173F  3000               	movlw	0
 11903  1740  3DCE               	addwfc	(_inPipes+1)^(0+256),f
 11904  1741  3001               	movlw	1
 11905  1742  0020               	movlb	0	; select bank0
 11906  1743  00D8               	movwf	??_USBCtrlTrfTxService
 11907  1744  0858               	movf	??_USBCtrlTrfTxService,w
 11908  1745  0022               	movlb	2	; select bank2
 11909  1746  07CA               	addwf	_pDst^(0+256),f
 11910                           
 11911                           ;usb_device.c: 1980: byteToSend--;
 11912  1747  3001               	movlw	1
 11913  1748  0020               	movlb	0	; select bank0
 11914  1749  02DA               	subwf	USBCtrlTrfTxService@byteToSend,f
 11915  174A                     l4499:	
 11916  174A  0020               	movlb	0	; select bank0
 11917  174B  08DA               	movf	USBCtrlTrfTxService@byteToSend,f
 11918  174C  1903               	btfsc	3,2
 11919  174D  0008               	return
 11920  174E  2F2D               	goto	l4491
 11921  174F                     l4501:	
 11922                           ;usb_device.c: 1983: else
 11923                           ;usb_device.c: 1984: {
 11924                           ;usb_device.c: 1985: while(byteToSend)
 11925                           
 11926                           ;usb_device.c: 1981: }
 11927                           ;usb_device.c: 1982: }
 11928                           
 11929                           
 11930                           ;usb_device.c: 1986: {
 11931                           ;usb_device.c: 1987: *pDst++ = *inPipes[0].pSrc.bRam++;
 11932  174F  0022               	movlb	2	; select bank2
 11933  1750  084D               	movf	_inPipes^(0+256),w
 11934  1751  0084               	movwf	4
 11935  1752  084E               	movf	(_inPipes+1)^(0+256),w
 11936  1753  0085               	movwf	5
 11937  1754  0800               	movf	0,w	;code access
 11938  1755  0020               	movlb	0	; select bank0
 11939  1756  00D8               	movwf	??_USBCtrlTrfTxService
 11940  1757  0022               	movlb	2	; select bank2
 11941  1758  084A               	movf	_pDst^(0+256),w
 11942  1759  0086               	movwf	6
 11943  175A  0187               	clrf	7
 11944  175B  0020               	movlb	0	; select bank0
 11945  175C  0858               	movf	??_USBCtrlTrfTxService,w
 11946  175D  0081               	movwf	1
 11947  175E  3001               	movlw	1
 11948  175F  0022               	movlb	2	; select bank2
 11949  1760  07CD               	addwf	_inPipes^(0+256),f
 11950  1761  3000               	movlw	0
 11951  1762  3DCE               	addwfc	(_inPipes+1)^(0+256),f
 11952  1763  3001               	movlw	1
 11953  1764  0020               	movlb	0	; select bank0
 11954  1765  00D8               	movwf	??_USBCtrlTrfTxService
 11955  1766  0858               	movf	??_USBCtrlTrfTxService,w
 11956  1767  0022               	movlb	2	; select bank2
 11957  1768  07CA               	addwf	_pDst^(0+256),f
 11958                           
 11959                           ;usb_device.c: 1988: byteToSend--;
 11960  1769  3001               	movlw	1
 11961  176A  0020               	movlb	0	; select bank0
 11962  176B  02DA               	subwf	USBCtrlTrfTxService@byteToSend,f
 11963  176C                     l4509:	
 11964  176C  0020               	movlb	0	; select bank0
 11965  176D  08DA               	movf	USBCtrlTrfTxService@byteToSend,f
 11966  176E  1903               	btfsc	3,2
 11967  176F  0008               	return
 11968  1770  2F4F               	goto	l4501
 11969  1771                     __end_of_USBCtrlTrfTxService:	
 11970                           
 11971                           	psect	text44
 11972  1385                     __ptext44:	
 11973 ;; *************** function _USBCtrlEPAllowStatusStage *****************
 11974 ;; Defined at:
 11975 ;;		line 1590 in file "../USB/usb_device.c"
 11976 ;; Parameters:    Size  Location     Type
 11977 ;;		None
 11978 ;; Auto vars:     Size  Location     Type
 11979 ;;		None
 11980 ;; Return value:  Size  Location     Type
 11981 ;;		None               void
 11982 ;; Registers used:
 11983 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11984 ;; Tracked objects:
 11985 ;;		On entry : 0/0
 11986 ;;		On exit  : 0/0
 11987 ;;		Unchanged: 0/0
 11988 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11989 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11990 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11991 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11992 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11993 ;;Total ram usage:        2 bytes
 11994 ;; Hardware stack levels used:    1
 11995 ;; Hardware stack levels required when called:    4
 11996 ;; This function calls:
 11997 ;;		Nothing
 11998 ;; This function is called by:
 11999 ;;		_USBDeviceTasks
 12000 ;;		_USBCtrlEPServiceComplete
 12001 ;;		_USBCtrlTrfRxService
 12002 ;; This function uses a non-reentrant model
 12003 ;;
 12004                           
 12005                           
 12006                           ;psect for function _USBCtrlEPAllowStatusStage
 12007  1385                     _USBCtrlEPAllowStatusStage:	
 12008                           
 12009                           ;usb_device.c: 1596: if(USBStatusStageEnabledFlag1 == FALSE)
 12010                           
 12011                           ;incstack = 0
 12012                           ; Regs used in _USBCtrlEPAllowStatusStage: [wreg+fsr1l+fsr1h+status,2+status,0]
 12013  1385  0022               	movlb	2	; select bank2
 12014  1386  08C2               	movf	_USBStatusStageEnabledFlag1^(0+256),f
 12015  1387  1D03               	skipz
 12016  1388  0008               	return
 12017                           
 12018                           ;usb_device.c: 1597: {
 12019                           ;usb_device.c: 1598: USBStatusStageEnabledFlag1 = TRUE;
 12020  1389  3001               	movlw	1
 12021  138A  0020               	movlb	0	; select bank0
 12022  138B  00D8               	movwf	??_USBCtrlEPAllowStatusStage
 12023  138C  0858               	movf	??_USBCtrlEPAllowStatusStage,w
 12024  138D  0022               	movlb	2	; select bank2
 12025  138E  00C2               	movwf	_USBStatusStageEnabledFlag1^(0+256)	;volatile
 12026                           
 12027                           ;usb_device.c: 1599: if(USBStatusStageEnabledFlag2 == FALSE)
 12028  138F  08C3               	movf	_USBStatusStageEnabledFlag2^(0+256),f
 12029  1390  1D03               	skipz
 12030  1391  0008               	return
 12031                           
 12032                           ;usb_device.c: 1600: {
 12033                           ;usb_device.c: 1601: USBStatusStageEnabledFlag2 = TRUE;
 12034  1392  3001               	movlw	1
 12035  1393  0020               	movlb	0	; select bank0
 12036  1394  00D8               	movwf	??_USBCtrlEPAllowStatusStage
 12037  1395  0858               	movf	??_USBCtrlEPAllowStatusStage,w
 12038  1396  0022               	movlb	2	; select bank2
 12039  1397  00C3               	movwf	_USBStatusStageEnabledFlag2^(0+256)	;volatile
 12040                           
 12041                           ;usb_device.c: 1605: if(controlTransferState == 2)
 12042  1398  0020               	movlb	0	; select bank0
 12043  1399  086C               	movf	_controlTransferState,w
 12044  139A  3A02               	xorlw	2
 12045  139B  1D03               	skipz
 12046  139C  2BA9               	goto	l4319
 12047                           
 12048                           ;usb_device.c: 1606: {
 12049                           ;usb_device.c: 1607: pBDTEntryIn[0]->CNT = 0;
 12050  139D  0A68               	incf	_pBDTEntryIn,w
 12051  139E  0086               	movwf	6
 12052  139F  0187               	clrf	7
 12053  13A0  0181               	clrf	1
 12054                           
 12055                           ;usb_device.c: 1608: pBDTEntryIn[0]->STAT.Val = 0x80|0x40|(0x08 & 0x08);
 12056  13A1  30C8               	movlw	200
 12057  13A2  00D8               	movwf	??_USBCtrlEPAllowStatusStage
 12058  13A3  0868               	movf	_pBDTEntryIn,w
 12059  13A4  0086               	movwf	6
 12060  13A5  0187               	clrf	7
 12061  13A6  0858               	movf	??_USBCtrlEPAllowStatusStage,w
 12062  13A7  0081               	movwf	1
 12063                           
 12064                           ;usb_device.c: 1609: }
 12065  13A8  0008               	return
 12066  13A9                     l4319:	
 12067                           
 12068                           ;usb_device.c: 1610: else if(controlTransferState == 1)
 12069  13A9  086C               	movf	_controlTransferState,w
 12070  13AA  3A01               	xorlw	1
 12071  13AB  1D03               	skipz
 12072  13AC  0008               	return
 12073                           
 12074                           ;usb_device.c: 1611: {
 12075                           ;usb_device.c: 1612: BothEP0OutUOWNsSet = FALSE;
 12076  13AD  0022               	movlb	2	; select bank2
 12077  13AE  01B2               	clrf	_BothEP0OutUOWNsSet^(0+256)
 12078                           
 12079                           ;usb_device.c: 1617: pBDTEntryEP0OutCurrent->CNT = 8;
 12080  13AF  3008               	movlw	8
 12081  13B0  0020               	movlb	0	; select bank0
 12082  13B1  00D8               	movwf	??_USBCtrlEPAllowStatusStage
 12083  13B2  0A6D               	incf	_pBDTEntryEP0OutCurrent,w
 12084  13B3  0086               	movwf	6
 12085  13B4  0187               	clrf	7
 12086  13B5  0858               	movf	??_USBCtrlEPAllowStatusStage,w
 12087  13B6  0081               	movwf	1
 12088                           
 12089                           ;usb_device.c: 1618: pBDTEntryEP0OutCurrent->ADR = (((WORD)(&SetupPkt))& 0x7FFF);
 12090  13B7  3040               	movlw	64
 12091  13B8  00D8               	movwf	??_USBCtrlEPAllowStatusStage
 12092  13B9  3000               	movlw	0
 12093  13BA  00D9               	movwf	??_USBCtrlEPAllowStatusStage+1
 12094  13BB  086D               	movf	_pBDTEntryEP0OutCurrent,w
 12095  13BC  3E02               	addlw	2
 12096  13BD  0086               	movwf	6
 12097  13BE  0187               	clrf	7
 12098  13BF  0858               	movf	??_USBCtrlEPAllowStatusStage,w
 12099  13C0  3FC0               	movwi [0]fsr1
 12100  13C1  0859               	movf	??_USBCtrlEPAllowStatusStage+1,w
 12101  13C2  3FC1               	movwi [1]fsr1
 12102                           
 12103                           ;usb_device.c: 1619: pBDTEntryEP0OutCurrent->STAT.Val = 0x80|0x04;
 12104  13C3  3084               	movlw	132
 12105  13C4  00D8               	movwf	??_USBCtrlEPAllowStatusStage
 12106  13C5  086D               	movf	_pBDTEntryEP0OutCurrent,w
 12107  13C6  0086               	movwf	6
 12108  13C7  0187               	clrf	7
 12109  13C8  0858               	movf	??_USBCtrlEPAllowStatusStage,w
 12110  13C9  0081               	movwf	1
 12111                           
 12112                           ;usb_device.c: 1620: BothEP0OutUOWNsSet = TRUE;
 12113  13CA  0022               	movlb	2	; select bank2
 12114  13CB  01B2               	clrf	_BothEP0OutUOWNsSet^(0+256)
 12115  13CC  0AB2               	incf	_BothEP0OutUOWNsSet^(0+256),f
 12116                           
 12117                           ;usb_device.c: 1624: pBDTEntryEP0OutNext->CNT = 8;
 12118  13CD  3008               	movlw	8
 12119  13CE  0020               	movlb	0	; select bank0
 12120  13CF  00D8               	movwf	??_USBCtrlEPAllowStatusStage
 12121  13D0  0A6E               	incf	_pBDTEntryEP0OutNext,w
 12122  13D1  0086               	movwf	6
 12123  13D2  0187               	clrf	7
 12124  13D3  0858               	movf	??_USBCtrlEPAllowStatusStage,w
 12125  13D4  0081               	movwf	1
 12126                           
 12127                           ;usb_device.c: 1625: pBDTEntryEP0OutNext->ADR = (((WORD)(&SetupPkt))& 0x7FFF);
 12128  13D5  3040               	movlw	64
 12129  13D6  00D8               	movwf	??_USBCtrlEPAllowStatusStage
 12130  13D7  3000               	movlw	0
 12131  13D8  00D9               	movwf	??_USBCtrlEPAllowStatusStage+1
 12132  13D9  086E               	movf	_pBDTEntryEP0OutNext,w
 12133  13DA  3E02               	addlw	2
 12134  13DB  0086               	movwf	6
 12135  13DC  0187               	clrf	7
 12136  13DD  0858               	movf	??_USBCtrlEPAllowStatusStage,w
 12137  13DE  3FC0               	movwi [0]fsr1
 12138  13DF  0859               	movf	??_USBCtrlEPAllowStatusStage+1,w
 12139  13E0  3FC1               	movwi [1]fsr1
 12140                           
 12141                           ;usb_device.c: 1626: pBDTEntryEP0OutNext->STAT.Val = 0x80;
 12142  13E1  3080               	movlw	128
 12143  13E2  00D8               	movwf	??_USBCtrlEPAllowStatusStage
 12144  13E3  086E               	movf	_pBDTEntryEP0OutNext,w
 12145  13E4  0086               	movwf	6
 12146  13E5  0187               	clrf	7
 12147  13E6  0858               	movf	??_USBCtrlEPAllowStatusStage,w
 12148  13E7  0081               	movwf	1
 12149  13E8  0008               	return
 12150  13E9                     __end_of_USBCtrlEPAllowStatusStage:	
 12151                           
 12152                           	psect	text45
 12153  1DE7                     __ptext45:	
 12154 ;; *************** function _USBStallHandler *****************
 12155 ;; Defined at:
 12156 ;;		line 2356 in file "../USB/usb_device.c"
 12157 ;; Parameters:    Size  Location     Type
 12158 ;;		None
 12159 ;; Auto vars:     Size  Location     Type
 12160 ;;		None
 12161 ;; Return value:  Size  Location     Type
 12162 ;;		None               void
 12163 ;; Registers used:
 12164 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12165 ;; Tracked objects:
 12166 ;;		On entry : 0/0
 12167 ;;		On exit  : 0/0
 12168 ;;		Unchanged: 0/0
 12169 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12170 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12171 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12172 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12173 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12174 ;;Total ram usage:        1 bytes
 12175 ;; Hardware stack levels used:    1
 12176 ;; Hardware stack levels required when called:    4
 12177 ;; This function calls:
 12178 ;;		Nothing
 12179 ;; This function is called by:
 12180 ;;		_USBDeviceTasks
 12181 ;; This function uses a non-reentrant model
 12182 ;;
 12183                           
 12184                           
 12185                           ;psect for function _USBStallHandler
 12186  1DE7                     _USBStallHandler:	
 12187                           
 12188                           ;usb_device.c: 2368: if(UEP0bits.EPSTALL == 1)
 12189                           
 12190                           ;incstack = 0
 12191                           ; Regs used in _USBStallHandler: [wreg+fsr1l+fsr1h+status,2+status,0]
 12192  1DE7  003D               	movlb	29	; select bank29
 12193  1DE8  1C18               	btfss	24,0	;volatile
 12194  1DE9  2E02               	goto	l4347
 12195                           
 12196                           ;usb_device.c: 2369: {
 12197                           ;usb_device.c: 2371: if((pBDTEntryEP0OutCurrent->STAT.Val == 0x80) && (pBDTEntryIn[0]->S
      +                          TAT.Val == (0x80|0x04)))
 12198  1DEA  0020               	movlb	0	; select bank0
 12199  1DEB  086D               	movf	_pBDTEntryEP0OutCurrent,w
 12200  1DEC  0086               	movwf	6
 12201  1DED  0187               	clrf	7
 12202  1DEE  0801               	movf	1,w
 12203  1DEF  3A80               	xorlw	128
 12204  1DF0  1D03               	skipz
 12205  1DF1  2E00               	goto	l4345
 12206  1DF2  0868               	movf	_pBDTEntryIn,w
 12207  1DF3  0086               	movwf	6
 12208  1DF4  0187               	clrf	7
 12209  1DF5  0801               	movf	1,w
 12210  1DF6  3A84               	xorlw	132
 12211  1DF7  1D03               	skipz
 12212  1DF8  2E00               	goto	l4345
 12213                           
 12214                           ;usb_device.c: 2372: {
 12215                           ;usb_device.c: 2374: pBDTEntryEP0OutCurrent->STAT.Val = 0x80|0x00|(0x08 & 0x08)|0x04;
 12216  1DF9  308C               	movlw	140
 12217  1DFA  00D8               	movwf	??_USBStallHandler
 12218  1DFB  086D               	movf	_pBDTEntryEP0OutCurrent,w
 12219  1DFC  0086               	movwf	6
 12220  1DFD  0187               	clrf	7
 12221  1DFE  0858               	movf	??_USBStallHandler,w
 12222  1DFF  0081               	movwf	1
 12223  1E00                     l4345:	
 12224                           
 12225                           ;usb_device.c: 2375: }
 12226                           ;usb_device.c: 2376: UEP0bits.EPSTALL = 0;
 12227  1E00  003D               	movlb	29	; select bank29
 12228  1E01  1018               	bcf	24,0	;volatile
 12229  1E02                     l4347:	
 12230                           
 12231                           ;usb_device.c: 2377: }
 12232                           ;usb_device.c: 2379: (UIR &= 0xDF);
 12233  1E02  30DF               	movlw	223
 12234  1E03  0020               	movlb	0	; select bank0
 12235  1E04  00D8               	movwf	??_USBStallHandler
 12236  1E05  0858               	movf	??_USBStallHandler,w
 12237  1E06  003D               	movlb	29	; select bank29
 12238  1E07  0590               	andwf	16,f	;volatile
 12239  1E08  0008               	return
 12240  1E09                     __end_of_USBStallHandler:	
 12241                           
 12242                           	psect	text46
 12243  1D34                     __ptext46:	
 12244 ;; *************** function _USBSuspend *****************
 12245 ;; Defined at:
 12246 ;;		line 2399 in file "../USB/usb_device.c"
 12247 ;; Parameters:    Size  Location     Type
 12248 ;;		None
 12249 ;; Auto vars:     Size  Location     Type
 12250 ;;		None
 12251 ;; Return value:  Size  Location     Type
 12252 ;;		None               void
 12253 ;; Registers used:
 12254 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
 12255 ;; Tracked objects:
 12256 ;;		On entry : 0/0
 12257 ;;		On exit  : 0/0
 12258 ;;		Unchanged: 0/0
 12259 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12260 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12261 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12262 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 12263 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 12264 ;;Total ram usage:        1 bytes
 12265 ;; Hardware stack levels used:    1
 12266 ;; Hardware stack levels required when called:    8
 12267 ;; This function calls:
 12268 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 12269 ;; This function is called by:
 12270 ;;		_USBDeviceTasks
 12271 ;; This function uses a non-reentrant model
 12272 ;;
 12273                           
 12274                           
 12275                           ;psect for function _USBSuspend
 12276  1D34                     _USBSuspend:	
 12277                           
 12278                           ;usb_device.c: 2423: UIEbits.ACTVIE = 1;
 12279                           
 12280                           ;incstack = 0
 12281                           ; Regs used in _USBSuspend: [allreg]
 12282  1D34  003D               	movlb	29	; select bank29
 12283  1D35  1512               	bsf	18,2	;volatile
 12284                           
 12285                           ;usb_device.c: 2424: (UIR &= 0xEF);
 12286  1D36  30EF               	movlw	239
 12287  1D37  0021               	movlb	1	; select bank1
 12288  1D38  00A6               	movwf	??_USBSuspend^(0+128)
 12289  1D39  0826               	movf	??_USBSuspend^(0+128),w
 12290  1D3A  003D               	movlb	29	; select bank29
 12291  1D3B  0590               	andwf	16,f	;volatile
 12292                           
 12293                           ;usb_device.c: 2427: UCONbits.SUSPND = 1;
 12294  1D3C  148E               	bsf	14,1	;volatile
 12295                           
 12296                           ;usb_device.c: 2430: USBBusIsSuspended = TRUE;
 12297  1D3D  0022               	movlb	2	; select bank2
 12298  1D3E  01BD               	clrf	_USBBusIsSuspended^(0+256)
 12299  1D3F  0ABD               	incf	_USBBusIsSuspended^(0+256),f
 12300                           
 12301                           ;usb_device.c: 2437: USER_USB_CALLBACK_EVENT_HANDLER(EVENT_SUSPEND,0,0);
 12302  1D40  3075               	movlw	117
 12303  1D41  0021               	movlb	1	; select bank1
 12304  1D42  00A0               	movwf	?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)
 12305  1D43  3000               	movlw	0
 12306  1D44  00A1               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)+1)
 12307  1D45  3000               	movlw	0
 12308  1D46  00A2               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER+2)^(0+128)
 12309  1D47  3000               	movlw	0
 12310  1D48  00A3               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER+3)^(0+128)
 12311  1D49  3000               	movlw	0
 12312  1D4A  00A4               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)+4)
 12313  1D4B  3000               	movlw	0
 12314  1D4C  00A5               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)+5)
 12315  1D4D  319E  26EB         	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
 12316  1D4F  0008               	return
 12317  1D50                     __end_of_USBSuspend:	
 12318                           
 12319                           	psect	text47
 12320  1CFD                     __ptext47:	
 12321 ;; *************** function _USBWakeFromSuspend *****************
 12322 ;; Defined at:
 12323 ;;		line 2456 in file "../USB/usb_device.c"
 12324 ;; Parameters:    Size  Location     Type
 12325 ;;		None
 12326 ;; Auto vars:     Size  Location     Type
 12327 ;;		None
 12328 ;; Return value:  Size  Location     Type
 12329 ;;		None               void
 12330 ;; Registers used:
 12331 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
 12332 ;; Tracked objects:
 12333 ;;		On entry : 0/0
 12334 ;;		On exit  : 0/0
 12335 ;;		Unchanged: 0/0
 12336 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12337 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12338 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12339 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 12340 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 12341 ;;Total ram usage:        1 bytes
 12342 ;; Hardware stack levels used:    1
 12343 ;; Hardware stack levels required when called:    8
 12344 ;; This function calls:
 12345 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 12346 ;; This function is called by:
 12347 ;;		_USBDeviceTasks
 12348 ;; This function uses a non-reentrant model
 12349 ;;
 12350                           
 12351                           
 12352                           ;psect for function _USBWakeFromSuspend
 12353  1CFD                     _USBWakeFromSuspend:	
 12354                           
 12355                           ;usb_device.c: 2457: USBBusIsSuspended = FALSE;
 12356                           
 12357                           ;incstack = 0
 12358                           ; Regs used in _USBWakeFromSuspend: [allreg]
 12359  1CFD  0022               	movlb	2	; select bank2
 12360  1CFE  01BD               	clrf	_USBBusIsSuspended^(0+256)
 12361                           
 12362                           ;usb_device.c: 2463: USER_USB_CALLBACK_EVENT_HANDLER(EVENT_RESUME,0,0);
 12363  1CFF  3074               	movlw	116
 12364  1D00  0021               	movlb	1	; select bank1
 12365  1D01  00A0               	movwf	?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)
 12366  1D02  3000               	movlw	0
 12367  1D03  00A1               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)+1)
 12368  1D04  3000               	movlw	0
 12369  1D05  00A2               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER+2)^(0+128)
 12370  1D06  3000               	movlw	0
 12371  1D07  00A3               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER+3)^(0+128)
 12372  1D08  3000               	movlw	0
 12373  1D09  00A4               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)+4)
 12374  1D0A  3000               	movlw	0
 12375  1D0B  00A5               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)+5)
 12376  1D0C  319E  26EB         	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
 12377                           
 12378                           ;usb_device.c: 2470: UCONbits.SUSPND = 0;
 12379  1D0E  003D               	movlb	29	; select bank29
 12380  1D0F  108E               	bcf	14,1	;volatile
 12381                           
 12382                           ;usb_device.c: 2475: UIEbits.ACTVIE = 0;
 12383  1D10  1112               	bcf	18,2	;volatile
 12384                           
 12385                           ;usb_device.c: 2495: {
 12386                           ;usb_device.c: 2496: (UIR &= 0xFB);
 12387  1D11  30FB               	movlw	251
 12388  1D12  0021               	movlb	1	; select bank1
 12389  1D13  00A6               	movwf	??_USBWakeFromSuspend^(0+128)
 12390  1D14  0826               	movf	??_USBWakeFromSuspend^(0+128),w
 12391  1D15  003D               	movlb	29	; select bank29
 12392  1D16  0590               	andwf	16,f	;volatile
 12393  1D17  0008               	return
 12394  1D18                     __end_of_USBWakeFromSuspend:	
 12395                           
 12396                           	psect	text48
 12397  1EEB                     __ptext48:	
 12398 ;; *************** function _USER_USB_CALLBACK_EVENT_HANDLER *****************
 12399 ;; Defined at:
 12400 ;;		line 630 in file "main.c"
 12401 ;; Parameters:    Size  Location     Type
 12402 ;;  event           2    0[BANK1 ] int 
 12403 ;;  pdata           2    2[BANK1 ] PTR void 
 12404 ;;		 -> USTATcopy(1), USBActiveConfiguration(1), NULL(0), BDT(32), 
 12405 ;;  size            2    4[BANK1 ] unsigned short 
 12406 ;; Auto vars:     Size  Location     Type
 12407 ;;		None
 12408 ;; Return value:  Size  Location     Type
 12409 ;;                  1    wreg      enum E5
 12410 ;; Registers used:
 12411 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12412 ;; Tracked objects:
 12413 ;;		On entry : 0/0
 12414 ;;		On exit  : 0/0
 12415 ;;		Unchanged: 0/0
 12416 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12417 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
 12418 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12419 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12420 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
 12421 ;;Total ram usage:        6 bytes
 12422 ;; Hardware stack levels used:    1
 12423 ;; Hardware stack levels required when called:    7
 12424 ;; This function calls:
 12425 ;;		_USBCBSuspend
 12426 ;;		_USBCBWakeFromSuspend
 12427 ;;		_USBCB_SOF_Handler
 12428 ;;		_USBCBErrorHandler
 12429 ;;		_USBCBCheckOtherReq
 12430 ;;		_USBCBStdSetDscHandler
 12431 ;;		_USBCBInitEP
 12432 ;; This function is called by:
 12433 ;;		_USBDeviceTasks
 12434 ;;		_USBStdSetCfgHandler
 12435 ;;		_USBSuspend
 12436 ;;		_USBWakeFromSuspend
 12437 ;;		_USBCtrlTrfSetupHandler
 12438 ;;		_USBCheckStdRequest
 12439 ;;		_USBStdFeatureReqHandler
 12440 ;; This function uses a non-reentrant model
 12441 ;;
 12442                           
 12443                           
 12444                           ;psect for function _USER_USB_CALLBACK_EVENT_HANDLER
 12445  1EEB                     _USER_USB_CALLBACK_EVENT_HANDLER:	
 12446                           
 12447                           ;main.c: 631: switch( event )
 12448                           
 12449                           ;incstack = 0
 12450                           ; Regs used in _USER_USB_CALLBACK_EVENT_HANDLER: [wreg-fsr1h+status,2+status,0+pclath+cs
      +                          tack]
 12451  1EEB  2F01               	goto	l6297
 12452  1EEC                     l6281:	
 12453                           ;main.c: 636: case EVENT_SOF:
 12454                           
 12455                           ;main.c: 635: break;
 12456                           
 12457                           ;main.c: 632: {
 12458                           ;main.c: 633: case EVENT_TRANSFER:
 12459                           
 12460                           
 12461                           ;main.c: 637: USBCB_SOF_Handler();
 12462  1EEC  3190  2001         	fcall	_USBCB_SOF_Handler
 12463                           
 12464                           ;main.c: 638: break;
 12465  1EEE  0008               	return
 12466  1EEF                     l6283:	
 12467                           ;main.c: 639: case EVENT_SUSPEND:
 12468                           
 12469                           
 12470                           ;main.c: 640: USBCBSuspend();
 12471  1EEF  319C  2426         	fcall	_USBCBSuspend
 12472                           
 12473                           ;main.c: 641: break;
 12474  1EF1  0008               	return
 12475  1EF2                     l6285:	
 12476                           ;main.c: 642: case EVENT_RESUME:
 12477                           
 12478                           
 12479                           ;main.c: 643: USBCBWakeFromSuspend();
 12480  1EF2  3190  2000         	fcall	_USBCBWakeFromSuspend
 12481                           
 12482                           ;main.c: 644: break;
 12483  1EF4  0008               	return
 12484  1EF5                     l6287:	
 12485                           ;main.c: 645: case EVENT_CONFIGURED:
 12486                           
 12487                           
 12488                           ;main.c: 646: USBCBInitEP();
 12489  1EF5  319D  2518         	fcall	_USBCBInitEP
 12490                           
 12491                           ;main.c: 647: break;
 12492  1EF7  0008               	return
 12493  1EF8                     l6289:	
 12494                           ;main.c: 648: case EVENT_SET_DESCRIPTOR:
 12495                           
 12496                           
 12497                           ;main.c: 649: USBCBStdSetDscHandler();
 12498  1EF8  3187  27FF         	fcall	_USBCBStdSetDscHandler
 12499                           
 12500                           ;main.c: 650: break;
 12501  1EFA  0008               	return
 12502  1EFB                     l6291:	
 12503                           ;main.c: 651: case EVENT_EP0_REQUEST:
 12504                           
 12505                           
 12506                           ;main.c: 652: USBCBCheckOtherReq();
 12507  1EFB  319C  2427         	fcall	_USBCBCheckOtherReq
 12508                           
 12509                           ;main.c: 653: break;
 12510  1EFD  0008               	return
 12511  1EFE                     l6293:	
 12512                           ;main.c: 654: case EVENT_BUS_ERROR:
 12513                           
 12514                           
 12515                           ;main.c: 655: USBCBErrorHandler();
 12516  1EFE  3180  2002         	fcall	_USBCBErrorHandler
 12517                           
 12518                           ;main.c: 669: }
 12519                           
 12520                           ;main.c: 668: break;
 12521                           
 12522                           ;main.c: 667: default:
 12523                           
 12524                           ;main.c: 666: break;
 12525                           
 12526                           ;main.c: 657: case EVENT_TRANSFER_TERMINATED:
 12527                           
 12528                           ;main.c: 656: break;
 12529  1F00  0008               	return
 12530  1F01                     l6297:	
 12531                           
 12532                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 12533                           ; Switch size 1, requested type "space"
 12534                           ; Number of cases is 2, Range of values is 0 to 127
 12535                           ; switch strategies available:
 12536                           ; Name         Instructions Cycles
 12537                           ; simple_byte            7     4 (average)
 12538                           ; direct_byte          262     6 (fixed)
 12539                           ; jumptable            260     6 (fixed)
 12540                           ; rangetable           132     6 (fixed)
 12541                           ; spacedrange          261     8 (fixed)
 12542                           ; locatedrange         128     3 (fixed)
 12543                           ;	Chosen strategy is simple_byte
 12544  1F01  0021               	movlb	1	; select bank1
 12545  1F02  0821               	movf	(USER_USB_CALLBACK_EVENT_HANDLER@event+1)^(0+128),w
 12546  1F03  3A00               	xorlw	0	; case 0
 12547  1F04  1903               	skipnz
 12548  1F05  2F0A               	goto	l7297
 12549  1F06  3A7F               	xorlw	127	; case 127
 12550  1F07  1903               	skipnz
 12551  1F08  2F24               	goto	l7299
 12552  1F09  2F29               	goto	l938
 12553  1F0A                     l7297:	
 12554                           
 12555                           ; Switch size 1, requested type "space"
 12556                           ; Number of cases is 8, Range of values is 1 to 117
 12557                           ; switch strategies available:
 12558                           ; Name         Instructions Cycles
 12559                           ; simple_byte           25    13 (average)
 12560                           ; direct_byte          243     9 (fixed)
 12561                           ; jumptable            263     9 (fixed)
 12562                           ;	Chosen strategy is simple_byte
 12563  1F0A  0820               	movf	USER_USB_CALLBACK_EVENT_HANDLER@event^(0+128),w
 12564  1F0B  3A01               	xorlw	1	; case 1
 12565  1F0C  1903               	skipnz
 12566  1F0D  2EF5               	goto	l6287
 12567  1F0E  3A03               	xorlw	3	; case 2
 12568  1F0F  1903               	skipnz
 12569  1F10  2EF8               	goto	l6289
 12570  1F11  3A01               	xorlw	1	; case 3
 12571  1F12  1903               	skipnz
 12572  1F13  2EFB               	goto	l6291
 12573  1F14  3A06               	xorlw	6	; case 5
 12574  1F15  1903               	skipnz
 12575  1F16  2F29               	goto	l938
 12576  1F17  3A77               	xorlw	119	; case 114
 12577  1F18  1903               	skipnz
 12578  1F19  2F29               	goto	l938
 12579  1F1A  3A01               	xorlw	1	; case 115
 12580  1F1B  1903               	skipnz
 12581  1F1C  2EEC               	goto	l6281
 12582  1F1D  3A07               	xorlw	7	; case 116
 12583  1F1E  1903               	skipnz
 12584  1F1F  2EF2               	goto	l6285
 12585  1F20  3A01               	xorlw	1	; case 117
 12586  1F21  1903               	skipnz
 12587  1F22  2EEF               	goto	l6283
 12588  1F23  2F29               	goto	l938
 12589  1F24                     l7299:	
 12590                           
 12591                           ; Switch size 1, requested type "space"
 12592                           ; Number of cases is 1, Range of values is 255 to 255
 12593                           ; switch strategies available:
 12594                           ; Name         Instructions Cycles
 12595                           ; simple_byte            4     3 (average)
 12596                           ; direct_byte            7     5 (fixed)
 12597                           ; jumptable            263     9 (fixed)
 12598                           ;	Chosen strategy is simple_byte
 12599  1F24  0820               	movf	USER_USB_CALLBACK_EVENT_HANDLER@event^(0+128),w
 12600  1F25  3AFF               	xorlw	255	; case 255
 12601  1F26  1903               	skipnz
 12602  1F27  2EFE               	goto	l6293
 12603  1F28  2F29               	goto	l938
 12604  1F29                     l938:	
 12605                           ;main.c: 670: return TRUE;
 12606                           ;	Return value of _USER_USB_CALLBACK_EVENT_HANDLER is never used
 12607                           
 12608  1F29  0008               	return
 12609  1F2A                     __end_of_USER_USB_CALLBACK_EVENT_HANDLER:	
 12610                           
 12611                           	psect	text49
 12612  1D18                     __ptext49:	
 12613 ;; *************** function _USBCBInitEP *****************
 12614 ;; Defined at:
 12615 ;;		line 460 in file "main.c"
 12616 ;; Parameters:    Size  Location     Type
 12617 ;;		None
 12618 ;; Auto vars:     Size  Location     Type
 12619 ;;		None
 12620 ;; Return value:  Size  Location     Type
 12621 ;;		None               void
 12622 ;; Registers used:
 12623 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12624 ;; Tracked objects:
 12625 ;;		On entry : 0/0
 12626 ;;		On exit  : 0/0
 12627 ;;		Unchanged: 0/0
 12628 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12629 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12630 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12631 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12632 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12633 ;;Total ram usage:        3 bytes
 12634 ;; Hardware stack levels used:    1
 12635 ;; Hardware stack levels required when called:    6
 12636 ;; This function calls:
 12637 ;;		_USBEnableEndpoint
 12638 ;;		_USBTransferOnePacket
 12639 ;; This function is called by:
 12640 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 12641 ;; This function uses a non-reentrant model
 12642 ;;
 12643                           
 12644                           
 12645                           ;psect for function _USBCBInitEP
 12646  1D18                     _USBCBInitEP:	
 12647                           
 12648                           ;main.c: 462: USBEnableEndpoint(1,0x04|0x02|0x10|0x08);
 12649                           
 12650                           ;incstack = 0
 12651                           ; Regs used in _USBCBInitEP: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12652  1D18  301E               	movlw	30
 12653  1D19  0020               	movlb	0	; select bank0
 12654  1D1A  00E5               	movwf	??_USBCBInitEP
 12655  1D1B  0865               	movf	??_USBCBInitEP,w
 12656  1D1C  00DF               	movwf	?_USBEnableEndpoint
 12657  1D1D  3001               	movlw	1
 12658  1D1E  319E  262B  319D   	fcall	_USBEnableEndpoint
 12659                           
 12660                           ;main.c: 464: USBGenericOutHandle = USBTransferOnePacket(1,0,(BYTE*)&OUTPacket,64);
 12661  1D21  0020               	movlb	0	; select bank0
 12662  1D22  01DC               	clrf	?_USBTransferOnePacket
 12663  1D23  30A0               	movlw	160
 12664  1D24  00E5               	movwf	??_USBCBInitEP
 12665  1D25  0865               	movf	??_USBCBInitEP,w
 12666  1D26  00DD               	movwf	?_USBTransferOnePacket+1
 12667  1D27  3040               	movlw	64
 12668  1D28  00E6               	movwf	??_USBCBInitEP+1
 12669  1D29  0866               	movf	??_USBCBInitEP+1,w
 12670  1D2A  00DE               	movwf	?_USBTransferOnePacket+2
 12671  1D2B  3001               	movlw	1
 12672  1D2C  319F  27B2         	fcall	_USBTransferOnePacket
 12673  1D2E  0020               	movlb	0	; select bank0
 12674  1D2F  00E7               	movwf	??_USBCBInitEP+2
 12675  1D30  0867               	movf	??_USBCBInitEP+2,w
 12676  1D31  0022               	movlb	2	; select bank2
 12677  1D32  00C1               	movwf	_USBGenericOutHandle^(0+256)
 12678  1D33  0008               	return
 12679  1D34                     __end_of_USBCBInitEP:	
 12680                           
 12681                           	psect	text50
 12682  1FB2                     __ptext50:	
 12683 ;; *************** function _USBTransferOnePacket *****************
 12684 ;; Defined at:
 12685 ;;		line 1173 in file "../USB/usb_device.c"
 12686 ;; Parameters:    Size  Location     Type
 12687 ;;  ep              1    wreg     unsigned char 
 12688 ;;  dir             1   12[BANK0 ] unsigned char 
 12689 ;;  data            1   13[BANK0 ] PTR unsigned char 
 12690 ;;		 -> INPacket(64), OUTPacket(64), 
 12691 ;;  len             1   14[BANK0 ] unsigned char 
 12692 ;; Auto vars:     Size  Location     Type
 12693 ;;  ep              1   17[BANK0 ] unsigned char 
 12694 ;;  handle          1   18[BANK0 ] PTR volatile struct __BD
 12695 ;;		 -> NULL(0), BDT(32), 
 12696 ;; Return value:  Size  Location     Type
 12697 ;;                  1    wreg      PTR void 
 12698 ;; Registers used:
 12699 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12700 ;; Tracked objects:
 12701 ;;		On entry : 0/0
 12702 ;;		On exit  : 0/0
 12703 ;;		Unchanged: 0/0
 12704 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12705 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12706 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12707 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12708 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12709 ;;Total ram usage:        7 bytes
 12710 ;; Hardware stack levels used:    1
 12711 ;; Hardware stack levels required when called:    4
 12712 ;; This function calls:
 12713 ;;		Nothing
 12714 ;; This function is called by:
 12715 ;;		_ProcessIO
 12716 ;;		_USBCBInitEP
 12717 ;; This function uses a non-reentrant model
 12718 ;;
 12719                           
 12720                           
 12721                           ;psect for function _USBTransferOnePacket
 12722  1FB2                     _USBTransferOnePacket:	
 12723                           
 12724                           ;incstack = 0
 12725                           ; Regs used in _USBTransferOnePacket: [wreg+fsr1l+fsr1h+status,2+status,0]
 12726                           ;USBTransferOnePacket@ep stored from wreg
 12727  1FB2  0020               	movlb	0	; select bank0
 12728  1FB3  00E1               	movwf	USBTransferOnePacket@ep
 12729                           
 12730                           ;usb_device.c: 1174: volatile BDT_ENTRY* handle;
 12731                           ;usb_device.c: 1177: if(dir != 0)
 12732  1FB4  085C               	movf	USBTransferOnePacket@dir,w
 12733  1FB5  1903               	btfsc	3,2
 12734  1FB6  2FBC               	goto	l4415
 12735                           
 12736                           ;usb_device.c: 1178: {
 12737                           ;usb_device.c: 1180: handle = pBDTEntryIn[ep];
 12738  1FB7  0861               	movf	USBTransferOnePacket@ep,w
 12739  1FB8  3E68               	addlw	_pBDTEntryIn& (0+255)
 12740  1FB9  0086               	movwf	6
 12741  1FBA  0187               	clrf	7
 12742  1FBB  2FC1               	goto	L16
 12743  1FBC                     l4415:	
 12744                           ;usb_device.c: 1181: }
 12745                           
 12746                           
 12747                           ;usb_device.c: 1182: else
 12748                           ;usb_device.c: 1183: {
 12749                           ;usb_device.c: 1185: handle = pBDTEntryOut[ep];
 12750  1FBC  0861               	movf	USBTransferOnePacket@ep,w
 12751  1FBD  3E2E               	addlw	_pBDTEntryOut& (0+255)
 12752  1FBE  0086               	movwf	6
 12753  1FBF  3001               	movlw	1	; select bank2/3
 12754  1FC0  0087               	movwf	7
 12755  1FC1                     L16:	
 12756  1FC1  0801               	movf	1,w
 12757  1FC2  00DF               	movwf	??_USBTransferOnePacket
 12758  1FC3  085F               	movf	??_USBTransferOnePacket,w
 12759  1FC4  00E2               	movwf	USBTransferOnePacket@handle
 12760                           
 12761                           ;usb_device.c: 1186: }
 12762                           ;usb_device.c: 1190: if(handle == 0)
 12763  1FC5  08E2               	movf	USBTransferOnePacket@handle,f
 12764  1FC6  1D03               	skipz
 12765  1FC7  2FCA               	goto	l4423
 12766                           
 12767                           ;usb_device.c: 1191: {
 12768                           ;usb_device.c: 1192: return 0;
 12769  1FC8  3000               	movlw	0
 12770  1FC9  0008               	return
 12771  1FCA                     l4423:	
 12772                           
 12773                           ;usb_device.c: 1193: }
 12774                           ;usb_device.c: 1206: handle->ADR = (((WORD)(data))& 0x7FFF);
 12775  1FCA  085D               	movf	USBTransferOnePacket@data,w
 12776  1FCB  00DF               	movwf	??_USBTransferOnePacket
 12777  1FCC  3002               	movlw	2
 12778  1FCD  00E0               	movwf	??_USBTransferOnePacket+1
 12779  1FCE  0862               	movf	USBTransferOnePacket@handle,w
 12780  1FCF  3E02               	addlw	2
 12781  1FD0  0086               	movwf	6
 12782  1FD1  0187               	clrf	7
 12783  1FD2  085F               	movf	??_USBTransferOnePacket,w
 12784  1FD3  3FC0               	movwi [0]fsr1
 12785  1FD4  0860               	movf	??_USBTransferOnePacket+1,w
 12786  1FD5  3FC1               	movwi [1]fsr1
 12787                           
 12788                           ;usb_device.c: 1207: handle->CNT = len;
 12789  1FD6  085E               	movf	USBTransferOnePacket@len,w
 12790  1FD7  00DF               	movwf	??_USBTransferOnePacket
 12791  1FD8  0A62               	incf	USBTransferOnePacket@handle,w
 12792  1FD9  0086               	movwf	6
 12793  1FDA  0187               	clrf	7
 12794  1FDB  085F               	movf	??_USBTransferOnePacket,w
 12795  1FDC  0081               	movwf	1
 12796                           
 12797                           ;usb_device.c: 1208: handle->STAT.Val &= 0x40;
 12798  1FDD  3040               	movlw	64
 12799  1FDE  00DF               	movwf	??_USBTransferOnePacket
 12800  1FDF  0862               	movf	USBTransferOnePacket@handle,w
 12801  1FE0  0086               	movwf	6
 12802  1FE1  0187               	clrf	7
 12803  1FE2  085F               	movf	??_USBTransferOnePacket,w
 12804  1FE3  0581               	andwf	1,f
 12805                           
 12806                           ;usb_device.c: 1209: handle->STAT.Val |= 0x80 | (0x08 & 0x08);
 12807  1FE4  3088               	movlw	136
 12808  1FE5  00DF               	movwf	??_USBTransferOnePacket
 12809  1FE6  0862               	movf	USBTransferOnePacket@handle,w
 12810  1FE7  0086               	movwf	6
 12811  1FE8  0187               	clrf	7
 12812  1FE9  085F               	movf	??_USBTransferOnePacket,w
 12813  1FEA  0481               	iorwf	1,f
 12814                           
 12815                           ;usb_device.c: 1212: if(dir != 0)
 12816  1FEB  085C               	movf	USBTransferOnePacket@dir,w
 12817  1FEC  1903               	btfsc	3,2
 12818  1FED  2FF5               	goto	l4433
 12819                           
 12820                           ;usb_device.c: 1213: {
 12821                           ;usb_device.c: 1215: ((BYTE_VAL*)&pBDTEntryIn[ep])->Val ^= 0x0004;;
 12822  1FEE  3004               	movlw	4
 12823  1FEF  00DF               	movwf	??_USBTransferOnePacket
 12824  1FF0  0861               	movf	USBTransferOnePacket@ep,w
 12825  1FF1  3E68               	addlw	_pBDTEntryIn& (0+255)
 12826  1FF2  0086               	movwf	6
 12827  1FF3  0187               	clrf	7
 12828  1FF4  2FFC               	goto	L17
 12829  1FF5                     l4433:	
 12830                           ;usb_device.c: 1216: }
 12831                           
 12832                           
 12833                           ;usb_device.c: 1217: else
 12834                           ;usb_device.c: 1218: {
 12835                           ;usb_device.c: 1220: ((BYTE_VAL*)&pBDTEntryOut[ep])->Val ^= 0x0004;;
 12836  1FF5  3004               	movlw	4
 12837  1FF6  00DF               	movwf	??_USBTransferOnePacket
 12838  1FF7  0861               	movf	USBTransferOnePacket@ep,w
 12839  1FF8  3E2E               	addlw	_pBDTEntryOut& (0+255)
 12840  1FF9  0086               	movwf	6
 12841  1FFA  3001               	movlw	1	; select bank2/3
 12842  1FFB  0087               	movwf	7
 12843  1FFC                     L17:	
 12844  1FFC  085F               	movf	??_USBTransferOnePacket,w
 12845  1FFD  0681               	xorwf	1,f
 12846                           
 12847                           ;usb_device.c: 1221: }
 12848                           ;usb_device.c: 1222: return (void*)handle;
 12849  1FFE  0862               	movf	USBTransferOnePacket@handle,w
 12850  1FFF  0008               	return
 12851  2000                     __end_of_USBTransferOnePacket:	
 12852                           
 12853                           	psect	text51
 12854  1E2B                     __ptext51:	
 12855 ;; *************** function _USBEnableEndpoint *****************
 12856 ;; Defined at:
 12857 ;;		line 1056 in file "../USB/usb_device.c"
 12858 ;; Parameters:    Size  Location     Type
 12859 ;;  ep              1    wreg     unsigned char 
 12860 ;;  options         1   15[BANK0 ] unsigned char 
 12861 ;; Auto vars:     Size  Location     Type
 12862 ;;  ep              1   20[BANK0 ] unsigned char 
 12863 ;;  p               2   18[BANK0 ] PTR unsigned char 
 12864 ;;		 -> UEP0(1), 
 12865 ;; Return value:  Size  Location     Type
 12866 ;;		None               void
 12867 ;; Registers used:
 12868 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12869 ;; Tracked objects:
 12870 ;;		On entry : 0/0
 12871 ;;		On exit  : 0/0
 12872 ;;		Unchanged: 0/0
 12873 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12874 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12875 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12876 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12877 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12878 ;;Total ram usage:        6 bytes
 12879 ;; Hardware stack levels used:    1
 12880 ;; Hardware stack levels required when called:    5
 12881 ;; This function calls:
 12882 ;;		_USBConfigureEndpoint
 12883 ;; This function is called by:
 12884 ;;		_USBCBInitEP
 12885 ;; This function uses a non-reentrant model
 12886 ;;
 12887                           
 12888                           
 12889                           ;psect for function _USBEnableEndpoint
 12890  1E2B                     _USBEnableEndpoint:	
 12891                           
 12892                           ;incstack = 0
 12893                           ; Regs used in _USBEnableEndpoint: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12894                           ;USBEnableEndpoint@ep stored from wreg
 12895  1E2B  0020               	movlb	0	; select bank0
 12896  1E2C  00E4               	movwf	USBEnableEndpoint@ep
 12897                           
 12898                           ;usb_device.c: 1057: unsigned char* p;
 12899                           ;usb_device.c: 1061: if(options & 0x04)
 12900  1E2D  1D5F               	btfss	USBEnableEndpoint@options,2
 12901  1E2E  2E34               	goto	l4387
 12902                           
 12903                           ;usb_device.c: 1062: {
 12904                           ;usb_device.c: 1063: USBConfigureEndpoint(ep, 0);
 12905  1E2F  01D8               	clrf	?_USBConfigureEndpoint
 12906  1E30  0864               	movf	USBEnableEndpoint@ep,w
 12907  1E31  319F  272A  319E   	fcall	_USBConfigureEndpoint
 12908  1E34                     l4387:	
 12909                           
 12910                           ;usb_device.c: 1064: }
 12911                           ;usb_device.c: 1065: if(options & 0x02)
 12912  1E34  0020               	movlb	0	; select bank0
 12913  1E35  1CDF               	btfss	USBEnableEndpoint@options,1
 12914  1E36  2E3C               	goto	l4391
 12915                           
 12916                           ;usb_device.c: 1066: {
 12917                           ;usb_device.c: 1067: USBConfigureEndpoint(ep, 1);
 12918  1E37  01D8               	clrf	?_USBConfigureEndpoint
 12919  1E38  0AD8               	incf	?_USBConfigureEndpoint,f
 12920  1E39  0864               	movf	USBEnableEndpoint@ep,w
 12921  1E3A  319F  272A         	fcall	_USBConfigureEndpoint
 12922  1E3C                     l4391:	
 12923                           
 12924                           ;usb_device.c: 1068: }
 12925                           ;usb_device.c: 1076: p = (unsigned char*)(&UEP0+ep);
 12926  1E3C  0020               	movlb	0	; select bank0
 12927  1E3D  0864               	movf	USBEnableEndpoint@ep,w
 12928  1E3E  3E98               	addlw	152
 12929  1E3F  00E0               	movwf	??_USBEnableEndpoint
 12930  1E40  01E1               	clrf	??_USBEnableEndpoint+1
 12931  1E41  300E               	movlw	14
 12932  1E42  3DE1               	addwfc	??_USBEnableEndpoint+1,f
 12933  1E43  0860               	movf	??_USBEnableEndpoint,w
 12934  1E44  00E2               	movwf	USBEnableEndpoint@p
 12935  1E45  0861               	movf	??_USBEnableEndpoint+1,w
 12936  1E46  00E3               	movwf	USBEnableEndpoint@p+1
 12937                           
 12938                           ;usb_device.c: 1078: *p = options;
 12939  1E47  085F               	movf	USBEnableEndpoint@options,w
 12940  1E48  00E0               	movwf	??_USBEnableEndpoint
 12941  1E49  0862               	movf	USBEnableEndpoint@p,w
 12942  1E4A  0086               	movwf	6
 12943  1E4B  0863               	movf	USBEnableEndpoint@p+1,w
 12944  1E4C  0087               	movwf	7
 12945  1E4D  0860               	movf	??_USBEnableEndpoint,w
 12946  1E4E  0081               	movwf	1
 12947  1E4F  0008               	return
 12948  1E50                     __end_of_USBEnableEndpoint:	
 12949                           
 12950                           	psect	text52
 12951  1F2A                     __ptext52:	
 12952 ;; *************** function _USBConfigureEndpoint *****************
 12953 ;; Defined at:
 12954 ;;		line 1713 in file "../USB/usb_device.c"
 12955 ;; Parameters:    Size  Location     Type
 12956 ;;  EPNum           1    wreg     unsigned char 
 12957 ;;  direction       1    8[BANK0 ] unsigned char 
 12958 ;; Auto vars:     Size  Location     Type
 12959 ;;  EPNum           1   13[BANK0 ] unsigned char 
 12960 ;;  handle          1   14[BANK0 ] PTR volatile struct __BD
 12961 ;;		 -> BDT(32), 
 12962 ;; Return value:  Size  Location     Type
 12963 ;;		None               void
 12964 ;; Registers used:
 12965 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12966 ;; Tracked objects:
 12967 ;;		On entry : 0/0
 12968 ;;		On exit  : 0/0
 12969 ;;		Unchanged: 0/0
 12970 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12971 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12972 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12973 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12974 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12975 ;;Total ram usage:        7 bytes
 12976 ;; Hardware stack levels used:    1
 12977 ;; Hardware stack levels required when called:    4
 12978 ;; This function calls:
 12979 ;;		Nothing
 12980 ;; This function is called by:
 12981 ;;		_USBEnableEndpoint
 12982 ;; This function uses a non-reentrant model
 12983 ;;
 12984                           
 12985                           
 12986                           ;psect for function _USBConfigureEndpoint
 12987  1F2A                     _USBConfigureEndpoint:	
 12988                           
 12989                           ;incstack = 0
 12990                           ; Regs used in _USBConfigureEndpoint: [wreg+fsr1l+fsr1h+status,2+status,0]
 12991                           ;USBConfigureEndpoint@EPNum stored from wreg
 12992  1F2A  0020               	movlb	0	; select bank0
 12993  1F2B  00DD               	movwf	USBConfigureEndpoint@EPNum
 12994                           
 12995                           ;usb_device.c: 1714: volatile BDT_ENTRY* handle;
 12996                           ;usb_device.c: 1718: handle = (volatile BDT_ENTRY*)&BDT[0];
 12997  1F2C  3020               	movlw	32
 12998  1F2D  00D9               	movwf	??_USBConfigureEndpoint
 12999  1F2E  0859               	movf	??_USBConfigureEndpoint,w
 13000  1F2F  00DE               	movwf	USBConfigureEndpoint@handle
 13001                           
 13002                           ;usb_device.c: 1719: handle += (4*EPNum+2*direction+0u);
 13003  1F30  0858               	movf	USBConfigureEndpoint@direction,w
 13004  1F31  00D9               	movwf	??_USBConfigureEndpoint
 13005  1F32  3001               	movlw	1
 13006  1F33                     u3895:	
 13007  1F33  35D9               	lslf	??_USBConfigureEndpoint,f
 13008  1F34  0B89               	decfsz	9,f
 13009  1F35  2F33               	goto	u3895
 13010  1F36  085D               	movf	USBConfigureEndpoint@EPNum,w
 13011  1F37  00DA               	movwf	??_USBConfigureEndpoint+1
 13012  1F38  3001               	movlw	1
 13013  1F39                     u3905:	
 13014  1F39  35DA               	lslf	??_USBConfigureEndpoint+1,f
 13015  1F3A  3EFF               	addlw	-1
 13016  1F3B  1D03               	skipz
 13017  1F3C  2F39               	goto	u3905
 13018  1F3D  355A               	lslf	??_USBConfigureEndpoint+1,w
 13019  1F3E  0759               	addwf	??_USBConfigureEndpoint,w
 13020  1F3F  00DB               	movwf	??_USBConfigureEndpoint+2
 13021  1F40  3001               	movlw	1
 13022  1F41                     u3915:	
 13023  1F41  35DB               	lslf	??_USBConfigureEndpoint+2,f
 13024  1F42  3EFF               	addlw	-1
 13025  1F43  1D03               	skipz
 13026  1F44  2F41               	goto	u3915
 13027  1F45  355B               	lslf	??_USBConfigureEndpoint+2,w
 13028  1F46  00DC               	movwf	??_USBConfigureEndpoint+3
 13029  1F47  085C               	movf	??_USBConfigureEndpoint+3,w
 13030  1F48  07DE               	addwf	USBConfigureEndpoint@handle,f
 13031                           
 13032                           ;usb_device.c: 1721: handle->STAT.UOWN = 0;
 13033  1F49  085E               	movf	USBConfigureEndpoint@handle,w
 13034  1F4A  0086               	movwf	6
 13035  1F4B  0187               	clrf	7
 13036  1F4C  1381               	bcf	1,7
 13037                           
 13038                           ;usb_device.c: 1726: if(direction == 0)
 13039  1F4D  08D8               	movf	USBConfigureEndpoint@direction,f
 13040  1F4E  1D03               	skipz
 13041  1F4F  2F58               	goto	l4405
 13042                           
 13043                           ;usb_device.c: 1727: {
 13044                           ;usb_device.c: 1728: pBDTEntryOut[EPNum] = handle;
 13045  1F50  085E               	movf	USBConfigureEndpoint@handle,w
 13046  1F51  00D9               	movwf	??_USBConfigureEndpoint
 13047  1F52  085D               	movf	USBConfigureEndpoint@EPNum,w
 13048  1F53  3E2E               	addlw	_pBDTEntryOut& (0+255)
 13049  1F54  0086               	movwf	6
 13050  1F55  3001               	movlw	1	; select bank2/3
 13051  1F56  0087               	movwf	7
 13052  1F57  2F5E               	goto	L18
 13053  1F58                     l4405:	
 13054                           ;usb_device.c: 1729: }
 13055                           
 13056                           
 13057                           ;usb_device.c: 1730: else
 13058                           ;usb_device.c: 1731: {
 13059                           ;usb_device.c: 1732: pBDTEntryIn[EPNum] = handle;
 13060  1F58  085E               	movf	USBConfigureEndpoint@handle,w
 13061  1F59  00D9               	movwf	??_USBConfigureEndpoint
 13062  1F5A  085D               	movf	USBConfigureEndpoint@EPNum,w
 13063  1F5B  3E68               	addlw	_pBDTEntryIn& (0+255)
 13064  1F5C  0086               	movwf	6
 13065  1F5D  0187               	clrf	7
 13066  1F5E                     L18:	
 13067  1F5E  0859               	movf	??_USBConfigureEndpoint,w
 13068  1F5F  0081               	movwf	1
 13069                           
 13070                           ;usb_device.c: 1733: }
 13071                           ;usb_device.c: 1736: handle->STAT.DTS = 0;
 13072  1F60  085E               	movf	USBConfigureEndpoint@handle,w
 13073  1F61  0086               	movwf	6
 13074  1F62  0187               	clrf	7
 13075  1F63  1301               	bcf	1,6
 13076                           
 13077                           ;usb_device.c: 1737: (handle+1)->STAT.DTS = 1;
 13078  1F64  085E               	movf	USBConfigureEndpoint@handle,w
 13079  1F65  3E04               	addlw	4
 13080  1F66  0086               	movwf	6
 13081  1F67  0187               	clrf	7
 13082  1F68  1701               	bsf	1,6
 13083  1F69  0008               	return
 13084  1F6A                     __end_of_USBConfigureEndpoint:	
 13085                           
 13086                           	psect	text53
 13087  07FF                     __ptext53:	
 13088 ;; *************** function _USBCBStdSetDscHandler *****************
 13089 ;; Defined at:
 13090 ;;		line 434 in file "main.c"
 13091 ;; Parameters:    Size  Location     Type
 13092 ;;		None
 13093 ;; Auto vars:     Size  Location     Type
 13094 ;;		None
 13095 ;; Return value:  Size  Location     Type
 13096 ;;		None               void
 13097 ;; Registers used:
 13098 ;;		None
 13099 ;; Tracked objects:
 13100 ;;		On entry : 0/0
 13101 ;;		On exit  : 0/0
 13102 ;;		Unchanged: 0/0
 13103 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13104 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13105 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13106 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13107 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13108 ;;Total ram usage:        0 bytes
 13109 ;; Hardware stack levels used:    1
 13110 ;; Hardware stack levels required when called:    4
 13111 ;; This function calls:
 13112 ;;		Nothing
 13113 ;; This function is called by:
 13114 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 13115 ;; This function uses a non-reentrant model
 13116 ;;
 13117                           
 13118                           
 13119                           ;psect for function _USBCBStdSetDscHandler
 13120  07FF                     _USBCBStdSetDscHandler:	
 13121                           
 13122                           ;incstack = 0
 13123                           ; Regs used in _USBCBStdSetDscHandler: []
 13124  07FF  0008               	return
 13125  0800                     __end_of_USBCBStdSetDscHandler:	
 13126                           
 13127                           	psect	text54
 13128  1C27                     __ptext54:	
 13129 ;; *************** function _USBCBCheckOtherReq *****************
 13130 ;; Defined at:
 13131 ;;		line 409 in file "main.c"
 13132 ;; Parameters:    Size  Location     Type
 13133 ;;		None
 13134 ;; Auto vars:     Size  Location     Type
 13135 ;;		None
 13136 ;; Return value:  Size  Location     Type
 13137 ;;		None               void
 13138 ;; Registers used:
 13139 ;;		status,2, status,0, pclath, cstack
 13140 ;; Tracked objects:
 13141 ;;		On entry : 0/0
 13142 ;;		On exit  : 0/0
 13143 ;;		Unchanged: 0/0
 13144 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13145 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13146 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13147 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13148 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13149 ;;Total ram usage:        0 bytes
 13150 ;; Hardware stack levels used:    1
 13151 ;; Hardware stack levels required when called:    5
 13152 ;; This function calls:
 13153 ;;		_USBCheckVendorRequest
 13154 ;; This function is called by:
 13155 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 13156 ;; This function uses a non-reentrant model
 13157 ;;
 13158                           
 13159                           
 13160                           ;psect for function _USBCBCheckOtherReq
 13161  1C27                     _USBCBCheckOtherReq:	
 13162                           
 13163                           ;main.c: 410: USBCheckVendorRequest();
 13164                           
 13165                           ;incstack = 0
 13166                           ; Regs used in _USBCBCheckOtherReq: [status,2+status,0+pclath+cstack]
 13167  1C27  3180  2003         	fcall	_USBCheckVendorRequest
 13168  1C29  0008               	return
 13169  1C2A                     __end_of_USBCBCheckOtherReq:	
 13170                           
 13171                           	psect	text55
 13172  0003                     __ptext55:	
 13173 ;; *************** function _USBCheckVendorRequest *****************
 13174 ;; Defined at:
 13175 ;;		line 248 in file "../USB/usb_function_generic.c"
 13176 ;; Parameters:    Size  Location     Type
 13177 ;;		None
 13178 ;; Auto vars:     Size  Location     Type
 13179 ;;		None
 13180 ;; Return value:  Size  Location     Type
 13181 ;;		None               void
 13182 ;; Registers used:
 13183 ;;		None
 13184 ;; Tracked objects:
 13185 ;;		On entry : 0/0
 13186 ;;		On exit  : 0/0
 13187 ;;		Unchanged: 0/0
 13188 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13189 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13190 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13191 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13192 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13193 ;;Total ram usage:        0 bytes
 13194 ;; Hardware stack levels used:    1
 13195 ;; Hardware stack levels required when called:    4
 13196 ;; This function calls:
 13197 ;;		Nothing
 13198 ;; This function is called by:
 13199 ;;		_USBCBCheckOtherReq
 13200 ;; This function uses a non-reentrant model
 13201 ;;
 13202                           
 13203                           
 13204                           ;psect for function _USBCheckVendorRequest
 13205  0003                     _USBCheckVendorRequest:	
 13206                           
 13207                           ;incstack = 0
 13208                           ; Regs used in _USBCheckVendorRequest: []
 13209  0003  0008               	return
 13210  0004                     __end_of_USBCheckVendorRequest:	
 13211                           
 13212                           	psect	text56
 13213  0002                     __ptext56:	
 13214 ;; *************** function _USBCBErrorHandler *****************
 13215 ;; Defined at:
 13216 ;;		line 358 in file "main.c"
 13217 ;; Parameters:    Size  Location     Type
 13218 ;;		None
 13219 ;; Auto vars:     Size  Location     Type
 13220 ;;		None
 13221 ;; Return value:  Size  Location     Type
 13222 ;;		None               void
 13223 ;; Registers used:
 13224 ;;		None
 13225 ;; Tracked objects:
 13226 ;;		On entry : 0/0
 13227 ;;		On exit  : 0/0
 13228 ;;		Unchanged: 0/0
 13229 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13230 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13231 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13232 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13233 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13234 ;;Total ram usage:        0 bytes
 13235 ;; Hardware stack levels used:    1
 13236 ;; Hardware stack levels required when called:    4
 13237 ;; This function calls:
 13238 ;;		Nothing
 13239 ;; This function is called by:
 13240 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 13241 ;; This function uses a non-reentrant model
 13242 ;;
 13243                           
 13244                           
 13245                           ;psect for function _USBCBErrorHandler
 13246  0002                     _USBCBErrorHandler:	
 13247                           
 13248                           ;incstack = 0
 13249                           ; Regs used in _USBCBErrorHandler: []
 13250  0002  0008               	return
 13251  0003                     __end_of_USBCBErrorHandler:	
 13252                           
 13253                           	psect	text57
 13254  1001                     __ptext57:	
 13255 ;; *************** function _USBCB_SOF_Handler *****************
 13256 ;; Defined at:
 13257 ;;		line 335 in file "main.c"
 13258 ;; Parameters:    Size  Location     Type
 13259 ;;		None
 13260 ;; Auto vars:     Size  Location     Type
 13261 ;;		None
 13262 ;; Return value:  Size  Location     Type
 13263 ;;		None               void
 13264 ;; Registers used:
 13265 ;;		None
 13266 ;; Tracked objects:
 13267 ;;		On entry : 0/0
 13268 ;;		On exit  : 0/0
 13269 ;;		Unchanged: 0/0
 13270 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13271 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13272 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13273 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13274 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13275 ;;Total ram usage:        0 bytes
 13276 ;; Hardware stack levels used:    1
 13277 ;; Hardware stack levels required when called:    4
 13278 ;; This function calls:
 13279 ;;		Nothing
 13280 ;; This function is called by:
 13281 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 13282 ;; This function uses a non-reentrant model
 13283 ;;
 13284                           
 13285                           
 13286                           ;psect for function _USBCB_SOF_Handler
 13287  1001                     _USBCB_SOF_Handler:	
 13288                           
 13289                           ;incstack = 0
 13290                           ; Regs used in _USBCB_SOF_Handler: []
 13291  1001  0008               	return
 13292  1002                     __end_of_USBCB_SOF_Handler:	
 13293                           
 13294                           	psect	text58
 13295  1000                     __ptext58:	
 13296 ;; *************** function _USBCBWakeFromSuspend *****************
 13297 ;; Defined at:
 13298 ;;		line 305 in file "main.c"
 13299 ;; Parameters:    Size  Location     Type
 13300 ;;		None
 13301 ;; Auto vars:     Size  Location     Type
 13302 ;;		None
 13303 ;; Return value:  Size  Location     Type
 13304 ;;		None               void
 13305 ;; Registers used:
 13306 ;;		None
 13307 ;; Tracked objects:
 13308 ;;		On entry : 0/0
 13309 ;;		On exit  : 0/0
 13310 ;;		Unchanged: 0/0
 13311 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13312 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13313 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13314 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13315 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13316 ;;Total ram usage:        0 bytes
 13317 ;; Hardware stack levels used:    1
 13318 ;; Hardware stack levels required when called:    4
 13319 ;; This function calls:
 13320 ;;		Nothing
 13321 ;; This function is called by:
 13322 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 13323 ;;		_USBCBSendResume
 13324 ;; This function uses a non-reentrant model
 13325 ;;
 13326                           
 13327                           
 13328                           ;psect for function _USBCBWakeFromSuspend
 13329  1000                     _USBCBWakeFromSuspend:	
 13330                           
 13331                           ;incstack = 0
 13332                           ; Regs used in _USBCBWakeFromSuspend: []
 13333  1000  0008               	return
 13334  1001                     __end_of_USBCBWakeFromSuspend:	
 13335                           
 13336                           	psect	text59
 13337  1C26                     __ptext59:	
 13338 ;; *************** function _USBCBSuspend *****************
 13339 ;; Defined at:
 13340 ;;		line 264 in file "main.c"
 13341 ;; Parameters:    Size  Location     Type
 13342 ;;		None
 13343 ;; Auto vars:     Size  Location     Type
 13344 ;;		None
 13345 ;; Return value:  Size  Location     Type
 13346 ;;		None               void
 13347 ;; Registers used:
 13348 ;;		None
 13349 ;; Tracked objects:
 13350 ;;		On entry : 0/0
 13351 ;;		On exit  : 0/0
 13352 ;;		Unchanged: 0/0
 13353 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13354 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13355 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13356 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13357 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13358 ;;Total ram usage:        0 bytes
 13359 ;; Hardware stack levels used:    1
 13360 ;; Hardware stack levels required when called:    4
 13361 ;; This function calls:
 13362 ;;		Nothing
 13363 ;; This function is called by:
 13364 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 13365 ;; This function uses a non-reentrant model
 13366 ;;
 13367                           
 13368                           
 13369                           ;psect for function _USBCBSuspend
 13370  1C26                     _USBCBSuspend:	
 13371                           
 13372                           ;incstack = 0
 13373                           ; Regs used in _USBCBSuspend: []
 13374  1C26  0008               	return
 13375  1C27                     __end_of_USBCBSuspend:	
 13376                           
 13377                           	psect	text60
 13378  09E7                     __ptext60:	
 13379 ;; *************** function _USBDeviceInit *****************
 13380 ;; Defined at:
 13381 ;;		line 467 in file "../USB/usb_device.c"
 13382 ;; Parameters:    Size  Location     Type
 13383 ;;		None
 13384 ;; Auto vars:     Size  Location     Type
 13385 ;;  p               2   10[BANK0 ] PTR unsigned char 
 13386 ;;		 -> UEP1(1), 
 13387 ;;  i               1   12[BANK0 ] unsigned char 
 13388 ;;  i               1   13[BANK0 ] unsigned char 
 13389 ;; Return value:  Size  Location     Type
 13390 ;;		None               void
 13391 ;; Registers used:
 13392 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13393 ;; Tracked objects:
 13394 ;;		On entry : 0/0
 13395 ;;		On exit  : 0/0
 13396 ;;		Unchanged: 0/0
 13397 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13398 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13399 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13400 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13401 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13402 ;;Total ram usage:        6 bytes
 13403 ;; Hardware stack levels used:    1
 13404 ;; Hardware stack levels required when called:    4
 13405 ;; This function calls:
 13406 ;;		Nothing
 13407 ;; This function is called by:
 13408 ;;		_USBDeviceTasks
 13409 ;;		_InitializeSystem
 13410 ;; This function uses a non-reentrant model
 13411 ;;
 13412                           
 13413                           
 13414                           ;psect for function _USBDeviceInit
 13415  09E7                     _USBDeviceInit:	
 13416                           
 13417                           ;usb_device.c: 468: BYTE i;
 13418                           ;usb_device.c: 470: {PIE2bits.USBIE = 0;};
 13419                           
 13420                           ;incstack = 0
 13421                           ; Regs used in _USBDeviceInit: [wreg+fsr1l+fsr1h+status,2+status,0]
 13422  09E7  0021               	movlb	1	; select bank1
 13423  09E8  1112               	bcf	18,2	;volatile
 13424                           
 13425                           ;usb_device.c: 473: UEIR = 0;;
 13426  09E9  003D               	movlb	29	; select bank29
 13427  09EA  0193               	clrf	19	;volatile
 13428                           
 13429                           ;usb_device.c: 476: UIR = 0;;
 13430  09EB  0190               	clrf	16	;volatile
 13431                           
 13432                           ;usb_device.c: 479: UEP0 = 0;
 13433  09EC  0198               	clrf	24	;volatile
 13434                           
 13435                           ;usb_device.c: 481: { BYTE i; BYTE* p = (BYTE*)&UEP1; for(i=0;i<1;i++) *p++ = 0; };
 13436  09ED  300E               	movlw	14
 13437  09EE  0020               	movlb	0	; select bank0
 13438  09EF  00DB               	movwf	USBDeviceInit@p+1
 13439  09F0  3099               	movlw	153
 13440  09F1  00DA               	movwf	USBDeviceInit@p
 13441  09F2  01DC               	clrf	USBDeviceInit@i_718
 13442  09F3  085C               	movf	USBDeviceInit@i_718,w
 13443  09F4  1D03               	skipz
 13444  09F5  2A06               	goto	l4083
 13445  09F6                     l4075:	
 13446  09F6  085A               	movf	USBDeviceInit@p,w
 13447  09F7  0086               	movwf	6
 13448  09F8  085B               	movf	USBDeviceInit@p+1,w
 13449  09F9  0087               	movwf	7
 13450  09FA  0181               	clrf	1
 13451  09FB  3001               	movlw	1
 13452  09FC  07DA               	addwf	USBDeviceInit@p,f
 13453  09FD  3000               	movlw	0
 13454  09FE  3DDB               	addwfc	USBDeviceInit@p+1,f
 13455  09FF  3001               	movlw	1
 13456  0A00  00D8               	movwf	??_USBDeviceInit
 13457  0A01  0858               	movf	??_USBDeviceInit,w
 13458  0A02  07DC               	addwf	USBDeviceInit@i_718,f
 13459  0A03  085C               	movf	USBDeviceInit@i_718,w
 13460  0A04  1903               	btfsc	3,2
 13461  0A05  29F6               	goto	l4075
 13462  0A06                     l4083:	
 13463                           
 13464                           ;usb_device.c: 483: { UCFG = 0x10 | 0x00 | 0x04 | 0x02; UEIE = 0x9F; UIE = 0x39 | 0x40 |
      +                           0x02; };
 13465  0A06  3016               	movlw	22
 13466  0A07  003D               	movlb	29	; select bank29
 13467  0A08  0091               	movwf	17	;volatile
 13468  0A09  309F               	movlw	159
 13469  0A0A  0097               	movwf	23	;volatile
 13470  0A0B  307B               	movlw	123
 13471  0A0C  0092               	movwf	18	;volatile
 13472                           
 13473                           ;usb_device.c: 486: ;
 13474                           ;usb_device.c: 489: ;
 13475                           ;usb_device.c: 492: for(i=0;i<(sizeof(BDT)/sizeof(BDT_ENTRY));i++)
 13476  0A0D  0020               	movlb	0	; select bank0
 13477  0A0E  01DD               	clrf	USBDeviceInit@i
 13478  0A0F  3008               	movlw	8
 13479  0A10  025D               	subwf	USBDeviceInit@i,w
 13480  0A11  1803               	btfsc	3,0
 13481  0A12  2A2C               	goto	l128
 13482  0A13                     l4091:	
 13483                           
 13484                           ;usb_device.c: 493: {
 13485                           ;usb_device.c: 494: BDT[i].Val = 0x00;
 13486  0A13  085D               	movf	USBDeviceInit@i,w
 13487  0A14  00D8               	movwf	??_USBDeviceInit
 13488  0A15  3001               	movlw	1
 13489  0A16                     u3435:	
 13490  0A16  35D8               	lslf	??_USBDeviceInit,f
 13491  0A17  3EFF               	addlw	-1
 13492  0A18  1D03               	skipz
 13493  0A19  2A16               	goto	u3435
 13494  0A1A  3558               	lslf	??_USBDeviceInit,w
 13495  0A1B  3E20               	addlw	32
 13496  0A1C  0086               	movwf	6
 13497  0A1D  0187               	clrf	7
 13498  0A1E  3000               	movlw	0
 13499  0A1F  3FC0               	movwi [0]fsr1
 13500  0A20  3000               	movlw	0
 13501  0A21  3FC1               	movwi [1]fsr1
 13502  0A22  3FC2               	movwi [2]fsr1
 13503  0A23  3FC3               	movwi [3]fsr1
 13504  0A24  3001               	movlw	1
 13505  0A25  00D8               	movwf	??_USBDeviceInit
 13506  0A26  0858               	movf	??_USBDeviceInit,w
 13507  0A27  07DD               	addwf	USBDeviceInit@i,f
 13508  0A28  3008               	movlw	8
 13509  0A29  025D               	subwf	USBDeviceInit@i,w
 13510  0A2A  1C03               	skipc
 13511  0A2B  2A13               	goto	l4091
 13512  0A2C                     l128:	
 13513                           
 13514                           ;usb_device.c: 495: }
 13515                           ;usb_device.c: 498: UCONbits.PPBRST = 1;
 13516  0A2C  003D               	movlb	29	; select bank29
 13517  0A2D  170E               	bsf	14,6	;volatile
 13518                           
 13519                           ;usb_device.c: 501: UADDR = 0x00;
 13520  0A2E  0196               	clrf	22	;volatile
 13521                           
 13522                           ;usb_device.c: 504: UCONbits.PKTDIS = 0;
 13523  0A2F  120E               	bcf	14,4	;volatile
 13524                           
 13525                           ;usb_device.c: 507: UCONbits.PPBRST = 0;
 13526  0A30  130E               	bcf	14,6	;volatile
 13527  0A31                     l4111:	
 13528                           ;usb_device.c: 510: while(UIRbits.TRNIF == 1)
 13529                           
 13530  0A31  003D               	movlb	29	; select bank29
 13531  0A32  1D90               	btfss	16,3	;volatile
 13532  0A33  2A40               	goto	l4113
 13533                           
 13534                           ;usb_device.c: 511: {
 13535                           ;usb_device.c: 512: (UIR &= 0xF7);
 13536  0A34  30F7               	movlw	247
 13537  0A35  0020               	movlb	0	; select bank0
 13538  0A36  00D8               	movwf	??_USBDeviceInit
 13539  0A37  0858               	movf	??_USBDeviceInit,w
 13540  0A38  003D               	movlb	29	; select bank29
 13541  0A39  0590               	andwf	16,f	;volatile
 13542                           
 13543                           ;usb_device.c: 514: inPipes[0].info.Val = 0;
 13544  0A3A  0022               	movlb	2	; select bank2
 13545  0A3B  01CF               	clrf	(_inPipes^(0+256)+2)
 13546                           
 13547                           ;usb_device.c: 515: outPipes[0].info.Val = 0;
 13548  0A3C  01A2               	clrf	(_outPipes^(0+256)+2)
 13549                           
 13550                           ;usb_device.c: 516: outPipes[0].wCount.Val = 0;
 13551  0A3D  01A3               	clrf	(_outPipes^(0+256)+3)
 13552  0A3E  01A4               	clrf	((_outPipes+1)^(0+256)+3)
 13553  0A3F  2A31               	goto	l4111
 13554  0A40                     l4113:	
 13555                           
 13556                           ;usb_device.c: 517: }
 13557                           ;usb_device.c: 521: USBStatusStageEnabledFlag1 = TRUE;
 13558  0A40  3001               	movlw	1
 13559  0A41  0020               	movlb	0	; select bank0
 13560  0A42  00D8               	movwf	??_USBDeviceInit
 13561  0A43  0858               	movf	??_USBDeviceInit,w
 13562  0A44  0022               	movlb	2	; select bank2
 13563  0A45  00C2               	movwf	_USBStatusStageEnabledFlag1^(0+256)	;volatile
 13564                           
 13565                           ;usb_device.c: 522: USBStatusStageEnabledFlag2 = TRUE;
 13566  0A46  3001               	movlw	1
 13567  0A47  0020               	movlb	0	; select bank0
 13568  0A48  00D8               	movwf	??_USBDeviceInit
 13569  0A49  0858               	movf	??_USBDeviceInit,w
 13570  0A4A  0022               	movlb	2	; select bank2
 13571  0A4B  00C3               	movwf	_USBStatusStageEnabledFlag2^(0+256)	;volatile
 13572                           
 13573                           ;usb_device.c: 524: USBDeferINDataStagePackets = FALSE;
 13574  0A4C  01BE               	clrf	_USBDeferINDataStagePackets^(0+256)	;volatile
 13575                           
 13576                           ;usb_device.c: 525: USBDeferOUTDataStagePackets = FALSE;
 13577  0A4D  01BF               	clrf	_USBDeferOUTDataStagePackets^(0+256)	;volatile
 13578                           
 13579                           ;usb_device.c: 526: USBBusIsSuspended = FALSE;
 13580  0A4E  01BD               	clrf	_USBBusIsSuspended^(0+256)
 13581                           
 13582                           ;usb_device.c: 530: for(i = 0; i < (BYTE)(1+1u); i++)
 13583  0A4F  0020               	movlb	0	; select bank0
 13584  0A50  01DD               	clrf	USBDeviceInit@i
 13585  0A51  3002               	movlw	2
 13586  0A52  025D               	subwf	USBDeviceInit@i,w
 13587  0A53  1803               	btfsc	3,0
 13588  0A54  2A74               	goto	l4131
 13589  0A55                     l4125:	
 13590                           
 13591                           ;usb_device.c: 531: {
 13592                           ;usb_device.c: 532: pBDTEntryIn[i] = 0u;
 13593  0A55  085D               	movf	USBDeviceInit@i,w
 13594  0A56  3E68               	addlw	_pBDTEntryIn& (0+255)
 13595  0A57  0086               	movwf	6
 13596  0A58  0187               	clrf	7
 13597  0A59  0181               	clrf	1
 13598                           
 13599                           ;usb_device.c: 533: pBDTEntryOut[i] = 0u;
 13600  0A5A  085D               	movf	USBDeviceInit@i,w
 13601  0A5B  3E2E               	addlw	_pBDTEntryOut& (0+255)
 13602  0A5C  0086               	movwf	6
 13603  0A5D  3001               	movlw	1	; select bank2/3
 13604  0A5E  0087               	movwf	7
 13605  0A5F  0181               	clrf	1
 13606                           
 13607                           ;usb_device.c: 534: ep_data_in[i].Val = 0u;
 13608  0A60  085D               	movf	USBDeviceInit@i,w
 13609  0A61  3E2A               	addlw	_ep_data_in& (0+255)
 13610  0A62  0086               	movwf	6
 13611  0A63  3001               	movlw	1	; select bank2/3
 13612  0A64  0087               	movwf	7
 13613  0A65  0181               	clrf	1
 13614                           
 13615                           ;usb_device.c: 535: ep_data_out[i].Val = 0u;
 13616  0A66  085D               	movf	USBDeviceInit@i,w
 13617  0A67  3E2C               	addlw	_ep_data_out& (0+255)
 13618  0A68  0086               	movwf	6
 13619  0A69  3001               	movlw	1	; select bank2/3
 13620  0A6A  0087               	movwf	7
 13621  0A6B  0181               	clrf	1
 13622  0A6C  3001               	movlw	1
 13623  0A6D  00D8               	movwf	??_USBDeviceInit
 13624  0A6E  0858               	movf	??_USBDeviceInit,w
 13625  0A6F  07DD               	addwf	USBDeviceInit@i,f
 13626  0A70  3002               	movlw	2
 13627  0A71  025D               	subwf	USBDeviceInit@i,w
 13628  0A72  1C03               	skipc
 13629  0A73  2A55               	goto	l4125
 13630  0A74                     l4131:	
 13631                           
 13632                           ;usb_device.c: 536: }
 13633                           ;usb_device.c: 539: pBDTEntryIn[0] = (volatile BDT_ENTRY*)&BDT[2];
 13634  0A74  3028               	movlw	40
 13635  0A75  00D8               	movwf	??_USBDeviceInit
 13636  0A76  0858               	movf	??_USBDeviceInit,w
 13637  0A77  00E8               	movwf	_pBDTEntryIn
 13638                           
 13639                           ;usb_device.c: 541: UEP0 = 0x06|0x10;
 13640  0A78  3016               	movlw	22
 13641  0A79  003D               	movlb	29	; select bank29
 13642  0A7A  0098               	movwf	24	;volatile
 13643                           
 13644                           ;usb_device.c: 543: BDT[0].ADR = (((WORD)(&SetupPkt))& 0x7FFF);
 13645  0A7B  3040               	movlw	64
 13646  0A7C  0020               	movlb	0	; select bank0
 13647  0A7D  00D8               	movwf	??_USBDeviceInit
 13648  0A7E  3000               	movlw	0
 13649  0A7F  00D9               	movwf	??_USBDeviceInit+1
 13650  0A80  0858               	movf	??_USBDeviceInit,w
 13651  0A81  00A2               	movwf	34	;volatile
 13652  0A82  0859               	movf	??_USBDeviceInit+1,w
 13653  0A83  00A3               	movwf	35	;volatile
 13654                           
 13655                           ;usb_device.c: 544: BDT[0].CNT = 8;
 13656  0A84  3008               	movlw	8
 13657  0A85  00A1               	movwf	33	;volatile
 13658                           
 13659                           ;usb_device.c: 545: BDT[0].STAT.Val = 0x80|0x00|0x04;
 13660  0A86  3084               	movlw	132
 13661  0A87  00D8               	movwf	??_USBDeviceInit
 13662  0A88  0858               	movf	??_USBDeviceInit,w
 13663  0A89  00A0               	movwf	32	;volatile
 13664                           
 13665                           ;usb_device.c: 548: USBActiveConfiguration = 0;
 13666  0A8A  0022               	movlb	2	; select bank2
 13667  0A8B  01D4               	clrf	_USBActiveConfiguration^(0+256)
 13668                           
 13669                           ;usb_device.c: 551: USBDeviceState = DETACHED_STATE;
 13670  0A8C  0021               	movlb	1	; select bank1
 13671  0A8D  01EE               	clrf	_USBDeviceState^(0+128)
 13672  0A8E  0008               	return
 13673  0A8F                     __end_of_USBDeviceInit:	
 13674                           
 13675                           	psect	intentry
 13676  0004                     __pintentry:	
 13677 ;; *************** function _ISRCode *****************
 13678 ;; Defined at:
 13679 ;;		line 70 in file "main.c"
 13680 ;; Parameters:    Size  Location     Type
 13681 ;;		None
 13682 ;; Auto vars:     Size  Location     Type
 13683 ;;		None
 13684 ;; Return value:  Size  Location     Type
 13685 ;;		None               void
 13686 ;; Registers used:
 13687 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
 13688 ;; Tracked objects:
 13689 ;;		On entry : 0/0
 13690 ;;		On exit  : 0/0
 13691 ;;		Unchanged: 0/0
 13692 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13693 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13694 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13695 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13696 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13697 ;;Total ram usage:        1 bytes
 13698 ;; Hardware stack levels used:    1
 13699 ;; Hardware stack levels required when called:    3
 13700 ;; This function calls:
 13701 ;;		_ResultRx
 13702 ;; This function is called by:
 13703 ;;		Interrupt level 1
 13704 ;; This function uses a non-reentrant model
 13705 ;;
 13706                           
 13707  0004                     _ISRCode:	
 13708                           
 13709                           ;incstack = 0
 13710                           ; Regs used in _ISRCode: [wreg-fsr1h+status,2+status,0+btemp+1+pclath+cstack]
 13711  0004  3180               	pagesel	$
 13712  0005  0020               	movlb	0	; select bank0
 13713  0006  087F               	movf	127,w
 13714  0007  00FD               	movwf	??_ISRCode
 13715                           
 13716                           ;main.c: 72: if(IOCBF)
 13717  0008  0027               	movlb	7	; select bank7
 13718  0009  0816               	movf	22,w	;volatile
 13719  000A  1903               	btfsc	3,2
 13720  000B  280E               	goto	i1l854
 13721                           
 13722                           ;main.c: 73: ResultRx();
 13723  000C  3191  2148         	fcall	_ResultRx
 13724  000E                     i1l854:	
 13725  000E  087D               	movf	??_ISRCode,w
 13726  000F  0020               	movlb	0	; select bank0
 13727  0010  00FF               	movwf	127
 13728  0011  0009               	retfie
 13729  0012                     __end_of_ISRCode:	
 13730                           
 13731                           	psect	text62
 13732  1148                     __ptext62:	
 13733 ;; *************** function _ResultRx *****************
 13734 ;; Defined at:
 13735 ;;		line 195 in file "klondike.c"
 13736 ;; Parameters:    Size  Location     Type
 13737 ;;		None
 13738 ;; Auto vars:     Size  Location     Type
 13739 ;;		None
 13740 ;; Return value:  Size  Location     Type
 13741 ;;		None               void
 13742 ;; Registers used:
 13743 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
 13744 ;; Tracked objects:
 13745 ;;		On entry : 0/0
 13746 ;;		On exit  : 0/0
 13747 ;;		Unchanged: 0/0
 13748 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13749 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13750 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13751 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13752 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13753 ;;Total ram usage:        1 bytes
 13754 ;; Hardware stack levels used:    1
 13755 ;; Hardware stack levels required when called:    2
 13756 ;; This function calls:
 13757 ;;		i1_SendCmdReply
 13758 ;; This function is called by:
 13759 ;;		_ISRCode
 13760 ;; This function uses a non-reentrant model
 13761 ;;
 13762                           
 13763                           
 13764                           ;psect for function _ResultRx
 13765  1148                     _ResultRx:	
 13766                           
 13767                           ;klondike.c: 196: TimeOut = 0;
 13768                           
 13769                           ;incstack = 0
 13770                           ; Regs used in _ResultRx: [wreg-fsr1h+status,2+status,0+btemp+1+pclath+cstack]
 13771  1148  0022               	movlb	2	; select bank2
 13772  1149  01BC               	clrf	_TimeOut^(0+256)
 13773  114A                     i1l7215:	
 13774                           ;klondike.c: 198: while(ResultQC < 4) {
 13775                           
 13776  114A  3004               	movlw	4
 13777  114B  0022               	movlb	2	; select bank2
 13778  114C  0239               	subwf	_ResultQC^(0+256),w
 13779  114D  1803               	btfsc	3,0
 13780  114E  297E               	goto	i1l7217
 13781                           
 13782                           ;klondike.c: 199: if(RCIF) {
 13783  114F  0020               	movlb	0	; select bank0
 13784  1150  1E91               	btfss	17,5	;volatile
 13785  1151  2963               	goto	i1l7207
 13786                           
 13787                           ;klondike.c: 200: ResultQue[2+ResultQC++] = RCREG;
 13788  1152  0023               	movlb	3	; select bank3
 13789  1153  0819               	movf	25,w	;volatile
 13790  1154  00FC               	movwf	??_ResultRx
 13791  1155  0022               	movlb	2	; select bank2
 13792  1156  0839               	movf	_ResultQC^(0+256),w
 13793  1157  3E02               	addlw	2
 13794  1158  3ECA               	addlw	_ResultQue& (0+255)
 13795  1159  0086               	movwf	6
 13796  115A  3001               	movlw	1	; select bank3/4
 13797  115B  0087               	movwf	7
 13798  115C  087C               	movf	??_ResultRx,w
 13799  115D  0081               	movwf	1
 13800  115E  3001               	movlw	1
 13801  115F  00FC               	movwf	??_ResultRx
 13802  1160  087C               	movf	??_ResultRx,w
 13803  1161  07B9               	addwf	_ResultQC^(0+256),f
 13804                           
 13805                           ;klondike.c: 201: TimeOut = 0;
 13806  1162  01BC               	clrf	_TimeOut^(0+256)
 13807  1163                     i1l7207:	
 13808                           
 13809                           ;klondike.c: 202: }
 13810                           ;klondike.c: 203: if(TimeOut++ > 32) {
 13811  1163  3001               	movlw	1
 13812  1164  00FC               	movwf	??_ResultRx
 13813  1165  087C               	movf	??_ResultRx,w
 13814  1166  0022               	movlb	2	; select bank2
 13815  1167  07BC               	addwf	_TimeOut^(0+256),f
 13816  1168  3022               	movlw	34
 13817  1169  023C               	subwf	_TimeOut^(0+256),w
 13818  116A  1C03               	skipc
 13819  116B  2971               	goto	i1l743
 13820                           
 13821                           ;klondike.c: 204: Status.Noise++;
 13822  116C  3001               	movlw	1
 13823  116D  00FC               	movwf	??_ResultRx
 13824  116E  087C               	movf	??_ResultRx,w
 13825  116F  07E5               	addwf	(_Status^(0+256)+12),f	;volatile
 13826                           
 13827                           ;klondike.c: 205: goto outrx;
 13828  1170  299B               	goto	i1l7223
 13829  1171                     i1l743:	
 13830                           
 13831                           ;klondike.c: 206: }
 13832                           ;klondike.c: 207: if(RCSTAbits.OERR) {
 13833  1171  0023               	movlb	3	; select bank3
 13834  1172  1C9D               	btfss	29,1	;volatile
 13835  1173  294A               	goto	i1l7215
 13836                           
 13837                           ;klondike.c: 208: if(Status.State == 'W') {
 13838  1174  0022               	movlb	2	; select bank2
 13839  1175  0859               	movf	_Status^(0+256),w	;volatile
 13840  1176  3A57               	xorlw	87
 13841  1177  1D03               	skipz
 13842  1178  299B               	goto	i1l7223
 13843                           
 13844                           ;klondike.c: 209: Status.ErrorCount++;
 13845  1179  3001               	movlw	1
 13846  117A  00FC               	movwf	??_ResultRx
 13847  117B  087C               	movf	??_ResultRx,w
 13848  117C  07E0               	addwf	(_Status^(0+256)+7),f	;volatile
 13849                           
 13850                           ;klondike.c: 210: }
 13851                           ;klondike.c: 211: goto outrx;
 13852  117D  299B               	goto	i1l7223
 13853  117E                     i1l7217:	
 13854                           
 13855                           ;klondike.c: 212: }
 13856                           ;klondike.c: 213: }
 13857                           ;klondike.c: 215: if(Status.State == 'W') {
 13858  117E  0859               	movf	_Status^(0+256),w	;volatile
 13859  117F  3A57               	xorlw	87
 13860  1180  1D03               	skipz
 13861  1181  299B               	goto	i1l7223
 13862                           
 13863                           ;klondike.c: 216: ResultQue[0] = '=';
 13864  1182  303D               	movlw	61
 13865  1183  00FC               	movwf	??_ResultRx
 13866  1184  087C               	movf	??_ResultRx,w
 13867  1185  0023               	movlb	3	; select bank3
 13868  1186  00CA               	movwf	_ResultQue^(0+384)	;volatile
 13869                           
 13870                           ;klondike.c: 217: ResultQue[1] = Status.WorkID;
 13871  1187  0022               	movlb	2	; select bank2
 13872  1188  085D               	movf	(_Status^(0+256)+4),w	;volatile
 13873  1189  00FC               	movwf	??_ResultRx
 13874  118A  087C               	movf	??_ResultRx,w
 13875  118B  0023               	movlb	3	; select bank3
 13876  118C  00CB               	movwf	(_ResultQue^(0+384)+1)	;volatile
 13877                           
 13878                           ;klondike.c: 218: SendCmdReply(&ResultQue, &ResultQue+1, sizeof(ResultQue)-1);
 13879  118D  30CA               	movlw	low _ResultQue
 13880  118E  00F6               	movwf	?i1_SendCmdReply
 13881  118F  3001               	movlw	high _ResultQue
 13882  1190  00F7               	movwf	?i1_SendCmdReply+1
 13883  1191  30CB               	movlw	low (_ResultQue+1)
 13884  1192  00F8               	movwf	?i1_SendCmdReply+2
 13885  1193  3001               	movlw	high (_ResultQue+1)
 13886  1194  00F9               	movwf	?i1_SendCmdReply+3
 13887  1195  3005               	movlw	5
 13888  1196  00FC               	movwf	??_ResultRx
 13889  1197  087C               	movf	??_ResultRx,w
 13890  1198  00FA               	movwf	?i1_SendCmdReply+4
 13891  1199  3188  20C0         	fcall	i1_SendCmdReply
 13892  119B                     i1l7223:	
 13893                           ;klondike.c: 219: }
 13894                           ;klondike.c: 221: outrx:
 13895                           
 13896                           
 13897                           ;klondike.c: 222: { RCSTAbits.SPEN = 0; RCSTAbits.SPEN = 1; };
 13898  119B  0023               	movlb	3	; select bank3
 13899  119C  139D               	bcf	29,7	;volatile
 13900  119D  179D               	bsf	29,7	;volatile
 13901                           
 13902                           ;klondike.c: 223: ResultQC = 0;
 13903  119E  0022               	movlb	2	; select bank2
 13904  119F  01B9               	clrf	_ResultQC^(0+256)
 13905                           
 13906                           ;klondike.c: 224: IOCBF = 0;
 13907  11A0  0027               	movlb	7	; select bank7
 13908  11A1  0196               	clrf	22	;volatile
 13909  11A2  0008               	return
 13910  11A3                     __end_of_ResultRx:	
 13911                           
 13912                           	psect	text63
 13913  08C0                     __ptext63:	
 13914 ;; *************** function i1_SendCmdReply *****************
 13915 ;; Defined at:
 13916 ;;		line 208 in file "main.c"
 13917 ;; Parameters:    Size  Location     Type
 13918 ;;  SendCmdReply    2    6[COMMON] PTR unsigned char 
 13919 ;;		 -> ResultQue(6), OUTPacket(64), 
 13920 ;;  SendCmdReply    2    8[COMMON] PTR unsigned char 
 13921 ;;		 -> ResultQue(6), Cfg(6), ID(12), Status(13), 
 13922 ;;  SendCmdReply    1   10[COMMON] unsigned char 
 13923 ;; Auto vars:     Size  Location     Type
 13924 ;;  SendCmdReply    1   11[COMMON] unsigned char 
 13925 ;; Return value:  Size  Location     Type
 13926 ;;		None               void
 13927 ;; Registers used:
 13928 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
 13929 ;; Tracked objects:
 13930 ;;		On entry : 0/0
 13931 ;;		On exit  : 0/0
 13932 ;;		Unchanged: 0/0
 13933 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13934 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13935 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13936 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13937 ;;      Totals:         6       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13938 ;;Total ram usage:       14 bytes
 13939 ;; Hardware stack levels used:    1
 13940 ;; Hardware stack levels required when called:    1
 13941 ;; This function calls:
 13942 ;;		i1___wmul
 13943 ;;		i1___bmul
 13944 ;; This function is called by:
 13945 ;;		_ResultRx
 13946 ;; This function uses a non-reentrant model
 13947 ;;
 13948                           
 13949                           
 13950                           ;psect for function i1_SendCmdReply
 13951  08C0                     i1_SendCmdReply:	
 13952                           
 13953                           ;main.c: 209: if(WQI*15 + count + 2 < 64) {
 13954                           
 13955                           ;incstack = 0
 13956                           ; Regs used in i1_SendCmdReply: [wreg-fsr1h+status,2+status,0+btemp+1+pclath+cstack]
 13957  08C0  087A               	movf	i1SendCmdReply@count,w
 13958  08C1  0020               	movlb	0	; select bank0
 13959  08C2  00D0               	movwf	??i1_SendCmdReply
 13960  08C3  01D1               	clrf	??i1_SendCmdReply+1
 13961  08C4  0022               	movlb	2	; select bank2
 13962  08C5  0856               	movf	_WQI^(0+256),w
 13963  08C6  0020               	movlb	0	; select bank0
 13964  08C7  00D2               	movwf	??i1_SendCmdReply+2
 13965  08C8  01D3               	clrf	??i1_SendCmdReply+3
 13966  08C9  0852               	movf	??i1_SendCmdReply+2,w
 13967  08CA  00F0               	movwf	?i1___wmul
 13968  08CB  0853               	movf	??i1_SendCmdReply+3,w
 13969  08CC  00F1               	movwf	?i1___wmul+1
 13970  08CD  300F               	movlw	15
 13971  08CE  00F2               	movwf	?i1___wmul+2
 13972  08CF  3000               	movlw	0
 13973  08D0  00F3               	movwf	?i1___wmul+3
 13974  08D1  319D  256C  3188   	fcall	i1___wmul
 13975  08D4  0020               	movlb	0	; select bank0
 13976  08D5  0850               	movf	??i1_SendCmdReply,w
 13977  08D6  0770               	addwf	?i1___wmul,w
 13978  08D7  00D4               	movwf	??i1_SendCmdReply+4
 13979  08D8  0851               	movf	??i1_SendCmdReply+1,w
 13980  08D9  3D71               	addwfc	?i1___wmul+1,w
 13981  08DA  00D5               	movwf	??i1_SendCmdReply+5
 13982  08DB  0854               	movf	??i1_SendCmdReply+4,w
 13983  08DC  3E02               	addlw	2
 13984  08DD  00D6               	movwf	??i1_SendCmdReply+6
 13985  08DE  3000               	movlw	0
 13986  08DF  3D55               	addwfc	??i1_SendCmdReply+5,w
 13987  08E0  00D7               	movwf	??i1_SendCmdReply+7
 13988  08E1  0857               	movf	??i1_SendCmdReply+7,w
 13989  08E2  3A80               	xorlw	128
 13990  08E3  00FF               	movwf	127
 13991  08E4  3080               	movlw	128
 13992  08E5  027F               	subwf	127,w
 13993  08E6  1D03               	skipz
 13994  08E7  28EA               	goto	u837_25
 13995  08E8  3040               	movlw	64
 13996  08E9  0256               	subwf	??i1_SendCmdReply+6,w
 13997  08EA                     u837_25:	
 13998  08EA  1803               	skipnc
 13999  08EB  0008               	return
 14000                           
 14001                           ;main.c: 210: INPacket[WQI*15] = cmd[0];
 14002  08EC  0876               	movf	i1SendCmdReply@cmd,w
 14003  08ED  0086               	movwf	6
 14004  08EE  0877               	movf	i1SendCmdReply@cmd+1,w
 14005  08EF  0087               	movwf	7
 14006  08F0  0801               	movf	1,w
 14007  08F1  0020               	movlb	0	; select bank0
 14008  08F2  00D0               	movwf	??i1_SendCmdReply
 14009  08F3  300F               	movlw	15
 14010  08F4  00D1               	movwf	??i1_SendCmdReply+1
 14011  08F5  0851               	movf	??i1_SendCmdReply+1,w
 14012  08F6  00F0               	movwf	?i1___bmul
 14013  08F7  0022               	movlb	2	; select bank2
 14014  08F8  0856               	movf	_WQI^(0+256),w
 14015  08F9  3188  20AF  3188   	fcall	i1___bmul
 14016  08FC  3E20               	addlw	32
 14017  08FD  0086               	movwf	6
 14018  08FE  3002               	movlw	2	; select bank4/5
 14019  08FF  0087               	movwf	7
 14020  0900  0020               	movlb	0	; select bank0
 14021  0901  0850               	movf	??i1_SendCmdReply,w
 14022  0902  0081               	movwf	1
 14023                           
 14024                           ;main.c: 211: INPacket[WQI*15 + 1] = SlaveAddress;
 14025  0903  0022               	movlb	2	; select bank2
 14026  0904  083A               	movf	_SlaveAddress^(0+256),w
 14027  0905  0020               	movlb	0	; select bank0
 14028  0906  00D0               	movwf	??i1_SendCmdReply
 14029  0907  300F               	movlw	15
 14030  0908  00D1               	movwf	??i1_SendCmdReply+1
 14031  0909  0851               	movf	??i1_SendCmdReply+1,w
 14032  090A  00F0               	movwf	?i1___bmul
 14033  090B  0022               	movlb	2	; select bank2
 14034  090C  0856               	movf	_WQI^(0+256),w
 14035  090D  3188  20AF  3188   	fcall	i1___bmul
 14036  0910  0020               	movlb	0	; select bank0
 14037  0911  00D2               	movwf	??i1_SendCmdReply+2
 14038  0912  0A52               	incf	??i1_SendCmdReply+2,w
 14039  0913  3E20               	addlw	32
 14040  0914  0086               	movwf	6
 14041  0915  3002               	movlw	2	; select bank4/5
 14042  0916  0087               	movwf	7
 14043  0917  0850               	movf	??i1_SendCmdReply,w
 14044  0918  0081               	movwf	1
 14045                           
 14046                           ;main.c: 212: for(BYTE n = 0; n < count; n++)
 14047  0919  01FB               	clrf	i1SendCmdReply@n
 14048  091A                     i1l7195:	
 14049  091A  087A               	movf	i1SendCmdReply@count,w
 14050  091B  027B               	subwf	i1SendCmdReply@n,w
 14051  091C  1803               	btfsc	3,0
 14052  091D  294A               	goto	i1l7197
 14053                           
 14054                           ;main.c: 213: INPacket[WQI*15 + n + 2] = data[n];
 14055  091E  0879               	movf	i1SendCmdReply@data+1,w
 14056  091F  00D1               	movwf	??i1_SendCmdReply+1
 14057  0920  0878               	movf	i1SendCmdReply@data,w
 14058  0921  00D0               	movwf	??i1_SendCmdReply
 14059  0922  087B               	movf	i1SendCmdReply@n,w
 14060  0923  0750               	addwf	??i1_SendCmdReply,w
 14061  0924  0084               	movwf	4
 14062  0925  0851               	movf	??i1_SendCmdReply+1,w
 14063  0926  1803               	skipnc
 14064  0927  0A51               	incf	??i1_SendCmdReply+1,w
 14065  0928  0085               	movwf	5
 14066  0929  0800               	movf	0,w	;code access
 14067  092A  00D2               	movwf	??i1_SendCmdReply+2
 14068  092B  0022               	movlb	2	; select bank2
 14069  092C  0856               	movf	_WQI^(0+256),w
 14070  092D  0020               	movlb	0	; select bank0
 14071  092E  00D3               	movwf	??i1_SendCmdReply+3
 14072  092F  01D4               	clrf	??i1_SendCmdReply+4
 14073  0930  0853               	movf	??i1_SendCmdReply+3,w
 14074  0931  00F0               	movwf	?i1___wmul
 14075  0932  0854               	movf	??i1_SendCmdReply+4,w
 14076  0933  00F1               	movwf	?i1___wmul+1
 14077  0934  300F               	movlw	15
 14078  0935  00F2               	movwf	?i1___wmul+2
 14079  0936  3000               	movlw	0
 14080  0937  00F3               	movwf	?i1___wmul+3
 14081  0938  319D  256C  3188   	fcall	i1___wmul
 14082  093B  0870               	movf	?i1___wmul,w
 14083  093C  077B               	addwf	i1SendCmdReply@n,w
 14084  093D  3E02               	addlw	2
 14085  093E  3E20               	addlw	32
 14086  093F  0086               	movwf	6
 14087  0940  3002               	movlw	2	; select bank4/5
 14088  0941  0087               	movwf	7
 14089  0942  0020               	movlb	0	; select bank0
 14090  0943  0852               	movf	??i1_SendCmdReply+2,w
 14091  0944  0081               	movwf	1
 14092  0945  3001               	movlw	1
 14093  0946  00D0               	movwf	??i1_SendCmdReply
 14094  0947  0850               	movf	??i1_SendCmdReply,w
 14095  0948  07FB               	addwf	i1SendCmdReply@n,f
 14096  0949  291A               	goto	i1l7195
 14097  094A                     i1l7197:	
 14098                           
 14099                           ;main.c: 214: WQI = (WQI+1) & 3;
 14100  094A  0022               	movlb	2	; select bank2
 14101  094B  0A56               	incf	_WQI^(0+256),w
 14102  094C  3903               	andlw	3
 14103  094D  0020               	movlb	0	; select bank0
 14104  094E  00D0               	movwf	??i1_SendCmdReply
 14105  094F  0850               	movf	??i1_SendCmdReply,w
 14106  0950  0022               	movlb	2	; select bank2
 14107  0951  00D6               	movwf	_WQI^(0+256)
 14108  0952  0008               	return
 14109  0953                     __end_ofi1_SendCmdReply:	
 14110                           
 14111                           	psect	text64
 14112  08AF                     __ptext64:	
 14113 ;; *************** function i1___bmul *****************
 14114 ;; Defined at:
 14115 ;;		line 3 in file "C:\Program Files (x86)\Microchip\xc8\v1.20\sources\pic\bmul.c"
 14116 ;; Parameters:    Size  Location     Type
 14117 ;;  __bmul          1    wreg     unsigned char 
 14118 ;;  __bmul          1    0[COMMON] unsigned char 
 14119 ;; Auto vars:     Size  Location     Type
 14120 ;;  __bmul          1    2[COMMON] unsigned char 
 14121 ;;  __bmul          1    3[COMMON] unsigned char 
 14122 ;; Return value:  Size  Location     Type
 14123 ;;                  1    wreg      unsigned char 
 14124 ;; Registers used:
 14125 ;;		wreg, status,2, status,0
 14126 ;; Tracked objects:
 14127 ;;		On entry : 0/0
 14128 ;;		On exit  : 0/0
 14129 ;;		Unchanged: 0/0
 14130 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14131 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14132 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14133 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14134 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14135 ;;Total ram usage:        4 bytes
 14136 ;; Hardware stack levels used:    1
 14137 ;; This function calls:
 14138 ;;		Nothing
 14139 ;; This function is called by:
 14140 ;;		i1_SendCmdReply
 14141 ;; This function uses a non-reentrant model
 14142 ;;
 14143                           
 14144                           
 14145                           ;psect for function i1___bmul
 14146  08AF                     i1___bmul:	
 14147                           
 14148                           ;incstack = 0
 14149                           ; Regs used in i1___bmul: [wreg+status,2+status,0]
 14150                           ;i1___bmul@multiplier stored from wreg
 14151  08AF  00F2               	movwf	i1___bmul@multiplier
 14152  08B0  01F3               	clrf	i1___bmul@product
 14153  08B1                     i1l5981:	
 14154  08B1  1C72               	btfss	i1___bmul@multiplier,0
 14155  08B2  28B7               	goto	i1l5985
 14156  08B3  0870               	movf	i1___bmul@multiplicand,w
 14157  08B4  00F1               	movwf	??i1___bmul
 14158  08B5  0871               	movf	??i1___bmul,w
 14159  08B6  07F3               	addwf	i1___bmul@product,f
 14160  08B7                     i1l5985:	
 14161  08B7  1003               	clrc
 14162  08B8  0DF0               	rlf	i1___bmul@multiplicand,f
 14163  08B9  1003               	clrc
 14164  08BA  0CF2               	rrf	i1___bmul@multiplier,f
 14165  08BB  08F2               	movf	i1___bmul@multiplier,f
 14166  08BC  1D03               	skipz
 14167  08BD  28B1               	goto	i1l5981
 14168  08BE  0873               	movf	i1___bmul@product,w
 14169  08BF  0008               	return
 14170  08C0                     __end_ofi1___bmul:	
 14171                           
 14172                           	psect	text65
 14173  1D6C                     __ptext65:	
 14174 ;; *************** function i1___wmul *****************
 14175 ;; Defined at:
 14176 ;;		line 3 in file "C:\Program Files (x86)\Microchip\xc8\v1.20\sources\pic\wmul.c"
 14177 ;; Parameters:    Size  Location     Type
 14178 ;;  __wmul          2    0[COMMON] unsigned int 
 14179 ;;  __wmul          2    2[COMMON] unsigned int 
 14180 ;; Auto vars:     Size  Location     Type
 14181 ;;  __wmul          2    4[COMMON] unsigned int 
 14182 ;; Return value:  Size  Location     Type
 14183 ;;                  2    0[COMMON] unsigned int 
 14184 ;; Registers used:
 14185 ;;		wreg, status,2, status,0
 14186 ;; Tracked objects:
 14187 ;;		On entry : 0/0
 14188 ;;		On exit  : 0/0
 14189 ;;		Unchanged: 0/0
 14190 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14191 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14192 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14193 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14194 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14195 ;;Total ram usage:        6 bytes
 14196 ;; Hardware stack levels used:    1
 14197 ;; This function calls:
 14198 ;;		Nothing
 14199 ;; This function is called by:
 14200 ;;		i1_SendCmdReply
 14201 ;; This function uses a non-reentrant model
 14202 ;;
 14203                           
 14204                           
 14205                           ;psect for function i1___wmul
 14206  1D6C                     i1___wmul:	
 14207                           
 14208                           ;incstack = 0
 14209                           ; Regs used in i1___wmul: [wreg+status,2+status,0]
 14210  1D6C  01F4               	clrf	i1___wmul@product
 14211  1D6D  01F5               	clrf	i1___wmul@product+1
 14212  1D6E                     i1l7175:	
 14213  1D6E  1C70               	btfss	i1___wmul@multiplier,0
 14214  1D6F  2D74               	goto	i1l1297
 14215  1D70  0872               	movf	i1___wmul@multiplicand,w
 14216  1D71  07F4               	addwf	i1___wmul@product,f
 14217  1D72  0873               	movf	i1___wmul@multiplicand+1,w
 14218  1D73  3DF5               	addwfc	i1___wmul@product+1,f
 14219  1D74                     i1l1297:	
 14220  1D74  3001               	movlw	1
 14221  1D75                     u834_25:	
 14222  1D75  35F2               	lslf	i1___wmul@multiplicand,f
 14223  1D76  0DF3               	rlf	i1___wmul@multiplicand+1,f
 14224  1D77  0B89               	decfsz	9,f
 14225  1D78  2D75               	goto	u834_25
 14226  1D79  3001               	movlw	1
 14227  1D7A                     u835_25:	
 14228  1D7A  36F1               	lsrf	i1___wmul@multiplier+1,f
 14229  1D7B  0CF0               	rrf	i1___wmul@multiplier,f
 14230  1D7C  0B89               	decfsz	9,f
 14231  1D7D  2D7A               	goto	u835_25
 14232  1D7E  0871               	movf	i1___wmul@multiplier+1,w
 14233  1D7F  0470               	iorwf	i1___wmul@multiplier,w
 14234  1D80  1D03               	skipz
 14235  1D81  2D6E               	goto	i1l7175
 14236  1D82  0875               	movf	i1___wmul@product+1,w
 14237  1D83  01F1               	clrf	?i1___wmul+1
 14238  1D84  07F1               	addwf	?i1___wmul+1,f
 14239  1D85  0874               	movf	i1___wmul@product,w
 14240  1D86  01F0               	clrf	?i1___wmul
 14241  1D87  07F0               	addwf	?i1___wmul,f
 14242  1D88  0008               	return
 14243  1D89                     __end_ofi1___wmul:	
 14244  007E                     btemp	set	126	;btemp
 14245  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    174
    Data        72
    BSS         146
    Persistent  3
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            32     24      32
    BANK1            80     78      80
    BANK2            80      8      80
    BANK3            80      0      75
    BANK4            16      0       0
    BANK5            16      0       0
    BANK6            80      0      64
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           28      0       0
    BANK11            0      0       0
    BANK12            0      0       0

Pointer List with Targets:

    ?___ftpack	float  size(1) Largest target is 0

    ?___fttol	long  size(1) Largest target is 0

    ?___ftadd	float  size(1) Largest target is 0

    ?___ftmul	float  size(1) Largest target is 0

    ?___ftneg	float  size(1) Largest target is 0

    ?___awtoft	float  size(1) Largest target is 0

    ?___awmod	int  size(1) Largest target is 0

    ?___awdiv	int  size(1) Largest target is 0

    ?___lwdiv	unsigned int  size(1) Largest target is 0

    ?___wmul	unsigned int  size(1) Largest target is 0

    ?_rotate	unsigned long  size(1) Largest target is 0

    ?_memset	PTR void  size(2) Largest target is 32
		 -> USBAlternateInterface(BANK2[1]), BDT(BANK0[32]), 

    ?_USBTransferOnePacket	PTR void  size(1) Largest target is 32
		 -> NULL(NULL[0]), BDT(BANK0[32]), 

    USER_USB_CALLBACK_EVENT_HANDLER@pdata	PTR void  size(2) Largest target is 32
		 -> USTATcopy(BANK1[1]), USBActiveConfiguration(BANK2[1]), NULL(NULL[0]), BDT(BANK0[32]), 

    memset@p1	PTR void  size(2) Largest target is 32
		 -> USBAlternateInterface(BANK2[1]), BDT(BANK0[32]), 

    memset@p	PTR unsigned char  size(2) Largest target is 32
		 -> USBAlternateInterface(BANK2[1]), BDT(BANK0[32]), 

    SendCmdReply@data	PTR unsigned char  size(2) Largest target is 13
		 -> ResultQue(BANK3[6]), Cfg(BANK3[6]), ID(CODE[12]), Status(BANK2[13]), 

    SendCmdReply@cmd	PTR unsigned char  size(2) Largest target is 64
		 -> ResultQue(BANK3[6]), OUTPacket(BANK5[64]), 

    USBGenericInHandle	PTR void  size(1) Largest target is 32
		 -> NULL(NULL[0]), BDT(BANK0[32]), 

    USBGenericOutHandle	PTR void  size(1) Largest target is 32
		 -> NULL(NULL[0]), BDT(BANK0[32]), 

    ProcessCmd@cmd	PTR unsigned char  size(1) Largest target is 64
		 -> OUTPacket(BANK5[64]), 

    I2CInBuf	PTR unsigned char  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    AsicPreCalc@work	PTR struct _worktask size(2) Largest target is 180
		 -> WorkQue(BIGRAM[180]), 

    SendAsicData@work	PTR struct _worktask size(2) Largest target is 180
		 -> WorkQue(BIGRAM[180]), 

    USBStdFeatureReqHandler@pUEP	PTR unsigned char  size(2) Largest target is 1
		 -> UEP0(BITSFR29[1]), 

    USBStdFeatureReqHandler@p	PTR struct __BDT size(1) Largest target is 32
		 -> NULL(NULL[0]), BDT(BANK0[32]), 

    USBStdGetStatusHandler@p	PTR struct __BDT size(1) Largest target is 32
		 -> NULL(NULL[0]), BDT(BANK0[32]), 

    USB_SD_Ptr	const PTR const unsigned char [3] size(1) Largest target is 52
		 -> sd002(CODE[52]), sd001(CODE[52]), sd000(CODE[4]), 

    USB_CD_Ptr	const PTR const unsigned char [1] size(1) Largest target is 32
		 -> configDescriptor1(CODE[32]), 

    sp__memset	PTR void  size(2) Largest target is 32
		 -> USBAlternateInterface(BANK2[1]), BDT(BANK0[32]), 

    USBStdSetCfgHandler@p	PTR unsigned char  size(2) Largest target is 1
		 -> UEP1(BITSFR29[1]), 

    pDst	PTR unsigned char  size(1) Largest target is 8
		 -> CtrlTrfData(BANK0[8]), NULL(NULL[0]), 

    USBConfigureEndpoint@handle	PTR volatile struct __BDT size(1) Largest target is 32
		 -> BDT(BANK0[32]), 

    pBDTEntryEP0OutCurrent	PTR volatile struct __BDT size(1) Largest target is 32
		 -> NULL(NULL[0]), BDT(BANK0[32]), 

    pBDTEntryEP0OutNext	PTR volatile struct __BDT size(1) Largest target is 32
		 -> NULL(NULL[0]), BDT(BANK0[32]), 

    USBTransferOnePacket@data	PTR unsigned char  size(1) Largest target is 64
		 -> INPacket(BANK4[64]), OUTPacket(BANK5[64]), 

    sp__USBTransferOnePacket	PTR void  size(1) Largest target is 32
		 -> NULL(NULL[0]), BDT(BANK0[32]), 

    USBTransferOnePacket@handle	PTR volatile struct __BDT size(1) Largest target is 32
		 -> NULL(NULL[0]), BDT(BANK0[32]), 

    USBEnableEndpoint@p	PTR unsigned char  size(2) Largest target is 1
		 -> UEP0(BITSFR29[1]), 

    pBDTEntryOut	PTR volatile struct __BDT[2] size(1) Largest target is 32
		 -> NULL(NULL[0]), BDT(BANK0[32]), 

    pBDTEntryIn	PTR volatile struct __BDT[2] size(1) Largest target is 32
		 -> NULL(NULL[0]), BDT(BANK0[32]), 

    S118$pFunc	PTR FTN()void  size(1) Largest target is 0

    outPipes.pFunc	PTR FTN()void  size(1) Largest target is 0

    S108$wRam	PTR unsigned short  size(1) Largest target is 0

    outPipes.pDst.wRam	PTR unsigned short  size(1) Largest target is 0

    S108$bRam	PTR unsigned char  size(1) Largest target is 0

    outPipes.pDst.bRam	PTR unsigned char  size(1) Largest target is 0

    S66$wRom	PTR const unsigned short  size(1) Largest target is 0

    inPipes.pSrc.wRom	PTR const unsigned short  size(1) Largest target is 0

    S66$wRam	PTR unsigned short  size(1) Largest target is 0

    inPipes.pSrc.wRam	PTR unsigned short  size(1) Largest target is 0

    S66$bRom	PTR const unsigned char  size(1) Largest target is 0

    inPipes.pSrc.bRom	PTR const unsigned char  size(1) Largest target is 0

    S66$bRam	PTR unsigned char  size(1) Largest target is 0

    inPipes.pSrc.bRam	PTR unsigned char  size(1) Largest target is 0

    USBDeviceInit@p	PTR unsigned char  size(2) Largest target is 1
		 -> UEP1(BITSFR29[1]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISRCode in COMMON

    _ISRCode->_ResultRx
    _ResultRx->i1_SendCmdReply
    i1_SendCmdReply->i1___wmul

Critical Paths under _main in BANK0

    _ProcessIO->_ProcessCmd
    _SendCmdReply->___wmul
    _AsicPreCalc->_rotate
    _SendAsicData->___wmul
    _UserInit->_DetectAsics
    _DetectAsics->___awdiv
    _UpdateFanLevel->___awtoft
    ___fttol->___awtoft
    ___ftneg->___awtoft
    ___ftmul->___awtoft
    ___ftadd->___awtoft
    ___awtoft->___ftpack
    _USBCtrlTrfInHandler->_USBCtrlTrfTxService
    _USBCtrlTrfOutHandler->_USBCtrlTrfRxService
    _USBCtrlTrfRxService->_USBCtrlEPAllowStatusStage
    _USBCtrlEPServiceComplete->_USBCtrlEPAllowDataStage
    _USBCtrlEPAllowDataStage->_USBCtrlTrfTxService
    _USER_USB_CALLBACK_EVENT_HANDLER->_USBCBInitEP
    _USBCBInitEP->_USBEnableEndpoint
    _USBTransferOnePacket->___bmul
    _USBEnableEndpoint->_USBConfigureEndpoint

Critical Paths under _ISRCode in BANK0

    _ResultRx->i1_SendCmdReply

Critical Paths under _main in BANK1

    _ProcessIO->_ProcessCmd
    _ProcessCmd->_AsicPushWork
    _AsicPushWork->_AsicPreCalc
    _UserInit->_DetectAsics
    _WorkTick->_UpdateFanLevel
    _UpdateFanLevel->___fttol
    ___fttol->___ftadd
    ___ftneg->___ftmul
    ___ftadd->___ftneg
    _USBDeviceTasks->_USBCtrlEPService
    _USBCtrlEPService->_USBCtrlTrfSetupHandler
    _USBCtrlTrfSetupHandler->_USBCheckStdRequest
    _USBCheckStdRequest->_USBStdFeatureReqHandler
    _USBStdFeatureReqHandler->_USER_USB_CALLBACK_EVENT_HANDLER
    _USBStdSetCfgHandler->_USER_USB_CALLBACK_EVENT_HANDLER
    _USBSuspend->_USER_USB_CALLBACK_EVENT_HANDLER
    _USBWakeFromSuspend->_USER_USB_CALLBACK_EVENT_HANDLER

Critical Paths under _ISRCode in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_ProcessIO

Critical Paths under _ISRCode in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISRCode in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISRCode in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISRCode in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISRCode in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISRCode in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISRCode in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISRCode in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISRCode in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISRCode in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISRCode in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   17579
                     _USBDeviceTasks
                       _AsicPushWork
                           _WorkTick
                   _InitializeSystem
                          _ProcessIO
 ---------------------------------------------------------------------------------
 (1) _ProcessIO                                            8     8      0    4672
                                              0 BANK2      8     8      0
               _USBTransferOnePacket
                         _ProcessCmd
                             ___bmul
 ---------------------------------------------------------------------------------
 (2) _ProcessCmd                                           7     7      0    4152
                                             21 BANK0      3     3      0
                                             74 BANK1      4     4      0
                       _AsicPushWork
                       _SendCmdReply
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     241
                                              8 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (3) _SendCmdReply                                        14     9      5     495
                                             14 BANK0      6     1      5
                                              0 BANK1      8     8      0
                             ___bmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               4     3      1     136
                                              8 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (3) _AsicPushWork                                         5     5      0    2871
                                             69 BANK1      5     5      0
                       _SendAsicData
                        _AsicPreCalc
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     136
                                              8 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) _AsicPreCalc                                         69    67      2    2673
                                              0 BANK1     69    67      2
                             _rotate
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (5) _rotate                                              13     8      5     124
                                              8 BANK0     13     8      5
 ---------------------------------------------------------------------------------
 (4) _SendAsicData                                         6     4      2      62
                                             14 BANK0      6     4      2
                             _Send32
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (5) _Send32                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _InitializeSystem                                     0     0      0     850
                      _USBDeviceInit
                           _UserInit
 ---------------------------------------------------------------------------------
 (2) _UserInit                                             0     0      0     578
                        _DetectAsics
                            _InitFAN
                     _InitTempSensor
                       _InitWorkTick
                       _InitResultRx
 ---------------------------------------------------------------------------------
 (3) _InitResultRx                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _InitWorkTick                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _InitTempSensor                                       1     1      0       0
                                              8 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _InitFAN                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _DetectAsics                                         10    10      0     578
                                             17 BANK0      7     7      0
                                              0 BANK1      3     3      0
                            ___awdiv
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              9     5      4     445
                                              8 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (1) _WorkTick                                             3     3      0    2500
                                             53 BANK1      3     3      0
                     _UpdateFanLevel
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              7     3      4     296
                                              8 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) _UpdateFanLevel                                       7     7      0    2204
                                             46 BANK1      7     7      0
                           ___awtoft
                            ___ftadd
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             14    10      4     252
                                             32 BANK1     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3      45
                                             16 BANK1      3     0      3
                           ___awtoft (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             16    10      6     535
                                              0 BANK1     16    10      6
                           ___ftpack
                           ___awtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             13     7      6    1049
                                             19 BANK1     13     7      6
                           ___ftpack
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             6     3      3     300
                                             16 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5     209
                                              8 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (1) _USBDeviceTasks                                       3     3      0    6686
                                             18 BANK1      3     3      0
                      _USBDeviceInit
                 _USBWakeFromSuspend
                         _USBSuspend
    _USER_USB_CALLBACK_EVENT_HANDLER
          _USBCtrlEPAllowStatusStage
                    _USBStallHandler
                   _USBCtrlEPService
 ---------------------------------------------------------------------------------
 (2) _USBCtrlEPService                                     4     4      0    4192
                                             14 BANK1      4     4      0
             _USBCtrlTrfSetupHandler
               _USBCtrlTrfOutHandler
                _USBCtrlTrfInHandler
 ---------------------------------------------------------------------------------
 (3) _USBCtrlTrfInHandler                                  3     3      0     115
                                             11 BANK0      3     3      0
                _USBCtrlTrfTxService
 ---------------------------------------------------------------------------------
 (3) _USBCtrlTrfOutHandler                                 2     2      0     114
                                             14 BANK0      2     2      0
                _USBCtrlTrfRxService
 ---------------------------------------------------------------------------------
 (4) _USBCtrlTrfRxService                                  4     4      0     114
                                             10 BANK0      4     4      0
          _USBCtrlEPAllowStatusStage
 ---------------------------------------------------------------------------------
 (3) _USBCtrlTrfSetupHandler                               1     1      0    3864
                                             13 BANK1      1     1      0
    _USER_USB_CALLBACK_EVENT_HANDLER
           _USBCtrlEPServiceComplete
                 _USBCheckStdRequest
 ---------------------------------------------------------------------------------
 (4) _USBCheckStdRequest                                   1     1      0    3054
                                             12 BANK1      1     1      0
    _USER_USB_CALLBACK_EVENT_HANDLER
                _USBStdSetCfgHandler
                _USBStdGetDscHandler
             _USBStdGetStatusHandler
            _USBStdFeatureReqHandler
 ---------------------------------------------------------------------------------
 (5) _USBStdFeatureReqHandler                              6     6      0    1241
                                              6 BANK1      6     6      0
    _USER_USB_CALLBACK_EVENT_HANDLER
 ---------------------------------------------------------------------------------
 (5) _USBStdGetStatusHandler                               2     2      0      46
                                              8 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (5) _USBStdGetDscHandler                                  3     3      0       0
                                              8 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) _USBStdSetCfgHandler                                  5     5      0    1049
                                              6 BANK1      5     5      0
    _USER_USB_CALLBACK_EVENT_HANDLER
                             _memset
 ---------------------------------------------------------------------------------
 (6) _memset                                               9     3      6      96
                                              8 BANK0      9     3      6
 ---------------------------------------------------------------------------------
 (4) _USBCtrlEPServiceComplete                             2     2      0      92
                                             13 BANK0      2     2      0
          _USBCtrlEPAllowStatusStage
            _USBCtrlEPAllowDataStage
 ---------------------------------------------------------------------------------
 (5) _USBCtrlEPAllowDataStage                              2     2      0      92
                                             11 BANK0      2     2      0
                _USBCtrlTrfTxService
 ---------------------------------------------------------------------------------
 (4) _USBCtrlTrfTxService                                  3     3      0      92
                                              8 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) _USBCtrlEPAllowStatusStage                            2     2      0       0
                                              8 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _USBStallHandler                                      1     1      0       0
                                              8 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _USBSuspend                                           1     1      0     718
                                              6 BANK1      1     1      0
    _USER_USB_CALLBACK_EVENT_HANDLER
 ---------------------------------------------------------------------------------
 (2) _USBWakeFromSuspend                                   1     1      0     718
                                              6 BANK1      1     1      0
    _USER_USB_CALLBACK_EVENT_HANDLER
 ---------------------------------------------------------------------------------
 (6) _USER_USB_CALLBACK_EVENT_HANDLER                      6     0      6     718
                                              0 BANK1      6     0      6
                       _USBCBSuspend
               _USBCBWakeFromSuspend
                  _USBCB_SOF_Handler
                  _USBCBErrorHandler
                 _USBCBCheckOtherReq
              _USBCBStdSetDscHandler
                        _USBCBInitEP
 ---------------------------------------------------------------------------------
 (7) _USBCBInitEP                                          3     3      0     687
                                             21 BANK0      3     3      0
                  _USBEnableEndpoint
               _USBTransferOnePacket
 ---------------------------------------------------------------------------------
 (2) _USBTransferOnePacket                                 7     4      3     310
                                             12 BANK0      7     4      3
                             ___bmul (ARG)
 ---------------------------------------------------------------------------------
 (8) _USBEnableEndpoint                                    6     5      1     377
                                             15 BANK0      6     5      1
               _USBConfigureEndpoint
 ---------------------------------------------------------------------------------
 (9) _USBConfigureEndpoint                                 7     6      1     222
                                              8 BANK0      7     6      1
 ---------------------------------------------------------------------------------
 (7) _USBCBStdSetDscHandler                                0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _USBCBCheckOtherReq                                   0     0      0       0
              _USBCheckVendorRequest
 ---------------------------------------------------------------------------------
 (8) _USBCheckVendorRequest                                0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _USBCBErrorHandler                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _USBCB_SOF_Handler                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _USBCBWakeFromSuspend                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _USBCBSuspend                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _USBDeviceInit                                        6     6      0     272
                                              8 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _ISRCode                                             1     1      0    1210
                                             13 COMMON     1     1      0
                           _ResultRx
 ---------------------------------------------------------------------------------
 (11) _ResultRx                                            1     1      0    1210
                                             12 COMMON     1     1      0
                     i1_SendCmdReply
 ---------------------------------------------------------------------------------
 (12) i1_SendCmdReply                                     14     9      5    1210
                                              6 COMMON     6     1      5
                                              0 BANK0      8     8      0
                           i1___wmul
                           i1___bmul
 ---------------------------------------------------------------------------------
 (13) i1___bmul                                            4     3      1     212
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (13) i1___wmul                                            6     2      4     372
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _USBDeviceTasks
     _USBDeviceInit
     _USBWakeFromSuspend
       _USER_USB_CALLBACK_EVENT_HANDLER
         _USBCBSuspend
         _USBCBWakeFromSuspend
         _USBCB_SOF_Handler
         _USBCBErrorHandler
         _USBCBCheckOtherReq
           _USBCheckVendorRequest
         _USBCBStdSetDscHandler
         _USBCBInitEP
           _USBEnableEndpoint
             _USBConfigureEndpoint
           _USBTransferOnePacket
             ___bmul (ARG)
     _USBSuspend
       _USER_USB_CALLBACK_EVENT_HANDLER
         _USBCBSuspend
         _USBCBWakeFromSuspend
         _USBCB_SOF_Handler
         _USBCBErrorHandler
         _USBCBCheckOtherReq
           _USBCheckVendorRequest
         _USBCBStdSetDscHandler
         _USBCBInitEP
           _USBEnableEndpoint
             _USBConfigureEndpoint
           _USBTransferOnePacket
             ___bmul (ARG)
     _USER_USB_CALLBACK_EVENT_HANDLER
       _USBCBSuspend
       _USBCBWakeFromSuspend
       _USBCB_SOF_Handler
       _USBCBErrorHandler
       _USBCBCheckOtherReq
         _USBCheckVendorRequest
       _USBCBStdSetDscHandler
       _USBCBInitEP
         _USBEnableEndpoint
           _USBConfigureEndpoint
         _USBTransferOnePacket
           ___bmul (ARG)
     _USBCtrlEPAllowStatusStage
     _USBStallHandler
     _USBCtrlEPService
       _USBCtrlTrfSetupHandler
         _USER_USB_CALLBACK_EVENT_HANDLER
           _USBCBSuspend
           _USBCBWakeFromSuspend
           _USBCB_SOF_Handler
           _USBCBErrorHandler
           _USBCBCheckOtherReq
             _USBCheckVendorRequest
           _USBCBStdSetDscHandler
           _USBCBInitEP
             _USBEnableEndpoint
               _USBConfigureEndpoint
             _USBTransferOnePacket
               ___bmul (ARG)
         _USBCtrlEPServiceComplete
           _USBCtrlEPAllowStatusStage
           _USBCtrlEPAllowDataStage
             _USBCtrlTrfTxService
         _USBCheckStdRequest
           _USER_USB_CALLBACK_EVENT_HANDLER
             _USBCBSuspend
             _USBCBWakeFromSuspend
             _USBCB_SOF_Handler
             _USBCBErrorHandler
             _USBCBCheckOtherReq
               _USBCheckVendorRequest
             _USBCBStdSetDscHandler
             _USBCBInitEP
               _USBEnableEndpoint
                 _USBConfigureEndpoint
               _USBTransferOnePacket
                 ___bmul (ARG)
           _USBStdSetCfgHandler
             _USER_USB_CALLBACK_EVENT_HANDLER
               _USBCBSuspend
               _USBCBWakeFromSuspend
               _USBCB_SOF_Handler
               _USBCBErrorHandler
               _USBCBCheckOtherReq
                 _USBCheckVendorRequest
               _USBCBStdSetDscHandler
               _USBCBInitEP
                 _USBEnableEndpoint
                   _USBConfigureEndpoint
                 _USBTransferOnePacket
                   ___bmul (ARG)
             _memset
           _USBStdGetDscHandler
           _USBStdGetStatusHandler
           _USBStdFeatureReqHandler
             _USER_USB_CALLBACK_EVENT_HANDLER
               _USBCBSuspend
               _USBCBWakeFromSuspend
               _USBCB_SOF_Handler
               _USBCBErrorHandler
               _USBCBCheckOtherReq
                 _USBCheckVendorRequest
               _USBCBStdSetDscHandler
               _USBCBInitEP
                 _USBEnableEndpoint
                   _USBConfigureEndpoint
                 _USBTransferOnePacket
                   ___bmul (ARG)
       _USBCtrlTrfOutHandler
         _USBCtrlTrfRxService
           _USBCtrlEPAllowStatusStage
       _USBCtrlTrfInHandler
         _USBCtrlTrfTxService
   _AsicPushWork
     _SendAsicData
       _Send32
       ___wmul (ARG)
     _AsicPreCalc
       _rotate
       ___wmul (ARG)
     ___wmul
   _WorkTick
     _UpdateFanLevel
       ___awtoft
         ___ftpack
       ___ftadd
         ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___ftpack
           ___awtoft (ARG)
             ___ftpack
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___ftpack
             ___awtoft (ARG)
               ___ftpack
       ___ftmul
         ___ftpack
         ___awtoft (ARG)
           ___ftpack
       ___ftneg
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___ftpack
           ___awtoft (ARG)
             ___ftpack
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___ftpack
             ___awtoft (ARG)
               ___ftpack
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___ftpack
               ___awtoft (ARG)
                 ___ftpack
         ___ftmul (ARG)
           ___ftpack
           ___awtoft (ARG)
             ___ftpack
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___ftpack
             ___awtoft (ARG)
               ___ftpack
     ___awmod
   _InitializeSystem
     _USBDeviceInit
     _UserInit
       _DetectAsics
         ___awdiv
       _InitFAN
       _InitTempSensor
       _InitWorkTick
       _InitResultRx
   _ProcessIO
     _USBTransferOnePacket
       ___bmul (ARG)
     _ProcessCmd
       _AsicPushWork
         _SendAsicData
           _Send32
           ___wmul (ARG)
         _AsicPreCalc
           _rotate
           ___wmul (ARG)
         ___wmul
       _SendCmdReply
         ___bmul
         ___wmul
       ___lwdiv
       ___wmul
     ___bmul

 _ISRCode (ROOT)
   _ResultRx
     i1_SendCmdReply
       i1___wmul
       i1___bmul

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0      11       3        0.0%
BITBANK0            20      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               20     18      20       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     4E      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      8      50       9      100.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      4B      11       93.8%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            10      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               10      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            10      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               10      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0      40      17       80.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     159      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              1C      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BANK11               0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BANK12               0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     16A      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.20 build 52243 
Symbol Table                                                                                   Thu Oct 31 10:20:41 2013

                              _USB_SD_Ptr 0801                                         pc 0002  
                          ___bmul@product 005A                               _SSPSTATbits 0214  
                                      _ID 089F                    ?_USBCheckVendorRequest 0070  
                            ___awdiv@sign 005E                             _USBDeviceInit 09E7  
                     ___wmul@multiplicand 005A                          i1___wmul@product 0074  
                            ___ftadd@exp1 00BF                              ___ftadd@exp2 00BE  
                     __end_of_AsicPreCalc 0414                                       LATC 010E  
                              _BankRanges 0340      USER_USB_CALLBACK_EVENT_HANDLER@event 00A0  
    USER_USB_CALLBACK_EVENT_HANDLER@pdata 00A2                              ___ftadd@sign 00BD  
                     __end_of_DetectAsics 0D43                                       l140 0E12  
                                     l142 0E16                                       l128 0A2C  
                                     l208 1422                                       l330 125D  
                                     l146 0E3C                                       l315 12DF  
                                     l155 0EA3                                       l332 1208  
                                     l156 0EF9                                       l341 1232  
             __end_of_USBStdGetDscHandler 15D6                                       l318 1315  
                                     l271 10A6                                       l353 073F  
                                     l274 10E5                                       l354 0740  
                                     l275 10B2                                       l276 10B5  
                                     l701 0499                                       l366 07B2  
                                     l358 0773                                       l702 04AB  
                                     l703 04B6                                       l753 06C0  
                                     _BDT 0020                                       l695 0591  
                                     l857 1CCF                                       l938 1F29  
                                     _GIE 005F                                       _PR2 001B  
                                     _UIE 0E92                                       _UIR 0E90  
                                     _Cfg 01E4                                       _WQI 0156  
                                     _WQX 0157                                       _buf 01A0  
                              _USBSuspend 1D34                                       _ptr 006F  
                            ___awmod@sign 005E                      USBStdSetCfgHandler@i 00AA  
                    USBStdSetCfgHandler@p 00A7                                       wreg 0009  
                          _USBDeviceTasks 0E05                            _USBDeviceState 00EE  
                  ??_USBCBWakeFromSuspend 0058                                      S7295 1800  
                   ??_USBCtrlTrfRxService 005A                  USBEnableEndpoint@options 005F  
                                    INDF1 0001                              __CFG_LVP$OFF 0000  
                                    FSR1H 0007                                      FSR1L 0006  
                                    l1114 0F9B                                      l1091 12A8  
                                    l1085 1291                                      l4111 0A31  
                                    l4113 0A40                                      l1297 1D92  
                                    l4131 0A74                USBConfigureEndpoint@handle 005E  
                                    l4125 0A55                                      l4091 0A13  
                                    l4083 0A06                                      l4075 09F6  
                                    l4405 1F58                                      l4501 174F  
                                    l4423 1FCA                                      l4415 1FBC  
                                    l4319 13A9                                      l4433 1FF5  
                                    l4345 1E00                                      l4521 13FB  
                                    l4347 1E02                                      l6203 0E6C  
                                    l7003 0CEA                                      l4509 176C  
                                    l4533 142E                                      l4541 1438  
                                    l4525 13FF                                      l4701 10D9  
                                    l6213 0E7E                                      l5405 11C8  
                                    l7101 111E                                      l7005 0D3A  
                                    l4391 1E3C                                      l4463 1089  
                                    l5431 068C                                      l5407 11CE  
                                    l7111 1139                                      l7015 1CD7  
                                    l4481 1706                                      l6209 0E78  
                                    l7121 1C53                                      l4387 1E34  
                                    l4491 172D                                      l4459 1074  
                                    l4563 0AA8                                      l6331 1538  
                                    l6227 0E9B                                      l6219 0E85  
                                    l5435 06A4                                      l7115 1141  
                                    l7107 1130                                      l7019 1CDF  
                                    l4477 16FC                                      l4653 1DAE  
                                    l4661 156C                                      l4581 0B06  
                                    l4573 0AC1                                      l6325 150F  
                                    l6253 0EDD                                      l6237 0EA9  
                                    l6157 0E19                                      l5701 1F7C  
                                    l7125 1C59                                      l7061 14B0  
                                    l7053 149A                                      l7045 147A  
                                    l4583 0B0E                                      l4575 0ADD  
                                    l6335 1549                                      l6255 0EED  
                                    l6247 0EC4                                      l5623 126E  
                                    l5711 1F8E                                      l7047 147C  
                                    l6281 1EEC                                      l4673 15C3  
                                    l6505 076C                                      l6441 1226  
                                    l6425 1210                                      l4745 1E7A  
                                    l6337 154C                                      l6177 0E36  
                                    l6169 0E29                                      l5633 1296  
                                    l5625 1278                                      l6601 005E  
                                    l7153 1EDB                                      l7145 1EBD  
                                    l6291 1EFB                                      l6283 1EEF  
                                    l4499 174A                                      l4675 15C6  
                                    l4667 15A1                                      l4659 1562  
                                    l4691 10C1                                      l6531 07D8  
                                    l6507 077C                                      l6451 1242  
                                    l6427 1213                                      l4739 1E58  
                                    l4771 130D                                      l5635 129E  
                                    l5627 127D                                      l5619 1267  
                                    l5803 0F8D                                      l5723 1FAB  
                                    l5715 1F9A                                      l7083 10FF  
                                    l7163 1D8C                                      l7147 1EC9  
                                    l7059 14AE                                      l6293 1EFE  
                                    l6285 1EF2                                      l6373 17B8  
                                    l6357 178C                                      l6349 177C  
                                    l6533 07E0                                      l6517 07A1  
                                    l6437 1220                                      l6429 1216  
                                    l4589 0B2F                                      l4757 12D9  
                                    l6197 0E58                                      l6189 0E4C  
                                    l5813 0FBF                                      l5805 0F97  
                                    l5709 1F82                                      l7157 1EE4  
                                    l6287 1EF5                                      l6367 17A4  
                                    l4679 15C9                                      l6527 07B9  
                                    l6519 07A6                                      l6471 06F0  
                                    l6439 1223                                      l6455 1252  
                                    l4767 1301                                      l5735 1E14  
                                    l5823 0FDA                                      l5911 16B3  
                                    l5719 1FA3                                      l6289 1EF8  
                                    l6297 1F01                                      l6473 06F2  
                                    l4777 131E                                      l5809 0FAD  
                                    l5833 0D5A                                      l5921 16CC  
                                    l7089 110A                                      l4779 131F  
                                    l5763 0F24                                      l5851 0DAB  
                                    l7099 1112                                      l6389 17EB  
                                    l5773 0F3A                                      l5925 16DA  
                                    l5917 16C0                                      l5909 16A5  
                                    l6495 074E                                      l6487 0721  
                                    l5791 0F67                                      l5767 0F2B  
                                    l5863 0DC7                                      l5855 0DB3  
                                    l5839 0D70                                      l5919 16C9  
                                    l7297 1F0A                                      l5793 0F71  
                                    l5785 0F54                                      l5697 1F75  
                                    l6913 0474                                      l7299 1F24  
                                    l5795 0F76                                      l5867 0DCF  
                                    l5891 1675                                      l6595 0028  
                                    l6907 0460                                      l5797 0F7A  
                                    l6941 0536                                      l6909 0473  
                                    l6937 051D                                      l6929 04D6  
                                    l6947 0558                                      l6939 0523  
                                    l6955 0578                                      l6983 0B9D  
                                    l6887 0417                                      l6985 0BD7  
                                    l6899 045B                                      _LATC 010E  
                                    u4055 107E                                      u4305 1DB8  
                                    u3435 0A16                                      u4195 0AA1  
                                    u6115 0F68                                      u3905 1F39  
                                    u6145 0F7B                                      u5505 0682  
                                    u3915 1F41                                      u6315 0DD0  
                                    u5515 06A0                                      _RCIF 008D  
                                    u6085 0F55                                      u6325 0DD6  
                                    u6245 0D7C                                      u5525 06B8  
                                    u6175 0F8E                                      u6255 0D8C  
                                    u5455 11C1                                      u5705 128C  
                                    u6425 16C1                                      u6275 0DB4  
                                    u7315 0046                                      u5725 1299  
                                    u6285 0DBA                                      u6365 167C  
                                    u7405 0128                                      u7270 1E90  
                                    u3895 1F33                                      u5495 066C  
                                    u8135 1115                                      u7415 0157  
                   ??_USBCtrlTrfTxService 0058                                      u7280 1EA1  
                                    u5905 1F85                                      u7505 02F4  
                                    u7425 019A                                      u7345 0067  
                                    u8305 1D93                                      u7290 001E  
                                    u5755 12AF                                      u6395 16A6  
                                    u8155 111F                                      u7275 1E8B  
                                    u7515 0309                                      u7435 01E9  
                                    u7355 007C                                      u8315 1D98  
                                    u8235 1EC0                                      u5685 1273  
                                    u5925 1F94                                      u8165 1129  
                                    u7285 1E9D                                      u7525 032B  
                                    u7445 01FE                                      u7365 009D  
                                    u5935 1F9B                                      u8175 1131  
                                    u7535 0350                                      u7455 0213  
                                    u7375 00C1                                      u8255 1ECA  
                                    _UCFG 0E91                                      u7545 0365  
                                    u7465 0228                                      u7385 00E4  
                                    u8265 1ED4                                      u7810 044A  
                                    u7555 03A5                                      u7475 023E  
                                    u7395 0113                                      u8275 1EDC  
                                    _UEP0 0E98                                      u7565 03BD  
                                    u7485 026D                                      _UEP1 0E99  
                                    u7575 03D2                                      u7495 02B0  
                                    u7840 0489                                      u7585 03E8  
                                    u7905 04C7                                      u7595 03FD  
                                    u7915 04CE                                      _UEIE 0E97  
                                    u7925 04E0                                      u6985 14EA  
                                    u7955 0B69                                      u7975 0CF5  
                                    _UEIR 0E93                                      _UCON 0E8E  
                                    u7985 0D0C                                      u7995 0D23  
                                    _TMR0 0015                           __end_of_ISRCode 0012  
                                    _Step 0128    USBStdFeatureReqHandler@current_ep_data 00AA  
                                    _pDst 014A                                      _main 1CCC  
                            ___ftpack@arg 0058                              ___ftpack@exp 005B  
                                    fsr0h 0005                                      fsr1h 0007  
                                    fsr0l 0004                                      indf0 0000  
                                    indf1 0001                                      fsr1l 0006  
                                    btemp 007E                      __end_of_AsicPushWork 165C  
                                    start 0012                             __CFG_IESO$OFF 0000  
                      _USBCBCheckOtherReq 1C27                __end_of_USBCheckStdRequest 125E  
                  ??_USBCtrlTrfOutHandler 005E                         ___bmul@multiplier 005B  
                            ___ftmul@cntr 00AE                              ___ftmul@sign 00AF  
               ??_USBStdFeatureReqHandler 00A6                           __end_of_InitFAN 1D6C  
                ??_USBStdGetStatusHandler 0058                              ___fttol@exp1 00CD  
                            ___fttol@lval 00C9                            ?_USBDeviceInit 0070  
                           ?_InitResultRx 0070                       ?_USBCBCheckOtherReq 0070  
                         i1SendCmdReply@n 007B                                     ?_main 0070  
                         __end_of___awdiv 1148                           __end_of___ftadd 1000  
                           __CFG_WDTE$OFF 0000                           __end_of___awmod 1FB2  
       __size_of_USBCtrlEPServiceComplete 0078                           __end_of___ftneg 07FF  
                         __end_of___ftmul 0E05                           ___awdiv@divisor 0058  
                  __end_of_USBDeviceTasks 0EFC                           __end_of___fttol 16E3  
               ?_USBCtrlEPServiceComplete 0070                                     _IOCBF 0396  
                         __end_of___lwdiv 1EEB                                     i1l743 1171  
                                   i1l854 000E                                     _UADDR 0E96  
                         ___awdiv@counter 005D                                     _RCREG 0199  
                           ?_InitWorkTick 0070                                     _TMR1H 0017  
                                   _TMR1L 0016                                     _USTAT 0E8F  
      __size_of_USBCtrlEPAllowStatusStage 0064                             __CFG_PWRTE$ON 0000  
                                   _Error 0152                            __CFG_FCMEN$OFF 0000  
         __end_of_USBCtrlEPAllowDataStage 10A1                                     _sd000 08AB  
                                   _sd001 0805                                     _sd002 0839  
                           ___awtoft@sign 0065                             ___ftpack@sign 005C  
                    ??_USBCBCheckOtherReq 0058                          __end_ofi1___bmul 08C0  
                        __end_ofi1___wmul 1D89                          ??i1_SendCmdReply 0050  
                                   status 0003                       i1___wmul@multiplier 0070  
                                   wtemp0 007E              __size_of_USBStdSetCfgHandler 008F  
                          __CFG_MCLRE$OFF 0000                           __initialization 1322  
                             _AsicPreCalc 0014                              __end_of_main 1CE3  
                             _DetectAsics 0C8C                            ??_InitResultRx 0058  
               __size_of_USBCtrlEPService 007C                                    ??_main 0068  
                           ___fttol@sign1 00C8                            ??_InitWorkTick 0058  
               __size_of_InitializeSystem 0017                           ?_USBDeviceTasks 0070  
                             ?_USBSuspend 0070                          __end_of_ResultRx 11A3  
                               ??_ISRCode 007D                            _InitTempSensor 1C9E  
                        __end_of_UserInit 1C88                                    _I2CCmd 006A  
                                  _ACTCON 039B                                    _ADRESH 009C  
                        ___awdiv@dividend 005A                          __end_of___awtoft 1E2B  
                                  _ANSELA 018C                                    _ANSELB 018D  
                                  _ANSELC 018E                          __end_of___ftpack 12BF  
                        __end_of_WorkTick 1200                                    _IOCAF3 1C9B  
                                  _T1GSPM 00CC                                    i1l1297 1D74  
                                  i1l7223 119B                                    i1l7207 1163  
                                  i1l7215 114A                                    i1l7217 117E  
                                  i1l7175 1D6E                                    i1l7195 091A  
                                  i1l7197 094A                                    i1l5981 08B1  
                                  i1l5985 08B7                                    _OSCCON 0099  
                                  u834_25 1D75                                    u835_25 1D7A  
                                  _TMR1GE 00CF                                    _TMR0IF 005A  
                                  _TMR0CS 04AD                                    _TMR1IE 0488  
                                  _TMR1IF 0088                                    u837_25 08EA  
                                  _PWM1OE 309E                                    _TMR2IF 0089  
                                  _TMR1ON 00C0                                    _TMR2ON 00E2  
                                  _SSP1EN 10AD                                    _SSP1IF 008B  
                                  _SSPADD 0212                                    _SSPBUF 0211  
                               ??_InitFAN 0058                                _TempTarget 01EA  
                                  _Send32 0BE0                         _shortPacketStatus 014C  
                           ?_SendCmdReply 005E                           USBDeviceTasks@i 00B4  
                           ?_SendAsicData 005E               USBStdFeatureReqHandler@pUEP 00A8  
                USBTransferOnePacket@data 005D                USBCtrlTrfInHandler@lastDTS 005D  
                                  _Status 0159                           ??_USBDeviceInit 0058  
                                  ___bmul 1C50                                    ___wmul 1D89  
                               ??___awdiv 005C                                 ??___ftadd 00B9  
                               ??___awmod 005C                                 ??___ftneg 0066  
                               ??___ftmul 00A6                                 ??___fttol 00C4  
                            ?_USBCBInitEP 0070                                 ??___lwdiv 005C  
                       _USBEnableEndpoint 1E2B           __size_of_USBStdGetStatusHandler 0053  
                                  _memset 1DA7                          ___awdiv@quotient 005F  
                         ___awmod@divisor 0058                                _ProcessCmd 0414  
                         ___awmod@counter 005D                        ?_USBEnableEndpoint 005F  
                                  _rotate 1E7D                     _USBCBStdSetDscHandler 07FF  
                   ___ftmul@f3_as_product 00AB             __size_of_USBTransferOnePacket 004E  
                      __size_of_ProcessIO 007A                    __end_of_InitTempSensor 1CB5  
                     ??_USBEnableEndpoint 0060                               _CtrlTrfData 0048  
                   __size_of_AsicPushWork 0086                      _controlTransferState 006C  
                 __end_of__initialization 1382                                ___ftadd@f1 00B3  
                              ___ftadd@f2 00B6                  __size_of_USBStallHandler 0022  
                          ??_SendCmdReply 00A0                                ___ftneg@f1 00B0  
                              ___awtoft@c 0060                       ___bmul@multiplicand 0058  
                          ??_SendAsicData 0060                       __size_of_USBSuspend 001C  
                              ___ftmul@f1 00A0                                ___ftmul@f2 00A3  
                 ??_USBCheckVendorRequest 0058                                ___fttol@f1 00C0  
                          __pcstackCOMMON 0070                 __end_of_USBEnableEndpoint 1E50  
                           __end_of_sd000 08AF                             __end_of_sd001 0839  
                           __end_of_sd002 086D                              __pidataBANK2 1C42  
                            __pidataBANK3 1CE3                              __pidataBANK6 1DC7  
                       _USBCB_SOF_Handler 1001          __size_of_USBCtrlEPAllowDataStage 0050  
           __size_of_USBConfigureEndpoint 0040               __end_of_USBCtrlTrfInHandler 1322  
                      ?_USBCB_SOF_Handler 0070                                __end_of_ID 08AB  
                               ?i1___bmul 0070                                 ?i1___wmul 0070  
                          _OPTION_REGbits 0095                              _AsicPushWork 15D6  
                         ?_InitTempSensor 0070                       i1SendCmdReply@count 007A  
                     ??_USBCB_SOF_Handler 0058                  ??_USBCtrlTrfSetupHandler 00AD  
                        i1___bmul@product 0073                    _USBStdGetStatusHandler 10A1  
                    __end_of_InitResultRx 1C75                                __pbssBANK0 0068  
                              __pbssBANK1 00EE                                __pbssBANK2 0120  
                              __pbssBANK3 01A0                                __pbssBANK6 0320  
                       i1SendCmdReply@cmd 0076                      __end_of_InitWorkTick 1C9E  
             __size_of_USBWakeFromSuspend 001B                               _pBDTEntryIn 0068  
                       __end_of_ProcessIO 14DB          __end_of_USBCtrlEPServiceComplete 1461  
                                 ?_Send32 0070                 __end_of_USBCB_SOF_Handler 1002  
                              __pmaintext 1CCC                      USBCtrlTrfRxService@i 005C  
                               ?_ResultRx 0070                                   ?___bmul 0058  
                                 ?___wmul 0058                                __pintentry 0004  
                               ?_UserInit 0070                                   _I2CAddr 0133  
                                 ?_memset 0058                    ?_USBCBStdSetDscHandler 0070  
                              _device_dsc 088D                                 ?___awtoft 0060  
                               ?___ftpack 0058                          _USBCtrlEPService 14DB  
                               ?_WorkTick 0070                               ?_ProcessCmd 0070  
                              ??i1___bmul 0071                                _ep_data_in 012A  
                                 ?_rotate 0058                                ??i1___wmul 0074  
                        _InitializeSystem 1CB5                               _NonceRanges 0320  
             __end_of_USBCtrlTrfRxService 0B37                        _USBCheckStdRequest 1200  
                       _configDescriptor1 086D               __end_of_USBCtrlTrfTxService 1771  
                     _USBStdSetCfgHandler 1771                                   _ISRCode 0004  
                                 _PWM1DCH 0612                                   _PWM1DCL 0611  
                                 _OSCTUNE 0098                                   _PWM1CON 0613  
                                 _TMR1GIE 048F                                   _TMR1GIF 008F  
                     ?_USBCheckStdRequest 0070              __size_of_USBStdGetDscHandler 007F  
                                 _UIEbits 0E92             __size_of_USBCBWakeFromSuspend 0001  
                              __stringtab 0800                                   _UIRbits 0E90  
                                 _InitFAN 1D50                      ?_USBStdSetCfgHandler 0070  
                         __size_of_Send32 00AC                                   _TimeOut 013C  
                              ??_ResultRx 007C                __size_of_USBEnableEndpoint 0025  
                            ?_AsicPreCalc 00A0                              ?_DetectAsics 0070  
                    ??_USBCheckStdRequest 00AC                           __size_of___bmul 0012  
           __size_of_USBCtrlTrfOutHandler 002D                                   ___awdiv 10F4  
                                 ___ftadd 0EFC                                   ___awmod 1F6A  
                                 ___ftneg 07F6                          ??_USBDeviceTasks 00B2  
                         __size_of___wmul 001E                                   _WorkNow 0146  
                                 ___ftmul 0D43                                   _WorkQue 233C  
                                 ___fttol 165C                                   ___lwdiv 1EB4  
                       ??_USBStallHandler 0058                                ??_UserInit 0068  
                              ??___awtoft 0063                                ??___ftpack 005D  
                         __size_of_memset 0020                                ??_WorkTick 00D5  
               __end_of_configDescriptor1 088D                      __size_of_USBCBInitEP 001C  
                                 __ptext1 1461                                   __ptext2 0414  
                                 __ptext3 1EB4                                   __ptext4 0B37  
                                 __ptext5 1C50                                   __ptext6 15D6  
                                 __ptext7 1D89                                   __ptext8 0014  
                                 __ptext9 1E7D                                   _inPipes 014D  
                 __size_of_UpdateFanLevel 0147                          _DetectAsics$2868 00A0  
             _USBDeferOUTDataStagePackets 013F                           __size_of_rotate 0037  
                               _T1CONbits 0018                              ??_USBSuspend 00A6  
                               _T2CONbits 001C                         _USBCBErrorHandler 0002  
                        ___awmod@dividend 005A                      __end_of_SendCmdReply 0BE0  
                     i1___bmul@multiplier 0072                                 _IOCBPbits 0394  
                    __end_of_SendAsicData 09E7                        ?_USBCBErrorHandler 0070  
                           ?_USBCBSuspend 0070                        __end_of_USB_CD_Ptr 0805  
         __size_of_USBCtrlTrfSetupHandler 004F                                   clrloop0 1C37  
                    end_of_initialization 1382                            _ProcessIO$2410 016C  
                          _ProcessIO$2376 016A               __size_of_USBCBCheckOtherReq 0003  
                      __end_of_USB_SD_Ptr 0804                       _pBDTEntryEP0OutNext 006E  
                                 init_ram 1C2A                       ??_USBCBErrorHandler 0058  
                                 memset@c 005A                                   memset@n 005C  
                                 memset@p 005F                                   initloop 1C2B  
                     __size_of_ProcessCmd 0180                  ?_USBStdFeatureReqHandler 0070  
                   ??_USBStdSetCfgHandler 00A6                          SendCmdReply@data 0060  
              __size_of_USBCB_SOF_Handler 0001                        __end_of_USBSuspend 1D50  
                 _USBCtrlEPAllowDataStage 1051                                 _RCSTAbits 019D  
                                 rotate@x 0058                                   rotate@y 005C  
                         AsicPreCalc@work 00A0                  _USBCtrlEPServiceComplete 13E9  
                   i1___wmul@multiplicand 0072                _USBStatusStageEnabledFlag1 0142  
              _USBStatusStageEnabledFlag2 0143                        USBEnableEndpoint@p 0062  
               __end_of_USBCBErrorHandler 0003                          __CFG_FOSC$INTOSC 0000  
                   __size_of_InitResultRx 0013                                 _TRISAbits 008C  
                               _TRISBbits 008D                                 _TRISCbits 008E  
                          ??_USBCBSuspend 0058                        _BothEP0OutUOWNsSet 0132  
               USBStdSetCfgHandler@i_1089 00A9                                 _OUTPacket 02A0  
               USBConfigureEndpoint@EPNum 005D                ?_USBCtrlEPAllowStatusStage 0070  
                   __size_of_InitWorkTick 0016       USER_USB_CALLBACK_EVENT_HANDLER@size 00A4  
                               _USTATcopy 00EF              __end_of_USBTransferOnePacket 2000  
                               _TXSTAbits 019E                             _PrecalcHashes 01B2  
                             ___ftmul@exp 00AA                        USBDeviceInit@i_718 005C  
                          __end_of_Send32 0C8C                    _USBCtrlTrfSetupHandler 1002  
          __size_of_USBCheckVendorRequest 0001             __end_of_USBCheckVendorRequest 0004  
                 __size_ofi1_SendCmdReply 0093                            __end_of___bmul 1C62  
                   __end_of_USBDeviceInit 0A8F                              _InitResultRx 1C62  
                          __end_of___wmul 1DA7                          ??_InitTempSensor 0058  
                             _BAUDCONbits 019F                            __end_of_memset 1DC7  
                       _USBBusIsSuspended 013D                            __end_of_rotate 1EB4  
                            _InitWorkTick 1C88                         __size_ofi1___bmul 0011  
                               _LastError 01B0                       start_initialization 1322  
                       __size_ofi1___wmul 001D                   ?_USBStdGetStatusHandler 0070  
           USBCtrlTrfRxService@byteToRead 005D              __end_of_USBConfigureEndpoint 1F6A  
         __end_of_USBStdFeatureReqHandler 07F6         __end_of_USBCtrlEPAllowStatusStage 13E9  
                __end_of_USBCtrlEPService 1557                          SendAsicData@work 005E  
                __end_of_InitializeSystem 1CCC                 ??_USBCtrlEPAllowDataStage 005B  
                          USBDeviceInit@i 005D                                  ??_Send32 0058  
                          USBDeviceInit@p 005A                    _pBDTEntryEP0OutCurrent 006D  
                 USBTransferOnePacket@dir 005C                   USBTransferOnePacket@len 005E  
                 ??_USBCBStdSetDscHandler 0058                                  ??___bmul 0059  
                               _ResultQue 01CA                                  ??___wmul 005C  
                     _USBStdGetDscHandler 1557                                 _ProcessIO 1461  
                             __pdataBANK2 0158                               __pdataBANK3 01D0  
                             __pdataBANK6 0340                         __size_of_ResultRx 005B  
                    __size_of_AsicPreCalc 0400                                  ??_memset 005E  
                    __size_of_DetectAsics 00B7                              ??_ProcessCmd 00EA  
                   __size_of_SendCmdReply 00A9                            _UpdateFanLevel 0594  
                                ??_rotate 005D                __size_of_USBCBErrorHandler 0001  
                   __size_of_SendAsicData 0094                         __size_of_UserInit 0013  
                  _USBActiveConfiguration 0154            __end_of_USBStdGetStatusHandler 10F4  
                       __size_of___awtoft 0022                         __size_of___ftpack 0061  
                             __pbssBIGRAM 233C                         __size_of_WorkTick 005D  
                           __pcstackBANK0 0050                             __pcstackBANK1 00A0  
                           __pcstackBANK2 0166              __size_of_USBCtrlTrfInHandler 0063  
                                ?_ISRCode 0070                      ?_USBStdGetDscHandler 0070  
                      i1SendCmdReply@data 0078                __end_of_USBWakeFromSuspend 1D18  
                         _USBStallHandler 1DE7                              _pBDTEntryOut 012E  
                                ?_InitFAN 0070                              _send32_count 014B  
                               __pnvBANK2 016E                                 __pnvBANK3 01EA  
                      __end_of_ProcessCmd 0594                          ___lwdiv@dividend 005A  
                            _SendCmdReply 0B37                              _SendAsicData 0953  
                    __end_of_USBCBSuspend 1C27              __end_of_USBCBWakeFromSuspend 1001  
                                ?___awdiv 0058                                  ?___ftadd 00B3  
                                ?___awmod 0058                                  ?___ftneg 00B0  
                              ?_ProcessIO 0070                                  ?___ftmul 00A0  
                                ?___fttol 00C0                                  ?___lwdiv 0058  
                  __end_of_UpdateFanLevel 06DB                              AsicPreCalc@K 00AC  
                            AsicPreCalc@m 00B8                              AsicPreCalc@n 00E4  
                            AsicPreCalc@x 00E0                              AsicPreCalc@y 00DC  
                            AsicPreCalc@z 00D8                                 __pstrings 0800  
              USBCBSendResume@delay_count 0126                                 __pswtext1 1800  
                    _USBTransferOnePacket 1FB2                                  _I2CInBuf 0135  
                            DetectAsics@x 00A2                                  _I2CCount 0134  
                                _I2CState 0136                                 _last_bit0 0148  
                               _last_bit1 0149              __end_of_USBCtrlTrfOutHandler 1E7D  
                   ??_USBStdGetDscHandler 0058                               _ep_data_out 012C  
                        ___lwdiv@quotient 005E              __size_of_USBCtrlTrfRxService 00A8  
           USBConfigureEndpoint@direction 0058              __size_of_USBCtrlTrfTxService 008E  
                          ___wmul@product 005C                                  _LATAbits 010C  
                                _LATCbits 010E                ??_USBCtrlEPServiceComplete 005D  
                               clear_ram0 1C36                                  _PIE2bits 0092  
                   i1___bmul@multiplicand 0070                           SendCmdReply@cmd 005E  
                                _PIR2bits 0012                                  _INPacket 0220  
               USBCtrlEPService@setup_cnt 00B1                                  _UEP0bits 0E98  
              _USBDeferINDataStagePackets 013E                            i1_SendCmdReply 08C0  
                           ??_USBCBInitEP 0065               __size_of_USBCheckStdRequest 005E  
                                _UCONbits 0E8E                           ?_UpdateFanLevel 0070  
                     _UpdateFanLevel$2869 00D2                      _USBConfigureEndpoint 1F2A  
                           ProcessCmd@cmd 0067          __size_of_USBStdFeatureReqHandler 011B  
                                i1___bmul 08AF                                _ADCON0bits 009D  
                              _ADCON1bits 009E                                _ADCON2bits 009F  
                       ___wmul@multiplier 0058                     ?_USBTransferOnePacket 005C  
                                i1___wmul 1D6C                                  _BankSize 016F  
                                _FanLevel 016E                              _RemoteWakeup 0138  
                                _ClockCfg 01DC                __end_of_USBCBCheckOtherReq 1C2A  
                                _HashTime 0158                   __end_of_USBStallHandler 1E09  
                        __size_of_ISRCode 000E               ??_USBCtrlEPAllowStatusStage 0058  
             __end_of_USBStdSetCfgHandler 1800                                  _LastTemp 0137  
                            _SlaveAddress 013A                        __end_of_device_dsc 089F  
                 ?_USBCtrlTrfSetupHandler 0070                          __size_of_InitFAN 001C  
                 USBStdGetStatusHandler@p 0059                    __end_ofi1_SendCmdReply 0953  
                  USBTransferOnePacket@ep 0061                                  _ResultQC 0139  
                                _ResultRx 1148                                  _SetupPkt 0040  
                                _SlowTick 013B                               ??_ProcessIO 0166  
                   ?_USBConfigureEndpoint 0058                                  _UserInit 1C75  
                        __size_of___awdiv 0054                          __size_of___ftadd 0104  
                        __size_of___awmod 0048                          __size_of___ftneg 0009  
                        __size_of___ftmul 00C2                          __size_of___fttol 0087  
                        __size_of___lwdiv 0037                                  ___awtoft 1E09  
                                ___ftpack 125E                                  _WorkTick 11A3  
                      __end_of__stringtab 0801                                _ANSELBbits 018D  
                     __end_of_USBCBInitEP 1D34                             ?_AsicPushWork 0070  
                             _send32_data 0130                   __size_of_USBDeviceTasks 00F7  
                         ___lwdiv@divisor 0058                           ___lwdiv@counter 005D  
                                __ptext10 0953                                  __ptext11 0BE0  
                                __ptext20 11A3                                  __ptext12 1CB5  
                                __ptext21 1F6A                                  __ptext13 1C75  
                              _T1GCONbits 0019                                  __ptext30 14DB  
                                __ptext22 0594                                  __ptext14 1C62  
                                __ptext31 12BF                                  __ptext23 165C  
                                __ptext15 1C88                                  __ptext40 1DA7  
                                __ptext32 1E50                                  __ptext24 07F6  
                                __ptext16 1C9E                                  __ptext41 13E9  
                                __ptext33 0A8F                                  __ptext25 0D43  
                                __ptext17 1D50                                  __ptext50 1FB2  
                                __ptext42 1051                                  __ptext34 1002  
                                __ptext26 0EFC                                  __ptext18 0C8C  
                                __ptext51 1E2B                                  __ptext43 16E3  
                                __ptext35 1200                                  __ptext27 1E09  
                                __ptext19 10F4                                  __ptext60 09E7  
                                __ptext52 1F2A                                  __ptext44 1385  
                                __ptext36 06DB                                  __ptext28 125E  
                                __ptext53 07FF                                  __ptext45 1DE7  
                                __ptext37 10A1                                  __ptext29 0E05  
                                __ptext62 1148                                  __ptext54 1C27  
                                __ptext46 1D34                                  __ptext38 1557  
                                __ptext63 08C0                                  __ptext55 0003  
                                __ptext47 1CFD                                  __ptext39 1771  
                                __ptext64 08AF                                  __ptext56 0002  
                                __ptext48 1EEB                                  __ptext65 1D6C  
                                __ptext57 1001                                  __ptext49 1D18  
                                __ptext58 1000                                  __ptext59 1C26  
                    _USBCBWakeFromSuspend 1000            __end_of_USBCtrlTrfSetupHandler 1051  
                           __size_of_main 0017                         ?_USBCtrlEPService 0070  
                   __size_of_USBCBSuspend 0001                         ?_InitializeSystem 0070  
                      ??_USBCtrlEPService 00AE                       _USBGenericOutHandle 0141  
                     _USBCtrlTrfInHandler 12BF                           ?i1_SendCmdReply 0076  
                      ??_InitializeSystem 0068                                  _outPipes 0120  
                    _USBCtrlTrfOutHandler 1E50                 _USBCtrlEPAllowStatusStage 1385  
          __size_of_USBCBStdSetDscHandler 0001             __end_of_USBCBStdSetDscHandler 0800  
                  ??_USBTransferOnePacket 005F                     _USBCheckVendorRequest 0003  
                          ??_AsicPushWork 00E5                 _USBDeferStatusStagePacket 006B  
                              _INTCONbits 000B                        _USBGenericInHandle 0140  
                    ?_USBCtrlTrfInHandler 0070             USBCtrlTrfTxService@byteToSend 005A  
                                memset@p1 0058                              _USBCBSuspend 1C26  
                        ?_USBStallHandler 0070                  USBStdFeatureReqHandler@p 00AB  
                   ?_USBCBWakeFromSuspend 0070                                  intlevel1 0000  
                  __size_of_USBDeviceInit 00A8   __end_of_USER_USB_CALLBACK_EVENT_HANDLER 1F2A  
__size_of_USER_USB_CALLBACK_EVENT_HANDLER 003F         ??_USER_USB_CALLBACK_EVENT_HANDLER 0068  
        ?_USER_USB_CALLBACK_EVENT_HANDLER 00A0           _USER_USB_CALLBACK_EVENT_HANDLER 1EEB  
                        AsicPreCalc@F3347 01D0                                  next_word 0BE5  
                       SendCmdReply@count 0062                             SendCmdReply@n 0063  
                           ??_AsicPreCalc 00A2                              _VerySlowTick 0145  
                         _ProcessCmd$2058 0065                             ??_DetectAsics 0061  
                  ??_USBConfigureEndpoint 0059                     ?_USBCtrlTrfOutHandler 0070  
                    __CFG_CPUDIV$NOCLKDIV 0000                       _USBCtrlTrfRxService 0A8F  
                             _USBCBInitEP 1D18                        _USBWakeFromSuspend 1CFD  
                 _USBStdFeatureReqHandler 06DB                       _USBCtrlTrfTxService 16E3  
                     ?_USBWakeFromSuspend 0070                     ??_USBCtrlTrfInHandler 005B  
                   _USBAlternateInterface 0155                               _SSPCON1bits 0215  
                             _SSPCON2bits 0216                       USBEnableEndpoint@ep 0064  
                             _SSPCON3bits 0217                           _endpoint_number 0147  
                 __size_of_InitTempSensor 0017                      ?_USBCtrlTrfRxService 0070  
                ?_USBCtrlEPAllowDataStage 0070                      ?_USBCtrlTrfTxService 0070  
            _USBStatusStageTimeoutCounter 0144                      ??_USBWakeFromSuspend 00A6  
              USBTransferOnePacket@handle 0062                          ??_UpdateFanLevel 00CE  
                              _USB_CD_Ptr 0804  
