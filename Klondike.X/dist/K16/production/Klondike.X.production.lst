

Microchip Technology PIC LITE Macro Assembler V1.20 build 52243 
                                                                                               Fri Oct 25 16:00:44 2013

Microchip Technology Omniscient Code Generator (Lite mode) build 52243
     1                           	processor	16LF1459
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK3,global,class=CODE,delta=2
     6                           	psect	idataBANK7,global,class=CODE,delta=2
     7                           	psect	strings,global,class=STRING,delta=2
     8                           	psect	nvBANK3,global,class=BANK3,space=1,delta=1
     9                           	psect	cinit,global,class=CODE,merge=1,delta=2
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    14                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    15                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    16                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    17                           	psect	bssBANK6,global,class=BANK6,space=1,delta=1
    18                           	psect	dataBANK7,global,class=BANK7,space=1,delta=1
    19                           	psect	clrtext,global,class=CODE,delta=2
    20                           	psect	inittext,global,class=CODE,delta=2
    21                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    22                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    23                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    24                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    25                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    26                           	psect	text1,local,class=CODE,merge=1,delta=2
    27                           	psect	text2,local,class=CODE,merge=1,delta=2
    28                           	psect	text3,local,class=CODE,merge=1,delta=2
    29                           	psect	text4,local,class=CODE,merge=1,delta=2
    30                           	psect	text5,local,class=CODE,merge=1,delta=2
    31                           	psect	text6,local,class=CODE,merge=1,delta=2
    32                           	psect	text7,local,class=CODE,merge=1,delta=2
    33                           	psect	text8,local,class=CODE,merge=1,delta=2
    34                           	psect	text9,local,class=CODE,merge=1,delta=2
    35                           	psect	text10,local,class=CODE,merge=1,delta=2
    36                           	psect	text11,local,class=CODE,merge=1,delta=2
    37                           	psect	text12,local,class=CODE,merge=1,delta=2
    38                           	psect	text13,local,class=CODE,merge=1,delta=2
    39                           	psect	text14,local,class=CODE,merge=1,delta=2
    40                           	psect	text15,local,class=CODE,merge=1,delta=2
    41                           	psect	text16,local,class=CODE,merge=1,delta=2
    42                           	psect	text17,local,class=CODE,merge=1,delta=2
    43                           	psect	text18,local,class=CODE,merge=1,delta=2
    44                           	psect	text19,local,class=CODE,merge=1,delta=2
    45                           	psect	text20,local,class=CODE,merge=1,delta=2
    46                           	psect	text21,local,class=CODE,merge=1,delta=2
    47                           	psect	text22,local,class=CODE,merge=1,delta=2
    48                           	psect	text23,local,class=CODE,merge=1,delta=2
    49                           	psect	text24,local,class=CODE,merge=1,delta=2
    50                           	psect	text25,local,class=CODE,merge=1,delta=2
    51                           	psect	text26,local,class=CODE,merge=1,delta=2
    52                           	psect	text27,local,class=CODE,merge=1,delta=2
    53                           	psect	text28,local,class=CODE,merge=1,delta=2
    54                           	psect	text29,local,class=CODE,merge=1,delta=2
    55                           	psect	text30,local,class=CODE,merge=1,delta=2
    56                           	psect	text31,local,class=CODE,merge=1,delta=2
    57                           	psect	text32,local,class=CODE,merge=1,delta=2
    58                           	psect	text33,local,class=CODE,merge=1,delta=2
    59                           	psect	text34,local,class=CODE,merge=1,delta=2
    60                           	psect	swtext1,local,class=CONST,delta=2
    61                           	psect	text35,local,class=CODE,merge=1,delta=2
    62                           	psect	text36,local,class=CODE,merge=1,delta=2
    63                           	psect	text37,local,class=CODE,merge=1,delta=2
    64                           	psect	text38,local,class=CODE,merge=1,delta=2
    65                           	psect	text39,local,class=CODE,merge=1,delta=2
    66                           	psect	text40,local,class=CODE,merge=1,delta=2
    67                           	psect	text41,local,class=CODE,merge=1,delta=2
    68                           	psect	text42,local,class=CODE,merge=1,delta=2
    69                           	psect	text43,local,class=CODE,merge=1,delta=2
    70                           	psect	text44,local,class=CODE,merge=1,delta=2
    71                           	psect	text45,local,class=CODE,merge=1,delta=2
    72                           	psect	text46,local,class=CODE,merge=1,delta=2
    73                           	psect	text47,local,class=CODE,merge=1,delta=2
    74                           	psect	text48,local,class=CODE,merge=1,delta=2
    75                           	psect	text49,local,class=CODE,merge=1,delta=2
    76                           	psect	text50,local,class=CODE,merge=1,delta=2
    77                           	psect	text51,local,class=CODE,merge=1,delta=2
    78                           	psect	text52,local,class=CODE,merge=1,delta=2
    79                           	psect	text53,local,class=CODE,merge=1,delta=2
    80                           	psect	text54,local,class=CODE,merge=1,delta=2
    81                           	psect	text55,local,class=CODE,merge=1,delta=2
    82                           	psect	text56,local,class=CODE,merge=1,delta=2
    83                           	psect	text57,local,class=CODE,merge=1,delta=2
    84                           	psect	text58,local,class=CODE,merge=1,delta=2
    85                           	psect	text59,local,class=CODE,merge=1,delta=2
    86                           	psect	intentry,global,class=CODE,delta=2
    87                           	psect	text61,local,class=CODE,merge=1,delta=2
    88                           	psect	text62,local,class=CODE,merge=1,delta=2
    89                           	psect	text63,local,class=CODE,merge=1,delta=2
    90                           	psect	text64,local,class=CODE,merge=1,delta=2
    91                           	dabs	1,0x620,48
    92                           	dabs	1,0x5A0,80
    93                           	dabs	1,0x53C,52
    94                           	dabs	1,0x20,32,_BDT
    95                           	dabs	1,0x48,8,_CtrlTrfData
    96                           	dabs	1,0x40,8,_SetupPkt
    97                           	dabs	1,0x220,64,_INPacket
    98                           	dabs	1,0x2A0,64,_OUTPacket
    99                           	dabs	1,0x233C,0,_WorkQue
   100                           	dabs	1,0x7E,2
   101  0000                     	;# 
   102  0001                     	;# 
   103  0002                     	;# 
   104  0003                     	;# 
   105  0004                     	;# 
   106  0005                     	;# 
   107  0006                     	;# 
   108  0007                     	;# 
   109  0008                     	;# 
   110  0009                     	;# 
   111  000A                     	;# 
   112  000B                     	;# 
   113  000C                     	;# 
   114  000D                     	;# 
   115  000E                     	;# 
   116  0011                     	;# 
   117  0012                     	;# 
   118  0015                     	;# 
   119  0016                     	;# 
   120  0016                     	;# 
   121  0017                     	;# 
   122  0018                     	;# 
   123  0019                     	;# 
   124  001A                     	;# 
   125  001B                     	;# 
   126  001C                     	;# 
   127  008C                     	;# 
   128  008D                     	;# 
   129  008E                     	;# 
   130  0091                     	;# 
   131  0092                     	;# 
   132  0095                     	;# 
   133  0096                     	;# 
   134  0097                     	;# 
   135  0098                     	;# 
   136  0099                     	;# 
   137  009A                     	;# 
   138  009B                     	;# 
   139  009B                     	;# 
   140  009C                     	;# 
   141  009D                     	;# 
   142  009E                     	;# 
   143  009F                     	;# 
   144  010C                     	;# 
   145  010D                     	;# 
   146  010E                     	;# 
   147  0111                     	;# 
   148  0112                     	;# 
   149  0113                     	;# 
   150  0114                     	;# 
   151  0115                     	;# 
   152  0116                     	;# 
   153  0117                     	;# 
   154  0118                     	;# 
   155  0119                     	;# 
   156  011D                     	;# 
   157  018C                     	;# 
   158  018D                     	;# 
   159  018E                     	;# 
   160  0191                     	;# 
   161  0191                     	;# 
   162  0192                     	;# 
   163  0193                     	;# 
   164  0193                     	;# 
   165  0194                     	;# 
   166  0195                     	;# 
   167  0196                     	;# 
   168  0199                     	;# 
   169  019A                     	;# 
   170  019B                     	;# 
   171  019C                     	;# 
   172  019D                     	;# 
   173  019E                     	;# 
   174  019F                     	;# 
   175  020C                     	;# 
   176  020D                     	;# 
   177  0211                     	;# 
   178  0211                     	;# 
   179  0212                     	;# 
   180  0212                     	;# 
   181  0213                     	;# 
   182  0213                     	;# 
   183  0214                     	;# 
   184  0214                     	;# 
   185  0215                     	;# 
   186  0215                     	;# 
   187  0215                     	;# 
   188  0216                     	;# 
   189  0216                     	;# 
   190  0217                     	;# 
   191  0217                     	;# 
   192  0391                     	;# 
   193  0392                     	;# 
   194  0393                     	;# 
   195  0394                     	;# 
   196  0395                     	;# 
   197  0396                     	;# 
   198  039A                     	;# 
   199  039B                     	;# 
   200  0611                     	;# 
   201  0612                     	;# 
   202  0613                     	;# 
   203  0613                     	;# 
   204  0614                     	;# 
   205  0615                     	;# 
   206  0616                     	;# 
   207  0616                     	;# 
   208  0691                     	;# 
   209  0692                     	;# 
   210  0693                     	;# 
   211  0694                     	;# 
   212  0695                     	;# 
   213  0E8E                     	;# 
   214  0E8F                     	;# 
   215  0E90                     	;# 
   216  0E91                     	;# 
   217  0E92                     	;# 
   218  0E93                     	;# 
   219  0E94                     	;# 
   220  0E94                     	;# 
   221  0E95                     	;# 
   222  0E96                     	;# 
   223  0E97                     	;# 
   224  0E98                     	;# 
   225  0E99                     	;# 
   226  0E9A                     	;# 
   227  0E9B                     	;# 
   228  0E9C                     	;# 
   229  0E9D                     	;# 
   230  0E9E                     	;# 
   231  0E9F                     	;# 
   232  0FE4                     	;# 
   233  0FE5                     	;# 
   234  0FE6                     	;# 
   235  0FE7                     	;# 
   236  0FE8                     	;# 
   237  0FE9                     	;# 
   238  0FEA                     	;# 
   239  0FEB                     	;# 
   240  0FED                     	;# 
   241  0FEE                     	;# 
   242  0FEF                     	;# 
   243  0000                     	;# 
   244  0001                     	;# 
   245  0002                     	;# 
   246  0003                     	;# 
   247  0004                     	;# 
   248  0005                     	;# 
   249  0006                     	;# 
   250  0007                     	;# 
   251  0008                     	;# 
   252  0009                     	;# 
   253  000A                     	;# 
   254  000B                     	;# 
   255  000C                     	;# 
   256  000D                     	;# 
   257  000E                     	;# 
   258  0011                     	;# 
   259  0012                     	;# 
   260  0015                     	;# 
   261  0016                     	;# 
   262  0016                     	;# 
   263  0017                     	;# 
   264  0018                     	;# 
   265  0019                     	;# 
   266  001A                     	;# 
   267  001B                     	;# 
   268  001C                     	;# 
   269  008C                     	;# 
   270  008D                     	;# 
   271  008E                     	;# 
   272  0091                     	;# 
   273  0092                     	;# 
   274  0095                     	;# 
   275  0096                     	;# 
   276  0097                     	;# 
   277  0098                     	;# 
   278  0099                     	;# 
   279  009A                     	;# 
   280  009B                     	;# 
   281  009B                     	;# 
   282  009C                     	;# 
   283  009D                     	;# 
   284  009E                     	;# 
   285  009F                     	;# 
   286  010C                     	;# 
   287  010D                     	;# 
   288  010E                     	;# 
   289  0111                     	;# 
   290  0112                     	;# 
   291  0113                     	;# 
   292  0114                     	;# 
   293  0115                     	;# 
   294  0116                     	;# 
   295  0117                     	;# 
   296  0118                     	;# 
   297  0119                     	;# 
   298  011D                     	;# 
   299  018C                     	;# 
   300  018D                     	;# 
   301  018E                     	;# 
   302  0191                     	;# 
   303  0191                     	;# 
   304  0192                     	;# 
   305  0193                     	;# 
   306  0193                     	;# 
   307  0194                     	;# 
   308  0195                     	;# 
   309  0196                     	;# 
   310  0199                     	;# 
   311  019A                     	;# 
   312  019B                     	;# 
   313  019C                     	;# 
   314  019D                     	;# 
   315  019E                     	;# 
   316  019F                     	;# 
   317  020C                     	;# 
   318  020D                     	;# 
   319  0211                     	;# 
   320  0211                     	;# 
   321  0212                     	;# 
   322  0212                     	;# 
   323  0213                     	;# 
   324  0213                     	;# 
   325  0214                     	;# 
   326  0214                     	;# 
   327  0215                     	;# 
   328  0215                     	;# 
   329  0215                     	;# 
   330  0216                     	;# 
   331  0216                     	;# 
   332  0217                     	;# 
   333  0217                     	;# 
   334  0391                     	;# 
   335  0392                     	;# 
   336  0393                     	;# 
   337  0394                     	;# 
   338  0395                     	;# 
   339  0396                     	;# 
   340  039A                     	;# 
   341  039B                     	;# 
   342  0611                     	;# 
   343  0612                     	;# 
   344  0613                     	;# 
   345  0613                     	;# 
   346  0614                     	;# 
   347  0615                     	;# 
   348  0616                     	;# 
   349  0616                     	;# 
   350  0691                     	;# 
   351  0692                     	;# 
   352  0693                     	;# 
   353  0694                     	;# 
   354  0695                     	;# 
   355  0E8E                     	;# 
   356  0E8F                     	;# 
   357  0E90                     	;# 
   358  0E91                     	;# 
   359  0E92                     	;# 
   360  0E93                     	;# 
   361  0E94                     	;# 
   362  0E94                     	;# 
   363  0E95                     	;# 
   364  0E96                     	;# 
   365  0E97                     	;# 
   366  0E98                     	;# 
   367  0E99                     	;# 
   368  0E9A                     	;# 
   369  0E9B                     	;# 
   370  0E9C                     	;# 
   371  0E9D                     	;# 
   372  0E9E                     	;# 
   373  0E9F                     	;# 
   374  0FE4                     	;# 
   375  0FE5                     	;# 
   376  0FE6                     	;# 
   377  0FE7                     	;# 
   378  0FE8                     	;# 
   379  0FE9                     	;# 
   380  0FEA                     	;# 
   381  0FEB                     	;# 
   382  0FED                     	;# 
   383  0FEE                     	;# 
   384  0FEF                     	;# 
   385  0000                     	;# 
   386  0001                     	;# 
   387  0002                     	;# 
   388  0003                     	;# 
   389  0004                     	;# 
   390  0005                     	;# 
   391  0006                     	;# 
   392  0007                     	;# 
   393  0008                     	;# 
   394  0009                     	;# 
   395  000A                     	;# 
   396  000B                     	;# 
   397  000C                     	;# 
   398  000D                     	;# 
   399  000E                     	;# 
   400  0011                     	;# 
   401  0012                     	;# 
   402  0015                     	;# 
   403  0016                     	;# 
   404  0016                     	;# 
   405  0017                     	;# 
   406  0018                     	;# 
   407  0019                     	;# 
   408  001A                     	;# 
   409  001B                     	;# 
   410  001C                     	;# 
   411  008C                     	;# 
   412  008D                     	;# 
   413  008E                     	;# 
   414  0091                     	;# 
   415  0092                     	;# 
   416  0095                     	;# 
   417  0096                     	;# 
   418  0097                     	;# 
   419  0098                     	;# 
   420  0099                     	;# 
   421  009A                     	;# 
   422  009B                     	;# 
   423  009B                     	;# 
   424  009C                     	;# 
   425  009D                     	;# 
   426  009E                     	;# 
   427  009F                     	;# 
   428  010C                     	;# 
   429  010D                     	;# 
   430  010E                     	;# 
   431  0111                     	;# 
   432  0112                     	;# 
   433  0113                     	;# 
   434  0114                     	;# 
   435  0115                     	;# 
   436  0116                     	;# 
   437  0117                     	;# 
   438  0118                     	;# 
   439  0119                     	;# 
   440  011D                     	;# 
   441  018C                     	;# 
   442  018D                     	;# 
   443  018E                     	;# 
   444  0191                     	;# 
   445  0191                     	;# 
   446  0192                     	;# 
   447  0193                     	;# 
   448  0193                     	;# 
   449  0194                     	;# 
   450  0195                     	;# 
   451  0196                     	;# 
   452  0199                     	;# 
   453  019A                     	;# 
   454  019B                     	;# 
   455  019C                     	;# 
   456  019D                     	;# 
   457  019E                     	;# 
   458  019F                     	;# 
   459  020C                     	;# 
   460  020D                     	;# 
   461  0211                     	;# 
   462  0211                     	;# 
   463  0212                     	;# 
   464  0212                     	;# 
   465  0213                     	;# 
   466  0213                     	;# 
   467  0214                     	;# 
   468  0214                     	;# 
   469  0215                     	;# 
   470  0215                     	;# 
   471  0215                     	;# 
   472  0216                     	;# 
   473  0216                     	;# 
   474  0217                     	;# 
   475  0217                     	;# 
   476  0391                     	;# 
   477  0392                     	;# 
   478  0393                     	;# 
   479  0394                     	;# 
   480  0395                     	;# 
   481  0396                     	;# 
   482  039A                     	;# 
   483  039B                     	;# 
   484  0611                     	;# 
   485  0612                     	;# 
   486  0613                     	;# 
   487  0613                     	;# 
   488  0614                     	;# 
   489  0615                     	;# 
   490  0616                     	;# 
   491  0616                     	;# 
   492  0691                     	;# 
   493  0692                     	;# 
   494  0693                     	;# 
   495  0694                     	;# 
   496  0695                     	;# 
   497  0E8E                     	;# 
   498  0E8F                     	;# 
   499  0E90                     	;# 
   500  0E91                     	;# 
   501  0E92                     	;# 
   502  0E93                     	;# 
   503  0E94                     	;# 
   504  0E94                     	;# 
   505  0E95                     	;# 
   506  0E96                     	;# 
   507  0E97                     	;# 
   508  0E98                     	;# 
   509  0E99                     	;# 
   510  0E9A                     	;# 
   511  0E9B                     	;# 
   512  0E9C                     	;# 
   513  0E9D                     	;# 
   514  0E9E                     	;# 
   515  0E9F                     	;# 
   516  0FE4                     	;# 
   517  0FE5                     	;# 
   518  0FE6                     	;# 
   519  0FE7                     	;# 
   520  0FE8                     	;# 
   521  0FE9                     	;# 
   522  0FEA                     	;# 
   523  0FEB                     	;# 
   524  0FED                     	;# 
   525  0FEE                     	;# 
   526  0FEF                     	;# 
   527  0000                     	;# 
   528  0001                     	;# 
   529  0002                     	;# 
   530  0003                     	;# 
   531  0004                     	;# 
   532  0005                     	;# 
   533  0006                     	;# 
   534  0007                     	;# 
   535  0008                     	;# 
   536  0009                     	;# 
   537  000A                     	;# 
   538  000B                     	;# 
   539  000C                     	;# 
   540  000D                     	;# 
   541  000E                     	;# 
   542  0011                     	;# 
   543  0012                     	;# 
   544  0015                     	;# 
   545  0016                     	;# 
   546  0016                     	;# 
   547  0017                     	;# 
   548  0018                     	;# 
   549  0019                     	;# 
   550  001A                     	;# 
   551  001B                     	;# 
   552  001C                     	;# 
   553  008C                     	;# 
   554  008D                     	;# 
   555  008E                     	;# 
   556  0091                     	;# 
   557  0092                     	;# 
   558  0095                     	;# 
   559  0096                     	;# 
   560  0097                     	;# 
   561  0098                     	;# 
   562  0099                     	;# 
   563  009A                     	;# 
   564  009B                     	;# 
   565  009B                     	;# 
   566  009C                     	;# 
   567  009D                     	;# 
   568  009E                     	;# 
   569  009F                     	;# 
   570  010C                     	;# 
   571  010D                     	;# 
   572  010E                     	;# 
   573  0111                     	;# 
   574  0112                     	;# 
   575  0113                     	;# 
   576  0114                     	;# 
   577  0115                     	;# 
   578  0116                     	;# 
   579  0117                     	;# 
   580  0118                     	;# 
   581  0119                     	;# 
   582  011D                     	;# 
   583  018C                     	;# 
   584  018D                     	;# 
   585  018E                     	;# 
   586  0191                     	;# 
   587  0191                     	;# 
   588  0192                     	;# 
   589  0193                     	;# 
   590  0193                     	;# 
   591  0194                     	;# 
   592  0195                     	;# 
   593  0196                     	;# 
   594  0199                     	;# 
   595  019A                     	;# 
   596  019B                     	;# 
   597  019C                     	;# 
   598  019D                     	;# 
   599  019E                     	;# 
   600  019F                     	;# 
   601  020C                     	;# 
   602  020D                     	;# 
   603  0211                     	;# 
   604  0211                     	;# 
   605  0212                     	;# 
   606  0212                     	;# 
   607  0213                     	;# 
   608  0213                     	;# 
   609  0214                     	;# 
   610  0214                     	;# 
   611  0215                     	;# 
   612  0215                     	;# 
   613  0215                     	;# 
   614  0216                     	;# 
   615  0216                     	;# 
   616  0217                     	;# 
   617  0217                     	;# 
   618  0391                     	;# 
   619  0392                     	;# 
   620  0393                     	;# 
   621  0394                     	;# 
   622  0395                     	;# 
   623  0396                     	;# 
   624  039A                     	;# 
   625  039B                     	;# 
   626  0611                     	;# 
   627  0612                     	;# 
   628  0613                     	;# 
   629  0613                     	;# 
   630  0614                     	;# 
   631  0615                     	;# 
   632  0616                     	;# 
   633  0616                     	;# 
   634  0691                     	;# 
   635  0692                     	;# 
   636  0693                     	;# 
   637  0694                     	;# 
   638  0695                     	;# 
   639  0E8E                     	;# 
   640  0E8F                     	;# 
   641  0E90                     	;# 
   642  0E91                     	;# 
   643  0E92                     	;# 
   644  0E93                     	;# 
   645  0E94                     	;# 
   646  0E94                     	;# 
   647  0E95                     	;# 
   648  0E96                     	;# 
   649  0E97                     	;# 
   650  0E98                     	;# 
   651  0E99                     	;# 
   652  0E9A                     	;# 
   653  0E9B                     	;# 
   654  0E9C                     	;# 
   655  0E9D                     	;# 
   656  0E9E                     	;# 
   657  0E9F                     	;# 
   658  0FE4                     	;# 
   659  0FE5                     	;# 
   660  0FE6                     	;# 
   661  0FE7                     	;# 
   662  0FE8                     	;# 
   663  0FE9                     	;# 
   664  0FEA                     	;# 
   665  0FEB                     	;# 
   666  0FED                     	;# 
   667  0FEE                     	;# 
   668  0FEF                     	;# 
   669  0000                     	;# 
   670  0001                     	;# 
   671  0002                     	;# 
   672  0003                     	;# 
   673  0004                     	;# 
   674  0005                     	;# 
   675  0006                     	;# 
   676  0007                     	;# 
   677  0008                     	;# 
   678  0009                     	;# 
   679  000A                     	;# 
   680  000B                     	;# 
   681  000C                     	;# 
   682  000D                     	;# 
   683  000E                     	;# 
   684  0011                     	;# 
   685  0012                     	;# 
   686  0015                     	;# 
   687  0016                     	;# 
   688  0016                     	;# 
   689  0017                     	;# 
   690  0018                     	;# 
   691  0019                     	;# 
   692  001A                     	;# 
   693  001B                     	;# 
   694  001C                     	;# 
   695  008C                     	;# 
   696  008D                     	;# 
   697  008E                     	;# 
   698  0091                     	;# 
   699  0092                     	;# 
   700  0095                     	;# 
   701  0096                     	;# 
   702  0097                     	;# 
   703  0098                     	;# 
   704  0099                     	;# 
   705  009A                     	;# 
   706  009B                     	;# 
   707  009B                     	;# 
   708  009C                     	;# 
   709  009D                     	;# 
   710  009E                     	;# 
   711  009F                     	;# 
   712  010C                     	;# 
   713  010D                     	;# 
   714  010E                     	;# 
   715  0111                     	;# 
   716  0112                     	;# 
   717  0113                     	;# 
   718  0114                     	;# 
   719  0115                     	;# 
   720  0116                     	;# 
   721  0117                     	;# 
   722  0118                     	;# 
   723  0119                     	;# 
   724  011D                     	;# 
   725  018C                     	;# 
   726  018D                     	;# 
   727  018E                     	;# 
   728  0191                     	;# 
   729  0191                     	;# 
   730  0192                     	;# 
   731  0193                     	;# 
   732  0193                     	;# 
   733  0194                     	;# 
   734  0195                     	;# 
   735  0196                     	;# 
   736  0199                     	;# 
   737  019A                     	;# 
   738  019B                     	;# 
   739  019C                     	;# 
   740  019D                     	;# 
   741  019E                     	;# 
   742  019F                     	;# 
   743  020C                     	;# 
   744  020D                     	;# 
   745  0211                     	;# 
   746  0211                     	;# 
   747  0212                     	;# 
   748  0212                     	;# 
   749  0213                     	;# 
   750  0213                     	;# 
   751  0214                     	;# 
   752  0214                     	;# 
   753  0215                     	;# 
   754  0215                     	;# 
   755  0215                     	;# 
   756  0216                     	;# 
   757  0216                     	;# 
   758  0217                     	;# 
   759  0217                     	;# 
   760  0391                     	;# 
   761  0392                     	;# 
   762  0393                     	;# 
   763  0394                     	;# 
   764  0395                     	;# 
   765  0396                     	;# 
   766  039A                     	;# 
   767  039B                     	;# 
   768  0611                     	;# 
   769  0612                     	;# 
   770  0613                     	;# 
   771  0613                     	;# 
   772  0614                     	;# 
   773  0615                     	;# 
   774  0616                     	;# 
   775  0616                     	;# 
   776  0691                     	;# 
   777  0692                     	;# 
   778  0693                     	;# 
   779  0694                     	;# 
   780  0695                     	;# 
   781  0E8E                     	;# 
   782  0E8F                     	;# 
   783  0E90                     	;# 
   784  0E91                     	;# 
   785  0E92                     	;# 
   786  0E93                     	;# 
   787  0E94                     	;# 
   788  0E94                     	;# 
   789  0E95                     	;# 
   790  0E96                     	;# 
   791  0E97                     	;# 
   792  0E98                     	;# 
   793  0E99                     	;# 
   794  0E9A                     	;# 
   795  0E9B                     	;# 
   796  0E9C                     	;# 
   797  0E9D                     	;# 
   798  0E9E                     	;# 
   799  0E9F                     	;# 
   800  0FE4                     	;# 
   801  0FE5                     	;# 
   802  0FE6                     	;# 
   803  0FE7                     	;# 
   804  0FE8                     	;# 
   805  0FE9                     	;# 
   806  0FEA                     	;# 
   807  0FEB                     	;# 
   808  0FED                     	;# 
   809  0FEE                     	;# 
   810  0FEF                     	;# 
   811  0000                     	;# 
   812  0001                     	;# 
   813  0002                     	;# 
   814  0003                     	;# 
   815  0004                     	;# 
   816  0005                     	;# 
   817  0006                     	;# 
   818  0007                     	;# 
   819  0008                     	;# 
   820  0009                     	;# 
   821  000A                     	;# 
   822  000B                     	;# 
   823  000C                     	;# 
   824  000D                     	;# 
   825  000E                     	;# 
   826  0011                     	;# 
   827  0012                     	;# 
   828  0015                     	;# 
   829  0016                     	;# 
   830  0016                     	;# 
   831  0017                     	;# 
   832  0018                     	;# 
   833  0019                     	;# 
   834  001A                     	;# 
   835  001B                     	;# 
   836  001C                     	;# 
   837  008C                     	;# 
   838  008D                     	;# 
   839  008E                     	;# 
   840  0091                     	;# 
   841  0092                     	;# 
   842  0095                     	;# 
   843  0096                     	;# 
   844  0097                     	;# 
   845  0098                     	;# 
   846  0099                     	;# 
   847  009A                     	;# 
   848  009B                     	;# 
   849  009B                     	;# 
   850  009C                     	;# 
   851  009D                     	;# 
   852  009E                     	;# 
   853  009F                     	;# 
   854  010C                     	;# 
   855  010D                     	;# 
   856  010E                     	;# 
   857  0111                     	;# 
   858  0112                     	;# 
   859  0113                     	;# 
   860  0114                     	;# 
   861  0115                     	;# 
   862  0116                     	;# 
   863  0117                     	;# 
   864  0118                     	;# 
   865  0119                     	;# 
   866  011D                     	;# 
   867  018C                     	;# 
   868  018D                     	;# 
   869  018E                     	;# 
   870  0191                     	;# 
   871  0191                     	;# 
   872  0192                     	;# 
   873  0193                     	;# 
   874  0193                     	;# 
   875  0194                     	;# 
   876  0195                     	;# 
   877  0196                     	;# 
   878  0199                     	;# 
   879  019A                     	;# 
   880  019B                     	;# 
   881  019C                     	;# 
   882  019D                     	;# 
   883  019E                     	;# 
   884  019F                     	;# 
   885  020C                     	;# 
   886  020D                     	;# 
   887  0211                     	;# 
   888  0211                     	;# 
   889  0212                     	;# 
   890  0212                     	;# 
   891  0213                     	;# 
   892  0213                     	;# 
   893  0214                     	;# 
   894  0214                     	;# 
   895  0215                     	;# 
   896  0215                     	;# 
   897  0215                     	;# 
   898  0216                     	;# 
   899  0216                     	;# 
   900  0217                     	;# 
   901  0217                     	;# 
   902  0391                     	;# 
   903  0392                     	;# 
   904  0393                     	;# 
   905  0394                     	;# 
   906  0395                     	;# 
   907  0396                     	;# 
   908  039A                     	;# 
   909  039B                     	;# 
   910  0611                     	;# 
   911  0612                     	;# 
   912  0613                     	;# 
   913  0613                     	;# 
   914  0614                     	;# 
   915  0615                     	;# 
   916  0616                     	;# 
   917  0616                     	;# 
   918  0691                     	;# 
   919  0692                     	;# 
   920  0693                     	;# 
   921  0694                     	;# 
   922  0695                     	;# 
   923  0E8E                     	;# 
   924  0E8F                     	;# 
   925  0E90                     	;# 
   926  0E91                     	;# 
   927  0E92                     	;# 
   928  0E93                     	;# 
   929  0E94                     	;# 
   930  0E94                     	;# 
   931  0E95                     	;# 
   932  0E96                     	;# 
   933  0E97                     	;# 
   934  0E98                     	;# 
   935  0E99                     	;# 
   936  0E9A                     	;# 
   937  0E9B                     	;# 
   938  0E9C                     	;# 
   939  0E9D                     	;# 
   940  0E9E                     	;# 
   941  0E9F                     	;# 
   942  0FE4                     	;# 
   943  0FE5                     	;# 
   944  0FE6                     	;# 
   945  0FE7                     	;# 
   946  0FE8                     	;# 
   947  0FE9                     	;# 
   948  0FEA                     	;# 
   949  0FEB                     	;# 
   950  0FED                     	;# 
   951  0FEE                     	;# 
   952  0FEF                     	;# 
   953  0000                     	;# 
   954  0001                     	;# 
   955  0002                     	;# 
   956  0003                     	;# 
   957  0004                     	;# 
   958  0005                     	;# 
   959  0006                     	;# 
   960  0007                     	;# 
   961  0008                     	;# 
   962  0009                     	;# 
   963  000A                     	;# 
   964  000B                     	;# 
   965  000C                     	;# 
   966  000D                     	;# 
   967  000E                     	;# 
   968  0011                     	;# 
   969  0012                     	;# 
   970  0015                     	;# 
   971  0016                     	;# 
   972  0016                     	;# 
   973  0017                     	;# 
   974  0018                     	;# 
   975  0019                     	;# 
   976  001A                     	;# 
   977  001B                     	;# 
   978  001C                     	;# 
   979  008C                     	;# 
   980  008D                     	;# 
   981  008E                     	;# 
   982  0091                     	;# 
   983  0092                     	;# 
   984  0095                     	;# 
   985  0096                     	;# 
   986  0097                     	;# 
   987  0098                     	;# 
   988  0099                     	;# 
   989  009A                     	;# 
   990  009B                     	;# 
   991  009B                     	;# 
   992  009C                     	;# 
   993  009D                     	;# 
   994  009E                     	;# 
   995  009F                     	;# 
   996  010C                     	;# 
   997  010D                     	;# 
   998  010E                     	;# 
   999  0111                     	;# 
  1000  0112                     	;# 
  1001  0113                     	;# 
  1002  0114                     	;# 
  1003  0115                     	;# 
  1004  0116                     	;# 
  1005  0117                     	;# 
  1006  0118                     	;# 
  1007  0119                     	;# 
  1008  011D                     	;# 
  1009  018C                     	;# 
  1010  018D                     	;# 
  1011  018E                     	;# 
  1012  0191                     	;# 
  1013  0191                     	;# 
  1014  0192                     	;# 
  1015  0193                     	;# 
  1016  0193                     	;# 
  1017  0194                     	;# 
  1018  0195                     	;# 
  1019  0196                     	;# 
  1020  0199                     	;# 
  1021  019A                     	;# 
  1022  019B                     	;# 
  1023  019C                     	;# 
  1024  019D                     	;# 
  1025  019E                     	;# 
  1026  019F                     	;# 
  1027  020C                     	;# 
  1028  020D                     	;# 
  1029  0211                     	;# 
  1030  0211                     	;# 
  1031  0212                     	;# 
  1032  0212                     	;# 
  1033  0213                     	;# 
  1034  0213                     	;# 
  1035  0214                     	;# 
  1036  0214                     	;# 
  1037  0215                     	;# 
  1038  0215                     	;# 
  1039  0215                     	;# 
  1040  0216                     	;# 
  1041  0216                     	;# 
  1042  0217                     	;# 
  1043  0217                     	;# 
  1044  0391                     	;# 
  1045  0392                     	;# 
  1046  0393                     	;# 
  1047  0394                     	;# 
  1048  0395                     	;# 
  1049  0396                     	;# 
  1050  039A                     	;# 
  1051  039B                     	;# 
  1052  0611                     	;# 
  1053  0612                     	;# 
  1054  0613                     	;# 
  1055  0613                     	;# 
  1056  0614                     	;# 
  1057  0615                     	;# 
  1058  0616                     	;# 
  1059  0616                     	;# 
  1060  0691                     	;# 
  1061  0692                     	;# 
  1062  0693                     	;# 
  1063  0694                     	;# 
  1064  0695                     	;# 
  1065  0E8E                     	;# 
  1066  0E8F                     	;# 
  1067  0E90                     	;# 
  1068  0E91                     	;# 
  1069  0E92                     	;# 
  1070  0E93                     	;# 
  1071  0E94                     	;# 
  1072  0E94                     	;# 
  1073  0E95                     	;# 
  1074  0E96                     	;# 
  1075  0E97                     	;# 
  1076  0E98                     	;# 
  1077  0E99                     	;# 
  1078  0E9A                     	;# 
  1079  0E9B                     	;# 
  1080  0E9C                     	;# 
  1081  0E9D                     	;# 
  1082  0E9E                     	;# 
  1083  0E9F                     	;# 
  1084  0FE4                     	;# 
  1085  0FE5                     	;# 
  1086  0FE6                     	;# 
  1087  0FE7                     	;# 
  1088  0FE8                     	;# 
  1089  0FE9                     	;# 
  1090  0FEA                     	;# 
  1091  0FEB                     	;# 
  1092  0FED                     	;# 
  1093  0FEE                     	;# 
  1094  0FEF                     	;# 
  1095  0000                     	;# 
  1096  0001                     	;# 
  1097  0002                     	;# 
  1098  0003                     	;# 
  1099  0004                     	;# 
  1100  0005                     	;# 
  1101  0006                     	;# 
  1102  0007                     	;# 
  1103  0008                     	;# 
  1104  0009                     	;# 
  1105  000A                     	;# 
  1106  000B                     	;# 
  1107  000C                     	;# 
  1108  000D                     	;# 
  1109  000E                     	;# 
  1110  0011                     	;# 
  1111  0012                     	;# 
  1112  0015                     	;# 
  1113  0016                     	;# 
  1114  0016                     	;# 
  1115  0017                     	;# 
  1116  0018                     	;# 
  1117  0019                     	;# 
  1118  001A                     	;# 
  1119  001B                     	;# 
  1120  001C                     	;# 
  1121  008C                     	;# 
  1122  008D                     	;# 
  1123  008E                     	;# 
  1124  0091                     	;# 
  1125  0092                     	;# 
  1126  0095                     	;# 
  1127  0096                     	;# 
  1128  0097                     	;# 
  1129  0098                     	;# 
  1130  0099                     	;# 
  1131  009A                     	;# 
  1132  009B                     	;# 
  1133  009B                     	;# 
  1134  009C                     	;# 
  1135  009D                     	;# 
  1136  009E                     	;# 
  1137  009F                     	;# 
  1138  010C                     	;# 
  1139  010D                     	;# 
  1140  010E                     	;# 
  1141  0111                     	;# 
  1142  0112                     	;# 
  1143  0113                     	;# 
  1144  0114                     	;# 
  1145  0115                     	;# 
  1146  0116                     	;# 
  1147  0117                     	;# 
  1148  0118                     	;# 
  1149  0119                     	;# 
  1150  011D                     	;# 
  1151  018C                     	;# 
  1152  018D                     	;# 
  1153  018E                     	;# 
  1154  0191                     	;# 
  1155  0191                     	;# 
  1156  0192                     	;# 
  1157  0193                     	;# 
  1158  0193                     	;# 
  1159  0194                     	;# 
  1160  0195                     	;# 
  1161  0196                     	;# 
  1162  0199                     	;# 
  1163  019A                     	;# 
  1164  019B                     	;# 
  1165  019C                     	;# 
  1166  019D                     	;# 
  1167  019E                     	;# 
  1168  019F                     	;# 
  1169  020C                     	;# 
  1170  020D                     	;# 
  1171  0211                     	;# 
  1172  0211                     	;# 
  1173  0212                     	;# 
  1174  0212                     	;# 
  1175  0213                     	;# 
  1176  0213                     	;# 
  1177  0214                     	;# 
  1178  0214                     	;# 
  1179  0215                     	;# 
  1180  0215                     	;# 
  1181  0215                     	;# 
  1182  0216                     	;# 
  1183  0216                     	;# 
  1184  0217                     	;# 
  1185  0217                     	;# 
  1186  0391                     	;# 
  1187  0392                     	;# 
  1188  0393                     	;# 
  1189  0394                     	;# 
  1190  0395                     	;# 
  1191  0396                     	;# 
  1192  039A                     	;# 
  1193  039B                     	;# 
  1194  0611                     	;# 
  1195  0612                     	;# 
  1196  0613                     	;# 
  1197  0613                     	;# 
  1198  0614                     	;# 
  1199  0615                     	;# 
  1200  0616                     	;# 
  1201  0616                     	;# 
  1202  0691                     	;# 
  1203  0692                     	;# 
  1204  0693                     	;# 
  1205  0694                     	;# 
  1206  0695                     	;# 
  1207  0E8E                     	;# 
  1208  0E8F                     	;# 
  1209  0E90                     	;# 
  1210  0E91                     	;# 
  1211  0E92                     	;# 
  1212  0E93                     	;# 
  1213  0E94                     	;# 
  1214  0E94                     	;# 
  1215  0E95                     	;# 
  1216  0E96                     	;# 
  1217  0E97                     	;# 
  1218  0E98                     	;# 
  1219  0E99                     	;# 
  1220  0E9A                     	;# 
  1221  0E9B                     	;# 
  1222  0E9C                     	;# 
  1223  0E9D                     	;# 
  1224  0E9E                     	;# 
  1225  0E9F                     	;# 
  1226  0FE4                     	;# 
  1227  0FE5                     	;# 
  1228  0FE6                     	;# 
  1229  0FE7                     	;# 
  1230  0FE8                     	;# 
  1231  0FE9                     	;# 
  1232  0FEA                     	;# 
  1233  0FEB                     	;# 
  1234  0FED                     	;# 
  1235  0FEE                     	;# 
  1236  0FEF                     	;_WorkQue
  1237                           
  1238                           	psect	idataBANK0
  1239  07FE                     __pidataBANK0:	
  1240                           
  1241                           ;initializer for _HashTime
  1242  07FE  34DD               	retlw	221
  1243                           
  1244                           	psect	idataBANK3
  1245  08B1                     __pidataBANK3:	
  1246                           
  1247                           ;initializer for AsicPreCalc@F3347
  1248  08B1  3498               	retlw	152
  1249  08B2  342F               	retlw	47
  1250  08B3  348A               	retlw	138
  1251  08B4  3442               	retlw	66
  1252  08B5  3491               	retlw	145
  1253  08B6  3444               	retlw	68
  1254  08B7  3437               	retlw	55
  1255  08B8  3471               	retlw	113
  1256  08B9  34CF               	retlw	207
  1257  08BA  34FB               	retlw	251
  1258  08BB  34C0               	retlw	192
  1259  08BC  34B5               	retlw	181
  1260                           
  1261                           ;initializer for _Status
  1262  08BD  3449               	retlw	73
  1263  08BE  3400               	retlw	0
  1264  08BF  3400               	retlw	0
  1265  08C0  3400               	retlw	0
  1266  08C1  3400               	retlw	0
  1267  08C2  3400               	retlw	0
  1268  08C3  3400               	retlw	0
  1269  08C4  3400               	retlw	0
  1270  08C5  3400               	retlw	0
  1271  08C6  3400               	retlw	0
  1272  08C7  3400               	retlw	0
  1273  08C8  3440               	retlw	64
  1274  08C9  3400               	retlw	0
  1275                           
  1276                           ;initializer for _ClockCfg
  1277  08CA  3407               	retlw	7
  1278  08CB  3400               	retlw	0
  1279  08CC  347B               	retlw	123
  1280  08CD  3405               	retlw	5
  1281  08CE  3472               	retlw	114
  1282  08CF  3401               	retlw	1
  1283  08D0  3400               	retlw	0
  1284  08D1  3400               	retlw	0
  1285                           
  1286                           ;initializer for _Cfg
  1287  08D2  345E               	retlw	94
  1288  08D3  3401               	retlw	1
  1289  08D4  348F               	retlw	143
  1290  08D5  3400               	retlw	0
  1291  08D6  3400               	retlw	0
  1292  08D7  3400               	retlw	0
  1293                           
  1294                           	psect	idataBANK7
  1295  1CAC                     __pidataBANK7:	
  1296                           
  1297                           ;initializer for _BankRanges
  1298  1CAC  3400               	retlw	0
  1299  1CAD  3400               	retlw	0
  1300  1CAE  3400               	retlw	0
  1301  1CAF  3400               	retlw	0
  1302  1CB0  3400               	retlw	0
  1303  1CB1  3400               	retlw	0
  1304  1CB2  3400               	retlw	0
  1305  1CB3  3440               	retlw	64
  1306  1CB4  34AA               	retlw	170
  1307  1CB5  34AA               	retlw	170
  1308  1CB6  34AA               	retlw	170
  1309  1CB7  342A               	retlw	42
  1310  1CB8  3400               	retlw	0
  1311  1CB9  3400               	retlw	0
  1312  1CBA  3400               	retlw	0
  1313  1CBB  3420               	retlw	32
  1314  1CBC  3499               	retlw	153
  1315  1CBD  3499               	retlw	153
  1316  1CBE  3499               	retlw	153
  1317  1CBF  3419               	retlw	25
  1318  1CC0  3455               	retlw	85
  1319  1CC1  3455               	retlw	85
  1320  1CC2  3455               	retlw	85
  1321  1CC3  3415               	retlw	21
  1322  1CC4  3492               	retlw	146
  1323  1CC5  3424               	retlw	36
  1324  1CC6  3449               	retlw	73
  1325  1CC7  3412               	retlw	18
  1326  1CC8  3400               	retlw	0
  1327  1CC9  3400               	retlw	0
  1328  1CCA  3400               	retlw	0
  1329  1CCB  3410               	retlw	16
  1330                           
  1331                           	psect	strings
  1332  0800                     __pstrings:	
  1333  0800                     __stringtab:	
  1334  0800  3400               	retlw	0
  1335  0801                     __end_of__stringtab:	
  1336  0801                     _USB_SD_Ptr:	
  1337  0801  34AB               	retlw	(_sd000| (0+32768))& (0+255)
  1338  0802  3405               	retlw	(_sd001| (0+32768))& (0+255)
  1339  0803  3439               	retlw	(_sd002| (0+32768))& (0+255)
  1340  0804                     __end_of_USB_SD_Ptr:	
  1341  0804                     _USB_CD_Ptr:	
  1342  0804  346D               	retlw	(_configDescriptor1| (0+32768))& (0+255)
  1343  0805                     __end_of_USB_CD_Ptr:	
  1344  0805                     _sd001:	
  1345  0805  3434               	retlw	52
  1346  0806  3403               	retlw	3
  1347  0807  344B               	retlw	75
  1348  0808  3400               	retlw	0
  1349  0809  346C               	retlw	108
  1350  080A  3400               	retlw	0
  1351  080B  346F               	retlw	111
  1352  080C  3400               	retlw	0
  1353  080D  346E               	retlw	110
  1354  080E  3400               	retlw	0
  1355  080F  3464               	retlw	100
  1356  0810  3400               	retlw	0
  1357  0811  3469               	retlw	105
  1358  0812  3400               	retlw	0
  1359  0813  346B               	retlw	107
  1360  0814  3400               	retlw	0
  1361  0815  3465               	retlw	101
  1362  0816  3400               	retlw	0
  1363  0817  3420               	retlw	32
  1364  0818  3400               	retlw	0
  1365  0819  3450               	retlw	80
  1366  081A  3400               	retlw	0
  1367  081B  3472               	retlw	114
  1368  081C  3400               	retlw	0
  1369  081D  346F               	retlw	111
  1370  081E  3400               	retlw	0
  1371  081F  346A               	retlw	106
  1372  0820  3400               	retlw	0
  1373  0821  3465               	retlw	101
  1374  0822  3400               	retlw	0
  1375  0823  3463               	retlw	99
  1376  0824  3400               	retlw	0
  1377  0825  3474               	retlw	116
  1378  0826  3400               	retlw	0
  1379  0827  3400               	retlw	0
  1380  0828  3400               	retlw	0
  1381  0829  3400               	retlw	0
  1382  082A  3400               	retlw	0
  1383  082B  3400               	retlw	0
  1384  082C  3400               	retlw	0
  1385  082D  3400               	retlw	0
  1386  082E  3400               	retlw	0
  1387  082F  3400               	retlw	0
  1388  0830  3400               	retlw	0
  1389  0831  3400               	retlw	0
  1390  0832  3400               	retlw	0
  1391  0833  3400               	retlw	0
  1392  0834  3400               	retlw	0
  1393  0835  3400               	retlw	0
  1394  0836  3400               	retlw	0
  1395  0837  3400               	retlw	0
  1396  0838  3400               	retlw	0
  1397  0839                     __end_of_sd001:	
  1398  0839                     _sd002:	
  1399  0839  3434               	retlw	52
  1400  083A  3403               	retlw	3
  1401  083B  344B               	retlw	75
  1402  083C  3400               	retlw	0
  1403  083D  3431               	retlw	49
  1404  083E  3400               	retlw	0
  1405  083F  3436               	retlw	54
  1406  0840  3400               	retlw	0
  1407  0841  3400               	retlw	0
  1408  0842  3400               	retlw	0
  1409  0843  3400               	retlw	0
  1410  0844  3400               	retlw	0
  1411  0845  3400               	retlw	0
  1412  0846  3400               	retlw	0
  1413  0847  3400               	retlw	0
  1414  0848  3400               	retlw	0
  1415  0849  3400               	retlw	0
  1416  084A  3400               	retlw	0
  1417  084B  3400               	retlw	0
  1418  084C  3400               	retlw	0
  1419  084D  3400               	retlw	0
  1420  084E  3400               	retlw	0
  1421  084F  3400               	retlw	0
  1422  0850  3400               	retlw	0
  1423  0851  3400               	retlw	0
  1424  0852  3400               	retlw	0
  1425  0853  3400               	retlw	0
  1426  0854  3400               	retlw	0
  1427  0855  3400               	retlw	0
  1428  0856  3400               	retlw	0
  1429  0857  3400               	retlw	0
  1430  0858  3400               	retlw	0
  1431  0859  3400               	retlw	0
  1432  085A  3400               	retlw	0
  1433  085B  3400               	retlw	0
  1434  085C  3400               	retlw	0
  1435  085D  3400               	retlw	0
  1436  085E  3400               	retlw	0
  1437  085F  3400               	retlw	0
  1438  0860  3400               	retlw	0
  1439  0861  3400               	retlw	0
  1440  0862  3400               	retlw	0
  1441  0863  3400               	retlw	0
  1442  0864  3400               	retlw	0
  1443  0865  3400               	retlw	0
  1444  0866  3400               	retlw	0
  1445  0867  3400               	retlw	0
  1446  0868  3400               	retlw	0
  1447  0869  3400               	retlw	0
  1448  086A  3400               	retlw	0
  1449  086B  3400               	retlw	0
  1450  086C  3400               	retlw	0
  1451  086D                     __end_of_sd002:	
  1452  086D                     _configDescriptor1:	
  1453  086D  3409               	retlw	9
  1454  086E  3402               	retlw	2
  1455  086F  3420               	retlw	32
  1456  0870  3400               	retlw	0
  1457  0871  3401               	retlw	1
  1458  0872  3401               	retlw	1
  1459  0873  3400               	retlw	0
  1460  0874  34C0               	retlw	192
  1461  0875  3432               	retlw	50
  1462  0876  3409               	retlw	9
  1463  0877  3404               	retlw	4
  1464  0878  3400               	retlw	0
  1465  0879  3400               	retlw	0
  1466  087A  3402               	retlw	2
  1467  087B  34FF               	retlw	255
  1468  087C  34FF               	retlw	255
  1469  087D  34FF               	retlw	255
  1470  087E  3400               	retlw	0
  1471  087F  3407               	retlw	7
  1472  0880  3405               	retlw	5
  1473  0881  3401               	retlw	1
  1474  0882  3402               	retlw	2
  1475  0883  3440               	retlw	64
  1476  0884  3400               	retlw	0
  1477  0885  3401               	retlw	1
  1478  0886  3407               	retlw	7
  1479  0887  3405               	retlw	5
  1480  0888  3481               	retlw	129
  1481  0889  3402               	retlw	2
  1482  088A  3440               	retlw	64
  1483  088B  3400               	retlw	0
  1484  088C  3401               	retlw	1
  1485  088D                     __end_of_configDescriptor1:	
  1486  088D                     _device_dsc:	
  1487  088D  3412               	retlw	18
  1488  088E  3401               	retlw	1
  1489  088F  3400               	retlw	0
  1490  0890  3402               	retlw	2
  1491  0891  3400               	retlw	0
  1492  0892  3400               	retlw	0
  1493  0893  3400               	retlw	0
  1494  0894  3408               	retlw	8
  1495  0895  34D8               	retlw	216
  1496  0896  3404               	retlw	4
  1497  0897  340A               	retlw	10
  1498  0898  34F6               	retlw	246
  1499  0899  3400               	retlw	0
  1500  089A  3400               	retlw	0
  1501  089B  3401               	retlw	1
  1502  089C  3402               	retlw	2
  1503  089D  3400               	retlw	0
  1504  089E  3401               	retlw	1
  1505  089F                     __end_of_device_dsc:	
  1506  089F                     _ID:	
  1507  089F  3410               	retlw	16
  1508  08A0  344B               	retlw	75
  1509  08A1  3431               	retlw	49
  1510  08A2  3436               	retlw	54
  1511  08A3  3400               	retlw	0
  1512  08A4  3400               	retlw	0
  1513  08A5  3400               	retlw	0
  1514  08A6  3400               	retlw	0
  1515  08A7  34EF               	retlw	239
  1516  08A8  34BE               	retlw	190
  1517  08A9  34AD               	retlw	173
  1518  08AA  34DE               	retlw	222
  1519  08AB                     __end_of_ID:	
  1520  08AB                     _sd000:	
  1521  08AB  3404               	retlw	4
  1522  08AC  3403               	retlw	3
  1523  08AD  3409               	retlw	9
  1524  08AE  3404               	retlw	4
  1525  08AF                     __end_of_sd000:	
  1526                           
  1527                           	psect	nvBANK3
  1528  01E3                     __pnvBANK3:	
  1529  01E3                     _FanLevel:	
  1530  01E3                     	ds	1
  1531  01E4                     _TempTarget:	
  1532  01E4                     	ds	1
  1533  01E5                     _BankSize:	
  1534  01E5                     	ds	1
  1535  000B                     _INTCONbits	set	11
  1536  0012                     _PIR2bits	set	18
  1537  001B                     _PR2	set	27
  1538  0018                     _T1CONbits	set	24
  1539  0019                     _T1GCONbits	set	25
  1540  001C                     _T2CONbits	set	28
  1541  0015                     _TMR0	set	21
  1542  0017                     _TMR1H	set	23
  1543  0016                     _TMR1L	set	22
  1544  005F                     _GIE	set	95
  1545  008D                     _RCIF	set	141
  1546  008B                     _SSP1IF	set	139
  1547  00CC                     _T1GSPM	set	204
  1548  005A                     _TMR0IF	set	90
  1549  00CF                     _TMR1GE	set	207
  1550  008F                     _TMR1GIF	set	143
  1551  0088                     _TMR1IF	set	136
  1552  00C0                     _TMR1ON	set	192
  1553  0089                     _TMR2IF	set	137
  1554  00E2                     _TMR2ON	set	226
  1555  009D                     _ADCON0bits	set	157
  1556  009E                     _ADCON1bits	set	158
  1557  009F                     _ADCON2bits	set	159
  1558  009C                     _ADRESH	set	156
  1559  0095                     _OPTION_REGbits	set	149
  1560  0099                     _OSCCON	set	153
  1561  0098                     _OSCTUNE	set	152
  1562  0092                     _PIE2bits	set	146
  1563  008C                     _TRISAbits	set	140
  1564  008D                     _TRISBbits	set	141
  1565  008E                     _TRISCbits	set	142
  1566  04AD                     _TMR0CS	set	1197
  1567  048F                     _TMR1GIE	set	1167
  1568  0488                     _TMR1IE	set	1160
  1569  010C                     _LATAbits	set	268
  1570  010E                     _LATC	set	270
  1571  010E                     _LATCbits	set	270
  1572  018C                     _ANSELA	set	396
  1573  018D                     _ANSELB	set	397
  1574  018D                     _ANSELBbits	set	397
  1575  018E                     _ANSELC	set	398
  1576  019F                     _BAUDCONbits	set	415
  1577  0199                     _RCREG	set	409
  1578  019D                     _RCSTAbits	set	413
  1579  019E                     _TXSTAbits	set	414
  1580  0212                     _SSPADD	set	530
  1581  0211                     _SSPBUF	set	529
  1582  0215                     _SSPCON1bits	set	533
  1583  0216                     _SSPCON2bits	set	534
  1584  0217                     _SSPCON3bits	set	535
  1585  0214                     _SSPSTATbits	set	532
  1586  10AD                     _SSP1EN	set	4269
  1587  039B                     _ACTCON	set	923
  1588  0396                     _IOCBF	set	918
  1589  0394                     _IOCBPbits	set	916
  1590  1C9B                     _IOCAF3	set	7323
  1591  0613                     _PWM1CON	set	1555
  1592  0612                     _PWM1DCH	set	1554
  1593  0611                     _PWM1DCL	set	1553
  1594  309E                     _PWM1OE	set	12446
  1595  0E96                     _UADDR	set	3734
  1596  0E91                     _UCFG	set	3729
  1597  0E8E                     _UCON	set	3726
  1598  0E8E                     _UCONbits	set	3726
  1599  0E97                     _UEIE	set	3735
  1600  0E93                     _UEIR	set	3731
  1601  0E98                     _UEP0bits	set	3736
  1602  0E92                     _UIE	set	3730
  1603  0E92                     _UIEbits	set	3730
  1604  0E90                     _UIR	set	3728
  1605  0E90                     _UIRbits	set	3728
  1606  0E8F                     _USTAT	set	3727
  1607  0E98                     _UEP0	set	3736
  1608  0E99                     _UEP1	set	3737
  1609                           
  1610                           ; #config settings
  1611  0000                     
  1612                           	psect	cinit
  1613  1241                     start_initialization:	
  1614  1241                     __initialization:		;BIGRAM
  1615                           
  1616                           ; Clear objects allocated to BIGRAM
  1617  1241  303C               	movlw	low (0+9020)
  1618  1242  0084               	movwf	4
  1619  1243  3023               	movlw	high (0+9020)
  1620  1244  0085               	movwf	5
  1621  1245  30B4               	movlw	180
  1622  1246  00FE               	movwf	btemp
  1623  1247  3000               	movlw	0
  1624  1248  00FF               	movwf	btemp+1
  1625  1249  319B  2374  3192   	fcall	clear_ram0
  1626                           
  1627                           ; Clear objects allocated to BANK0
  1628  124C  3062               	movlw	low __pbssBANK0
  1629  124D  0084               	movwf	4
  1630  124E  3000               	movlw	high __pbssBANK0
  1631  124F  0085               	movwf	5
  1632  1250  300D               	movlw	13
  1633  1251  00FE               	movwf	btemp
  1634  1252  3000               	movlw	0
  1635  1253  00FF               	movwf	btemp+1
  1636  1254  319B  2374  3192   	fcall	clear_ram0
  1637                           
  1638                           ; Clear objects allocated to BANK1
  1639  1257  30E0               	movlw	low __pbssBANK1
  1640  1258  0084               	movwf	4
  1641  1259  3000               	movlw	high __pbssBANK1
  1642  125A  0085               	movwf	5
  1643  125B  3010               	movlw	16
  1644  125C  00FE               	movwf	btemp
  1645  125D  3000               	movlw	0
  1646  125E  00FF               	movwf	btemp+1
  1647  125F  319B  2374  3192   	fcall	clear_ram0
  1648                           
  1649                           ; Clear objects allocated to BANK2
  1650  1262  3059               	movlw	low __pbssBANK2
  1651  1263  0084               	movwf	4
  1652  1264  3001               	movlw	high __pbssBANK2
  1653  1265  0085               	movwf	5
  1654  1266  3017               	movlw	23
  1655  1267  00FE               	movwf	btemp
  1656  1268  3000               	movlw	0
  1657  1269  00FF               	movwf	btemp+1
  1658  126A  319B  2374  3192   	fcall	clear_ram0
  1659                           
  1660                           ; Clear objects allocated to BANK3
  1661  126D  30C7               	movlw	low __pbssBANK3
  1662  126E  0084               	movwf	4
  1663  126F  3001               	movlw	high __pbssBANK3
  1664  1270  0085               	movwf	5
  1665  1271  301C               	movlw	28
  1666  1272  00FE               	movwf	btemp
  1667  1273  3000               	movlw	0
  1668  1274  00FF               	movwf	btemp+1
  1669  1275  319B  2374  3192   	fcall	clear_ram0
  1670                           
  1671                           ; Clear objects allocated to BANK4
  1672  1278  3060               	movlw	low __pbssBANK4
  1673  1279  0084               	movwf	4
  1674  127A  3002               	movlw	high __pbssBANK4
  1675  127B  0085               	movwf	5
  1676  127C  3010               	movlw	16
  1677  127D  00FE               	movwf	btemp
  1678  127E  3000               	movlw	0
  1679  127F  00FF               	movwf	btemp+1
  1680  1280  319B  2374  3192   	fcall	clear_ram0
  1681                           
  1682                           ; Clear objects allocated to BANK6
  1683  1283  3020               	movlw	low __pbssBANK6
  1684  1284  0084               	movwf	4
  1685  1285  3003               	movlw	high __pbssBANK6
  1686  1286  0085               	movwf	5
  1687  1287  3038               	movlw	56
  1688  1288  00FE               	movwf	btemp
  1689  1289  3000               	movlw	0
  1690  128A  00FF               	movwf	btemp+1
  1691  128B  319B  2374  3192   	fcall	clear_ram0
  1692                           
  1693                           ; Initialize objects allocated to BANK0
  1694  128E  3187  27FE  3192   	fcall	__pidataBANK0	;fetch initializer
  1695  1291  00EF               	movwf	__pdataBANK0& (0+127)
  1696                           
  1697                           ; Initialize objects allocated to BANK3
  1698  1292  30B1               	movlw	low __pidataBANK3
  1699  1293  0084               	movwf	4
  1700  1294  3088               	movlw	(high __pidataBANK3)| (0+128)
  1701  1295  0085               	movwf	5
  1702  1296  30A0               	movlw	low __pdataBANK3
  1703  1297  0086               	movwf	6
  1704  1298  3001               	movlw	high __pdataBANK3
  1705  1299  0087               	movwf	7
  1706  129A  3000               	movlw	0
  1707  129B  00FF               	movwf	btemp+1
  1708  129C  3027               	movlw	39
  1709  129D  319B  2368  3192   	fcall	init_ram
  1710                           
  1711                           ; Initialize objects allocated to BANK7
  1712  12A0  30AC               	movlw	low __pidataBANK7
  1713  12A1  0084               	movwf	4
  1714  12A2  309C               	movlw	(high __pidataBANK7)| (0+128)
  1715  12A3  0085               	movwf	5
  1716  12A4  30A0               	movlw	low __pdataBANK7
  1717  12A5  0086               	movwf	6
  1718  12A6  3003               	movlw	high __pdataBANK7
  1719  12A7  0087               	movwf	7
  1720  12A8  3000               	movlw	0
  1721  12A9  00FF               	movwf	btemp+1
  1722  12AA  3020               	movlw	32
  1723  12AB  319B  2368         	fcall	init_ram
  1724  12AD                     end_of_initialization:	
  1725                           ;End of C runtime variable initialization code
  1726                           
  1727  12AD                     __end_of__initialization:	
  1728  12AD  0020               	movlb	0
  1729  12AE  319B  2BF5         	ljmp	_main	;jump to C main() function
  1730                           
  1731                           	psect	bssBANK0
  1732  0062                     __pbssBANK0:	
  1733  0062                     _Step:	
  1734  0062                     	ds	2
  1735  0064                     _I2CCmd:	
  1736  0064                     	ds	1
  1737  0065                     _I2CCount:	
  1738  0065                     	ds	1
  1739  0066                     _I2CState:	
  1740  0066                     	ds	1
  1741  0067                     _ResultPos:	
  1742  0067                     	ds	1
  1743  0068                     _USBDeferStatusStagePacket:	
  1744  0068                     	ds	1
  1745  0069                     _controlTransferState:	
  1746  0069                     	ds	1
  1747  006A                     _pBDTEntryEP0OutNext:	
  1748  006A                     	ds	1
  1749  006B                     _pDst:	
  1750  006B                     	ds	1
  1751  006C                     _ptr:	
  1752  006C                     	ds	1
  1753  006D                     _shortPacketStatus:	
  1754  006D                     	ds	1
  1755  006E                     _WQX:	
  1756  006E                     	ds	1
  1757                           
  1758                           	psect	dataBANK0
  1759  006F                     __pdataBANK0:	
  1760  006F                     _HashTime:	
  1761  006F                     	ds	1
  1762                           
  1763                           	psect	bssBANK1
  1764  00E0                     __pbssBANK1:	
  1765  00E0                     _pBDTEntryIn:	
  1766  00E0                     	ds	2
  1767  00E2                     _SlaveAddress:	
  1768  00E2                     	ds	1
  1769  00E3                     _USBDeviceState:	
  1770  00E3                     	ds	1
  1771  00E4                     _WorkNow:	
  1772  00E4                     	ds	1
  1773  00E5                     _endpoint_number:	
  1774  00E5                     	ds	1
  1775  00E6                     _pBDTEntryEP0OutCurrent:	
  1776  00E6                     	ds	1
  1777  00E7                     _inPipes:	
  1778  00E7                     	ds	5
  1779  00EC                     _USBActiveConfiguration:	
  1780  00EC                     	ds	1
  1781  00ED                     _USBAlternateInterface:	
  1782  00ED                     	ds	1
  1783  00EE                     _USTATcopy:	
  1784  00EE                     	ds	1
  1785  00EF                     _WQI:	
  1786  00EF                     	ds	1
  1787                           
  1788                           	psect	bssBANK2
  1789  0159                     __pbssBANK2:	
  1790  0159                     _pBDTEntryOut:	
  1791  0159                     	ds	2
  1792  015B                     _send32_data:	
  1793  015B                     	ds	2
  1794  015D                     _BothEP0OutUOWNsSet:	
  1795  015D                     	ds	1
  1796  015E                     _I2CAddr:	
  1797  015E                     	ds	1
  1798  015F                     _I2CInBuf:	
  1799  015F                     	ds	1
  1800  0160                     _LastTemp:	
  1801  0160                     	ds	1
  1802  0161                     _RemoteWakeup:	
  1803  0161                     	ds	1
  1804  0162                     _ResultQC:	
  1805  0162                     	ds	1
  1806  0163                     _SlowTick:	
  1807  0163                     	ds	1
  1808  0164                     _TimeOut:	
  1809  0164                     	ds	1
  1810  0165                     _USBBusIsSuspended:	
  1811  0165                     	ds	1
  1812  0166                     _USBDeferINDataStagePackets:	
  1813  0166                     	ds	1
  1814  0167                     _USBDeferOUTDataStagePackets:	
  1815  0167                     	ds	1
  1816  0168                     _USBGenericInHandle:	
  1817  0168                     	ds	1
  1818  0169                     _USBGenericOutHandle:	
  1819  0169                     	ds	1
  1820  016A                     _USBStatusStageEnabledFlag1:	
  1821  016A                     	ds	1
  1822  016B                     _USBStatusStageEnabledFlag2:	
  1823  016B                     	ds	1
  1824  016C                     _USBStatusStageTimeoutCounter:	
  1825  016C                     	ds	1
  1826  016D                     _last_bit0:	
  1827  016D                     	ds	1
  1828  016E                     _last_bit1:	
  1829  016E                     	ds	1
  1830  016F                     _send32_count:	
  1831  016F                     	ds	1
  1832                           
  1833                           	psect	bssBANK3
  1834  01C7                     __pbssBANK3:	
  1835  01C7                     _outPipes:	
  1836  01C7                     	ds	6
  1837  01CD                     USBCBSendResume@delay_count:	
  1838  01CD                     	ds	2
  1839  01CF                     _LastError:	
  1840  01CF                     	ds	2
  1841  01D1                     _ep_data_in:	
  1842  01D1                     	ds	2
  1843  01D3                     _ep_data_out:	
  1844  01D3                     	ds	2
  1845  01D5                     _ResultQue:	
  1846  01D5                     	ds	12
  1847  01E1                     _Error:	
  1848  01E1                     	ds	2
  1849                           
  1850                           	psect	dataBANK3
  1851  01A0                     __pdataBANK3:	
  1852  01A0                     AsicPreCalc@F3347:	
  1853  01A0                     	ds	12
  1854  01AC                     _Status:	
  1855  01AC                     	ds	13
  1856  01B9                     _ClockCfg:	
  1857  01B9                     	ds	8
  1858  01C1                     _Cfg:	
  1859  01C1                     	ds	6
  1860                           
  1861                           	psect	bssBANK4
  1862  0260                     __pbssBANK4:	
  1863  0260                     _buf:	
  1864  0260                     	ds	16
  1865                           
  1866                           	psect	bssBANK6
  1867  0320                     __pbssBANK6:	
  1868  0320                     _NonceRanges:	
  1869  0320                     	ds	32
  1870  0340                     _PrecalcHashes:	
  1871  0340                     	ds	24
  1872                           
  1873                           	psect	dataBANK7
  1874  03A0                     __pdataBANK7:	
  1875  03A0                     _BankRanges:	
  1876  03A0                     	ds	32
  1877                           
  1878                           	psect	clrtext
  1879  1B74                     clear_ram0:	
  1880                           ;	Called with FSR0 containing the base address, and
  1881                           ;	btemp/btemp+1 has the size to clear
  1882                           
  1883  1B74  0064               	clrwdt	;clear the watchdog before getting into this loop
  1884  1B75                     clrloop0:	
  1885  1B75  0180               	clrf	0	;clear RAM location pointed to by FSR
  1886  1B76  3101               	addfsr 0,1
  1887  1B77  3001               	movlw	1
  1888  1B78  02FE               	subwf	126,f
  1889  1B79  3000               	movlw	0
  1890  1B7A  3BFF               	subwfb	127,f
  1891  1B7B  087F               	movf	127,w
  1892  1B7C  047E               	iorwf	126,w
  1893  1B7D  1903               	btfsc	3,2
  1894  1B7E  3400               	retlw	0	;all done for this memory range, return
  1895  1B7F  2B75               	goto	clrloop0	;have we reached the end yet?
  1896                           
  1897                           	psect	inittext
  1898  1B68                     init_ram:	
  1899  1B68  00FE               	movwf	126
  1900  1B69                     initloop:	
  1901  1B69  0012               	moviw fsr0++
  1902  1B6A  001E               	movwi fsr1++
  1903  1B6B  3001               	movlw	1
  1904  1B6C  02FE               	subwf	126,f
  1905  1B6D  3000               	movlw	0
  1906  1B6E  3BFF               	subwfb	127,f
  1907  1B6F  087F               	movf	127,w
  1908  1B70  047E               	iorwf	126,w
  1909  1B71  1903               	btfsc	3,2
  1910  1B72  3400               	retlw	0
  1911  1B73  2B69               	goto	initloop
  1912                           
  1913                           	psect	cstackBANK2
  1914  0120                     __pcstackBANK2:	
  1915  0120                     AsicPreCalc@K:	
  1916                           
  1917                           ; 12 bytes @ 0x0
  1918  0120                     	ds	12
  1919  012C                     AsicPreCalc@m:	
  1920                           
  1921                           ; 32 bytes @ 0xC
  1922  012C                     	ds	32
  1923  014C                     AsicPreCalc@z:	
  1924                           
  1925                           ; 4 bytes @ 0x2C
  1926  014C                     	ds	4
  1927  0150                     AsicPreCalc@y:	
  1928                           
  1929                           ; 4 bytes @ 0x30
  1930  0150                     	ds	4
  1931  0154                     AsicPreCalc@x:	
  1932                           
  1933                           ; 4 bytes @ 0x34
  1934  0154                     	ds	4
  1935  0158                     AsicPreCalc@n:	
  1936                           
  1937                           ; 1 bytes @ 0x38
  1938  0158                     	ds	1
  1939                           
  1940                           	psect	cstackBANK1
  1941  00A0                     __pcstackBANK1:	
  1942  00A0                     ??_USBConfigureEndpoint:	
  1943  00A0                     ??_memset:	
  1944                           ; 0 bytes @ 0x0
  1945                           
  1946  00A0                     ??_USBCtrlTrfInHandler:	
  1947                           ; 0 bytes @ 0x0
  1948                           
  1949  00A0                     ??_USBCtrlEPAllowDataStage:	
  1950                           ; 0 bytes @ 0x0
  1951                           
  1952  00A0                     ??___awdiv:	
  1953                           ; 0 bytes @ 0x0
  1954                           
  1955  00A0                     ??___lwdiv:	
  1956                           ; 0 bytes @ 0x0
  1957                           
  1958  00A0                     ?_USBTransferOnePacket:	
  1959                           ; 0 bytes @ 0x0
  1960                           
  1961  00A0                     ?___ftpack:	
  1962                           ; 1 bytes @ 0x0
  1963                           
  1964  00A0                     ?_rotate:	
  1965                           ; 3 bytes @ 0x0
  1966                           
  1967  00A0                     USBTransferOnePacket@dir:	
  1968                           ; 4 bytes @ 0x0
  1969                           
  1970  00A0                     USBCtrlTrfRxService@i:	
  1971                           ; 1 bytes @ 0x0
  1972                           
  1973  00A0                     USBDeviceInit@p:	
  1974                           ; 1 bytes @ 0x0
  1975                           
  1976  00A0                     ___wmul@product:	
  1977                           ; 2 bytes @ 0x0
  1978                           
  1979  00A0                     ___ftpack@arg:	
  1980                           ; 2 bytes @ 0x0
  1981                           
  1982  00A0                     rotate@x:	
  1983                           ; 3 bytes @ 0x0
  1984                           
  1985                           
  1986                           ; 4 bytes @ 0x0
  1987  00A0                     	ds	1
  1988  00A1                     USBTransferOnePacket@data:	
  1989  00A1                     USBCtrlTrfRxService@byteToRead:	
  1990                           ; 1 bytes @ 0x1
  1991                           
  1992  00A1                     ___awdiv@counter:	
  1993                           ; 1 bytes @ 0x1
  1994                           
  1995  00A1                     memset@p1:	
  1996                           ; 1 bytes @ 0x1
  1997                           
  1998  00A1                     ___lwdiv@quotient:	
  1999                           ; 1 bytes @ 0x1
  2000                           
  2001                           
  2002                           ; 2 bytes @ 0x1
  2003  00A1                     	ds	1
  2004  00A2                     ??_USBCtrlTrfOutHandler:	
  2005  00A2                     ?_SendCmdReply:	
  2006                           ; 0 bytes @ 0x2
  2007                           
  2008  00A2                     ??_USBCtrlEPServiceComplete:	
  2009                           ; 0 bytes @ 0x2
  2010                           
  2011  00A2                     ?_SendAsicData:	
  2012                           ; 0 bytes @ 0x2
  2013                           
  2014  00A2                     USBDeviceInit@i_718:	
  2015                           ; 0 bytes @ 0x2
  2016                           
  2017  00A2                     USBTransferOnePacket@len:	
  2018                           ; 1 bytes @ 0x2
  2019                           
  2020  00A2                     ___awdiv@sign:	
  2021                           ; 1 bytes @ 0x2
  2022                           
  2023  00A2                     memset@p:	
  2024                           ; 1 bytes @ 0x2
  2025                           
  2026  00A2                     SendAsicData@work:	
  2027                           ; 1 bytes @ 0x2
  2028                           
  2029  00A2                     SendCmdReply@cmd:	
  2030                           ; 2 bytes @ 0x2
  2031                           
  2032                           
  2033                           ; 2 bytes @ 0x2
  2034  00A2                     	ds	1
  2035  00A3                     ??_USBTransferOnePacket:	
  2036  00A3                     USBDeviceInit@i:	
  2037                           ; 0 bytes @ 0x3
  2038                           
  2039  00A3                     ___ftpack@exp:	
  2040                           ; 1 bytes @ 0x3
  2041                           
  2042  00A3                     ___lwdiv@counter:	
  2043                           ; 1 bytes @ 0x3
  2044                           
  2045  00A3                     ___awdiv@quotient:	
  2046                           ; 1 bytes @ 0x3
  2047                           
  2048                           
  2049                           ; 2 bytes @ 0x3
  2050  00A3                     	ds	1
  2051  00A4                     ??_USBEnableEndpoint:	
  2052  00A4                     ??_SendAsicData:	
  2053                           ; 0 bytes @ 0x4
  2054                           
  2055  00A4                     rotate@y:	
  2056                           ; 0 bytes @ 0x4
  2057                           
  2058  00A4                     ___ftpack@sign:	
  2059                           ; 1 bytes @ 0x4
  2060                           
  2061  00A4                     SendCmdReply@data:	
  2062                           ; 1 bytes @ 0x4
  2063                           
  2064                           
  2065                           ; 2 bytes @ 0x4
  2066  00A4                     	ds	1
  2067  00A5                     ??_rotate:	
  2068  00A5                     ??_DetectAsics:	
  2069                           ; 0 bytes @ 0x5
  2070                           
  2071  00A5                     ?___awtoft:	
  2072                           ; 0 bytes @ 0x5
  2073                           
  2074  00A5                     USBTransferOnePacket@ep:	
  2075                           ; 3 bytes @ 0x5
  2076                           
  2077  00A5                     ___awtoft@c:	
  2078                           ; 1 bytes @ 0x5
  2079                           
  2080                           
  2081                           ; 2 bytes @ 0x5
  2082  00A5                     	ds	1
  2083  00A6                     USBTransferOnePacket@handle:	
  2084  00A6                     SendCmdReply@count:	
  2085                           ; 1 bytes @ 0x6
  2086                           
  2087  00A6                     USBEnableEndpoint@p:	
  2088                           ; 1 bytes @ 0x6
  2089                           
  2090                           
  2091                           ; 2 bytes @ 0x6
  2092  00A6                     	ds	1
  2093  00A7                     ??_SendCmdReply:	
  2094                           
  2095                           ; 0 bytes @ 0x7
  2096  00A7                     	ds	1
  2097  00A8                     ??___awtoft:	
  2098  00A8                     USBEnableEndpoint@ep:	
  2099                           ; 0 bytes @ 0x8
  2100                           
  2101                           
  2102                           ; 1 bytes @ 0x8
  2103  00A8                     	ds	1
  2104  00A9                     ??_USBCBInitEP:	
  2105                           
  2106                           ; 0 bytes @ 0x9
  2107  00A9                     	ds	1
  2108  00AA                     ?___ftmul:	
  2109  00AA                     ___ftmul@f1:	
  2110                           ; 3 bytes @ 0xA
  2111                           
  2112                           
  2113                           ; 3 bytes @ 0xA
  2114  00AA                     	ds	2
  2115  00AC                     ?_USER_USB_CALLBACK_EVENT_HANDLER:	
  2116  00AC                     USER_USB_CALLBACK_EVENT_HANDLER@event:	
  2117                           ; 1 bytes @ 0xC
  2118                           
  2119  00AC                     _DetectAsics$2873:	
  2120                           ; 2 bytes @ 0xC
  2121                           
  2122                           
  2123                           ; 2 bytes @ 0xC
  2124  00AC                     	ds	1
  2125  00AD                     ?_AsicPreCalc:	
  2126  00AD                     AsicPreCalc@work:	
  2127                           ; 0 bytes @ 0xD
  2128                           
  2129  00AD                     ___ftmul@f2:	
  2130                           ; 2 bytes @ 0xD
  2131                           
  2132                           
  2133                           ; 3 bytes @ 0xD
  2134  00AD                     	ds	1
  2135  00AE                     DetectAsics@x:	
  2136  00AE                     USER_USB_CALLBACK_EVENT_HANDLER@pdata:	
  2137                           ; 1 bytes @ 0xE
  2138                           
  2139                           
  2140                           ; 1 bytes @ 0xE
  2141  00AE                     	ds	1
  2142  00AF                     ??_AsicPreCalc:	
  2143  00AF                     SendCmdReply@n:	
  2144                           ; 0 bytes @ 0xF
  2145                           
  2146  00AF                     USER_USB_CALLBACK_EVENT_HANDLER@size:	
  2147                           ; 1 bytes @ 0xF
  2148                           
  2149                           
  2150                           ; 2 bytes @ 0xF
  2151  00AF                     	ds	1
  2152  00B0                     ??___ftmul:	
  2153                           
  2154                           ; 0 bytes @ 0x10
  2155  00B0                     	ds	1
  2156  00B1                     ??_USBWakeFromSuspend:	
  2157  00B1                     ??_USBSuspend:	
  2158                           ; 0 bytes @ 0x11
  2159                           
  2160  00B1                     ??_USBStdFeatureReqHandler:	
  2161                           ; 0 bytes @ 0x11
  2162                           
  2163  00B1                     ??_USBStdSetCfgHandler:	
  2164                           ; 0 bytes @ 0x11
  2165                           
  2166                           
  2167                           ; 0 bytes @ 0x11
  2168  00B1                     	ds	1
  2169  00B2                     USBStdSetCfgHandler@p:	
  2170                           
  2171                           ; 2 bytes @ 0x12
  2172  00B2                     	ds	1
  2173  00B3                     USBStdFeatureReqHandler@pUEP:	
  2174                           
  2175                           ; 2 bytes @ 0x13
  2176  00B3                     	ds	1
  2177  00B4                     USBStdSetCfgHandler@i_1089:	
  2178  00B4                     ___ftmul@exp:	
  2179                           ; 1 bytes @ 0x14
  2180                           
  2181                           
  2182                           ; 1 bytes @ 0x14
  2183  00B4                     	ds	1
  2184  00B5                     USBStdSetCfgHandler@i:	
  2185  00B5                     USBStdFeatureReqHandler@current_ep_data:	
  2186                           ; 1 bytes @ 0x15
  2187                           
  2188  00B5                     ___ftmul@f3_as_product:	
  2189                           ; 1 bytes @ 0x15
  2190                           
  2191                           
  2192                           ; 3 bytes @ 0x15
  2193  00B5                     	ds	1
  2194  00B6                     USBStdFeatureReqHandler@p:	
  2195                           
  2196                           ; 1 bytes @ 0x16
  2197  00B6                     	ds	1
  2198  00B7                     ??_USBCheckStdRequest:	
  2199                           
  2200                           ; 0 bytes @ 0x17
  2201  00B7                     	ds	1
  2202  00B8                     ??_USBCtrlTrfSetupHandler:	
  2203  00B8                     ___ftmul@cntr:	
  2204                           ; 0 bytes @ 0x18
  2205                           
  2206                           
  2207                           ; 1 bytes @ 0x18
  2208  00B8                     	ds	1
  2209  00B9                     ??_USBCtrlEPService:	
  2210  00B9                     ??_AsicPushWork:	
  2211                           ; 0 bytes @ 0x19
  2212                           
  2213  00B9                     ___ftmul@sign:	
  2214                           ; 0 bytes @ 0x19
  2215                           
  2216                           
  2217                           ; 1 bytes @ 0x19
  2218  00B9                     	ds	1
  2219  00BA                     ?___ftneg:	
  2220  00BA                     ___ftneg@f1:	
  2221                           ; 3 bytes @ 0x1A
  2222                           
  2223                           
  2224                           ; 3 bytes @ 0x1A
  2225  00BA                     	ds	2
  2226  00BC                     USBCtrlEPService@setup_cnt:	
  2227                           
  2228                           ; 1 bytes @ 0x1C
  2229  00BC                     	ds	1
  2230  00BD                     ??_USBDeviceTasks:	
  2231  00BD                     ?___ftadd:	
  2232                           ; 0 bytes @ 0x1D
  2233                           
  2234  00BD                     ___ftadd@f1:	
  2235                           ; 3 bytes @ 0x1D
  2236                           
  2237                           
  2238                           ; 3 bytes @ 0x1D
  2239  00BD                     	ds	1
  2240  00BE                     ??_ProcessCmd:	
  2241                           
  2242                           ; 0 bytes @ 0x1E
  2243  00BE                     	ds	1
  2244  00BF                     USBDeviceTasks@i:	
  2245                           
  2246                           ; 1 bytes @ 0x1F
  2247  00BF                     	ds	1
  2248  00C0                     ___ftadd@f2:	
  2249                           
  2250                           ; 3 bytes @ 0x20
  2251  00C0                     	ds	2
  2252  00C2                     _ProcessCmd$2059:	
  2253                           
  2254                           ; 2 bytes @ 0x22
  2255  00C2                     	ds	1
  2256  00C3                     ??___ftadd:	
  2257                           
  2258                           ; 0 bytes @ 0x23
  2259  00C3                     	ds	1
  2260  00C4                     ProcessCmd@cmd:	
  2261                           
  2262                           ; 1 bytes @ 0x24
  2263  00C4                     	ds	1
  2264  00C5                     ??_ProcessIO:	
  2265                           
  2266                           ; 0 bytes @ 0x25
  2267  00C5                     	ds	2
  2268  00C7                     ___ftadd@sign:	
  2269                           
  2270                           ; 1 bytes @ 0x27
  2271  00C7                     	ds	1
  2272  00C8                     ___ftadd@exp2:	
  2273                           
  2274                           ; 1 bytes @ 0x28
  2275  00C8                     	ds	1
  2276  00C9                     ___ftadd@exp1:	
  2277  00C9                     _ProcessIO$2377:	
  2278                           ; 1 bytes @ 0x29
  2279                           
  2280                           
  2281                           ; 2 bytes @ 0x29
  2282  00C9                     	ds	1
  2283  00CA                     ?___fttol:	
  2284  00CA                     ___fttol@f1:	
  2285                           ; 4 bytes @ 0x2A
  2286                           
  2287                           
  2288                           ; 3 bytes @ 0x2A
  2289  00CA                     	ds	1
  2290  00CB                     _ProcessIO$2411:	
  2291                           
  2292                           ; 2 bytes @ 0x2B
  2293  00CB                     	ds	3
  2294  00CE                     ??___fttol:	
  2295                           
  2296                           ; 0 bytes @ 0x2E
  2297  00CE                     	ds	4
  2298  00D2                     ___fttol@sign1:	
  2299                           
  2300                           ; 1 bytes @ 0x32
  2301  00D2                     	ds	1
  2302  00D3                     ___fttol@lval:	
  2303                           
  2304                           ; 4 bytes @ 0x33
  2305  00D3                     	ds	4
  2306  00D7                     ___fttol@exp1:	
  2307                           
  2308                           ; 1 bytes @ 0x37
  2309  00D7                     	ds	1
  2310  00D8                     ??_UpdateFanLevel:	
  2311                           
  2312                           ; 0 bytes @ 0x38
  2313  00D8                     	ds	4
  2314  00DC                     _UpdateFanLevel$2876:	
  2315                           
  2316                           ; 3 bytes @ 0x3C
  2317  00DC                     	ds	3
  2318  00DF                     ??_WorkTick:	
  2319                           
  2320                           ; 0 bytes @ 0x3F
  2321  00DF                     	ds	1
  2322                           
  2323                           	psect	cstackCOMMON
  2324  0070                     __pcstackCOMMON:	
  2325  0070                     ?_USBWakeFromSuspend:	
  2326  0070                     ?_USBSuspend:	
  2327                           ; 0 bytes @ 0x0
  2328                           
  2329  0070                     ?_USBCtrlEPAllowStatusStage:	
  2330                           ; 0 bytes @ 0x0
  2331                           
  2332  0070                     ?_USBStallHandler:	
  2333                           ; 0 bytes @ 0x0
  2334                           
  2335  0070                     ?_USBCtrlEPService:	
  2336                           ; 0 bytes @ 0x0
  2337                           
  2338  0070                     ?_USBCtrlTrfTxService:	
  2339                           ; 0 bytes @ 0x0
  2340                           
  2341  0070                     ?_USBCtrlTrfSetupHandler:	
  2342                           ; 0 bytes @ 0x0
  2343                           
  2344  0070                     ?_USBCtrlTrfOutHandler:	
  2345                           ; 0 bytes @ 0x0
  2346                           
  2347  0070                     ?_USBCtrlTrfInHandler:	
  2348                           ; 0 bytes @ 0x0
  2349                           
  2350  0070                     ?_USBCheckStdRequest:	
  2351                           ; 0 bytes @ 0x0
  2352                           
  2353  0070                     ?_USBStdFeatureReqHandler:	
  2354                           ; 0 bytes @ 0x0
  2355                           
  2356  0070                     ?_Send32:	
  2357                           ; 0 bytes @ 0x0
  2358                           
  2359  0070                     ?_AsicPushWork:	
  2360                           ; 0 bytes @ 0x0
  2361                           
  2362  0070                     ?_UpdateFanLevel:	
  2363                           ; 0 bytes @ 0x0
  2364                           
  2365  0070                     ?_InitializeSystem:	
  2366                           ; 0 bytes @ 0x0
  2367                           
  2368  0070                     ?_ProcessIO:	
  2369                           ; 0 bytes @ 0x0
  2370                           
  2371  0070                     ?_UserInit:	
  2372                           ; 0 bytes @ 0x0
  2373                           
  2374  0070                     ?_USBDeviceInit:	
  2375                           ; 0 bytes @ 0x0
  2376                           
  2377  0070                     ?_USBDeviceTasks:	
  2378                           ; 0 bytes @ 0x0
  2379                           
  2380  0070                     ?_USBCtrlEPAllowDataStage:	
  2381                           ; 0 bytes @ 0x0
  2382                           
  2383  0070                     ?_USBCtrlEPServiceComplete:	
  2384                           ; 0 bytes @ 0x0
  2385                           
  2386  0070                     ?_USBCtrlTrfRxService:	
  2387                           ; 0 bytes @ 0x0
  2388                           
  2389  0070                     ?_USBStdSetCfgHandler:	
  2390                           ; 0 bytes @ 0x0
  2391                           
  2392  0070                     ?_USBStdGetDscHandler:	
  2393                           ; 0 bytes @ 0x0
  2394                           
  2395  0070                     ?_USBStdGetStatusHandler:	
  2396                           ; 0 bytes @ 0x0
  2397                           
  2398  0070                     ?_USBCheckVendorRequest:	
  2399                           ; 0 bytes @ 0x0
  2400                           
  2401  0070                     ?_ProcessCmd:	
  2402                           ; 0 bytes @ 0x0
  2403                           
  2404  0070                     ?_DetectAsics:	
  2405                           ; 0 bytes @ 0x0
  2406                           
  2407  0070                     ?_WorkTick:	
  2408                           ; 0 bytes @ 0x0
  2409                           
  2410  0070                     ?_ResultRx:	
  2411                           ; 0 bytes @ 0x0
  2412                           
  2413  0070                     ?_InitFAN:	
  2414                           ; 0 bytes @ 0x0
  2415                           
  2416  0070                     ?_InitTempSensor:	
  2417                           ; 0 bytes @ 0x0
  2418                           
  2419  0070                     ?_InitWorkTick:	
  2420                           ; 0 bytes @ 0x0
  2421                           
  2422  0070                     ?_InitResultRx:	
  2423                           ; 0 bytes @ 0x0
  2424                           
  2425  0070                     ?_ISRCode:	
  2426                           ; 0 bytes @ 0x0
  2427                           
  2428  0070                     ?_USBCBSuspend:	
  2429                           ; 0 bytes @ 0x0
  2430                           
  2431  0070                     ?_USBCBWakeFromSuspend:	
  2432                           ; 0 bytes @ 0x0
  2433                           
  2434  0070                     ?_USBCB_SOF_Handler:	
  2435                           ; 0 bytes @ 0x0
  2436                           
  2437  0070                     ?_USBCBErrorHandler:	
  2438                           ; 0 bytes @ 0x0
  2439                           
  2440  0070                     ?_USBCBCheckOtherReq:	
  2441                           ; 0 bytes @ 0x0
  2442                           
  2443  0070                     ?_USBCBStdSetDscHandler:	
  2444                           ; 0 bytes @ 0x0
  2445                           
  2446  0070                     ?_USBCBInitEP:	
  2447                           ; 0 bytes @ 0x0
  2448                           
  2449  0070                     ?i1___bmul:	
  2450                           ; 0 bytes @ 0x0
  2451                           
  2452  0070                     ?_main:	
  2453                           ; 1 bytes @ 0x0
  2454                           
  2455  0070                     ?i1___wmul:	
  2456                           ; 2 bytes @ 0x0
  2457                           
  2458  0070                     i1___bmul@multiplicand:	
  2459                           ; 2 bytes @ 0x0
  2460                           
  2461  0070                     i1___wmul@multiplier:	
  2462                           ; 1 bytes @ 0x0
  2463                           
  2464                           
  2465                           ; 2 bytes @ 0x0
  2466  0070                     	ds	1
  2467  0071                     ??i1___bmul:	
  2468                           
  2469                           ; 0 bytes @ 0x1
  2470  0071                     	ds	1
  2471  0072                     i1___bmul@multiplier:	
  2472  0072                     i1___wmul@multiplicand:	
  2473                           ; 1 bytes @ 0x2
  2474                           
  2475                           
  2476                           ; 2 bytes @ 0x2
  2477  0072                     	ds	1
  2478  0073                     i1___bmul@product:	
  2479                           
  2480                           ; 1 bytes @ 0x3
  2481  0073                     	ds	1
  2482  0074                     ??i1___wmul:	
  2483  0074                     i1___wmul@product:	
  2484                           ; 0 bytes @ 0x4
  2485                           
  2486                           
  2487                           ; 2 bytes @ 0x4
  2488  0074                     	ds	2
  2489  0076                     ?i1_SendCmdReply:	
  2490  0076                     i1SendCmdReply@cmd:	
  2491                           ; 0 bytes @ 0x6
  2492                           
  2493                           
  2494                           ; 2 bytes @ 0x6
  2495  0076                     	ds	2
  2496  0078                     i1SendCmdReply@data:	
  2497                           
  2498                           ; 2 bytes @ 0x8
  2499  0078                     	ds	2
  2500  007A                     i1SendCmdReply@count:	
  2501                           
  2502                           ; 1 bytes @ 0xA
  2503  007A                     	ds	1
  2504  007B                     i1SendCmdReply@n:	
  2505                           
  2506                           ; 1 bytes @ 0xB
  2507  007B                     	ds	1
  2508  007C                     _ResultRx$3156:	
  2509                           
  2510                           ; 1 bytes @ 0xC
  2511  007C                     	ds	1
  2512  007D                     _ResultRx$3157:	
  2513                           
  2514                           ; 1 bytes @ 0xD
  2515  007D                     	ds	1
  2516                           
  2517                           	psect	cstackBANK0
  2518  0050                     __pcstackBANK0:	
  2519  0050                     ??i1_SendCmdReply:	
  2520                           
  2521                           ; 0 bytes @ 0x0
  2522  0050                     	ds	8
  2523  0058                     ??_ResultRx:	
  2524                           
  2525                           ; 0 bytes @ 0x8
  2526  0058                     	ds	5
  2527  005D                     ??_ISRCode:	
  2528                           
  2529                           ; 0 bytes @ 0xD
  2530  005D                     	ds	1
  2531  005E                     ??_USBCtrlEPAllowStatusStage:	
  2532  005E                     ??_USBStallHandler:	
  2533                           ; 0 bytes @ 0xE
  2534                           
  2535  005E                     ?_USBConfigureEndpoint:	
  2536                           ; 0 bytes @ 0xE
  2537                           
  2538  005E                     ??_USBCtrlTrfTxService:	
  2539                           ; 0 bytes @ 0xE
  2540                           
  2541  005E                     ??_Send32:	
  2542                           ; 0 bytes @ 0xE
  2543                           
  2544  005E                     ??___ftpack:	
  2545                           ; 0 bytes @ 0xE
  2546                           
  2547  005E                     ??_USBDeviceInit:	
  2548                           ; 0 bytes @ 0xE
  2549                           
  2550  005E                     ??_USBStdGetDscHandler:	
  2551                           ; 0 bytes @ 0xE
  2552                           
  2553  005E                     ??_USBStdGetStatusHandler:	
  2554                           ; 0 bytes @ 0xE
  2555                           
  2556  005E                     ??_USBCheckVendorRequest:	
  2557                           ; 0 bytes @ 0xE
  2558                           
  2559  005E                     ??_InitFAN:	
  2560                           ; 0 bytes @ 0xE
  2561                           
  2562  005E                     ??_InitTempSensor:	
  2563                           ; 0 bytes @ 0xE
  2564                           
  2565  005E                     ??_InitWorkTick:	
  2566                           ; 0 bytes @ 0xE
  2567                           
  2568  005E                     ??_InitResultRx:	
  2569                           ; 0 bytes @ 0xE
  2570                           
  2571  005E                     ??_USBCBSuspend:	
  2572                           ; 0 bytes @ 0xE
  2573                           
  2574  005E                     ??_USBCBWakeFromSuspend:	
  2575                           ; 0 bytes @ 0xE
  2576                           
  2577  005E                     ??_USBCB_SOF_Handler:	
  2578                           ; 0 bytes @ 0xE
  2579                           
  2580  005E                     ??_USBCBErrorHandler:	
  2581                           ; 0 bytes @ 0xE
  2582                           
  2583  005E                     ??_USBCBCheckOtherReq:	
  2584                           ; 0 bytes @ 0xE
  2585                           
  2586  005E                     ??_USBCBStdSetDscHandler:	
  2587                           ; 0 bytes @ 0xE
  2588                           
  2589  005E                     ?_memset:	
  2590                           ; 0 bytes @ 0xE
  2591                           
  2592  005E                     ?___bmul:	
  2593                           ; 1 bytes @ 0xE
  2594                           
  2595  005E                     ?___awdiv:	
  2596                           ; 1 bytes @ 0xE
  2597                           
  2598  005E                     ?___lwdiv:	
  2599                           ; 2 bytes @ 0xE
  2600                           
  2601  005E                     ?___wmul:	
  2602                           ; 2 bytes @ 0xE
  2603                           
  2604  005E                     USBConfigureEndpoint@direction:	
  2605                           ; 2 bytes @ 0xE
  2606                           
  2607  005E                     ___bmul@multiplicand:	
  2608                           ; 1 bytes @ 0xE
  2609                           
  2610  005E                     ___awdiv@divisor:	
  2611                           ; 1 bytes @ 0xE
  2612                           
  2613  005E                     ___lwdiv@divisor:	
  2614                           ; 2 bytes @ 0xE
  2615                           
  2616  005E                     memset@c:	
  2617                           ; 2 bytes @ 0xE
  2618                           
  2619  005E                     ___wmul@multiplier:	
  2620                           ; 2 bytes @ 0xE
  2621                           
  2622                           
  2623                           ; 2 bytes @ 0xE
  2624  005E                     	ds	1
  2625  005F                     ??___bmul:	
  2626  005F                     USBConfigureEndpoint@EPNum:	
  2627                           ; 0 bytes @ 0xF
  2628                           
  2629  005F                     USBStdGetStatusHandler@p:	
  2630                           ; 1 bytes @ 0xF
  2631                           
  2632                           
  2633                           ; 1 bytes @ 0xF
  2634  005F                     	ds	1
  2635  0060                     ??_USBCtrlTrfRxService:	
  2636  0060                     USBConfigureEndpoint@handle:	
  2637                           ; 0 bytes @ 0x10
  2638                           
  2639  0060                     USBCtrlTrfTxService@byteToSend:	
  2640                           ; 1 bytes @ 0x10
  2641                           
  2642  0060                     ___bmul@product:	
  2643                           ; 1 bytes @ 0x10
  2644                           
  2645  0060                     ___awdiv@dividend:	
  2646                           ; 1 bytes @ 0x10
  2647                           
  2648  0060                     ___lwdiv@dividend:	
  2649                           ; 2 bytes @ 0x10
  2650                           
  2651  0060                     memset@n:	
  2652                           ; 2 bytes @ 0x10
  2653                           
  2654  0060                     ___wmul@multiplicand:	
  2655                           ; 2 bytes @ 0x10
  2656                           
  2657                           
  2658                           ; 2 bytes @ 0x10
  2659  0060                     	ds	1
  2660  0061                     ?_USBEnableEndpoint:	
  2661  0061                     USBEnableEndpoint@options:	
  2662                           ; 0 bytes @ 0x11
  2663                           
  2664  0061                     USBCtrlTrfInHandler@lastDTS:	
  2665                           ; 1 bytes @ 0x11
  2666                           
  2667  0061                     ___awtoft@sign:	
  2668                           ; 1 bytes @ 0x11
  2669                           
  2670  0061                     ___bmul@multiplier:	
  2671                           ; 1 bytes @ 0x11
  2672                           
  2673                           
  2674                           ; 1 bytes @ 0x11
  2675  0061                     	ds	1
  2676  0062                     ??_USER_USB_CALLBACK_EVENT_HANDLER:	
  2677  0062                     ??_InitializeSystem:	
  2678                           ; 0 bytes @ 0x12
  2679                           
  2680  0062                     ??_UserInit:	
  2681                           ; 0 bytes @ 0x12
  2682                           
  2683  0062                     ??_main:	
  2684                           ; 0 bytes @ 0x12
  2685                           
  2686  0062                     ??___ftneg:	
  2687                           ; 0 bytes @ 0x12
  2688                           
  2689  0062                     ??___wmul:	
  2690                           ; 0 bytes @ 0x12
  2691                           
  2692                           
  2693                           	psect	maintext
  2694  1BF5                     __pmaintext:	
  2695                           ; 0 bytes @ 0x12
  2696 ;;
  2697 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2698 ;;
  2699 ;; *************** function _main *****************
  2700 ;; Defined at:
  2701 ;;		line 98 in file "main.c"
  2702 ;; Parameters:    Size  Location     Type
  2703 ;;		None
  2704 ;; Auto vars:     Size  Location     Type
  2705 ;;		None
  2706 ;; Return value:  Size  Location     Type
  2707 ;;                  2  854[COMMON] int 
  2708 ;; Registers used:
  2709 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  2710 ;; Tracked objects:
  2711 ;;		On entry : 17F/0
  2712 ;;		On exit  : 0/0
  2713 ;;		Unchanged: 0/0
  2714 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2715 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2716 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2717 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2718 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2719 ;;Total ram usage:        0 bytes
  2720 ;; Hardware stack levels required when called:   13
  2721 ;; This function calls:
  2722 ;;		_USBDeviceTasks
  2723 ;;		_AsicPushWork
  2724 ;;		_WorkTick
  2725 ;;		_InitializeSystem
  2726 ;;		_ProcessIO
  2727 ;; This function is called by:
  2728 ;;		Startup code after reset
  2729 ;; This function uses a non-reentrant model
  2730 ;;
  2731                           
  2732                           
  2733                           ;psect for function _main
  2734  1BF5                     _main:	
  2735                           
  2736                           ;main.c: 99: InitializeSystem();
  2737                           
  2738                           ;incstack = 0
  2739                           ; Regs used in _main: [allreg]
  2740  1BF5  319C  243D  319B   	fcall	_InitializeSystem
  2741  1BF8                     l855:	
  2742                           ;main.c: 101: while(1)
  2743                           
  2744                           
  2745                           ;main.c: 102: {
  2746                           ;main.c: 119: USBDeviceTasks();
  2747  1BF8  318D  2505  319B   	fcall	_USBDeviceTasks
  2748                           
  2749                           ;main.c: 133: if(TMR0IF)
  2750  1BFB  1D0B               	btfss	11,2	;volatile
  2751  1BFC  2C00               	goto	l6709
  2752                           
  2753                           ;main.c: 134: WorkTick();
  2754  1BFD  3190  2003  319B   	fcall	_WorkTick
  2755  1C00                     l6709:	
  2756                           
  2757                           ;main.c: 136: if(Status.State == 'P'){
  2758  1C00  0023               	movlb	3	; select bank3
  2759  1C01  082C               	movf	_Status^(0+384),w	;volatile
  2760  1C02  3A50               	xorlw	80
  2761  1C03  1D03               	skipz
  2762  1C04  2C08               	goto	l6713
  2763                           
  2764                           ;main.c: 137: AsicPushWork();
  2765  1C05  3194  242C  319B   	fcall	_AsicPushWork
  2766  1C08                     l6713:	
  2767                           
  2768                           ;main.c: 138: }
  2769                           ;main.c: 140: ProcessIO();
  2770  1C08  3192  22B0  319B   	fcall	_ProcessIO
  2771  1C0B  2BF8               	goto	l855
  2772  1C0C                     __end_of_main:	
  2773                           
  2774                           	psect	text1
  2775  12B0                     __ptext1:	
  2776 ;; *************** function _ProcessIO *****************
  2777 ;; Defined at:
  2778 ;;		line 182 in file "main.c"
  2779 ;; Parameters:    Size  Location     Type
  2780 ;;		None
  2781 ;; Auto vars:     Size  Location     Type
  2782 ;;		None
  2783 ;; Return value:  Size  Location     Type
  2784 ;;		None               void
  2785 ;; Registers used:
  2786 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  2787 ;; Tracked objects:
  2788 ;;		On entry : 0/0
  2789 ;;		On exit  : 0/0
  2790 ;;		Unchanged: 0/0
  2791 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2792 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2793 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  2794 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  2795 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0
  2796 ;;Total ram usage:        8 bytes
  2797 ;; Hardware stack levels used:    1
  2798 ;; Hardware stack levels required when called:    8
  2799 ;; This function calls:
  2800 ;;		_USBTransferOnePacket
  2801 ;;		_ProcessCmd
  2802 ;;		___bmul
  2803 ;; This function is called by:
  2804 ;;		_main
  2805 ;; This function uses a non-reentrant model
  2806 ;;
  2807                           
  2808                           
  2809                           ;psect for function _ProcessIO
  2810  12B0                     _ProcessIO:	
  2811                           
  2812                           ;main.c: 184: if((USBDeviceState < CONFIGURED_STATE)||(UCONbits.SUSPND==1)) return;
  2813                           
  2814                           ;incstack = 0
  2815                           ; Regs used in _ProcessIO: [allreg]
  2816  12B0  3020               	movlw	32
  2817  12B1  0021               	movlb	1	; select bank1
  2818  12B2  0263               	subwf	_USBDeviceState^(0+128),w
  2819  12B3  1C03               	skipc
  2820  12B4  0008               	return
  2821  12B5  003D               	movlb	29	; select bank29
  2822  12B6  188E               	btfsc	14,1	;volatile
  2823  12B7  0008               	return
  2824                           
  2825                           ;main.c: 193: if(!(USBGenericOutHandle==0?0:((volatile BDT_ENTRY*)USBGenericOutHandle)->
      +                          STAT.UOWN)) {
  2826  12B8  0022               	movlb	2	; select bank2
  2827  12B9  0869               	movf	_USBGenericOutHandle^(0+256),w
  2828  12BA  1903               	btfsc	3,2
  2829  12BB  2ACA               	goto	l6739
  2830  12BC  0869               	movf	_USBGenericOutHandle^(0+256),w
  2831  12BD  0086               	movwf	6
  2832  12BE  0187               	clrf	7
  2833  12BF  0D01               	rlf	1,w
  2834  12C0  0D01               	rlf	1,w
  2835  12C1  3901               	andlw	1
  2836  12C2  0021               	movlb	1	; select bank1
  2837  12C3  00C5               	movwf	??_ProcessIO^(0+128)
  2838  12C4  01C6               	clrf	(??_ProcessIO^(0+128)+1)
  2839  12C5  0845               	movf	??_ProcessIO^(0+128),w
  2840  12C6  00C9               	movwf	_ProcessIO$2377^(0+128)
  2841  12C7  0846               	movf	(??_ProcessIO+1)^(0+128),w
  2842  12C8  00CA               	movwf	(_ProcessIO$2377+1)^(0+128)
  2843  12C9  2ACD               	goto	l6741
  2844  12CA                     l6739:	
  2845  12CA  0021               	movlb	1	; select bank1
  2846  12CB  01C9               	clrf	_ProcessIO$2377^(0+128)
  2847  12CC  01CA               	clrf	(_ProcessIO$2377+1)^(0+128)
  2848  12CD                     l6741:	
  2849  12CD  084A               	movf	(_ProcessIO$2377+1)^(0+128),w
  2850  12CE  0449               	iorwf	_ProcessIO$2377^(0+128),w
  2851  12CF  1D03               	skipz
  2852  12D0  2AE8               	goto	l6747
  2853                           
  2854                           ;main.c: 197: ProcessCmd(OUTPacket);
  2855  12D1  30A0               	movlw	160
  2856  12D2  3184  24E1  3192   	fcall	_ProcessCmd
  2857                           
  2858                           ;main.c: 198: USBGenericOutHandle = USBTransferOnePacket(1,0,(BYTE*)&OUTPacket,64);
  2859  12D5  0021               	movlb	1	; select bank1
  2860  12D6  01A0               	clrf	?_USBTransferOnePacket^(0+128)
  2861  12D7  30A0               	movlw	160
  2862  12D8  00C5               	movwf	??_ProcessIO^(0+128)
  2863  12D9  0845               	movf	??_ProcessIO^(0+128),w
  2864  12DA  00A1               	movwf	(?_USBTransferOnePacket+1)^(0+128)
  2865  12DB  3040               	movlw	64
  2866  12DC  00C6               	movwf	(??_ProcessIO+1)^(0+128)
  2867  12DD  0846               	movf	(??_ProcessIO+1)^(0+128),w
  2868  12DE  00A2               	movwf	(?_USBTransferOnePacket^(0+128)+2)
  2869  12DF  3001               	movlw	1
  2870  12E0  319F  2708  3192   	fcall	_USBTransferOnePacket
  2871  12E3  0021               	movlb	1	; select bank1
  2872  12E4  00C7               	movwf	(??_ProcessIO+2)^(0+128)
  2873  12E5  0847               	movf	(??_ProcessIO+2)^(0+128),w
  2874  12E6  0022               	movlb	2	; select bank2
  2875  12E7  00E9               	movwf	_USBGenericOutHandle^(0+256)
  2876  12E8                     l6747:	
  2877                           
  2878                           ;main.c: 199: }
  2879                           ;main.c: 201: if(WQI != WQX && !(USBGenericInHandle==0?0:((volatile BDT_ENTRY*)USBGeneri
      +                          cInHandle)->STAT.UOWN)) {
  2880  12E8  0021               	movlb	1	; select bank1
  2881  12E9  086F               	movf	_WQI^(0+128),w
  2882  12EA  0020               	movlb	0	; select bank0
  2883  12EB  066E               	xorwf	_WQX,w
  2884  12EC  1903               	skipnz
  2885  12ED  0008               	return
  2886  12EE  0022               	movlb	2	; select bank2
  2887  12EF  0868               	movf	_USBGenericInHandle^(0+256),w
  2888  12F0  1903               	btfsc	3,2
  2889  12F1  2B00               	goto	l6753
  2890  12F2  0868               	movf	_USBGenericInHandle^(0+256),w
  2891  12F3  0086               	movwf	6
  2892  12F4  0187               	clrf	7
  2893  12F5  0D01               	rlf	1,w
  2894  12F6  0D01               	rlf	1,w
  2895  12F7  3901               	andlw	1
  2896  12F8  0021               	movlb	1	; select bank1
  2897  12F9  00C5               	movwf	??_ProcessIO^(0+128)
  2898  12FA  01C6               	clrf	(??_ProcessIO^(0+128)+1)
  2899  12FB  0845               	movf	??_ProcessIO^(0+128),w
  2900  12FC  00CB               	movwf	_ProcessIO$2411^(0+128)
  2901  12FD  0846               	movf	(??_ProcessIO+1)^(0+128),w
  2902  12FE  00CC               	movwf	(_ProcessIO$2411+1)^(0+128)
  2903  12FF  2B03               	goto	l6755
  2904  1300                     l6753:	
  2905  1300  0021               	movlb	1	; select bank1
  2906  1301  01CB               	clrf	_ProcessIO$2411^(0+128)
  2907  1302  01CC               	clrf	(_ProcessIO$2411+1)^(0+128)
  2908  1303                     l6755:	
  2909  1303  084C               	movf	(_ProcessIO$2411+1)^(0+128),w
  2910  1304  044B               	iorwf	_ProcessIO$2411^(0+128),w
  2911  1305  1D03               	skipz
  2912  1306  0008               	return
  2913                           
  2914                           ;main.c: 202: USBGenericInHandle = USBTransferOnePacket(1,1,(BYTE*)&INPacket[WQX*15],15);
  2915  1307  01A0               	clrf	?_USBTransferOnePacket^(0+128)
  2916  1308  0AA0               	incf	?_USBTransferOnePacket^(0+128),f
  2917  1309  300F               	movlw	15
  2918  130A  00C5               	movwf	??_ProcessIO^(0+128)
  2919  130B  0845               	movf	??_ProcessIO^(0+128),w
  2920  130C  0020               	movlb	0	; select bank0
  2921  130D  00DE               	movwf	?___bmul
  2922  130E  086E               	movf	_WQX,w
  2923  130F  319B  2391  3192   	fcall	___bmul
  2924  1312  3E20               	addlw	32
  2925  1313  0021               	movlb	1	; select bank1
  2926  1314  00C6               	movwf	(??_ProcessIO+1)^(0+128)
  2927  1315  0846               	movf	(??_ProcessIO+1)^(0+128),w
  2928  1316  00A1               	movwf	(?_USBTransferOnePacket+1)^(0+128)
  2929  1317  300F               	movlw	15
  2930  1318  00C7               	movwf	(??_ProcessIO+2)^(0+128)
  2931  1319  0847               	movf	(??_ProcessIO+2)^(0+128),w
  2932  131A  00A2               	movwf	(?_USBTransferOnePacket^(0+128)+2)
  2933  131B  3001               	movlw	1
  2934  131C  319F  2708         	fcall	_USBTransferOnePacket
  2935  131E  0021               	movlb	1	; select bank1
  2936  131F  00C8               	movwf	(??_ProcessIO+3)^(0+128)
  2937  1320  0848               	movf	(??_ProcessIO+3)^(0+128),w
  2938  1321  0022               	movlb	2	; select bank2
  2939  1322  00E8               	movwf	_USBGenericInHandle^(0+256)
  2940                           
  2941                           ;main.c: 203: WQX = (WQX+1) & 3;
  2942  1323  0020               	movlb	0	; select bank0
  2943  1324  0A6E               	incf	_WQX,w
  2944  1325  3903               	andlw	3
  2945  1326  0021               	movlb	1	; select bank1
  2946  1327  00C5               	movwf	??_ProcessIO^(0+128)
  2947  1328  0845               	movf	??_ProcessIO^(0+128),w
  2948  1329  0020               	movlb	0	; select bank0
  2949  132A  00EE               	movwf	_WQX
  2950  132B  0008               	return
  2951  132C                     __end_of_ProcessIO:	
  2952                           
  2953                           	psect	text2
  2954  04E1                     __ptext2:	
  2955 ;; *************** function _ProcessCmd *****************
  2956 ;; Defined at:
  2957 ;;		line 45 in file "klondike.c"
  2958 ;; Parameters:    Size  Location     Type
  2959 ;;  cmd             1    wreg     PTR unsigned char 
  2960 ;;		 -> OUTPacket(64), 
  2961 ;; Auto vars:     Size  Location     Type
  2962 ;;  cmd             1   36[BANK1 ] PTR unsigned char 
  2963 ;;		 -> OUTPacket(64), 
  2964 ;; Return value:  Size  Location     Type
  2965 ;;		None               void
  2966 ;; Registers used:
  2967 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  2968 ;; Tracked objects:
  2969 ;;		On entry : 0/0
  2970 ;;		On exit  : 0/0
  2971 ;;		Unchanged: 0/0
  2972 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2973 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2974 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  2975 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  2976 ;;      Totals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
  2977 ;;Total ram usage:        7 bytes
  2978 ;; Hardware stack levels used:    1
  2979 ;; Hardware stack levels required when called:    7
  2980 ;; This function calls:
  2981 ;;		_AsicPushWork
  2982 ;;		_SendCmdReply
  2983 ;;		___lwdiv
  2984 ;;		___wmul
  2985 ;; This function is called by:
  2986 ;;		_ProcessIO
  2987 ;; This function uses a non-reentrant model
  2988 ;;
  2989                           
  2990                           
  2991                           ;psect for function _ProcessCmd
  2992  04E1                     _ProcessCmd:	
  2993                           
  2994                           ;incstack = 0
  2995                           ; Regs used in _ProcessCmd: [allreg]
  2996                           ;ProcessCmd@cmd stored from wreg
  2997  04E1  0021               	movlb	1	; select bank1
  2998  04E2  00C4               	movwf	ProcessCmd@cmd^(0+128)
  2999                           
  3000                           ;klondike.c: 48: switch(cmd[0]) {
  3001  04E3  2E37               	goto	l5373
  3002  04E4                     l692:	
  3003                           ;klondike.c: 49: case 'W':
  3004                           
  3005                           
  3006                           ;klondike.c: 50: LATAbits.LATA4 = 1;
  3007  04E4  0022               	movlb	2	; select bank2
  3008  04E5  160C               	bsf	12,4	;volatile
  3009                           
  3010                           ;klondike.c: 51: if( Status.WorkQC < 4-1 ) {
  3011  04E6  3003               	movlw	3
  3012  04E7  0023               	movlb	3	; select bank3
  3013  04E8  022F               	subwf	(_Status^(0+384)+3),w	;volatile
  3014  04E9  1803               	skipnc
  3015  04EA  2E23               	goto	L4
  3016                           
  3017                           ;klondike.c: 52: WorkQue[ (WorkNow + Status.WorkQC++) & 4-1 ] = *(WORKTASK *)(cmd+2);
  3018  04EB  0021               	movlb	1	; select bank1
  3019  04EC  0844               	movf	ProcessCmd@cmd^(0+128),w
  3020  04ED  3E02               	addlw	2
  3021  04EE  0086               	movwf	6
  3022  04EF  3002               	movlw	2	; select bank4/5
  3023  04F0  0087               	movwf	7
  3024  04F1  0864               	movf	_WorkNow^(0+128),w
  3025  04F2  0023               	movlb	3	; select bank3
  3026  04F3  072F               	addwf	(_Status^(0+384)+3),w	;volatile
  3027  04F4  0021               	movlb	1	; select bank1
  3028  04F5  00BE               	movwf	??_ProcessCmd^(0+128)
  3029  04F6  01BF               	clrf	(??_ProcessCmd^(0+128)+1)
  3030  04F7  0DBF               	rlf	(??_ProcessCmd+1)^(0+128),f
  3031  04F8  3003               	movlw	3
  3032  04F9  053E               	andwf	??_ProcessCmd^(0+128),w
  3033  04FA  0020               	movlb	0	; select bank0
  3034  04FB  00DE               	movwf	?___wmul
  3035  04FC  3000               	movlw	0
  3036  04FD  0021               	movlb	1	; select bank1
  3037  04FE  053F               	andwf	(??_ProcessCmd+1)^(0+128),w
  3038  04FF  0020               	movlb	0	; select bank0
  3039  0500  00DF               	movwf	?___wmul+1
  3040  0501  302D               	movlw	45
  3041  0502  00E0               	movwf	?___wmul+2
  3042  0503  3000               	movlw	0
  3043  0504  00E1               	movwf	?___wmul+3
  3044  0505  319D  2539  3184   	fcall	___wmul
  3045  0508  303C               	movlw	60
  3046  0509  0021               	movlb	1	; select bank1
  3047  050A  00C0               	movwf	(??_ProcessCmd+2)^(0+128)
  3048  050B  3023               	movlw	35
  3049  050C  00C1               	movwf	((??_ProcessCmd+2)^(0+128)+1)
  3050  050D  0020               	movlb	0	; select bank0
  3051  050E  085E               	movf	?___wmul,w
  3052  050F  0021               	movlb	1	; select bank1
  3053  0510  0740               	addwf	(??_ProcessCmd+2)^(0+128),w
  3054  0511  0084               	movwf	4
  3055  0512  0020               	movlb	0	; select bank0
  3056  0513  085F               	movf	?___wmul+1,w
  3057  0514  0021               	movlb	1	; select bank1
  3058  0515  3D41               	addwfc	(??_ProcessCmd+3)^(0+128),w
  3059  0516  0085               	movwf	5
  3060  0517  302D               	movlw	45
  3061  0518  00FF               	movwf	127
  3062  0519                     u5100:	
  3063  0519  0016               	moviw fsr1++
  3064  051A  001A               	movwi fsr0++
  3065  051B  0BFF               	decfsz	127,f
  3066  051C  2D19               	goto	u5100
  3067  051D  3001               	movlw	1
  3068  051E  00BE               	movwf	??_ProcessCmd^(0+128)
  3069  051F  083E               	movf	??_ProcessCmd^(0+128),w
  3070  0520  0023               	movlb	3	; select bank3
  3071  0521  07AF               	addwf	(_Status^(0+384)+3),f	;volatile
  3072                           
  3073                           ;klondike.c: 53: if(Status.State == 'R') {
  3074  0522  082C               	movf	_Status^(0+384),w	;volatile
  3075  0523  3A52               	xorlw	82
  3076  0524  1D03               	skipz
  3077  0525  2E23               	goto	L4
  3078                           
  3079                           ;klondike.c: 54: AsicPushWork();
  3080  0526  3194  242C  3184   	fcall	_AsicPushWork
  3081  0529  2E23               	goto	L4
  3082  052A                     l5321:	
  3083                           ;klondike.c: 60: case 'A':
  3084                           
  3085                           ;klondike.c: 59: break;
  3086                           
  3087                           ;klondike.c: 58: Status.Noise = Status.ErrorCount = 0;
  3088                           
  3089                           ;klondike.c: 55: }
  3090                           ;klondike.c: 56: }
  3091                           ;klondike.c: 57: SendCmdReply(cmd, (char *)&Status, sizeof(Status));
  3092                           
  3093                           
  3094                           ;klondike.c: 61: Status.WorkQC = WorkNow = 0;
  3095  052A  0021               	movlb	1	; select bank1
  3096  052B  01E4               	clrf	_WorkNow^(0+128)
  3097  052C  0023               	movlb	3	; select bank3
  3098  052D  01AF               	clrf	(_Status^(0+384)+3)	;volatile
  3099                           
  3100                           ;klondike.c: 62: Status.State = 'R';
  3101  052E  3052               	movlw	82
  3102  052F  0021               	movlb	1	; select bank1
  3103  0530  2E1F               	goto	L3
  3104  0531                     l5329:	
  3105                           ;klondike.c: 66: case 'I':
  3106                           
  3107                           ;klondike.c: 65: break;
  3108                           
  3109                           ;klondike.c: 64: Status.Noise = Status.ErrorCount = 0;
  3110                           
  3111                           ;klondike.c: 63: SendCmdReply(cmd, (char *)&Status, sizeof(Status));
  3112                           
  3113                           
  3114                           ;klondike.c: 67: SendCmdReply(cmd, (char *)&ID, sizeof(ID));
  3115  0531  0021               	movlb	1	; select bank1
  3116  0532  0844               	movf	ProcessCmd@cmd^(0+128),w
  3117  0533  00A2               	movwf	?_SendCmdReply^(0+128)
  3118  0534  3002               	movlw	2
  3119  0535  00A3               	movwf	(?_SendCmdReply+1)^(0+128)
  3120  0536  309F               	movlw	low (_ID| (0+32768))
  3121  0537  00A4               	movwf	(?_SendCmdReply+2)^(0+128)
  3122  0538  3088               	movlw	high (_ID| (0+32768))
  3123  0539  00A5               	movwf	(?_SendCmdReply+3)^(0+128)
  3124  053A  300C               	movlw	12
  3125  053B  00BE               	movwf	??_ProcessCmd^(0+128)
  3126  053C  083E               	movf	??_ProcessCmd^(0+128),w
  3127  053D  00A6               	movwf	(?_SendCmdReply^(0+128)+4)
  3128  053E  3197  2769  3184   	fcall	_SendCmdReply
  3129                           
  3130                           ;klondike.c: 68: break;
  3131  0541  2E50               	goto	l695
  3132  0542                     l5331:	
  3133                           ;klondike.c: 69: case 'S':
  3134                           
  3135  0542  2E23               	goto	L4
  3136  0543                     l5335:	
  3137                           ;klondike.c: 73: case 'C':
  3138                           
  3139                           ;klondike.c: 72: break;
  3140                           
  3141                           ;klondike.c: 71: Status.Noise = Status.ErrorCount = 0;
  3142                           
  3143                           ;klondike.c: 70: SendCmdReply(cmd, (char *)&Status, sizeof(Status));
  3144                           
  3145                           
  3146                           ;klondike.c: 74: if( *(WORD *)&cmd[2] != 0 ) {
  3147  0543  0021               	movlb	1	; select bank1
  3148  0544  0844               	movf	ProcessCmd@cmd^(0+128),w
  3149  0545  3E02               	addlw	2
  3150  0546  0086               	movwf	6
  3151  0547  3002               	movlw	2	; select bank4/5
  3152  0548  0087               	movwf	7
  3153  0549  0016               	moviw fsr1++
  3154  054A  0401               	iorwf	1,w
  3155  054B  1903               	skipnz
  3156  054C  2DE8               	goto	l5357
  3157                           
  3158                           ;klondike.c: 75: Cfg = *(WORKCFG *)(cmd+2);
  3159  054D  0844               	movf	ProcessCmd@cmd^(0+128),w
  3160  054E  3E02               	addlw	2
  3161  054F  0086               	movwf	6
  3162  0550  3002               	movlw	2	; select bank4/5
  3163  0551  0087               	movwf	7
  3164  0552  30C1               	movlw	low _Cfg
  3165  0553  0084               	movwf	4
  3166  0554  3001               	movlw	high _Cfg
  3167  0555  0085               	movwf	5
  3168  0556  3006               	movlw	6
  3169  0557  00FF               	movwf	127
  3170  0558                     u5130:	
  3171  0558  0016               	moviw fsr1++
  3172  0559  001A               	movwi fsr0++
  3173  055A  0BFF               	decfsz	127,f
  3174  055B  2D58               	goto	u5130
  3175                           
  3176                           ;klondike.c: 76: if(Cfg.HashClock < 128)
  3177  055C  3000               	movlw	0
  3178  055D  0023               	movlb	3	; select bank3
  3179  055E  0242               	subwf	(_Cfg+1)^(0+384),w
  3180  055F  3080               	movlw	128
  3181  0560  1903               	skipnz
  3182  0561  0241               	subwf	_Cfg^(0+384),w
  3183  0562  1803               	skipnc
  3184  0563  2D68               	goto	l701
  3185                           
  3186                           ;klondike.c: 77: Cfg.HashClock = 128;
  3187  0564  3080               	movlw	128
  3188  0565  00C1               	movwf	_Cfg^(0+384)
  3189  0566  3000               	movlw	0
  3190  0567  00C2               	movwf	(_Cfg^(0+384)+1)
  3191  0568                     l701:	
  3192                           
  3193                           ;klondike.c: 78: if(Cfg.HashClock <= 250 && Cfg.HashClock >= 450/2)
  3194  0568  3000               	movlw	0
  3195  0569  0242               	subwf	(_Cfg+1)^(0+384),w
  3196  056A  30FB               	movlw	251
  3197  056B  1903               	skipnz
  3198  056C  0241               	subwf	_Cfg^(0+384),w
  3199  056D  1803               	skipnc
  3200  056E  2D7A               	goto	l702
  3201  056F  3000               	movlw	0
  3202  0570  0242               	subwf	(_Cfg+1)^(0+384),w
  3203  0571  30E1               	movlw	225
  3204  0572  1903               	skipnz
  3205  0573  0241               	subwf	_Cfg^(0+384),w
  3206  0574  1C03               	skipc
  3207  0575  2D7A               	goto	l702
  3208                           
  3209                           ;klondike.c: 79: Cfg.HashClock = 450/2-1;
  3210  0576  30E0               	movlw	224
  3211  0577  00C1               	movwf	_Cfg^(0+384)
  3212  0578  3000               	movlw	0
  3213  0579  00C2               	movwf	(_Cfg^(0+384)+1)
  3214  057A                     l702:	
  3215                           
  3216                           ;klondike.c: 80: if(Cfg.HashClock >= 450)
  3217  057A  3001               	movlw	1
  3218  057B  0242               	subwf	(_Cfg+1)^(0+384),w
  3219  057C  30C2               	movlw	194
  3220  057D  1903               	skipnz
  3221  057E  0241               	subwf	_Cfg^(0+384),w
  3222  057F  1C03               	skipc
  3223  0580  2D85               	goto	l703
  3224                           
  3225                           ;klondike.c: 81: Cfg.HashClock = 450-1;
  3226  0581  30C1               	movlw	193
  3227  0582  00C1               	movwf	_Cfg^(0+384)
  3228  0583  3001               	movlw	1
  3229  0584  00C2               	movwf	(_Cfg^(0+384)+1)
  3230  0585                     l703:	
  3231                           
  3232                           ;klondike.c: 82: if(Cfg.HashClock <= 250)
  3233  0585  3000               	movlw	0
  3234  0586  0242               	subwf	(_Cfg+1)^(0+384),w
  3235  0587  30FB               	movlw	251
  3236  0588  1903               	skipnz
  3237  0589  0241               	subwf	_Cfg^(0+384),w
  3238  058A  1803               	skipnc
  3239  058B  2DA5               	goto	l5351
  3240                           
  3241                           ;klondike.c: 83: ClockCfg[0] = (((DWORD)Cfg.HashClock*2) << 18) | 0x00030017;
  3242  058C  0841               	movf	_Cfg^(0+384),w
  3243  058D  0021               	movlb	1	; select bank1
  3244  058E  00BE               	movwf	??_ProcessCmd^(0+128)
  3245  058F  0023               	movlb	3	; select bank3
  3246  0590  0842               	movf	(_Cfg+1)^(0+384),w
  3247  0591  0021               	movlb	1	; select bank1
  3248  0592  00BF               	movwf	(??_ProcessCmd^(0+128)+1)
  3249  0593  01C0               	clrf	(??_ProcessCmd^(0+128)+2)
  3250  0594  01C1               	clrf	(??_ProcessCmd^(0+128)+3)
  3251  0595  3001               	movlw	1
  3252  0596                     u5195:	
  3253  0596  35BE               	lslf	??_ProcessCmd^(0+128),f
  3254  0597  0DBF               	rlf	(??_ProcessCmd^(0+128)+1),f
  3255  0598  0DC0               	rlf	(??_ProcessCmd^(0+128)+2),f
  3256  0599  0DC1               	rlf	(??_ProcessCmd^(0+128)+3),f
  3257  059A  0B89               	decfsz	9,f
  3258  059B  2D96               	goto	u5195
  3259  059C  3012               	movlw	18
  3260  059D                     u5205:	
  3261  059D  35BE               	lslf	??_ProcessCmd^(0+128),f
  3262  059E  0DBF               	rlf	(??_ProcessCmd^(0+128)+1),f
  3263  059F  0DC0               	rlf	(??_ProcessCmd^(0+128)+2),f
  3264  05A0  0DC1               	rlf	(??_ProcessCmd^(0+128)+3),f
  3265  05A1  0B89               	decfsz	9,f
  3266  05A2  2D9D               	goto	u5205
  3267  05A3  3017               	movlw	23
  3268  05A4  2DB6               	goto	L1
  3269  05A5                     l5351:	
  3270                           
  3271                           ;klondike.c: 84: else
  3272                           ;klondike.c: 85: ClockCfg[0] = ((DWORD)Cfg.HashClock << 18) | 0x00030007;
  3273  05A5  0841               	movf	_Cfg^(0+384),w
  3274  05A6  0021               	movlb	1	; select bank1
  3275  05A7  00BE               	movwf	??_ProcessCmd^(0+128)
  3276  05A8  0023               	movlb	3	; select bank3
  3277  05A9  0842               	movf	(_Cfg+1)^(0+384),w
  3278  05AA  0021               	movlb	1	; select bank1
  3279  05AB  00BF               	movwf	(??_ProcessCmd^(0+128)+1)
  3280  05AC  01C0               	clrf	(??_ProcessCmd^(0+128)+2)
  3281  05AD  01C1               	clrf	(??_ProcessCmd^(0+128)+3)
  3282  05AE  3012               	movlw	18
  3283  05AF                     u5215:	
  3284  05AF  35BE               	lslf	??_ProcessCmd^(0+128),f
  3285  05B0  0DBF               	rlf	(??_ProcessCmd^(0+128)+1),f
  3286  05B1  0DC0               	rlf	(??_ProcessCmd^(0+128)+2),f
  3287  05B2  0DC1               	rlf	(??_ProcessCmd^(0+128)+3),f
  3288  05B3  0B89               	decfsz	9,f
  3289  05B4  2DAF               	goto	u5215
  3290  05B5  3007               	movlw	7
  3291  05B6                     L1:	
  3292  05B6  043E               	iorwf	??_ProcessCmd^(0+128),w
  3293  05B7  0023               	movlb	3	; select bank3
  3294  05B8  00B9               	movwf	_ClockCfg^(0+384)
  3295  05B9  3000               	movlw	0
  3296  05BA  0021               	movlb	1	; select bank1
  3297  05BB  043F               	iorwf	(??_ProcessCmd+1)^(0+128),w
  3298  05BC  0023               	movlb	3	; select bank3
  3299  05BD  00BA               	movwf	(_ClockCfg+1)^(0+384)
  3300  05BE  3003               	movlw	3
  3301  05BF  0021               	movlb	1	; select bank1
  3302  05C0  0440               	iorwf	(??_ProcessCmd+2)^(0+128),w
  3303  05C1  0023               	movlb	3	; select bank3
  3304  05C2  00BB               	movwf	(_ClockCfg+2)^(0+384)
  3305  05C3  3000               	movlw	0
  3306  05C4  0021               	movlb	1	; select bank1
  3307  05C5  0441               	iorwf	(??_ProcessCmd+3)^(0+128),w
  3308  05C6  0023               	movlb	3	; select bank3
  3309  05C7  00BC               	movwf	(_ClockCfg+3)^(0+384)
  3310                           
  3311                           ;klondike.c: 86: HashTime = 256 - ((WORD)12285/Cfg.HashClock);
  3312  05C8  0842               	movf	(_Cfg+1)^(0+384),w
  3313  05C9  0020               	movlb	0	; select bank0
  3314  05CA  01DF               	clrf	?___lwdiv+1
  3315  05CB  07DF               	addwf	?___lwdiv+1,f
  3316  05CC  0023               	movlb	3	; select bank3
  3317  05CD  0841               	movf	_Cfg^(0+384),w
  3318  05CE  0020               	movlb	0	; select bank0
  3319  05CF  01DE               	clrf	?___lwdiv
  3320  05D0  07DE               	addwf	?___lwdiv,f
  3321  05D1  30FD               	movlw	253
  3322  05D2  00E0               	movwf	?___lwdiv+2
  3323  05D3  302F               	movlw	47
  3324  05D4  00E1               	movwf	?___lwdiv+3
  3325  05D5  319E  2676  3184   	fcall	___lwdiv
  3326  05D8  0020               	movlb	0	; select bank0
  3327  05D9  085E               	movf	?___lwdiv,w
  3328  05DA  3AFF               	xorlw	255
  3329  05DB  3E01               	addlw	1
  3330  05DC  0021               	movlb	1	; select bank1
  3331  05DD  00BE               	movwf	??_ProcessCmd^(0+128)
  3332  05DE  083E               	movf	??_ProcessCmd^(0+128),w
  3333  05DF  0020               	movlb	0	; select bank0
  3334  05E0  00EF               	movwf	_HashTime
  3335                           
  3336                           ;klondike.c: 87: TempTarget = Cfg.TempTarget;
  3337  05E1  0023               	movlb	3	; select bank3
  3338  05E2  0843               	movf	(_Cfg^(0+384)+2),w
  3339  05E3  0021               	movlb	1	; select bank1
  3340  05E4  00BE               	movwf	??_ProcessCmd^(0+128)
  3341  05E5  083E               	movf	??_ProcessCmd^(0+128),w
  3342  05E6  0023               	movlb	3	; select bank3
  3343  05E7  00E4               	movwf	_TempTarget^(0+384)
  3344  05E8                     l5357:	
  3345                           
  3346                           ;klondike.c: 88: }
  3347                           ;klondike.c: 89: SendCmdReply(cmd, (char *)&Cfg, sizeof(Cfg));
  3348  05E8  0021               	movlb	1	; select bank1
  3349  05E9  0844               	movf	ProcessCmd@cmd^(0+128),w
  3350  05EA  00A2               	movwf	?_SendCmdReply^(0+128)
  3351  05EB  3002               	movlw	2
  3352  05EC  00A3               	movwf	(?_SendCmdReply+1)^(0+128)
  3353  05ED  30C1               	movlw	low _Cfg
  3354  05EE  00A4               	movwf	(?_SendCmdReply+2)^(0+128)
  3355  05EF  3001               	movlw	high _Cfg
  3356  05F0  00A5               	movwf	(?_SendCmdReply+3)^(0+128)
  3357  05F1  3006               	movlw	6
  3358  05F2  00BE               	movwf	??_ProcessCmd^(0+128)
  3359  05F3  083E               	movf	??_ProcessCmd^(0+128),w
  3360  05F4  00A6               	movwf	(?_SendCmdReply^(0+128)+4)
  3361  05F5  3197  2769  3184   	fcall	_SendCmdReply
  3362                           
  3363                           ;klondike.c: 90: break;
  3364  05F8  2E50               	goto	l695
  3365  05F9                     l5359:	
  3366                           ;klondike.c: 91: case 'E':
  3367                           
  3368                           
  3369                           ;klondike.c: 92: LATAbits.LATA4 = (cmd[2] == '1');
  3370  05F9  0021               	movlb	1	; select bank1
  3371  05FA  0844               	movf	ProcessCmd@cmd^(0+128),w
  3372  05FB  3E02               	addlw	2
  3373  05FC  0086               	movwf	6
  3374  05FD  3002               	movlw	2	; select bank4/5
  3375  05FE  0087               	movwf	7
  3376  05FF  0801               	movf	1,w
  3377  0600  3A31               	xorlw	49
  3378  0601  3000               	movlw	0
  3379  0602  1903               	skipnz
  3380  0603  3001               	movlw	1
  3381  0604  00BE               	movwf	??_ProcessCmd^(0+128)
  3382  0605  0EBE               	swapf	??_ProcessCmd^(0+128),f
  3383  0606  0022               	movlb	2	; select bank2
  3384  0607  080C               	movf	12,w	;volatile
  3385  0608  0021               	movlb	1	; select bank1
  3386  0609  063E               	xorwf	??_ProcessCmd^(0+128),w
  3387  060A  39EF               	andlw	-17
  3388  060B  063E               	xorwf	??_ProcessCmd^(0+128),w
  3389  060C  0022               	movlb	2	; select bank2
  3390  060D  008C               	movwf	12	;volatile
  3391                           
  3392                           ;klondike.c: 93: Status.State = (cmd[2] == '1') ? 'R' : 'D';
  3393  060E  0021               	movlb	1	; select bank1
  3394  060F  0844               	movf	ProcessCmd@cmd^(0+128),w
  3395  0610  3E02               	addlw	2
  3396  0611  0086               	movwf	6
  3397  0612  3002               	movlw	2	; select bank4/5
  3398  0613  0087               	movwf	7
  3399  0614  0801               	movf	1,w
  3400  0615  3A31               	xorlw	49
  3401  0616  1903               	skipnz
  3402  0617  2E1A               	goto	l5365
  3403  0618  3044               	movlw	68
  3404  0619  2E1B               	goto	L2
  3405  061A                     l5365:	
  3406  061A  3052               	movlw	82
  3407  061B                     L2:	
  3408  061B  00C2               	movwf	_ProcessCmd$2059^(0+128)
  3409  061C  3000               	movlw	0
  3410  061D  00C3               	movwf	(_ProcessCmd$2059^(0+128)+1)
  3411  061E  0842               	movf	_ProcessCmd$2059^(0+128),w
  3412  061F                     L3:	
  3413  061F  00BE               	movwf	??_ProcessCmd^(0+128)
  3414  0620  083E               	movf	??_ProcessCmd^(0+128),w
  3415  0621  0023               	movlb	3	; select bank3
  3416  0622  00AC               	movwf	_Status^(0+384)	;volatile
  3417  0623                     L4:	
  3418                           
  3419                           ;klondike.c: 94: SendCmdReply(cmd, (char *)&Status, sizeof(Status));
  3420  0623  0021               	movlb	1	; select bank1
  3421  0624  0844               	movf	ProcessCmd@cmd^(0+128),w
  3422  0625  00A2               	movwf	?_SendCmdReply^(0+128)
  3423  0626  3002               	movlw	2
  3424  0627  00A3               	movwf	(?_SendCmdReply+1)^(0+128)
  3425  0628  30AC               	movlw	low _Status
  3426  0629  00A4               	movwf	(?_SendCmdReply+2)^(0+128)
  3427  062A  3001               	movlw	high _Status
  3428  062B  00A5               	movwf	(?_SendCmdReply+3)^(0+128)
  3429  062C  300D               	movlw	13
  3430  062D  00BE               	movwf	??_ProcessCmd^(0+128)
  3431  062E  083E               	movf	??_ProcessCmd^(0+128),w
  3432  062F  00A6               	movwf	(?_SendCmdReply^(0+128)+4)
  3433  0630  3197  2769  3184   	fcall	_SendCmdReply
  3434                           
  3435                           ;klondike.c: 95: Status.Noise = Status.ErrorCount = 0;
  3436  0633  0023               	movlb	3	; select bank3
  3437  0634  01B3               	clrf	(_Status^(0+384)+7)	;volatile
  3438  0635  01B8               	clrf	(_Status^(0+384)+12)	;volatile
  3439                           
  3440                           ;klondike.c: 105: }
  3441                           
  3442                           ;klondike.c: 104: break;
  3443                           
  3444                           ;klondike.c: 103: default:
  3445                           
  3446                           ;klondike.c: 96: break;
  3447  0636  2E50               	goto	l695
  3448  0637                     l5373:	
  3449  0637  0021               	movlb	1	; select bank1
  3450  0638  0844               	movf	ProcessCmd@cmd^(0+128),w
  3451  0639  0086               	movwf	6
  3452  063A  3002               	movlw	2	; select bank4/5
  3453  063B  0087               	movwf	7
  3454  063C  0801               	movf	1,w
  3455                           
  3456                           ; Switch size 1, requested type "space"
  3457                           ; Number of cases is 6, Range of values is 65 to 87
  3458                           ; switch strategies available:
  3459                           ; Name         Instructions Cycles
  3460                           ; simple_byte           19    10 (average)
  3461                           ; direct_byte           55     9 (fixed)
  3462                           ; jumptable            263     9 (fixed)
  3463                           ;	Chosen strategy is simple_byte
  3464  063D  3A41               	xorlw	65	; case 65
  3465  063E  1903               	skipnz
  3466  063F  2D2A               	goto	l5321
  3467  0640  3A02               	xorlw	2	; case 67
  3468  0641  1903               	skipnz
  3469  0642  2D43               	goto	l5335
  3470  0643  3A06               	xorlw	6	; case 69
  3471  0644  1903               	skipnz
  3472  0645  2DF9               	goto	l5359
  3473  0646  3A0C               	xorlw	12	; case 73
  3474  0647  1903               	skipnz
  3475  0648  2D31               	goto	l5329
  3476  0649  3A1A               	xorlw	26	; case 83
  3477  064A  1903               	skipnz
  3478  064B  2D42               	goto	l5331
  3479  064C  3A04               	xorlw	4	; case 87
  3480  064D  1903               	skipnz
  3481  064E  2CE4               	goto	l692
  3482  064F  2E50               	goto	l695
  3483  0650                     l695:	
  3484                           
  3485                           ;klondike.c: 106: LATAbits.LATA5 = 1;;
  3486  0650  0022               	movlb	2	; select bank2
  3487  0651  168C               	bsf	12,5	;volatile
  3488  0652  0008               	return
  3489  0653                     __end_of_ProcessCmd:	
  3490                           
  3491                           	psect	text3
  3492  1E76                     __ptext3:	
  3493 ;; *************** function ___lwdiv *****************
  3494 ;; Defined at:
  3495 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.20\sources\pic\lwdiv.c"
  3496 ;; Parameters:    Size  Location     Type
  3497 ;;  divisor         2   14[BANK0 ] unsigned int 
  3498 ;;  dividend        2   16[BANK0 ] unsigned int 
  3499 ;; Auto vars:     Size  Location     Type
  3500 ;;  quotient        2    1[BANK1 ] unsigned int 
  3501 ;;  counter         1    3[BANK1 ] unsigned char 
  3502 ;; Return value:  Size  Location     Type
  3503 ;;                  2   14[BANK0 ] unsigned int 
  3504 ;; Registers used:
  3505 ;;		wreg, status,2, status,0
  3506 ;; Tracked objects:
  3507 ;;		On entry : 0/0
  3508 ;;		On exit  : 0/0
  3509 ;;		Unchanged: 0/0
  3510 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3511 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3512 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  3513 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  3514 ;;      Totals:         0       4       4       0       0       0       0       0       0       0       0       0       
      +0       0
  3515 ;;Total ram usage:        8 bytes
  3516 ;; Hardware stack levels used:    1
  3517 ;; Hardware stack levels required when called:    4
  3518 ;; This function calls:
  3519 ;;		Nothing
  3520 ;; This function is called by:
  3521 ;;		_ProcessCmd
  3522 ;; This function uses a non-reentrant model
  3523 ;;
  3524                           
  3525                           
  3526                           ;psect for function ___lwdiv
  3527  1E76                     ___lwdiv:	
  3528                           
  3529                           ;incstack = 0
  3530                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  3531  1E76  0021               	movlb	1	; select bank1
  3532  1E77  01A1               	clrf	___lwdiv@quotient^(0+128)
  3533  1E78  01A2               	clrf	(___lwdiv@quotient+1)^(0+128)
  3534  1E79  0020               	movlb	0	; select bank0
  3535  1E7A  085F               	movf	___lwdiv@divisor+1,w
  3536  1E7B  045E               	iorwf	___lwdiv@divisor,w
  3537  1E7C  1903               	skipnz
  3538  1E7D  2EB0               	goto	l5967
  3539  1E7E  0021               	movlb	1	; select bank1
  3540  1E7F  01A3               	clrf	___lwdiv@counter^(0+128)
  3541  1E80  0AA3               	incf	___lwdiv@counter^(0+128),f
  3542  1E81                     l5955:	
  3543  1E81  0020               	movlb	0	; select bank0
  3544  1E82  1BDF               	btfsc	___lwdiv@divisor+1,7
  3545  1E83  2E90               	goto	l5957
  3546  1E84  3001               	movlw	1
  3547  1E85  0020               	movlb	0	; select bank0
  3548  1E86                     u6255:	
  3549  1E86  35DE               	lslf	___lwdiv@divisor,f
  3550  1E87  0DDF               	rlf	___lwdiv@divisor+1,f
  3551  1E88  0B89               	decfsz	9,f
  3552  1E89  2E86               	goto	u6255
  3553  1E8A  3001               	movlw	1
  3554  1E8B  0021               	movlb	1	; select bank1
  3555  1E8C  00A0               	movwf	??___lwdiv^(0+128)
  3556  1E8D  0820               	movf	??___lwdiv^(0+128),w
  3557  1E8E  07A3               	addwf	___lwdiv@counter^(0+128),f
  3558  1E8F  2E81               	goto	l5955
  3559  1E90                     l5957:	
  3560  1E90  3001               	movlw	1
  3561  1E91  0021               	movlb	1	; select bank1
  3562  1E92                     u6275:	
  3563  1E92  35A1               	lslf	___lwdiv@quotient^(0+128),f
  3564  1E93  0DA2               	rlf	(___lwdiv@quotient+1)^(0+128),f
  3565  1E94  0B89               	decfsz	9,f
  3566  1E95  2E92               	goto	u6275
  3567  1E96  0020               	movlb	0	; select bank0
  3568  1E97  085F               	movf	___lwdiv@divisor+1,w
  3569  1E98  0261               	subwf	___lwdiv@dividend+1,w
  3570  1E99  1D03               	skipz
  3571  1E9A  2E9D               	goto	u6285
  3572  1E9B  085E               	movf	___lwdiv@divisor,w
  3573  1E9C  0260               	subwf	___lwdiv@dividend,w
  3574  1E9D                     u6285:	
  3575  1E9D  1C03               	skipc
  3576  1E9E  2EA5               	goto	l5963
  3577  1E9F  085E               	movf	___lwdiv@divisor,w
  3578  1EA0  02E0               	subwf	___lwdiv@dividend,f
  3579  1EA1  085F               	movf	___lwdiv@divisor+1,w
  3580  1EA2  3BE1               	subwfb	___lwdiv@dividend+1,f
  3581  1EA3  0021               	movlb	1	; select bank1
  3582  1EA4  1421               	bsf	___lwdiv@quotient^(0+128),0
  3583  1EA5                     l5963:	
  3584  1EA5  3001               	movlw	1
  3585  1EA6  0020               	movlb	0	; select bank0
  3586  1EA7                     u6295:	
  3587  1EA7  36DF               	lsrf	___lwdiv@divisor+1,f
  3588  1EA8  0CDE               	rrf	___lwdiv@divisor,f
  3589  1EA9  0B89               	decfsz	9,f
  3590  1EAA  2EA7               	goto	u6295
  3591  1EAB  3001               	movlw	1
  3592  1EAC  0021               	movlb	1	; select bank1
  3593  1EAD  02A3               	subwf	___lwdiv@counter^(0+128),f
  3594  1EAE  1D03               	btfss	3,2
  3595  1EAF  2E90               	goto	l5957
  3596  1EB0                     l5967:	
  3597  1EB0  0021               	movlb	1	; select bank1
  3598  1EB1  0822               	movf	(___lwdiv@quotient+1)^(0+128),w
  3599  1EB2  0020               	movlb	0	; select bank0
  3600  1EB3  01DF               	clrf	?___lwdiv+1
  3601  1EB4  07DF               	addwf	?___lwdiv+1,f
  3602  1EB5  0021               	movlb	1	; select bank1
  3603  1EB6  0821               	movf	___lwdiv@quotient^(0+128),w
  3604  1EB7  0020               	movlb	0	; select bank0
  3605  1EB8  01DE               	clrf	?___lwdiv
  3606  1EB9  07DE               	addwf	?___lwdiv,f
  3607  1EBA  0008               	return
  3608  1EBB                     __end_of___lwdiv:	
  3609                           
  3610                           	psect	text4
  3611  1769                     __ptext4:	
  3612 ;; *************** function _SendCmdReply *****************
  3613 ;; Defined at:
  3614 ;;		line 208 in file "main.c"
  3615 ;; Parameters:    Size  Location     Type
  3616 ;;  cmd             2    2[BANK1 ] PTR unsigned char 
  3617 ;;		 -> ResultQue(12), OUTPacket(64), 
  3618 ;;  data            2    4[BANK1 ] PTR unsigned char 
  3619 ;;		 -> ResultQue(12), Cfg(6), ID(12), Status(13), 
  3620 ;;  count           1    6[BANK1 ] unsigned char 
  3621 ;; Auto vars:     Size  Location     Type
  3622 ;;  n               1   15[BANK1 ] unsigned char 
  3623 ;; Return value:  Size  Location     Type
  3624 ;;		None               void
  3625 ;; Registers used:
  3626 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  3627 ;; Tracked objects:
  3628 ;;		On entry : 0/0
  3629 ;;		On exit  : 0/0
  3630 ;;		Unchanged: 0/0
  3631 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3632 ;;      Params:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
  3633 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  3634 ;;      Temps:          0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0
  3635 ;;      Totals:         0       0      14       0       0       0       0       0       0       0       0       0       
      +0       0
  3636 ;;Total ram usage:       14 bytes
  3637 ;; Hardware stack levels used:    1
  3638 ;; Hardware stack levels required when called:    5
  3639 ;; This function calls:
  3640 ;;		___bmul
  3641 ;;		___wmul
  3642 ;; This function is called by:
  3643 ;;		_ProcessCmd
  3644 ;; This function uses a non-reentrant model
  3645 ;;
  3646                           
  3647                           
  3648                           ;psect for function _SendCmdReply
  3649  1769                     _SendCmdReply:	
  3650                           
  3651                           ;main.c: 209: if(WQI*15 + count + 2 < 64) {
  3652                           
  3653                           ;incstack = 0
  3654                           ; Regs used in _SendCmdReply: [wreg-fsr1h+status,2+status,0+btemp+1+pclath+cstack]
  3655  1769  0021               	movlb	1	; select bank1
  3656  176A  0826               	movf	SendCmdReply@count^(0+128),w
  3657  176B  00A7               	movwf	??_SendCmdReply^(0+128)
  3658  176C  01A8               	clrf	(??_SendCmdReply^(0+128)+1)
  3659  176D  086F               	movf	_WQI^(0+128),w
  3660  176E  00A9               	movwf	(??_SendCmdReply+2)^(0+128)
  3661  176F  01AA               	clrf	((??_SendCmdReply+2)^(0+128)+1)
  3662  1770  0829               	movf	(??_SendCmdReply+2)^(0+128),w
  3663  1771  0020               	movlb	0	; select bank0
  3664  1772  00DE               	movwf	?___wmul
  3665  1773  0021               	movlb	1	; select bank1
  3666  1774  082A               	movf	(??_SendCmdReply+3)^(0+128),w
  3667  1775  0020               	movlb	0	; select bank0
  3668  1776  00DF               	movwf	?___wmul+1
  3669  1777  300F               	movlw	15
  3670  1778  00E0               	movwf	?___wmul+2
  3671  1779  3000               	movlw	0
  3672  177A  00E1               	movwf	?___wmul+3
  3673  177B  319D  2539  3197   	fcall	___wmul
  3674  177E  0021               	movlb	1	; select bank1
  3675  177F  0827               	movf	??_SendCmdReply^(0+128),w
  3676  1780  0020               	movlb	0	; select bank0
  3677  1781  075E               	addwf	?___wmul,w
  3678  1782  0021               	movlb	1	; select bank1
  3679  1783  00AB               	movwf	(??_SendCmdReply+4)^(0+128)
  3680  1784  0828               	movf	(??_SendCmdReply+1)^(0+128),w
  3681  1785  0020               	movlb	0	; select bank0
  3682  1786  3D5F               	addwfc	?___wmul+1,w
  3683  1787  0021               	movlb	1	; select bank1
  3684  1788  00AC               	movwf	(??_SendCmdReply+5)^(0+128)
  3685  1789  082B               	movf	(??_SendCmdReply+4)^(0+128),w
  3686  178A  3E02               	addlw	2
  3687  178B  00AD               	movwf	(??_SendCmdReply+6)^(0+128)
  3688  178C  3000               	movlw	0
  3689  178D  3D2C               	addwfc	(??_SendCmdReply+5)^(0+128),w
  3690  178E  00AE               	movwf	(??_SendCmdReply+7)^(0+128)
  3691  178F  082E               	movf	(??_SendCmdReply+7)^(0+128),w
  3692  1790  3A80               	xorlw	128
  3693  1791  00FF               	movwf	127
  3694  1792  3080               	movlw	128
  3695  1793  027F               	subwf	127,w
  3696  1794  1D03               	skipz
  3697  1795  2F98               	goto	u5235
  3698  1796  3040               	movlw	64
  3699  1797  022D               	subwf	(??_SendCmdReply+6)^(0+128),w
  3700  1798                     u5235:	
  3701  1798  1803               	skipnc
  3702  1799  0008               	return
  3703                           
  3704                           ;main.c: 210: INPacket[WQI*15] = cmd[0];
  3705  179A  0021               	movlb	1	; select bank1
  3706  179B  0822               	movf	SendCmdReply@cmd^(0+128),w
  3707  179C  0086               	movwf	6
  3708  179D  0823               	movf	(SendCmdReply@cmd+1)^(0+128),w
  3709  179E  0087               	movwf	7
  3710  179F  0801               	movf	1,w
  3711  17A0  00A7               	movwf	??_SendCmdReply^(0+128)
  3712  17A1  300F               	movlw	15
  3713  17A2  00A8               	movwf	(??_SendCmdReply+1)^(0+128)
  3714  17A3  0828               	movf	(??_SendCmdReply+1)^(0+128),w
  3715  17A4  0020               	movlb	0	; select bank0
  3716  17A5  00DE               	movwf	?___bmul
  3717  17A6  0021               	movlb	1	; select bank1
  3718  17A7  086F               	movf	_WQI^(0+128),w
  3719  17A8  319B  2391  3197   	fcall	___bmul
  3720  17AB  3E20               	addlw	32
  3721  17AC  0086               	movwf	6
  3722  17AD  3002               	movlw	2	; select bank4/5
  3723  17AE  0087               	movwf	7
  3724  17AF  0021               	movlb	1	; select bank1
  3725  17B0  0827               	movf	??_SendCmdReply^(0+128),w
  3726  17B1  0081               	movwf	1
  3727                           
  3728                           ;main.c: 211: INPacket[WQI*15 + 1] = SlaveAddress;
  3729  17B2  0862               	movf	_SlaveAddress^(0+128),w
  3730  17B3  00A7               	movwf	??_SendCmdReply^(0+128)
  3731  17B4  300F               	movlw	15
  3732  17B5  00A8               	movwf	(??_SendCmdReply+1)^(0+128)
  3733  17B6  0828               	movf	(??_SendCmdReply+1)^(0+128),w
  3734  17B7  0020               	movlb	0	; select bank0
  3735  17B8  00DE               	movwf	?___bmul
  3736  17B9  0021               	movlb	1	; select bank1
  3737  17BA  086F               	movf	_WQI^(0+128),w
  3738  17BB  319B  2391  3197   	fcall	___bmul
  3739  17BE  0021               	movlb	1	; select bank1
  3740  17BF  00A9               	movwf	(??_SendCmdReply+2)^(0+128)
  3741  17C0  0A29               	incf	(??_SendCmdReply+2)^(0+128),w
  3742  17C1  3E20               	addlw	32
  3743  17C2  0086               	movwf	6
  3744  17C3  3002               	movlw	2	; select bank4/5
  3745  17C4  0087               	movwf	7
  3746  17C5  0827               	movf	??_SendCmdReply^(0+128),w
  3747  17C6  0081               	movwf	1
  3748                           
  3749                           ;main.c: 212: for(BYTE n = 0; n < count; n++)
  3750  17C7  01AF               	clrf	SendCmdReply@n^(0+128)
  3751  17C8                     l5401:	
  3752  17C8  0826               	movf	SendCmdReply@count^(0+128),w
  3753  17C9  022F               	subwf	SendCmdReply@n^(0+128),w
  3754  17CA  1803               	btfsc	3,0
  3755  17CB  2FFA               	goto	l5403
  3756                           
  3757                           ;main.c: 213: INPacket[WQI*15 + n + 2] = data[n];
  3758  17CC  0825               	movf	(SendCmdReply@data+1)^(0+128),w
  3759  17CD  00A8               	movwf	(??_SendCmdReply^(0+128)+1)
  3760  17CE  0824               	movf	SendCmdReply@data^(0+128),w
  3761  17CF  00A7               	movwf	??_SendCmdReply^(0+128)
  3762  17D0  082F               	movf	SendCmdReply@n^(0+128),w
  3763  17D1  0727               	addwf	??_SendCmdReply^(0+128),w
  3764  17D2  0084               	movwf	4
  3765  17D3  0828               	movf	(??_SendCmdReply^(0+128)+1),w
  3766  17D4  1803               	skipnc
  3767  17D5  0A28               	incf	(??_SendCmdReply^(0+128)+1),w
  3768  17D6  0085               	movwf	5
  3769  17D7  0800               	movf	0,w	;code access
  3770  17D8  00A9               	movwf	(??_SendCmdReply+2)^(0+128)
  3771  17D9  086F               	movf	_WQI^(0+128),w
  3772  17DA  00AA               	movwf	(??_SendCmdReply+3)^(0+128)
  3773  17DB  01AB               	clrf	((??_SendCmdReply+3)^(0+128)+1)
  3774  17DC  082A               	movf	(??_SendCmdReply+3)^(0+128),w
  3775  17DD  0020               	movlb	0	; select bank0
  3776  17DE  00DE               	movwf	?___wmul
  3777  17DF  0021               	movlb	1	; select bank1
  3778  17E0  082B               	movf	(??_SendCmdReply+4)^(0+128),w
  3779  17E1  0020               	movlb	0	; select bank0
  3780  17E2  00DF               	movwf	?___wmul+1
  3781  17E3  300F               	movlw	15
  3782  17E4  00E0               	movwf	?___wmul+2
  3783  17E5  3000               	movlw	0
  3784  17E6  00E1               	movwf	?___wmul+3
  3785  17E7  319D  2539  3197   	fcall	___wmul
  3786  17EA  0020               	movlb	0	; select bank0
  3787  17EB  085E               	movf	?___wmul,w
  3788  17EC  0021               	movlb	1	; select bank1
  3789  17ED  072F               	addwf	SendCmdReply@n^(0+128),w
  3790  17EE  3E02               	addlw	2
  3791  17EF  3E20               	addlw	32
  3792  17F0  0086               	movwf	6
  3793  17F1  3002               	movlw	2	; select bank4/5
  3794  17F2  0087               	movwf	7
  3795  17F3  0829               	movf	(??_SendCmdReply+2)^(0+128),w
  3796  17F4  0081               	movwf	1
  3797  17F5  3001               	movlw	1
  3798  17F6  00A7               	movwf	??_SendCmdReply^(0+128)
  3799  17F7  0827               	movf	??_SendCmdReply^(0+128),w
  3800  17F8  07AF               	addwf	SendCmdReply@n^(0+128),f
  3801  17F9  2FC8               	goto	l5401
  3802  17FA                     l5403:	
  3803                           
  3804                           ;main.c: 214: WQI = (WQI+1) & 3;
  3805  17FA  0A6F               	incf	_WQI^(0+128),w
  3806  17FB  3903               	andlw	3
  3807  17FC  00A7               	movwf	??_SendCmdReply^(0+128)
  3808  17FD  0827               	movf	??_SendCmdReply^(0+128),w
  3809  17FE  00EF               	movwf	_WQI^(0+128)
  3810  17FF  0008               	return
  3811  1800                     __end_of_SendCmdReply:	
  3812                           
  3813                           	psect	text5
  3814  1B91                     __ptext5:	
  3815 ;; *************** function ___bmul *****************
  3816 ;; Defined at:
  3817 ;;		line 3 in file "C:\Program Files (x86)\Microchip\xc8\v1.20\sources\pic\bmul.c"
  3818 ;; Parameters:    Size  Location     Type
  3819 ;;  multiplier      1    wreg     unsigned char 
  3820 ;;  multiplicand    1   14[BANK0 ] unsigned char 
  3821 ;; Auto vars:     Size  Location     Type
  3822 ;;  multiplier      1   17[BANK0 ] unsigned char 
  3823 ;;  product         1   16[BANK0 ] unsigned char 
  3824 ;; Return value:  Size  Location     Type
  3825 ;;                  1    wreg      unsigned char 
  3826 ;; Registers used:
  3827 ;;		wreg, status,2, status,0
  3828 ;; Tracked objects:
  3829 ;;		On entry : 0/0
  3830 ;;		On exit  : 0/0
  3831 ;;		Unchanged: 0/0
  3832 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3833 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3834 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3835 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3836 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3837 ;;Total ram usage:        4 bytes
  3838 ;; Hardware stack levels used:    1
  3839 ;; Hardware stack levels required when called:    4
  3840 ;; This function calls:
  3841 ;;		Nothing
  3842 ;; This function is called by:
  3843 ;;		_ResultRx
  3844 ;;		_ProcessIO
  3845 ;;		_SendCmdReply
  3846 ;;		i1_SendCmdReply
  3847 ;; This function uses a non-reentrant model
  3848 ;;
  3849                           
  3850                           
  3851                           ;psect for function ___bmul
  3852  1B91                     ___bmul:	
  3853                           
  3854                           ;incstack = 0
  3855                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  3856                           ;___bmul@multiplier stored from wreg
  3857  1B91  0020               	movlb	0	; select bank0
  3858  1B92  00E1               	movwf	___bmul@multiplier
  3859  1B93  01E0               	clrf	___bmul@product
  3860  1B94                     l5757:	
  3861  1B94  1C61               	btfss	___bmul@multiplier,0
  3862  1B95  2B9A               	goto	l5761
  3863  1B96  085E               	movf	___bmul@multiplicand,w
  3864  1B97  00DF               	movwf	??___bmul
  3865  1B98  085F               	movf	??___bmul,w
  3866  1B99  07E0               	addwf	___bmul@product,f
  3867  1B9A                     l5761:	
  3868  1B9A  1003               	clrc
  3869  1B9B  0DDE               	rlf	___bmul@multiplicand,f
  3870  1B9C  1003               	clrc
  3871  1B9D  0CE1               	rrf	___bmul@multiplier,f
  3872  1B9E  08E1               	movf	___bmul@multiplier,f
  3873  1B9F  1D03               	skipz
  3874  1BA0  2B94               	goto	l5757
  3875  1BA1  0860               	movf	___bmul@product,w
  3876  1BA2  0008               	return
  3877  1BA3                     __end_of___bmul:	
  3878                           
  3879                           	psect	text6
  3880  142C                     __ptext6:	
  3881 ;; *************** function _AsicPushWork *****************
  3882 ;; Defined at:
  3883 ;;		line 110 in file "klondike.c"
  3884 ;; Parameters:    Size  Location     Type
  3885 ;;		None
  3886 ;; Auto vars:     Size  Location     Type
  3887 ;;		None
  3888 ;; Return value:  Size  Location     Type
  3889 ;;		None               void
  3890 ;; Registers used:
  3891 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  3892 ;; Tracked objects:
  3893 ;;		On entry : 0/0
  3894 ;;		On exit  : 0/0
  3895 ;;		Unchanged: 0/0
  3896 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3897 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3898 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3899 ;;      Temps:          0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
  3900 ;;      Totals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
  3901 ;;Total ram usage:        5 bytes
  3902 ;; Hardware stack levels used:    1
  3903 ;; Hardware stack levels required when called:    6
  3904 ;; This function calls:
  3905 ;;		_SendAsicData
  3906 ;;		_AsicPreCalc
  3907 ;;		___wmul
  3908 ;; This function is called by:
  3909 ;;		_ProcessCmd
  3910 ;;		_main
  3911 ;; This function uses a non-reentrant model
  3912 ;;
  3913                           
  3914                           
  3915                           ;psect for function _AsicPushWork
  3916  142C                     _AsicPushWork:	
  3917                           
  3918                           ;klondike.c: 111: AsicPreCalc(&WorkQue[WorkNow]);
  3919                           
  3920                           ;incstack = 0
  3921                           ; Regs used in _AsicPushWork: [wreg-fsr1h+status,2+status,0+btemp+1+pclath+cstack]
  3922  142C  0021               	movlb	1	; select bank1
  3923  142D  0864               	movf	_WorkNow^(0+128),w
  3924  142E  00B9               	movwf	??_AsicPushWork^(0+128)
  3925  142F  01BA               	clrf	(??_AsicPushWork^(0+128)+1)
  3926  1430  0839               	movf	??_AsicPushWork^(0+128),w
  3927  1431  0020               	movlb	0	; select bank0
  3928  1432  00DE               	movwf	?___wmul
  3929  1433  0021               	movlb	1	; select bank1
  3930  1434  083A               	movf	(??_AsicPushWork+1)^(0+128),w
  3931  1435  0020               	movlb	0	; select bank0
  3932  1436  00DF               	movwf	?___wmul+1
  3933  1437  302D               	movlw	45
  3934  1438  00E0               	movwf	?___wmul+2
  3935  1439  3000               	movlw	0
  3936  143A  00E1               	movwf	?___wmul+3
  3937  143B  319D  2539  3194   	fcall	___wmul
  3938  143E  303C               	movlw	60
  3939  143F  0021               	movlb	1	; select bank1
  3940  1440  00BB               	movwf	(??_AsicPushWork+2)^(0+128)
  3941  1441  3023               	movlw	35
  3942  1442  00BC               	movwf	((??_AsicPushWork+2)^(0+128)+1)
  3943  1443  0020               	movlb	0	; select bank0
  3944  1444  085E               	movf	?___wmul,w
  3945  1445  0021               	movlb	1	; select bank1
  3946  1446  073B               	addwf	(??_AsicPushWork+2)^(0+128),w
  3947  1447  00AD               	movwf	?_AsicPreCalc^(0+128)
  3948  1448  0020               	movlb	0	; select bank0
  3949  1449  085F               	movf	?___wmul+1,w
  3950  144A  0021               	movlb	1	; select bank1
  3951  144B  3D3C               	addwfc	(??_AsicPushWork+3)^(0+128),w
  3952  144C  00AE               	movwf	(?_AsicPreCalc+1)^(0+128)
  3953  144D  3180  2014  3194   	fcall	_AsicPreCalc
  3954                           
  3955                           ;klondike.c: 112: Status.WorkID = WorkQue[WorkNow].WorkID;
  3956  1450  0021               	movlb	1	; select bank1
  3957  1451  0864               	movf	_WorkNow^(0+128),w
  3958  1452  00B9               	movwf	??_AsicPushWork^(0+128)
  3959  1453  01BA               	clrf	(??_AsicPushWork^(0+128)+1)
  3960  1454  0839               	movf	??_AsicPushWork^(0+128),w
  3961  1455  0020               	movlb	0	; select bank0
  3962  1456  00DE               	movwf	?___wmul
  3963  1457  0021               	movlb	1	; select bank1
  3964  1458  083A               	movf	(??_AsicPushWork+1)^(0+128),w
  3965  1459  0020               	movlb	0	; select bank0
  3966  145A  00DF               	movwf	?___wmul+1
  3967  145B  302D               	movlw	45
  3968  145C  00E0               	movwf	?___wmul+2
  3969  145D  3000               	movlw	0
  3970  145E  00E1               	movwf	?___wmul+3
  3971  145F  319D  2539  3194   	fcall	___wmul
  3972  1462  303C               	movlw	60
  3973  1463  0021               	movlb	1	; select bank1
  3974  1464  00BB               	movwf	(??_AsicPushWork+2)^(0+128)
  3975  1465  3023               	movlw	35
  3976  1466  00BC               	movwf	((??_AsicPushWork+2)^(0+128)+1)
  3977  1467  0020               	movlb	0	; select bank0
  3978  1468  085E               	movf	?___wmul,w
  3979  1469  0021               	movlb	1	; select bank1
  3980  146A  073B               	addwf	(??_AsicPushWork+2)^(0+128),w
  3981  146B  0086               	movwf	6
  3982  146C  0020               	movlb	0	; select bank0
  3983  146D  085F               	movf	?___wmul+1,w
  3984  146E  0021               	movlb	1	; select bank1
  3985  146F  3D3C               	addwfc	(??_AsicPushWork+3)^(0+128),w
  3986  1470  0087               	movwf	7
  3987  1471  0801               	movf	1,w
  3988  1472  00BD               	movwf	(??_AsicPushWork+4)^(0+128)
  3989  1473  083D               	movf	(??_AsicPushWork+4)^(0+128),w
  3990  1474  0023               	movlb	3	; select bank3
  3991  1475  00B0               	movwf	(_Status^(0+384)+4)	;volatile
  3992                           
  3993                           ;klondike.c: 113: SendAsicData(&WorkQue[WorkNow]);
  3994  1476  0021               	movlb	1	; select bank1
  3995  1477  0864               	movf	_WorkNow^(0+128),w
  3996  1478  00B9               	movwf	??_AsicPushWork^(0+128)
  3997  1479  01BA               	clrf	(??_AsicPushWork^(0+128)+1)
  3998  147A  0839               	movf	??_AsicPushWork^(0+128),w
  3999  147B  0020               	movlb	0	; select bank0
  4000  147C  00DE               	movwf	?___wmul
  4001  147D  0021               	movlb	1	; select bank1
  4002  147E  083A               	movf	(??_AsicPushWork+1)^(0+128),w
  4003  147F  0020               	movlb	0	; select bank0
  4004  1480  00DF               	movwf	?___wmul+1
  4005  1481  302D               	movlw	45
  4006  1482  00E0               	movwf	?___wmul+2
  4007  1483  3000               	movlw	0
  4008  1484  00E1               	movwf	?___wmul+3
  4009  1485  319D  2539  3194   	fcall	___wmul
  4010  1488  303C               	movlw	60
  4011  1489  0021               	movlb	1	; select bank1
  4012  148A  00BB               	movwf	(??_AsicPushWork+2)^(0+128)
  4013  148B  3023               	movlw	35
  4014  148C  00BC               	movwf	((??_AsicPushWork+2)^(0+128)+1)
  4015  148D  0020               	movlb	0	; select bank0
  4016  148E  085E               	movf	?___wmul,w
  4017  148F  0021               	movlb	1	; select bank1
  4018  1490  073B               	addwf	(??_AsicPushWork+2)^(0+128),w
  4019  1491  00A2               	movwf	?_SendAsicData^(0+128)
  4020  1492  0020               	movlb	0	; select bank0
  4021  1493  085F               	movf	?___wmul+1,w
  4022  1494  0021               	movlb	1	; select bank1
  4023  1495  3D3C               	addwfc	(??_AsicPushWork+3)^(0+128),w
  4024  1496  00A3               	movwf	(?_SendAsicData+1)^(0+128)
  4025  1497  3196  26D4         	fcall	_SendAsicData
  4026                           
  4027                           ;klondike.c: 114: WorkNow = (WorkNow+1) & 4-1;
  4028  1499  0021               	movlb	1	; select bank1
  4029  149A  0A64               	incf	_WorkNow^(0+128),w
  4030  149B  3903               	andlw	3
  4031  149C  00B9               	movwf	??_AsicPushWork^(0+128)
  4032  149D  0839               	movf	??_AsicPushWork^(0+128),w
  4033  149E  00E4               	movwf	_WorkNow^(0+128)
  4034                           
  4035                           ;klondike.c: 115: Status.HashCount = 0;
  4036  149F  0023               	movlb	3	; select bank3
  4037  14A0  01B4               	clrf	(_Status^(0+384)+8)	;volatile
  4038  14A1  01B5               	clrf	((_Status+1)^(0+384)+8)	;volatile
  4039                           
  4040                           ;klondike.c: 116: TMR0 = HashTime;
  4041  14A2  0020               	movlb	0	; select bank0
  4042  14A3  086F               	movf	_HashTime,w
  4043  14A4  0095               	movwf	21	;volatile
  4044                           
  4045                           ;klondike.c: 117: Status.State = 'W';
  4046  14A5  3057               	movlw	87
  4047  14A6  0021               	movlb	1	; select bank1
  4048  14A7  00B9               	movwf	??_AsicPushWork^(0+128)
  4049  14A8  0839               	movf	??_AsicPushWork^(0+128),w
  4050  14A9  0023               	movlb	3	; select bank3
  4051  14AA  00AC               	movwf	_Status^(0+384)	;volatile
  4052                           
  4053                           ;klondike.c: 118: Status.WorkQC--;
  4054  14AB  3001               	movlw	1
  4055  14AC  02AF               	subwf	(_Status^(0+384)+3),f	;volatile
  4056  14AD  0008               	return
  4057  14AE                     __end_of_AsicPushWork:	
  4058                           
  4059                           	psect	text7
  4060  1D39                     __ptext7:	
  4061 ;; *************** function ___wmul *****************
  4062 ;; Defined at:
  4063 ;;		line 3 in file "C:\Program Files (x86)\Microchip\xc8\v1.20\sources\pic\wmul.c"
  4064 ;; Parameters:    Size  Location     Type
  4065 ;;  multiplier      2   14[BANK0 ] unsigned int 
  4066 ;;  multiplicand    2   16[BANK0 ] unsigned int 
  4067 ;; Auto vars:     Size  Location     Type
  4068 ;;  product         2    0[BANK1 ] unsigned int 
  4069 ;; Return value:  Size  Location     Type
  4070 ;;                  2   14[BANK0 ] unsigned int 
  4071 ;; Registers used:
  4072 ;;		wreg, status,2, status,0
  4073 ;; Tracked objects:
  4074 ;;		On entry : 0/0
  4075 ;;		On exit  : 0/0
  4076 ;;		Unchanged: 0/0
  4077 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4078 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4079 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  4080 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4081 ;;      Totals:         0       4       2       0       0       0       0       0       0       0       0       0       
      +0       0
  4082 ;;Total ram usage:        6 bytes
  4083 ;; Hardware stack levels used:    1
  4084 ;; Hardware stack levels required when called:    4
  4085 ;; This function calls:
  4086 ;;		Nothing
  4087 ;; This function is called by:
  4088 ;;		_ProcessCmd
  4089 ;;		_AsicPushWork
  4090 ;;		_SendCmdReply
  4091 ;; This function uses a non-reentrant model
  4092 ;;
  4093                           
  4094                           
  4095                           ;psect for function ___wmul
  4096  1D39                     ___wmul:	
  4097                           
  4098                           ;incstack = 0
  4099                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  4100  1D39  0021               	movlb	1	; select bank1
  4101  1D3A  01A0               	clrf	___wmul@product^(0+128)
  4102  1D3B  01A1               	clrf	(___wmul@product+1)^(0+128)
  4103  1D3C                     l5973:	
  4104  1D3C  0020               	movlb	0	; select bank0
  4105  1D3D  1C5E               	btfss	___wmul@multiplier,0
  4106  1D3E  2D46               	goto	l1295
  4107  1D3F  0860               	movf	___wmul@multiplicand,w
  4108  1D40  0021               	movlb	1	; select bank1
  4109  1D41  07A0               	addwf	___wmul@product^(0+128),f
  4110  1D42  0020               	movlb	0	; select bank0
  4111  1D43  0861               	movf	___wmul@multiplicand+1,w
  4112  1D44  0021               	movlb	1	; select bank1
  4113  1D45  3DA1               	addwfc	(___wmul@product+1)^(0+128),f
  4114  1D46                     l1295:	
  4115  1D46  3001               	movlw	1
  4116  1D47  0020               	movlb	0	; select bank0
  4117  1D48                     u6325:	
  4118  1D48  35E0               	lslf	___wmul@multiplicand,f
  4119  1D49  0DE1               	rlf	___wmul@multiplicand+1,f
  4120  1D4A  0B89               	decfsz	9,f
  4121  1D4B  2D48               	goto	u6325
  4122  1D4C  3001               	movlw	1
  4123  1D4D                     u6335:	
  4124  1D4D  36DF               	lsrf	___wmul@multiplier+1,f
  4125  1D4E  0CDE               	rrf	___wmul@multiplier,f
  4126  1D4F  0B89               	decfsz	9,f
  4127  1D50  2D4D               	goto	u6335
  4128  1D51  085F               	movf	___wmul@multiplier+1,w
  4129  1D52  045E               	iorwf	___wmul@multiplier,w
  4130  1D53  1D03               	skipz
  4131  1D54  2D3C               	goto	l5973
  4132  1D55  0021               	movlb	1	; select bank1
  4133  1D56  0821               	movf	(___wmul@product+1)^(0+128),w
  4134  1D57  0020               	movlb	0	; select bank0
  4135  1D58  01DF               	clrf	?___wmul+1
  4136  1D59  07DF               	addwf	?___wmul+1,f
  4137  1D5A  0021               	movlb	1	; select bank1
  4138  1D5B  0820               	movf	___wmul@product^(0+128),w
  4139  1D5C  0020               	movlb	0	; select bank0
  4140  1D5D  01DE               	clrf	?___wmul
  4141  1D5E  07DE               	addwf	?___wmul,f
  4142  1D5F  0008               	return
  4143  1D60                     __end_of___wmul:	
  4144                           
  4145                           	psect	text8
  4146  0014                     __ptext8:	
  4147 ;; *************** function _AsicPreCalc *****************
  4148 ;; Defined at:
  4149 ;;		line 318 in file "asic.c"
  4150 ;; Parameters:    Size  Location     Type
  4151 ;;  work            2   13[BANK1 ] PTR struct _worktask
  4152 ;;		 -> WorkQue(180), 
  4153 ;; Auto vars:     Size  Location     Type
  4154 ;;  m              32   12[BANK2 ] unsigned long [8]
  4155 ;;  K              12    0[BANK2 ] unsigned long [3]
  4156 ;;  x               4   52[BANK2 ] unsigned long 
  4157 ;;  y               4   48[BANK2 ] unsigned long 
  4158 ;;  z               4   44[BANK2 ] unsigned long 
  4159 ;;  n               1   56[BANK2 ] unsigned char 
  4160 ;; Return value:  Size  Location     Type
  4161 ;;		None               void
  4162 ;; Registers used:
  4163 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  4164 ;; Tracked objects:
  4165 ;;		On entry : 0/0
  4166 ;;		On exit  : 0/0
  4167 ;;		Unchanged: 0/0
  4168 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4169 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  4170 ;;      Locals:         0       0       0      57       0       0       0       0       0       0       0       0       
      +0       0
  4171 ;;      Temps:          0       0      10       0       0       0       0       0       0       0       0       0       
      +0       0
  4172 ;;      Totals:         0       0      12      57       0       0       0       0       0       0       0       0       
      +0       0
  4173 ;;Total ram usage:       69 bytes
  4174 ;; Hardware stack levels used:    1
  4175 ;; Hardware stack levels required when called:    5
  4176 ;; This function calls:
  4177 ;;		_rotate
  4178 ;; This function is called by:
  4179 ;;		_AsicPushWork
  4180 ;; This function uses a non-reentrant model
  4181 ;;
  4182                           
  4183                           
  4184                           ;psect for function _AsicPreCalc
  4185  0014                     _AsicPreCalc:	
  4186                           
  4187                           ;asic.c: 319: DWORD K[3] = { 0x428a2f98, 0x71374491, 0xb5c0fbcf };
  4188                           
  4189                           ;incstack = 0
  4190                           ; Regs used in _AsicPreCalc: [wreg-fsr1h+status,2+status,0+btemp+1+pclath+cstack]
  4191  0014  30A0               	movlw	low AsicPreCalc@F3347
  4192  0015  0086               	movwf	6
  4193  0016  3001               	movlw	high AsicPreCalc@F3347
  4194  0017  0087               	movwf	7
  4195  0018  3020               	movlw	low AsicPreCalc@K
  4196  0019  0084               	movwf	4
  4197  001A  3001               	movlw	high AsicPreCalc@K
  4198  001B  0085               	movwf	5
  4199  001C  300C               	movlw	12
  4200  001D  00FF               	movwf	127
  4201  001E                     u4580:	
  4202  001E  0016               	moviw fsr1++
  4203  001F  001A               	movwi fsr0++
  4204  0020  0BFF               	decfsz	127,f
  4205  0021  281E               	goto	u4580
  4206                           
  4207                           ;asic.c: 320: DWORD x, y, z;
  4208                           ;asic.c: 321: DWORD m[8];
  4209                           ;asic.c: 322: BYTE n;
  4210                           ;asic.c: 324: for(n = 0; n < 8; n++)
  4211  0022  0022               	movlb	2	; select bank2
  4212  0023  01D8               	clrf	AsicPreCalc@n^(0+256)
  4213  0024  3008               	movlw	8
  4214  0025  0258               	subwf	AsicPreCalc@n^(0+256),w
  4215  0026  1803               	btfsc	3,0
  4216  0027  2863               	goto	l5023
  4217  0028                     l5017:	
  4218                           
  4219                           ;asic.c: 325: m[n] = work->MidState[n];
  4220  0028  0858               	movf	AsicPreCalc@n^(0+256),w
  4221  0029  0021               	movlb	1	; select bank1
  4222  002A  00AF               	movwf	??_AsicPreCalc^(0+128)
  4223  002B  01B0               	clrf	(??_AsicPreCalc^(0+128)+1)
  4224  002C  35AF               	lslf	??_AsicPreCalc^(0+128),f
  4225  002D  0DB0               	rlf	(??_AsicPreCalc^(0+128)+1),f
  4226  002E  35AF               	lslf	??_AsicPreCalc^(0+128),f
  4227  002F  0DB0               	rlf	(??_AsicPreCalc^(0+128)+1),f
  4228  0030  082F               	movf	??_AsicPreCalc^(0+128),w
  4229  0031  3E01               	addlw	1
  4230  0032  00B1               	movwf	(??_AsicPreCalc+2)^(0+128)
  4231  0033  3000               	movlw	0
  4232  0034  3D30               	addwfc	(??_AsicPreCalc+1)^(0+128),w
  4233  0035  00B2               	movwf	(??_AsicPreCalc+3)^(0+128)
  4234  0036  0831               	movf	(??_AsicPreCalc+2)^(0+128),w
  4235  0037  072D               	addwf	AsicPreCalc@work^(0+128),w
  4236  0038  0086               	movwf	6
  4237  0039  0832               	movf	(??_AsicPreCalc+3)^(0+128),w
  4238  003A  3D2E               	addwfc	(AsicPreCalc@work+1)^(0+128),w
  4239  003B  0087               	movwf	7
  4240  003C  3F40               	moviw [0]fsr1
  4241  003D  00B3               	movwf	(??_AsicPreCalc+4)^(0+128)
  4242  003E  3F41               	moviw [1]fsr1
  4243  003F  00B4               	movwf	((??_AsicPreCalc+4)^(0+128)+1)
  4244  0040  3F42               	moviw [2]fsr1
  4245  0041  00B5               	movwf	((??_AsicPreCalc+4)^(0+128)+2)
  4246  0042  3F43               	moviw [3]fsr1
  4247  0043  00B6               	movwf	((??_AsicPreCalc+4)^(0+128)+3)
  4248  0044  0022               	movlb	2	; select bank2
  4249  0045  0858               	movf	AsicPreCalc@n^(0+256),w
  4250  0046  0021               	movlb	1	; select bank1
  4251  0047  00B7               	movwf	(??_AsicPreCalc+8)^(0+128)
  4252  0048  3001               	movlw	1
  4253  0049                     u4605:	
  4254  0049  35B7               	lslf	(??_AsicPreCalc+8)^(0+128),f
  4255  004A  3EFF               	addlw	-1
  4256  004B  1D03               	skipz
  4257  004C  2849               	goto	u4605
  4258  004D  3537               	lslf	(??_AsicPreCalc+8)^(0+128),w
  4259  004E  3E2C               	addlw	AsicPreCalc@m& (0+255)
  4260  004F  0086               	movwf	6
  4261  0050  3001               	movlw	1	; select bank2/3
  4262  0051  0087               	movwf	7
  4263  0052  0833               	movf	(??_AsicPreCalc+4)^(0+128),w
  4264  0053  3FC0               	movwi [0]fsr1
  4265  0054  0834               	movf	(??_AsicPreCalc+5)^(0+128),w
  4266  0055  3FC1               	movwi [1]fsr1
  4267  0056  0835               	movf	(??_AsicPreCalc+6)^(0+128),w
  4268  0057  3FC2               	movwi [2]fsr1
  4269  0058  0836               	movf	(??_AsicPreCalc+7)^(0+128),w
  4270  0059  3FC3               	movwi [3]fsr1
  4271  005A  3001               	movlw	1
  4272  005B  00AF               	movwf	??_AsicPreCalc^(0+128)
  4273  005C  082F               	movf	??_AsicPreCalc^(0+128),w
  4274  005D  0022               	movlb	2	; select bank2
  4275  005E  07D8               	addwf	AsicPreCalc@n^(0+256),f
  4276  005F  3008               	movlw	8
  4277  0060  0258               	subwf	AsicPreCalc@n^(0+256),w
  4278  0061  1C03               	skipc
  4279  0062  2828               	goto	l5017
  4280  0063                     l5023:	
  4281                           
  4282                           ;asic.c: 327: for(n = 0; n < 3; n++) {
  4283  0063  01D8               	clrf	AsicPreCalc@n^(0+256)
  4284  0064                     L5:	
  4285  0064  3003               	movlw	3
  4286  0065  0258               	subwf	AsicPreCalc@n^(0+256),w
  4287  0066  1803               	btfsc	3,0
  4288  0067  0008               	return
  4289                           
  4290                           ;asic.c: 329: x = m[5-n] ^ m[6-n];
  4291  0068  0358               	decf	AsicPreCalc@n^(0+256),w
  4292  0069  3AFF               	xorlw	255
  4293  006A  0021               	movlb	1	; select bank1
  4294  006B  00AF               	movwf	??_AsicPreCalc^(0+128)
  4295  006C  3001               	movlw	1
  4296  006D                     u4635:	
  4297  006D  35AF               	lslf	??_AsicPreCalc^(0+128),f
  4298  006E  3EFF               	addlw	-1
  4299  006F  1D03               	skipz
  4300  0070  286D               	goto	u4635
  4301  0071  352F               	lslf	??_AsicPreCalc^(0+128),w
  4302  0072  3E18               	addlw	24
  4303  0073  3E2C               	addlw	AsicPreCalc@m& (0+255)
  4304  0074  0086               	movwf	6
  4305  0075  3001               	movlw	1	; select bank2/3
  4306  0076  0087               	movwf	7
  4307  0077  3F40               	moviw [0]fsr1
  4308  0078  00B0               	movwf	(??_AsicPreCalc+1)^(0+128)
  4309  0079  3F41               	moviw [1]fsr1
  4310  007A  00B1               	movwf	((??_AsicPreCalc+1)^(0+128)+1)
  4311  007B  3F42               	moviw [2]fsr1
  4312  007C  00B2               	movwf	((??_AsicPreCalc+1)^(0+128)+2)
  4313  007D  3F43               	moviw [3]fsr1
  4314  007E  00B3               	movwf	((??_AsicPreCalc+1)^(0+128)+3)
  4315  007F  0022               	movlb	2	; select bank2
  4316  0080  0358               	decf	AsicPreCalc@n^(0+256),w
  4317  0081  3AFF               	xorlw	255
  4318  0082  0021               	movlb	1	; select bank1
  4319  0083  00B4               	movwf	(??_AsicPreCalc+5)^(0+128)
  4320  0084  3001               	movlw	1
  4321  0085                     u4645:	
  4322  0085  35B4               	lslf	(??_AsicPreCalc+5)^(0+128),f
  4323  0086  3EFF               	addlw	-1
  4324  0087  1D03               	skipz
  4325  0088  2885               	goto	u4645
  4326  0089  3534               	lslf	(??_AsicPreCalc+5)^(0+128),w
  4327  008A  3E14               	addlw	20
  4328  008B  3E2C               	addlw	AsicPreCalc@m& (0+255)
  4329  008C  0086               	movwf	6
  4330  008D  3001               	movlw	1	; select bank2/3
  4331  008E  0087               	movwf	7
  4332  008F  3F40               	moviw [0]fsr1
  4333  0090  00B5               	movwf	(??_AsicPreCalc+6)^(0+128)
  4334  0091  3F41               	moviw [1]fsr1
  4335  0092  00B6               	movwf	((??_AsicPreCalc+6)^(0+128)+1)
  4336  0093  3F42               	moviw [2]fsr1
  4337  0094  00B7               	movwf	((??_AsicPreCalc+6)^(0+128)+2)
  4338  0095  3F43               	moviw [3]fsr1
  4339  0096  00B8               	movwf	((??_AsicPreCalc+6)^(0+128)+3)
  4340  0097  0830               	movf	(??_AsicPreCalc+1)^(0+128),w
  4341  0098  0635               	xorwf	(??_AsicPreCalc+6)^(0+128),w
  4342  0099  0022               	movlb	2	; select bank2
  4343  009A  00D4               	movwf	AsicPreCalc@x^(0+256)
  4344  009B  0021               	movlb	1	; select bank1
  4345  009C  0831               	movf	(??_AsicPreCalc+2)^(0+128),w
  4346  009D  0636               	xorwf	(??_AsicPreCalc+7)^(0+128),w
  4347  009E  0022               	movlb	2	; select bank2
  4348  009F  00D5               	movwf	(AsicPreCalc@x+1)^(0+256)
  4349  00A0  0021               	movlb	1	; select bank1
  4350  00A1  0832               	movf	(??_AsicPreCalc+3)^(0+128),w
  4351  00A2  0637               	xorwf	(??_AsicPreCalc+8)^(0+128),w
  4352  00A3  0022               	movlb	2	; select bank2
  4353  00A4  00D6               	movwf	(AsicPreCalc@x+2)^(0+256)
  4354  00A5  0021               	movlb	1	; select bank1
  4355  00A6  0833               	movf	(??_AsicPreCalc+4)^(0+128),w
  4356  00A7  0638               	xorwf	(??_AsicPreCalc+9)^(0+128),w
  4357  00A8  0022               	movlb	2	; select bank2
  4358  00A9  00D7               	movwf	(AsicPreCalc@x+3)^(0+256)
  4359                           
  4360                           ;asic.c: 330: x = x & m[4-n];
  4361  00AA  0358               	decf	AsicPreCalc@n^(0+256),w
  4362  00AB  3AFF               	xorlw	255
  4363  00AC  0021               	movlb	1	; select bank1
  4364  00AD  00AF               	movwf	??_AsicPreCalc^(0+128)
  4365  00AE  3001               	movlw	1
  4366  00AF                     u4655:	
  4367  00AF  35AF               	lslf	??_AsicPreCalc^(0+128),f
  4368  00B0  3EFF               	addlw	-1
  4369  00B1  1D03               	skipz
  4370  00B2  28AF               	goto	u4655
  4371  00B3  352F               	lslf	??_AsicPreCalc^(0+128),w
  4372  00B4  3E10               	addlw	16
  4373  00B5  3E2C               	addlw	AsicPreCalc@m& (0+255)
  4374  00B6  0086               	movwf	6
  4375  00B7  3001               	movlw	1	; select bank2/3
  4376  00B8  0087               	movwf	7
  4377  00B9  0022               	movlb	2	; select bank2
  4378  00BA  0854               	movf	AsicPreCalc@x^(0+256),w
  4379  00BB  0501               	andwf	1,w
  4380  00BC  0021               	movlb	1	; select bank1
  4381  00BD  00B0               	movwf	(??_AsicPreCalc+1)^(0+128)
  4382  00BE  3141               	addfsr 1,1
  4383  00BF  0022               	movlb	2	; select bank2
  4384  00C0  0855               	movf	(AsicPreCalc@x+1)^(0+256),w
  4385  00C1  0501               	andwf	1,w
  4386  00C2  0021               	movlb	1	; select bank1
  4387  00C3  00B1               	movwf	((??_AsicPreCalc+1)^(0+128)+1)
  4388  00C4  3141               	addfsr 1,1
  4389  00C5  0022               	movlb	2	; select bank2
  4390  00C6  0856               	movf	(AsicPreCalc@x+2)^(0+256),w
  4391  00C7  0501               	andwf	1,w
  4392  00C8  0021               	movlb	1	; select bank1
  4393  00C9  00B2               	movwf	((??_AsicPreCalc+1)^(0+128)+2)
  4394  00CA  3141               	addfsr 1,1
  4395  00CB  0022               	movlb	2	; select bank2
  4396  00CC  0857               	movf	(AsicPreCalc@x+3)^(0+256),w
  4397  00CD  0501               	andwf	1,w
  4398  00CE  0021               	movlb	1	; select bank1
  4399  00CF  00B3               	movwf	((??_AsicPreCalc+1)^(0+128)+3)
  4400  00D0  0833               	movf	(??_AsicPreCalc+4)^(0+128),w
  4401  00D1  0022               	movlb	2	; select bank2
  4402  00D2  00D7               	movwf	(AsicPreCalc@x+3)^(0+256)
  4403  00D3  0021               	movlb	1	; select bank1
  4404  00D4  0832               	movf	(??_AsicPreCalc+3)^(0+128),w
  4405  00D5  0022               	movlb	2	; select bank2
  4406  00D6  00D6               	movwf	(AsicPreCalc@x+2)^(0+256)
  4407  00D7  0021               	movlb	1	; select bank1
  4408  00D8  0831               	movf	(??_AsicPreCalc+2)^(0+128),w
  4409  00D9  0022               	movlb	2	; select bank2
  4410  00DA  00D5               	movwf	(AsicPreCalc@x+1)^(0+256)
  4411  00DB  0021               	movlb	1	; select bank1
  4412  00DC  0830               	movf	(??_AsicPreCalc+1)^(0+128),w
  4413  00DD  0022               	movlb	2	; select bank2
  4414  00DE  00D4               	movwf	AsicPreCalc@x^(0+256)
  4415                           
  4416                           ;asic.c: 331: x = m[6-n] ^ x;
  4417  00DF  0358               	decf	AsicPreCalc@n^(0+256),w
  4418  00E0  3AFF               	xorlw	255
  4419  00E1  0021               	movlb	1	; select bank1
  4420  00E2  00AF               	movwf	??_AsicPreCalc^(0+128)
  4421  00E3  3001               	movlw	1
  4422  00E4                     u4665:	
  4423  00E4  35AF               	lslf	??_AsicPreCalc^(0+128),f
  4424  00E5  3EFF               	addlw	-1
  4425  00E6  1D03               	skipz
  4426  00E7  28E4               	goto	u4665
  4427  00E8  352F               	lslf	??_AsicPreCalc^(0+128),w
  4428  00E9  3E18               	addlw	24
  4429  00EA  3E2C               	addlw	AsicPreCalc@m& (0+255)
  4430  00EB  0086               	movwf	6
  4431  00EC  3001               	movlw	1	; select bank2/3
  4432  00ED  0087               	movwf	7
  4433  00EE  0022               	movlb	2	; select bank2
  4434  00EF  0854               	movf	AsicPreCalc@x^(0+256),w
  4435  00F0  0601               	xorwf	1,w
  4436  00F1  0021               	movlb	1	; select bank1
  4437  00F2  00B0               	movwf	(??_AsicPreCalc+1)^(0+128)
  4438  00F3  3141               	addfsr 1,1
  4439  00F4  0022               	movlb	2	; select bank2
  4440  00F5  0855               	movf	(AsicPreCalc@x+1)^(0+256),w
  4441  00F6  0601               	xorwf	1,w
  4442  00F7  0021               	movlb	1	; select bank1
  4443  00F8  00B1               	movwf	((??_AsicPreCalc+1)^(0+128)+1)
  4444  00F9  3141               	addfsr 1,1
  4445  00FA  0022               	movlb	2	; select bank2
  4446  00FB  0856               	movf	(AsicPreCalc@x+2)^(0+256),w
  4447  00FC  0601               	xorwf	1,w
  4448  00FD  0021               	movlb	1	; select bank1
  4449  00FE  00B2               	movwf	((??_AsicPreCalc+1)^(0+128)+2)
  4450  00FF  3141               	addfsr 1,1
  4451  0100  0022               	movlb	2	; select bank2
  4452  0101  0857               	movf	(AsicPreCalc@x+3)^(0+256),w
  4453  0102  0601               	xorwf	1,w
  4454  0103  0021               	movlb	1	; select bank1
  4455  0104  00B3               	movwf	((??_AsicPreCalc+1)^(0+128)+3)
  4456  0105  0833               	movf	(??_AsicPreCalc+4)^(0+128),w
  4457  0106  0022               	movlb	2	; select bank2
  4458  0107  00D7               	movwf	(AsicPreCalc@x+3)^(0+256)
  4459  0108  0021               	movlb	1	; select bank1
  4460  0109  0832               	movf	(??_AsicPreCalc+3)^(0+128),w
  4461  010A  0022               	movlb	2	; select bank2
  4462  010B  00D6               	movwf	(AsicPreCalc@x+2)^(0+256)
  4463  010C  0021               	movlb	1	; select bank1
  4464  010D  0831               	movf	(??_AsicPreCalc+2)^(0+128),w
  4465  010E  0022               	movlb	2	; select bank2
  4466  010F  00D5               	movwf	(AsicPreCalc@x+1)^(0+256)
  4467  0110  0021               	movlb	1	; select bank1
  4468  0111  0830               	movf	(??_AsicPreCalc+1)^(0+128),w
  4469  0112  0022               	movlb	2	; select bank2
  4470  0113  00D4               	movwf	AsicPreCalc@x^(0+256)
  4471                           
  4472                           ;asic.c: 332: x += K[n];
  4473  0114  0858               	movf	AsicPreCalc@n^(0+256),w
  4474  0115  0021               	movlb	1	; select bank1
  4475  0116  00AF               	movwf	??_AsicPreCalc^(0+128)
  4476  0117  3001               	movlw	1
  4477  0118                     u4675:	
  4478  0118  35AF               	lslf	??_AsicPreCalc^(0+128),f
  4479  0119  3EFF               	addlw	-1
  4480  011A  1D03               	skipz
  4481  011B  2918               	goto	u4675
  4482  011C  352F               	lslf	??_AsicPreCalc^(0+128),w
  4483  011D  3E20               	addlw	AsicPreCalc@K& (0+255)
  4484  011E  0086               	movwf	6
  4485  011F  3001               	movlw	1	; select bank2/3
  4486  0120  0087               	movwf	7
  4487  0121  3F40               	moviw [0]fsr1
  4488  0122  0022               	movlb	2	; select bank2
  4489  0123  07D4               	addwf	AsicPreCalc@x^(0+256),f
  4490  0124  3F41               	moviw [1]fsr1
  4491  0125  3DD5               	addwfc	(AsicPreCalc@x+1)^(0+256),f
  4492  0126  3F42               	moviw [2]fsr1
  4493  0127  3DD6               	addwfc	(AsicPreCalc@x+2)^(0+256),f
  4494  0128  3F43               	moviw [3]fsr1
  4495  0129  3DD7               	addwfc	(AsicPreCalc@x+3)^(0+256),f
  4496                           
  4497                           ;asic.c: 333: x += work->Merkle[n];
  4498  012A  0858               	movf	AsicPreCalc@n^(0+256),w
  4499  012B  0021               	movlb	1	; select bank1
  4500  012C  00AF               	movwf	??_AsicPreCalc^(0+128)
  4501  012D  01B0               	clrf	(??_AsicPreCalc^(0+128)+1)
  4502  012E  35AF               	lslf	??_AsicPreCalc^(0+128),f
  4503  012F  0DB0               	rlf	(??_AsicPreCalc^(0+128)+1),f
  4504  0130  35AF               	lslf	??_AsicPreCalc^(0+128),f
  4505  0131  0DB0               	rlf	(??_AsicPreCalc^(0+128)+1),f
  4506  0132  082F               	movf	??_AsicPreCalc^(0+128),w
  4507  0133  3E21               	addlw	33
  4508  0134  00B1               	movwf	(??_AsicPreCalc+2)^(0+128)
  4509  0135  3000               	movlw	0
  4510  0136  3D30               	addwfc	(??_AsicPreCalc+1)^(0+128),w
  4511  0137  00B2               	movwf	(??_AsicPreCalc+3)^(0+128)
  4512  0138  0831               	movf	(??_AsicPreCalc+2)^(0+128),w
  4513  0139  072D               	addwf	AsicPreCalc@work^(0+128),w
  4514  013A  0086               	movwf	6
  4515  013B  0832               	movf	(??_AsicPreCalc+3)^(0+128),w
  4516  013C  3D2E               	addwfc	(AsicPreCalc@work+1)^(0+128),w
  4517  013D  0087               	movwf	7
  4518  013E  3F40               	moviw [0]fsr1
  4519  013F  0022               	movlb	2	; select bank2
  4520  0140  07D4               	addwf	AsicPreCalc@x^(0+256),f
  4521  0141  3F41               	moviw [1]fsr1
  4522  0142  3DD5               	addwfc	(AsicPreCalc@x+1)^(0+256),f
  4523  0143  3F42               	moviw [2]fsr1
  4524  0144  3DD6               	addwfc	(AsicPreCalc@x+2)^(0+256),f
  4525  0145  3F43               	moviw [3]fsr1
  4526  0146  3DD7               	addwfc	(AsicPreCalc@x+3)^(0+256),f
  4527                           
  4528                           ;asic.c: 334: x += m[7-n];
  4529  0147  0358               	decf	AsicPreCalc@n^(0+256),w
  4530  0148  3AFF               	xorlw	255
  4531  0149  0021               	movlb	1	; select bank1
  4532  014A  00AF               	movwf	??_AsicPreCalc^(0+128)
  4533  014B  3001               	movlw	1
  4534  014C                     u4685:	
  4535  014C  35AF               	lslf	??_AsicPreCalc^(0+128),f
  4536  014D  3EFF               	addlw	-1
  4537  014E  1D03               	skipz
  4538  014F  294C               	goto	u4685
  4539  0150  352F               	lslf	??_AsicPreCalc^(0+128),w
  4540  0151  3E1C               	addlw	28
  4541  0152  3E2C               	addlw	AsicPreCalc@m& (0+255)
  4542  0153  0086               	movwf	6
  4543  0154  3001               	movlw	1	; select bank2/3
  4544  0155  0087               	movwf	7
  4545  0156  3F40               	moviw [0]fsr1
  4546  0157  0022               	movlb	2	; select bank2
  4547  0158  07D4               	addwf	AsicPreCalc@x^(0+256),f
  4548  0159  3F41               	moviw [1]fsr1
  4549  015A  3DD5               	addwfc	(AsicPreCalc@x+1)^(0+256),f
  4550  015B  3F42               	moviw [2]fsr1
  4551  015C  3DD6               	addwfc	(AsicPreCalc@x+2)^(0+256),f
  4552  015D  3F43               	moviw [3]fsr1
  4553  015E  3DD7               	addwfc	(AsicPreCalc@x+3)^(0+256),f
  4554                           
  4555                           ;asic.c: 335: y = rotate(m[4-n], 26);
  4556  015F  0358               	decf	AsicPreCalc@n^(0+256),w
  4557  0160  3AFF               	xorlw	255
  4558  0161  0021               	movlb	1	; select bank1
  4559  0162  00AF               	movwf	??_AsicPreCalc^(0+128)
  4560  0163  3001               	movlw	1
  4561  0164                     u4695:	
  4562  0164  35AF               	lslf	??_AsicPreCalc^(0+128),f
  4563  0165  3EFF               	addlw	-1
  4564  0166  1D03               	skipz
  4565  0167  2964               	goto	u4695
  4566  0168  352F               	lslf	??_AsicPreCalc^(0+128),w
  4567  0169  3E10               	addlw	16
  4568  016A  3E2C               	addlw	AsicPreCalc@m& (0+255)
  4569  016B  0086               	movwf	6
  4570  016C  3001               	movlw	1	; select bank2/3
  4571  016D  0087               	movwf	7
  4572  016E  3F40               	moviw [0]fsr1
  4573  016F  00A0               	movwf	?_rotate^(0+128)
  4574  0170  3F41               	moviw [1]fsr1
  4575  0171  00A1               	movwf	(?_rotate+1)^(0+128)
  4576  0172  3F42               	moviw [2]fsr1
  4577  0173  00A2               	movwf	(?_rotate+2)^(0+128)
  4578  0174  3F43               	moviw [3]fsr1
  4579  0175  00A3               	movwf	(?_rotate+3)^(0+128)
  4580  0176  301A               	movlw	26
  4581  0177  00B0               	movwf	(??_AsicPreCalc+1)^(0+128)
  4582  0178  0830               	movf	(??_AsicPreCalc+1)^(0+128),w
  4583  0179  00A4               	movwf	(?_rotate^(0+128)+4)
  4584  017A  319D  25BD  3180   	fcall	_rotate
  4585  017D  0021               	movlb	1	; select bank1
  4586  017E  0823               	movf	(?_rotate+3)^(0+128),w
  4587  017F  0022               	movlb	2	; select bank2
  4588  0180  00D3               	movwf	(AsicPreCalc@y+3)^(0+256)
  4589  0181  0021               	movlb	1	; select bank1
  4590  0182  0822               	movf	(?_rotate+2)^(0+128),w
  4591  0183  0022               	movlb	2	; select bank2
  4592  0184  00D2               	movwf	(AsicPreCalc@y+2)^(0+256)
  4593  0185  0021               	movlb	1	; select bank1
  4594  0186  0821               	movf	(?_rotate+1)^(0+128),w
  4595  0187  0022               	movlb	2	; select bank2
  4596  0188  00D1               	movwf	(AsicPreCalc@y+1)^(0+256)
  4597  0189  0021               	movlb	1	; select bank1
  4598  018A  0820               	movf	?_rotate^(0+128),w
  4599  018B  0022               	movlb	2	; select bank2
  4600  018C  00D0               	movwf	AsicPreCalc@y^(0+256)
  4601                           
  4602                           ;asic.c: 336: z = rotate(m[4-n], 21);
  4603  018D  0358               	decf	AsicPreCalc@n^(0+256),w
  4604  018E  3AFF               	xorlw	255
  4605  018F  0021               	movlb	1	; select bank1
  4606  0190  00AF               	movwf	??_AsicPreCalc^(0+128)
  4607  0191  3001               	movlw	1
  4608  0192                     u4705:	
  4609  0192  35AF               	lslf	??_AsicPreCalc^(0+128),f
  4610  0193  3EFF               	addlw	-1
  4611  0194  1D03               	skipz
  4612  0195  2992               	goto	u4705
  4613  0196  352F               	lslf	??_AsicPreCalc^(0+128),w
  4614  0197  3E10               	addlw	16
  4615  0198  3E2C               	addlw	AsicPreCalc@m& (0+255)
  4616  0199  0086               	movwf	6
  4617  019A  3001               	movlw	1	; select bank2/3
  4618  019B  0087               	movwf	7
  4619  019C  3F40               	moviw [0]fsr1
  4620  019D  00A0               	movwf	?_rotate^(0+128)
  4621  019E  3F41               	moviw [1]fsr1
  4622  019F  00A1               	movwf	(?_rotate+1)^(0+128)
  4623  01A0  3F42               	moviw [2]fsr1
  4624  01A1  00A2               	movwf	(?_rotate+2)^(0+128)
  4625  01A2  3F43               	moviw [3]fsr1
  4626  01A3  00A3               	movwf	(?_rotate+3)^(0+128)
  4627  01A4  3015               	movlw	21
  4628  01A5  00B0               	movwf	(??_AsicPreCalc+1)^(0+128)
  4629  01A6  0830               	movf	(??_AsicPreCalc+1)^(0+128),w
  4630  01A7  00A4               	movwf	(?_rotate^(0+128)+4)
  4631  01A8  319D  25BD  3180   	fcall	_rotate
  4632  01AB  0021               	movlb	1	; select bank1
  4633  01AC  0823               	movf	(?_rotate+3)^(0+128),w
  4634  01AD  0022               	movlb	2	; select bank2
  4635  01AE  00CF               	movwf	(AsicPreCalc@z+3)^(0+256)
  4636  01AF  0021               	movlb	1	; select bank1
  4637  01B0  0822               	movf	(?_rotate+2)^(0+128),w
  4638  01B1  0022               	movlb	2	; select bank2
  4639  01B2  00CE               	movwf	(AsicPreCalc@z+2)^(0+256)
  4640  01B3  0021               	movlb	1	; select bank1
  4641  01B4  0821               	movf	(?_rotate+1)^(0+128),w
  4642  01B5  0022               	movlb	2	; select bank2
  4643  01B6  00CD               	movwf	(AsicPreCalc@z+1)^(0+256)
  4644  01B7  0021               	movlb	1	; select bank1
  4645  01B8  0820               	movf	?_rotate^(0+128),w
  4646  01B9  0022               	movlb	2	; select bank2
  4647  01BA  00CC               	movwf	AsicPreCalc@z^(0+256)
  4648                           
  4649                           ;asic.c: 337: z = y^z;
  4650  01BB  0850               	movf	AsicPreCalc@y^(0+256),w
  4651  01BC  064C               	xorwf	AsicPreCalc@z^(0+256),w
  4652  01BD  0021               	movlb	1	; select bank1
  4653  01BE  00AF               	movwf	??_AsicPreCalc^(0+128)
  4654  01BF  0022               	movlb	2	; select bank2
  4655  01C0  0851               	movf	(AsicPreCalc@y+1)^(0+256),w
  4656  01C1  064D               	xorwf	(AsicPreCalc@z+1)^(0+256),w
  4657  01C2  0021               	movlb	1	; select bank1
  4658  01C3  00B0               	movwf	(??_AsicPreCalc^(0+128)+1)
  4659  01C4  0022               	movlb	2	; select bank2
  4660  01C5  0852               	movf	(AsicPreCalc@y+2)^(0+256),w
  4661  01C6  064E               	xorwf	(AsicPreCalc@z+2)^(0+256),w
  4662  01C7  0021               	movlb	1	; select bank1
  4663  01C8  00B1               	movwf	(??_AsicPreCalc^(0+128)+2)
  4664  01C9  0022               	movlb	2	; select bank2
  4665  01CA  0853               	movf	(AsicPreCalc@y+3)^(0+256),w
  4666  01CB  064F               	xorwf	(AsicPreCalc@z+3)^(0+256),w
  4667  01CC  0021               	movlb	1	; select bank1
  4668  01CD  00B2               	movwf	(??_AsicPreCalc^(0+128)+3)
  4669  01CE  0832               	movf	(??_AsicPreCalc+3)^(0+128),w
  4670  01CF  0022               	movlb	2	; select bank2
  4671  01D0  00CF               	movwf	(AsicPreCalc@z+3)^(0+256)
  4672  01D1  0021               	movlb	1	; select bank1
  4673  01D2  0831               	movf	(??_AsicPreCalc+2)^(0+128),w
  4674  01D3  0022               	movlb	2	; select bank2
  4675  01D4  00CE               	movwf	(AsicPreCalc@z+2)^(0+256)
  4676  01D5  0021               	movlb	1	; select bank1
  4677  01D6  0830               	movf	(??_AsicPreCalc+1)^(0+128),w
  4678  01D7  0022               	movlb	2	; select bank2
  4679  01D8  00CD               	movwf	(AsicPreCalc@z+1)^(0+256)
  4680  01D9  0021               	movlb	1	; select bank1
  4681  01DA  082F               	movf	??_AsicPreCalc^(0+128),w
  4682  01DB  0022               	movlb	2	; select bank2
  4683  01DC  00CC               	movwf	AsicPreCalc@z^(0+256)
  4684                           
  4685                           ;asic.c: 338: y = rotate(m[4-n], 7);
  4686  01DD  0358               	decf	AsicPreCalc@n^(0+256),w
  4687  01DE  3AFF               	xorlw	255
  4688  01DF  0021               	movlb	1	; select bank1
  4689  01E0  00AF               	movwf	??_AsicPreCalc^(0+128)
  4690  01E1  3001               	movlw	1
  4691  01E2                     u4715:	
  4692  01E2  35AF               	lslf	??_AsicPreCalc^(0+128),f
  4693  01E3  3EFF               	addlw	-1
  4694  01E4  1D03               	skipz
  4695  01E5  29E2               	goto	u4715
  4696  01E6  352F               	lslf	??_AsicPreCalc^(0+128),w
  4697  01E7  3E10               	addlw	16
  4698  01E8  3E2C               	addlw	AsicPreCalc@m& (0+255)
  4699  01E9  0086               	movwf	6
  4700  01EA  3001               	movlw	1	; select bank2/3
  4701  01EB  0087               	movwf	7
  4702  01EC  3F40               	moviw [0]fsr1
  4703  01ED  00A0               	movwf	?_rotate^(0+128)
  4704  01EE  3F41               	moviw [1]fsr1
  4705  01EF  00A1               	movwf	(?_rotate+1)^(0+128)
  4706  01F0  3F42               	moviw [2]fsr1
  4707  01F1  00A2               	movwf	(?_rotate+2)^(0+128)
  4708  01F2  3F43               	moviw [3]fsr1
  4709  01F3  00A3               	movwf	(?_rotate+3)^(0+128)
  4710  01F4  3007               	movlw	7
  4711  01F5  00B0               	movwf	(??_AsicPreCalc+1)^(0+128)
  4712  01F6  0830               	movf	(??_AsicPreCalc+1)^(0+128),w
  4713  01F7  00A4               	movwf	(?_rotate^(0+128)+4)
  4714  01F8  319D  25BD  3180   	fcall	_rotate
  4715  01FB  0021               	movlb	1	; select bank1
  4716  01FC  0823               	movf	(?_rotate+3)^(0+128),w
  4717  01FD  0022               	movlb	2	; select bank2
  4718  01FE  00D3               	movwf	(AsicPreCalc@y+3)^(0+256)
  4719  01FF  0021               	movlb	1	; select bank1
  4720  0200  0822               	movf	(?_rotate+2)^(0+128),w
  4721  0201  0022               	movlb	2	; select bank2
  4722  0202  00D2               	movwf	(AsicPreCalc@y+2)^(0+256)
  4723  0203  0021               	movlb	1	; select bank1
  4724  0204  0821               	movf	(?_rotate+1)^(0+128),w
  4725  0205  0022               	movlb	2	; select bank2
  4726  0206  00D1               	movwf	(AsicPreCalc@y+1)^(0+256)
  4727  0207  0021               	movlb	1	; select bank1
  4728  0208  0820               	movf	?_rotate^(0+128),w
  4729  0209  0022               	movlb	2	; select bank2
  4730  020A  00D0               	movwf	AsicPreCalc@y^(0+256)
  4731                           
  4732                           ;asic.c: 339: z = y^z;
  4733  020B  0850               	movf	AsicPreCalc@y^(0+256),w
  4734  020C  064C               	xorwf	AsicPreCalc@z^(0+256),w
  4735  020D  0021               	movlb	1	; select bank1
  4736  020E  00AF               	movwf	??_AsicPreCalc^(0+128)
  4737  020F  0022               	movlb	2	; select bank2
  4738  0210  0851               	movf	(AsicPreCalc@y+1)^(0+256),w
  4739  0211  064D               	xorwf	(AsicPreCalc@z+1)^(0+256),w
  4740  0212  0021               	movlb	1	; select bank1
  4741  0213  00B0               	movwf	(??_AsicPreCalc^(0+128)+1)
  4742  0214  0022               	movlb	2	; select bank2
  4743  0215  0852               	movf	(AsicPreCalc@y+2)^(0+256),w
  4744  0216  064E               	xorwf	(AsicPreCalc@z+2)^(0+256),w
  4745  0217  0021               	movlb	1	; select bank1
  4746  0218  00B1               	movwf	(??_AsicPreCalc^(0+128)+2)
  4747  0219  0022               	movlb	2	; select bank2
  4748  021A  0853               	movf	(AsicPreCalc@y+3)^(0+256),w
  4749  021B  064F               	xorwf	(AsicPreCalc@z+3)^(0+256),w
  4750  021C  0021               	movlb	1	; select bank1
  4751  021D  00B2               	movwf	(??_AsicPreCalc^(0+128)+3)
  4752  021E  0832               	movf	(??_AsicPreCalc+3)^(0+128),w
  4753  021F  0022               	movlb	2	; select bank2
  4754  0220  00CF               	movwf	(AsicPreCalc@z+3)^(0+256)
  4755  0221  0021               	movlb	1	; select bank1
  4756  0222  0831               	movf	(??_AsicPreCalc+2)^(0+128),w
  4757  0223  0022               	movlb	2	; select bank2
  4758  0224  00CE               	movwf	(AsicPreCalc@z+2)^(0+256)
  4759  0225  0021               	movlb	1	; select bank1
  4760  0226  0830               	movf	(??_AsicPreCalc+1)^(0+128),w
  4761  0227  0022               	movlb	2	; select bank2
  4762  0228  00CD               	movwf	(AsicPreCalc@z+1)^(0+256)
  4763  0229  0021               	movlb	1	; select bank1
  4764  022A  082F               	movf	??_AsicPreCalc^(0+128),w
  4765  022B  0022               	movlb	2	; select bank2
  4766  022C  00CC               	movwf	AsicPreCalc@z^(0+256)
  4767                           
  4768                           ;asic.c: 340: m[7-n] = z+x;
  4769  022D  084C               	movf	AsicPreCalc@z^(0+256),w
  4770  022E  0754               	addwf	AsicPreCalc@x^(0+256),w
  4771  022F  0021               	movlb	1	; select bank1
  4772  0230  00AF               	movwf	??_AsicPreCalc^(0+128)
  4773  0231  0022               	movlb	2	; select bank2
  4774  0232  084D               	movf	(AsicPreCalc@z+1)^(0+256),w
  4775  0233  3D55               	addwfc	(AsicPreCalc@x+1)^(0+256),w
  4776  0234  0021               	movlb	1	; select bank1
  4777  0235  00B0               	movwf	(??_AsicPreCalc^(0+128)+1)
  4778  0236  0022               	movlb	2	; select bank2
  4779  0237  084E               	movf	(AsicPreCalc@z+2)^(0+256),w
  4780  0238  3D56               	addwfc	(AsicPreCalc@x+2)^(0+256),w
  4781  0239  0021               	movlb	1	; select bank1
  4782  023A  00B1               	movwf	(??_AsicPreCalc^(0+128)+2)
  4783  023B  0022               	movlb	2	; select bank2
  4784  023C  084F               	movf	(AsicPreCalc@z+3)^(0+256),w
  4785  023D  3D57               	addwfc	(AsicPreCalc@x+3)^(0+256),w
  4786  023E  0021               	movlb	1	; select bank1
  4787  023F  00B2               	movwf	(??_AsicPreCalc^(0+128)+3)
  4788  0240  0022               	movlb	2	; select bank2
  4789  0241  0358               	decf	AsicPreCalc@n^(0+256),w
  4790  0242  3AFF               	xorlw	255
  4791  0243  0021               	movlb	1	; select bank1
  4792  0244  00B3               	movwf	(??_AsicPreCalc+4)^(0+128)
  4793  0245  3001               	movlw	1
  4794  0246                     u4725:	
  4795  0246  35B3               	lslf	(??_AsicPreCalc+4)^(0+128),f
  4796  0247  3EFF               	addlw	-1
  4797  0248  1D03               	skipz
  4798  0249  2A46               	goto	u4725
  4799  024A  3533               	lslf	(??_AsicPreCalc+4)^(0+128),w
  4800  024B  3E1C               	addlw	28
  4801  024C  3E2C               	addlw	AsicPreCalc@m& (0+255)
  4802  024D  0086               	movwf	6
  4803  024E  3001               	movlw	1	; select bank2/3
  4804  024F  0087               	movwf	7
  4805  0250  082F               	movf	??_AsicPreCalc^(0+128),w
  4806  0251  3FC0               	movwi [0]fsr1
  4807  0252  0830               	movf	(??_AsicPreCalc+1)^(0+128),w
  4808  0253  3FC1               	movwi [1]fsr1
  4809  0254  0831               	movf	(??_AsicPreCalc+2)^(0+128),w
  4810  0255  3FC2               	movwi [2]fsr1
  4811  0256  0832               	movf	(??_AsicPreCalc+3)^(0+128),w
  4812  0257  3FC3               	movwi [3]fsr1
  4813                           
  4814                           ;asic.c: 341: m[3-n] = m[3-n] + m[7-n];
  4815  0258  0022               	movlb	2	; select bank2
  4816  0259  0358               	decf	AsicPreCalc@n^(0+256),w
  4817  025A  3AFF               	xorlw	255
  4818  025B  0021               	movlb	1	; select bank1
  4819  025C  00AF               	movwf	??_AsicPreCalc^(0+128)
  4820  025D  3001               	movlw	1
  4821  025E                     u4735:	
  4822  025E  35AF               	lslf	??_AsicPreCalc^(0+128),f
  4823  025F  3EFF               	addlw	-1
  4824  0260  1D03               	skipz
  4825  0261  2A5E               	goto	u4735
  4826  0262  352F               	lslf	??_AsicPreCalc^(0+128),w
  4827  0263  3E1C               	addlw	28
  4828  0264  3E2C               	addlw	AsicPreCalc@m& (0+255)
  4829  0265  0086               	movwf	6
  4830  0266  3001               	movlw	1	; select bank2/3
  4831  0267  0087               	movwf	7
  4832  0268  3F40               	moviw [0]fsr1
  4833  0269  00B0               	movwf	(??_AsicPreCalc+1)^(0+128)
  4834  026A  3F41               	moviw [1]fsr1
  4835  026B  00B1               	movwf	((??_AsicPreCalc+1)^(0+128)+1)
  4836  026C  3F42               	moviw [2]fsr1
  4837  026D  00B2               	movwf	((??_AsicPreCalc+1)^(0+128)+2)
  4838  026E  3F43               	moviw [3]fsr1
  4839  026F  00B3               	movwf	((??_AsicPreCalc+1)^(0+128)+3)
  4840  0270  0022               	movlb	2	; select bank2
  4841  0271  0358               	decf	AsicPreCalc@n^(0+256),w
  4842  0272  3AFF               	xorlw	255
  4843  0273  0021               	movlb	1	; select bank1
  4844  0274  00B4               	movwf	(??_AsicPreCalc+5)^(0+128)
  4845  0275  3001               	movlw	1
  4846  0276                     u4745:	
  4847  0276  35B4               	lslf	(??_AsicPreCalc+5)^(0+128),f
  4848  0277  3EFF               	addlw	-1
  4849  0278  1D03               	skipz
  4850  0279  2A76               	goto	u4745
  4851  027A  3534               	lslf	(??_AsicPreCalc+5)^(0+128),w
  4852  027B  3E0C               	addlw	12
  4853  027C  3E2C               	addlw	AsicPreCalc@m& (0+255)
  4854  027D  0086               	movwf	6
  4855  027E  3001               	movlw	1	; select bank2/3
  4856  027F  0087               	movwf	7
  4857  0280  3F40               	moviw [0]fsr1
  4858  0281  07B0               	addwf	(??_AsicPreCalc+1)^(0+128),f
  4859  0282  3F41               	moviw [1]fsr1
  4860  0283  3DB1               	addwfc	((??_AsicPreCalc+1)^(0+128)+1),f
  4861  0284  3F42               	moviw [2]fsr1
  4862  0285  3DB2               	addwfc	((??_AsicPreCalc+1)^(0+128)+2),f
  4863  0286  3F43               	moviw [3]fsr1
  4864  0287  3DB3               	addwfc	((??_AsicPreCalc+1)^(0+128)+3),f
  4865  0288  0022               	movlb	2	; select bank2
  4866  0289  0358               	decf	AsicPreCalc@n^(0+256),w
  4867  028A  3AFF               	xorlw	255
  4868  028B  0021               	movlb	1	; select bank1
  4869  028C  00B5               	movwf	(??_AsicPreCalc+6)^(0+128)
  4870  028D  3001               	movlw	1
  4871  028E                     u4755:	
  4872  028E  35B5               	lslf	(??_AsicPreCalc+6)^(0+128),f
  4873  028F  3EFF               	addlw	-1
  4874  0290  1D03               	skipz
  4875  0291  2A8E               	goto	u4755
  4876  0292  3535               	lslf	(??_AsicPreCalc+6)^(0+128),w
  4877  0293  3E0C               	addlw	12
  4878  0294  3E2C               	addlw	AsicPreCalc@m& (0+255)
  4879  0295  0086               	movwf	6
  4880  0296  3001               	movlw	1	; select bank2/3
  4881  0297  0087               	movwf	7
  4882  0298  0830               	movf	(??_AsicPreCalc+1)^(0+128),w
  4883  0299  3FC0               	movwi [0]fsr1
  4884  029A  0831               	movf	(??_AsicPreCalc+2)^(0+128),w
  4885  029B  3FC1               	movwi [1]fsr1
  4886  029C  0832               	movf	(??_AsicPreCalc+3)^(0+128),w
  4887  029D  3FC2               	movwi [2]fsr1
  4888  029E  0833               	movf	(??_AsicPreCalc+4)^(0+128),w
  4889  029F  3FC3               	movwi [3]fsr1
  4890                           
  4891                           ;asic.c: 342: x = rotate(m[((0-n)&7)], 30);
  4892  02A0  0022               	movlb	2	; select bank2
  4893  02A1  0358               	decf	AsicPreCalc@n^(0+256),w
  4894  02A2  3AFF               	xorlw	255
  4895  02A3  3907               	andlw	7
  4896  02A4  0021               	movlb	1	; select bank1
  4897  02A5  00AF               	movwf	??_AsicPreCalc^(0+128)
  4898  02A6  3001               	movlw	1
  4899  02A7                     u4765:	
  4900  02A7  35AF               	lslf	??_AsicPreCalc^(0+128),f
  4901  02A8  3EFF               	addlw	-1
  4902  02A9  1D03               	skipz
  4903  02AA  2AA7               	goto	u4765
  4904  02AB  352F               	lslf	??_AsicPreCalc^(0+128),w
  4905  02AC  3E2C               	addlw	AsicPreCalc@m& (0+255)
  4906  02AD  0086               	movwf	6
  4907  02AE  3001               	movlw	1	; select bank2/3
  4908  02AF  0087               	movwf	7
  4909  02B0  3F40               	moviw [0]fsr1
  4910  02B1  00A0               	movwf	?_rotate^(0+128)
  4911  02B2  3F41               	moviw [1]fsr1
  4912  02B3  00A1               	movwf	(?_rotate+1)^(0+128)
  4913  02B4  3F42               	moviw [2]fsr1
  4914  02B5  00A2               	movwf	(?_rotate+2)^(0+128)
  4915  02B6  3F43               	moviw [3]fsr1
  4916  02B7  00A3               	movwf	(?_rotate+3)^(0+128)
  4917  02B8  301E               	movlw	30
  4918  02B9  00B0               	movwf	(??_AsicPreCalc+1)^(0+128)
  4919  02BA  0830               	movf	(??_AsicPreCalc+1)^(0+128),w
  4920  02BB  00A4               	movwf	(?_rotate^(0+128)+4)
  4921  02BC  319D  25BD  3180   	fcall	_rotate
  4922  02BF  0021               	movlb	1	; select bank1
  4923  02C0  0823               	movf	(?_rotate+3)^(0+128),w
  4924  02C1  0022               	movlb	2	; select bank2
  4925  02C2  00D7               	movwf	(AsicPreCalc@x+3)^(0+256)
  4926  02C3  0021               	movlb	1	; select bank1
  4927  02C4  0822               	movf	(?_rotate+2)^(0+128),w
  4928  02C5  0022               	movlb	2	; select bank2
  4929  02C6  00D6               	movwf	(AsicPreCalc@x+2)^(0+256)
  4930  02C7  0021               	movlb	1	; select bank1
  4931  02C8  0821               	movf	(?_rotate+1)^(0+128),w
  4932  02C9  0022               	movlb	2	; select bank2
  4933  02CA  00D5               	movwf	(AsicPreCalc@x+1)^(0+256)
  4934  02CB  0021               	movlb	1	; select bank1
  4935  02CC  0820               	movf	?_rotate^(0+128),w
  4936  02CD  0022               	movlb	2	; select bank2
  4937  02CE  00D4               	movwf	AsicPreCalc@x^(0+256)
  4938                           
  4939                           ;asic.c: 343: y = rotate(m[((0-n)&7)], 19);
  4940  02CF  0358               	decf	AsicPreCalc@n^(0+256),w
  4941  02D0  3AFF               	xorlw	255
  4942  02D1  3907               	andlw	7
  4943  02D2  0021               	movlb	1	; select bank1
  4944  02D3  00AF               	movwf	??_AsicPreCalc^(0+128)
  4945  02D4  3001               	movlw	1
  4946  02D5                     u4775:	
  4947  02D5  35AF               	lslf	??_AsicPreCalc^(0+128),f
  4948  02D6  3EFF               	addlw	-1
  4949  02D7  1D03               	skipz
  4950  02D8  2AD5               	goto	u4775
  4951  02D9  352F               	lslf	??_AsicPreCalc^(0+128),w
  4952  02DA  3E2C               	addlw	AsicPreCalc@m& (0+255)
  4953  02DB  0086               	movwf	6
  4954  02DC  3001               	movlw	1	; select bank2/3
  4955  02DD  0087               	movwf	7
  4956  02DE  3F40               	moviw [0]fsr1
  4957  02DF  00A0               	movwf	?_rotate^(0+128)
  4958  02E0  3F41               	moviw [1]fsr1
  4959  02E1  00A1               	movwf	(?_rotate+1)^(0+128)
  4960  02E2  3F42               	moviw [2]fsr1
  4961  02E3  00A2               	movwf	(?_rotate+2)^(0+128)
  4962  02E4  3F43               	moviw [3]fsr1
  4963  02E5  00A3               	movwf	(?_rotate+3)^(0+128)
  4964  02E6  3013               	movlw	19
  4965  02E7  00B0               	movwf	(??_AsicPreCalc+1)^(0+128)
  4966  02E8  0830               	movf	(??_AsicPreCalc+1)^(0+128),w
  4967  02E9  00A4               	movwf	(?_rotate^(0+128)+4)
  4968  02EA  319D  25BD  3180   	fcall	_rotate
  4969  02ED  0021               	movlb	1	; select bank1
  4970  02EE  0823               	movf	(?_rotate+3)^(0+128),w
  4971  02EF  0022               	movlb	2	; select bank2
  4972  02F0  00D3               	movwf	(AsicPreCalc@y+3)^(0+256)
  4973  02F1  0021               	movlb	1	; select bank1
  4974  02F2  0822               	movf	(?_rotate+2)^(0+128),w
  4975  02F3  0022               	movlb	2	; select bank2
  4976  02F4  00D2               	movwf	(AsicPreCalc@y+2)^(0+256)
  4977  02F5  0021               	movlb	1	; select bank1
  4978  02F6  0821               	movf	(?_rotate+1)^(0+128),w
  4979  02F7  0022               	movlb	2	; select bank2
  4980  02F8  00D1               	movwf	(AsicPreCalc@y+1)^(0+256)
  4981  02F9  0021               	movlb	1	; select bank1
  4982  02FA  0820               	movf	?_rotate^(0+128),w
  4983  02FB  0022               	movlb	2	; select bank2
  4984  02FC  00D0               	movwf	AsicPreCalc@y^(0+256)
  4985                           
  4986                           ;asic.c: 344: y = y^x;
  4987  02FD  0850               	movf	AsicPreCalc@y^(0+256),w
  4988  02FE  0654               	xorwf	AsicPreCalc@x^(0+256),w
  4989  02FF  0021               	movlb	1	; select bank1
  4990  0300  00AF               	movwf	??_AsicPreCalc^(0+128)
  4991  0301  0022               	movlb	2	; select bank2
  4992  0302  0851               	movf	(AsicPreCalc@y+1)^(0+256),w
  4993  0303  0655               	xorwf	(AsicPreCalc@x+1)^(0+256),w
  4994  0304  0021               	movlb	1	; select bank1
  4995  0305  00B0               	movwf	(??_AsicPreCalc^(0+128)+1)
  4996  0306  0022               	movlb	2	; select bank2
  4997  0307  0852               	movf	(AsicPreCalc@y+2)^(0+256),w
  4998  0308  0656               	xorwf	(AsicPreCalc@x+2)^(0+256),w
  4999  0309  0021               	movlb	1	; select bank1
  5000  030A  00B1               	movwf	(??_AsicPreCalc^(0+128)+2)
  5001  030B  0022               	movlb	2	; select bank2
  5002  030C  0853               	movf	(AsicPreCalc@y+3)^(0+256),w
  5003  030D  0657               	xorwf	(AsicPreCalc@x+3)^(0+256),w
  5004  030E  0021               	movlb	1	; select bank1
  5005  030F  00B2               	movwf	(??_AsicPreCalc^(0+128)+3)
  5006  0310  0832               	movf	(??_AsicPreCalc+3)^(0+128),w
  5007  0311  0022               	movlb	2	; select bank2
  5008  0312  00D3               	movwf	(AsicPreCalc@y+3)^(0+256)
  5009  0313  0021               	movlb	1	; select bank1
  5010  0314  0831               	movf	(??_AsicPreCalc+2)^(0+128),w
  5011  0315  0022               	movlb	2	; select bank2
  5012  0316  00D2               	movwf	(AsicPreCalc@y+2)^(0+256)
  5013  0317  0021               	movlb	1	; select bank1
  5014  0318  0830               	movf	(??_AsicPreCalc+1)^(0+128),w
  5015  0319  0022               	movlb	2	; select bank2
  5016  031A  00D1               	movwf	(AsicPreCalc@y+1)^(0+256)
  5017  031B  0021               	movlb	1	; select bank1
  5018  031C  082F               	movf	??_AsicPreCalc^(0+128),w
  5019  031D  0022               	movlb	2	; select bank2
  5020  031E  00D0               	movwf	AsicPreCalc@y^(0+256)
  5021                           
  5022                           ;asic.c: 345: x = rotate(m[((0-n)&7)], 10);
  5023  031F  0358               	decf	AsicPreCalc@n^(0+256),w
  5024  0320  3AFF               	xorlw	255
  5025  0321  3907               	andlw	7
  5026  0322  0021               	movlb	1	; select bank1
  5027  0323  00AF               	movwf	??_AsicPreCalc^(0+128)
  5028  0324  3001               	movlw	1
  5029  0325                     u4785:	
  5030  0325  35AF               	lslf	??_AsicPreCalc^(0+128),f
  5031  0326  3EFF               	addlw	-1
  5032  0327  1D03               	skipz
  5033  0328  2B25               	goto	u4785
  5034  0329  352F               	lslf	??_AsicPreCalc^(0+128),w
  5035  032A  3E2C               	addlw	AsicPreCalc@m& (0+255)
  5036  032B  0086               	movwf	6
  5037  032C  3001               	movlw	1	; select bank2/3
  5038  032D  0087               	movwf	7
  5039  032E  3F40               	moviw [0]fsr1
  5040  032F  00A0               	movwf	?_rotate^(0+128)
  5041  0330  3F41               	moviw [1]fsr1
  5042  0331  00A1               	movwf	(?_rotate+1)^(0+128)
  5043  0332  3F42               	moviw [2]fsr1
  5044  0333  00A2               	movwf	(?_rotate+2)^(0+128)
  5045  0334  3F43               	moviw [3]fsr1
  5046  0335  00A3               	movwf	(?_rotate+3)^(0+128)
  5047  0336  300A               	movlw	10
  5048  0337  00B0               	movwf	(??_AsicPreCalc+1)^(0+128)
  5049  0338  0830               	movf	(??_AsicPreCalc+1)^(0+128),w
  5050  0339  00A4               	movwf	(?_rotate^(0+128)+4)
  5051  033A  319D  25BD  3180   	fcall	_rotate
  5052  033D  0021               	movlb	1	; select bank1
  5053  033E  0823               	movf	(?_rotate+3)^(0+128),w
  5054  033F  0022               	movlb	2	; select bank2
  5055  0340  00D7               	movwf	(AsicPreCalc@x+3)^(0+256)
  5056  0341  0021               	movlb	1	; select bank1
  5057  0342  0822               	movf	(?_rotate+2)^(0+128),w
  5058  0343  0022               	movlb	2	; select bank2
  5059  0344  00D6               	movwf	(AsicPreCalc@x+2)^(0+256)
  5060  0345  0021               	movlb	1	; select bank1
  5061  0346  0821               	movf	(?_rotate+1)^(0+128),w
  5062  0347  0022               	movlb	2	; select bank2
  5063  0348  00D5               	movwf	(AsicPreCalc@x+1)^(0+256)
  5064  0349  0021               	movlb	1	; select bank1
  5065  034A  0820               	movf	?_rotate^(0+128),w
  5066  034B  0022               	movlb	2	; select bank2
  5067  034C  00D4               	movwf	AsicPreCalc@x^(0+256)
  5068                           
  5069                           ;asic.c: 346: y = x^y;
  5070  034D  0854               	movf	AsicPreCalc@x^(0+256),w
  5071  034E  0650               	xorwf	AsicPreCalc@y^(0+256),w
  5072  034F  0021               	movlb	1	; select bank1
  5073  0350  00AF               	movwf	??_AsicPreCalc^(0+128)
  5074  0351  0022               	movlb	2	; select bank2
  5075  0352  0855               	movf	(AsicPreCalc@x+1)^(0+256),w
  5076  0353  0651               	xorwf	(AsicPreCalc@y+1)^(0+256),w
  5077  0354  0021               	movlb	1	; select bank1
  5078  0355  00B0               	movwf	(??_AsicPreCalc^(0+128)+1)
  5079  0356  0022               	movlb	2	; select bank2
  5080  0357  0856               	movf	(AsicPreCalc@x+2)^(0+256),w
  5081  0358  0652               	xorwf	(AsicPreCalc@y+2)^(0+256),w
  5082  0359  0021               	movlb	1	; select bank1
  5083  035A  00B1               	movwf	(??_AsicPreCalc^(0+128)+2)
  5084  035B  0022               	movlb	2	; select bank2
  5085  035C  0857               	movf	(AsicPreCalc@x+3)^(0+256),w
  5086  035D  0653               	xorwf	(AsicPreCalc@y+3)^(0+256),w
  5087  035E  0021               	movlb	1	; select bank1
  5088  035F  00B2               	movwf	(??_AsicPreCalc^(0+128)+3)
  5089  0360  0832               	movf	(??_AsicPreCalc+3)^(0+128),w
  5090  0361  0022               	movlb	2	; select bank2
  5091  0362  00D3               	movwf	(AsicPreCalc@y+3)^(0+256)
  5092  0363  0021               	movlb	1	; select bank1
  5093  0364  0831               	movf	(??_AsicPreCalc+2)^(0+128),w
  5094  0365  0022               	movlb	2	; select bank2
  5095  0366  00D2               	movwf	(AsicPreCalc@y+2)^(0+256)
  5096  0367  0021               	movlb	1	; select bank1
  5097  0368  0830               	movf	(??_AsicPreCalc+1)^(0+128),w
  5098  0369  0022               	movlb	2	; select bank2
  5099  036A  00D1               	movwf	(AsicPreCalc@y+1)^(0+256)
  5100  036B  0021               	movlb	1	; select bank1
  5101  036C  082F               	movf	??_AsicPreCalc^(0+128),w
  5102  036D  0022               	movlb	2	; select bank2
  5103  036E  00D0               	movwf	AsicPreCalc@y^(0+256)
  5104                           
  5105                           ;asic.c: 347: x = m[((0-n)&7)] | m[((1-n)&7)];
  5106  036F  0358               	decf	AsicPreCalc@n^(0+256),w
  5107  0370  3AFF               	xorlw	255
  5108  0371  3E01               	addlw	1
  5109  0372  3907               	andlw	7
  5110  0373  0021               	movlb	1	; select bank1
  5111  0374  00AF               	movwf	??_AsicPreCalc^(0+128)
  5112  0375  3001               	movlw	1
  5113  0376                     u4795:	
  5114  0376  35AF               	lslf	??_AsicPreCalc^(0+128),f
  5115  0377  3EFF               	addlw	-1
  5116  0378  1D03               	skipz
  5117  0379  2B76               	goto	u4795
  5118  037A  352F               	lslf	??_AsicPreCalc^(0+128),w
  5119  037B  3E2C               	addlw	AsicPreCalc@m& (0+255)
  5120  037C  0086               	movwf	6
  5121  037D  3001               	movlw	1	; select bank2/3
  5122  037E  0087               	movwf	7
  5123  037F  3F40               	moviw [0]fsr1
  5124  0380  00B0               	movwf	(??_AsicPreCalc+1)^(0+128)
  5125  0381  3F41               	moviw [1]fsr1
  5126  0382  00B1               	movwf	((??_AsicPreCalc+1)^(0+128)+1)
  5127  0383  3F42               	moviw [2]fsr1
  5128  0384  00B2               	movwf	((??_AsicPreCalc+1)^(0+128)+2)
  5129  0385  3F43               	moviw [3]fsr1
  5130  0386  00B3               	movwf	((??_AsicPreCalc+1)^(0+128)+3)
  5131  0387  0022               	movlb	2	; select bank2
  5132  0388  0358               	decf	AsicPreCalc@n^(0+256),w
  5133  0389  3AFF               	xorlw	255
  5134  038A  3907               	andlw	7
  5135  038B  0021               	movlb	1	; select bank1
  5136  038C  00B4               	movwf	(??_AsicPreCalc+5)^(0+128)
  5137  038D  3001               	movlw	1
  5138  038E                     u4805:	
  5139  038E  35B4               	lslf	(??_AsicPreCalc+5)^(0+128),f
  5140  038F  3EFF               	addlw	-1
  5141  0390  1D03               	skipz
  5142  0391  2B8E               	goto	u4805
  5143  0392  3534               	lslf	(??_AsicPreCalc+5)^(0+128),w
  5144  0393  3E2C               	addlw	AsicPreCalc@m& (0+255)
  5145  0394  0086               	movwf	6
  5146  0395  3001               	movlw	1	; select bank2/3
  5147  0396  0087               	movwf	7
  5148  0397  3F40               	moviw [0]fsr1
  5149  0398  00B5               	movwf	(??_AsicPreCalc+6)^(0+128)
  5150  0399  3F41               	moviw [1]fsr1
  5151  039A  00B6               	movwf	((??_AsicPreCalc+6)^(0+128)+1)
  5152  039B  3F42               	moviw [2]fsr1
  5153  039C  00B7               	movwf	((??_AsicPreCalc+6)^(0+128)+2)
  5154  039D  3F43               	moviw [3]fsr1
  5155  039E  00B8               	movwf	((??_AsicPreCalc+6)^(0+128)+3)
  5156  039F  0830               	movf	(??_AsicPreCalc+1)^(0+128),w
  5157  03A0  0435               	iorwf	(??_AsicPreCalc+6)^(0+128),w
  5158  03A1  0022               	movlb	2	; select bank2
  5159  03A2  00D4               	movwf	AsicPreCalc@x^(0+256)
  5160  03A3  0021               	movlb	1	; select bank1
  5161  03A4  0831               	movf	(??_AsicPreCalc+2)^(0+128),w
  5162  03A5  0436               	iorwf	(??_AsicPreCalc+7)^(0+128),w
  5163  03A6  0022               	movlb	2	; select bank2
  5164  03A7  00D5               	movwf	(AsicPreCalc@x+1)^(0+256)
  5165  03A8  0021               	movlb	1	; select bank1
  5166  03A9  0832               	movf	(??_AsicPreCalc+3)^(0+128),w
  5167  03AA  0437               	iorwf	(??_AsicPreCalc+8)^(0+128),w
  5168  03AB  0022               	movlb	2	; select bank2
  5169  03AC  00D6               	movwf	(AsicPreCalc@x+2)^(0+256)
  5170  03AD  0021               	movlb	1	; select bank1
  5171  03AE  0833               	movf	(??_AsicPreCalc+4)^(0+128),w
  5172  03AF  0438               	iorwf	(??_AsicPreCalc+9)^(0+128),w
  5173  03B0  0022               	movlb	2	; select bank2
  5174  03B1  00D7               	movwf	(AsicPreCalc@x+3)^(0+256)
  5175                           
  5176                           ;asic.c: 348: x = m[((2-n)&7)] & x;
  5177  03B2  0358               	decf	AsicPreCalc@n^(0+256),w
  5178  03B3  3AFF               	xorlw	255
  5179  03B4  3E02               	addlw	2
  5180  03B5  3907               	andlw	7
  5181  03B6  0021               	movlb	1	; select bank1
  5182  03B7  00AF               	movwf	??_AsicPreCalc^(0+128)
  5183  03B8  3001               	movlw	1
  5184  03B9                     u4815:	
  5185  03B9  35AF               	lslf	??_AsicPreCalc^(0+128),f
  5186  03BA  3EFF               	addlw	-1
  5187  03BB  1D03               	skipz
  5188  03BC  2BB9               	goto	u4815
  5189  03BD  352F               	lslf	??_AsicPreCalc^(0+128),w
  5190  03BE  3E2C               	addlw	AsicPreCalc@m& (0+255)
  5191  03BF  0086               	movwf	6
  5192  03C0  3001               	movlw	1	; select bank2/3
  5193  03C1  0087               	movwf	7
  5194  03C2  0022               	movlb	2	; select bank2
  5195  03C3  0854               	movf	AsicPreCalc@x^(0+256),w
  5196  03C4  0501               	andwf	1,w
  5197  03C5  0021               	movlb	1	; select bank1
  5198  03C6  00B0               	movwf	(??_AsicPreCalc+1)^(0+128)
  5199  03C7  3141               	addfsr 1,1
  5200  03C8  0022               	movlb	2	; select bank2
  5201  03C9  0855               	movf	(AsicPreCalc@x+1)^(0+256),w
  5202  03CA  0501               	andwf	1,w
  5203  03CB  0021               	movlb	1	; select bank1
  5204  03CC  00B1               	movwf	((??_AsicPreCalc+1)^(0+128)+1)
  5205  03CD  3141               	addfsr 1,1
  5206  03CE  0022               	movlb	2	; select bank2
  5207  03CF  0856               	movf	(AsicPreCalc@x+2)^(0+256),w
  5208  03D0  0501               	andwf	1,w
  5209  03D1  0021               	movlb	1	; select bank1
  5210  03D2  00B2               	movwf	((??_AsicPreCalc+1)^(0+128)+2)
  5211  03D3  3141               	addfsr 1,1
  5212  03D4  0022               	movlb	2	; select bank2
  5213  03D5  0857               	movf	(AsicPreCalc@x+3)^(0+256),w
  5214  03D6  0501               	andwf	1,w
  5215  03D7  0021               	movlb	1	; select bank1
  5216  03D8  00B3               	movwf	((??_AsicPreCalc+1)^(0+128)+3)
  5217  03D9  0833               	movf	(??_AsicPreCalc+4)^(0+128),w
  5218  03DA  0022               	movlb	2	; select bank2
  5219  03DB  00D7               	movwf	(AsicPreCalc@x+3)^(0+256)
  5220  03DC  0021               	movlb	1	; select bank1
  5221  03DD  0832               	movf	(??_AsicPreCalc+3)^(0+128),w
  5222  03DE  0022               	movlb	2	; select bank2
  5223  03DF  00D6               	movwf	(AsicPreCalc@x+2)^(0+256)
  5224  03E0  0021               	movlb	1	; select bank1
  5225  03E1  0831               	movf	(??_AsicPreCalc+2)^(0+128),w
  5226  03E2  0022               	movlb	2	; select bank2
  5227  03E3  00D5               	movwf	(AsicPreCalc@x+1)^(0+256)
  5228  03E4  0021               	movlb	1	; select bank1
  5229  03E5  0830               	movf	(??_AsicPreCalc+1)^(0+128),w
  5230  03E6  0022               	movlb	2	; select bank2
  5231  03E7  00D4               	movwf	AsicPreCalc@x^(0+256)
  5232                           
  5233                           ;asic.c: 349: z = m[((0-n)&7)] & m[((1-n)&7)];
  5234  03E8  0358               	decf	AsicPreCalc@n^(0+256),w
  5235  03E9  3AFF               	xorlw	255
  5236  03EA  3E01               	addlw	1
  5237  03EB  3907               	andlw	7
  5238  03EC  0021               	movlb	1	; select bank1
  5239  03ED  00AF               	movwf	??_AsicPreCalc^(0+128)
  5240  03EE  3001               	movlw	1
  5241  03EF                     u4825:	
  5242  03EF  35AF               	lslf	??_AsicPreCalc^(0+128),f
  5243  03F0  3EFF               	addlw	-1
  5244  03F1  1D03               	skipz
  5245  03F2  2BEF               	goto	u4825
  5246  03F3  352F               	lslf	??_AsicPreCalc^(0+128),w
  5247  03F4  3E2C               	addlw	AsicPreCalc@m& (0+255)
  5248  03F5  0086               	movwf	6
  5249  03F6  3001               	movlw	1	; select bank2/3
  5250  03F7  0087               	movwf	7
  5251  03F8  3F40               	moviw [0]fsr1
  5252  03F9  00B0               	movwf	(??_AsicPreCalc+1)^(0+128)
  5253  03FA  3F41               	moviw [1]fsr1
  5254  03FB  00B1               	movwf	((??_AsicPreCalc+1)^(0+128)+1)
  5255  03FC  3F42               	moviw [2]fsr1
  5256  03FD  00B2               	movwf	((??_AsicPreCalc+1)^(0+128)+2)
  5257  03FE  3F43               	moviw [3]fsr1
  5258  03FF  00B3               	movwf	((??_AsicPreCalc+1)^(0+128)+3)
  5259  0400  0022               	movlb	2	; select bank2
  5260  0401  0358               	decf	AsicPreCalc@n^(0+256),w
  5261  0402  3AFF               	xorlw	255
  5262  0403  3907               	andlw	7
  5263  0404  0021               	movlb	1	; select bank1
  5264  0405  00B4               	movwf	(??_AsicPreCalc+5)^(0+128)
  5265  0406  3001               	movlw	1
  5266  0407                     u4835:	
  5267  0407  35B4               	lslf	(??_AsicPreCalc+5)^(0+128),f
  5268  0408  3EFF               	addlw	-1
  5269  0409  1D03               	skipz
  5270  040A  2C07               	goto	u4835
  5271  040B  3534               	lslf	(??_AsicPreCalc+5)^(0+128),w
  5272  040C  3E2C               	addlw	AsicPreCalc@m& (0+255)
  5273  040D  0086               	movwf	6
  5274  040E  3001               	movlw	1	; select bank2/3
  5275  040F  0087               	movwf	7
  5276  0410  3F40               	moviw [0]fsr1
  5277  0411  00B5               	movwf	(??_AsicPreCalc+6)^(0+128)
  5278  0412  3F41               	moviw [1]fsr1
  5279  0413  00B6               	movwf	((??_AsicPreCalc+6)^(0+128)+1)
  5280  0414  3F42               	moviw [2]fsr1
  5281  0415  00B7               	movwf	((??_AsicPreCalc+6)^(0+128)+2)
  5282  0416  3F43               	moviw [3]fsr1
  5283  0417  00B8               	movwf	((??_AsicPreCalc+6)^(0+128)+3)
  5284  0418  0830               	movf	(??_AsicPreCalc+1)^(0+128),w
  5285  0419  0535               	andwf	(??_AsicPreCalc+6)^(0+128),w
  5286  041A  0022               	movlb	2	; select bank2
  5287  041B  00CC               	movwf	AsicPreCalc@z^(0+256)
  5288  041C  0021               	movlb	1	; select bank1
  5289  041D  0831               	movf	(??_AsicPreCalc+2)^(0+128),w
  5290  041E  0536               	andwf	(??_AsicPreCalc+7)^(0+128),w
  5291  041F  0022               	movlb	2	; select bank2
  5292  0420  00CD               	movwf	(AsicPreCalc@z+1)^(0+256)
  5293  0421  0021               	movlb	1	; select bank1
  5294  0422  0832               	movf	(??_AsicPreCalc+3)^(0+128),w
  5295  0423  0537               	andwf	(??_AsicPreCalc+8)^(0+128),w
  5296  0424  0022               	movlb	2	; select bank2
  5297  0425  00CE               	movwf	(AsicPreCalc@z+2)^(0+256)
  5298  0426  0021               	movlb	1	; select bank1
  5299  0427  0833               	movf	(??_AsicPreCalc+4)^(0+128),w
  5300  0428  0538               	andwf	(??_AsicPreCalc+9)^(0+128),w
  5301  0429  0022               	movlb	2	; select bank2
  5302  042A  00CF               	movwf	(AsicPreCalc@z+3)^(0+256)
  5303                           
  5304                           ;asic.c: 350: x = x | z;
  5305  042B  0854               	movf	AsicPreCalc@x^(0+256),w
  5306  042C  044C               	iorwf	AsicPreCalc@z^(0+256),w
  5307  042D  0021               	movlb	1	; select bank1
  5308  042E  00AF               	movwf	??_AsicPreCalc^(0+128)
  5309  042F  0022               	movlb	2	; select bank2
  5310  0430  0855               	movf	(AsicPreCalc@x+1)^(0+256),w
  5311  0431  044D               	iorwf	(AsicPreCalc@z+1)^(0+256),w
  5312  0432  0021               	movlb	1	; select bank1
  5313  0433  00B0               	movwf	(??_AsicPreCalc^(0+128)+1)
  5314  0434  0022               	movlb	2	; select bank2
  5315  0435  0856               	movf	(AsicPreCalc@x+2)^(0+256),w
  5316  0436  044E               	iorwf	(AsicPreCalc@z+2)^(0+256),w
  5317  0437  0021               	movlb	1	; select bank1
  5318  0438  00B1               	movwf	(??_AsicPreCalc^(0+128)+2)
  5319  0439  0022               	movlb	2	; select bank2
  5320  043A  0857               	movf	(AsicPreCalc@x+3)^(0+256),w
  5321  043B  044F               	iorwf	(AsicPreCalc@z+3)^(0+256),w
  5322  043C  0021               	movlb	1	; select bank1
  5323  043D  00B2               	movwf	(??_AsicPreCalc^(0+128)+3)
  5324  043E  0832               	movf	(??_AsicPreCalc+3)^(0+128),w
  5325  043F  0022               	movlb	2	; select bank2
  5326  0440  00D7               	movwf	(AsicPreCalc@x+3)^(0+256)
  5327  0441  0021               	movlb	1	; select bank1
  5328  0442  0831               	movf	(??_AsicPreCalc+2)^(0+128),w
  5329  0443  0022               	movlb	2	; select bank2
  5330  0444  00D6               	movwf	(AsicPreCalc@x+2)^(0+256)
  5331  0445  0021               	movlb	1	; select bank1
  5332  0446  0830               	movf	(??_AsicPreCalc+1)^(0+128),w
  5333  0447  0022               	movlb	2	; select bank2
  5334  0448  00D5               	movwf	(AsicPreCalc@x+1)^(0+256)
  5335  0449  0021               	movlb	1	; select bank1
  5336  044A  082F               	movf	??_AsicPreCalc^(0+128),w
  5337  044B  0022               	movlb	2	; select bank2
  5338  044C  00D4               	movwf	AsicPreCalc@x^(0+256)
  5339                           
  5340                           ;asic.c: 351: m[7-n] += y + x;
  5341  044D  0850               	movf	AsicPreCalc@y^(0+256),w
  5342  044E  0754               	addwf	AsicPreCalc@x^(0+256),w
  5343  044F  0021               	movlb	1	; select bank1
  5344  0450  00AF               	movwf	??_AsicPreCalc^(0+128)
  5345  0451  0022               	movlb	2	; select bank2
  5346  0452  0851               	movf	(AsicPreCalc@y+1)^(0+256),w
  5347  0453  3D55               	addwfc	(AsicPreCalc@x+1)^(0+256),w
  5348  0454  0021               	movlb	1	; select bank1
  5349  0455  00B0               	movwf	(??_AsicPreCalc^(0+128)+1)
  5350  0456  0022               	movlb	2	; select bank2
  5351  0457  0852               	movf	(AsicPreCalc@y+2)^(0+256),w
  5352  0458  3D56               	addwfc	(AsicPreCalc@x+2)^(0+256),w
  5353  0459  0021               	movlb	1	; select bank1
  5354  045A  00B1               	movwf	(??_AsicPreCalc^(0+128)+2)
  5355  045B  0022               	movlb	2	; select bank2
  5356  045C  0853               	movf	(AsicPreCalc@y+3)^(0+256),w
  5357  045D  3D57               	addwfc	(AsicPreCalc@x+3)^(0+256),w
  5358  045E  0021               	movlb	1	; select bank1
  5359  045F  00B2               	movwf	(??_AsicPreCalc^(0+128)+3)
  5360  0460  0022               	movlb	2	; select bank2
  5361  0461  0358               	decf	AsicPreCalc@n^(0+256),w
  5362  0462  3AFF               	xorlw	255
  5363  0463  0021               	movlb	1	; select bank1
  5364  0464  00B3               	movwf	(??_AsicPreCalc+4)^(0+128)
  5365  0465  3001               	movlw	1
  5366  0466                     u4845:	
  5367  0466  35B3               	lslf	(??_AsicPreCalc+4)^(0+128),f
  5368  0467  3EFF               	addlw	-1
  5369  0468  1D03               	skipz
  5370  0469  2C66               	goto	u4845
  5371  046A  3533               	lslf	(??_AsicPreCalc+4)^(0+128),w
  5372  046B  3E1C               	addlw	28
  5373  046C  3E2C               	addlw	AsicPreCalc@m& (0+255)
  5374  046D  0086               	movwf	6
  5375  046E  3001               	movlw	1	; select bank2/3
  5376  046F  0087               	movwf	7
  5377  0470  082F               	movf	??_AsicPreCalc^(0+128),w
  5378  0471  0781               	addwf	1,f
  5379  0472  3141               	addfsr 1,1
  5380  0473  0830               	movf	(??_AsicPreCalc+1)^(0+128),w
  5381  0474  3D81               	addwfc	1,f
  5382  0475  3141               	addfsr 1,1
  5383  0476  0831               	movf	(??_AsicPreCalc+2)^(0+128),w
  5384  0477  3D81               	addwfc	1,f
  5385  0478  3141               	addfsr 1,1
  5386  0479  0832               	movf	(??_AsicPreCalc+3)^(0+128),w
  5387  047A  3D81               	addwfc	1,f
  5388                           
  5389                           ;asic.c: 353: PrecalcHashes[2-n] = m[7-n];
  5390  047B  0022               	movlb	2	; select bank2
  5391  047C  0358               	decf	AsicPreCalc@n^(0+256),w
  5392  047D  3AFF               	xorlw	255
  5393  047E  0021               	movlb	1	; select bank1
  5394  047F  00AF               	movwf	??_AsicPreCalc^(0+128)
  5395  0480  3001               	movlw	1
  5396  0481                     u4855:	
  5397  0481  35AF               	lslf	??_AsicPreCalc^(0+128),f
  5398  0482  3EFF               	addlw	-1
  5399  0483  1D03               	skipz
  5400  0484  2C81               	goto	u4855
  5401  0485  352F               	lslf	??_AsicPreCalc^(0+128),w
  5402  0486  3E1C               	addlw	28
  5403  0487  3E2C               	addlw	AsicPreCalc@m& (0+255)
  5404  0488  0086               	movwf	6
  5405  0489  3001               	movlw	1	; select bank2/3
  5406  048A  0087               	movwf	7
  5407  048B  3F40               	moviw [0]fsr1
  5408  048C  00B0               	movwf	(??_AsicPreCalc+1)^(0+128)
  5409  048D  3F41               	moviw [1]fsr1
  5410  048E  00B1               	movwf	((??_AsicPreCalc+1)^(0+128)+1)
  5411  048F  3F42               	moviw [2]fsr1
  5412  0490  00B2               	movwf	((??_AsicPreCalc+1)^(0+128)+2)
  5413  0491  3F43               	moviw [3]fsr1
  5414  0492  00B3               	movwf	((??_AsicPreCalc+1)^(0+128)+3)
  5415  0493  0022               	movlb	2	; select bank2
  5416  0494  0358               	decf	AsicPreCalc@n^(0+256),w
  5417  0495  3AFF               	xorlw	255
  5418  0496  0021               	movlb	1	; select bank1
  5419  0497  00B4               	movwf	(??_AsicPreCalc+5)^(0+128)
  5420  0498  3001               	movlw	1
  5421  0499                     u4865:	
  5422  0499  35B4               	lslf	(??_AsicPreCalc+5)^(0+128),f
  5423  049A  3EFF               	addlw	-1
  5424  049B  1D03               	skipz
  5425  049C  2C99               	goto	u4865
  5426  049D  3534               	lslf	(??_AsicPreCalc+5)^(0+128),w
  5427  049E  3E08               	addlw	8
  5428  049F  3E40               	addlw	_PrecalcHashes& (0+255)
  5429  04A0  0086               	movwf	6
  5430  04A1  3003               	movlw	3	; select bank6/7
  5431  04A2  0087               	movwf	7
  5432  04A3  0830               	movf	(??_AsicPreCalc+1)^(0+128),w
  5433  04A4  3FC0               	movwi [0]fsr1
  5434  04A5  0831               	movf	(??_AsicPreCalc+2)^(0+128),w
  5435  04A6  3FC1               	movwi [1]fsr1
  5436  04A7  0832               	movf	(??_AsicPreCalc+3)^(0+128),w
  5437  04A8  3FC2               	movwi [2]fsr1
  5438  04A9  0833               	movf	(??_AsicPreCalc+4)^(0+128),w
  5439  04AA  3FC3               	movwi [3]fsr1
  5440                           
  5441                           ;asic.c: 354: PrecalcHashes[5-n] = m[3-n];
  5442  04AB  0022               	movlb	2	; select bank2
  5443  04AC  0358               	decf	AsicPreCalc@n^(0+256),w
  5444  04AD  3AFF               	xorlw	255
  5445  04AE  0021               	movlb	1	; select bank1
  5446  04AF  00AF               	movwf	??_AsicPreCalc^(0+128)
  5447  04B0  3001               	movlw	1
  5448  04B1                     u4875:	
  5449  04B1  35AF               	lslf	??_AsicPreCalc^(0+128),f
  5450  04B2  3EFF               	addlw	-1
  5451  04B3  1D03               	skipz
  5452  04B4  2CB1               	goto	u4875
  5453  04B5  352F               	lslf	??_AsicPreCalc^(0+128),w
  5454  04B6  3E0C               	addlw	12
  5455  04B7  3E2C               	addlw	AsicPreCalc@m& (0+255)
  5456  04B8  0086               	movwf	6
  5457  04B9  3001               	movlw	1	; select bank2/3
  5458  04BA  0087               	movwf	7
  5459  04BB  3F40               	moviw [0]fsr1
  5460  04BC  00B0               	movwf	(??_AsicPreCalc+1)^(0+128)
  5461  04BD  3F41               	moviw [1]fsr1
  5462  04BE  00B1               	movwf	((??_AsicPreCalc+1)^(0+128)+1)
  5463  04BF  3F42               	moviw [2]fsr1
  5464  04C0  00B2               	movwf	((??_AsicPreCalc+1)^(0+128)+2)
  5465  04C1  3F43               	moviw [3]fsr1
  5466  04C2  00B3               	movwf	((??_AsicPreCalc+1)^(0+128)+3)
  5467  04C3  0022               	movlb	2	; select bank2
  5468  04C4  0358               	decf	AsicPreCalc@n^(0+256),w
  5469  04C5  3AFF               	xorlw	255
  5470  04C6  0021               	movlb	1	; select bank1
  5471  04C7  00B4               	movwf	(??_AsicPreCalc+5)^(0+128)
  5472  04C8  3001               	movlw	1
  5473  04C9                     u4885:	
  5474  04C9  35B4               	lslf	(??_AsicPreCalc+5)^(0+128),f
  5475  04CA  3EFF               	addlw	-1
  5476  04CB  1D03               	skipz
  5477  04CC  2CC9               	goto	u4885
  5478  04CD  3534               	lslf	(??_AsicPreCalc+5)^(0+128),w
  5479  04CE  3E14               	addlw	20
  5480  04CF  3E40               	addlw	_PrecalcHashes& (0+255)
  5481  04D0  0086               	movwf	6
  5482  04D1  3003               	movlw	3	; select bank6/7
  5483  04D2  0087               	movwf	7
  5484  04D3  0830               	movf	(??_AsicPreCalc+1)^(0+128),w
  5485  04D4  3FC0               	movwi [0]fsr1
  5486  04D5  0831               	movf	(??_AsicPreCalc+2)^(0+128),w
  5487  04D6  3FC1               	movwi [1]fsr1
  5488  04D7  0832               	movf	(??_AsicPreCalc+3)^(0+128),w
  5489  04D8  3FC2               	movwi [2]fsr1
  5490  04D9  0833               	movf	(??_AsicPreCalc+4)^(0+128),w
  5491  04DA  3FC3               	movwi [3]fsr1
  5492  04DB  3001               	movlw	1
  5493  04DC  00AF               	movwf	??_AsicPreCalc^(0+128)
  5494  04DD  082F               	movf	??_AsicPreCalc^(0+128),w
  5495  04DE  0022               	movlb	2	; select bank2
  5496  04DF  07D8               	addwf	AsicPreCalc@n^(0+256),f
  5497  04E0  2864               	goto	L5
  5498  04E1                     __end_of_AsicPreCalc:	
  5499                           
  5500                           	psect	text9
  5501  1DBD                     __ptext9:	
  5502 ;; *************** function _rotate *****************
  5503 ;; Defined at:
  5504 ;;		line 313 in file "asic.c"
  5505 ;; Parameters:    Size  Location     Type
  5506 ;;  x               4    0[BANK1 ] unsigned long 
  5507 ;;  y               1    4[BANK1 ] unsigned char 
  5508 ;; Auto vars:     Size  Location     Type
  5509 ;;		None
  5510 ;; Return value:  Size  Location     Type
  5511 ;;                  4    0[BANK1 ] unsigned long 
  5512 ;; Registers used:
  5513 ;;		wreg, status,2, status,0
  5514 ;; Tracked objects:
  5515 ;;		On entry : 0/0
  5516 ;;		On exit  : 0/0
  5517 ;;		Unchanged: 0/0
  5518 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5519 ;;      Params:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
  5520 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5521 ;;      Temps:          0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0
  5522 ;;      Totals:         0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0
  5523 ;;Total ram usage:       13 bytes
  5524 ;; Hardware stack levels used:    1
  5525 ;; Hardware stack levels required when called:    4
  5526 ;; This function calls:
  5527 ;;		Nothing
  5528 ;; This function is called by:
  5529 ;;		_AsicPreCalc
  5530 ;; This function uses a non-reentrant model
  5531 ;;
  5532                           
  5533                           
  5534                           ;psect for function _rotate
  5535  1DBD                     _rotate:	
  5536                           
  5537                           ;asic.c: 314: return ((x<<y) | (x>>(32-y)));
  5538                           
  5539                           ;incstack = 0
  5540                           ; Regs used in _rotate: [wreg+status,2+status,0]
  5541  1DBD  0021               	movlb	1	; select bank1
  5542  1DBE  0820               	movf	rotate@x^(0+128),w
  5543  1DBF  00A5               	movwf	??_rotate^(0+128)
  5544  1DC0  0821               	movf	(rotate@x+1)^(0+128),w
  5545  1DC1  00A6               	movwf	(??_rotate^(0+128)+1)
  5546  1DC2  0822               	movf	(rotate@x+2)^(0+128),w
  5547  1DC3  00A7               	movwf	(??_rotate^(0+128)+2)
  5548  1DC4  0823               	movf	(rotate@x+3)^(0+128),w
  5549  1DC5  00A8               	movwf	(??_rotate^(0+128)+3)
  5550  1DC6  0324               	decf	rotate@y^(0+128),w
  5551  1DC7  3AFF               	xorlw	255
  5552  1DC8  3E20               	addlw	32
  5553  1DC9  0A89               	incf	9,f
  5554  1DCA  2DD0               	goto	u4560
  5555  1DCB                     u4565:	
  5556  1DCB  1003               	clrc
  5557  1DCC  0CA8               	rrf	(??_rotate^(0+128)+3),f
  5558  1DCD  0CA7               	rrf	(??_rotate^(0+128)+2),f
  5559  1DCE  0CA6               	rrf	(??_rotate^(0+128)+1),f
  5560  1DCF  0CA5               	rrf	??_rotate^(0+128),f
  5561  1DD0                     u4560:	
  5562  1DD0  3EFF               	addlw	-1
  5563  1DD1  1D03               	skipz
  5564  1DD2  2DCB               	goto	u4565
  5565  1DD3  0820               	movf	rotate@x^(0+128),w
  5566  1DD4  00A9               	movwf	(??_rotate+4)^(0+128)
  5567  1DD5  0821               	movf	(rotate@x+1)^(0+128),w
  5568  1DD6  00AA               	movwf	((??_rotate+4)^(0+128)+1)
  5569  1DD7  0822               	movf	(rotate@x+2)^(0+128),w
  5570  1DD8  00AB               	movwf	((??_rotate+4)^(0+128)+2)
  5571  1DD9  0823               	movf	(rotate@x+3)^(0+128),w
  5572  1DDA  00AC               	movwf	((??_rotate+4)^(0+128)+3)
  5573  1DDB  0A24               	incf	rotate@y^(0+128),w
  5574  1DDC  2DE1               	goto	u4570
  5575  1DDD                     u4575:	
  5576  1DDD  35A9               	lslf	(??_rotate+4)^(0+128),f
  5577  1DDE  0DAA               	rlf	((??_rotate+4)^(0+128)+1),f
  5578  1DDF  0DAB               	rlf	((??_rotate+4)^(0+128)+2),f
  5579  1DE0  0DAC               	rlf	((??_rotate+4)^(0+128)+3),f
  5580  1DE1                     u4570:	
  5581  1DE1  0B89               	decfsz	9,f
  5582  1DE2  2DDD               	goto	u4575
  5583  1DE3  0829               	movf	(??_rotate+4)^(0+128),w
  5584  1DE4  04A5               	iorwf	??_rotate^(0+128),f
  5585  1DE5  082A               	movf	(??_rotate+5)^(0+128),w
  5586  1DE6  04A6               	iorwf	(??_rotate^(0+128)+1),f
  5587  1DE7  082B               	movf	(??_rotate+6)^(0+128),w
  5588  1DE8  04A7               	iorwf	(??_rotate^(0+128)+2),f
  5589  1DE9  082C               	movf	(??_rotate+7)^(0+128),w
  5590  1DEA  04A8               	iorwf	(??_rotate^(0+128)+3),f
  5591  1DEB  0828               	movf	(??_rotate+3)^(0+128),w
  5592  1DEC  00A3               	movwf	(?_rotate+3)^(0+128)
  5593  1DED  0827               	movf	(??_rotate+2)^(0+128),w
  5594  1DEE  00A2               	movwf	(?_rotate+2)^(0+128)
  5595  1DEF  0826               	movf	(??_rotate+1)^(0+128),w
  5596  1DF0  00A1               	movwf	(?_rotate+1)^(0+128)
  5597  1DF1  0825               	movf	??_rotate^(0+128),w
  5598  1DF2  00A0               	movwf	?_rotate^(0+128)
  5599  1DF3  0008               	return
  5600  1DF4                     __end_of_rotate:	
  5601                           
  5602                           	psect	text10
  5603  16D4                     __ptext10:	
  5604 ;; *************** function _SendAsicData *****************
  5605 ;; Defined at:
  5606 ;;		line 36 in file "asic.c"
  5607 ;; Parameters:    Size  Location     Type
  5608 ;;  work            2    2[BANK1 ] PTR struct _worktask
  5609 ;;		 -> WorkQue(180), 
  5610 ;; Auto vars:     Size  Location     Type
  5611 ;;		None
  5612 ;; Return value:  Size  Location     Type
  5613 ;;		None               void
  5614 ;; Registers used:
  5615 ;;		wreg, status,2, status,0, pclath, cstack
  5616 ;; Tracked objects:
  5617 ;;		On entry : 0/0
  5618 ;;		On exit  : 0/0
  5619 ;;		Unchanged: 0/0
  5620 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5621 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5622 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5623 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  5624 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
  5625 ;;Total ram usage:        6 bytes
  5626 ;; Hardware stack levels used:    1
  5627 ;; Hardware stack levels required when called:    5
  5628 ;; This function calls:
  5629 ;;		_Send32
  5630 ;; This function is called by:
  5631 ;;		_AsicPushWork
  5632 ;; This function uses a non-reentrant model
  5633 ;;
  5634                           
  5635                           
  5636                           ;psect for function _SendAsicData
  5637  16D4                     _SendAsicData:	
  5638                           
  5639                           ;asic.c: 37: GIE = 0;
  5640                           
  5641                           ;incstack = 0
  5642                           ; Regs used in _SendAsicData: [wreg+status,2+status,0+pclath+cstack]
  5643  16D4  138B               	bcf	11,7	;volatile
  5644                           
  5645                           ;asic.c: 38: last_bit0 = 0x48; last_bit1 = 0x90;
  5646  16D5  3048               	movlw	72
  5647  16D6  0021               	movlb	1	; select bank1
  5648  16D7  00A4               	movwf	??_SendAsicData^(0+128)
  5649  16D8  0824               	movf	??_SendAsicData^(0+128),w
  5650  16D9  0022               	movlb	2	; select bank2
  5651  16DA  00ED               	movwf	_last_bit0^(0+256)
  5652  16DB  3090               	movlw	144
  5653  16DC  0021               	movlb	1	; select bank1
  5654  16DD  00A4               	movwf	??_SendAsicData^(0+128)
  5655  16DE  0824               	movf	??_SendAsicData^(0+128),w
  5656  16DF  0022               	movlb	2	; select bank2
  5657  16E0  00EE               	movwf	_last_bit1^(0+256)
  5658                           
  5659                           ;asic.c: 39: send32_data = (WORD)&ClockCfg; send32_count = 2;
  5660  16E1  30B9               	movlw	low _ClockCfg
  5661  16E2  00DB               	movwf	_send32_data^(0+256)
  5662  16E3  3001               	movlw	high _ClockCfg
  5663  16E4  00DC               	movwf	(_send32_data+1)^(0+256)
  5664  16E5  3002               	movlw	2
  5665  16E6  0021               	movlb	1	; select bank1
  5666  16E7  00A4               	movwf	??_SendAsicData^(0+128)
  5667  16E8  0824               	movf	??_SendAsicData^(0+128),w
  5668  16E9  0022               	movlb	2	; select bank2
  5669  16EA  00EF               	movwf	_send32_count^(0+256)
  5670                           
  5671                           ;asic.c: 40: Send32();
  5672  16EB  3188  20D8  3196   	fcall	_Send32
  5673                           
  5674                           ;asic.c: 41: send32_data = (WORD)&work->Merkle; send32_count = 3;
  5675  16EE  0021               	movlb	1	; select bank1
  5676  16EF  0822               	movf	SendAsicData@work^(0+128),w
  5677  16F0  3E21               	addlw	33
  5678  16F1  0022               	movlb	2	; select bank2
  5679  16F2  00DB               	movwf	_send32_data^(0+256)
  5680  16F3  3000               	movlw	0
  5681  16F4  0021               	movlb	1	; select bank1
  5682  16F5  3D23               	addwfc	(SendAsicData@work+1)^(0+128),w
  5683  16F6  0022               	movlb	2	; select bank2
  5684  16F7  00DC               	movwf	(_send32_data+1)^(0+256)
  5685  16F8  3003               	movlw	3
  5686  16F9  0021               	movlb	1	; select bank1
  5687  16FA  00A4               	movwf	??_SendAsicData^(0+128)
  5688  16FB  0824               	movf	??_SendAsicData^(0+128),w
  5689  16FC  0022               	movlb	2	; select bank2
  5690  16FD  00EF               	movwf	_send32_count^(0+256)
  5691                           
  5692                           ;asic.c: 42: Send32();
  5693  16FE  3188  20D8  3196   	fcall	_Send32
  5694                           
  5695                           ;asic.c: 43: send32_data = (WORD)&PrecalcHashes[1]; send32_count = 5;
  5696  1701  3044               	movlw	low (_PrecalcHashes+4)
  5697  1702  0022               	movlb	2	; select bank2
  5698  1703  00DB               	movwf	_send32_data^(0+256)
  5699  1704  3003               	movlw	high (_PrecalcHashes+4)
  5700  1705  00DC               	movwf	(_send32_data+1)^(0+256)
  5701  1706  3005               	movlw	5
  5702  1707  0021               	movlb	1	; select bank1
  5703  1708  00A4               	movwf	??_SendAsicData^(0+128)
  5704  1709  0824               	movf	??_SendAsicData^(0+128),w
  5705  170A  0022               	movlb	2	; select bank2
  5706  170B  00EF               	movwf	_send32_count^(0+256)
  5707                           
  5708                           ;asic.c: 44: Send32();
  5709  170C  3188  20D8  3196   	fcall	_Send32
  5710                           
  5711                           ;asic.c: 45: send32_data = (WORD)&work->MidState; send32_count = 8;
  5712  170F  0021               	movlb	1	; select bank1
  5713  1710  0822               	movf	SendAsicData@work^(0+128),w
  5714  1711  3E01               	addlw	1
  5715  1712  0022               	movlb	2	; select bank2
  5716  1713  00DB               	movwf	_send32_data^(0+256)
  5717  1714  3000               	movlw	0
  5718  1715  0021               	movlb	1	; select bank1
  5719  1716  3D23               	addwfc	(SendAsicData@work+1)^(0+128),w
  5720  1717  0022               	movlb	2	; select bank2
  5721  1718  00DC               	movwf	(_send32_data+1)^(0+256)
  5722  1719  3008               	movlw	8
  5723  171A  0021               	movlb	1	; select bank1
  5724  171B  00A4               	movwf	??_SendAsicData^(0+128)
  5725  171C  0824               	movf	??_SendAsicData^(0+128),w
  5726  171D  0022               	movlb	2	; select bank2
  5727  171E  00EF               	movwf	_send32_count^(0+256)
  5728                           
  5729                           ;asic.c: 46: Send32();
  5730  171F  3188  20D8  3196   	fcall	_Send32
  5731                           
  5732                           ;asic.c: 47: send32_data = (WORD)&PrecalcHashes; send32_count = 1;
  5733  1722  3040               	movlw	low _PrecalcHashes
  5734  1723  0022               	movlb	2	; select bank2
  5735  1724  00DB               	movwf	_send32_data^(0+256)
  5736  1725  3003               	movlw	high _PrecalcHashes
  5737  1726  00DC               	movwf	(_send32_data+1)^(0+256)
  5738  1727  01EF               	clrf	_send32_count^(0+256)
  5739  1728  0AEF               	incf	_send32_count^(0+256),f
  5740                           
  5741                           ;asic.c: 48: Send32();
  5742  1729  3188  20D8  3196   	fcall	_Send32
  5743                           
  5744                           ;asic.c: 49: last_bit0 = last_bit1 = 0x50;
  5745  172C  3050               	movlw	80
  5746  172D  0022               	movlb	2	; select bank2
  5747  172E  00EE               	movwf	_last_bit1^(0+256)
  5748  172F  0021               	movlb	1	; select bank1
  5749  1730  00A4               	movwf	??_SendAsicData^(0+128)
  5750  1731  0824               	movf	??_SendAsicData^(0+128),w
  5751  1732  0022               	movlb	2	; select bank2
  5752  1733  00ED               	movwf	_last_bit0^(0+256)
  5753                           
  5754                           ;asic.c: 50: send32_data = (WORD)&NonceRanges; send32_count = BankSize;
  5755  1734  3020               	movlw	low _NonceRanges
  5756  1735  00DB               	movwf	_send32_data^(0+256)
  5757  1736  3003               	movlw	high _NonceRanges
  5758  1737  00DC               	movwf	(_send32_data+1)^(0+256)
  5759  1738  0023               	movlb	3	; select bank3
  5760  1739  0865               	movf	_BankSize^(0+384),w
  5761  173A  0021               	movlb	1	; select bank1
  5762  173B  00A4               	movwf	??_SendAsicData^(0+128)
  5763  173C  0824               	movf	??_SendAsicData^(0+128),w
  5764  173D  0022               	movlb	2	; select bank2
  5765  173E  00EF               	movwf	_send32_count^(0+256)
  5766                           
  5767                           ;asic.c: 51: Send32();
  5768  173F  3188  20D8         	fcall	_Send32
  5769                           
  5770                           ;asic.c: 52: LATC = 0xD8;;
  5771  1741  30D8               	movlw	216
  5772  1742  0022               	movlb	2	; select bank2
  5773  1743  008E               	movwf	14	;volatile
  5774                           
  5775                           ;asic.c: 53: GIE = 1;
  5776  1744  178B               	bsf	11,7	;volatile
  5777                           
  5778                           ;asic.c: 54: ClockCfg[0] = ClockCfg[0] & ~0x00000002;
  5779  1745  30FD               	movlw	253
  5780  1746  0023               	movlb	3	; select bank3
  5781  1747  0539               	andwf	_ClockCfg^(0+384),w
  5782  1748  0021               	movlb	1	; select bank1
  5783  1749  00A4               	movwf	??_SendAsicData^(0+128)
  5784  174A  30FF               	movlw	255
  5785  174B  0023               	movlb	3	; select bank3
  5786  174C  053A               	andwf	(_ClockCfg+1)^(0+384),w
  5787  174D  0021               	movlb	1	; select bank1
  5788  174E  00A5               	movwf	(??_SendAsicData^(0+128)+1)
  5789  174F  30FF               	movlw	255
  5790  1750  0023               	movlb	3	; select bank3
  5791  1751  053B               	andwf	(_ClockCfg+2)^(0+384),w
  5792  1752  0021               	movlb	1	; select bank1
  5793  1753  00A6               	movwf	(??_SendAsicData^(0+128)+2)
  5794  1754  30FF               	movlw	255
  5795  1755  0023               	movlb	3	; select bank3
  5796  1756  053C               	andwf	(_ClockCfg+3)^(0+384),w
  5797  1757  0021               	movlb	1	; select bank1
  5798  1758  00A7               	movwf	(??_SendAsicData^(0+128)+3)
  5799  1759  0827               	movf	(??_SendAsicData+3)^(0+128),w
  5800  175A  0023               	movlb	3	; select bank3
  5801  175B  00BC               	movwf	(_ClockCfg+3)^(0+384)
  5802  175C  0021               	movlb	1	; select bank1
  5803  175D  0826               	movf	(??_SendAsicData+2)^(0+128),w
  5804  175E  0023               	movlb	3	; select bank3
  5805  175F  00BB               	movwf	(_ClockCfg+2)^(0+384)
  5806  1760  0021               	movlb	1	; select bank1
  5807  1761  0825               	movf	(??_SendAsicData+1)^(0+128),w
  5808  1762  0023               	movlb	3	; select bank3
  5809  1763  00BA               	movwf	(_ClockCfg+1)^(0+384)
  5810  1764  0021               	movlb	1	; select bank1
  5811  1765  0824               	movf	??_SendAsicData^(0+128),w
  5812  1766  0023               	movlb	3	; select bank3
  5813  1767  00B9               	movwf	_ClockCfg^(0+384)
  5814  1768  0008               	return
  5815  1769                     __end_of_SendAsicData:	
  5816                           
  5817                           	psect	text11
  5818  08D8                     __ptext11:	
  5819 ;; *************** function _Send32 *****************
  5820 ;; Defined at:
  5821 ;;		line 58 in file "asic.c"
  5822 ;; Parameters:    Size  Location     Type
  5823 ;;		None
  5824 ;; Auto vars:     Size  Location     Type
  5825 ;;		None
  5826 ;; Return value:  Size  Location     Type
  5827 ;;		None               void
  5828 ;; Registers used:
  5829 ;;		None
  5830 ;; Tracked objects:
  5831 ;;		On entry : 0/0
  5832 ;;		On exit  : 0/0
  5833 ;;		Unchanged: 0/0
  5834 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5835 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5836 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5837 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5838 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5839 ;;Total ram usage:        0 bytes
  5840 ;; Hardware stack levels used:    1
  5841 ;; Hardware stack levels required when called:    4
  5842 ;; This function calls:
  5843 ;;		Nothing
  5844 ;; This function is called by:
  5845 ;;		_SendAsicData
  5846 ;; This function uses a non-reentrant model
  5847 ;;
  5848                           
  5849                           
  5850                           ;psect for function _Send32
  5851  08D8                     _Send32:	
  5852                           
  5853                           ;incstack = 0
  5854                           ; Regs used in _Send32: []
  5855  08D8  0022               	banksel	270	;# 
  5856  08D9  085B               	movf	_send32_data& (0+127),w	;# 
  5857  08DA  0086               	movwf	6	;# 
  5858  08DB  085C               	movf	(_send32_data+1)& (0+127),w	;# 
  5859  08DC  0087               	movwf	7	;# 
  5860  08DD                     next_word:	
  5861                           
  5862                           ;# 
  5863  08DD  3048               	movlw	72	;# 
  5864  08DE  018E               	clrf	14	;# 
  5865  08DF  1801               	btfsc	1,0	;# 
  5866  08E0  3090               	movlw	144	;# 
  5867  08E1  008E               	movwf	14	;# 
  5868  08E2  3048               	movlw	72	;# 
  5869  08E3  018E               	clrf	14	;# 
  5870  08E4  1881               	btfsc	1,1	;# 
  5871  08E5  3090               	movlw	144	;# 
  5872  08E6  008E               	movwf	14	;# 
  5873  08E7  3048               	movlw	72	;# 
  5874  08E8  018E               	clrf	14	;# 
  5875  08E9  1901               	btfsc	1,2	;# 
  5876  08EA  3090               	movlw	144	;# 
  5877  08EB  008E               	movwf	14	;# 
  5878  08EC  3048               	movlw	72	;# 
  5879  08ED  018E               	clrf	14	;# 
  5880  08EE  1981               	btfsc	1,3	;# 
  5881  08EF  3090               	movlw	144	;# 
  5882  08F0  008E               	movwf	14	;# 
  5883  08F1  3048               	movlw	72	;# 
  5884  08F2  018E               	clrf	14	;# 
  5885  08F3  1A01               	btfsc	1,4	;# 
  5886  08F4  3090               	movlw	144	;# 
  5887  08F5  008E               	movwf	14	;# 
  5888  08F6  3048               	movlw	72	;# 
  5889  08F7  018E               	clrf	14	;# 
  5890  08F8  1A81               	btfsc	1,5	;# 
  5891  08F9  3090               	movlw	144	;# 
  5892  08FA  008E               	movwf	14	;# 
  5893  08FB  3048               	movlw	72	;# 
  5894  08FC  018E               	clrf	14	;# 
  5895  08FD  1B01               	btfsc	1,6	;# 
  5896  08FE  3090               	movlw	144	;# 
  5897  08FF  008E               	movwf	14	;# 
  5898  0900  3048               	movlw	72	;# 
  5899  0901  018E               	clrf	14	;# 
  5900  0902  1B81               	btfsc	1,7	;# 
  5901  0903  3090               	movlw	144	;# 
  5902  0904  008E               	movwf	14	;# 
  5903  0905  3141               	addfsr 1,1	;# 
  5904  0906  3048               	movlw	72	;# 
  5905  0907  018E               	clrf	14	;# 
  5906  0908  1801               	btfsc	1,0	;# 
  5907  0909  3090               	movlw	144	;# 
  5908  090A  008E               	movwf	14	;# 
  5909  090B  3048               	movlw	72	;# 
  5910  090C  018E               	clrf	14	;# 
  5911  090D  1881               	btfsc	1,1	;# 
  5912  090E  3090               	movlw	144	;# 
  5913  090F  008E               	movwf	14	;# 
  5914  0910  3048               	movlw	72	;# 
  5915  0911  018E               	clrf	14	;# 
  5916  0912  1901               	btfsc	1,2	;# 
  5917  0913  3090               	movlw	144	;# 
  5918  0914  008E               	movwf	14	;# 
  5919  0915  3048               	movlw	72	;# 
  5920  0916  018E               	clrf	14	;# 
  5921  0917  1981               	btfsc	1,3	;# 
  5922  0918  3090               	movlw	144	;# 
  5923  0919  008E               	movwf	14	;# 
  5924  091A  3048               	movlw	72	;# 
  5925  091B  018E               	clrf	14	;# 
  5926  091C  1A01               	btfsc	1,4	;# 
  5927  091D  3090               	movlw	144	;# 
  5928  091E  008E               	movwf	14	;# 
  5929  091F  3048               	movlw	72	;# 
  5930  0920  018E               	clrf	14	;# 
  5931  0921  1A81               	btfsc	1,5	;# 
  5932  0922  3090               	movlw	144	;# 
  5933  0923  008E               	movwf	14	;# 
  5934  0924  3048               	movlw	72	;# 
  5935  0925  018E               	clrf	14	;# 
  5936  0926  1B01               	btfsc	1,6	;# 
  5937  0927  3090               	movlw	144	;# 
  5938  0928  008E               	movwf	14	;# 
  5939  0929  3048               	movlw	72	;# 
  5940  092A  018E               	clrf	14	;# 
  5941  092B  1B81               	btfsc	1,7	;# 
  5942  092C  3090               	movlw	144	;# 
  5943  092D  008E               	movwf	14	;# 
  5944  092E  3141               	addfsr 1,1	;# 
  5945  092F  3048               	movlw	72	;# 
  5946  0930  018E               	clrf	14	;# 
  5947  0931  1801               	btfsc	1,0	;# 
  5948  0932  3090               	movlw	144	;# 
  5949  0933  008E               	movwf	14	;# 
  5950  0934  3048               	movlw	72	;# 
  5951  0935  018E               	clrf	14	;# 
  5952  0936  1881               	btfsc	1,1	;# 
  5953  0937  3090               	movlw	144	;# 
  5954  0938  008E               	movwf	14	;# 
  5955  0939  3048               	movlw	72	;# 
  5956  093A  018E               	clrf	14	;# 
  5957  093B  1901               	btfsc	1,2	;# 
  5958  093C  3090               	movlw	144	;# 
  5959  093D  008E               	movwf	14	;# 
  5960  093E  3048               	movlw	72	;# 
  5961  093F  018E               	clrf	14	;# 
  5962  0940  1981               	btfsc	1,3	;# 
  5963  0941  3090               	movlw	144	;# 
  5964  0942  008E               	movwf	14	;# 
  5965  0943  3048               	movlw	72	;# 
  5966  0944  018E               	clrf	14	;# 
  5967  0945  1A01               	btfsc	1,4	;# 
  5968  0946  3090               	movlw	144	;# 
  5969  0947  008E               	movwf	14	;# 
  5970  0948  3048               	movlw	72	;# 
  5971  0949  018E               	clrf	14	;# 
  5972  094A  1A81               	btfsc	1,5	;# 
  5973  094B  3090               	movlw	144	;# 
  5974  094C  008E               	movwf	14	;# 
  5975  094D  3048               	movlw	72	;# 
  5976  094E  018E               	clrf	14	;# 
  5977  094F  1B01               	btfsc	1,6	;# 
  5978  0950  3090               	movlw	144	;# 
  5979  0951  008E               	movwf	14	;# 
  5980  0952  3048               	movlw	72	;# 
  5981  0953  018E               	clrf	14	;# 
  5982  0954  1B81               	btfsc	1,7	;# 
  5983  0955  3090               	movlw	144	;# 
  5984  0956  008E               	movwf	14	;# 
  5985  0957  3141               	addfsr 1,1	;# 
  5986  0958  3048               	movlw	72	;# 
  5987  0959  018E               	clrf	14	;# 
  5988  095A  1801               	btfsc	1,0	;# 
  5989  095B  3090               	movlw	144	;# 
  5990  095C  008E               	movwf	14	;# 
  5991  095D  3048               	movlw	72	;# 
  5992  095E  018E               	clrf	14	;# 
  5993  095F  1881               	btfsc	1,1	;# 
  5994  0960  3090               	movlw	144	;# 
  5995  0961  008E               	movwf	14	;# 
  5996  0962  3048               	movlw	72	;# 
  5997  0963  018E               	clrf	14	;# 
  5998  0964  1901               	btfsc	1,2	;# 
  5999  0965  3090               	movlw	144	;# 
  6000  0966  008E               	movwf	14	;# 
  6001  0967  3048               	movlw	72	;# 
  6002  0968  018E               	clrf	14	;# 
  6003  0969  1981               	btfsc	1,3	;# 
  6004  096A  3090               	movlw	144	;# 
  6005  096B  008E               	movwf	14	;# 
  6006  096C  3048               	movlw	72	;# 
  6007  096D  018E               	clrf	14	;# 
  6008  096E  1A01               	btfsc	1,4	;# 
  6009  096F  3090               	movlw	144	;# 
  6010  0970  008E               	movwf	14	;# 
  6011  0971  3048               	movlw	72	;# 
  6012  0972  018E               	clrf	14	;# 
  6013  0973  1A81               	btfsc	1,5	;# 
  6014  0974  3090               	movlw	144	;# 
  6015  0975  008E               	movwf	14	;# 
  6016  0976  3048               	movlw	72	;# 
  6017  0977  018E               	clrf	14	;# 
  6018  0978  1B01               	btfsc	1,6	;# 
  6019  0979  3090               	movlw	144	;# 
  6020  097A  008E               	movwf	14	;# 
  6021  097B  086D               	movf	_last_bit0& (0+127),w	;# 
  6022  097C  018E               	clrf	14	;# 
  6023  097D  1B81               	btfsc	1,7	;# 
  6024  097E  086E               	movf	_last_bit1& (0+127),w	;# 
  6025  097F  008E               	movwf	14	;# 
  6026  0980  3141               	addfsr 1,1	;# 
  6027  0981  0BEF               	decfsz	_send32_count& (0+127),f	;# 
  6028  0982  28DD               	goto	next_word	;# 
  6029  0983  0008               	return
  6030  0984                     __end_of_Send32:	
  6031                           
  6032                           	psect	text12
  6033  1C3D                     __ptext12:	
  6034 ;; *************** function _InitializeSystem *****************
  6035 ;; Defined at:
  6036 ;;		line 146 in file "main.c"
  6037 ;; Parameters:    Size  Location     Type
  6038 ;;		None
  6039 ;; Auto vars:     Size  Location     Type
  6040 ;;		None
  6041 ;; Return value:  Size  Location     Type
  6042 ;;		None               void
  6043 ;; Registers used:
  6044 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6045 ;; Tracked objects:
  6046 ;;		On entry : 0/0
  6047 ;;		On exit  : 0/0
  6048 ;;		Unchanged: 0/0
  6049 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6050 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6051 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6052 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6053 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6054 ;;Total ram usage:        0 bytes
  6055 ;; Hardware stack levels used:    1
  6056 ;; Hardware stack levels required when called:    7
  6057 ;; This function calls:
  6058 ;;		_USBDeviceInit
  6059 ;;		_UserInit
  6060 ;; This function is called by:
  6061 ;;		_main
  6062 ;; This function uses a non-reentrant model
  6063 ;;
  6064                           
  6065                           
  6066                           ;psect for function _InitializeSystem
  6067  1C3D                     _InitializeSystem:	
  6068                           
  6069                           ;main.c: 148: ANSELA = 0x00;
  6070                           
  6071                           ;incstack = 0
  6072                           ; Regs used in _InitializeSystem: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6073  1C3D  0023               	movlb	3	; select bank3
  6074  1C3E  018C               	clrf	12	;volatile
  6075                           
  6076                           ;main.c: 149: ANSELB = 0x00;
  6077  1C3F  018D               	clrf	13	;volatile
  6078                           
  6079                           ;main.c: 150: ANSELC = 0x04;
  6080  1C40  3004               	movlw	4
  6081  1C41  008E               	movwf	14	;volatile
  6082                           
  6083                           ;main.c: 153: OSCTUNE = 0;
  6084  1C42  0021               	movlb	1	; select bank1
  6085  1C43  0198               	clrf	24	;volatile
  6086                           
  6087                           ;main.c: 154: OSCCON = 0xFC;
  6088  1C44  30FC               	movlw	252
  6089  1C45  0099               	movwf	25	;volatile
  6090                           
  6091                           ;main.c: 155: ACTCON = 0x90;
  6092  1C46  3090               	movlw	144
  6093  1C47  0027               	movlb	7	; select bank7
  6094  1C48  009B               	movwf	27	;volatile
  6095                           
  6096                           ;main.c: 158: USBGenericOutHandle = 0;
  6097  1C49  0022               	movlb	2	; select bank2
  6098  1C4A  01E9               	clrf	_USBGenericOutHandle^(0+256)
  6099                           
  6100                           ;main.c: 159: USBGenericInHandle = 0;
  6101  1C4B  01E8               	clrf	_USBGenericInHandle^(0+256)
  6102                           
  6103                           ;main.c: 160: WQI = WQX = 0;
  6104  1C4C  0020               	movlb	0	; select bank0
  6105  1C4D  01EE               	clrf	_WQX
  6106  1C4E  0021               	movlb	1	; select bank1
  6107  1C4F  01EF               	clrf	_WQI^(0+128)
  6108                           
  6109                           ;main.c: 162: UserInit();
  6110  1C50  319B  23B6  319C   	fcall	_UserInit
  6111                           
  6112                           ;main.c: 164: USBDeviceInit();
  6113  1C53  3189  2184         	fcall	_USBDeviceInit
  6114  1C55  0008               	return
  6115  1C56                     __end_of_InitializeSystem:	
  6116                           
  6117                           	psect	text13
  6118  1BB6                     __ptext13:	
  6119 ;; *************** function _UserInit *****************
  6120 ;; Defined at:
  6121 ;;		line 170 in file "main.c"
  6122 ;; Parameters:    Size  Location     Type
  6123 ;;		None
  6124 ;; Auto vars:     Size  Location     Type
  6125 ;;		None
  6126 ;; Return value:  Size  Location     Type
  6127 ;;		None               void
  6128 ;; Registers used:
  6129 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6130 ;; Tracked objects:
  6131 ;;		On entry : 0/0
  6132 ;;		On exit  : 0/0
  6133 ;;		Unchanged: 0/0
  6134 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6135 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6136 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6137 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6138 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6139 ;;Total ram usage:        0 bytes
  6140 ;; Hardware stack levels used:    1
  6141 ;; Hardware stack levels required when called:    6
  6142 ;; This function calls:
  6143 ;;		_DetectAsics
  6144 ;;		_InitFAN
  6145 ;;		_InitTempSensor
  6146 ;;		_InitWorkTick
  6147 ;;		_InitResultRx
  6148 ;; This function is called by:
  6149 ;;		_InitializeSystem
  6150 ;; This function uses a non-reentrant model
  6151 ;;
  6152                           
  6153                           
  6154                           ;psect for function _UserInit
  6155  1BB6                     _UserInit:	
  6156                           
  6157                           ;main.c: 171: TRISAbits.TRISA5 = 0; LATAbits.LATA5 = 1;;
  6158                           
  6159                           ;incstack = 0
  6160                           ; Regs used in _UserInit: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6161  1BB6  0021               	movlb	1	; select bank1
  6162  1BB7  128C               	bcf	12,5	;volatile
  6163  1BB8  0022               	movlb	2	; select bank2
  6164  1BB9  168C               	bsf	12,5	;volatile
  6165                           
  6166                           ;main.c: 172: InitTempSensor();
  6167  1BBA  319B  23DE  319B   	fcall	_InitTempSensor
  6168                           
  6169                           ;main.c: 173: InitFAN();
  6170  1BBD  319C  2456  319B   	fcall	_InitFAN
  6171                           
  6172                           ;main.c: 174: InitWorkTick();
  6173  1BC0  319B  23C9  319B   	fcall	_InitWorkTick
  6174                           
  6175                           ;main.c: 176: InitResultRx();
  6176  1BC3  319B  23A3  319B   	fcall	_InitResultRx
  6177                           
  6178                           ;main.c: 177: DetectAsics();
  6179  1BC6  318C  244D         	fcall	_DetectAsics
  6180  1BC8  0008               	return
  6181  1BC9                     __end_of_UserInit:	
  6182                           
  6183                           	psect	text14
  6184  1BA3                     __ptext14:	
  6185 ;; *************** function _InitResultRx *****************
  6186 ;; Defined at:
  6187 ;;		line 312 in file "klondike.c"
  6188 ;; Parameters:    Size  Location     Type
  6189 ;;		None
  6190 ;; Auto vars:     Size  Location     Type
  6191 ;;		None
  6192 ;; Return value:  Size  Location     Type
  6193 ;;		None               void
  6194 ;; Registers used:
  6195 ;;		wreg, status,2
  6196 ;; Tracked objects:
  6197 ;;		On entry : 0/0
  6198 ;;		On exit  : 0/0
  6199 ;;		Unchanged: 0/0
  6200 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6201 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6202 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6203 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6204 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6205 ;;Total ram usage:        0 bytes
  6206 ;; Hardware stack levels used:    1
  6207 ;; Hardware stack levels required when called:    4
  6208 ;; This function calls:
  6209 ;;		Nothing
  6210 ;; This function is called by:
  6211 ;;		_UserInit
  6212 ;; This function uses a non-reentrant model
  6213 ;;
  6214                           
  6215                           
  6216                           ;psect for function _InitResultRx
  6217  1BA3                     _InitResultRx:	
  6218                           
  6219                           ;klondike.c: 313: ResultQC = 0;
  6220                           
  6221                           ;incstack = 0
  6222                           ; Regs used in _InitResultRx: [wreg+status,2]
  6223  1BA3  0022               	movlb	2	; select bank2
  6224  1BA4  01E2               	clrf	_ResultQC^(0+256)
  6225                           
  6226                           ;klondike.c: 314: TXSTAbits.SYNC = 1;
  6227  1BA5  0023               	movlb	3	; select bank3
  6228  1BA6  161E               	bsf	30,4	;volatile
  6229                           
  6230                           ;klondike.c: 315: RCSTAbits.SPEN = 1;
  6231  1BA7  179D               	bsf	29,7	;volatile
  6232                           
  6233                           ;klondike.c: 316: TXSTAbits.CSRC = 0;
  6234  1BA8  139E               	bcf	30,7	;volatile
  6235                           
  6236                           ;klondike.c: 317: BAUDCONbits.SCKP = 0;
  6237  1BA9  121F               	bcf	31,4	;volatile
  6238                           
  6239                           ;klondike.c: 318: BAUDCONbits.BRG16 = 1;
  6240  1BAA  159F               	bsf	31,3	;volatile
  6241                           
  6242                           ;klondike.c: 319: ANSELBbits.ANSB5 = 0;
  6243  1BAB  128D               	bcf	13,5	;volatile
  6244                           
  6245                           ;klondike.c: 320: IOCBPbits.IOCBP7 = 1;
  6246  1BAC  0027               	movlb	7	; select bank7
  6247  1BAD  1794               	bsf	20,7	;volatile
  6248                           
  6249                           ;klondike.c: 321: INTCONbits.IOCIE = 1;
  6250  1BAE  158B               	bsf	11,3	;volatile
  6251                           
  6252                           ;klondike.c: 322: IOCBF = 0;
  6253  1BAF  0196               	clrf	22	;volatile
  6254                           
  6255                           ;klondike.c: 323: INTCONbits.GIE = 1;
  6256  1BB0  178B               	bsf	11,7	;volatile
  6257                           
  6258                           ;klondike.c: 324: RCSTAbits.CREN = 1;
  6259  1BB1  0023               	movlb	3	; select bank3
  6260  1BB2  161D               	bsf	29,4	;volatile
  6261                           
  6262                           ;klondike.c: 325: RCREG = 0xFF;
  6263  1BB3  30FF               	movlw	255
  6264  1BB4  0099               	movwf	25	;volatile
  6265  1BB5  0008               	return
  6266  1BB6                     __end_of_InitResultRx:	
  6267                           
  6268                           	psect	text15
  6269  1BC9                     __ptext15:	
  6270 ;; *************** function _InitWorkTick *****************
  6271 ;; Defined at:
  6272 ;;		line 296 in file "klondike.c"
  6273 ;; Parameters:    Size  Location     Type
  6274 ;;		None
  6275 ;; Auto vars:     Size  Location     Type
  6276 ;;		None
  6277 ;; Return value:  Size  Location     Type
  6278 ;;		None               void
  6279 ;; Registers used:
  6280 ;;		wreg, status,2, status,0
  6281 ;; Tracked objects:
  6282 ;;		On entry : 0/0
  6283 ;;		On exit  : 0/0
  6284 ;;		Unchanged: 0/0
  6285 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6286 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6287 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6288 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6289 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6290 ;;Total ram usage:        0 bytes
  6291 ;; Hardware stack levels used:    1
  6292 ;; Hardware stack levels required when called:    4
  6293 ;; This function calls:
  6294 ;;		Nothing
  6295 ;; This function is called by:
  6296 ;;		_UserInit
  6297 ;; This function uses a non-reentrant model
  6298 ;;
  6299                           
  6300                           
  6301                           ;psect for function _InitWorkTick
  6302  1BC9                     _InitWorkTick:	
  6303                           
  6304                           ;klondike.c: 297: TMR0CS = 0;
  6305                           
  6306                           ;incstack = 0
  6307                           ; Regs used in _InitWorkTick: [wreg+status,2+status,0]
  6308  1BC9  0021               	movlb	1	; select bank1
  6309  1BCA  1295               	bcf	21,5	;volatile
  6310                           
  6311                           ;klondike.c: 298: OPTION_REGbits.PSA = 0;
  6312  1BCB  1195               	bcf	21,3	;volatile
  6313                           
  6314                           ;klondike.c: 299: OPTION_REGbits.PS = 7;
  6315  1BCC  3007               	movlw	7
  6316  1BCD  0495               	iorwf	21,f	;volatile
  6317                           
  6318                           ;klondike.c: 300: TMR0 = HashTime;
  6319  1BCE  0020               	movlb	0	; select bank0
  6320  1BCF  086F               	movf	_HashTime,w
  6321  1BD0  0095               	movwf	21	;volatile
  6322                           
  6323                           ;klondike.c: 302: TRISCbits.TRISC7 = 0;
  6324  1BD1  0021               	movlb	1	; select bank1
  6325  1BD2  138E               	bcf	14,7	;volatile
  6326                           
  6327                           ;klondike.c: 303: TRISCbits.TRISC6 = 0;
  6328  1BD3  130E               	bcf	14,6	;volatile
  6329                           
  6330                           ;klondike.c: 304: TRISCbits.TRISC4 = 0;
  6331  1BD4  120E               	bcf	14,4	;volatile
  6332                           
  6333                           ;klondike.c: 305: TRISCbits.TRISC3 = 0;
  6334  1BD5  118E               	bcf	14,3	;volatile
  6335                           
  6336                           ;klondike.c: 306: LATC = 0xD8;;
  6337  1BD6  30D8               	movlw	216
  6338  1BD7  0022               	movlb	2	; select bank2
  6339  1BD8  008E               	movwf	14	;volatile
  6340                           
  6341                           ;klondike.c: 307: TRISAbits.TRISA4 = 0;
  6342  1BD9  0021               	movlb	1	; select bank1
  6343  1BDA  120C               	bcf	12,4	;volatile
  6344                           
  6345                           ;klondike.c: 308: LATAbits.LATA4 = 0;
  6346  1BDB  0022               	movlb	2	; select bank2
  6347  1BDC  120C               	bcf	12,4	;volatile
  6348  1BDD  0008               	return
  6349  1BDE                     __end_of_InitWorkTick:	
  6350                           
  6351                           	psect	text16
  6352  1BDE                     __ptext16:	
  6353 ;; *************** function _InitTempSensor *****************
  6354 ;; Defined at:
  6355 ;;		line 282 in file "klondike.c"
  6356 ;; Parameters:    Size  Location     Type
  6357 ;;		None
  6358 ;; Auto vars:     Size  Location     Type
  6359 ;;		None
  6360 ;; Return value:  Size  Location     Type
  6361 ;;		None               void
  6362 ;; Registers used:
  6363 ;;		wreg, status,2, status,0
  6364 ;; Tracked objects:
  6365 ;;		On entry : 0/0
  6366 ;;		On exit  : 0/0
  6367 ;;		Unchanged: 0/0
  6368 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6369 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6370 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6371 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6372 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6373 ;;Total ram usage:        1 bytes
  6374 ;; Hardware stack levels used:    1
  6375 ;; Hardware stack levels required when called:    4
  6376 ;; This function calls:
  6377 ;;		Nothing
  6378 ;; This function is called by:
  6379 ;;		_UserInit
  6380 ;; This function uses a non-reentrant model
  6381 ;;
  6382                           
  6383                           
  6384                           ;psect for function _InitTempSensor
  6385  1BDE                     _InitTempSensor:	
  6386                           
  6387                           ;klondike.c: 283: TRISCbits.TRISC2=1;
  6388                           
  6389                           ;incstack = 0
  6390                           ; Regs used in _InitTempSensor: [wreg+status,2+status,0]
  6391  1BDE  0021               	movlb	1	; select bank1
  6392  1BDF  150E               	bsf	14,2	;volatile
  6393                           
  6394                           ;klondike.c: 286: ADCON0bits.CHS = 6;
  6395  1BE0  081D               	movf	29,w	;volatile
  6396  1BE1  3983               	andlw	-125
  6397  1BE2  3818               	iorlw	24
  6398  1BE3  009D               	movwf	29	;volatile
  6399                           
  6400                           ;klondike.c: 287: ADCON0bits.ADON = 1;
  6401  1BE4  141D               	bsf	29,0	;volatile
  6402                           
  6403                           ;klondike.c: 288: ADCON1bits.ADFM = 0;
  6404  1BE5  139E               	bcf	30,7	;volatile
  6405                           
  6406                           ;klondike.c: 289: ADCON1bits.ADCS = 6;
  6407  1BE6  081E               	movf	30,w	;volatile
  6408  1BE7  398F               	andlw	-113
  6409  1BE8  3860               	iorlw	96
  6410  1BE9  009E               	movwf	30	;volatile
  6411                           
  6412                           ;klondike.c: 290: ADCON1bits.ADPREF = 0;
  6413  1BEA  30FC               	movlw	-4
  6414  1BEB  059E               	andwf	30,f	;volatile
  6415                           
  6416                           ;klondike.c: 291: ADCON2bits.TRIGSEL = 0;
  6417  1BEC  308F               	movlw	-113
  6418  1BED  059F               	andwf	31,f	;volatile
  6419                           
  6420                           ;klondike.c: 292: TempTarget = 143;
  6421  1BEE  308F               	movlw	143
  6422  1BEF  0020               	movlb	0	; select bank0
  6423  1BF0  00DE               	movwf	??_InitTempSensor
  6424  1BF1  085E               	movf	??_InitTempSensor,w
  6425  1BF2  0023               	movlb	3	; select bank3
  6426  1BF3  00E4               	movwf	_TempTarget^(0+384)
  6427  1BF4  0008               	return
  6428  1BF5                     __end_of_InitTempSensor:	
  6429                           
  6430                           	psect	text17
  6431  1C56                     __ptext17:	
  6432 ;; *************** function _InitFAN *****************
  6433 ;; Defined at:
  6434 ;;		line 262 in file "klondike.c"
  6435 ;; Parameters:    Size  Location     Type
  6436 ;;		None
  6437 ;; Auto vars:     Size  Location     Type
  6438 ;;		None
  6439 ;; Return value:  Size  Location     Type
  6440 ;;		None               void
  6441 ;; Registers used:
  6442 ;;		wreg, status,2, status,0
  6443 ;; Tracked objects:
  6444 ;;		On entry : 0/0
  6445 ;;		On exit  : 0/0
  6446 ;;		Unchanged: 0/0
  6447 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6448 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6449 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6450 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6451 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6452 ;;Total ram usage:        0 bytes
  6453 ;; Hardware stack levels used:    1
  6454 ;; Hardware stack levels required when called:    4
  6455 ;; This function calls:
  6456 ;;		Nothing
  6457 ;; This function is called by:
  6458 ;;		_UserInit
  6459 ;; This function uses a non-reentrant model
  6460 ;;
  6461                           
  6462                           
  6463                           ;psect for function _InitFAN
  6464  1C56                     _InitFAN:	
  6465                           
  6466                           ;klondike.c: 263: TRISCbits.TRISC5 = 1;
  6467                           
  6468                           ;incstack = 0
  6469                           ; Regs used in _InitFAN: [wreg+status,2+status,0]
  6470  1C56  0021               	movlb	1	; select bank1
  6471  1C57  168E               	bsf	14,5	;volatile
  6472                           
  6473                           ;klondike.c: 264: PWM1CON = 0;
  6474  1C58  002C               	movlb	12	; select bank12
  6475  1C59  0193               	clrf	19	;volatile
  6476                           
  6477                           ;klondike.c: 265: PR2 = 0xFF;
  6478  1C5A  30FF               	movlw	255
  6479  1C5B  0020               	movlb	0	; select bank0
  6480  1C5C  009B               	movwf	27	;volatile
  6481                           
  6482                           ;klondike.c: 266: PWM1CON = 0xC0;
  6483  1C5D  30C0               	movlw	192
  6484  1C5E  002C               	movlb	12	; select bank12
  6485  1C5F  0093               	movwf	19	;volatile
  6486                           
  6487                           ;klondike.c: 267: PWM1DCH = FanLevel = 230;
  6488  1C60  30E6               	movlw	230
  6489  1C61  0023               	movlb	3	; select bank3
  6490  1C62  00E3               	movwf	_FanLevel^(0+384)
  6491  1C63  002C               	movlb	12	; select bank12
  6492  1C64  0092               	movwf	18	;volatile
  6493                           
  6494                           ;klondike.c: 268: PWM1DCL = 0;
  6495  1C65  0191               	clrf	17	;volatile
  6496                           
  6497                           ;klondike.c: 269: TMR2IF = 0;
  6498  1C66  0020               	movlb	0	; select bank0
  6499  1C67  1091               	bcf	17,1	;volatile
  6500                           
  6501                           ;klondike.c: 270: T2CONbits.T2CKPS = 1;
  6502  1C68  081C               	movf	28,w	;volatile
  6503  1C69  39FC               	andlw	-4
  6504  1C6A  3801               	iorlw	1
  6505  1C6B  009C               	movwf	28	;volatile
  6506                           
  6507                           ;klondike.c: 271: TMR2ON = 1;
  6508  1C6C  151C               	bsf	28,2	;volatile
  6509                           
  6510                           ;klondike.c: 272: TRISCbits.TRISC5 = 0;
  6511  1C6D  0021               	movlb	1	; select bank1
  6512  1C6E  128E               	bcf	14,5	;volatile
  6513                           
  6514                           ;klondike.c: 273: PWM1OE=1;
  6515  1C6F  002C               	movlb	12	; select bank12
  6516  1C70  1713               	bsf	19,6	;volatile
  6517  1C71  0008               	return
  6518  1C72                     __end_of_InitFAN:	
  6519                           
  6520                           	psect	text18
  6521  0C4D                     __ptext18:	
  6522 ;; *************** function _DetectAsics *****************
  6523 ;; Defined at:
  6524 ;;		line 148 in file "klondike.c"
  6525 ;; Parameters:    Size  Location     Type
  6526 ;;		None
  6527 ;; Auto vars:     Size  Location     Type
  6528 ;;  x               1   14[BANK1 ] unsigned char 
  6529 ;; Return value:  Size  Location     Type
  6530 ;;		None               void
  6531 ;; Registers used:
  6532 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6533 ;; Tracked objects:
  6534 ;;		On entry : 0/0
  6535 ;;		On exit  : 0/0
  6536 ;;		Unchanged: 0/0
  6537 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6538 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6539 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  6540 ;;      Temps:          0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
  6541 ;;      Totals:         0       0      10       0       0       0       0       0       0       0       0       0       
      +0       0
  6542 ;;Total ram usage:       10 bytes
  6543 ;; Hardware stack levels used:    1
  6544 ;; Hardware stack levels required when called:    5
  6545 ;; This function calls:
  6546 ;;		___awdiv
  6547 ;; This function is called by:
  6548 ;;		_UserInit
  6549 ;; This function uses a non-reentrant model
  6550 ;;
  6551                           
  6552                           
  6553                           ;psect for function _DetectAsics
  6554  0C4D                     _DetectAsics:	
  6555                           
  6556                           ;klondike.c: 149: Status.ChipCount = 16;
  6557                           
  6558                           ;incstack = 0
  6559                           ; Regs used in _DetectAsics: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6560  0C4D  3010               	movlw	16
  6561  0C4E  0021               	movlb	1	; select bank1
  6562  0C4F  00A5               	movwf	??_DetectAsics^(0+128)
  6563  0C50  0825               	movf	??_DetectAsics^(0+128),w
  6564  0C51  0023               	movlb	3	; select bank3
  6565  0C52  00AD               	movwf	(_Status^(0+384)+1)	;volatile
  6566                           
  6567                           ;klondike.c: 152: BankSize = (Status.ChipCount)/2;
  6568  0C53  3002               	movlw	2
  6569  0C54  0020               	movlb	0	; select bank0
  6570  0C55  00DE               	movwf	?___awdiv
  6571  0C56  3000               	movlw	0
  6572  0C57  00DF               	movwf	?___awdiv+1
  6573  0C58  0023               	movlb	3	; select bank3
  6574  0C59  082D               	movf	(_Status^(0+384)+1),w	;volatile
  6575  0C5A  0021               	movlb	1	; select bank1
  6576  0C5B  00A5               	movwf	??_DetectAsics^(0+128)
  6577  0C5C  01A6               	clrf	(??_DetectAsics^(0+128)+1)
  6578  0C5D  0825               	movf	??_DetectAsics^(0+128),w
  6579  0C5E  0020               	movlb	0	; select bank0
  6580  0C5F  00E0               	movwf	?___awdiv+2
  6581  0C60  0021               	movlb	1	; select bank1
  6582  0C61  0826               	movf	(??_DetectAsics+1)^(0+128),w
  6583  0C62  0020               	movlb	0	; select bank0
  6584  0C63  00E1               	movwf	?___awdiv+3
  6585  0C64  3191  2101  318C   	fcall	___awdiv
  6586  0C67  0020               	movlb	0	; select bank0
  6587  0C68  085E               	movf	?___awdiv,w
  6588  0C69  0021               	movlb	1	; select bank1
  6589  0C6A  00A7               	movwf	(??_DetectAsics+2)^(0+128)
  6590  0C6B  0827               	movf	(??_DetectAsics+2)^(0+128),w
  6591  0C6C  0023               	movlb	3	; select bank3
  6592  0C6D  00E5               	movwf	_BankSize^(0+384)
  6593                           
  6594                           ;klondike.c: 153: Status.MaxCount = 16384 / BankSize / 2;
  6595  0C6E  0865               	movf	_BankSize^(0+384),w
  6596  0C6F  0021               	movlb	1	; select bank1
  6597  0C70  00A5               	movwf	??_DetectAsics^(0+128)
  6598  0C71  01A6               	clrf	(??_DetectAsics^(0+128)+1)
  6599  0C72  0825               	movf	??_DetectAsics^(0+128),w
  6600  0C73  0020               	movlb	0	; select bank0
  6601  0C74  00DE               	movwf	?___awdiv
  6602  0C75  0021               	movlb	1	; select bank1
  6603  0C76  0826               	movf	(??_DetectAsics+1)^(0+128),w
  6604  0C77  0020               	movlb	0	; select bank0
  6605  0C78  00DF               	movwf	?___awdiv+1
  6606  0C79  3000               	movlw	0
  6607  0C7A  00E0               	movwf	?___awdiv+2
  6608  0C7B  3040               	movlw	64
  6609  0C7C  00E1               	movwf	?___awdiv+3
  6610  0C7D  3191  2101  318C   	fcall	___awdiv
  6611  0C80  0020               	movlb	0	; select bank0
  6612  0C81  085F               	movf	?___awdiv+1,w
  6613  0C82  0021               	movlb	1	; select bank1
  6614  0C83  01AD               	clrf	(_DetectAsics$2873+1)^(0+128)
  6615  0C84  07AD               	addwf	(_DetectAsics$2873+1)^(0+128),f
  6616  0C85  0020               	movlb	0	; select bank0
  6617  0C86  085E               	movf	?___awdiv,w
  6618  0C87  0021               	movlb	1	; select bank1
  6619  0C88  01AC               	clrf	_DetectAsics$2873^(0+128)
  6620  0C89  07AC               	addwf	_DetectAsics$2873^(0+128),f
  6621                           
  6622                           ;klondike.c: 153: Status.MaxCount = 16384 / BankSize / 2;
  6623  0C8A  3002               	movlw	2
  6624  0C8B  0020               	movlb	0	; select bank0
  6625  0C8C  00DE               	movwf	?___awdiv
  6626  0C8D  3000               	movlw	0
  6627  0C8E  00DF               	movwf	?___awdiv+1
  6628  0C8F  0021               	movlb	1	; select bank1
  6629  0C90  082D               	movf	(_DetectAsics$2873+1)^(0+128),w
  6630  0C91  0020               	movlb	0	; select bank0
  6631  0C92  01E1               	clrf	?___awdiv+3
  6632  0C93  07E1               	addwf	?___awdiv+3,f
  6633  0C94  0021               	movlb	1	; select bank1
  6634  0C95  082C               	movf	_DetectAsics$2873^(0+128),w
  6635  0C96  0020               	movlb	0	; select bank0
  6636  0C97  01E0               	clrf	?___awdiv+2
  6637  0C98  07E0               	addwf	?___awdiv+2,f
  6638  0C99  3191  2101  318C   	fcall	___awdiv
  6639  0C9C  0020               	movlb	0	; select bank0
  6640  0C9D  085F               	movf	?___awdiv+1,w
  6641  0C9E  0023               	movlb	3	; select bank3
  6642  0C9F  01B7               	clrf	((_Status+1)^(0+384)+10)	;volatile
  6643  0CA0  07B7               	addwf	((_Status+1)^(0+384)+10),f	;volatile
  6644  0CA1  0020               	movlb	0	; select bank0
  6645  0CA2  085E               	movf	?___awdiv,w
  6646  0CA3  0023               	movlb	3	; select bank3
  6647  0CA4  01B6               	clrf	(_Status^(0+384)+10)	;volatile
  6648  0CA5  07B6               	addwf	(_Status^(0+384)+10),f	;volatile
  6649                           
  6650                           ;klondike.c: 155: NonceRanges[0] = 0;
  6651  0CA6  3000               	movlw	0
  6652  0CA7  0026               	movlb	6	; select bank6
  6653  0CA8  00A3               	movwf	(_NonceRanges+3)^(0+768)
  6654  0CA9  3000               	movlw	0
  6655  0CAA  00A2               	movwf	(_NonceRanges+2)^(0+768)
  6656  0CAB  3000               	movlw	0
  6657  0CAC  00A1               	movwf	(_NonceRanges+1)^(0+768)
  6658  0CAD  3000               	movlw	0
  6659  0CAE  00A0               	movwf	_NonceRanges^(0+768)
  6660                           
  6661                           ;klondike.c: 156: for(BYTE x = 1; x < BankSize; x++)
  6662  0CAF  0021               	movlb	1	; select bank1
  6663  0CB0  01AE               	clrf	DetectAsics@x^(0+128)
  6664  0CB1  0AAE               	incf	DetectAsics@x^(0+128),f
  6665  0CB2                     l5443:	
  6666  0CB2  0023               	movlb	3	; select bank3
  6667  0CB3  0865               	movf	_BankSize^(0+384),w
  6668  0CB4  0021               	movlb	1	; select bank1
  6669  0CB5  022E               	subwf	DetectAsics@x^(0+128),w
  6670  0CB6  1803               	btfsc	3,0
  6671  0CB7  2CFD               	goto	l5445
  6672                           
  6673                           ;klondike.c: 157: NonceRanges[x] = NonceRanges[x-1] + BankRanges[BankSize-1];
  6674  0CB8  0023               	movlb	3	; select bank3
  6675  0CB9  0865               	movf	_BankSize^(0+384),w
  6676  0CBA  0021               	movlb	1	; select bank1
  6677  0CBB  00A5               	movwf	??_DetectAsics^(0+128)
  6678  0CBC  3001               	movlw	1
  6679  0CBD                     u5295:	
  6680  0CBD  35A5               	lslf	??_DetectAsics^(0+128),f
  6681  0CBE  3EFF               	addlw	-1
  6682  0CBF  1D03               	skipz
  6683  0CC0  2CBD               	goto	u5295
  6684  0CC1  3525               	lslf	??_DetectAsics^(0+128),w
  6685  0CC2  3EFC               	addlw	252
  6686  0CC3  3EA0               	addlw	_BankRanges& (0+255)
  6687  0CC4  0086               	movwf	6
  6688  0CC5  3003               	movlw	3	; select bank7/8
  6689  0CC6  0087               	movwf	7
  6690  0CC7  3F40               	moviw [0]fsr1
  6691  0CC8  00A6               	movwf	(??_DetectAsics+1)^(0+128)
  6692  0CC9  3F41               	moviw [1]fsr1
  6693  0CCA  00A7               	movwf	((??_DetectAsics+1)^(0+128)+1)
  6694  0CCB  3F42               	moviw [2]fsr1
  6695  0CCC  00A8               	movwf	((??_DetectAsics+1)^(0+128)+2)
  6696  0CCD  3F43               	moviw [3]fsr1
  6697  0CCE  00A9               	movwf	((??_DetectAsics+1)^(0+128)+3)
  6698  0CCF  082E               	movf	DetectAsics@x^(0+128),w
  6699  0CD0  00AA               	movwf	(??_DetectAsics+5)^(0+128)
  6700  0CD1  3001               	movlw	1
  6701  0CD2                     u5305:	
  6702  0CD2  35AA               	lslf	(??_DetectAsics+5)^(0+128),f
  6703  0CD3  3EFF               	addlw	-1
  6704  0CD4  1D03               	skipz
  6705  0CD5  2CD2               	goto	u5305
  6706  0CD6  352A               	lslf	(??_DetectAsics+5)^(0+128),w
  6707  0CD7  3EFC               	addlw	252
  6708  0CD8  3E20               	addlw	_NonceRanges& (0+255)
  6709  0CD9  0086               	movwf	6
  6710  0CDA  3003               	movlw	3	; select bank6/7
  6711  0CDB  0087               	movwf	7
  6712  0CDC  3F40               	moviw [0]fsr1
  6713  0CDD  07A6               	addwf	(??_DetectAsics+1)^(0+128),f
  6714  0CDE  3F41               	moviw [1]fsr1
  6715  0CDF  3DA7               	addwfc	((??_DetectAsics+1)^(0+128)+1),f
  6716  0CE0  3F42               	moviw [2]fsr1
  6717  0CE1  3DA8               	addwfc	((??_DetectAsics+1)^(0+128)+2),f
  6718  0CE2  3F43               	moviw [3]fsr1
  6719  0CE3  3DA9               	addwfc	((??_DetectAsics+1)^(0+128)+3),f
  6720  0CE4  082E               	movf	DetectAsics@x^(0+128),w
  6721  0CE5  00AB               	movwf	(??_DetectAsics+6)^(0+128)
  6722  0CE6  3001               	movlw	1
  6723  0CE7                     u5315:	
  6724  0CE7  35AB               	lslf	(??_DetectAsics+6)^(0+128),f
  6725  0CE8  3EFF               	addlw	-1
  6726  0CE9  1D03               	skipz
  6727  0CEA  2CE7               	goto	u5315
  6728  0CEB  352B               	lslf	(??_DetectAsics+6)^(0+128),w
  6729  0CEC  3E20               	addlw	_NonceRanges& (0+255)
  6730  0CED  0086               	movwf	6
  6731  0CEE  3003               	movlw	3	; select bank6/7
  6732  0CEF  0087               	movwf	7
  6733  0CF0  0826               	movf	(??_DetectAsics+1)^(0+128),w
  6734  0CF1  3FC0               	movwi [0]fsr1
  6735  0CF2  0827               	movf	(??_DetectAsics+2)^(0+128),w
  6736  0CF3  3FC1               	movwi [1]fsr1
  6737  0CF4  0828               	movf	(??_DetectAsics+3)^(0+128),w
  6738  0CF5  3FC2               	movwi [2]fsr1
  6739  0CF6  0829               	movf	(??_DetectAsics+4)^(0+128),w
  6740  0CF7  3FC3               	movwi [3]fsr1
  6741  0CF8  3001               	movlw	1
  6742  0CF9  00A5               	movwf	??_DetectAsics^(0+128)
  6743  0CFA  0825               	movf	??_DetectAsics^(0+128),w
  6744  0CFB  07AE               	addwf	DetectAsics@x^(0+128),f
  6745  0CFC  2CB2               	goto	l5443
  6746  0CFD                     l5445:	
  6747                           
  6748                           ;klondike.c: 159: Status.State = 'R';
  6749  0CFD  3052               	movlw	82
  6750  0CFE  00A5               	movwf	??_DetectAsics^(0+128)
  6751  0CFF  0825               	movf	??_DetectAsics^(0+128),w
  6752  0D00  0023               	movlb	3	; select bank3
  6753  0D01  00AC               	movwf	_Status^(0+384)	;volatile
  6754                           
  6755                           ;klondike.c: 160: Status.HashCount = 0;
  6756  0D02  01B4               	clrf	(_Status^(0+384)+8)	;volatile
  6757  0D03  01B5               	clrf	((_Status+1)^(0+384)+8)	;volatile
  6758  0D04  0008               	return
  6759  0D05                     __end_of_DetectAsics:	
  6760                           
  6761                           	psect	text19
  6762  1101                     __ptext19:	
  6763 ;; *************** function ___awdiv *****************
  6764 ;; Defined at:
  6765 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.20\sources\pic\awdiv.c"
  6766 ;; Parameters:    Size  Location     Type
  6767 ;;  divisor         2   14[BANK0 ] int 
  6768 ;;  dividend        2   16[BANK0 ] int 
  6769 ;; Auto vars:     Size  Location     Type
  6770 ;;  quotient        2    3[BANK1 ] int 
  6771 ;;  sign            1    2[BANK1 ] unsigned char 
  6772 ;;  counter         1    1[BANK1 ] unsigned char 
  6773 ;; Return value:  Size  Location     Type
  6774 ;;                  2   14[BANK0 ] int 
  6775 ;; Registers used:
  6776 ;;		wreg, status,2, status,0
  6777 ;; Tracked objects:
  6778 ;;		On entry : 0/0
  6779 ;;		On exit  : 0/0
  6780 ;;		Unchanged: 0/0
  6781 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6782 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6783 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  6784 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6785 ;;      Totals:         0       4       5       0       0       0       0       0       0       0       0       0       
      +0       0
  6786 ;;Total ram usage:        9 bytes
  6787 ;; Hardware stack levels used:    1
  6788 ;; Hardware stack levels required when called:    4
  6789 ;; This function calls:
  6790 ;;		Nothing
  6791 ;; This function is called by:
  6792 ;;		_DetectAsics
  6793 ;; This function uses a non-reentrant model
  6794 ;;
  6795                           
  6796                           
  6797                           ;psect for function ___awdiv
  6798  1101                     ___awdiv:	
  6799                           
  6800                           ;incstack = 0
  6801                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  6802  1101  0021               	movlb	1	; select bank1
  6803  1102  01A2               	clrf	___awdiv@sign^(0+128)
  6804  1103  0020               	movlb	0	; select bank0
  6805  1104  1FDF               	btfss	___awdiv@divisor+1,7
  6806  1105  290E               	goto	l5707
  6807  1106  09DE               	comf	___awdiv@divisor,f
  6808  1107  09DF               	comf	___awdiv@divisor+1,f
  6809  1108  0ADE               	incf	___awdiv@divisor,f
  6810  1109  1903               	skipnz
  6811  110A  0ADF               	incf	___awdiv@divisor+1,f
  6812  110B  0021               	movlb	1	; select bank1
  6813  110C  01A2               	clrf	___awdiv@sign^(0+128)
  6814  110D  0AA2               	incf	___awdiv@sign^(0+128),f
  6815  110E                     l5707:	
  6816  110E  0020               	movlb	0	; select bank0
  6817  110F  1FE1               	btfss	___awdiv@dividend+1,7
  6818  1110  291B               	goto	l5713
  6819  1111  09E0               	comf	___awdiv@dividend,f
  6820  1112  09E1               	comf	___awdiv@dividend+1,f
  6821  1113  0AE0               	incf	___awdiv@dividend,f
  6822  1114  1903               	skipnz
  6823  1115  0AE1               	incf	___awdiv@dividend+1,f
  6824  1116  3001               	movlw	1
  6825  1117  0021               	movlb	1	; select bank1
  6826  1118  00A0               	movwf	??___awdiv^(0+128)
  6827  1119  0820               	movf	??___awdiv^(0+128),w
  6828  111A  06A2               	xorwf	___awdiv@sign^(0+128),f
  6829  111B                     l5713:	
  6830  111B  0021               	movlb	1	; select bank1
  6831  111C  01A3               	clrf	___awdiv@quotient^(0+128)
  6832  111D  01A4               	clrf	(___awdiv@quotient+1)^(0+128)
  6833  111E  0020               	movlb	0	; select bank0
  6834  111F  085F               	movf	___awdiv@divisor+1,w
  6835  1120  045E               	iorwf	___awdiv@divisor,w
  6836  1121  1903               	skipnz
  6837  1122  2955               	goto	l5735
  6838  1123  0021               	movlb	1	; select bank1
  6839  1124  01A1               	clrf	___awdiv@counter^(0+128)
  6840  1125  0AA1               	incf	___awdiv@counter^(0+128),f
  6841  1126                     l5723:	
  6842  1126  0020               	movlb	0	; select bank0
  6843  1127  1BDF               	btfsc	___awdiv@divisor+1,7
  6844  1128  2935               	goto	l5725
  6845  1129  3001               	movlw	1
  6846  112A  0020               	movlb	0	; select bank0
  6847  112B                     u5685:	
  6848  112B  35DE               	lslf	___awdiv@divisor,f
  6849  112C  0DDF               	rlf	___awdiv@divisor+1,f
  6850  112D  0B89               	decfsz	9,f
  6851  112E  292B               	goto	u5685
  6852  112F  3001               	movlw	1
  6853  1130  0021               	movlb	1	; select bank1
  6854  1131  00A0               	movwf	??___awdiv^(0+128)
  6855  1132  0820               	movf	??___awdiv^(0+128),w
  6856  1133  07A1               	addwf	___awdiv@counter^(0+128),f
  6857  1134  2926               	goto	l5723
  6858  1135                     l5725:	
  6859  1135  3001               	movlw	1
  6860  1136  0021               	movlb	1	; select bank1
  6861  1137                     u5705:	
  6862  1137  35A3               	lslf	___awdiv@quotient^(0+128),f
  6863  1138  0DA4               	rlf	(___awdiv@quotient+1)^(0+128),f
  6864  1139  0B89               	decfsz	9,f
  6865  113A  2937               	goto	u5705
  6866  113B  0020               	movlb	0	; select bank0
  6867  113C  085F               	movf	___awdiv@divisor+1,w
  6868  113D  0261               	subwf	___awdiv@dividend+1,w
  6869  113E  1D03               	skipz
  6870  113F  2942               	goto	u5715
  6871  1140  085E               	movf	___awdiv@divisor,w
  6872  1141  0260               	subwf	___awdiv@dividend,w
  6873  1142                     u5715:	
  6874  1142  1C03               	skipc
  6875  1143  294A               	goto	l5731
  6876  1144  085E               	movf	___awdiv@divisor,w
  6877  1145  02E0               	subwf	___awdiv@dividend,f
  6878  1146  085F               	movf	___awdiv@divisor+1,w
  6879  1147  3BE1               	subwfb	___awdiv@dividend+1,f
  6880  1148  0021               	movlb	1	; select bank1
  6881  1149  1423               	bsf	___awdiv@quotient^(0+128),0
  6882  114A                     l5731:	
  6883  114A  3001               	movlw	1
  6884  114B  0020               	movlb	0	; select bank0
  6885  114C                     u5725:	
  6886  114C  36DF               	lsrf	___awdiv@divisor+1,f
  6887  114D  0CDE               	rrf	___awdiv@divisor,f
  6888  114E  0B89               	decfsz	9,f
  6889  114F  294C               	goto	u5725
  6890  1150  3001               	movlw	1
  6891  1151  0021               	movlb	1	; select bank1
  6892  1152  02A1               	subwf	___awdiv@counter^(0+128),f
  6893  1153  1D03               	btfss	3,2
  6894  1154  2935               	goto	l5725
  6895  1155                     l5735:	
  6896  1155  0021               	movlb	1	; select bank1
  6897  1156  0822               	movf	___awdiv@sign^(0+128),w
  6898  1157  1903               	btfsc	3,2
  6899  1158  295E               	goto	l5739
  6900  1159  09A3               	comf	___awdiv@quotient^(0+128),f
  6901  115A  09A4               	comf	(___awdiv@quotient+1)^(0+128),f
  6902  115B  0AA3               	incf	___awdiv@quotient^(0+128),f
  6903  115C  1903               	skipnz
  6904  115D  0AA4               	incf	(___awdiv@quotient+1)^(0+128),f
  6905  115E                     l5739:	
  6906  115E  0824               	movf	(___awdiv@quotient+1)^(0+128),w
  6907  115F  0020               	movlb	0	; select bank0
  6908  1160  01DF               	clrf	?___awdiv+1
  6909  1161  07DF               	addwf	?___awdiv+1,f
  6910  1162  0021               	movlb	1	; select bank1
  6911  1163  0823               	movf	___awdiv@quotient^(0+128),w
  6912  1164  0020               	movlb	0	; select bank0
  6913  1165  01DE               	clrf	?___awdiv
  6914  1166  07DE               	addwf	?___awdiv,f
  6915  1167  0008               	return
  6916  1168                     __end_of___awdiv:	
  6917                           
  6918                           	psect	text20
  6919  1003                     __ptext20:	
  6920 ;; *************** function _WorkTick *****************
  6921 ;; Defined at:
  6922 ;;		line 166 in file "klondike.c"
  6923 ;; Parameters:    Size  Location     Type
  6924 ;;		None
  6925 ;; Auto vars:     Size  Location     Type
  6926 ;;		None
  6927 ;; Return value:  Size  Location     Type
  6928 ;;		None               void
  6929 ;; Registers used:
  6930 ;;		wreg, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  6931 ;; Tracked objects:
  6932 ;;		On entry : 0/0
  6933 ;;		On exit  : 0/0
  6934 ;;		Unchanged: 0/0
  6935 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6936 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6937 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6938 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6939 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6940 ;;Total ram usage:        1 bytes
  6941 ;; Hardware stack levels used:    1
  6942 ;; Hardware stack levels required when called:    7
  6943 ;; This function calls:
  6944 ;;		_UpdateFanLevel
  6945 ;; This function is called by:
  6946 ;;		_main
  6947 ;; This function uses a non-reentrant model
  6948 ;;
  6949                           
  6950                           
  6951                           ;psect for function _WorkTick
  6952  1003                     _WorkTick:	
  6953                           
  6954                           ;klondike.c: 167: TMR0 += HashTime;
  6955                           
  6956                           ;incstack = 0
  6957                           ; Regs used in _WorkTick: [wreg+fsr1l+fsr1h+status,2+status,0+btemp+1+pclath+cstack]
  6958  1003  0020               	movlb	0	; select bank0
  6959  1004  086F               	movf	_HashTime,w
  6960  1005  0021               	movlb	1	; select bank1
  6961  1006  00DF               	movwf	??_WorkTick^(0+128)
  6962  1007  085F               	movf	??_WorkTick^(0+128),w
  6963  1008  0020               	movlb	0	; select bank0
  6964  1009  0795               	addwf	21,f	;volatile
  6965                           
  6966                           ;klondike.c: 168: TMR0IF = 0;
  6967  100A  110B               	bcf	11,2	;volatile
  6968                           
  6969                           ;klondike.c: 170: if((Status.State == 'W') && (++Status.HashCount == Status.MaxCount)) {
  6970  100B  0023               	movlb	3	; select bank3
  6971  100C  082C               	movf	_Status^(0+384),w	;volatile
  6972  100D  3A57               	xorlw	87
  6973  100E  1D03               	skipz
  6974  100F  282E               	goto	l6647
  6975  1010  3008               	movlw	8
  6976  1011  3EAC               	addlw	_Status& (0+255)
  6977  1012  0086               	movwf	6
  6978  1013  3001               	movlw	1	; select bank3/4
  6979  1014  0087               	movwf	7
  6980  1015  3001               	movlw	1
  6981  1016  0781               	addwf	1,f
  6982  1017  3141               	addfsr 1,1
  6983  1018  1803               	skipnc
  6984  1019  0A81               	incf	1,f
  6985  101A  317F               	addfsr 1,-1
  6986  101B  3F40               	moviw [0]fsr1
  6987  101C  0636               	xorwf	(_Status^(0+384)+10),w	;volatile
  6988  101D  1D03               	skipz
  6989  101E  2821               	goto	u7225
  6990  101F  3F41               	moviw [1]fsr1
  6991  1020  0637               	xorwf	((_Status+1)^(0+384)+10),w	;volatile
  6992  1021                     u7225:	
  6993  1021  1D03               	skipz
  6994  1022  282E               	goto	l6647
  6995                           
  6996                           ;klondike.c: 171: if(Status.WorkQC > 0) {
  6997  1023  082F               	movf	(_Status^(0+384)+3),w	;volatile
  6998  1024  1903               	btfsc	3,2
  6999  1025  2828               	goto	l6645
  7000                           
  7001                           ;klondike.c: 172: Status.State = 'P';
  7002  1026  3050               	movlw	80
  7003  1027  2829               	goto	L6
  7004  1028                     l6645:	
  7005                           ;klondike.c: 173: }
  7006                           
  7007                           
  7008                           ;klondike.c: 174: else {
  7009                           ;klondike.c: 175: Status.State = 'R';
  7010  1028  3052               	movlw	82
  7011  1029                     L6:	
  7012  1029  0021               	movlb	1	; select bank1
  7013  102A  00DF               	movwf	??_WorkTick^(0+128)
  7014  102B  085F               	movf	??_WorkTick^(0+128),w
  7015  102C  0023               	movlb	3	; select bank3
  7016  102D  00AC               	movwf	_Status^(0+384)	;volatile
  7017  102E                     l6647:	
  7018                           
  7019                           ;klondike.c: 176: }
  7020                           ;klondike.c: 177: }
  7021                           ;klondike.c: 179: if(++SlowTick == 0) {
  7022  102E  3001               	movlw	1
  7023  102F  0021               	movlb	1	; select bank1
  7024  1030  00DF               	movwf	??_WorkTick^(0+128)
  7025  1031  085F               	movf	??_WorkTick^(0+128),w
  7026  1032  0022               	movlb	2	; select bank2
  7027  1033  07E3               	addwf	_SlowTick^(0+256),f
  7028  1034  1D03               	btfss	3,2
  7029  1035  0008               	return
  7030                           
  7031                           ;klondike.c: 180: LATAbits.LATA5 = 0;;
  7032  1036  128C               	bcf	12,5	;volatile
  7033                           
  7034                           ;klondike.c: 181: Status.Temp = ADRESH;
  7035  1037  0021               	movlb	1	; select bank1
  7036  1038  081C               	movf	28,w	;volatile
  7037  1039  00DF               	movwf	??_WorkTick^(0+128)
  7038  103A  085F               	movf	??_WorkTick^(0+128),w
  7039  103B  0023               	movlb	3	; select bank3
  7040  103C  00B1               	movwf	(_Status^(0+384)+5)	;volatile
  7041                           
  7042                           ;klondike.c: 182: ADCON0bits.GO_nDONE = 1;
  7043  103D  0021               	movlb	1	; select bank1
  7044  103E  149D               	bsf	29,1	;volatile
  7045                           
  7046                           ;klondike.c: 183: UpdateFanLevel();
  7047  103F  3186  2653         	fcall	_UpdateFanLevel
  7048  1041  0008               	return
  7049  1042                     __end_of_WorkTick:	
  7050                           
  7051                           	psect	text21
  7052  0653                     __ptext21:	
  7053 ;; *************** function _UpdateFanLevel *****************
  7054 ;; Defined at:
  7055 ;;		line 229 in file "klondike.c"
  7056 ;; Parameters:    Size  Location     Type
  7057 ;;		None
  7058 ;; Auto vars:     Size  Location     Type
  7059 ;;		None
  7060 ;; Return value:  Size  Location     Type
  7061 ;;		None               void
  7062 ;; Registers used:
  7063 ;;		wreg, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  7064 ;; Tracked objects:
  7065 ;;		On entry : 0/0
  7066 ;;		On exit  : 0/0
  7067 ;;		Unchanged: 0/0
  7068 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7069 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7070 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  7071 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  7072 ;;      Totals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
  7073 ;;Total ram usage:        7 bytes
  7074 ;; Hardware stack levels used:    1
  7075 ;; Hardware stack levels required when called:    6
  7076 ;; This function calls:
  7077 ;;		___awtoft
  7078 ;;		___ftadd
  7079 ;;		___ftmul
  7080 ;;		___ftneg
  7081 ;;		___fttol
  7082 ;; This function is called by:
  7083 ;;		_WorkTick
  7084 ;; This function uses a non-reentrant model
  7085 ;;
  7086                           
  7087                           
  7088                           ;psect for function _UpdateFanLevel
  7089  0653                     _UpdateFanLevel:	
  7090                           
  7091                           ;klondike.c: 230: Error = Status.Temp - TempTarget;
  7092                           
  7093                           ;incstack = 0
  7094                           ; Regs used in _UpdateFanLevel: [wreg+fsr1l+fsr1h+status,2+status,0+btemp+1+pclath+cstac
      +                          k]
  7095  0653  0023               	movlb	3	; select bank3
  7096  0654  0864               	movf	_TempTarget^(0+384),w
  7097  0655  0021               	movlb	1	; select bank1
  7098  0656  00D8               	movwf	??_UpdateFanLevel^(0+128)
  7099  0657  01D9               	clrf	(??_UpdateFanLevel^(0+128)+1)
  7100  0658  09D8               	comf	??_UpdateFanLevel^(0+128),f
  7101  0659  09D9               	comf	(??_UpdateFanLevel^(0+128)+1),f
  7102  065A  0AD8               	incf	??_UpdateFanLevel^(0+128),f
  7103  065B  1903               	skipnz
  7104  065C  0AD9               	incf	(??_UpdateFanLevel^(0+128)+1),f
  7105  065D  0023               	movlb	3	; select bank3
  7106  065E  0831               	movf	(_Status^(0+384)+5),w	;volatile
  7107  065F  0021               	movlb	1	; select bank1
  7108  0660  0758               	addwf	??_UpdateFanLevel^(0+128),w
  7109  0661  00DA               	movwf	(??_UpdateFanLevel+2)^(0+128)
  7110  0662  0859               	movf	(??_UpdateFanLevel+1)^(0+128),w
  7111  0663  1803               	skipnc
  7112  0664  0A59               	incf	(??_UpdateFanLevel+1)^(0+128),w
  7113  0665  00DB               	movwf	((??_UpdateFanLevel+2)^(0+128)+1)
  7114  0666  085A               	movf	(??_UpdateFanLevel+2)^(0+128),w
  7115  0667  0023               	movlb	3	; select bank3
  7116  0668  00E1               	movwf	_Error^(0+384)
  7117  0669  0021               	movlb	1	; select bank1
  7118  066A  085B               	movf	(??_UpdateFanLevel+3)^(0+128),w
  7119  066B  0023               	movlb	3	; select bank3
  7120  066C  00E2               	movwf	(_Error+1)^(0+384)
  7121                           
  7122                           ;klondike.c: 231: Step = 1*Error - 0.5*LastError - 8*(LastTemp - Status.Temp);
  7123  066D  0862               	movf	(_Error+1)^(0+384),w
  7124  066E  0021               	movlb	1	; select bank1
  7125  066F  01A6               	clrf	(?___awtoft+1)^(0+128)
  7126  0670  07A6               	addwf	(?___awtoft+1)^(0+128),f
  7127  0671  0023               	movlb	3	; select bank3
  7128  0672  0861               	movf	_Error^(0+384),w
  7129  0673  0021               	movlb	1	; select bank1
  7130  0674  01A5               	clrf	?___awtoft^(0+128)
  7131  0675  07A5               	addwf	?___awtoft^(0+128),f
  7132  0676  319D  2512  3186   	fcall	___awtoft
  7133  0679  0021               	movlb	1	; select bank1
  7134  067A  0825               	movf	?___awtoft^(0+128),w
  7135  067B  00C0               	movwf	(?___ftadd^(0+128)+3)
  7136  067C  0826               	movf	(?___awtoft+1)^(0+128),w
  7137  067D  00C1               	movwf	((?___ftadd+1)^(0+128)+3)
  7138  067E  0827               	movf	(?___awtoft+2)^(0+128),w
  7139  067F  00C2               	movwf	((?___ftadd+2)^(0+128)+3)
  7140  0680  0023               	movlb	3	; select bank3
  7141  0681  0831               	movf	(_Status^(0+384)+5),w	;volatile
  7142  0682  0021               	movlb	1	; select bank1
  7143  0683  00D8               	movwf	??_UpdateFanLevel^(0+128)
  7144  0684  01D9               	clrf	(??_UpdateFanLevel^(0+128)+1)
  7145  0685  09D8               	comf	??_UpdateFanLevel^(0+128),f
  7146  0686  09D9               	comf	(??_UpdateFanLevel^(0+128)+1),f
  7147  0687  0AD8               	incf	??_UpdateFanLevel^(0+128),f
  7148  0688  1903               	skipnz
  7149  0689  0AD9               	incf	(??_UpdateFanLevel^(0+128)+1),f
  7150  068A  0022               	movlb	2	; select bank2
  7151  068B  0860               	movf	_LastTemp^(0+256),w
  7152  068C  0021               	movlb	1	; select bank1
  7153  068D  0758               	addwf	??_UpdateFanLevel^(0+128),w
  7154  068E  00DA               	movwf	(??_UpdateFanLevel+2)^(0+128)
  7155  068F  0859               	movf	(??_UpdateFanLevel+1)^(0+128),w
  7156  0690  1803               	skipnc
  7157  0691  0A59               	incf	(??_UpdateFanLevel+1)^(0+128),w
  7158  0692  00DB               	movwf	((??_UpdateFanLevel+2)^(0+128)+1)
  7159  0693  35DA               	lslf	(??_UpdateFanLevel+2)^(0+128),f
  7160  0694  0DDB               	rlf	((??_UpdateFanLevel+2)^(0+128)+1),f
  7161  0695  35DA               	lslf	(??_UpdateFanLevel+2)^(0+128),f
  7162  0696  0DDB               	rlf	((??_UpdateFanLevel+2)^(0+128)+1),f
  7163  0697  35DA               	lslf	(??_UpdateFanLevel+2)^(0+128),f
  7164  0698  0DDB               	rlf	((??_UpdateFanLevel+2)^(0+128)+1),f
  7165  0699  085A               	movf	(??_UpdateFanLevel+2)^(0+128),w
  7166  069A  00A5               	movwf	?___awtoft^(0+128)
  7167  069B  085B               	movf	(??_UpdateFanLevel+3)^(0+128),w
  7168  069C  00A6               	movwf	(?___awtoft+1)^(0+128)
  7169  069D  319D  2512  3186   	fcall	___awtoft
  7170  06A0  0021               	movlb	1	; select bank1
  7171  06A1  0825               	movf	?___awtoft^(0+128),w
  7172  06A2  00BA               	movwf	?___ftneg^(0+128)
  7173  06A3  0826               	movf	(?___awtoft+1)^(0+128),w
  7174  06A4  00BB               	movwf	(?___ftneg+1)^(0+128)
  7175  06A5  0827               	movf	(?___awtoft+2)^(0+128),w
  7176  06A6  00BC               	movwf	(?___ftneg+2)^(0+128)
  7177  06A7  319B  235F  3186   	fcall	___ftneg
  7178  06AA  0021               	movlb	1	; select bank1
  7179  06AB  083A               	movf	?___ftneg^(0+128),w
  7180  06AC  00BD               	movwf	?___ftadd^(0+128)
  7181  06AD  083B               	movf	(?___ftneg+1)^(0+128),w
  7182  06AE  00BE               	movwf	(?___ftadd+1)^(0+128)
  7183  06AF  083C               	movf	(?___ftneg+2)^(0+128),w
  7184  06B0  00BF               	movwf	(?___ftadd+2)^(0+128)
  7185  06B1  318D  25F0  3186   	fcall	___ftadd
  7186  06B4  0021               	movlb	1	; select bank1
  7187  06B5  083D               	movf	?___ftadd^(0+128),w
  7188  06B6  00DC               	movwf	_UpdateFanLevel$2876^(0+128)
  7189  06B7  083E               	movf	(?___ftadd+1)^(0+128),w
  7190  06B8  00DD               	movwf	(_UpdateFanLevel$2876+1)^(0+128)
  7191  06B9  083F               	movf	(?___ftadd+2)^(0+128),w
  7192  06BA  00DE               	movwf	(_UpdateFanLevel$2876+2)^(0+128)
  7193                           
  7194                           ;klondike.c: 231: Step = 1*Error - 0.5*LastError - 8*(LastTemp - Status.Temp);
  7195  06BB  085C               	movf	_UpdateFanLevel$2876^(0+128),w
  7196  06BC  00C0               	movwf	(?___ftadd^(0+128)+3)
  7197  06BD  085D               	movf	(_UpdateFanLevel$2876+1)^(0+128),w
  7198  06BE  00C1               	movwf	((?___ftadd+1)^(0+128)+3)
  7199  06BF  085E               	movf	(_UpdateFanLevel$2876+2)^(0+128),w
  7200  06C0  00C2               	movwf	((?___ftadd+2)^(0+128)+3)
  7201  06C1  0023               	movlb	3	; select bank3
  7202  06C2  0850               	movf	(_LastError+1)^(0+384),w
  7203  06C3  0021               	movlb	1	; select bank1
  7204  06C4  01A6               	clrf	(?___awtoft+1)^(0+128)
  7205  06C5  07A6               	addwf	(?___awtoft+1)^(0+128),f
  7206  06C6  0023               	movlb	3	; select bank3
  7207  06C7  084F               	movf	_LastError^(0+384),w
  7208  06C8  0021               	movlb	1	; select bank1
  7209  06C9  01A5               	clrf	?___awtoft^(0+128)
  7210  06CA  07A5               	addwf	?___awtoft^(0+128),f
  7211  06CB  319D  2512  3186   	fcall	___awtoft
  7212  06CE  0021               	movlb	1	; select bank1
  7213  06CF  0825               	movf	?___awtoft^(0+128),w
  7214  06D0  00AD               	movwf	(?___ftmul^(0+128)+3)
  7215  06D1  0826               	movf	(?___awtoft+1)^(0+128),w
  7216  06D2  00AE               	movwf	((?___ftmul+1)^(0+128)+3)
  7217  06D3  0827               	movf	(?___awtoft+2)^(0+128),w
  7218  06D4  00AF               	movwf	((?___ftmul+2)^(0+128)+3)
  7219  06D5  3000               	movlw	0
  7220  06D6  00AA               	movwf	?___ftmul^(0+128)
  7221  06D7  3000               	movlw	0
  7222  06D8  00AB               	movwf	(?___ftmul+1)^(0+128)
  7223  06D9  303F               	movlw	63
  7224  06DA  00AC               	movwf	(?___ftmul+2)^(0+128)
  7225  06DB  318B  2399  3186   	fcall	___ftmul
  7226  06DE  0021               	movlb	1	; select bank1
  7227  06DF  082A               	movf	?___ftmul^(0+128),w
  7228  06E0  00BA               	movwf	?___ftneg^(0+128)
  7229  06E1  082B               	movf	(?___ftmul+1)^(0+128),w
  7230  06E2  00BB               	movwf	(?___ftneg+1)^(0+128)
  7231  06E3  082C               	movf	(?___ftmul+2)^(0+128),w
  7232  06E4  00BC               	movwf	(?___ftneg+2)^(0+128)
  7233  06E5  319B  235F  3186   	fcall	___ftneg
  7234  06E8  0021               	movlb	1	; select bank1
  7235  06E9  083A               	movf	?___ftneg^(0+128),w
  7236  06EA  00BD               	movwf	?___ftadd^(0+128)
  7237  06EB  083B               	movf	(?___ftneg+1)^(0+128),w
  7238  06EC  00BE               	movwf	(?___ftadd+1)^(0+128)
  7239  06ED  083C               	movf	(?___ftneg+2)^(0+128),w
  7240  06EE  00BF               	movwf	(?___ftadd+2)^(0+128)
  7241  06EF  318D  25F0  3186   	fcall	___ftadd
  7242  06F2  0021               	movlb	1	; select bank1
  7243  06F3  083D               	movf	?___ftadd^(0+128),w
  7244  06F4  00CA               	movwf	?___fttol^(0+128)
  7245  06F5  083E               	movf	(?___ftadd+1)^(0+128),w
  7246  06F6  00CB               	movwf	(?___fttol+1)^(0+128)
  7247  06F7  083F               	movf	(?___ftadd+2)^(0+128),w
  7248  06F8  00CC               	movwf	(?___fttol+2)^(0+128)
  7249  06F9  3195  2532  3186   	fcall	___fttol
  7250  06FC  0021               	movlb	1	; select bank1
  7251  06FD  084B               	movf	(?___fttol^(0+128)+1),w
  7252  06FE  0020               	movlb	0	; select bank0
  7253  06FF  01E3               	clrf	_Step+1
  7254  0700  07E3               	addwf	_Step+1,f
  7255  0701  0021               	movlb	1	; select bank1
  7256  0702  084A               	movf	?___fttol^(0+128),w
  7257  0703  0020               	movlb	0	; select bank0
  7258  0704  01E2               	clrf	_Step
  7259  0705  07E2               	addwf	_Step,f
  7260                           
  7261                           ;klondike.c: 233: if(FanLevel + Step > 75 && FanLevel + Step <= 255) {
  7262  0706  0023               	movlb	3	; select bank3
  7263  0707  0863               	movf	_FanLevel^(0+384),w
  7264  0708  0020               	movlb	0	; select bank0
  7265  0709  0762               	addwf	_Step,w
  7266  070A  0021               	movlb	1	; select bank1
  7267  070B  00D8               	movwf	??_UpdateFanLevel^(0+128)
  7268  070C  0020               	movlb	0	; select bank0
  7269  070D  0863               	movf	_Step+1,w
  7270  070E  1803               	skipnc
  7271  070F  0A63               	incf	_Step+1,w
  7272  0710  0021               	movlb	1	; select bank1
  7273  0711  00D9               	movwf	(??_UpdateFanLevel^(0+128)+1)
  7274  0712  0859               	movf	(??_UpdateFanLevel+1)^(0+128),w
  7275  0713  3A80               	xorlw	128
  7276  0714  00FF               	movwf	127
  7277  0715  3080               	movlw	128
  7278  0716  027F               	subwf	127,w
  7279  0717  1D03               	skipz
  7280  0718  2F1B               	goto	u7255
  7281  0719  304C               	movlw	76
  7282  071A  0258               	subwf	??_UpdateFanLevel^(0+128),w
  7283  071B                     u7255:	
  7284  071B  1C03               	skipc
  7285  071C  2F3C               	goto	l6669
  7286  071D  0023               	movlb	3	; select bank3
  7287  071E  0863               	movf	_FanLevel^(0+384),w
  7288  071F  0020               	movlb	0	; select bank0
  7289  0720  0762               	addwf	_Step,w
  7290  0721  0021               	movlb	1	; select bank1
  7291  0722  00D8               	movwf	??_UpdateFanLevel^(0+128)
  7292  0723  0020               	movlb	0	; select bank0
  7293  0724  0863               	movf	_Step+1,w
  7294  0725  1803               	skipnc
  7295  0726  0A63               	incf	_Step+1,w
  7296  0727  0021               	movlb	1	; select bank1
  7297  0728  00D9               	movwf	(??_UpdateFanLevel^(0+128)+1)
  7298  0729  0859               	movf	(??_UpdateFanLevel+1)^(0+128),w
  7299  072A  3A80               	xorlw	128
  7300  072B  00FF               	movwf	127
  7301  072C  3081               	movlw	129
  7302  072D  027F               	subwf	127,w
  7303  072E  1D03               	skipz
  7304  072F  2F32               	goto	u7265
  7305  0730  3000               	movlw	0
  7306  0731  0258               	subwf	??_UpdateFanLevel^(0+128),w
  7307  0732                     u7265:	
  7308  0732  1803               	skipnc
  7309  0733  2F3C               	goto	l6669
  7310                           
  7311                           ;klondike.c: 234: FanLevel += Step;
  7312  0734  0020               	movlb	0	; select bank0
  7313  0735  0862               	movf	_Step,w
  7314  0736  0021               	movlb	1	; select bank1
  7315  0737  00D8               	movwf	??_UpdateFanLevel^(0+128)
  7316  0738  0858               	movf	??_UpdateFanLevel^(0+128),w
  7317  0739  0023               	movlb	3	; select bank3
  7318  073A  07E3               	addwf	_FanLevel^(0+384),f
  7319                           
  7320                           ;klondike.c: 235: }
  7321  073B  2F72               	goto	l751
  7322  073C                     l6669:	
  7323                           
  7324                           ;klondike.c: 236: else if(FanLevel + Step > 255) {
  7325  073C  0023               	movlb	3	; select bank3
  7326  073D  0863               	movf	_FanLevel^(0+384),w
  7327  073E  0020               	movlb	0	; select bank0
  7328  073F  0762               	addwf	_Step,w
  7329  0740  0021               	movlb	1	; select bank1
  7330  0741  00D8               	movwf	??_UpdateFanLevel^(0+128)
  7331  0742  0020               	movlb	0	; select bank0
  7332  0743  0863               	movf	_Step+1,w
  7333  0744  1803               	skipnc
  7334  0745  0A63               	incf	_Step+1,w
  7335  0746  0021               	movlb	1	; select bank1
  7336  0747  00D9               	movwf	(??_UpdateFanLevel^(0+128)+1)
  7337  0748  0859               	movf	(??_UpdateFanLevel+1)^(0+128),w
  7338  0749  3A80               	xorlw	128
  7339  074A  00FF               	movwf	127
  7340  074B  3081               	movlw	129
  7341  074C  027F               	subwf	127,w
  7342  074D  1D03               	skipz
  7343  074E  2F51               	goto	u7275
  7344  074F  3000               	movlw	0
  7345  0750  0258               	subwf	??_UpdateFanLevel^(0+128),w
  7346  0751                     u7275:	
  7347  0751  1C03               	skipc
  7348  0752  2F55               	goto	l6673
  7349                           
  7350                           ;klondike.c: 237: FanLevel = 255;
  7351  0753  30FF               	movlw	255
  7352  0754  2F6D               	goto	L7
  7353  0755                     l6673:	
  7354                           ;klondike.c: 238: }
  7355                           
  7356                           
  7357                           ;klondike.c: 239: else if(FanLevel + Step < 75) {
  7358  0755  0023               	movlb	3	; select bank3
  7359  0756  0863               	movf	_FanLevel^(0+384),w
  7360  0757  0020               	movlb	0	; select bank0
  7361  0758  0762               	addwf	_Step,w
  7362  0759  0021               	movlb	1	; select bank1
  7363  075A  00D8               	movwf	??_UpdateFanLevel^(0+128)
  7364  075B  0020               	movlb	0	; select bank0
  7365  075C  0863               	movf	_Step+1,w
  7366  075D  1803               	skipnc
  7367  075E  0A63               	incf	_Step+1,w
  7368  075F  0021               	movlb	1	; select bank1
  7369  0760  00D9               	movwf	(??_UpdateFanLevel^(0+128)+1)
  7370  0761  0859               	movf	(??_UpdateFanLevel+1)^(0+128),w
  7371  0762  3A80               	xorlw	128
  7372  0763  00FF               	movwf	127
  7373  0764  3080               	movlw	128
  7374  0765  027F               	subwf	127,w
  7375  0766  1D03               	skipz
  7376  0767  2F6A               	goto	u7285
  7377  0768  304B               	movlw	75
  7378  0769  0258               	subwf	??_UpdateFanLevel^(0+128),w
  7379  076A                     u7285:	
  7380  076A  1803               	skipnc
  7381  076B  2F72               	goto	l751
  7382                           
  7383                           ;klondike.c: 240: FanLevel = 75;
  7384  076C  304B               	movlw	75
  7385  076D                     L7:	
  7386  076D  0021               	movlb	1	; select bank1
  7387  076E  00D8               	movwf	??_UpdateFanLevel^(0+128)
  7388  076F  0858               	movf	??_UpdateFanLevel^(0+128),w
  7389  0770  0023               	movlb	3	; select bank3
  7390  0771  00E3               	movwf	_FanLevel^(0+384)
  7391  0772                     l751:	
  7392                           
  7393                           ;klondike.c: 241: }
  7394                           ;klondike.c: 243: LastTemp = Status.Temp;
  7395  0772  0023               	movlb	3	; select bank3
  7396  0773  0831               	movf	(_Status^(0+384)+5),w	;volatile
  7397  0774  0021               	movlb	1	; select bank1
  7398  0775  00D8               	movwf	??_UpdateFanLevel^(0+128)
  7399  0776  0858               	movf	??_UpdateFanLevel^(0+128),w
  7400  0777  0022               	movlb	2	; select bank2
  7401  0778  00E0               	movwf	_LastTemp^(0+256)
  7402                           
  7403                           ;klondike.c: 244: LastError = Error;
  7404  0779  0023               	movlb	3	; select bank3
  7405  077A  0862               	movf	(_Error+1)^(0+384),w
  7406  077B  01D0               	clrf	(_LastError+1)^(0+384)
  7407  077C  07D0               	addwf	(_LastError+1)^(0+384),f
  7408  077D  0861               	movf	_Error^(0+384),w
  7409  077E  01CF               	clrf	_LastError^(0+384)
  7410  077F  07CF               	addwf	_LastError^(0+384),f
  7411                           
  7412                           ;klondike.c: 246: PWM1DCH = Status.FanSpeed = FanLevel;
  7413  0780  3006               	movlw	6
  7414  0781  3EAC               	addlw	_Status& (0+255)
  7415  0782  0086               	movwf	6
  7416  0783  3001               	movlw	1	; select bank3/4
  7417  0784  0087               	movwf	7
  7418  0785  0863               	movf	_FanLevel^(0+384),w
  7419  0786  3FC0               	movwi [0]fsr1
  7420  0787  002C               	movlb	12	; select bank12
  7421  0788  0092               	movwf	18	;volatile
  7422  0789  0008               	return
  7423  078A                     __end_of_UpdateFanLevel:	
  7424                           
  7425                           	psect	text22
  7426  1532                     __ptext22:	
  7427 ;; *************** function ___fttol *****************
  7428 ;; Defined at:
  7429 ;;		line 45 in file "C:\Program Files (x86)\Microchip\xc8\v1.20\sources\pic\fttol.c"
  7430 ;; Parameters:    Size  Location     Type
  7431 ;;  f1              3   42[BANK1 ] float 
  7432 ;; Auto vars:     Size  Location     Type
  7433 ;;  lval            4   51[BANK1 ] unsigned long 
  7434 ;;  exp1            1   55[BANK1 ] unsigned char 
  7435 ;;  sign1           1   50[BANK1 ] unsigned char 
  7436 ;; Return value:  Size  Location     Type
  7437 ;;                  4   42[BANK1 ] long 
  7438 ;; Registers used:
  7439 ;;		wreg, status,2, status,0
  7440 ;; Tracked objects:
  7441 ;;		On entry : 0/0
  7442 ;;		On exit  : 0/0
  7443 ;;		Unchanged: 0/0
  7444 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7445 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  7446 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
  7447 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  7448 ;;      Totals:         0       0      14       0       0       0       0       0       0       0       0       0       
      +0       0
  7449 ;;Total ram usage:       14 bytes
  7450 ;; Hardware stack levels used:    1
  7451 ;; Hardware stack levels required when called:    4
  7452 ;; This function calls:
  7453 ;;		Nothing
  7454 ;; This function is called by:
  7455 ;;		_UpdateFanLevel
  7456 ;; This function uses a non-reentrant model
  7457 ;;
  7458                           
  7459                           
  7460                           ;psect for function ___fttol
  7461  1532                     ___fttol:	
  7462                           
  7463                           ;incstack = 0
  7464                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  7465  1532  0021               	movlb	1	; select bank1
  7466  1533  084A               	movf	___fttol@f1^(0+128),w
  7467  1534  00CE               	movwf	??___fttol^(0+128)
  7468  1535  084B               	movf	(___fttol@f1+1)^(0+128),w
  7469  1536  00CF               	movwf	(??___fttol^(0+128)+1)
  7470  1537  084C               	movf	(___fttol@f1+2)^(0+128),w
  7471  1538  00D0               	movwf	(??___fttol^(0+128)+2)
  7472  1539  1003               	clrc
  7473  153A  0D4F               	rlf	(??___fttol^(0+128)+1),w
  7474  153B  0D50               	rlf	(??___fttol^(0+128)+2),w
  7475  153C  00D1               	movwf	(??___fttol+3)^(0+128)
  7476  153D  0851               	movf	(??___fttol+3)^(0+128),w
  7477  153E  00D7               	movwf	___fttol@exp1^(0+128)
  7478  153F  08D7               	movf	___fttol@exp1^(0+128),f
  7479  1540  1D03               	skipz
  7480  1541  2D4B               	goto	l6969
  7481  1542  3000               	movlw	0
  7482  1543  00CD               	movwf	(?___fttol+3)^(0+128)
  7483  1544  3000               	movlw	0
  7484  1545  00CC               	movwf	(?___fttol+2)^(0+128)
  7485  1546  3000               	movlw	0
  7486  1547  00CB               	movwf	(?___fttol+1)^(0+128)
  7487  1548  3000               	movlw	0
  7488  1549  00CA               	movwf	?___fttol^(0+128)
  7489  154A  0008               	return
  7490  154B                     l6969:	
  7491  154B  084A               	movf	___fttol@f1^(0+128),w
  7492  154C  00CE               	movwf	??___fttol^(0+128)
  7493  154D  084B               	movf	(___fttol@f1+1)^(0+128),w
  7494  154E  00CF               	movwf	(??___fttol^(0+128)+1)
  7495  154F  084C               	movf	(___fttol@f1+2)^(0+128),w
  7496  1550  00D0               	movwf	(??___fttol^(0+128)+2)
  7497  1551  3017               	movlw	23
  7498  1552                     u7915:	
  7499  1552  36D0               	lsrf	(??___fttol^(0+128)+2),f
  7500  1553  0CCF               	rrf	(??___fttol^(0+128)+1),f
  7501  1554  0CCE               	rrf	??___fttol^(0+128),f
  7502  1555  0B89               	decfsz	9,f
  7503  1556  2D52               	goto	u7915
  7504  1557  084E               	movf	??___fttol^(0+128),w
  7505  1558  00D1               	movwf	(??___fttol+3)^(0+128)
  7506  1559  0851               	movf	(??___fttol+3)^(0+128),w
  7507  155A  00D2               	movwf	___fttol@sign1^(0+128)
  7508  155B  17CB               	bsf	(___fttol@f1^(0+128)+1),7
  7509  155C  30FF               	movlw	255
  7510  155D  05CA               	andwf	___fttol@f1^(0+128),f
  7511  155E  30FF               	movlw	255
  7512  155F  05CB               	andwf	(___fttol@f1+1)^(0+128),f
  7513  1560  3000               	movlw	0
  7514  1561  05CC               	andwf	(___fttol@f1+2)^(0+128),f
  7515  1562  084A               	movf	___fttol@f1^(0+128),w
  7516  1563  00D3               	movwf	___fttol@lval^(0+128)
  7517  1564  084B               	movf	(___fttol@f1+1)^(0+128),w
  7518  1565  00D4               	movwf	(___fttol@lval^(0+128)+1)
  7519  1566  084C               	movf	(___fttol@f1+2)^(0+128),w
  7520  1567  00D5               	movwf	(___fttol@lval^(0+128)+2)
  7521  1568  01D6               	clrf	(___fttol@lval^(0+128)+3)
  7522  1569  308E               	movlw	142
  7523  156A  02D7               	subwf	___fttol@exp1^(0+128),f
  7524  156B  1FD7               	btfss	___fttol@exp1^(0+128),7
  7525  156C  2D89               	goto	l6989
  7526  156D  0857               	movf	___fttol@exp1^(0+128),w
  7527  156E  3A80               	xorlw	128
  7528  156F  3E8F               	addlw	143
  7529  1570  1803               	skipnc
  7530  1571  2D7B               	goto	l6987
  7531  1572  3000               	movlw	0
  7532  1573  00CD               	movwf	(?___fttol+3)^(0+128)
  7533  1574  3000               	movlw	0
  7534  1575  00CC               	movwf	(?___fttol+2)^(0+128)
  7535  1576  3000               	movlw	0
  7536  1577  00CB               	movwf	(?___fttol+1)^(0+128)
  7537  1578  3000               	movlw	0
  7538  1579  00CA               	movwf	?___fttol^(0+128)
  7539  157A  0008               	return
  7540  157B                     l6987:	
  7541  157B  3001               	movlw	1
  7542  157C                     u7945:	
  7543  157C  36D6               	lsrf	(___fttol@lval+3)^(0+128),f
  7544  157D  0CD5               	rrf	(___fttol@lval+2)^(0+128),f
  7545  157E  0CD4               	rrf	(___fttol@lval+1)^(0+128),f
  7546  157F  0CD3               	rrf	___fttol@lval^(0+128),f
  7547  1580  0B89               	decfsz	9,f
  7548  1581  2D7C               	goto	u7945
  7549  1582  3001               	movlw	1
  7550  1583  00CE               	movwf	??___fttol^(0+128)
  7551  1584  084E               	movf	??___fttol^(0+128),w
  7552  1585  07D7               	addwf	___fttol@exp1^(0+128),f
  7553  1586  1903               	btfsc	3,2
  7554  1587  2DA2               	goto	l6999
  7555  1588  2D7B               	goto	l6987
  7556  1589                     l6989:	
  7557  1589  3018               	movlw	24
  7558  158A  0257               	subwf	___fttol@exp1^(0+128),w
  7559  158B  1C03               	skipc
  7560  158C  2D9F               	goto	l6997
  7561  158D  3000               	movlw	0
  7562  158E  00CD               	movwf	(?___fttol+3)^(0+128)
  7563  158F  3000               	movlw	0
  7564  1590  00CC               	movwf	(?___fttol+2)^(0+128)
  7565  1591  3000               	movlw	0
  7566  1592  00CB               	movwf	(?___fttol+1)^(0+128)
  7567  1593  3000               	movlw	0
  7568  1594  00CA               	movwf	?___fttol^(0+128)
  7569  1595  0008               	return
  7570  1596                     l6995:	
  7571  1596  3001               	movlw	1
  7572  1597                     u7975:	
  7573  1597  35D3               	lslf	___fttol@lval^(0+128),f
  7574  1598  0DD4               	rlf	(___fttol@lval+1)^(0+128),f
  7575  1599  0DD5               	rlf	(___fttol@lval+2)^(0+128),f
  7576  159A  0DD6               	rlf	(___fttol@lval+3)^(0+128),f
  7577  159B  0B89               	decfsz	9,f
  7578  159C  2D97               	goto	u7975
  7579  159D  3001               	movlw	1
  7580  159E  02D7               	subwf	___fttol@exp1^(0+128),f
  7581  159F                     l6997:	
  7582  159F  08D7               	movf	___fttol@exp1^(0+128),f
  7583  15A0  1D03               	skipz
  7584  15A1  2D96               	goto	l6995
  7585  15A2                     l6999:	
  7586  15A2  0852               	movf	___fttol@sign1^(0+128),w
  7587  15A3  1903               	btfsc	3,2
  7588  15A4  2DB0               	goto	l7003
  7589  15A5  09D3               	comf	___fttol@lval^(0+128),f
  7590  15A6  09D4               	comf	(___fttol@lval+1)^(0+128),f
  7591  15A7  09D5               	comf	(___fttol@lval+2)^(0+128),f
  7592  15A8  09D6               	comf	(___fttol@lval+3)^(0+128),f
  7593  15A9  0AD3               	incf	___fttol@lval^(0+128),f
  7594  15AA  1903               	skipnz
  7595  15AB  0AD4               	incf	(___fttol@lval+1)^(0+128),f
  7596  15AC  1903               	skipnz
  7597  15AD  0AD5               	incf	(___fttol@lval+2)^(0+128),f
  7598  15AE  1903               	skipnz
  7599  15AF  0AD6               	incf	(___fttol@lval+3)^(0+128),f
  7600  15B0                     l7003:	
  7601  15B0  0856               	movf	(___fttol@lval+3)^(0+128),w
  7602  15B1  00CD               	movwf	(?___fttol+3)^(0+128)
  7603  15B2  0855               	movf	(___fttol@lval+2)^(0+128),w
  7604  15B3  00CC               	movwf	(?___fttol+2)^(0+128)
  7605  15B4  0854               	movf	(___fttol@lval+1)^(0+128),w
  7606  15B5  00CB               	movwf	(?___fttol+1)^(0+128)
  7607  15B6  0853               	movf	___fttol@lval^(0+128),w
  7608  15B7  00CA               	movwf	?___fttol^(0+128)
  7609  15B8  0008               	return
  7610  15B9                     __end_of___fttol:	
  7611                           
  7612                           	psect	text23
  7613  1B5F                     __ptext23:	
  7614 ;; *************** function ___ftneg *****************
  7615 ;; Defined at:
  7616 ;;		line 16 in file "C:\Program Files (x86)\Microchip\xc8\v1.20\sources\pic\ftneg.c"
  7617 ;; Parameters:    Size  Location     Type
  7618 ;;  f1              3   26[BANK1 ] float 
  7619 ;; Auto vars:     Size  Location     Type
  7620 ;;		None
  7621 ;; Return value:  Size  Location     Type
  7622 ;;                  3   26[BANK1 ] float 
  7623 ;; Registers used:
  7624 ;;		wreg
  7625 ;; Tracked objects:
  7626 ;;		On entry : 0/0
  7627 ;;		On exit  : 0/0
  7628 ;;		Unchanged: 0/0
  7629 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7630 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  7631 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7632 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7633 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  7634 ;;Total ram usage:        3 bytes
  7635 ;; Hardware stack levels used:    1
  7636 ;; Hardware stack levels required when called:    4
  7637 ;; This function calls:
  7638 ;;		Nothing
  7639 ;; This function is called by:
  7640 ;;		_UpdateFanLevel
  7641 ;; This function uses a non-reentrant model
  7642 ;;
  7643                           
  7644                           
  7645                           ;psect for function ___ftneg
  7646  1B5F                     ___ftneg:	
  7647                           
  7648                           ;incstack = 0
  7649                           ; Regs used in ___ftneg: [wreg]
  7650  1B5F  0021               	movlb	1	; select bank1
  7651  1B60  083C               	movf	(___ftneg@f1+2)^(0+128),w
  7652  1B61  043B               	iorwf	(___ftneg@f1+1)^(0+128),w
  7653  1B62  043A               	iorwf	___ftneg@f1^(0+128),w
  7654  1B63  1903               	skipnz
  7655  1B64  0008               	return
  7656  1B65  3080               	movlw	128
  7657  1B66  06BC               	xorwf	(___ftneg@f1+2)^(0+128),f
  7658  1B67  0008               	return
  7659  1B68                     __end_of___ftneg:	
  7660                           
  7661                           	psect	text24
  7662  0B99                     __ptext24:	
  7663 ;; *************** function ___ftmul *****************
  7664 ;; Defined at:
  7665 ;;		line 52 in file "C:\Program Files (x86)\Microchip\xc8\v1.20\sources\pic\ftmul.c"
  7666 ;; Parameters:    Size  Location     Type
  7667 ;;  f1              3   10[BANK1 ] float 
  7668 ;;  f2              3   13[BANK1 ] float 
  7669 ;; Auto vars:     Size  Location     Type
  7670 ;;  f3_as_produc    3   21[BANK1 ] unsigned um
  7671 ;;  sign            1   25[BANK1 ] unsigned char 
  7672 ;;  cntr            1   24[BANK1 ] unsigned char 
  7673 ;;  exp             1   20[BANK1 ] unsigned char 
  7674 ;; Return value:  Size  Location     Type
  7675 ;;                  3   10[BANK1 ] float 
  7676 ;; Registers used:
  7677 ;;		wreg, status,2, status,0, pclath, cstack
  7678 ;; Tracked objects:
  7679 ;;		On entry : 0/0
  7680 ;;		On exit  : 0/0
  7681 ;;		Unchanged: 0/0
  7682 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7683 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
  7684 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
  7685 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  7686 ;;      Totals:         0       0      16       0       0       0       0       0       0       0       0       0       
      +0       0
  7687 ;;Total ram usage:       16 bytes
  7688 ;; Hardware stack levels used:    1
  7689 ;; Hardware stack levels required when called:    5
  7690 ;; This function calls:
  7691 ;;		___ftpack
  7692 ;; This function is called by:
  7693 ;;		_UpdateFanLevel
  7694 ;; This function uses a non-reentrant model
  7695 ;;
  7696                           
  7697                           
  7698                           ;psect for function ___ftmul
  7699  0B99                     ___ftmul:	
  7700                           
  7701                           ;incstack = 0
  7702                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  7703  0B99  0021               	movlb	1	; select bank1
  7704  0B9A  082A               	movf	___ftmul@f1^(0+128),w
  7705  0B9B  00B0               	movwf	??___ftmul^(0+128)
  7706  0B9C  082B               	movf	(___ftmul@f1+1)^(0+128),w
  7707  0B9D  00B1               	movwf	(??___ftmul^(0+128)+1)
  7708  0B9E  082C               	movf	(___ftmul@f1+2)^(0+128),w
  7709  0B9F  00B2               	movwf	(??___ftmul^(0+128)+2)
  7710  0BA0  1003               	clrc
  7711  0BA1  0D31               	rlf	(??___ftmul^(0+128)+1),w
  7712  0BA2  0D32               	rlf	(??___ftmul^(0+128)+2),w
  7713  0BA3  00B3               	movwf	(??___ftmul+3)^(0+128)
  7714  0BA4  0833               	movf	(??___ftmul+3)^(0+128),w
  7715  0BA5  00B4               	movwf	___ftmul@exp^(0+128)
  7716  0BA6  08B4               	movf	___ftmul@exp^(0+128),f
  7717  0BA7  1D03               	skipz
  7718  0BA8  2BB0               	goto	l6911
  7719  0BA9  3000               	movlw	0
  7720  0BAA  00AA               	movwf	?___ftmul^(0+128)
  7721  0BAB  3000               	movlw	0
  7722  0BAC  00AB               	movwf	(?___ftmul+1)^(0+128)
  7723  0BAD  3000               	movlw	0
  7724  0BAE  00AC               	movwf	(?___ftmul+2)^(0+128)
  7725  0BAF  0008               	return
  7726  0BB0                     l6911:	
  7727  0BB0  082D               	movf	___ftmul@f2^(0+128),w
  7728  0BB1  00B0               	movwf	??___ftmul^(0+128)
  7729  0BB2  082E               	movf	(___ftmul@f2+1)^(0+128),w
  7730  0BB3  00B1               	movwf	(??___ftmul^(0+128)+1)
  7731  0BB4  082F               	movf	(___ftmul@f2+2)^(0+128),w
  7732  0BB5  00B2               	movwf	(??___ftmul^(0+128)+2)
  7733  0BB6  1003               	clrc
  7734  0BB7  0D31               	rlf	(??___ftmul^(0+128)+1),w
  7735  0BB8  0D32               	rlf	(??___ftmul^(0+128)+2),w
  7736  0BB9  00B3               	movwf	(??___ftmul+3)^(0+128)
  7737  0BBA  0833               	movf	(??___ftmul+3)^(0+128),w
  7738  0BBB  00B9               	movwf	___ftmul@sign^(0+128)
  7739  0BBC  08B9               	movf	___ftmul@sign^(0+128),f
  7740  0BBD  1D03               	skipz
  7741  0BBE  2BC6               	goto	l6917
  7742  0BBF  3000               	movlw	0
  7743  0BC0  00AA               	movwf	?___ftmul^(0+128)
  7744  0BC1  3000               	movlw	0
  7745  0BC2  00AB               	movwf	(?___ftmul+1)^(0+128)
  7746  0BC3  3000               	movlw	0
  7747  0BC4  00AC               	movwf	(?___ftmul+2)^(0+128)
  7748  0BC5  0008               	return
  7749  0BC6                     l6917:	
  7750  0BC6  0839               	movf	___ftmul@sign^(0+128),w
  7751  0BC7  3E7B               	addlw	123
  7752  0BC8  00B0               	movwf	??___ftmul^(0+128)
  7753  0BC9  0830               	movf	??___ftmul^(0+128),w
  7754  0BCA  07B4               	addwf	___ftmul@exp^(0+128),f
  7755  0BCB  082A               	movf	___ftmul@f1^(0+128),w
  7756  0BCC  00B0               	movwf	??___ftmul^(0+128)
  7757  0BCD  082B               	movf	(___ftmul@f1+1)^(0+128),w
  7758  0BCE  00B1               	movwf	(??___ftmul^(0+128)+1)
  7759  0BCF  082C               	movf	(___ftmul@f1+2)^(0+128),w
  7760  0BD0  00B2               	movwf	(??___ftmul^(0+128)+2)
  7761  0BD1  3010               	movlw	16
  7762  0BD2                     u7795:	
  7763  0BD2  36B2               	lsrf	(??___ftmul^(0+128)+2),f
  7764  0BD3  0CB1               	rrf	(??___ftmul^(0+128)+1),f
  7765  0BD4  0CB0               	rrf	??___ftmul^(0+128),f
  7766  0BD5  0B89               	decfsz	9,f
  7767  0BD6  2BD2               	goto	u7795
  7768  0BD7  0830               	movf	??___ftmul^(0+128),w
  7769  0BD8  00B3               	movwf	(??___ftmul+3)^(0+128)
  7770  0BD9  0833               	movf	(??___ftmul+3)^(0+128),w
  7771  0BDA  00B9               	movwf	___ftmul@sign^(0+128)
  7772  0BDB  082D               	movf	___ftmul@f2^(0+128),w
  7773  0BDC  00B0               	movwf	??___ftmul^(0+128)
  7774  0BDD  082E               	movf	(___ftmul@f2+1)^(0+128),w
  7775  0BDE  00B1               	movwf	(??___ftmul^(0+128)+1)
  7776  0BDF  082F               	movf	(___ftmul@f2+2)^(0+128),w
  7777  0BE0  00B2               	movwf	(??___ftmul^(0+128)+2)
  7778  0BE1  3010               	movlw	16
  7779  0BE2                     u7805:	
  7780  0BE2  36B2               	lsrf	(??___ftmul^(0+128)+2),f
  7781  0BE3  0CB1               	rrf	(??___ftmul^(0+128)+1),f
  7782  0BE4  0CB0               	rrf	??___ftmul^(0+128),f
  7783  0BE5  0B89               	decfsz	9,f
  7784  0BE6  2BE2               	goto	u7805
  7785  0BE7  0830               	movf	??___ftmul^(0+128),w
  7786  0BE8  00B3               	movwf	(??___ftmul+3)^(0+128)
  7787  0BE9  0833               	movf	(??___ftmul+3)^(0+128),w
  7788  0BEA  06B9               	xorwf	___ftmul@sign^(0+128),f
  7789  0BEB  3080               	movlw	128
  7790  0BEC  00B0               	movwf	??___ftmul^(0+128)
  7791  0BED  0830               	movf	??___ftmul^(0+128),w
  7792  0BEE  05B9               	andwf	___ftmul@sign^(0+128),f
  7793  0BEF  17AB               	bsf	(___ftmul@f1^(0+128)+1),7
  7794  0BF0  17AE               	bsf	(___ftmul@f2^(0+128)+1),7
  7795  0BF1  30FF               	movlw	255
  7796  0BF2  05AD               	andwf	___ftmul@f2^(0+128),f
  7797  0BF3  30FF               	movlw	255
  7798  0BF4  05AE               	andwf	(___ftmul@f2+1)^(0+128),f
  7799  0BF5  3000               	movlw	0
  7800  0BF6  05AF               	andwf	(___ftmul@f2+2)^(0+128),f
  7801  0BF7  3000               	movlw	0
  7802  0BF8  00B5               	movwf	___ftmul@f3_as_product^(0+128)
  7803  0BF9  3000               	movlw	0
  7804  0BFA  00B6               	movwf	(___ftmul@f3_as_product+1)^(0+128)
  7805  0BFB  3000               	movlw	0
  7806  0BFC  00B7               	movwf	(___ftmul@f3_as_product+2)^(0+128)
  7807  0BFD  3007               	movlw	7
  7808  0BFE  00B0               	movwf	??___ftmul^(0+128)
  7809  0BFF  0830               	movf	??___ftmul^(0+128),w
  7810  0C00  00B8               	movwf	___ftmul@cntr^(0+128)
  7811  0C01                     l6929:	
  7812  0C01  1C2A               	btfss	___ftmul@f1^(0+128),0
  7813  0C02  2C09               	goto	l6933
  7814  0C03  082D               	movf	___ftmul@f2^(0+128),w
  7815  0C04  07B5               	addwf	___ftmul@f3_as_product^(0+128),f
  7816  0C05  082E               	movf	(___ftmul@f2+1)^(0+128),w
  7817  0C06  3DB6               	addwfc	(___ftmul@f3_as_product+1)^(0+128),f
  7818  0C07  082F               	movf	(___ftmul@f2+2)^(0+128),w
  7819  0C08  3DB7               	addwfc	(___ftmul@f3_as_product+2)^(0+128),f
  7820  0C09                     l6933:	
  7821  0C09  3001               	movlw	1
  7822  0C0A                     u7825:	
  7823  0C0A  36AC               	lsrf	(___ftmul@f1+2)^(0+128),f
  7824  0C0B  0CAB               	rrf	(___ftmul@f1+1)^(0+128),f
  7825  0C0C  0CAA               	rrf	___ftmul@f1^(0+128),f
  7826  0C0D  0B89               	decfsz	9,f
  7827  0C0E  2C0A               	goto	u7825
  7828  0C0F  3001               	movlw	1
  7829  0C10                     u7835:	
  7830  0C10  35AD               	lslf	___ftmul@f2^(0+128),f
  7831  0C11  0DAE               	rlf	(___ftmul@f2+1)^(0+128),f
  7832  0C12  0DAF               	rlf	(___ftmul@f2+2)^(0+128),f
  7833  0C13  0B89               	decfsz	9,f
  7834  0C14  2C10               	goto	u7835
  7835  0C15  3001               	movlw	1
  7836  0C16  02B8               	subwf	___ftmul@cntr^(0+128),f
  7837  0C17  1D03               	btfss	3,2
  7838  0C18  2C01               	goto	l6929
  7839  0C19  3009               	movlw	9
  7840  0C1A  00B0               	movwf	??___ftmul^(0+128)
  7841  0C1B  0830               	movf	??___ftmul^(0+128),w
  7842  0C1C  00B8               	movwf	___ftmul@cntr^(0+128)
  7843  0C1D                     l6941:	
  7844  0C1D  1C2A               	btfss	___ftmul@f1^(0+128),0
  7845  0C1E  2C25               	goto	l6945
  7846  0C1F  082D               	movf	___ftmul@f2^(0+128),w
  7847  0C20  07B5               	addwf	___ftmul@f3_as_product^(0+128),f
  7848  0C21  082E               	movf	(___ftmul@f2+1)^(0+128),w
  7849  0C22  3DB6               	addwfc	(___ftmul@f3_as_product+1)^(0+128),f
  7850  0C23  082F               	movf	(___ftmul@f2+2)^(0+128),w
  7851  0C24  3DB7               	addwfc	(___ftmul@f3_as_product+2)^(0+128),f
  7852  0C25                     l6945:	
  7853  0C25  3001               	movlw	1
  7854  0C26                     u7865:	
  7855  0C26  36AC               	lsrf	(___ftmul@f1+2)^(0+128),f
  7856  0C27  0CAB               	rrf	(___ftmul@f1+1)^(0+128),f
  7857  0C28  0CAA               	rrf	___ftmul@f1^(0+128),f
  7858  0C29  0B89               	decfsz	9,f
  7859  0C2A  2C26               	goto	u7865
  7860  0C2B  3001               	movlw	1
  7861  0C2C                     u7875:	
  7862  0C2C  36B7               	lsrf	(___ftmul@f3_as_product+2)^(0+128),f
  7863  0C2D  0CB6               	rrf	(___ftmul@f3_as_product+1)^(0+128),f
  7864  0C2E  0CB5               	rrf	___ftmul@f3_as_product^(0+128),f
  7865  0C2F  0B89               	decfsz	9,f
  7866  0C30  2C2C               	goto	u7875
  7867  0C31  3001               	movlw	1
  7868  0C32  02B8               	subwf	___ftmul@cntr^(0+128),f
  7869  0C33  1D03               	btfss	3,2
  7870  0C34  2C1D               	goto	l6941
  7871  0C35  0835               	movf	___ftmul@f3_as_product^(0+128),w
  7872  0C36  00A0               	movwf	?___ftpack^(0+128)
  7873  0C37  0836               	movf	(___ftmul@f3_as_product+1)^(0+128),w
  7874  0C38  00A1               	movwf	(?___ftpack+1)^(0+128)
  7875  0C39  0837               	movf	(___ftmul@f3_as_product+2)^(0+128),w
  7876  0C3A  00A2               	movwf	(?___ftpack+2)^(0+128)
  7877  0C3B  0834               	movf	___ftmul@exp^(0+128),w
  7878  0C3C  00B0               	movwf	??___ftmul^(0+128)
  7879  0C3D  0830               	movf	??___ftmul^(0+128),w
  7880  0C3E  00A3               	movwf	(?___ftpack^(0+128)+3)
  7881  0C3F  0839               	movf	___ftmul@sign^(0+128),w
  7882  0C40  00B1               	movwf	(??___ftmul+1)^(0+128)
  7883  0C41  0831               	movf	(??___ftmul+1)^(0+128),w
  7884  0C42  00A4               	movwf	(?___ftpack^(0+128)+4)
  7885  0C43  3191  2168         	fcall	___ftpack
  7886  0C45  0021               	movlb	1	; select bank1
  7887  0C46  0820               	movf	?___ftpack^(0+128),w
  7888  0C47  00AA               	movwf	?___ftmul^(0+128)
  7889  0C48  0821               	movf	(?___ftpack+1)^(0+128),w
  7890  0C49  00AB               	movwf	(?___ftmul+1)^(0+128)
  7891  0C4A  0822               	movf	(?___ftpack+2)^(0+128),w
  7892  0C4B  00AC               	movwf	(?___ftmul+2)^(0+128)
  7893  0C4C  0008               	return
  7894  0C4D                     __end_of___ftmul:	
  7895                           
  7896                           	psect	text25
  7897  0DF0                     __ptext25:	
  7898 ;; *************** function ___ftadd *****************
  7899 ;; Defined at:
  7900 ;;		line 87 in file "C:\Program Files (x86)\Microchip\xc8\v1.20\sources\pic\ftadd.c"
  7901 ;; Parameters:    Size  Location     Type
  7902 ;;  f1              3   29[BANK1 ] float 
  7903 ;;  f2              3   32[BANK1 ] float 
  7904 ;; Auto vars:     Size  Location     Type
  7905 ;;  exp1            1   41[BANK1 ] unsigned char 
  7906 ;;  exp2            1   40[BANK1 ] unsigned char 
  7907 ;;  sign            1   39[BANK1 ] unsigned char 
  7908 ;; Return value:  Size  Location     Type
  7909 ;;                  3   29[BANK1 ] float 
  7910 ;; Registers used:
  7911 ;;		wreg, status,2, status,0, pclath, cstack
  7912 ;; Tracked objects:
  7913 ;;		On entry : 0/0
  7914 ;;		On exit  : 0/0
  7915 ;;		Unchanged: 0/0
  7916 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7917 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
  7918 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  7919 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  7920 ;;      Totals:         0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0
  7921 ;;Total ram usage:       13 bytes
  7922 ;; Hardware stack levels used:    1
  7923 ;; Hardware stack levels required when called:    5
  7924 ;; This function calls:
  7925 ;;		___ftpack
  7926 ;; This function is called by:
  7927 ;;		_UpdateFanLevel
  7928 ;; This function uses a non-reentrant model
  7929 ;;
  7930                           
  7931                           
  7932                           ;psect for function ___ftadd
  7933  0DF0                     ___ftadd:	
  7934                           
  7935                           ;incstack = 0
  7936                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  7937  0DF0  0021               	movlb	1	; select bank1
  7938  0DF1  083D               	movf	___ftadd@f1^(0+128),w
  7939  0DF2  00C3               	movwf	??___ftadd^(0+128)
  7940  0DF3  083E               	movf	(___ftadd@f1+1)^(0+128),w
  7941  0DF4  00C4               	movwf	(??___ftadd^(0+128)+1)
  7942  0DF5  083F               	movf	(___ftadd@f1+2)^(0+128),w
  7943  0DF6  00C5               	movwf	(??___ftadd^(0+128)+2)
  7944  0DF7  1003               	clrc
  7945  0DF8  0D44               	rlf	(??___ftadd^(0+128)+1),w
  7946  0DF9  0D45               	rlf	(??___ftadd^(0+128)+2),w
  7947  0DFA  00C6               	movwf	(??___ftadd+3)^(0+128)
  7948  0DFB  0846               	movf	(??___ftadd+3)^(0+128),w
  7949  0DFC  00C9               	movwf	___ftadd@exp1^(0+128)
  7950  0DFD  0840               	movf	___ftadd@f2^(0+128),w
  7951  0DFE  00C3               	movwf	??___ftadd^(0+128)
  7952  0DFF  0841               	movf	(___ftadd@f2+1)^(0+128),w
  7953  0E00  00C4               	movwf	(??___ftadd^(0+128)+1)
  7954  0E01  0842               	movf	(___ftadd@f2+2)^(0+128),w
  7955  0E02  00C5               	movwf	(??___ftadd^(0+128)+2)
  7956  0E03  1003               	clrc
  7957  0E04  0D44               	rlf	(??___ftadd^(0+128)+1),w
  7958  0E05  0D45               	rlf	(??___ftadd^(0+128)+2),w
  7959  0E06  00C6               	movwf	(??___ftadd+3)^(0+128)
  7960  0E07  0846               	movf	(??___ftadd+3)^(0+128),w
  7961  0E08  00C8               	movwf	___ftadd@exp2^(0+128)
  7962  0E09  0849               	movf	___ftadd@exp1^(0+128),w
  7963  0E0A  1903               	btfsc	3,2
  7964  0E0B  2E18               	goto	l6841
  7965  0E0C  0848               	movf	___ftadd@exp2^(0+128),w
  7966  0E0D  0249               	subwf	___ftadd@exp1^(0+128),w
  7967  0E0E  1803               	skipnc
  7968  0E0F  2E1F               	goto	l6845
  7969  0E10  0349               	decf	___ftadd@exp1^(0+128),w
  7970  0E11  3AFF               	xorlw	255
  7971  0E12  0748               	addwf	___ftadd@exp2^(0+128),w
  7972  0E13  00C3               	movwf	??___ftadd^(0+128)
  7973  0E14  3019               	movlw	25
  7974  0E15  0243               	subwf	??___ftadd^(0+128),w
  7975  0E16  1C03               	skipc
  7976  0E17  2E1F               	goto	l6845
  7977  0E18                     l6841:	
  7978  0E18  0840               	movf	___ftadd@f2^(0+128),w
  7979  0E19  00BD               	movwf	?___ftadd^(0+128)
  7980  0E1A  0841               	movf	(___ftadd@f2+1)^(0+128),w
  7981  0E1B  00BE               	movwf	(?___ftadd+1)^(0+128)
  7982  0E1C  0842               	movf	(___ftadd@f2+2)^(0+128),w
  7983  0E1D  00BF               	movwf	(?___ftadd+2)^(0+128)
  7984  0E1E  0008               	return
  7985  0E1F                     l6845:	
  7986  0E1F  0848               	movf	___ftadd@exp2^(0+128),w
  7987  0E20  1903               	btfsc	3,2
  7988  0E21  0008               	return
  7989  0E22  0849               	movf	___ftadd@exp1^(0+128),w
  7990  0E23  0248               	subwf	___ftadd@exp2^(0+128),w
  7991  0E24  1803               	skipnc
  7992  0E25  2E2E               	goto	l6851
  7993  0E26  0348               	decf	___ftadd@exp2^(0+128),w
  7994  0E27  3AFF               	xorlw	255
  7995  0E28  0749               	addwf	___ftadd@exp1^(0+128),w
  7996  0E29  00C3               	movwf	??___ftadd^(0+128)
  7997  0E2A  3019               	movlw	25
  7998  0E2B  0243               	subwf	??___ftadd^(0+128),w
  7999  0E2C  1803               	btfsc	3,0
  8000  0E2D  0008               	return
  8001  0E2E                     l6851:	
  8002  0E2E  3006               	movlw	6
  8003  0E2F  00C3               	movwf	??___ftadd^(0+128)
  8004  0E30  0843               	movf	??___ftadd^(0+128),w
  8005  0E31  00C7               	movwf	___ftadd@sign^(0+128)
  8006  0E32  1BBF               	btfsc	(___ftadd@f1+2)^(0+128),7
  8007  0E33  17C7               	bsf	___ftadd@sign^(0+128),7
  8008  0E34  1BC2               	btfsc	(___ftadd@f2+2)^(0+128),7
  8009  0E35  1747               	bsf	___ftadd@sign^(0+128),6
  8010  0E36  17BE               	bsf	(___ftadd@f1^(0+128)+1),7
  8011  0E37  30FF               	movlw	255
  8012  0E38  05BD               	andwf	___ftadd@f1^(0+128),f
  8013  0E39  30FF               	movlw	255
  8014  0E3A  05BE               	andwf	(___ftadd@f1+1)^(0+128),f
  8015  0E3B  3000               	movlw	0
  8016  0E3C  05BF               	andwf	(___ftadd@f1+2)^(0+128),f
  8017  0E3D  17C1               	bsf	(___ftadd@f2^(0+128)+1),7
  8018  0E3E  30FF               	movlw	255
  8019  0E3F  05C0               	andwf	___ftadd@f2^(0+128),f
  8020  0E40  30FF               	movlw	255
  8021  0E41  05C1               	andwf	(___ftadd@f2+1)^(0+128),f
  8022  0E42  3000               	movlw	0
  8023  0E43  05C2               	andwf	(___ftadd@f2+2)^(0+128),f
  8024  0E44  0848               	movf	___ftadd@exp2^(0+128),w
  8025  0E45  0249               	subwf	___ftadd@exp1^(0+128),w
  8026  0E46  1803               	skipnc
  8027  0E47  2E6A               	goto	l6873
  8028  0E48                     l6863:	
  8029  0E48  3001               	movlw	1
  8030  0E49                     u7635:	
  8031  0E49  35C0               	lslf	___ftadd@f2^(0+128),f
  8032  0E4A  0DC1               	rlf	(___ftadd@f2+1)^(0+128),f
  8033  0E4B  0DC2               	rlf	(___ftadd@f2+2)^(0+128),f
  8034  0E4C  0B89               	decfsz	9,f
  8035  0E4D  2E49               	goto	u7635
  8036  0E4E  3001               	movlw	1
  8037  0E4F  02C8               	subwf	___ftadd@exp2^(0+128),f
  8038  0E50  0848               	movf	___ftadd@exp2^(0+128),w
  8039  0E51  0649               	xorwf	___ftadd@exp1^(0+128),w
  8040  0E52  1903               	skipnz
  8041  0E53  2E65               	goto	l6871
  8042  0E54  3001               	movlw	1
  8043  0E55  02C7               	subwf	___ftadd@sign^(0+128),f
  8044  0E56  0847               	movf	___ftadd@sign^(0+128),w
  8045  0E57  3907               	andlw	7
  8046  0E58  1903               	btfsc	3,2
  8047  0E59  2E65               	goto	l6871
  8048  0E5A  2E48               	goto	l6863
  8049  0E5B                     l6869:	
  8050  0E5B  3001               	movlw	1
  8051  0E5C                     u7665:	
  8052  0E5C  36BF               	lsrf	(___ftadd@f1+2)^(0+128),f
  8053  0E5D  0CBE               	rrf	(___ftadd@f1+1)^(0+128),f
  8054  0E5E  0CBD               	rrf	___ftadd@f1^(0+128),f
  8055  0E5F  0B89               	decfsz	9,f
  8056  0E60  2E5C               	goto	u7665
  8057  0E61  3001               	movlw	1
  8058  0E62  00C3               	movwf	??___ftadd^(0+128)
  8059  0E63  0843               	movf	??___ftadd^(0+128),w
  8060  0E64  07C9               	addwf	___ftadd@exp1^(0+128),f
  8061  0E65                     l6871:	
  8062  0E65  0849               	movf	___ftadd@exp1^(0+128),w
  8063  0E66  0648               	xorwf	___ftadd@exp2^(0+128),w
  8064  0E67  1903               	btfsc	3,2
  8065  0E68  2E8F               	goto	l1112
  8066  0E69  2E5B               	goto	l6869
  8067  0E6A                     l6873:	
  8068  0E6A  0849               	movf	___ftadd@exp1^(0+128),w
  8069  0E6B  0248               	subwf	___ftadd@exp2^(0+128),w
  8070  0E6C  1803               	skipnc
  8071  0E6D  2E8F               	goto	l1112
  8072  0E6E                     l6875:	
  8073  0E6E  3001               	movlw	1
  8074  0E6F                     u7695:	
  8075  0E6F  35BD               	lslf	___ftadd@f1^(0+128),f
  8076  0E70  0DBE               	rlf	(___ftadd@f1+1)^(0+128),f
  8077  0E71  0DBF               	rlf	(___ftadd@f1+2)^(0+128),f
  8078  0E72  0B89               	decfsz	9,f
  8079  0E73  2E6F               	goto	u7695
  8080  0E74  3001               	movlw	1
  8081  0E75  02C9               	subwf	___ftadd@exp1^(0+128),f
  8082  0E76  0848               	movf	___ftadd@exp2^(0+128),w
  8083  0E77  0649               	xorwf	___ftadd@exp1^(0+128),w
  8084  0E78  1903               	skipnz
  8085  0E79  2E8B               	goto	l6883
  8086  0E7A  3001               	movlw	1
  8087  0E7B  02C7               	subwf	___ftadd@sign^(0+128),f
  8088  0E7C  0847               	movf	___ftadd@sign^(0+128),w
  8089  0E7D  3907               	andlw	7
  8090  0E7E  1903               	btfsc	3,2
  8091  0E7F  2E8B               	goto	l6883
  8092  0E80  2E6E               	goto	l6875
  8093  0E81                     l6881:	
  8094  0E81  3001               	movlw	1
  8095  0E82                     u7725:	
  8096  0E82  36C2               	lsrf	(___ftadd@f2+2)^(0+128),f
  8097  0E83  0CC1               	rrf	(___ftadd@f2+1)^(0+128),f
  8098  0E84  0CC0               	rrf	___ftadd@f2^(0+128),f
  8099  0E85  0B89               	decfsz	9,f
  8100  0E86  2E82               	goto	u7725
  8101  0E87  3001               	movlw	1
  8102  0E88  00C3               	movwf	??___ftadd^(0+128)
  8103  0E89  0843               	movf	??___ftadd^(0+128),w
  8104  0E8A  07C8               	addwf	___ftadd@exp2^(0+128),f
  8105  0E8B                     l6883:	
  8106  0E8B  0849               	movf	___ftadd@exp1^(0+128),w
  8107  0E8C  0648               	xorwf	___ftadd@exp2^(0+128),w
  8108  0E8D  1D03               	skipz
  8109  0E8E  2E81               	goto	l6881
  8110  0E8F                     l1112:	
  8111  0E8F  1FC7               	btfss	___ftadd@sign^(0+128),7
  8112  0E90  2EA1               	goto	l6887
  8113  0E91  30FF               	movlw	255
  8114  0E92  06BD               	xorwf	___ftadd@f1^(0+128),f
  8115  0E93  30FF               	movlw	255
  8116  0E94  06BE               	xorwf	(___ftadd@f1+1)^(0+128),f
  8117  0E95  30FF               	movlw	255
  8118  0E96  06BF               	xorwf	(___ftadd@f1+2)^(0+128),f
  8119  0E97  3001               	movlw	1
  8120  0E98  07BD               	addwf	___ftadd@f1^(0+128),f
  8121  0E99  3000               	movlw	0
  8122  0E9A  1803               	skipnc
  8123  0E9B  3001               	movlw	1
  8124  0E9C  07BE               	addwf	(___ftadd@f1+1)^(0+128),f
  8125  0E9D  3000               	movlw	0
  8126  0E9E  1803               	skipnc
  8127  0E9F  3001               	movlw	1
  8128  0EA0  07BF               	addwf	(___ftadd@f1+2)^(0+128),f
  8129  0EA1                     l6887:	
  8130  0EA1  1F47               	btfss	___ftadd@sign^(0+128),6
  8131  0EA2  2EB3               	goto	l6891
  8132  0EA3  30FF               	movlw	255
  8133  0EA4  06C0               	xorwf	___ftadd@f2^(0+128),f
  8134  0EA5  30FF               	movlw	255
  8135  0EA6  06C1               	xorwf	(___ftadd@f2+1)^(0+128),f
  8136  0EA7  30FF               	movlw	255
  8137  0EA8  06C2               	xorwf	(___ftadd@f2+2)^(0+128),f
  8138  0EA9  3001               	movlw	1
  8139  0EAA  07C0               	addwf	___ftadd@f2^(0+128),f
  8140  0EAB  3000               	movlw	0
  8141  0EAC  1803               	skipnc
  8142  0EAD  3001               	movlw	1
  8143  0EAE  07C1               	addwf	(___ftadd@f2+1)^(0+128),f
  8144  0EAF  3000               	movlw	0
  8145  0EB0  1803               	skipnc
  8146  0EB1  3001               	movlw	1
  8147  0EB2  07C2               	addwf	(___ftadd@f2+2)^(0+128),f
  8148  0EB3                     l6891:	
  8149  0EB3  01C7               	clrf	___ftadd@sign^(0+128)
  8150  0EB4  083D               	movf	___ftadd@f1^(0+128),w
  8151  0EB5  07C0               	addwf	___ftadd@f2^(0+128),f
  8152  0EB6  083E               	movf	(___ftadd@f1+1)^(0+128),w
  8153  0EB7  3DC1               	addwfc	(___ftadd@f2+1)^(0+128),f
  8154  0EB8  083F               	movf	(___ftadd@f1+2)^(0+128),w
  8155  0EB9  3DC2               	addwfc	(___ftadd@f2+2)^(0+128),f
  8156  0EBA  1FC2               	btfss	(___ftadd@f2+2)^(0+128),7
  8157  0EBB  2ECE               	goto	l6901
  8158  0EBC  30FF               	movlw	255
  8159  0EBD  06C0               	xorwf	___ftadd@f2^(0+128),f
  8160  0EBE  30FF               	movlw	255
  8161  0EBF  06C1               	xorwf	(___ftadd@f2+1)^(0+128),f
  8162  0EC0  30FF               	movlw	255
  8163  0EC1  06C2               	xorwf	(___ftadd@f2+2)^(0+128),f
  8164  0EC2  3001               	movlw	1
  8165  0EC3  07C0               	addwf	___ftadd@f2^(0+128),f
  8166  0EC4  3000               	movlw	0
  8167  0EC5  1803               	skipnc
  8168  0EC6  3001               	movlw	1
  8169  0EC7  07C1               	addwf	(___ftadd@f2+1)^(0+128),f
  8170  0EC8  3000               	movlw	0
  8171  0EC9  1803               	skipnc
  8172  0ECA  3001               	movlw	1
  8173  0ECB  07C2               	addwf	(___ftadd@f2+2)^(0+128),f
  8174  0ECC  01C7               	clrf	___ftadd@sign^(0+128)
  8175  0ECD  0AC7               	incf	___ftadd@sign^(0+128),f
  8176  0ECE                     l6901:	
  8177  0ECE  0840               	movf	___ftadd@f2^(0+128),w
  8178  0ECF  00A0               	movwf	?___ftpack^(0+128)
  8179  0ED0  0841               	movf	(___ftadd@f2+1)^(0+128),w
  8180  0ED1  00A1               	movwf	(?___ftpack+1)^(0+128)
  8181  0ED2  0842               	movf	(___ftadd@f2+2)^(0+128),w
  8182  0ED3  00A2               	movwf	(?___ftpack+2)^(0+128)
  8183  0ED4  0849               	movf	___ftadd@exp1^(0+128),w
  8184  0ED5  00C3               	movwf	??___ftadd^(0+128)
  8185  0ED6  0843               	movf	??___ftadd^(0+128),w
  8186  0ED7  00A3               	movwf	(?___ftpack^(0+128)+3)
  8187  0ED8  0847               	movf	___ftadd@sign^(0+128),w
  8188  0ED9  00C4               	movwf	(??___ftadd+1)^(0+128)
  8189  0EDA  0844               	movf	(??___ftadd+1)^(0+128),w
  8190  0EDB  00A4               	movwf	(?___ftpack^(0+128)+4)
  8191  0EDC  3191  2168         	fcall	___ftpack
  8192  0EDE  0021               	movlb	1	; select bank1
  8193  0EDF  0820               	movf	?___ftpack^(0+128),w
  8194  0EE0  00BD               	movwf	?___ftadd^(0+128)
  8195  0EE1  0821               	movf	(?___ftpack+1)^(0+128),w
  8196  0EE2  00BE               	movwf	(?___ftadd+1)^(0+128)
  8197  0EE3  0822               	movf	(?___ftpack+2)^(0+128),w
  8198  0EE4  00BF               	movwf	(?___ftadd+2)^(0+128)
  8199  0EE5  0008               	return
  8200  0EE6                     __end_of___ftadd:	
  8201                           
  8202                           	psect	text26
  8203  1D12                     __ptext26:	
  8204 ;; *************** function ___awtoft *****************
  8205 ;; Defined at:
  8206 ;;		line 33 in file "C:\Program Files (x86)\Microchip\xc8\v1.20\sources\pic\awtoft.c"
  8207 ;; Parameters:    Size  Location     Type
  8208 ;;  c               2    5[BANK1 ] int 
  8209 ;; Auto vars:     Size  Location     Type
  8210 ;;  sign            1   17[BANK0 ] unsigned char 
  8211 ;; Return value:  Size  Location     Type
  8212 ;;                  3    5[BANK1 ] float 
  8213 ;; Registers used:
  8214 ;;		wreg, status,2, status,0, pclath, cstack
  8215 ;; Tracked objects:
  8216 ;;		On entry : 0/0
  8217 ;;		On exit  : 0/0
  8218 ;;		Unchanged: 0/0
  8219 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8220 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  8221 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8222 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  8223 ;;      Totals:         0       1       5       0       0       0       0       0       0       0       0       0       
      +0       0
  8224 ;;Total ram usage:        6 bytes
  8225 ;; Hardware stack levels used:    1
  8226 ;; Hardware stack levels required when called:    5
  8227 ;; This function calls:
  8228 ;;		___ftpack
  8229 ;; This function is called by:
  8230 ;;		_UpdateFanLevel
  8231 ;; This function uses a non-reentrant model
  8232 ;;
  8233                           
  8234                           
  8235                           ;psect for function ___awtoft
  8236  1D12                     ___awtoft:	
  8237                           
  8238                           ;incstack = 0
  8239                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
  8240  1D12  0020               	movlb	0	; select bank0
  8241  1D13  01E1               	clrf	___awtoft@sign
  8242  1D14  0021               	movlb	1	; select bank1
  8243  1D15  1FA6               	btfss	(___awtoft@c+1)^(0+128),7
  8244  1D16  2D1F               	goto	l6829
  8245  1D17  09A5               	comf	___awtoft@c^(0+128),f
  8246  1D18  09A6               	comf	(___awtoft@c+1)^(0+128),f
  8247  1D19  0AA5               	incf	___awtoft@c^(0+128),f
  8248  1D1A  1903               	skipnz
  8249  1D1B  0AA6               	incf	(___awtoft@c+1)^(0+128),f
  8250  1D1C  0020               	movlb	0	; select bank0
  8251  1D1D  01E1               	clrf	___awtoft@sign
  8252  1D1E  0AE1               	incf	___awtoft@sign,f
  8253  1D1F                     l6829:	
  8254  1D1F  0021               	movlb	1	; select bank1
  8255  1D20  0825               	movf	___awtoft@c^(0+128),w
  8256  1D21  00A0               	movwf	?___ftpack^(0+128)
  8257  1D22  0826               	movf	(___awtoft@c+1)^(0+128),w
  8258  1D23  00A1               	movwf	(?___ftpack+1)^(0+128)
  8259  1D24  01A2               	clrf	(?___ftpack+2)^(0+128)
  8260  1D25  308E               	movlw	142
  8261  1D26  00A8               	movwf	??___awtoft^(0+128)
  8262  1D27  0828               	movf	??___awtoft^(0+128),w
  8263  1D28  00A3               	movwf	(?___ftpack^(0+128)+3)
  8264  1D29  0020               	movlb	0	; select bank0
  8265  1D2A  0861               	movf	___awtoft@sign,w
  8266  1D2B  0021               	movlb	1	; select bank1
  8267  1D2C  00A9               	movwf	(??___awtoft+1)^(0+128)
  8268  1D2D  0829               	movf	(??___awtoft+1)^(0+128),w
  8269  1D2E  00A4               	movwf	(?___ftpack^(0+128)+4)
  8270  1D2F  3191  2168         	fcall	___ftpack
  8271  1D31  0021               	movlb	1	; select bank1
  8272  1D32  0820               	movf	?___ftpack^(0+128),w
  8273  1D33  00A5               	movwf	?___awtoft^(0+128)
  8274  1D34  0821               	movf	(?___ftpack+1)^(0+128),w
  8275  1D35  00A6               	movwf	(?___awtoft+1)^(0+128)
  8276  1D36  0822               	movf	(?___ftpack+2)^(0+128),w
  8277  1D37  00A7               	movwf	(?___awtoft+2)^(0+128)
  8278  1D38  0008               	return
  8279  1D39                     __end_of___awtoft:	
  8280                           
  8281                           	psect	text27
  8282  1168                     __ptext27:	
  8283 ;; *************** function ___ftpack *****************
  8284 ;; Defined at:
  8285 ;;		line 63 in file "C:\Program Files (x86)\Microchip\xc8\v1.20\sources\pic\float.c"
  8286 ;; Parameters:    Size  Location     Type
  8287 ;;  arg             3    0[BANK1 ] unsigned um
  8288 ;;  exp             1    3[BANK1 ] unsigned char 
  8289 ;;  sign            1    4[BANK1 ] unsigned char 
  8290 ;; Auto vars:     Size  Location     Type
  8291 ;;		None
  8292 ;; Return value:  Size  Location     Type
  8293 ;;                  3    0[BANK1 ] float 
  8294 ;; Registers used:
  8295 ;;		wreg, status,2, status,0
  8296 ;; Tracked objects:
  8297 ;;		On entry : 0/0
  8298 ;;		On exit  : 0/0
  8299 ;;		Unchanged: 0/0
  8300 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8301 ;;      Params:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
  8302 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8303 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8304 ;;      Totals:         0       3       5       0       0       0       0       0       0       0       0       0       
      +0       0
  8305 ;;Total ram usage:        8 bytes
  8306 ;; Hardware stack levels used:    1
  8307 ;; Hardware stack levels required when called:    4
  8308 ;; This function calls:
  8309 ;;		Nothing
  8310 ;; This function is called by:
  8311 ;;		___awtoft
  8312 ;;		___ftadd
  8313 ;;		___ftmul
  8314 ;; This function uses a non-reentrant model
  8315 ;;
  8316                           
  8317                           
  8318                           ;psect for function ___ftpack
  8319  1168                     ___ftpack:	
  8320                           
  8321                           ;incstack = 0
  8322                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  8323  1168  0021               	movlb	1	; select bank1
  8324  1169  0823               	movf	___ftpack@exp^(0+128),w
  8325  116A  1903               	btfsc	3,2
  8326  116B  2971               	goto	l6795
  8327  116C  0822               	movf	(___ftpack@arg+2)^(0+128),w
  8328  116D  0421               	iorwf	(___ftpack@arg+1)^(0+128),w
  8329  116E  0420               	iorwf	___ftpack@arg^(0+128),w
  8330  116F  1D03               	skipz
  8331  1170  2984               	goto	l6801
  8332  1171                     l6795:	
  8333  1171  3000               	movlw	0
  8334  1172  00A0               	movwf	?___ftpack^(0+128)
  8335  1173  3000               	movlw	0
  8336  1174  00A1               	movwf	(?___ftpack+1)^(0+128)
  8337  1175  3000               	movlw	0
  8338  1176  00A2               	movwf	(?___ftpack+2)^(0+128)
  8339  1177  0008               	return
  8340  1178                     l6799:	
  8341  1178  3001               	movlw	1
  8342  1179  0020               	movlb	0	; select bank0
  8343  117A  00DE               	movwf	??___ftpack
  8344  117B  085E               	movf	??___ftpack,w
  8345  117C  0021               	movlb	1	; select bank1
  8346  117D  07A3               	addwf	___ftpack@exp^(0+128),f
  8347  117E  3001               	movlw	1
  8348  117F                     u7445:	
  8349  117F  36A2               	lsrf	(___ftpack@arg+2)^(0+128),f
  8350  1180  0CA1               	rrf	(___ftpack@arg+1)^(0+128),f
  8351  1181  0CA0               	rrf	___ftpack@arg^(0+128),f
  8352  1182  0B89               	decfsz	9,f
  8353  1183  297F               	goto	u7445
  8354  1184                     l6801:	
  8355  1184  30FE               	movlw	254
  8356  1185  0522               	andwf	(___ftpack@arg+2)^(0+128),w
  8357  1186  1903               	btfsc	3,2
  8358  1187  299F               	goto	l1083
  8359  1188  2978               	goto	l6799
  8360  1189                     l6803:	
  8361  1189  3001               	movlw	1
  8362  118A  0020               	movlb	0	; select bank0
  8363  118B  00DE               	movwf	??___ftpack
  8364  118C  085E               	movf	??___ftpack,w
  8365  118D  0021               	movlb	1	; select bank1
  8366  118E  07A3               	addwf	___ftpack@exp^(0+128),f
  8367  118F  3001               	movlw	1
  8368  1190  07A0               	addwf	___ftpack@arg^(0+128),f
  8369  1191  3000               	movlw	0
  8370  1192  1803               	skipnc
  8371  1193  3001               	movlw	1
  8372  1194  07A1               	addwf	(___ftpack@arg+1)^(0+128),f
  8373  1195  3000               	movlw	0
  8374  1196  1803               	skipnc
  8375  1197  3001               	movlw	1
  8376  1198  07A2               	addwf	(___ftpack@arg+2)^(0+128),f
  8377  1199  3001               	movlw	1
  8378  119A                     u7465:	
  8379  119A  36A2               	lsrf	(___ftpack@arg+2)^(0+128),f
  8380  119B  0CA1               	rrf	(___ftpack@arg+1)^(0+128),f
  8381  119C  0CA0               	rrf	___ftpack@arg^(0+128),f
  8382  119D  0B89               	decfsz	9,f
  8383  119E  299A               	goto	u7465
  8384  119F                     l1083:	
  8385  119F  30FF               	movlw	255
  8386  11A0  0522               	andwf	(___ftpack@arg+2)^(0+128),w
  8387  11A1  1903               	btfsc	3,2
  8388  11A2  29AC               	goto	l6811
  8389  11A3  2989               	goto	l6803
  8390  11A4                     l6809:	
  8391  11A4  3001               	movlw	1
  8392  11A5  02A3               	subwf	___ftpack@exp^(0+128),f
  8393  11A6  3001               	movlw	1
  8394  11A7                     u7485:	
  8395  11A7  35A0               	lslf	___ftpack@arg^(0+128),f
  8396  11A8  0DA1               	rlf	(___ftpack@arg+1)^(0+128),f
  8397  11A9  0DA2               	rlf	(___ftpack@arg+2)^(0+128),f
  8398  11AA  0B89               	decfsz	9,f
  8399  11AB  29A7               	goto	u7485
  8400  11AC                     l6811:	
  8401  11AC  1FA1               	btfss	(___ftpack@arg+1)^(0+128),7
  8402  11AD  29A4               	goto	l6809
  8403  11AE  1823               	btfsc	___ftpack@exp^(0+128),0
  8404  11AF  29B6               	goto	l1089
  8405  11B0  30FF               	movlw	255
  8406  11B1  05A0               	andwf	___ftpack@arg^(0+128),f
  8407  11B2  307F               	movlw	127
  8408  11B3  05A1               	andwf	(___ftpack@arg+1)^(0+128),f
  8409  11B4  30FF               	movlw	255
  8410  11B5  05A2               	andwf	(___ftpack@arg+2)^(0+128),f
  8411  11B6                     l1089:	
  8412  11B6  1003               	clrc
  8413  11B7  0CA3               	rrf	___ftpack@exp^(0+128),f
  8414  11B8  0823               	movf	___ftpack@exp^(0+128),w
  8415  11B9  0020               	movlb	0	; select bank0
  8416  11BA  00DE               	movwf	??___ftpack
  8417  11BB  01DF               	clrf	??___ftpack+1
  8418  11BC  01E0               	clrf	??___ftpack+2
  8419  11BD  3010               	movlw	16
  8420  11BE                     u7515:	
  8421  11BE  35DE               	lslf	??___ftpack,f
  8422  11BF  0DDF               	rlf	??___ftpack+1,f
  8423  11C0  0DE0               	rlf	??___ftpack+2,f
  8424  11C1  0B89               	decfsz	9,f
  8425  11C2  29BE               	goto	u7515
  8426  11C3  085E               	movf	??___ftpack,w
  8427  11C4  0021               	movlb	1	; select bank1
  8428  11C5  04A0               	iorwf	___ftpack@arg^(0+128),f
  8429  11C6  0020               	movlb	0	; select bank0
  8430  11C7  085F               	movf	??___ftpack+1,w
  8431  11C8  0021               	movlb	1	; select bank1
  8432  11C9  04A1               	iorwf	(___ftpack@arg+1)^(0+128),f
  8433  11CA  0020               	movlb	0	; select bank0
  8434  11CB  0860               	movf	??___ftpack+2,w
  8435  11CC  0021               	movlb	1	; select bank1
  8436  11CD  04A2               	iorwf	(___ftpack@arg+2)^(0+128),f
  8437  11CE  0824               	movf	___ftpack@sign^(0+128),w
  8438  11CF  1903               	btfsc	3,2
  8439  11D0  0008               	return
  8440  11D1  17A2               	bsf	(___ftpack@arg^(0+128)+2),7
  8441  11D2  0008               	return
  8442  11D3                     __end_of___ftpack:	
  8443                           
  8444                           	psect	text28
  8445  0D05                     __ptext28:	
  8446 ;; *************** function _USBDeviceTasks *****************
  8447 ;; Defined at:
  8448 ;;		line 669 in file "../USB/usb_device.c"
  8449 ;; Parameters:    Size  Location     Type
  8450 ;;		None
  8451 ;; Auto vars:     Size  Location     Type
  8452 ;;  i               1   31[BANK1 ] unsigned char 
  8453 ;; Return value:  Size  Location     Type
  8454 ;;		None               void
  8455 ;; Registers used:
  8456 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  8457 ;; Tracked objects:
  8458 ;;		On entry : 0/0
  8459 ;;		On exit  : 0/0
  8460 ;;		Unchanged: 0/0
  8461 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8462 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8463 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  8464 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  8465 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  8466 ;;Total ram usage:        3 bytes
  8467 ;; Hardware stack levels used:    1
  8468 ;; Hardware stack levels required when called:   12
  8469 ;; This function calls:
  8470 ;;		_USBDeviceInit
  8471 ;;		_USBWakeFromSuspend
  8472 ;;		_USBSuspend
  8473 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
  8474 ;;		_USBCtrlEPAllowStatusStage
  8475 ;;		_USBStallHandler
  8476 ;;		_USBCtrlEPService
  8477 ;; This function is called by:
  8478 ;;		_main
  8479 ;; This function uses a non-reentrant model
  8480 ;;
  8481                           
  8482                           
  8483                           ;psect for function _USBDeviceTasks
  8484  0D05                     _USBDeviceTasks:	
  8485                           
  8486                           ;usb_device.c: 735: }
  8487                           ;usb_device.c: 757: if(USBDeviceState == DETACHED_STATE)
  8488                           
  8489                           ;usb_device.c: 734: return;
  8490                           
  8491                           ;usb_device.c: 733: PIR2bits.USBIF = 0;;
  8492                           
  8493                           ;usb_device.c: 705: USBDeviceState = DETACHED_STATE;
  8494                           
  8495                           ;usb_device.c: 702: UIE = 0;
  8496                           
  8497                           ;usb_device.c: 697: {
  8498                           ;usb_device.c: 699: UCON = 0;
  8499                           
  8500                           ;usb_device.c: 670: BYTE i;
  8501                           ;usb_device.c: 696: if (1 != 1)
  8502                           
  8503                           ;incstack = 0
  8504                           ; Regs used in _USBDeviceTasks: [allreg]
  8505  0D05  0021               	movlb	1	; select bank1
  8506  0D06  08E3               	movf	_USBDeviceState^(0+128),f
  8507  0D07  1D03               	skipz
  8508  0D08  2D19               	goto	l6169
  8509                           
  8510                           ;usb_device.c: 758: {
  8511                           ;usb_device.c: 760: UCON = 0;
  8512  0D09  003D               	movlb	29	; select bank29
  8513  0D0A  018E               	clrf	14	;volatile
  8514                           
  8515                           ;usb_device.c: 763: UIE = 0;
  8516  0D0B  0192               	clrf	18	;volatile
  8517                           
  8518                           ;usb_device.c: 767: { UCFG = 0x10 | 0x00 | 0x04 | 0x02; UEIE = 0x9F; UIE = 0x39 | 0x40 |
      +                           0x02; };
  8519  0D0C  3016               	movlw	22
  8520  0D0D  0091               	movwf	17	;volatile
  8521  0D0E  309F               	movlw	159
  8522  0D0F  0097               	movwf	23	;volatile
  8523  0D10  307B               	movlw	123
  8524  0D11  0092               	movwf	18	;volatile
  8525  0D12                     l140:	
  8526                           ;usb_device.c: 770: while(!UCONbits.USBEN){UCONbits.USBEN = 1;}
  8527                           
  8528  0D12  198E               	btfsc	14,3	;volatile
  8529  0D13  2D16               	goto	l142
  8530  0D14  158E               	bsf	14,3	;volatile
  8531  0D15  2D12               	goto	l140
  8532  0D16                     l142:	
  8533                           
  8534                           ;usb_device.c: 773: USBDeviceState = ATTACHED_STATE;
  8535  0D16  0021               	movlb	1	; select bank1
  8536  0D17  01E3               	clrf	_USBDeviceState^(0+128)
  8537  0D18  0AE3               	incf	_USBDeviceState^(0+128),f
  8538  0D19                     l6169:	
  8539                           
  8540                           ;usb_device.c: 778: }
  8541                           ;usb_device.c: 781: if(USBDeviceState == ATTACHED_STATE)
  8542  0D19  0863               	movf	_USBDeviceState^(0+128),w
  8543  0D1A  3A01               	xorlw	1
  8544  0D1B  1D03               	skipz
  8545  0D1C  2D29               	goto	l6181
  8546                           
  8547                           ;usb_device.c: 782: {
  8548                           ;usb_device.c: 792: if(!UCONbits.SE0)
  8549  0D1D  003D               	movlb	29	; select bank29
  8550  0D1E  1A8E               	btfsc	14,5	;volatile
  8551  0D1F  2D29               	goto	l6181
  8552                           
  8553                           ;usb_device.c: 793: {
  8554                           ;usb_device.c: 794: UIR = 0;;
  8555  0D20  0190               	clrf	16	;volatile
  8556                           
  8557                           ;usb_device.c: 796: UIE=0;
  8558  0D21  0192               	clrf	18	;volatile
  8559                           
  8560                           ;usb_device.c: 798: UIEbits.URSTIE = 1;
  8561  0D22  1412               	bsf	18,0	;volatile
  8562                           
  8563                           ;usb_device.c: 799: UIEbits.IDLEIE = 1;
  8564  0D23  1612               	bsf	18,4	;volatile
  8565                           
  8566                           ;usb_device.c: 800: USBDeviceState = POWERED_STATE;
  8567  0D24  3002               	movlw	2
  8568  0D25  0021               	movlb	1	; select bank1
  8569  0D26  00BD               	movwf	??_USBDeviceTasks^(0+128)
  8570  0D27  083D               	movf	??_USBDeviceTasks^(0+128),w
  8571  0D28  00E3               	movwf	_USBDeviceState^(0+128)
  8572  0D29                     l6181:	
  8573                           
  8574                           ;usb_device.c: 801: }
  8575                           ;usb_device.c: 802: }
  8576                           ;usb_device.c: 818: if(UIRbits.ACTVIF && UIEbits.ACTVIE)
  8577  0D29  003D               	movlb	29	; select bank29
  8578  0D2A  1910               	btfsc	16,2	;volatile
  8579  0D2B  1D12               	btfss	18,2	;volatile
  8580  0D2C  2D36               	goto	l6189
  8581                           
  8582                           ;usb_device.c: 819: {
  8583                           ;usb_device.c: 820: (UIR &= 0xFB);
  8584  0D2D  30FB               	movlw	251
  8585  0D2E  0021               	movlb	1	; select bank1
  8586  0D2F  00BD               	movwf	??_USBDeviceTasks^(0+128)
  8587  0D30  083D               	movf	??_USBDeviceTasks^(0+128),w
  8588  0D31  003D               	movlb	29	; select bank29
  8589  0D32  0590               	andwf	16,f	;volatile
  8590                           
  8591                           ;usb_device.c: 824: USBWakeFromSuspend();
  8592  0D33  319C  240C  318D   	fcall	_USBWakeFromSuspend
  8593  0D36                     l6189:	
  8594                           
  8595                           ;usb_device.c: 826: }
  8596                           ;usb_device.c: 831: if(UCONbits.SUSPND==1)
  8597  0D36  003D               	movlb	29	; select bank29
  8598  0D37  1C8E               	btfss	14,1	;volatile
  8599  0D38  2D3C               	goto	l146
  8600                           
  8601                           ;usb_device.c: 832: {
  8602                           ;usb_device.c: 833: PIR2bits.USBIF = 0;;
  8603  0D39  0020               	movlb	0	; select bank0
  8604  0D3A  1112               	bcf	18,2	;volatile
  8605                           
  8606                           ;usb_device.c: 834: return;
  8607  0D3B  0008               	return
  8608  0D3C                     l146:	
  8609                           
  8610                           ;usb_device.c: 835: }
  8611                           ;usb_device.c: 847: if(UIRbits.URSTIF && UIEbits.URSTIE)
  8612  0D3C  1810               	btfsc	16,0	;volatile
  8613  0D3D  1C12               	btfss	18,0	;volatile
  8614  0D3E  2D4C               	goto	l6201
  8615                           
  8616                           ;usb_device.c: 848: {
  8617                           ;usb_device.c: 849: USBDeviceInit();
  8618  0D3F  3189  2184  318D   	fcall	_USBDeviceInit
  8619                           
  8620                           ;usb_device.c: 853: ;
  8621                           ;usb_device.c: 855: USBDeviceState = DEFAULT_STATE;
  8622  0D42  3004               	movlw	4
  8623  0D43  0021               	movlb	1	; select bank1
  8624  0D44  00BD               	movwf	??_USBDeviceTasks^(0+128)
  8625  0D45  083D               	movf	??_USBDeviceTasks^(0+128),w
  8626  0D46  00E3               	movwf	_USBDeviceState^(0+128)
  8627                           
  8628                           ;usb_device.c: 865: (UIR &= 0xFE);
  8629  0D47  30FE               	movlw	254
  8630  0D48  00BD               	movwf	??_USBDeviceTasks^(0+128)
  8631  0D49  083D               	movf	??_USBDeviceTasks^(0+128),w
  8632  0D4A  003D               	movlb	29	; select bank29
  8633  0D4B  0590               	andwf	16,f	;volatile
  8634  0D4C                     l6201:	
  8635                           
  8636                           ;usb_device.c: 866: }
  8637                           ;usb_device.c: 871: if(UIRbits.IDLEIF && UIEbits.IDLEIE)
  8638  0D4C  1A10               	btfsc	16,4	;volatile
  8639  0D4D  1E12               	btfss	18,4	;volatile
  8640  0D4E  2D58               	goto	l6209
  8641                           
  8642                           ;usb_device.c: 872: {
  8643                           ;usb_device.c: 877: USBSuspend();
  8644  0D4F  319C  2424  318D   	fcall	_USBSuspend
  8645                           
  8646                           ;usb_device.c: 880: (UIR &= 0xEF);
  8647  0D52  30EF               	movlw	239
  8648  0D53  0021               	movlb	1	; select bank1
  8649  0D54  00BD               	movwf	??_USBDeviceTasks^(0+128)
  8650  0D55  083D               	movf	??_USBDeviceTasks^(0+128),w
  8651  0D56  003D               	movlb	29	; select bank29
  8652  0D57  0590               	andwf	16,f	;volatile
  8653  0D58                     l6209:	
  8654                           
  8655                           ;usb_device.c: 881: }
  8656                           ;usb_device.c: 883: if(UIRbits.SOFIF)
  8657  0D58  1F10               	btfss	16,6	;volatile
  8658  0D59  2D7B               	goto	l6225
  8659                           
  8660                           ;usb_device.c: 884: {
  8661                           ;usb_device.c: 885: if(UIEbits.SOFIE)
  8662  0D5A  1F12               	btfss	18,6	;volatile
  8663  0D5B  2D69               	goto	l6215
  8664                           
  8665                           ;usb_device.c: 886: {
  8666                           ;usb_device.c: 887: USER_USB_CALLBACK_EVENT_HANDLER(EVENT_SOF,0,1);
  8667  0D5C  3073               	movlw	115
  8668  0D5D  0021               	movlb	1	; select bank1
  8669  0D5E  00AC               	movwf	?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)
  8670  0D5F  3000               	movlw	0
  8671  0D60  00AD               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)+1)
  8672  0D61  01AE               	clrf	(?_USER_USB_CALLBACK_EVENT_HANDLER+2)^(0+128)
  8673  0D62  3001               	movlw	1
  8674  0D63  00AF               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)+3)
  8675  0D64  3000               	movlw	0
  8676  0D65  00B0               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)+4)
  8677  0D66  319D  25F4  318D   	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
  8678  0D69                     l6215:	
  8679                           
  8680                           ;usb_device.c: 888: }
  8681                           ;usb_device.c: 889: (UIR &= 0xBF);
  8682  0D69  30BF               	movlw	191
  8683  0D6A  0021               	movlb	1	; select bank1
  8684  0D6B  00BD               	movwf	??_USBDeviceTasks^(0+128)
  8685  0D6C  083D               	movf	??_USBDeviceTasks^(0+128),w
  8686  0D6D  003D               	movlb	29	; select bank29
  8687  0D6E  0590               	andwf	16,f	;volatile
  8688                           
  8689                           ;usb_device.c: 914: if(USBStatusStageTimeoutCounter != 0u)
  8690  0D6F  0022               	movlb	2	; select bank2
  8691  0D70  086C               	movf	_USBStatusStageTimeoutCounter^(0+256),w
  8692  0D71  1903               	btfsc	3,2
  8693  0D72  2D75               	goto	l6221
  8694                           
  8695                           ;usb_device.c: 915: {
  8696                           ;usb_device.c: 916: USBStatusStageTimeoutCounter--;
  8697  0D73  3001               	movlw	1
  8698  0D74  02EC               	subwf	_USBStatusStageTimeoutCounter^(0+256),f
  8699  0D75                     l6221:	
  8700                           
  8701                           ;usb_device.c: 917: }
  8702                           ;usb_device.c: 923: if(USBStatusStageTimeoutCounter == 0)
  8703  0D75  08EC               	movf	_USBStatusStageTimeoutCounter^(0+256),f
  8704  0D76  1D03               	skipz
  8705  0D77  2D7B               	goto	l6225
  8706                           
  8707                           ;usb_device.c: 924: {
  8708                           ;usb_device.c: 925: USBCtrlEPAllowStatusStage();
  8709  0D78  3191  21D3  318D   	fcall	_USBCtrlEPAllowStatusStage
  8710  0D7B                     l6225:	
  8711                           
  8712                           ;usb_device.c: 926: }
  8713                           ;usb_device.c: 928: }
  8714                           ;usb_device.c: 930: if(UIRbits.STALLIF && UIEbits.STALLIE)
  8715  0D7B  003D               	movlb	29	; select bank29
  8716  0D7C  1A90               	btfsc	16,5	;volatile
  8717  0D7D  1E92               	btfss	18,5	;volatile
  8718  0D7E  2D82               	goto	l6231
  8719                           
  8720                           ;usb_device.c: 931: {
  8721                           ;usb_device.c: 932: USBStallHandler();
  8722  0D7F  319C  24ED  318D   	fcall	_USBStallHandler
  8723  0D82                     l6231:	
  8724                           
  8725                           ;usb_device.c: 933: }
  8726                           ;usb_device.c: 935: if(UIRbits.UERRIF && UIEbits.UERRIE)
  8727  0D82  003D               	movlb	29	; select bank29
  8728  0D83  1890               	btfsc	16,1	;volatile
  8729  0D84  1C92               	btfss	18,1	;volatile
  8730  0D85  2D95               	goto	l6239
  8731                           
  8732                           ;usb_device.c: 936: {
  8733                           ;usb_device.c: 937: USER_USB_CALLBACK_EVENT_HANDLER(EVENT_BUS_ERROR,0,1);
  8734  0D86  30FF               	movlw	255
  8735  0D87  0021               	movlb	1	; select bank1
  8736  0D88  00AC               	movwf	?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)
  8737  0D89  307F               	movlw	127
  8738  0D8A  00AD               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)+1)
  8739  0D8B  01AE               	clrf	(?_USER_USB_CALLBACK_EVENT_HANDLER+2)^(0+128)
  8740  0D8C  3001               	movlw	1
  8741  0D8D  00AF               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)+3)
  8742  0D8E  3000               	movlw	0
  8743  0D8F  00B0               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)+4)
  8744  0D90  319D  25F4  318D   	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
  8745                           
  8746                           ;usb_device.c: 938: UEIR = 0;;
  8747  0D93  003D               	movlb	29	; select bank29
  8748  0D94  0193               	clrf	19	;volatile
  8749  0D95                     l6239:	
  8750                           
  8751                           ;usb_device.c: 946: }
  8752                           ;usb_device.c: 953: if(USBDeviceState < DEFAULT_STATE)
  8753  0D95  3004               	movlw	4
  8754  0D96  0021               	movlb	1	; select bank1
  8755  0D97  0263               	subwf	_USBDeviceState^(0+128),w
  8756  0D98  1803               	skipnc
  8757  0D99  2D9D               	goto	l155
  8758                           
  8759                           ;usb_device.c: 954: {
  8760                           ;usb_device.c: 955: PIR2bits.USBIF = 0;;
  8761  0D9A  0020               	movlb	0	; select bank0
  8762  0D9B  1112               	bcf	18,2	;volatile
  8763                           
  8764                           ;usb_device.c: 956: return;
  8765  0D9C  0008               	return
  8766  0D9D                     l155:	
  8767                           
  8768                           ;usb_device.c: 957: }
  8769                           ;usb_device.c: 962: if(UIEbits.TRNIE)
  8770  0D9D  003D               	movlb	29	; select bank29
  8771  0D9E  1D92               	btfss	18,3	;volatile
  8772  0D9F  2DED               	goto	l156
  8773                           
  8774                           ;usb_device.c: 963: {
  8775                           ;usb_device.c: 964: for(i = 0; i < 4u; i++)
  8776  0DA0  0021               	movlb	1	; select bank1
  8777  0DA1  01BF               	clrf	USBDeviceTasks@i^(0+128)
  8778  0DA2  2DE6               	goto	L9
  8779  0DA3                     l6249:	
  8780                           
  8781                           ;usb_device.c: 967: {
  8782                           ;usb_device.c: 969: USTATcopy.Val = USTAT;
  8783  0DA3  080F               	movf	15,w	;volatile
  8784  0DA4  0021               	movlb	1	; select bank1
  8785  0DA5  00BD               	movwf	??_USBDeviceTasks^(0+128)
  8786  0DA6  083D               	movf	??_USBDeviceTasks^(0+128),w
  8787  0DA7  00EE               	movwf	_USTATcopy^(0+128)
  8788                           
  8789                           ;usb_device.c: 970: endpoint_number = USTATcopy.endpoint_number;
  8790  0DA8  0C6E               	rrf	_USTATcopy^(0+128),w
  8791  0DA9  00BD               	movwf	??_USBDeviceTasks^(0+128)
  8792  0DAA  0CBD               	rrf	??_USBDeviceTasks^(0+128),f
  8793  0DAB  0C3D               	rrf	??_USBDeviceTasks^(0+128),w
  8794  0DAC  390F               	andlw	15
  8795  0DAD  00BE               	movwf	(??_USBDeviceTasks+1)^(0+128)
  8796  0DAE  083E               	movf	(??_USBDeviceTasks+1)^(0+128),w
  8797  0DAF  00E5               	movwf	_endpoint_number^(0+128)
  8798                           
  8799                           ;usb_device.c: 972: (UIR &= 0xF7);
  8800  0DB0  30F7               	movlw	247
  8801  0DB1  00BD               	movwf	??_USBDeviceTasks^(0+128)
  8802  0DB2  083D               	movf	??_USBDeviceTasks^(0+128),w
  8803  0DB3  003D               	movlb	29	; select bank29
  8804  0DB4  0590               	andwf	16,f	;volatile
  8805                           
  8806                           ;usb_device.c: 977: if(USTATcopy.direction == 0)
  8807  0DB5  0021               	movlb	1	; select bank1
  8808  0DB6  196E               	btfsc	_USTATcopy^(0+128),2
  8809  0DB7  2DBB               	goto	l6259
  8810                           
  8811                           ;usb_device.c: 978: {
  8812                           ;usb_device.c: 979: ep_data_out[endpoint_number].bits.ping_pong_state ^= 1;
  8813  0DB8  0865               	movf	_endpoint_number^(0+128),w
  8814  0DB9  3ED3               	addlw	_ep_data_out& (0+255)
  8815  0DBA  2DBD               	goto	L8
  8816  0DBB                     l6259:	
  8817                           ;usb_device.c: 980: }
  8818                           
  8819                           
  8820                           ;usb_device.c: 981: else
  8821                           ;usb_device.c: 982: {
  8822                           ;usb_device.c: 983: ep_data_in[endpoint_number].bits.ping_pong_state ^= 1;
  8823  0DBB  0865               	movf	_endpoint_number^(0+128),w
  8824  0DBC  3ED1               	addlw	_ep_data_in& (0+255)
  8825  0DBD                     L8:	
  8826  0DBD  0086               	movwf	6
  8827  0DBE  3001               	movlw	1	; select bank3/4
  8828  0DBF  0087               	movwf	7
  8829  0DC0  0801               	movf	1,w
  8830  0DC1  3901               	andlw	1
  8831  0DC2  00BD               	movwf	??_USBDeviceTasks^(0+128)
  8832  0DC3  3001               	movlw	1
  8833  0DC4  06BD               	xorwf	??_USBDeviceTasks^(0+128),f
  8834  0DC5  0801               	movf	1,w
  8835  0DC6  063D               	xorwf	??_USBDeviceTasks^(0+128),w
  8836  0DC7  39FE               	andlw	-2
  8837  0DC8  063D               	xorwf	??_USBDeviceTasks^(0+128),w
  8838  0DC9  0081               	movwf	1
  8839                           
  8840                           ;usb_device.c: 984: }
  8841                           ;usb_device.c: 989: if(endpoint_number == 0)
  8842  0DCA  08E5               	movf	_endpoint_number^(0+128),f
  8843  0DCB  1D03               	skipz
  8844  0DCC  2DD1               	goto	l6265
  8845                           
  8846                           ;usb_device.c: 990: {
  8847                           ;usb_device.c: 991: USBCtrlEPService();
  8848  0DCD  3187  278A  318D   	fcall	_USBCtrlEPService
  8849                           
  8850                           ;usb_device.c: 992: }
  8851  0DD0  2DE1               	goto	l6267
  8852  0DD1                     l6265:	
  8853                           
  8854                           ;usb_device.c: 993: else
  8855                           ;usb_device.c: 994: {
  8856                           ;usb_device.c: 995: USER_USB_CALLBACK_EVENT_HANDLER(EVENT_TRANSFER,(BYTE*)&USTATcopy.Val
      +                          ,0);
  8857  0DD1  3072               	movlw	114
  8858  0DD2  0021               	movlb	1	; select bank1
  8859  0DD3  00AC               	movwf	?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)
  8860  0DD4  3000               	movlw	0
  8861  0DD5  00AD               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)+1)
  8862  0DD6  30EE               	movlw	_USTATcopy& (0+255)
  8863  0DD7  00BD               	movwf	??_USBDeviceTasks^(0+128)
  8864  0DD8  083D               	movf	??_USBDeviceTasks^(0+128),w
  8865  0DD9  00AE               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER+2)^(0+128)
  8866  0DDA  3000               	movlw	0
  8867  0DDB  00AF               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)+3)
  8868  0DDC  3000               	movlw	0
  8869  0DDD  00B0               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)+4)
  8870  0DDE  319D  25F4  318D   	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
  8871  0DE1                     l6267:	
  8872                           ;usb_device.c: 998: else
  8873                           ;usb_device.c: 999: break;
  8874                           
  8875                           ;usb_device.c: 996: }
  8876                           ;usb_device.c: 997: }
  8877                           
  8878  0DE1  3001               	movlw	1
  8879  0DE2  0021               	movlb	1	; select bank1
  8880  0DE3  00BD               	movwf	??_USBDeviceTasks^(0+128)
  8881  0DE4  083D               	movf	??_USBDeviceTasks^(0+128),w
  8882  0DE5  07BF               	addwf	USBDeviceTasks@i^(0+128),f
  8883  0DE6                     L9:	
  8884  0DE6  3004               	movlw	4
  8885  0DE7  023F               	subwf	USBDeviceTasks@i^(0+128),w
  8886  0DE8  1803               	btfsc	3,0
  8887  0DE9  2DED               	goto	l156
  8888                           
  8889                           ;usb_device.c: 965: {
  8890                           ;usb_device.c: 966: if(UIRbits.TRNIF)
  8891  0DEA  003D               	movlb	29	; select bank29
  8892  0DEB  1990               	btfsc	16,3	;volatile
  8893  0DEC  2DA3               	goto	l6249
  8894  0DED                     l156:	
  8895                           
  8896                           ;usb_device.c: 1000: }
  8897                           ;usb_device.c: 1001: }
  8898                           ;usb_device.c: 1003: PIR2bits.USBIF = 0;;
  8899  0DED  0020               	movlb	0	; select bank0
  8900  0DEE  1112               	bcf	18,2	;volatile
  8901  0DEF  0008               	return
  8902  0DF0                     __end_of_USBDeviceTasks:	
  8903                           
  8904                           	psect	text29
  8905  078A                     __ptext29:	
  8906 ;; *************** function _USBCtrlEPService *****************
  8907 ;; Defined at:
  8908 ;;		line 2523 in file "../USB/usb_device.c"
  8909 ;; Parameters:    Size  Location     Type
  8910 ;;		None
  8911 ;; Auto vars:     Size  Location     Type
  8912 ;;  setup_cnt       1   28[BANK1 ] unsigned char 
  8913 ;; Return value:  Size  Location     Type
  8914 ;;		None               void
  8915 ;; Registers used:
  8916 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  8917 ;; Tracked objects:
  8918 ;;		On entry : 0/0
  8919 ;;		On exit  : 0/0
  8920 ;;		Unchanged: 0/0
  8921 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8922 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8923 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  8924 ;;      Temps:          0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  8925 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  8926 ;;Total ram usage:        4 bytes
  8927 ;; Hardware stack levels used:    1
  8928 ;; Hardware stack levels required when called:   11
  8929 ;; This function calls:
  8930 ;;		_USBCtrlTrfSetupHandler
  8931 ;;		_USBCtrlTrfOutHandler
  8932 ;;		_USBCtrlTrfInHandler
  8933 ;; This function is called by:
  8934 ;;		_USBDeviceTasks
  8935 ;; This function uses a non-reentrant model
  8936 ;;
  8937                           
  8938                           
  8939                           ;psect for function _USBCtrlEPService
  8940  078A                     _USBCtrlEPService:	
  8941                           
  8942                           ;usb_device.c: 2528: USBStatusStageTimeoutCounter = (BYTE)40;
  8943                           
  8944                           ;incstack = 0
  8945                           ; Regs used in _USBCtrlEPService: [allreg]
  8946  078A  3028               	movlw	40
  8947  078B  0021               	movlb	1	; select bank1
  8948  078C  00B9               	movwf	??_USBCtrlEPService^(0+128)
  8949  078D  0839               	movf	??_USBCtrlEPService^(0+128),w
  8950  078E  0022               	movlb	2	; select bank2
  8951  078F  00EC               	movwf	_USBStatusStageTimeoutCounter^(0+256)
  8952                           
  8953                           ;usb_device.c: 2532: if((USTATcopy.Val & ~0x02) == 0x00)
  8954  0790  0021               	movlb	1	; select bank1
  8955  0791  086E               	movf	_USTATcopy^(0+128),w
  8956  0792  39FD               	andlw	253
  8957  0793  1D03               	btfss	3,2
  8958  0794  2FF3               	goto	l6349
  8959                           
  8960                           ;usb_device.c: 2533: {
  8961                           ;usb_device.c: 2536: pBDTEntryEP0OutCurrent = (volatile BDT_ENTRY*)&BDT[(USTATcopy.Val &
      +                           0x7E)>>1];
  8962  0795  366E               	lsrf	_USTATcopy^(0+128),w
  8963  0796  393F               	andlw	63
  8964  0797  00B9               	movwf	??_USBCtrlEPService^(0+128)
  8965  0798  3001               	movlw	1
  8966  0799                     u6785:	
  8967  0799  35B9               	lslf	??_USBCtrlEPService^(0+128),f
  8968  079A  3EFF               	addlw	-1
  8969  079B  1D03               	skipz
  8970  079C  2F99               	goto	u6785
  8971  079D  3539               	lslf	??_USBCtrlEPService^(0+128),w
  8972  079E  3E20               	addlw	32
  8973  079F  00BA               	movwf	(??_USBCtrlEPService+1)^(0+128)
  8974  07A0  083A               	movf	(??_USBCtrlEPService+1)^(0+128),w
  8975  07A1  00E6               	movwf	_pBDTEntryEP0OutCurrent^(0+128)
  8976                           
  8977                           ;usb_device.c: 2544: pBDTEntryEP0OutNext = pBDTEntryEP0OutCurrent;
  8978  07A2  0866               	movf	_pBDTEntryEP0OutCurrent^(0+128),w
  8979  07A3  00B9               	movwf	??_USBCtrlEPService^(0+128)
  8980  07A4  0839               	movf	??_USBCtrlEPService^(0+128),w
  8981  07A5  0020               	movlb	0	; select bank0
  8982  07A6  00EA               	movwf	_pBDTEntryEP0OutNext
  8983                           
  8984                           ;usb_device.c: 2546: ((BYTE_VAL*)&pBDTEntryEP0OutNext)->Val ^= 0x0004;
  8985  07A7  3004               	movlw	4
  8986  07A8  0021               	movlb	1	; select bank1
  8987  07A9  00B9               	movwf	??_USBCtrlEPService^(0+128)
  8988  07AA  0839               	movf	??_USBCtrlEPService^(0+128),w
  8989  07AB  0020               	movlb	0	; select bank0
  8990  07AC  06EA               	xorwf	_pBDTEntryEP0OutNext,f
  8991                           
  8992                           ;usb_device.c: 2549: if(pBDTEntryEP0OutCurrent->STAT.PID == 0xD)
  8993  07AD  0021               	movlb	1	; select bank1
  8994  07AE  0866               	movf	_pBDTEntryEP0OutCurrent^(0+128),w
  8995  07AF  0086               	movwf	6
  8996  07B0  0187               	clrf	7
  8997  07B1  0C01               	rrf	1,w
  8998  07B2  0C89               	rrf	9,f
  8999  07B3  390F               	andlw	15
  9000  07B4  3A0D               	xorlw	13
  9001  07B5  1D03               	skipz
  9002  07B6  2FF0               	goto	l6347
  9003                           
  9004                           ;usb_device.c: 2550: {
  9005                           ;usb_device.c: 2551: unsigned char setup_cnt;
  9006                           ;usb_device.c: 2557: for(setup_cnt = 0; setup_cnt < 8u; setup_cnt++)
  9007  07B7  01BC               	clrf	USBCtrlEPService@setup_cnt^(0+128)
  9008  07B8  3008               	movlw	8
  9009  07B9  023C               	subwf	USBCtrlEPService@setup_cnt^(0+128),w
  9010  07BA  1803               	btfsc	3,0
  9011  07BB  2FE1               	goto	l6343
  9012  07BC                     l6337:	
  9013                           
  9014                           ;usb_device.c: 2558: {
  9015                           ;usb_device.c: 2559: *(BYTE*)((BYTE*)&SetupPkt + setup_cnt) = *(BYTE*)((void *)(pBDTEntr
      +                          yEP0OutCurrent->ADR));
  9016  07BC  0866               	movf	_pBDTEntryEP0OutCurrent^(0+128),w
  9017  07BD  3E02               	addlw	2
  9018  07BE  0086               	movwf	6
  9019  07BF  0187               	clrf	7
  9020  07C0  3F40               	moviw [0]fsr1
  9021  07C1  00B9               	movwf	??_USBCtrlEPService^(0+128)
  9022  07C2  3F41               	moviw [1]fsr1
  9023  07C3  00BA               	movwf	(??_USBCtrlEPService^(0+128)+1)
  9024  07C4  0839               	movf	??_USBCtrlEPService^(0+128),w
  9025  07C5  0086               	movwf	6
  9026  07C6  083A               	movf	(??_USBCtrlEPService+1)^(0+128),w
  9027  07C7  0087               	movwf	7
  9028  07C8  0801               	movf	1,w
  9029  07C9  00BB               	movwf	(??_USBCtrlEPService+2)^(0+128)
  9030  07CA  083C               	movf	USBCtrlEPService@setup_cnt^(0+128),w
  9031  07CB  3E40               	addlw	64
  9032  07CC  0086               	movwf	6
  9033  07CD  0187               	clrf	7
  9034  07CE  083B               	movf	(??_USBCtrlEPService+2)^(0+128),w
  9035  07CF  0081               	movwf	1
  9036                           
  9037                           ;usb_device.c: 2560: pBDTEntryEP0OutCurrent->ADR++;
  9038  07D0  0866               	movf	_pBDTEntryEP0OutCurrent^(0+128),w
  9039  07D1  3E02               	addlw	2
  9040  07D2  0086               	movwf	6
  9041  07D3  0187               	clrf	7
  9042  07D4  3001               	movlw	1
  9043  07D5  0781               	addwf	1,f
  9044  07D6  3141               	addfsr 1,1
  9045  07D7  1803               	skipnc
  9046  07D8  0A81               	incf	1,f
  9047  07D9  3001               	movlw	1
  9048  07DA  00B9               	movwf	??_USBCtrlEPService^(0+128)
  9049  07DB  0839               	movf	??_USBCtrlEPService^(0+128),w
  9050  07DC  07BC               	addwf	USBCtrlEPService@setup_cnt^(0+128),f
  9051  07DD  3008               	movlw	8
  9052  07DE  023C               	subwf	USBCtrlEPService@setup_cnt^(0+128),w
  9053  07DF  1C03               	skipc
  9054  07E0  2FBC               	goto	l6337
  9055  07E1                     l6343:	
  9056                           
  9057                           ;usb_device.c: 2561: }
  9058                           ;usb_device.c: 2562: pBDTEntryEP0OutCurrent->ADR = (((WORD)(&SetupPkt))& 0x7FFF);
  9059  07E1  3040               	movlw	64
  9060  07E2  00B9               	movwf	??_USBCtrlEPService^(0+128)
  9061  07E3  3000               	movlw	0
  9062  07E4  00BA               	movwf	(??_USBCtrlEPService^(0+128)+1)
  9063  07E5  0866               	movf	_pBDTEntryEP0OutCurrent^(0+128),w
  9064  07E6  3E02               	addlw	2
  9065  07E7  0086               	movwf	6
  9066  07E8  0187               	clrf	7
  9067  07E9  0839               	movf	??_USBCtrlEPService^(0+128),w
  9068  07EA  3FC0               	movwi [0]fsr1
  9069  07EB  083A               	movf	(??_USBCtrlEPService+1)^(0+128),w
  9070  07EC  3FC1               	movwi [1]fsr1
  9071                           
  9072                           ;usb_device.c: 2565: USBCtrlTrfSetupHandler();
  9073  07ED  319E  2633         	fcall	_USBCtrlTrfSetupHandler
  9074                           
  9075                           ;usb_device.c: 2566: }
  9076  07EF  0008               	return
  9077  07F0                     l6347:	
  9078                           
  9079                           ;usb_device.c: 2567: else
  9080                           ;usb_device.c: 2568: {
  9081                           ;usb_device.c: 2570: USBCtrlTrfOutHandler();
  9082  07F0  319D  258A         	fcall	_USBCtrlTrfOutHandler
  9083                           
  9084                           ;usb_device.c: 2571: }
  9085                           ;usb_device.c: 2572: }
  9086  07F2  0008               	return
  9087  07F3                     l6349:	
  9088                           
  9089                           ;usb_device.c: 2573: else if((USTATcopy.Val & ~0x02) == 0x04)
  9090  07F3  30FD               	movlw	253
  9091  07F4  0021               	movlb	1	; select bank1
  9092  07F5  056E               	andwf	_USTATcopy^(0+128),w
  9093  07F6  00B9               	movwf	??_USBCtrlEPService^(0+128)
  9094  07F7  0839               	movf	??_USBCtrlEPService^(0+128),w
  9095  07F8  3A04               	xorlw	4
  9096  07F9  1D03               	skipz
  9097  07FA  0008               	return
  9098                           
  9099                           ;usb_device.c: 2574: {
  9100                           ;usb_device.c: 2577: USBCtrlTrfInHandler();
  9101  07FB  3190  209B         	fcall	_USBCtrlTrfInHandler
  9102  07FD  0008               	return
  9103  07FE                     __end_of_USBCtrlEPService:	
  9104                           
  9105                           	psect	text30
  9106  109B                     __ptext30:	
  9107 ;; *************** function _USBCtrlTrfInHandler *****************
  9108 ;; Defined at:
  9109 ;;		line 2748 in file "../USB/usb_device.c"
  9110 ;; Parameters:    Size  Location     Type
  9111 ;;		None
  9112 ;; Auto vars:     Size  Location     Type
  9113 ;;  lastDTS         1   17[BANK0 ] unsigned char 
  9114 ;; Return value:  Size  Location     Type
  9115 ;;		None               void
  9116 ;; Registers used:
  9117 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9118 ;; Tracked objects:
  9119 ;;		On entry : 0/0
  9120 ;;		On exit  : 0/0
  9121 ;;		Unchanged: 0/0
  9122 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9123 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9124 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9125 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  9126 ;;      Totals:         0       1       2       0       0       0       0       0       0       0       0       0       
      +0       0
  9127 ;;Total ram usage:        3 bytes
  9128 ;; Hardware stack levels used:    1
  9129 ;; Hardware stack levels required when called:    5
  9130 ;; This function calls:
  9131 ;;		_USBCtrlTrfTxService
  9132 ;; This function is called by:
  9133 ;;		_USBCtrlEPService
  9134 ;; This function uses a non-reentrant model
  9135 ;;
  9136                           
  9137                           
  9138                           ;psect for function _USBCtrlTrfInHandler
  9139  109B                     _USBCtrlTrfInHandler:	
  9140                           
  9141                           ;usb_device.c: 2749: BYTE lastDTS;
  9142                           ;usb_device.c: 2751: lastDTS = pBDTEntryIn[0]->STAT.DTS;
  9143                           
  9144                           ;incstack = 0
  9145                           ; Regs used in _USBCtrlTrfInHandler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9146  109B  0021               	movlb	1	; select bank1
  9147  109C  0860               	movf	_pBDTEntryIn^(0+128),w
  9148  109D  0086               	movwf	6
  9149  109E  0187               	clrf	7
  9150  109F  3000               	movlw	0
  9151  10A0  1B01               	btfsc	1,6
  9152  10A1  3001               	movlw	1
  9153  10A2  0020               	movlb	0	; select bank0
  9154  10A3  00E1               	movwf	USBCtrlTrfInHandler@lastDTS
  9155                           
  9156                           ;usb_device.c: 2754: ((BYTE_VAL*)&pBDTEntryIn[0])->Val ^= 0x0004;
  9157  10A4  3004               	movlw	4
  9158  10A5  0021               	movlb	1	; select bank1
  9159  10A6  00A0               	movwf	??_USBCtrlTrfInHandler^(0+128)
  9160  10A7  0820               	movf	??_USBCtrlTrfInHandler^(0+128),w
  9161  10A8  06E0               	xorwf	_pBDTEntryIn^(0+128),f
  9162                           
  9163                           ;usb_device.c: 2759: if(USBDeviceState == ADR_PENDING_STATE)
  9164  10A9  0863               	movf	_USBDeviceState^(0+128),w
  9165  10AA  3A08               	xorlw	8
  9166  10AB  1D03               	skipz
  9167  10AC  28BB               	goto	l315
  9168                           
  9169                           ;usb_device.c: 2760: {
  9170                           ;usb_device.c: 2761: UADDR = SetupPkt.bDevADR.Val;
  9171  10AD  0020               	movlb	0	; select bank0
  9172  10AE  0842               	movf	66,w	;volatile
  9173  10AF  003D               	movlb	29	; select bank29
  9174  10B0  0096               	movwf	22	;volatile
  9175                           
  9176                           ;usb_device.c: 2762: if(UADDR != 0u)
  9177  10B1  0816               	movf	22,w	;volatile
  9178  10B2  1903               	btfsc	3,2
  9179  10B3  28B6               	goto	l4817
  9180                           
  9181                           ;usb_device.c: 2763: {
  9182                           ;usb_device.c: 2764: USBDeviceState=ADDRESS_STATE;
  9183  10B4  3010               	movlw	16
  9184  10B5  28B7               	goto	L10
  9185  10B6                     l4817:	
  9186                           ;usb_device.c: 2765: }
  9187                           
  9188                           
  9189                           ;usb_device.c: 2766: else
  9190                           ;usb_device.c: 2767: {
  9191                           ;usb_device.c: 2768: USBDeviceState=DEFAULT_STATE;
  9192  10B6  3004               	movlw	4
  9193  10B7                     L10:	
  9194  10B7  0021               	movlb	1	; select bank1
  9195  10B8  00A0               	movwf	??_USBCtrlTrfInHandler^(0+128)
  9196  10B9  0820               	movf	??_USBCtrlTrfInHandler^(0+128),w
  9197  10BA  00E3               	movwf	_USBDeviceState^(0+128)
  9198  10BB                     l315:	
  9199                           
  9200                           ;usb_device.c: 2769: }
  9201                           ;usb_device.c: 2770: }
  9202                           ;usb_device.c: 2773: if(controlTransferState == 1)
  9203  10BB  0020               	movlb	0	; select bank0
  9204  10BC  0869               	movf	_controlTransferState,w
  9205  10BD  3A01               	xorlw	1
  9206  10BE  1D03               	skipz
  9207  10BF  28F4               	goto	l318
  9208                           
  9209                           ;usb_device.c: 2774: {
  9210                           ;usb_device.c: 2775: pBDTEntryIn[0]->ADR = (((WORD)(CtrlTrfData))& 0x7FFF);
  9211  10C0  3048               	movlw	72
  9212  10C1  0021               	movlb	1	; select bank1
  9213  10C2  00A0               	movwf	??_USBCtrlTrfInHandler^(0+128)
  9214  10C3  3000               	movlw	0
  9215  10C4  00A1               	movwf	(??_USBCtrlTrfInHandler^(0+128)+1)
  9216  10C5  0860               	movf	_pBDTEntryIn^(0+128),w
  9217  10C6  3E02               	addlw	2
  9218  10C7  0086               	movwf	6
  9219  10C8  0187               	clrf	7
  9220  10C9  0820               	movf	??_USBCtrlTrfInHandler^(0+128),w
  9221  10CA  3FC0               	movwi [0]fsr1
  9222  10CB  0821               	movf	(??_USBCtrlTrfInHandler+1)^(0+128),w
  9223  10CC  3FC1               	movwi [1]fsr1
  9224                           
  9225                           ;usb_device.c: 2776: USBCtrlTrfTxService();
  9226  10CD  3194  24AE  3190   	fcall	_USBCtrlTrfTxService
  9227                           
  9228                           ;usb_device.c: 2782: if(shortPacketStatus == 2)
  9229  10D0  0020               	movlb	0	; select bank0
  9230  10D1  086D               	movf	_shortPacketStatus,w
  9231  10D2  3A02               	xorlw	2
  9232  10D3  1D03               	skipz
  9233  10D4  28DE               	goto	l4827
  9234                           
  9235                           ;usb_device.c: 2783: {
  9236                           ;usb_device.c: 2786: pBDTEntryIn[0]->STAT.Val = 0x80|0x04;
  9237  10D5  3084               	movlw	132
  9238  10D6  0021               	movlb	1	; select bank1
  9239  10D7  00A0               	movwf	??_USBCtrlTrfInHandler^(0+128)
  9240  10D8  0860               	movf	_pBDTEntryIn^(0+128),w
  9241  10D9  0086               	movwf	6
  9242  10DA  0187               	clrf	7
  9243  10DB  0820               	movf	??_USBCtrlTrfInHandler^(0+128),w
  9244  10DC  0081               	movwf	1
  9245                           
  9246                           ;usb_device.c: 2787: }
  9247  10DD  0008               	return
  9248  10DE                     l4827:	
  9249                           
  9250                           ;usb_device.c: 2788: else
  9251                           ;usb_device.c: 2789: {
  9252                           ;usb_device.c: 2790: if(lastDTS == 0)
  9253  10DE  0020               	movlb	0	; select bank0
  9254  10DF  08E1               	movf	USBCtrlTrfInHandler@lastDTS,f
  9255  10E0  1D03               	skipz
  9256  10E1  28EB               	goto	l4831
  9257                           
  9258                           ;usb_device.c: 2791: {
  9259                           ;usb_device.c: 2792: pBDTEntryIn[0]->STAT.Val = 0x80|0x40|(0x08 & 0x08);
  9260  10E2  30C8               	movlw	200
  9261  10E3  0021               	movlb	1	; select bank1
  9262  10E4  00A0               	movwf	??_USBCtrlTrfInHandler^(0+128)
  9263  10E5  0860               	movf	_pBDTEntryIn^(0+128),w
  9264  10E6  0086               	movwf	6
  9265  10E7  0187               	clrf	7
  9266  10E8  0820               	movf	??_USBCtrlTrfInHandler^(0+128),w
  9267  10E9  0081               	movwf	1
  9268                           
  9269                           ;usb_device.c: 2793: }
  9270  10EA  0008               	return
  9271  10EB                     l4831:	
  9272                           
  9273                           ;usb_device.c: 2794: else
  9274                           ;usb_device.c: 2795: {
  9275                           ;usb_device.c: 2796: pBDTEntryIn[0]->STAT.Val = 0x80|0x00|(0x08 & 0x08);
  9276  10EB  3088               	movlw	136
  9277  10EC  0021               	movlb	1	; select bank1
  9278  10ED  00A0               	movwf	??_USBCtrlTrfInHandler^(0+128)
  9279  10EE  0860               	movf	_pBDTEntryIn^(0+128),w
  9280  10EF  0086               	movwf	6
  9281  10F0  0187               	clrf	7
  9282  10F1  0820               	movf	??_USBCtrlTrfInHandler^(0+128),w
  9283  10F2  0081               	movwf	1
  9284                           
  9285                           ;usb_device.c: 2797: }
  9286                           ;usb_device.c: 2798: }
  9287                           ;usb_device.c: 2799: }
  9288  10F3  0008               	return
  9289  10F4                     l318:	
  9290                           
  9291                           ;usb_device.c: 2800: else
  9292                           ;usb_device.c: 2801: {
  9293                           ;usb_device.c: 2805: if(outPipes[0].info.bits.busy == 1)
  9294  10F4  0023               	movlb	3	; select bank3
  9295  10F5  1FC9               	btfss	(_outPipes^(0+384)+2),7
  9296  10F6  28FE               	goto	l4839
  9297                           
  9298                           ;usb_device.c: 2806: {
  9299                           ;usb_device.c: 2807: if(outPipes[0].pFunc != (0))
  9300  10F7  084C               	movf	(_outPipes+5)^(0+384),w
  9301  10F8  1903               	btfsc	3,2
  9302  10F9  28FD               	goto	l4837
  9303                           
  9304                           ;usb_device.c: 2808: {
  9305                           ;usb_device.c: 2809: outPipes[0].pFunc();
  9306  10FA  084C               	movf	(_outPipes+5)^(0+384),w
  9307  10FB  3190  289B         	ljmp	$	;if you get stuck here, you called an invalid pointer
  9308  10FD                     l4837:	
  9309                           
  9310                           ;usb_device.c: 2810: }
  9311                           ;usb_device.c: 2811: outPipes[0].info.bits.busy = 0;
  9312  10FD  13C9               	bcf	(_outPipes^(0+384)+2),7
  9313  10FE                     l4839:	
  9314                           
  9315                           ;usb_device.c: 2812: }
  9316                           ;usb_device.c: 2814: controlTransferState = 0;
  9317  10FE  0020               	movlb	0	; select bank0
  9318  10FF  01E9               	clrf	_controlTransferState
  9319  1100  0008               	return
  9320  1101                     __end_of_USBCtrlTrfInHandler:	
  9321                           
  9322                           	psect	text31
  9323  1D8A                     __ptext31:	
  9324 ;; *************** function _USBCtrlTrfOutHandler *****************
  9325 ;; Defined at:
  9326 ;;		line 2695 in file "../USB/usb_device.c"
  9327 ;; Parameters:    Size  Location     Type
  9328 ;;		None
  9329 ;; Auto vars:     Size  Location     Type
  9330 ;;		None
  9331 ;; Return value:  Size  Location     Type
  9332 ;;		None               void
  9333 ;; Registers used:
  9334 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9335 ;; Tracked objects:
  9336 ;;		On entry : 0/0
  9337 ;;		On exit  : 0/0
  9338 ;;		Unchanged: 0/0
  9339 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9340 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9341 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9342 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  9343 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  9344 ;;Total ram usage:        2 bytes
  9345 ;; Hardware stack levels used:    1
  9346 ;; Hardware stack levels required when called:    6
  9347 ;; This function calls:
  9348 ;;		_USBCtrlTrfRxService
  9349 ;; This function is called by:
  9350 ;;		_USBCtrlEPService
  9351 ;; This function uses a non-reentrant model
  9352 ;;
  9353                           
  9354                           
  9355                           ;psect for function _USBCtrlTrfOutHandler
  9356  1D8A                     _USBCtrlTrfOutHandler:	
  9357                           
  9358                           ;usb_device.c: 2696: if(controlTransferState == 2)
  9359                           
  9360                           ;incstack = 0
  9361                           ; Regs used in _USBCtrlTrfOutHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9362  1D8A  0020               	movlb	0	; select bank0
  9363  1D8B  0869               	movf	_controlTransferState,w
  9364  1D8C  3A02               	xorlw	2
  9365  1D8D  1D03               	skipz
  9366  1D8E  2D92               	goto	l4799
  9367                           
  9368                           ;usb_device.c: 2697: {
  9369                           ;usb_device.c: 2698: USBCtrlTrfRxService();
  9370  1D8F  318A  2234         	fcall	_USBCtrlTrfRxService
  9371                           
  9372                           ;usb_device.c: 2699: }
  9373  1D91  0008               	return
  9374  1D92                     l4799:	
  9375                           
  9376                           ;usb_device.c: 2700: else
  9377                           ;usb_device.c: 2701: {
  9378                           ;usb_device.c: 2704: controlTransferState = 0;
  9379  1D92  0020               	movlb	0	; select bank0
  9380  1D93  01E9               	clrf	_controlTransferState
  9381                           
  9382                           ;usb_device.c: 2711: if(BothEP0OutUOWNsSet == FALSE)
  9383  1D94  0022               	movlb	2	; select bank2
  9384  1D95  08DD               	movf	_BothEP0OutUOWNsSet^(0+256),f
  9385  1D96  1D03               	skipz
  9386  1D97  2DBA               	goto	l4805
  9387                           
  9388                           ;usb_device.c: 2712: {
  9389                           ;usb_device.c: 2713: pBDTEntryEP0OutNext->CNT = 8;
  9390  1D98  3008               	movlw	8
  9391  1D99  0021               	movlb	1	; select bank1
  9392  1D9A  00A2               	movwf	??_USBCtrlTrfOutHandler^(0+128)
  9393  1D9B  0020               	movlb	0	; select bank0
  9394  1D9C  0A6A               	incf	_pBDTEntryEP0OutNext,w
  9395  1D9D  0086               	movwf	6
  9396  1D9E  0187               	clrf	7
  9397  1D9F  0021               	movlb	1	; select bank1
  9398  1DA0  0822               	movf	??_USBCtrlTrfOutHandler^(0+128),w
  9399  1DA1  0081               	movwf	1
  9400                           
  9401                           ;usb_device.c: 2714: pBDTEntryEP0OutNext->ADR = (((WORD)(&SetupPkt))& 0x7FFF);
  9402  1DA2  3040               	movlw	64
  9403  1DA3  00A2               	movwf	??_USBCtrlTrfOutHandler^(0+128)
  9404  1DA4  3000               	movlw	0
  9405  1DA5  00A3               	movwf	(??_USBCtrlTrfOutHandler^(0+128)+1)
  9406  1DA6  0020               	movlb	0	; select bank0
  9407  1DA7  086A               	movf	_pBDTEntryEP0OutNext,w
  9408  1DA8  3E02               	addlw	2
  9409  1DA9  0086               	movwf	6
  9410  1DAA  0187               	clrf	7
  9411  1DAB  0021               	movlb	1	; select bank1
  9412  1DAC  0822               	movf	??_USBCtrlTrfOutHandler^(0+128),w
  9413  1DAD  3FC0               	movwi [0]fsr1
  9414  1DAE  0823               	movf	(??_USBCtrlTrfOutHandler+1)^(0+128),w
  9415  1DAF  3FC1               	movwi [1]fsr1
  9416                           
  9417                           ;usb_device.c: 2715: pBDTEntryEP0OutNext->STAT.Val = 0x80|0x00|(0x08 & 0x08)|0x04;
  9418  1DB0  308C               	movlw	140
  9419  1DB1  00A2               	movwf	??_USBCtrlTrfOutHandler^(0+128)
  9420  1DB2  0020               	movlb	0	; select bank0
  9421  1DB3  086A               	movf	_pBDTEntryEP0OutNext,w
  9422  1DB4  0086               	movwf	6
  9423  1DB5  0187               	clrf	7
  9424  1DB6  0021               	movlb	1	; select bank1
  9425  1DB7  0822               	movf	??_USBCtrlTrfOutHandler^(0+128),w
  9426  1DB8  0081               	movwf	1
  9427                           
  9428                           ;usb_device.c: 2716: }
  9429  1DB9  0008               	return
  9430  1DBA                     l4805:	
  9431                           
  9432                           ;usb_device.c: 2717: else
  9433                           ;usb_device.c: 2718: {
  9434                           ;usb_device.c: 2719: BothEP0OutUOWNsSet = FALSE;
  9435  1DBA  0022               	movlb	2	; select bank2
  9436  1DBB  01DD               	clrf	_BothEP0OutUOWNsSet^(0+256)
  9437  1DBC  0008               	return
  9438  1DBD                     __end_of_USBCtrlTrfOutHandler:	
  9439                           
  9440                           	psect	text32
  9441  0A34                     __ptext32:	
  9442 ;; *************** function _USBCtrlTrfRxService *****************
  9443 ;; Defined at:
  9444 ;;		line 2019 in file "../USB/usb_device.c"
  9445 ;; Parameters:    Size  Location     Type
  9446 ;;		None
  9447 ;; Auto vars:     Size  Location     Type
  9448 ;;  byteToRead      1    1[BANK1 ] unsigned char 
  9449 ;;  i               1    0[BANK1 ] unsigned char 
  9450 ;; Return value:  Size  Location     Type
  9451 ;;		None               void
  9452 ;; Registers used:
  9453 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9454 ;; Tracked objects:
  9455 ;;		On entry : 0/0
  9456 ;;		On exit  : 0/0
  9457 ;;		Unchanged: 0/0
  9458 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9459 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9460 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  9461 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9462 ;;      Totals:         0       2       2       0       0       0       0       0       0       0       0       0       
      +0       0
  9463 ;;Total ram usage:        4 bytes
  9464 ;; Hardware stack levels used:    1
  9465 ;; Hardware stack levels required when called:    5
  9466 ;; This function calls:
  9467 ;;		_USBCtrlEPAllowStatusStage
  9468 ;; This function is called by:
  9469 ;;		_USBCtrlTrfOutHandler
  9470 ;; This function uses a non-reentrant model
  9471 ;;
  9472                           
  9473                           
  9474                           ;psect for function _USBCtrlTrfRxService
  9475  0A34                     _USBCtrlTrfRxService:	
  9476                           
  9477                           ;usb_device.c: 2020: BYTE byteToRead;
  9478                           ;usb_device.c: 2021: BYTE i;
  9479                           ;usb_device.c: 2025: byteToRead = pBDTEntryEP0OutCurrent->CNT;
  9480                           
  9481                           ;incstack = 0
  9482                           ; Regs used in _USBCtrlTrfRxService: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9483  0A34  0021               	movlb	1	; select bank1
  9484  0A35  0866               	movf	_pBDTEntryEP0OutCurrent^(0+128),w
  9485  0A36  0086               	movwf	6
  9486  0A37  0187               	clrf	7
  9487  0A38  3F41               	moviw [1]fsr1
  9488  0A39  00A1               	movwf	USBCtrlTrfRxService@byteToRead^(0+128)
  9489                           
  9490                           ;usb_device.c: 2031: if(byteToRead > outPipes[0].wCount.Val)
  9491  0A3A  0821               	movf	USBCtrlTrfRxService@byteToRead^(0+128),w
  9492  0A3B  0020               	movlb	0	; select bank0
  9493  0A3C  00E0               	movwf	??_USBCtrlTrfRxService
  9494  0A3D  01E1               	clrf	??_USBCtrlTrfRxService+1
  9495  0A3E  0861               	movf	??_USBCtrlTrfRxService+1,w
  9496  0A3F  0023               	movlb	3	; select bank3
  9497  0A40  024B               	subwf	((_outPipes+1)^(0+384)+3),w
  9498  0A41  1D03               	skipz
  9499  0A42  2A47               	goto	u4095
  9500  0A43  0020               	movlb	0	; select bank0
  9501  0A44  0860               	movf	??_USBCtrlTrfRxService,w
  9502  0A45  0023               	movlb	3	; select bank3
  9503  0A46  024A               	subwf	(_outPipes^(0+384)+3),w
  9504  0A47                     u4095:	
  9505  0A47  1803               	skipnc
  9506  0A48  2A4F               	goto	l4623
  9507                           
  9508                           ;usb_device.c: 2032: {
  9509                           ;usb_device.c: 2033: byteToRead = outPipes[0].wCount.Val;
  9510  0A49  084A               	movf	(_outPipes^(0+384)+3),w
  9511  0A4A  0020               	movlb	0	; select bank0
  9512  0A4B  00E0               	movwf	??_USBCtrlTrfRxService
  9513  0A4C  0860               	movf	??_USBCtrlTrfRxService,w
  9514  0A4D  0021               	movlb	1	; select bank1
  9515  0A4E  00A1               	movwf	USBCtrlTrfRxService@byteToRead^(0+128)
  9516  0A4F                     l4623:	
  9517                           
  9518                           ;usb_device.c: 2034: }
  9519                           ;usb_device.c: 2036: outPipes[0].wCount.Val = outPipes[0].wCount.Val - byteToRead;
  9520  0A4F  3003               	movlw	3
  9521  0A50  3EC7               	addlw	_outPipes& (0+255)
  9522  0A51  0086               	movwf	6
  9523  0A52  3001               	movlw	1	; select bank3/4
  9524  0A53  0087               	movwf	7
  9525  0A54  0021               	movlb	1	; select bank1
  9526  0A55  0821               	movf	USBCtrlTrfRxService@byteToRead^(0+128),w
  9527  0A56  0020               	movlb	0	; select bank0
  9528  0A57  00E0               	movwf	??_USBCtrlTrfRxService
  9529  0A58  01E1               	clrf	??_USBCtrlTrfRxService+1
  9530  0A59  09E0               	comf	??_USBCtrlTrfRxService,f
  9531  0A5A  09E1               	comf	??_USBCtrlTrfRxService+1,f
  9532  0A5B  0AE0               	incf	??_USBCtrlTrfRxService,f
  9533  0A5C  1903               	skipnz
  9534  0A5D  0AE1               	incf	??_USBCtrlTrfRxService+1,f
  9535  0A5E  3F40               	moviw [0]fsr1
  9536  0A5F  0760               	addwf	??_USBCtrlTrfRxService,w
  9537  0A60  0023               	movlb	3	; select bank3
  9538  0A61  00CA               	movwf	(_outPipes^(0+384)+3)
  9539  0A62  3F41               	moviw [1]fsr1
  9540  0A63  0020               	movlb	0	; select bank0
  9541  0A64  3D61               	addwfc	??_USBCtrlTrfRxService+1,w
  9542  0A65  0023               	movlb	3	; select bank3
  9543  0A66  00CB               	movwf	(_outPipes^(0+384)+4)
  9544                           
  9545                           ;usb_device.c: 2040: for(i=0;i<byteToRead;i++)
  9546  0A67  0021               	movlb	1	; select bank1
  9547  0A68  01A0               	clrf	USBCtrlTrfRxService@i^(0+128)
  9548  0A69                     l4633:	
  9549  0A69  0821               	movf	USBCtrlTrfRxService@byteToRead^(0+128),w
  9550  0A6A  0220               	subwf	USBCtrlTrfRxService@i^(0+128),w
  9551  0A6B  1803               	btfsc	3,0
  9552  0A6C  2A87               	goto	l4635
  9553                           
  9554                           ;usb_device.c: 2041: {
  9555                           ;usb_device.c: 2042: *outPipes[0].pDst.bRam++ = CtrlTrfData[i];
  9556  0A6D  0820               	movf	USBCtrlTrfRxService@i^(0+128),w
  9557  0A6E  3E48               	addlw	72
  9558  0A6F  0086               	movwf	6
  9559  0A70  0187               	clrf	7
  9560  0A71  0801               	movf	1,w
  9561  0A72  0020               	movlb	0	; select bank0
  9562  0A73  00E0               	movwf	??_USBCtrlTrfRxService
  9563  0A74  0023               	movlb	3	; select bank3
  9564  0A75  0847               	movf	_outPipes^(0+384),w
  9565  0A76  0086               	movwf	6
  9566  0A77  0187               	clrf	7
  9567  0A78  0020               	movlb	0	; select bank0
  9568  0A79  0860               	movf	??_USBCtrlTrfRxService,w
  9569  0A7A  0081               	movwf	1
  9570  0A7B  3001               	movlw	1
  9571  0A7C  00E0               	movwf	??_USBCtrlTrfRxService
  9572  0A7D  0860               	movf	??_USBCtrlTrfRxService,w
  9573  0A7E  0023               	movlb	3	; select bank3
  9574  0A7F  07C7               	addwf	_outPipes^(0+384),f
  9575  0A80  3001               	movlw	1
  9576  0A81  0020               	movlb	0	; select bank0
  9577  0A82  00E0               	movwf	??_USBCtrlTrfRxService
  9578  0A83  0860               	movf	??_USBCtrlTrfRxService,w
  9579  0A84  0021               	movlb	1	; select bank1
  9580  0A85  07A0               	addwf	USBCtrlTrfRxService@i^(0+128),f
  9581  0A86  2A69               	goto	l4633
  9582  0A87                     l4635:	
  9583                           
  9584                           ;usb_device.c: 2043: }
  9585                           ;usb_device.c: 2047: if(outPipes[0].wCount.Val > 0)
  9586  0A87  3003               	movlw	3
  9587  0A88  3EC7               	addlw	_outPipes& (0+255)
  9588  0A89  0086               	movwf	6
  9589  0A8A  3001               	movlw	1	; select bank3/4
  9590  0A8B  0087               	movwf	7
  9591  0A8C  0016               	moviw fsr1++
  9592  0A8D  0401               	iorwf	1,w
  9593  0A8E  1903               	skipnz
  9594  0A8F  2ABC               	goto	l4643
  9595                           
  9596                           ;usb_device.c: 2048: {
  9597                           ;usb_device.c: 2049: pBDTEntryEP0OutNext->CNT = 8;
  9598  0A90  3008               	movlw	8
  9599  0A91  0020               	movlb	0	; select bank0
  9600  0A92  00E0               	movwf	??_USBCtrlTrfRxService
  9601  0A93  0A6A               	incf	_pBDTEntryEP0OutNext,w
  9602  0A94  0086               	movwf	6
  9603  0A95  0187               	clrf	7
  9604  0A96  0860               	movf	??_USBCtrlTrfRxService,w
  9605  0A97  0081               	movwf	1
  9606                           
  9607                           ;usb_device.c: 2050: pBDTEntryEP0OutNext->ADR = (((WORD)(&CtrlTrfData))& 0x7FFF);
  9608  0A98  3048               	movlw	72
  9609  0A99  00E0               	movwf	??_USBCtrlTrfRxService
  9610  0A9A  3000               	movlw	0
  9611  0A9B  00E1               	movwf	??_USBCtrlTrfRxService+1
  9612  0A9C  086A               	movf	_pBDTEntryEP0OutNext,w
  9613  0A9D  3E02               	addlw	2
  9614  0A9E  0086               	movwf	6
  9615  0A9F  0187               	clrf	7
  9616  0AA0  0860               	movf	??_USBCtrlTrfRxService,w
  9617  0AA1  3FC0               	movwi [0]fsr1
  9618  0AA2  0861               	movf	??_USBCtrlTrfRxService+1,w
  9619  0AA3  3FC1               	movwi [1]fsr1
  9620                           
  9621                           ;usb_device.c: 2051: if(pBDTEntryEP0OutCurrent->STAT.DTS == 0)
  9622  0AA4  0021               	movlb	1	; select bank1
  9623  0AA5  0866               	movf	_pBDTEntryEP0OutCurrent^(0+128),w
  9624  0AA6  0086               	movwf	6
  9625  0AA7  0187               	clrf	7
  9626  0AA8  1B01               	btfsc	1,6
  9627  0AA9  2AB3               	goto	l4641
  9628                           
  9629                           ;usb_device.c: 2052: {
  9630                           ;usb_device.c: 2053: pBDTEntryEP0OutNext->STAT.Val = 0x80|0x40|(0x08 & 0x08);
  9631  0AAA  30C8               	movlw	200
  9632  0AAB  0020               	movlb	0	; select bank0
  9633  0AAC  00E0               	movwf	??_USBCtrlTrfRxService
  9634  0AAD  086A               	movf	_pBDTEntryEP0OutNext,w
  9635  0AAE  0086               	movwf	6
  9636  0AAF  0187               	clrf	7
  9637  0AB0  0860               	movf	??_USBCtrlTrfRxService,w
  9638  0AB1  0081               	movwf	1
  9639                           
  9640                           ;usb_device.c: 2054: }
  9641  0AB2  0008               	return
  9642  0AB3                     l4641:	
  9643                           
  9644                           ;usb_device.c: 2055: else
  9645                           ;usb_device.c: 2056: {
  9646                           ;usb_device.c: 2057: pBDTEntryEP0OutNext->STAT.Val = 0x80|0x00|(0x08 & 0x08);
  9647  0AB3  3088               	movlw	136
  9648  0AB4  0020               	movlb	0	; select bank0
  9649  0AB5  00E0               	movwf	??_USBCtrlTrfRxService
  9650  0AB6  086A               	movf	_pBDTEntryEP0OutNext,w
  9651  0AB7  0086               	movwf	6
  9652  0AB8  0187               	clrf	7
  9653  0AB9  0860               	movf	??_USBCtrlTrfRxService,w
  9654  0ABA  0081               	movwf	1
  9655                           
  9656                           ;usb_device.c: 2058: }
  9657                           ;usb_device.c: 2059: }
  9658  0ABB  0008               	return
  9659  0ABC                     l4643:	
  9660                           
  9661                           ;usb_device.c: 2060: else
  9662                           ;usb_device.c: 2061: {
  9663                           ;usb_device.c: 2065: pBDTEntryEP0OutNext->CNT = 8;
  9664  0ABC  3008               	movlw	8
  9665  0ABD  0020               	movlb	0	; select bank0
  9666  0ABE  00E0               	movwf	??_USBCtrlTrfRxService
  9667  0ABF  0A6A               	incf	_pBDTEntryEP0OutNext,w
  9668  0AC0  0086               	movwf	6
  9669  0AC1  0187               	clrf	7
  9670  0AC2  0860               	movf	??_USBCtrlTrfRxService,w
  9671  0AC3  0081               	movwf	1
  9672                           
  9673                           ;usb_device.c: 2066: pBDTEntryEP0OutNext->ADR = (((WORD)(&SetupPkt))& 0x7FFF);
  9674  0AC4  3040               	movlw	64
  9675  0AC5  00E0               	movwf	??_USBCtrlTrfRxService
  9676  0AC6  3000               	movlw	0
  9677  0AC7  00E1               	movwf	??_USBCtrlTrfRxService+1
  9678  0AC8  086A               	movf	_pBDTEntryEP0OutNext,w
  9679  0AC9  3E02               	addlw	2
  9680  0ACA  0086               	movwf	6
  9681  0ACB  0187               	clrf	7
  9682  0ACC  0860               	movf	??_USBCtrlTrfRxService,w
  9683  0ACD  3FC0               	movwi [0]fsr1
  9684  0ACE  0861               	movf	??_USBCtrlTrfRxService+1,w
  9685  0ACF  3FC1               	movwi [1]fsr1
  9686                           
  9687                           ;usb_device.c: 2070: pBDTEntryEP0OutNext->STAT.Val = 0x80|0x04;
  9688  0AD0  3084               	movlw	132
  9689  0AD1  00E0               	movwf	??_USBCtrlTrfRxService
  9690  0AD2  086A               	movf	_pBDTEntryEP0OutNext,w
  9691  0AD3  0086               	movwf	6
  9692  0AD4  0187               	clrf	7
  9693  0AD5  0860               	movf	??_USBCtrlTrfRxService,w
  9694  0AD6  0081               	movwf	1
  9695                           
  9696                           ;usb_device.c: 2077: if(outPipes[0].pFunc != (0))
  9697  0AD7  0023               	movlb	3	; select bank3
  9698  0AD8  084C               	movf	(_outPipes+5)^(0+384),w
  9699  0AD9  1903               	btfsc	3,2
  9700  0ADA  2ADE               	goto	l4649
  9701                           
  9702                           ;usb_device.c: 2078: {
  9703                           ;usb_device.c: 2084: outPipes[0].pFunc();
  9704  0ADB  084C               	movf	(_outPipes+5)^(0+384),w
  9705  0ADC  318A  2A34         	ljmp	$	;if you get stuck here, you called an invalid pointer
  9706  0ADE                     l4649:	
  9707                           
  9708                           ;usb_device.c: 2089: }
  9709                           ;usb_device.c: 2090: outPipes[0].info.bits.busy = 0;
  9710  0ADE  13C9               	bcf	(_outPipes^(0+384)+2),7
  9711                           
  9712                           ;usb_device.c: 2104: if(USBDeferStatusStagePacket == FALSE)
  9713  0ADF  0020               	movlb	0	; select bank0
  9714  0AE0  08E8               	movf	_USBDeferStatusStagePacket,f
  9715  0AE1  1D03               	skipz
  9716  0AE2  0008               	return
  9717                           
  9718                           ;usb_device.c: 2105: {
  9719                           ;usb_device.c: 2106: USBCtrlEPAllowStatusStage();
  9720  0AE3  3191  21D3         	fcall	_USBCtrlEPAllowStatusStage
  9721  0AE5  0008               	return
  9722  0AE6                     __end_of_USBCtrlTrfRxService:	
  9723                           
  9724                           	psect	text33
  9725  1E33                     __ptext33:	
  9726 ;; *************** function _USBCtrlTrfSetupHandler *****************
  9727 ;; Defined at:
  9728 ;;		line 2623 in file "../USB/usb_device.c"
  9729 ;; Parameters:    Size  Location     Type
  9730 ;;		None
  9731 ;; Auto vars:     Size  Location     Type
  9732 ;;		None
  9733 ;; Return value:  Size  Location     Type
  9734 ;;		None               void
  9735 ;; Registers used:
  9736 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  9737 ;; Tracked objects:
  9738 ;;		On entry : 0/0
  9739 ;;		On exit  : 0/0
  9740 ;;		Unchanged: 0/0
  9741 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9742 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9743 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9744 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  9745 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  9746 ;;Total ram usage:        1 bytes
  9747 ;; Hardware stack levels used:    1
  9748 ;; Hardware stack levels required when called:   10
  9749 ;; This function calls:
  9750 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
  9751 ;;		_USBCtrlEPServiceComplete
  9752 ;;		_USBCheckStdRequest
  9753 ;; This function is called by:
  9754 ;;		_USBCtrlEPService
  9755 ;; This function uses a non-reentrant model
  9756 ;;
  9757                           
  9758                           
  9759                           ;psect for function _USBCtrlTrfSetupHandler
  9760  1E33                     _USBCtrlTrfSetupHandler:	
  9761                           
  9762                           ;usb_device.c: 2627: shortPacketStatus = 0;
  9763                           
  9764                           ;incstack = 0
  9765                           ; Regs used in _USBCtrlTrfSetupHandler: [allreg]
  9766  1E33  0020               	movlb	0	; select bank0
  9767  1E34  01ED               	clrf	_shortPacketStatus
  9768                           
  9769                           ;usb_device.c: 2628: USBDeferStatusStagePacket = FALSE;
  9770  1E35  01E8               	clrf	_USBDeferStatusStagePacket	;volatile
  9771                           
  9772                           ;usb_device.c: 2629: USBDeferINDataStagePackets = FALSE;
  9773  1E36  0022               	movlb	2	; select bank2
  9774  1E37  01E6               	clrf	_USBDeferINDataStagePackets^(0+256)	;volatile
  9775                           
  9776                           ;usb_device.c: 2630: USBDeferOUTDataStagePackets = FALSE;
  9777  1E38  01E7               	clrf	_USBDeferOUTDataStagePackets^(0+256)	;volatile
  9778                           
  9779                           ;usb_device.c: 2631: BothEP0OutUOWNsSet = FALSE;
  9780  1E39  01DD               	clrf	_BothEP0OutUOWNsSet^(0+256)
  9781                           
  9782                           ;usb_device.c: 2632: controlTransferState = 0;
  9783  1E3A  0020               	movlb	0	; select bank0
  9784  1E3B  01E9               	clrf	_controlTransferState
  9785                           
  9786                           ;usb_device.c: 2641: pBDTEntryIn[0]->STAT.Val &= ~(0x80);
  9787  1E3C  307F               	movlw	127
  9788  1E3D  0021               	movlb	1	; select bank1
  9789  1E3E  00B8               	movwf	??_USBCtrlTrfSetupHandler^(0+128)
  9790  1E3F  0860               	movf	_pBDTEntryIn^(0+128),w
  9791  1E40  0086               	movwf	6
  9792  1E41  0187               	clrf	7
  9793  1E42  0838               	movf	??_USBCtrlTrfSetupHandler^(0+128),w
  9794  1E43  0581               	andwf	1,f
  9795                           
  9796                           ;usb_device.c: 2642: ((BYTE_VAL*)&pBDTEntryIn[0])->Val ^= 0x0004;
  9797  1E44  3004               	movlw	4
  9798  1E45  00B8               	movwf	??_USBCtrlTrfSetupHandler^(0+128)
  9799  1E46  0838               	movf	??_USBCtrlTrfSetupHandler^(0+128),w
  9800  1E47  06E0               	xorwf	_pBDTEntryIn^(0+128),f
  9801                           
  9802                           ;usb_device.c: 2643: pBDTEntryIn[0]->STAT.Val &= ~(0x80);
  9803  1E48  307F               	movlw	127
  9804  1E49  00B8               	movwf	??_USBCtrlTrfSetupHandler^(0+128)
  9805  1E4A  0860               	movf	_pBDTEntryIn^(0+128),w
  9806  1E4B  0086               	movwf	6
  9807  1E4C  0187               	clrf	7
  9808  1E4D  0838               	movf	??_USBCtrlTrfSetupHandler^(0+128),w
  9809  1E4E  0581               	andwf	1,f
  9810                           
  9811                           ;usb_device.c: 2644: ((BYTE_VAL*)&pBDTEntryIn[0])->Val ^= 0x0004;
  9812  1E4F  3004               	movlw	4
  9813  1E50  00B8               	movwf	??_USBCtrlTrfSetupHandler^(0+128)
  9814  1E51  0838               	movf	??_USBCtrlTrfSetupHandler^(0+128),w
  9815  1E52  06E0               	xorwf	_pBDTEntryIn^(0+128),f
  9816                           
  9817                           ;usb_device.c: 2645: pBDTEntryEP0OutNext->STAT.Val &= ~(0x80);
  9818  1E53  307F               	movlw	127
  9819  1E54  00B8               	movwf	??_USBCtrlTrfSetupHandler^(0+128)
  9820  1E55  0020               	movlb	0	; select bank0
  9821  1E56  086A               	movf	_pBDTEntryEP0OutNext,w
  9822  1E57  0086               	movwf	6
  9823  1E58  0187               	clrf	7
  9824  1E59  0021               	movlb	1	; select bank1
  9825  1E5A  0838               	movf	??_USBCtrlTrfSetupHandler^(0+128),w
  9826  1E5B  0581               	andwf	1,f
  9827                           
  9828                           ;usb_device.c: 2647: inPipes[0].info.Val = 0;
  9829  1E5C  01E9               	clrf	(_inPipes^(0+128)+2)
  9830                           
  9831                           ;usb_device.c: 2648: inPipes[0].wCount.Val = 0;
  9832  1E5D  01EA               	clrf	(_inPipes^(0+128)+3)
  9833  1E5E  01EB               	clrf	((_inPipes+1)^(0+128)+3)
  9834                           
  9835                           ;usb_device.c: 2649: outPipes[0].info.Val = 0;
  9836  1E5F  0023               	movlb	3	; select bank3
  9837  1E60  01C9               	clrf	(_outPipes^(0+384)+2)
  9838                           
  9839                           ;usb_device.c: 2650: outPipes[0].wCount.Val = 0;
  9840  1E61  01CA               	clrf	(_outPipes^(0+384)+3)
  9841  1E62  01CB               	clrf	((_outPipes+1)^(0+384)+3)
  9842                           
  9843                           ;usb_device.c: 2656: USBCheckStdRequest();
  9844  1E63  3190  2042  319E   	fcall	_USBCheckStdRequest
  9845                           
  9846                           ;usb_device.c: 2657: USER_USB_CALLBACK_EVENT_HANDLER(EVENT_EP0_REQUEST,0,0);
  9847  1E66  3003               	movlw	3
  9848  1E67  0021               	movlb	1	; select bank1
  9849  1E68  00AC               	movwf	?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)
  9850  1E69  3000               	movlw	0
  9851  1E6A  00AD               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)+1)
  9852  1E6B  01AE               	clrf	(?_USER_USB_CALLBACK_EVENT_HANDLER+2)^(0+128)
  9853  1E6C  3000               	movlw	0
  9854  1E6D  00AF               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)+3)
  9855  1E6E  3000               	movlw	0
  9856  1E6F  00B0               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)+4)
  9857  1E70  319D  25F4  319E   	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
  9858                           
  9859                           ;usb_device.c: 2670: USBCtrlEPServiceComplete();
  9860  1E73  3195  25B9         	fcall	_USBCtrlEPServiceComplete
  9861  1E75  0008               	return
  9862  1E76                     __end_of_USBCtrlTrfSetupHandler:	
  9863                           
  9864                           	psect	text34
  9865  1042                     __ptext34:	
  9866 ;; *************** function _USBCheckStdRequest *****************
  9867 ;; Defined at:
  9868 ;;		line 2839 in file "../USB/usb_device.c"
  9869 ;; Parameters:    Size  Location     Type
  9870 ;;		None
  9871 ;; Auto vars:     Size  Location     Type
  9872 ;;		None
  9873 ;; Return value:  Size  Location     Type
  9874 ;;		None               void
  9875 ;; Registers used:
  9876 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  9877 ;; Tracked objects:
  9878 ;;		On entry : 0/0
  9879 ;;		On exit  : 0/0
  9880 ;;		Unchanged: 0/0
  9881 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9882 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9883 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9884 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  9885 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  9886 ;;Total ram usage:        1 bytes
  9887 ;; Hardware stack levels used:    1
  9888 ;; Hardware stack levels required when called:    9
  9889 ;; This function calls:
  9890 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
  9891 ;;		_USBStdSetCfgHandler
  9892 ;;		_USBStdGetDscHandler
  9893 ;;		_USBStdGetStatusHandler
  9894 ;;		_USBStdFeatureReqHandler
  9895 ;; This function is called by:
  9896 ;;		_USBCtrlTrfSetupHandler
  9897 ;; This function uses a non-reentrant model
  9898 ;;
  9899                           
  9900                           
  9901                           ;psect for function _USBCheckStdRequest
  9902  1042                     _USBCheckStdRequest:	
  9903                           
  9904                           ;usb_device.c: 2840: if(SetupPkt.RequestType != (0x00>>5)) return;
  9905                           
  9906                           ;incstack = 0
  9907                           ; Regs used in _USBCheckStdRequest: [allreg]
  9908  1042  0020               	movlb	0	; select bank0
  9909  1043  0E40               	swapf	64,w	;volatile
  9910  1044  0C89               	rrf	9,f
  9911  1045  3903               	andlw	3
  9912  1046  3A00               	xorlw	0
  9913  1047  1D03               	btfss	3,2
  9914  1048  0008               	return
  9915  1049  288F               	goto	l6551
  9916  104A                     l332:	
  9917                           ;usb_device.c: 2843: {
  9918                           ;usb_device.c: 2844: case 5:
  9919                           
  9920                           ;usb_device.c: 2842: switch(SetupPkt.bRequest)
  9921                           
  9922                           
  9923                           ;usb_device.c: 2845: inPipes[0].info.bits.busy = 1;
  9924  104A  0021               	movlb	1	; select bank1
  9925  104B  17E9               	bsf	(_inPipes^(0+128)+2),7
  9926                           
  9927                           ;usb_device.c: 2846: USBDeviceState = ADR_PENDING_STATE;
  9928  104C  3008               	movlw	8
  9929  104D  00B7               	movwf	??_USBCheckStdRequest^(0+128)
  9930  104E  0837               	movf	??_USBCheckStdRequest^(0+128),w
  9931  104F  00E3               	movwf	_USBDeviceState^(0+128)
  9932                           
  9933                           ;usb_device.c: 2848: break;
  9934  1050  0008               	return
  9935  1051                     l6521:	
  9936                           ;usb_device.c: 2849: case 6:
  9937                           
  9938                           
  9939                           ;usb_device.c: 2850: USBStdGetDscHandler();
  9940  1051  3193  232C         	fcall	_USBStdGetDscHandler
  9941                           
  9942                           ;usb_device.c: 2851: break;
  9943  1053  0008               	return
  9944  1054                     l6523:	
  9945                           ;usb_device.c: 2852: case 9:
  9946                           
  9947                           
  9948                           ;usb_device.c: 2853: USBStdSetCfgHandler();
  9949  1054  3193  23AB         	fcall	_USBStdSetCfgHandler
  9950                           
  9951                           ;usb_device.c: 2854: break;
  9952  1056  0008               	return
  9953  1057                     l6525:	
  9954                           ;usb_device.c: 2855: case 8:
  9955                           
  9956                           
  9957                           ;usb_device.c: 2856: inPipes[0].pSrc.bRam = (BYTE*)&USBActiveConfiguration;
  9958  1057  30EC               	movlw	low _USBActiveConfiguration
  9959  1058  0021               	movlb	1	; select bank1
  9960  1059  00E7               	movwf	_inPipes^(0+128)
  9961  105A  3000               	movlw	high _USBActiveConfiguration
  9962  105B  00E8               	movwf	(_inPipes+1)^(0+128)
  9963                           
  9964                           ;usb_device.c: 2857: inPipes[0].info.bits.ctrl_trf_mem = 0x01;
  9965  105C  1469               	bsf	(_inPipes^(0+128)+2),0
  9966                           
  9967                           ;usb_device.c: 2858: inPipes[0].wCount.v[0] = 1;
  9968  105D  01EA               	clrf	(_inPipes^(0+128)+3)
  9969  105E  0AEA               	incf	(_inPipes^(0+128)+3),f
  9970                           
  9971                           ;usb_device.c: 2859: inPipes[0].info.bits.busy = 1;
  9972  105F  17E9               	bsf	(_inPipes^(0+128)+2),7
  9973                           
  9974                           ;usb_device.c: 2860: break;
  9975  1060  0008               	return
  9976  1061                     l6533:	
  9977                           ;usb_device.c: 2861: case 0:
  9978                           
  9979                           
  9980                           ;usb_device.c: 2862: USBStdGetStatusHandler();
  9981  1061  319F  2756         	fcall	_USBStdGetStatusHandler
  9982                           
  9983                           ;usb_device.c: 2863: break;
  9984  1063  0008               	return
  9985  1064                     l6535:	
  9986                           ;usb_device.c: 2864: case 1:
  9987                           
  9988                           
  9989                           ;usb_device.c: 2865: case 3:
  9990                           ;usb_device.c: 2866: USBStdFeatureReqHandler();
  9991  1064  318E  26E6         	fcall	_USBStdFeatureReqHandler
  9992                           
  9993                           ;usb_device.c: 2867: break;
  9994  1066  0008               	return
  9995  1067                     l6537:	
  9996                           ;usb_device.c: 2868: case 10:
  9997                           
  9998                           
  9999                           ;usb_device.c: 2869: inPipes[0].pSrc.bRam = (BYTE*)&USBAlternateInterface[SetupPkt.bIntf
      +                          ID];
 10000  1067  0020               	movlb	0	; select bank0
 10001  1068  0844               	movf	68,w	;volatile
 10002  1069  3EED               	addlw	_USBAlternateInterface& (0+255)
 10003  106A  0021               	movlb	1	; select bank1
 10004  106B  00E7               	movwf	_inPipes^(0+128)
 10005  106C  3000               	movlw	0
 10006  106D  00E8               	movwf	(_inPipes+1)^(0+128)
 10007                           
 10008                           ;usb_device.c: 2870: inPipes[0].info.bits.ctrl_trf_mem = 0x01;
 10009  106E  1469               	bsf	(_inPipes^(0+128)+2),0
 10010                           
 10011                           ;usb_device.c: 2871: inPipes[0].wCount.v[0] = 1;
 10012  106F  01EA               	clrf	(_inPipes^(0+128)+3)
 10013  1070  0AEA               	incf	(_inPipes^(0+128)+3),f
 10014                           
 10015                           ;usb_device.c: 2872: inPipes[0].info.bits.busy = 1;
 10016  1071  17E9               	bsf	(_inPipes^(0+128)+2),7
 10017                           
 10018                           ;usb_device.c: 2873: break;
 10019  1072  0008               	return
 10020  1073                     l341:	
 10021                           ;usb_device.c: 2874: case 11:
 10022                           
 10023                           
 10024                           ;usb_device.c: 2875: inPipes[0].info.bits.busy = 1;
 10025  1073  0021               	movlb	1	; select bank1
 10026  1074  17E9               	bsf	(_inPipes^(0+128)+2),7
 10027                           
 10028                           ;usb_device.c: 2876: USBAlternateInterface[SetupPkt.bIntfID] = SetupPkt.bAltID;
 10029  1075  0020               	movlb	0	; select bank0
 10030  1076  0842               	movf	66,w	;volatile
 10031  1077  0021               	movlb	1	; select bank1
 10032  1078  00B7               	movwf	??_USBCheckStdRequest^(0+128)
 10033  1079  0020               	movlb	0	; select bank0
 10034  107A  0844               	movf	68,w	;volatile
 10035  107B  3EED               	addlw	_USBAlternateInterface& (0+255)
 10036  107C  0086               	movwf	6
 10037  107D  0187               	clrf	7
 10038  107E  0021               	movlb	1	; select bank1
 10039  107F  0837               	movf	??_USBCheckStdRequest^(0+128),w
 10040  1080  0081               	movwf	1
 10041                           
 10042                           ;usb_device.c: 2877: break;
 10043  1081  0008               	return
 10044  1082                     l6547:	
 10045                           ;usb_device.c: 2878: case 7:
 10046                           
 10047                           
 10048                           ;usb_device.c: 2879: USER_USB_CALLBACK_EVENT_HANDLER(EVENT_SET_DESCRIPTOR,0,0);
 10049  1082  3002               	movlw	2
 10050  1083  0021               	movlb	1	; select bank1
 10051  1084  00AC               	movwf	?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)
 10052  1085  3000               	movlw	0
 10053  1086  00AD               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)+1)
 10054  1087  01AE               	clrf	(?_USER_USB_CALLBACK_EVENT_HANDLER+2)^(0+128)
 10055  1088  3000               	movlw	0
 10056  1089  00AF               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)+3)
 10057  108A  3000               	movlw	0
 10058  108B  00B0               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)+4)
 10059  108C  319D  25F4         	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
 10060                           
 10061                           ;usb_device.c: 2884: }
 10062                           
 10063                           ;usb_device.c: 2883: break;
 10064                           
 10065                           ;usb_device.c: 2882: default:
 10066                           
 10067                           ;usb_device.c: 2881: case 12:
 10068                           
 10069                           ;usb_device.c: 2880: break;
 10070  108E  0008               	return
 10071  108F                     l6551:	
 10072  108F  0020               	movlb	0	; select bank0
 10073  1090  0841               	movf	65,w	;volatile
 10074                           
 10075                           ; Switch size 1, requested type "space"
 10076                           ; Number of cases is 11, Range of values is 0 to 12
 10077                           ; switch strategies available:
 10078                           ; Name         Instructions Cycles
 10079                           ; direct_byte           32     6 (fixed)
 10080                           ; simple_byte           34    18 (average)
 10081                           ; jumptable            260     6 (fixed)
 10082                           ; rangetable            17     4 (fixed)
 10083                           ; spacedrange           31     6 (fixed)
 10084                           ; locatedrange          13     3 (fixed)
 10085                           ;	Chosen strategy is direct_byte
 10086  1091  0084               	movwf	4
 10087  1092  300D               	movlw	13
 10088  1093  0204               	subwf	4,w
 10089  1094  1803               	skipnc
 10090  1095  0008               	return
 10091  1096  3198               	movlp	high S7071
 10092  1097  3504               	lslf	4,w
 10093  1098  3E00               	addlw	low S7071
 10094  1099  0082               	movwf	2
 10095  109A                     l330:	
 10096  109A  0008               	return
 10097  109B                     __end_of_USBCheckStdRequest:	
 10098                           
 10099                           	psect	swtext1
 10100  1800                     __pswtext1:	
 10101  1800                     S7071:	
 10102  1800  3190  2861         	ljmp	l6533
 10103  1802  3190  2864         	ljmp	l6535
 10104  1804  3190  289A         	ljmp	l330
 10105  1806  3190  2864         	ljmp	l6535
 10106  1808  3190  289A         	ljmp	l330
 10107  180A  3190  284A         	ljmp	l332
 10108  180C  3190  2851         	ljmp	l6521
 10109  180E  3190  2882         	ljmp	l6547
 10110  1810  3190  2857         	ljmp	l6525
 10111  1812  3190  2854         	ljmp	l6523
 10112  1814  3190  2867         	ljmp	l6537
 10113  1816  3190  2873         	ljmp	l341
 10114  1818  3190  289A         	ljmp	l330
 10115                           
 10116                           	psect	text35
 10117  0EE6                     __ptext35:	
 10118 ;; *************** function _USBStdFeatureReqHandler *****************
 10119 ;; Defined at:
 10120 ;;		line 2907 in file "../USB/usb_device.c"
 10121 ;; Parameters:    Size  Location     Type
 10122 ;;		None
 10123 ;; Auto vars:     Size  Location     Type
 10124 ;;  pUEP            2   19[BANK1 ] PTR unsigned char 
 10125 ;;		 -> UEP0(1), 
 10126 ;;  p               1   22[BANK1 ] PTR struct __BDT
 10127 ;;		 -> NULL(0), BDT(32), 
 10128 ;;  current_ep_d    1   21[BANK1 ] struct .
 10129 ;; Return value:  Size  Location     Type
 10130 ;;		None               void
 10131 ;; Registers used:
 10132 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10133 ;; Tracked objects:
 10134 ;;		On entry : 0/0
 10135 ;;		On exit  : 0/0
 10136 ;;		Unchanged: 0/0
 10137 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10138 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10139 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
 10140 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
 10141 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
 10142 ;;Total ram usage:        6 bytes
 10143 ;; Hardware stack levels used:    1
 10144 ;; Hardware stack levels required when called:    8
 10145 ;; This function calls:
 10146 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 10147 ;; This function is called by:
 10148 ;;		_USBCheckStdRequest
 10149 ;; This function uses a non-reentrant model
 10150 ;;
 10151                           
 10152                           
 10153                           ;psect for function _USBStdFeatureReqHandler
 10154  0EE6                     _USBStdFeatureReqHandler:	
 10155                           
 10156                           ;usb_device.c: 2908: BDT_ENTRY *p;
 10157                           ;usb_device.c: 2909: EP_STATUS current_ep_data;
 10158                           ;usb_device.c: 2913: unsigned char* pUEP;
 10159                           ;usb_device.c: 2951: if((SetupPkt.bFeature == 1)&&
 10160                           ;usb_device.c: 2952: (SetupPkt.Recipient == (0x00)))
 10161                           
 10162                           ;incstack = 0
 10163                           ; Regs used in _USBStdFeatureReqHandler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10164  0EE6  0020               	movlb	0	; select bank0
 10165  0EE7  0842               	movf	66,w	;volatile
 10166  0EE8  3A01               	xorlw	1
 10167  0EE9  1D03               	skipz
 10168  0EEA  2EFD               	goto	l6569
 10169  0EEB  0840               	movf	64,w	;volatile
 10170  0EEC  391F               	andlw	31
 10171  0EED  3800               	iorlw	0
 10172  0EEE  1D03               	skipz
 10173  0EEF  2EFD               	goto	l6569
 10174                           
 10175                           ;usb_device.c: 2953: {
 10176                           ;usb_device.c: 2954: inPipes[0].info.bits.busy = 1;
 10177  0EF0  0021               	movlb	1	; select bank1
 10178  0EF1  17E9               	bsf	(_inPipes^(0+128)+2),7
 10179                           
 10180                           ;usb_device.c: 2955: if(SetupPkt.bRequest == 3)
 10181  0EF2  0020               	movlb	0	; select bank0
 10182  0EF3  0841               	movf	65,w	;volatile
 10183  0EF4  3A03               	xorlw	3
 10184  0EF5  1D03               	skipz
 10185  0EF6  2EFB               	goto	l6567
 10186                           
 10187                           ;usb_device.c: 2956: RemoteWakeup = TRUE;
 10188  0EF7  0022               	movlb	2	; select bank2
 10189  0EF8  01E1               	clrf	_RemoteWakeup^(0+256)
 10190  0EF9  0AE1               	incf	_RemoteWakeup^(0+256),f
 10191  0EFA  2EFD               	goto	l6569
 10192  0EFB                     l6567:	
 10193                           
 10194                           ;usb_device.c: 2957: else
 10195                           ;usb_device.c: 2958: RemoteWakeup = FALSE;
 10196  0EFB  0022               	movlb	2	; select bank2
 10197  0EFC  01E1               	clrf	_RemoteWakeup^(0+256)
 10198  0EFD                     l6569:	
 10199                           
 10200                           ;usb_device.c: 2959: }
 10201                           ;usb_device.c: 2962: if((SetupPkt.bFeature == 0)&&
 10202                           ;usb_device.c: 2963: (SetupPkt.Recipient == (0x02))&&
 10203                           ;usb_device.c: 2964: (SetupPkt.EPNum != 0) && (SetupPkt.EPNum <= 1)&&
 10204                           ;usb_device.c: 2965: (USBDeviceState == CONFIGURED_STATE))
 10205  0EFD  0020               	movlb	0	; select bank0
 10206  0EFE  0842               	movf	66,w
 10207  0EFF  1D03               	skipz
 10208  0F00  0008               	return
 10209  0F01  0840               	movf	64,w	;volatile
 10210  0F02  391F               	andlw	31
 10211  0F03  3A02               	xorlw	2
 10212  0F04  1D03               	skipz
 10213  0F05  0008               	return
 10214  0F06  0844               	movf	68,w	;volatile
 10215  0F07  390F               	andlw	15
 10216  0F08  3A00               	xorlw	0
 10217  0F09  1903               	skipnz
 10218  0F0A  0008               	return
 10219  0F0B  0844               	movf	68,w	;volatile
 10220  0F0C  390F               	andlw	15
 10221  0F0D  0021               	movlb	1	; select bank1
 10222  0F0E  00B1               	movwf	??_USBStdFeatureReqHandler^(0+128)
 10223  0F0F  3002               	movlw	2
 10224  0F10  0231               	subwf	??_USBStdFeatureReqHandler^(0+128),w
 10225  0F11  1803               	skipnc
 10226  0F12  0008               	return
 10227  0F13  0863               	movf	_USBDeviceState^(0+128),w
 10228  0F14  3A20               	xorlw	32
 10229  0F15  1D03               	skipz
 10230  0F16  0008               	return
 10231                           
 10232                           ;usb_device.c: 2966: {
 10233                           ;usb_device.c: 2969: inPipes[0].info.bits.busy = 1;
 10234  0F17  17E9               	bsf	(_inPipes^(0+128)+2),7
 10235                           
 10236                           ;usb_device.c: 2972: if(SetupPkt.EPDir == 0)
 10237  0F18  0020               	movlb	0	; select bank0
 10238  0F19  1BC4               	btfsc	68,7	;volatile
 10239  0F1A  2F2B               	goto	l6583
 10240                           
 10241                           ;usb_device.c: 2973: {
 10242                           ;usb_device.c: 2974: p = (BDT_ENTRY*)pBDTEntryOut[SetupPkt.EPNum];
 10243  0F1B  0844               	movf	68,w	;volatile
 10244  0F1C  390F               	andlw	15
 10245  0F1D  3E59               	addlw	_pBDTEntryOut& (0+255)
 10246  0F1E  0086               	movwf	6
 10247  0F1F  3001               	movlw	1	; select bank2/3
 10248  0F20  0087               	movwf	7
 10249  0F21  0801               	movf	1,w
 10250  0F22  0021               	movlb	1	; select bank1
 10251  0F23  00B1               	movwf	??_USBStdFeatureReqHandler^(0+128)
 10252  0F24  0831               	movf	??_USBStdFeatureReqHandler^(0+128),w
 10253  0F25  00B6               	movwf	USBStdFeatureReqHandler@p^(0+128)
 10254                           
 10255                           ;usb_device.c: 2975: current_ep_data.Val = ep_data_out[SetupPkt.EPNum].Val;
 10256  0F26  0020               	movlb	0	; select bank0
 10257  0F27  0844               	movf	68,w	;volatile
 10258  0F28  390F               	andlw	15
 10259  0F29  3ED3               	addlw	_ep_data_out& (0+255)
 10260  0F2A  2F3A               	goto	L11
 10261  0F2B                     l6583:	
 10262                           ;usb_device.c: 2976: }
 10263                           
 10264                           
 10265                           ;usb_device.c: 2977: else
 10266                           ;usb_device.c: 2978: {
 10267                           ;usb_device.c: 2979: p = (BDT_ENTRY*)pBDTEntryIn[SetupPkt.EPNum];
 10268  0F2B  0020               	movlb	0	; select bank0
 10269  0F2C  0844               	movf	68,w	;volatile
 10270  0F2D  390F               	andlw	15
 10271  0F2E  3EE0               	addlw	_pBDTEntryIn& (0+255)
 10272  0F2F  0086               	movwf	6
 10273  0F30  0187               	clrf	7
 10274  0F31  0801               	movf	1,w
 10275  0F32  0021               	movlb	1	; select bank1
 10276  0F33  00B1               	movwf	??_USBStdFeatureReqHandler^(0+128)
 10277  0F34  0831               	movf	??_USBStdFeatureReqHandler^(0+128),w
 10278  0F35  00B6               	movwf	USBStdFeatureReqHandler@p^(0+128)
 10279                           
 10280                           ;usb_device.c: 2980: current_ep_data.Val = ep_data_in[SetupPkt.EPNum].Val;
 10281  0F36  0020               	movlb	0	; select bank0
 10282  0F37  0844               	movf	68,w	;volatile
 10283  0F38  390F               	andlw	15
 10284  0F39  3ED1               	addlw	_ep_data_in& (0+255)
 10285  0F3A                     L11:	
 10286  0F3A  0086               	movwf	6
 10287  0F3B  3001               	movlw	1	; select bank3/4
 10288  0F3C  0087               	movwf	7
 10289  0F3D  0801               	movf	1,w
 10290  0F3E  0021               	movlb	1	; select bank1
 10291  0F3F  00B1               	movwf	??_USBStdFeatureReqHandler^(0+128)
 10292  0F40  0831               	movf	??_USBStdFeatureReqHandler^(0+128),w
 10293  0F41  00B5               	movwf	USBStdFeatureReqHandler@current_ep_data^(0+128)
 10294                           
 10295                           ;usb_device.c: 2981: }
 10296                           ;usb_device.c: 2987: if(current_ep_data.bits.ping_pong_state == 0)
 10297  0F42  1835               	btfsc	USBStdFeatureReqHandler@current_ep_data^(0+128),0
 10298  0F43  2F49               	goto	l353
 10299                           
 10300                           ;usb_device.c: 2988: {
 10301                           ;usb_device.c: 2989: {((BYTE_VAL*)&p)->Val &= ~0x0004;};
 10302  0F44  30FB               	movlw	251
 10303  0F45  00B1               	movwf	??_USBStdFeatureReqHandler^(0+128)
 10304  0F46  0831               	movf	??_USBStdFeatureReqHandler^(0+128),w
 10305  0F47  05B6               	andwf	USBStdFeatureReqHandler@p^(0+128),f
 10306                           
 10307                           ;usb_device.c: 2990: }
 10308  0F48  2F4A               	goto	l354
 10309  0F49                     l353:	
 10310                           
 10311                           ;usb_device.c: 2991: else
 10312                           ;usb_device.c: 2992: {
 10313                           ;usb_device.c: 2993: {((BYTE_VAL*)&p)->Val |= 0x0004;};
 10314  0F49  1536               	bsf	USBStdFeatureReqHandler@p^(0+128),2
 10315  0F4A                     l354:	
 10316                           
 10317                           ;usb_device.c: 2994: }
 10318                           ;usb_device.c: 2999: if(SetupPkt.EPDir == 0)
 10319  0F4A  0020               	movlb	0	; select bank0
 10320  0F4B  1BC4               	btfsc	68,7	;volatile
 10321  0F4C  2F58               	goto	l6591
 10322                           
 10323                           ;usb_device.c: 3000: {
 10324                           ;usb_device.c: 3001: pBDTEntryOut[SetupPkt.EPNum] = (volatile BDT_ENTRY *)p;
 10325  0F4D  0021               	movlb	1	; select bank1
 10326  0F4E  0836               	movf	USBStdFeatureReqHandler@p^(0+128),w
 10327  0F4F  00B1               	movwf	??_USBStdFeatureReqHandler^(0+128)
 10328  0F50  0020               	movlb	0	; select bank0
 10329  0F51  0844               	movf	68,w	;volatile
 10330  0F52  390F               	andlw	15
 10331  0F53  3E59               	addlw	_pBDTEntryOut& (0+255)
 10332  0F54  0086               	movwf	6
 10333  0F55  3001               	movlw	1	; select bank2/3
 10334  0F56  0087               	movwf	7
 10335  0F57  2F61               	goto	L12
 10336  0F58                     l6591:	
 10337                           ;usb_device.c: 3002: }
 10338                           
 10339                           
 10340                           ;usb_device.c: 3003: else
 10341                           ;usb_device.c: 3004: {
 10342                           ;usb_device.c: 3005: pBDTEntryIn[SetupPkt.EPNum] = (volatile BDT_ENTRY *)p;
 10343  0F58  0021               	movlb	1	; select bank1
 10344  0F59  0836               	movf	USBStdFeatureReqHandler@p^(0+128),w
 10345  0F5A  00B1               	movwf	??_USBStdFeatureReqHandler^(0+128)
 10346  0F5B  0020               	movlb	0	; select bank0
 10347  0F5C  0844               	movf	68,w	;volatile
 10348  0F5D  390F               	andlw	15
 10349  0F5E  3EE0               	addlw	_pBDTEntryIn& (0+255)
 10350  0F5F  0086               	movwf	6
 10351  0F60  0187               	clrf	7
 10352  0F61                     L12:	
 10353  0F61  0021               	movlb	1	; select bank1
 10354  0F62  0831               	movf	??_USBStdFeatureReqHandler^(0+128),w
 10355  0F63  0081               	movwf	1
 10356                           
 10357                           ;usb_device.c: 3006: }
 10358                           ;usb_device.c: 3009: if(SetupPkt.bRequest == 3)
 10359  0F64  0020               	movlb	0	; select bank0
 10360  0F65  0841               	movf	65,w	;volatile
 10361  0F66  3A03               	xorlw	3
 10362  0F67  1D03               	skipz
 10363  0F68  2F86               	goto	l6603
 10364                           
 10365                           ;usb_device.c: 3010: {
 10366                           ;usb_device.c: 3011: if(p->STAT.UOWN == 1)
 10367  0F69  0021               	movlb	1	; select bank1
 10368  0F6A  0836               	movf	USBStdFeatureReqHandler@p^(0+128),w
 10369  0F6B  0086               	movwf	6
 10370  0F6C  0187               	clrf	7
 10371  0F6D  1F81               	btfss	1,7
 10372  0F6E  2F7D               	goto	l358
 10373                           
 10374                           ;usb_device.c: 3012: {
 10375                           ;usb_device.c: 3015: if(SetupPkt.EPDir == 0)
 10376  0F6F  0020               	movlb	0	; select bank0
 10377  0F70  1BC4               	btfsc	68,7	;volatile
 10378  0F71  2F76               	goto	l6601
 10379                           
 10380                           ;usb_device.c: 3016: {
 10381                           ;usb_device.c: 3017: ep_data_out[SetupPkt.EPNum].bits.transfer_terminated = 1;
 10382  0F72  0844               	movf	68,w	;volatile
 10383  0F73  390F               	andlw	15
 10384  0F74  3ED3               	addlw	_ep_data_out& (0+255)
 10385  0F75  2F79               	goto	L13
 10386  0F76                     l6601:	
 10387                           ;usb_device.c: 3018: }
 10388                           
 10389                           
 10390                           ;usb_device.c: 3019: else
 10391                           ;usb_device.c: 3020: {
 10392                           ;usb_device.c: 3021: ep_data_in[SetupPkt.EPNum].bits.transfer_terminated = 1;
 10393  0F76  0844               	movf	68,w	;volatile
 10394  0F77  390F               	andlw	15
 10395  0F78  3ED1               	addlw	_ep_data_in& (0+255)
 10396  0F79                     L13:	
 10397  0F79  0086               	movwf	6
 10398  0F7A  3001               	movlw	1	; select bank3/4
 10399  0F7B  0087               	movwf	7
 10400  0F7C  1481               	bsf	1,1
 10401  0F7D                     l358:	
 10402                           
 10403                           ;usb_device.c: 3022: }
 10404                           ;usb_device.c: 3023: }
 10405                           ;usb_device.c: 3026: p->STAT.Val |= 0x80|0x04;
 10406  0F7D  3084               	movlw	132
 10407  0F7E  0021               	movlb	1	; select bank1
 10408  0F7F  00B1               	movwf	??_USBStdFeatureReqHandler^(0+128)
 10409  0F80  0836               	movf	USBStdFeatureReqHandler@p^(0+128),w
 10410  0F81  0086               	movwf	6
 10411  0F82  0187               	clrf	7
 10412  0F83  0831               	movf	??_USBStdFeatureReqHandler^(0+128),w
 10413  0F84  0481               	iorwf	1,f
 10414                           
 10415                           ;usb_device.c: 3027: }
 10416  0F85  0008               	return
 10417  0F86                     l6603:	
 10418                           
 10419                           ;usb_device.c: 3028: else
 10420                           ;usb_device.c: 3029: {
 10421                           ;usb_device.c: 3033: ((BYTE_VAL*)&p)->Val ^= 0x0004;;
 10422  0F86  3004               	movlw	4
 10423  0F87  0021               	movlb	1	; select bank1
 10424  0F88  00B1               	movwf	??_USBStdFeatureReqHandler^(0+128)
 10425  0F89  0831               	movf	??_USBStdFeatureReqHandler^(0+128),w
 10426  0F8A  06B6               	xorwf	USBStdFeatureReqHandler@p^(0+128),f
 10427                           
 10428                           ;usb_device.c: 3035: if(p->STAT.UOWN == 1)
 10429  0F8B  0836               	movf	USBStdFeatureReqHandler@p^(0+128),w
 10430  0F8C  0086               	movwf	6
 10431  0F8D  0187               	clrf	7
 10432  0F8E  1F81               	btfss	1,7
 10433  0F8F  2FAB               	goto	l6613
 10434                           
 10435                           ;usb_device.c: 3036: {
 10436                           ;usb_device.c: 3039: p->STAT.Val &= (~0x80);
 10437  0F90  307F               	movlw	127
 10438  0F91  00B1               	movwf	??_USBStdFeatureReqHandler^(0+128)
 10439  0F92  0836               	movf	USBStdFeatureReqHandler@p^(0+128),w
 10440  0F93  0086               	movwf	6
 10441  0F94  0187               	clrf	7
 10442  0F95  0831               	movf	??_USBStdFeatureReqHandler^(0+128),w
 10443  0F96  0581               	andwf	1,f
 10444                           
 10445                           ;usb_device.c: 3040: p->STAT.Val |= 0x40;
 10446  0F97  0836               	movf	USBStdFeatureReqHandler@p^(0+128),w
 10447  0F98  0086               	movwf	6
 10448  0F99  0187               	clrf	7
 10449  0F9A  1701               	bsf	1,6
 10450                           
 10451                           ;usb_device.c: 3041: USER_USB_CALLBACK_EVENT_HANDLER(EVENT_TRANSFER_TERMINATED,p,sizeof(
      +                          p));
 10452  0F9B  3005               	movlw	5
 10453  0F9C  00AC               	movwf	?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)
 10454  0F9D  3000               	movlw	0
 10455  0F9E  00AD               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)+1)
 10456  0F9F  0836               	movf	USBStdFeatureReqHandler@p^(0+128),w
 10457  0FA0  00B1               	movwf	??_USBStdFeatureReqHandler^(0+128)
 10458  0FA1  0831               	movf	??_USBStdFeatureReqHandler^(0+128),w
 10459  0FA2  00AE               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER+2)^(0+128)
 10460  0FA3  3001               	movlw	1
 10461  0FA4  00AF               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)+3)
 10462  0FA5  3000               	movlw	0
 10463  0FA6  00B0               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)+4)
 10464  0FA7  319D  25F4  318E   	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
 10465                           
 10466                           ;usb_device.c: 3042: }
 10467  0FAA  2FB0               	goto	l6615
 10468  0FAB                     l6613:	
 10469                           
 10470                           ;usb_device.c: 3043: else
 10471                           ;usb_device.c: 3044: {
 10472                           ;usb_device.c: 3046: p->STAT.Val |= 0x40;
 10473  0FAB  0021               	movlb	1	; select bank1
 10474  0FAC  0836               	movf	USBStdFeatureReqHandler@p^(0+128),w
 10475  0FAD  0086               	movwf	6
 10476  0FAE  0187               	clrf	7
 10477  0FAF  1701               	bsf	1,6
 10478  0FB0                     l6615:	
 10479                           
 10480                           ;usb_device.c: 3047: }
 10481                           ;usb_device.c: 3051: ((BYTE_VAL*)&p)->Val ^= 0x0004;;
 10482  0FB0  3004               	movlw	4
 10483  0FB1  0021               	movlb	1	; select bank1
 10484  0FB2  00B1               	movwf	??_USBStdFeatureReqHandler^(0+128)
 10485  0FB3  0831               	movf	??_USBStdFeatureReqHandler^(0+128),w
 10486  0FB4  06B6               	xorwf	USBStdFeatureReqHandler@p^(0+128),f
 10487                           
 10488                           ;usb_device.c: 3057: if((current_ep_data.bits.transfer_terminated != 0) || (p->STAT.UOWN
      +                           == 1))
 10489  0FB5  18B5               	btfsc	USBStdFeatureReqHandler@current_ep_data^(0+128),1
 10490  0FB6  2FBC               	goto	l366
 10491  0FB7  0836               	movf	USBStdFeatureReqHandler@p^(0+128),w
 10492  0FB8  0086               	movwf	6
 10493  0FB9  0187               	clrf	7
 10494  0FBA  1F81               	btfss	1,7
 10495  0FBB  2FE2               	goto	l6627
 10496  0FBC                     l366:	
 10497                           
 10498                           ;usb_device.c: 3058: {
 10499                           ;usb_device.c: 3059: if(SetupPkt.EPDir == 0)
 10500  0FBC  0020               	movlb	0	; select bank0
 10501  0FBD  1BC4               	btfsc	68,7	;volatile
 10502  0FBE  2FC3               	goto	l6623
 10503                           
 10504                           ;usb_device.c: 3060: {
 10505                           ;usb_device.c: 3061: ep_data_out[SetupPkt.EPNum].bits.transfer_terminated = 0;
 10506  0FBF  0844               	movf	68,w	;volatile
 10507  0FC0  390F               	andlw	15
 10508  0FC1  3ED3               	addlw	_ep_data_out& (0+255)
 10509  0FC2  2FC6               	goto	L14
 10510  0FC3                     l6623:	
 10511                           ;usb_device.c: 3062: }
 10512                           
 10513                           
 10514                           ;usb_device.c: 3063: else
 10515                           ;usb_device.c: 3064: {
 10516                           ;usb_device.c: 3065: ep_data_in[SetupPkt.EPNum].bits.transfer_terminated = 0;
 10517  0FC3  0844               	movf	68,w	;volatile
 10518  0FC4  390F               	andlw	15
 10519  0FC5  3ED1               	addlw	_ep_data_in& (0+255)
 10520  0FC6                     L14:	
 10521  0FC6  0086               	movwf	6
 10522  0FC7  3001               	movlw	1	; select bank3/4
 10523  0FC8  0087               	movwf	7
 10524  0FC9  1081               	bcf	1,1
 10525                           
 10526                           ;usb_device.c: 3066: }
 10527                           ;usb_device.c: 3068: p->STAT.Val &= ~(0x80 | 0x40 | 0x04);
 10528  0FCA  303B               	movlw	59
 10529  0FCB  0021               	movlb	1	; select bank1
 10530  0FCC  00B1               	movwf	??_USBStdFeatureReqHandler^(0+128)
 10531  0FCD  0836               	movf	USBStdFeatureReqHandler@p^(0+128),w
 10532  0FCE  0086               	movwf	6
 10533  0FCF  0187               	clrf	7
 10534  0FD0  0831               	movf	??_USBStdFeatureReqHandler^(0+128),w
 10535  0FD1  0581               	andwf	1,f
 10536                           
 10537                           ;usb_device.c: 3071: USER_USB_CALLBACK_EVENT_HANDLER(EVENT_TRANSFER_TERMINATED,p,sizeof(
      +                          p));
 10538  0FD2  3005               	movlw	5
 10539  0FD3  00AC               	movwf	?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)
 10540  0FD4  3000               	movlw	0
 10541  0FD5  00AD               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)+1)
 10542  0FD6  0836               	movf	USBStdFeatureReqHandler@p^(0+128),w
 10543  0FD7  00B1               	movwf	??_USBStdFeatureReqHandler^(0+128)
 10544  0FD8  0831               	movf	??_USBStdFeatureReqHandler^(0+128),w
 10545  0FD9  00AE               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER+2)^(0+128)
 10546  0FDA  3001               	movlw	1
 10547  0FDB  00AF               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)+3)
 10548  0FDC  3000               	movlw	0
 10549  0FDD  00B0               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)+4)
 10550  0FDE  319D  25F4  318E   	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
 10551                           
 10552                           ;usb_device.c: 3072: }
 10553  0FE1  2FEA               	goto	l6629
 10554  0FE2                     l6627:	
 10555                           
 10556                           ;usb_device.c: 3073: else
 10557                           ;usb_device.c: 3074: {
 10558                           ;usb_device.c: 3076: p->STAT.Val &= ~(0x80 | 0x40 | 0x04);
 10559  0FE2  303B               	movlw	59
 10560  0FE3  0021               	movlb	1	; select bank1
 10561  0FE4  00B1               	movwf	??_USBStdFeatureReqHandler^(0+128)
 10562  0FE5  0836               	movf	USBStdFeatureReqHandler@p^(0+128),w
 10563  0FE6  0086               	movwf	6
 10564  0FE7  0187               	clrf	7
 10565  0FE8  0831               	movf	??_USBStdFeatureReqHandler^(0+128),w
 10566  0FE9  0581               	andwf	1,f
 10567  0FEA                     l6629:	
 10568                           
 10569                           ;usb_device.c: 3077: }
 10570                           ;usb_device.c: 3124: pUEP = (unsigned char*)(&UEP0+SetupPkt.EPNum);
 10571  0FEA  0020               	movlb	0	; select bank0
 10572  0FEB  0844               	movf	68,w	;volatile
 10573  0FEC  390F               	andlw	15
 10574  0FED  3E98               	addlw	152
 10575  0FEE  0021               	movlb	1	; select bank1
 10576  0FEF  00B1               	movwf	??_USBStdFeatureReqHandler^(0+128)
 10577  0FF0  01B2               	clrf	(??_USBStdFeatureReqHandler^(0+128)+1)
 10578  0FF1  300E               	movlw	14
 10579  0FF2  3DB2               	addwfc	(??_USBStdFeatureReqHandler^(0+128)+1),f
 10580  0FF3  0831               	movf	??_USBStdFeatureReqHandler^(0+128),w
 10581  0FF4  00B3               	movwf	USBStdFeatureReqHandler@pUEP^(0+128)
 10582  0FF5  0832               	movf	(??_USBStdFeatureReqHandler+1)^(0+128),w
 10583  0FF6  00B4               	movwf	(USBStdFeatureReqHandler@pUEP+1)^(0+128)
 10584                           
 10585                           ;usb_device.c: 3128: *pUEP &= ~0x0001;
 10586  0FF7  30FE               	movlw	254
 10587  0FF8  00B1               	movwf	??_USBStdFeatureReqHandler^(0+128)
 10588  0FF9  0833               	movf	USBStdFeatureReqHandler@pUEP^(0+128),w
 10589  0FFA  0086               	movwf	6
 10590  0FFB  0834               	movf	(USBStdFeatureReqHandler@pUEP+1)^(0+128),w
 10591  0FFC  0087               	movwf	7
 10592  0FFD  0831               	movf	??_USBStdFeatureReqHandler^(0+128),w
 10593  0FFE  0581               	andwf	1,f
 10594  0FFF  0008               	return
 10595  1000                     __end_of_USBStdFeatureReqHandler:	
 10596                           
 10597                           	psect	text36
 10598  1F56                     __ptext36:	
 10599 ;; *************** function _USBStdGetStatusHandler *****************
 10600 ;; Defined at:
 10601 ;;		line 2283 in file "../USB/usb_device.c"
 10602 ;; Parameters:    Size  Location     Type
 10603 ;;		None
 10604 ;; Auto vars:     Size  Location     Type
 10605 ;;  p               1   15[BANK0 ] PTR struct __BDT
 10606 ;;		 -> NULL(0), BDT(32), 
 10607 ;; Return value:  Size  Location     Type
 10608 ;;		None               void
 10609 ;; Registers used:
 10610 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 10611 ;; Tracked objects:
 10612 ;;		On entry : 0/0
 10613 ;;		On exit  : 0/0
 10614 ;;		Unchanged: 0/0
 10615 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10616 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10617 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10618 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10619 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10620 ;;Total ram usage:        2 bytes
 10621 ;; Hardware stack levels used:    1
 10622 ;; Hardware stack levels required when called:    4
 10623 ;; This function calls:
 10624 ;;		Nothing
 10625 ;; This function is called by:
 10626 ;;		_USBCheckStdRequest
 10627 ;; This function uses a non-reentrant model
 10628 ;;
 10629                           
 10630                           
 10631                           ;psect for function _USBStdGetStatusHandler
 10632  1F56                     _USBStdGetStatusHandler:	
 10633                           
 10634                           ;usb_device.c: 2284: CtrlTrfData[0] = 0;
 10635                           
 10636                           ;incstack = 0
 10637                           ; Regs used in _USBStdGetStatusHandler: [wreg-fsr1h+status,2+status,0]
 10638  1F56  0020               	movlb	0	; select bank0
 10639  1F57  01C8               	clrf	72	;volatile
 10640                           
 10641                           ;usb_device.c: 2285: CtrlTrfData[1] = 0;
 10642  1F58  3000               	movlw	0
 10643  1F59  00C9               	movwf	73	;volatile
 10644                           
 10645                           ;usb_device.c: 2287: switch(SetupPkt.Recipient)
 10646  1F5A  2F8E               	goto	l6481
 10647  1F5B                     l271:	
 10648                           ;usb_device.c: 2288: {
 10649                           ;usb_device.c: 2289: case (0x00):
 10650                           
 10651                           
 10652                           ;usb_device.c: 2295: if(1 == 1)
 10653  1F5B  0021               	movlb	1	; select bank1
 10654  1F5C  17E9               	bsf	(_inPipes^(0+128)+2),7
 10655                           
 10656                           ;usb_device.c: 2296: {
 10657                           ;usb_device.c: 2297: CtrlTrfData[0]|=0x01;
 10658  1F5D  0020               	movlb	0	; select bank0
 10659  1F5E  1448               	bsf	72,0	;volatile
 10660                           
 10661                           ;usb_device.c: 2298: }
 10662                           ;usb_device.c: 2300: if(RemoteWakeup == TRUE)
 10663  1F5F  0022               	movlb	2	; select bank2
 10664  1F60  0861               	movf	_RemoteWakeup^(0+256),w
 10665  1F61  3A01               	xorlw	1
 10666  1F62  1D03               	skipz
 10667  1F63  2F9A               	goto	l274
 10668                           
 10669                           ;usb_device.c: 2301: {
 10670                           ;usb_device.c: 2302: CtrlTrfData[0]|=0x02;
 10671  1F64  0020               	movlb	0	; select bank0
 10672  1F65  14C8               	bsf	72,1	;volatile
 10673                           
 10674                           ;usb_device.c: 2303: }
 10675                           ;usb_device.c: 2304: break;
 10676  1F66  2F9A               	goto	l274
 10677  1F67                     l275:	
 10678                           ;usb_device.c: 2305: case (0x01):
 10679                           
 10680                           
 10681                           ;usb_device.c: 2306: inPipes[0].info.bits.busy = 1;
 10682  1F67  0021               	movlb	1	; select bank1
 10683  1F68  17E9               	bsf	(_inPipes^(0+128)+2),7
 10684                           
 10685                           ;usb_device.c: 2307: break;
 10686  1F69  2F9A               	goto	l274
 10687  1F6A                     l276:	
 10688                           ;usb_device.c: 2308: case (0x02):
 10689                           
 10690                           
 10691                           ;usb_device.c: 2309: inPipes[0].info.bits.busy = 1;
 10692  1F6A  0021               	movlb	1	; select bank1
 10693  1F6B  17E9               	bsf	(_inPipes^(0+128)+2),7
 10694                           
 10695                           ;usb_device.c: 2313: {
 10696                           ;usb_device.c: 2314: BDT_ENTRY *p;
 10697                           ;usb_device.c: 2316: if(SetupPkt.EPDir == 0)
 10698  1F6C  0020               	movlb	0	; select bank0
 10699  1F6D  1BC4               	btfsc	68,7	;volatile
 10700  1F6E  2F76               	goto	l6471
 10701                           
 10702                           ;usb_device.c: 2317: {
 10703                           ;usb_device.c: 2318: p = (BDT_ENTRY*)pBDTEntryOut[SetupPkt.EPNum];
 10704  1F6F  0844               	movf	68,w	;volatile
 10705  1F70  390F               	andlw	15
 10706  1F71  3E59               	addlw	_pBDTEntryOut& (0+255)
 10707  1F72  0086               	movwf	6
 10708  1F73  3001               	movlw	1	; select bank2/3
 10709  1F74  0087               	movwf	7
 10710  1F75  2F7B               	goto	L15
 10711  1F76                     l6471:	
 10712                           ;usb_device.c: 2319: }
 10713                           
 10714                           
 10715                           ;usb_device.c: 2320: else
 10716                           ;usb_device.c: 2321: {
 10717                           ;usb_device.c: 2322: p = (BDT_ENTRY*)pBDTEntryIn[SetupPkt.EPNum];
 10718  1F76  0844               	movf	68,w	;volatile
 10719  1F77  390F               	andlw	15
 10720  1F78  3EE0               	addlw	_pBDTEntryIn& (0+255)
 10721  1F79  0086               	movwf	6
 10722  1F7A  0187               	clrf	7
 10723  1F7B                     L15:	
 10724  1F7B  0801               	movf	1,w
 10725  1F7C  00DE               	movwf	??_USBStdGetStatusHandler
 10726  1F7D  085E               	movf	??_USBStdGetStatusHandler,w
 10727  1F7E  00DF               	movwf	USBStdGetStatusHandler@p
 10728                           
 10729                           ;usb_device.c: 2323: }
 10730                           ;usb_device.c: 2325: if((p->STAT.UOWN == 1) && (p->STAT.BSTALL == 1))
 10731  1F7F  085F               	movf	USBStdGetStatusHandler@p,w
 10732  1F80  0086               	movwf	6
 10733  1F81  0187               	clrf	7
 10734  1F82  1F81               	btfss	1,7
 10735  1F83  2F9A               	goto	l274
 10736  1F84  085F               	movf	USBStdGetStatusHandler@p,w
 10737  1F85  0086               	movwf	6
 10738  1F86  0187               	clrf	7
 10739  1F87  1D01               	btfss	1,2
 10740  1F88  2F9A               	goto	l274
 10741                           
 10742                           ;usb_device.c: 2326: CtrlTrfData[0]=0x01;
 10743  1F89  3001               	movlw	1
 10744  1F8A  00DE               	movwf	??_USBStdGetStatusHandler
 10745  1F8B  085E               	movf	??_USBStdGetStatusHandler,w
 10746  1F8C  00C8               	movwf	72	;volatile
 10747                           
 10748                           ;usb_device.c: 2328: }
 10749                           ;usb_device.c: 2329: }
 10750                           
 10751                           ;usb_device.c: 2327: break;
 10752  1F8D  2F9A               	goto	l274
 10753  1F8E                     l6481:	
 10754  1F8E  0840               	movf	64,w	;volatile
 10755  1F8F  391F               	andlw	31
 10756                           
 10757                           ; Switch size 1, requested type "space"
 10758                           ; Number of cases is 3, Range of values is 0 to 2
 10759                           ; switch strategies available:
 10760                           ; Name         Instructions Cycles
 10761                           ; simple_byte           10     6 (average)
 10762                           ; direct_byte           12     6 (fixed)
 10763                           ; jumptable            260     6 (fixed)
 10764                           ; rangetable             7     4 (fixed)
 10765                           ; spacedrange           11     6 (fixed)
 10766                           ; locatedrange           3     3 (fixed)
 10767                           ;	Chosen strategy is simple_byte
 10768  1F90  3A00               	xorlw	0	; case 0
 10769  1F91  1903               	skipnz
 10770  1F92  2F5B               	goto	l271
 10771  1F93  3A01               	xorlw	1	; case 1
 10772  1F94  1903               	skipnz
 10773  1F95  2F67               	goto	l275
 10774  1F96  3A03               	xorlw	3	; case 2
 10775  1F97  1903               	skipnz
 10776  1F98  2F6A               	goto	l276
 10777  1F99  2F9A               	goto	l274
 10778  1F9A                     l274:	
 10779                           
 10780                           ;usb_device.c: 2331: if(inPipes[0].info.bits.busy == 1)
 10781  1F9A  0021               	movlb	1	; select bank1
 10782  1F9B  1FE9               	btfss	(_inPipes^(0+128)+2),7
 10783  1F9C  0008               	return
 10784                           
 10785                           ;usb_device.c: 2332: {
 10786                           ;usb_device.c: 2333: inPipes[0].pSrc.bRam = (BYTE*)&CtrlTrfData;
 10787  1F9D  3048               	movlw	72
 10788  1F9E  00E7               	movwf	_inPipes^(0+128)
 10789  1F9F  3000               	movlw	0
 10790  1FA0  00E8               	movwf	(_inPipes+1)^(0+128)
 10791                           
 10792                           ;usb_device.c: 2334: inPipes[0].info.bits.ctrl_trf_mem = 0x01;
 10793  1FA1  1469               	bsf	(_inPipes^(0+128)+2),0
 10794                           
 10795                           ;usb_device.c: 2335: inPipes[0].wCount.v[0] = 2;
 10796  1FA2  3002               	movlw	2
 10797  1FA3  0020               	movlb	0	; select bank0
 10798  1FA4  00DE               	movwf	??_USBStdGetStatusHandler
 10799  1FA5  085E               	movf	??_USBStdGetStatusHandler,w
 10800  1FA6  0021               	movlb	1	; select bank1
 10801  1FA7  00EA               	movwf	(_inPipes^(0+128)+3)
 10802  1FA8  0008               	return
 10803  1FA9                     __end_of_USBStdGetStatusHandler:	
 10804                           
 10805                           	psect	text37
 10806  132C                     __ptext37:	
 10807 ;; *************** function _USBStdGetDscHandler *****************
 10808 ;; Defined at:
 10809 ;;		line 2207 in file "../USB/usb_device.c"
 10810 ;; Parameters:    Size  Location     Type
 10811 ;;		None
 10812 ;; Auto vars:     Size  Location     Type
 10813 ;;		None
 10814 ;; Return value:  Size  Location     Type
 10815 ;;		None               void
 10816 ;; Registers used:
 10817 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
 10818 ;; Tracked objects:
 10819 ;;		On entry : 0/0
 10820 ;;		On exit  : 0/0
 10821 ;;		Unchanged: 0/0
 10822 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10823 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10824 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10825 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10826 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10827 ;;Total ram usage:        3 bytes
 10828 ;; Hardware stack levels used:    1
 10829 ;; Hardware stack levels required when called:    4
 10830 ;; This function calls:
 10831 ;;		Nothing
 10832 ;; This function is called by:
 10833 ;;		_USBCheckStdRequest
 10834 ;; This function uses a non-reentrant model
 10835 ;;
 10836                           
 10837                           
 10838                           ;psect for function _USBStdGetDscHandler
 10839  132C                     _USBStdGetDscHandler:	
 10840                           
 10841                           ;usb_device.c: 2208: if(SetupPkt.bmRequestType == 0x80)
 10842                           
 10843                           ;incstack = 0
 10844                           ; Regs used in _USBStdGetDscHandler: [wreg-fsr0h+status,2+status,0+pclath]
 10845  132C  0020               	movlb	0	; select bank0
 10846  132D  0840               	movf	64,w	;volatile
 10847  132E  3A80               	xorlw	128
 10848  132F  1D03               	skipz
 10849  1330  0008               	return
 10850                           
 10851                           ;usb_device.c: 2209: {
 10852                           ;usb_device.c: 2210: inPipes[0].info.Val = 0x00 | 0x80 | 0x40;
 10853  1331  30C0               	movlw	192
 10854  1332  00DE               	movwf	??_USBStdGetDscHandler
 10855  1333  085E               	movf	??_USBStdGetDscHandler,w
 10856  1334  0021               	movlb	1	; select bank1
 10857  1335  00E9               	movwf	(_inPipes^(0+128)+2)
 10858                           
 10859                           ;usb_device.c: 2212: switch(SetupPkt.bDescriptorType)
 10860  1336  2B9E               	goto	l4739
 10861  1337                     l4719:	
 10862                           ;usb_device.c: 2213: {
 10863                           ;usb_device.c: 2214: case 0x01:
 10864                           
 10865                           
 10866                           ;usb_device.c: 2218: inPipes[0].pSrc.bRom = (const BYTE*)&device_dsc;
 10867  1337  308D               	movlw	low (_device_dsc| (0+32768))
 10868  1338  0021               	movlb	1	; select bank1
 10869  1339  00E7               	movwf	_inPipes^(0+128)
 10870  133A  3088               	movlw	high (_device_dsc| (0+32768))
 10871  133B  00E8               	movwf	(_inPipes+1)^(0+128)
 10872                           
 10873                           ;usb_device.c: 2220: inPipes[0].wCount.Val = sizeof(device_dsc);
 10874  133C  3012               	movlw	18
 10875  133D  00EA               	movwf	(_inPipes^(0+128)+3)
 10876  133E  3000               	movlw	0
 10877  133F  00EB               	movwf	(_inPipes^(0+128)+4)
 10878                           
 10879                           ;usb_device.c: 2221: break;
 10880  1340  0008               	return
 10881  1341                     l4721:	
 10882                           ;usb_device.c: 2222: case 0x02:
 10883                           
 10884                           
 10885                           ;usb_device.c: 2226: inPipes[0].pSrc.bRom = *(USB_CD_Ptr+SetupPkt.bDscIndex);
 10886  1341  3004               	movlw	low (_USB_CD_Ptr| (0+32768))
 10887  1342  0084               	movwf	4
 10888  1343  3088               	movlw	high (_USB_CD_Ptr| (0+32768))
 10889  1344  0085               	movwf	5
 10890  1345  0020               	movlb	0	; select bank0
 10891  1346  0842               	movf	66,w	;volatile
 10892  1347  0784               	addwf	4,f
 10893  1348  1803               	skipnc
 10894  1349  0A85               	incf	5,f
 10895  134A  3F00               	moviw [0]fsr0
 10896  134B  0021               	movlb	1	; select bank1
 10897  134C  00E7               	movwf	_inPipes^(0+128)
 10898  134D  3088               	movlw	(high __stringtab)| (0+128)
 10899  134E  00E8               	movwf	(_inPipes+1)^(0+128)
 10900                           
 10901                           ;usb_device.c: 2232: inPipes[0].wCount.byte.LB = *(inPipes[0].pSrc.bRom+2);
 10902  134F  0868               	movf	(_inPipes+1)^(0+128),w
 10903  1350  0020               	movlb	0	; select bank0
 10904  1351  00DF               	movwf	??_USBStdGetDscHandler+1
 10905  1352  0021               	movlb	1	; select bank1
 10906  1353  0867               	movf	_inPipes^(0+128),w
 10907  1354  0020               	movlb	0	; select bank0
 10908  1355  00DE               	movwf	??_USBStdGetDscHandler
 10909  1356  3002               	movlw	2
 10910  1357  075E               	addwf	??_USBStdGetDscHandler,w
 10911  1358  0084               	movwf	4
 10912  1359  085F               	movf	??_USBStdGetDscHandler+1,w
 10913  135A  1803               	skipnc
 10914  135B  0A5F               	incf	??_USBStdGetDscHandler+1,w
 10915  135C  0085               	movwf	5
 10916  135D  0800               	movf	0,w	;code access
 10917  135E  00E0               	movwf	??_USBStdGetDscHandler+2
 10918  135F  0860               	movf	??_USBStdGetDscHandler+2,w
 10919  1360  0021               	movlb	1	; select bank1
 10920  1361  00EA               	movwf	(_inPipes^(0+128)+3)
 10921                           
 10922                           ;usb_device.c: 2233: inPipes[0].wCount.byte.HB = *(inPipes[0].pSrc.bRom+3);
 10923  1362  0868               	movf	(_inPipes+1)^(0+128),w
 10924  1363  0020               	movlb	0	; select bank0
 10925  1364  00DF               	movwf	??_USBStdGetDscHandler+1
 10926  1365  0021               	movlb	1	; select bank1
 10927  1366  0867               	movf	_inPipes^(0+128),w
 10928  1367  0020               	movlb	0	; select bank0
 10929  1368  00DE               	movwf	??_USBStdGetDscHandler
 10930  1369  3003               	movlw	3
 10931  136A  075E               	addwf	??_USBStdGetDscHandler,w
 10932  136B  0084               	movwf	4
 10933  136C  085F               	movf	??_USBStdGetDscHandler+1,w
 10934  136D  1803               	skipnc
 10935  136E  0A5F               	incf	??_USBStdGetDscHandler+1,w
 10936  136F  0085               	movwf	5
 10937  1370  0800               	movf	0,w	;code access
 10938  1371  00E0               	movwf	??_USBStdGetDscHandler+2
 10939  1372  0860               	movf	??_USBStdGetDscHandler+2,w
 10940  1373  0021               	movlb	1	; select bank1
 10941  1374  00EB               	movwf	(_inPipes^(0+128)+4)
 10942                           
 10943                           ;usb_device.c: 2234: break;
 10944  1375  0008               	return
 10945  1376                     l4727:	
 10946                           ;usb_device.c: 2235: case 0x03:
 10947                           
 10948                           
 10949                           ;usb_device.c: 2239: if(SetupPkt.bDscIndex<3)
 10950  1376  3003               	movlw	3
 10951  1377  0020               	movlb	0	; select bank0
 10952  1378  0242               	subwf	66,w	;volatile
 10953  1379  1803               	skipnc
 10954  137A  2B98               	goto	l4733
 10955                           
 10956                           ;usb_device.c: 2240: {
 10957                           ;usb_device.c: 2242: inPipes[0].pSrc.bRom = *(USB_SD_Ptr+SetupPkt.bDscIndex);
 10958  137B  3001               	movlw	low (_USB_SD_Ptr| (0+32768))
 10959  137C  0084               	movwf	4
 10960  137D  3088               	movlw	high (_USB_SD_Ptr| (0+32768))
 10961  137E  0085               	movwf	5
 10962  137F  0842               	movf	66,w	;volatile
 10963  1380  0784               	addwf	4,f
 10964  1381  1803               	skipnc
 10965  1382  0A85               	incf	5,f
 10966  1383  3F00               	moviw [0]fsr0
 10967  1384  0021               	movlb	1	; select bank1
 10968  1385  00E7               	movwf	_inPipes^(0+128)
 10969  1386  3088               	movlw	(high __stringtab)| (0+128)
 10970  1387  00E8               	movwf	(_inPipes+1)^(0+128)
 10971                           
 10972                           ;usb_device.c: 2244: inPipes[0].wCount.Val = *inPipes[0].pSrc.bRom;
 10973  1388  0867               	movf	_inPipes^(0+128),w
 10974  1389  0084               	movwf	4
 10975  138A  0868               	movf	(_inPipes+1)^(0+128),w
 10976  138B  0085               	movwf	5
 10977  138C  0800               	movf	0,w	;code access
 10978  138D  0020               	movlb	0	; select bank0
 10979  138E  00DE               	movwf	??_USBStdGetDscHandler
 10980  138F  01DF               	clrf	??_USBStdGetDscHandler+1
 10981  1390  085E               	movf	??_USBStdGetDscHandler,w
 10982  1391  0021               	movlb	1	; select bank1
 10983  1392  00EA               	movwf	(_inPipes^(0+128)+3)
 10984  1393  0020               	movlb	0	; select bank0
 10985  1394  085F               	movf	??_USBStdGetDscHandler+1,w
 10986  1395  0021               	movlb	1	; select bank1
 10987  1396  00EB               	movwf	((_inPipes+1)^(0+128)+3)
 10988                           
 10989                           ;usb_device.c: 2245: }
 10990  1397  0008               	return
 10991  1398                     l4733:	
 10992                           
 10993                           ;usb_device.c: 2255: else
 10994                           ;usb_device.c: 2256: {
 10995                           ;usb_device.c: 2257: inPipes[0].info.Val = 0;
 10996  1398  0021               	movlb	1	; select bank1
 10997  1399  01E9               	clrf	(_inPipes^(0+128)+2)
 10998                           
 10999                           ;usb_device.c: 2258: }
 11000                           ;usb_device.c: 2259: break;
 11001  139A  0008               	return
 11002  139B                     l4735:	
 11003                           ;usb_device.c: 2260: default:
 11004                           
 11005                           
 11006                           ;usb_device.c: 2261: inPipes[0].info.Val = 0;
 11007  139B  0021               	movlb	1	; select bank1
 11008  139C  01E9               	clrf	(_inPipes^(0+128)+2)
 11009                           
 11010                           ;usb_device.c: 2263: }
 11011                           
 11012                           ;usb_device.c: 2262: break;
 11013  139D  0008               	return
 11014  139E                     l4739:	
 11015  139E  0020               	movlb	0	; select bank0
 11016  139F  0843               	movf	67,w	;volatile
 11017                           
 11018                           ; Switch size 1, requested type "space"
 11019                           ; Number of cases is 3, Range of values is 1 to 3
 11020                           ; switch strategies available:
 11021                           ; Name         Instructions Cycles
 11022                           ; simple_byte           10     6 (average)
 11023                           ; direct_byte           15     9 (fixed)
 11024                           ; jumptable            263     9 (fixed)
 11025                           ;	Chosen strategy is simple_byte
 11026  13A0  3A01               	xorlw	1	; case 1
 11027  13A1  1903               	skipnz
 11028  13A2  2B37               	goto	l4719
 11029  13A3  3A03               	xorlw	3	; case 2
 11030  13A4  1903               	skipnz
 11031  13A5  2B41               	goto	l4721
 11032  13A6  3A01               	xorlw	1	; case 3
 11033  13A7  1903               	skipnz
 11034  13A8  2B76               	goto	l4727
 11035  13A9  2B9B               	goto	l4735
 11036  13AA  0008               	return
 11037  13AB                     __end_of_USBStdGetDscHandler:	
 11038                           
 11039                           	psect	text38
 11040  13AB                     __ptext38:	
 11041 ;; *************** function _USBStdSetCfgHandler *****************
 11042 ;; Defined at:
 11043 ;;		line 2132 in file "../USB/usb_device.c"
 11044 ;; Parameters:    Size  Location     Type
 11045 ;;		None
 11046 ;; Auto vars:     Size  Location     Type
 11047 ;;  p               2   18[BANK1 ] PTR unsigned char 
 11048 ;;		 -> UEP1(1), 
 11049 ;;  i               1   20[BANK1 ] unsigned char 
 11050 ;;  i               1   21[BANK1 ] unsigned char 
 11051 ;; Return value:  Size  Location     Type
 11052 ;;		None               void
 11053 ;; Registers used:
 11054 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11055 ;; Tracked objects:
 11056 ;;		On entry : 0/0
 11057 ;;		On exit  : 0/0
 11058 ;;		Unchanged: 0/0
 11059 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11060 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11061 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
 11062 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 11063 ;;      Totals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
 11064 ;;Total ram usage:        5 bytes
 11065 ;; Hardware stack levels used:    1
 11066 ;; Hardware stack levels required when called:    8
 11067 ;; This function calls:
 11068 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 11069 ;;		_memset
 11070 ;; This function is called by:
 11071 ;;		_USBCheckStdRequest
 11072 ;; This function uses a non-reentrant model
 11073 ;;
 11074                           
 11075                           
 11076                           ;psect for function _USBStdSetCfgHandler
 11077  13AB                     _USBStdSetCfgHandler:	
 11078                           
 11079                           ;usb_device.c: 2133: BYTE i;
 11080                           ;usb_device.c: 2136: inPipes[0].info.bits.busy = 1;
 11081                           
 11082                           ;incstack = 0
 11083                           ; Regs used in _USBStdSetCfgHandler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11084  13AB  0021               	movlb	1	; select bank1
 11085  13AC  17E9               	bsf	(_inPipes^(0+128)+2),7
 11086                           
 11087                           ;usb_device.c: 2139: { BYTE i; BYTE* p = (BYTE*)&UEP1; for(i=0;i<1;i++) *p++ = 0; };
 11088  13AD  300E               	movlw	14
 11089  13AE  00B3               	movwf	(USBStdSetCfgHandler@p+1)^(0+128)
 11090  13AF  3099               	movlw	153
 11091  13B0  00B2               	movwf	USBStdSetCfgHandler@p^(0+128)
 11092  13B1  01B4               	clrf	USBStdSetCfgHandler@i_1089^(0+128)
 11093  13B2  0834               	movf	USBStdSetCfgHandler@i_1089^(0+128),w
 11094  13B3  1D03               	skipz
 11095  13B4  2BC5               	goto	l6425
 11096  13B5                     l6417:	
 11097  13B5  0832               	movf	USBStdSetCfgHandler@p^(0+128),w
 11098  13B6  0086               	movwf	6
 11099  13B7  0833               	movf	(USBStdSetCfgHandler@p+1)^(0+128),w
 11100  13B8  0087               	movwf	7
 11101  13B9  0181               	clrf	1
 11102  13BA  3001               	movlw	1
 11103  13BB  07B2               	addwf	USBStdSetCfgHandler@p^(0+128),f
 11104  13BC  3000               	movlw	0
 11105  13BD  3DB3               	addwfc	(USBStdSetCfgHandler@p+1)^(0+128),f
 11106  13BE  3001               	movlw	1
 11107  13BF  00B1               	movwf	??_USBStdSetCfgHandler^(0+128)
 11108  13C0  0831               	movf	??_USBStdSetCfgHandler^(0+128),w
 11109  13C1  07B4               	addwf	USBStdSetCfgHandler@i_1089^(0+128),f
 11110  13C2  0834               	movf	USBStdSetCfgHandler@i_1089^(0+128),w
 11111  13C3  1903               	btfsc	3,2
 11112  13C4  2BB5               	goto	l6417
 11113  13C5                     l6425:	
 11114                           
 11115                           ;usb_device.c: 2142: memset((void*)&BDT[0], 0x00, sizeof(BDT));
 11116  13C5  3000               	movlw	0
 11117  13C6  0020               	movlb	0	; select bank0
 11118  13C7  00DE               	movwf	?_memset
 11119  13C8  3000               	movlw	0
 11120  13C9  00DF               	movwf	?_memset+1
 11121  13CA  3020               	movlw	32
 11122  13CB  00E0               	movwf	?_memset+2
 11123  13CC  3000               	movlw	0
 11124  13CD  00E1               	movwf	?_memset+3
 11125  13CE  3020               	movlw	32
 11126  13CF  319C  24CC  3193   	fcall	_memset
 11127                           
 11128                           ;usb_device.c: 2145: UCONbits.PPBRST = 1;
 11129  13D2  003D               	movlb	29	; select bank29
 11130  13D3  170E               	bsf	14,6	;volatile
 11131                           
 11132                           ;usb_device.c: 2150: for(i = 0; i < (BYTE)(1+1u); i++)
 11133  13D4  0021               	movlb	1	; select bank1
 11134  13D5  01B5               	clrf	USBStdSetCfgHandler@i^(0+128)
 11135  13D6  3002               	movlw	2
 11136  13D7  0235               	subwf	USBStdSetCfgHandler@i^(0+128),w
 11137  13D8  1803               	btfsc	3,0
 11138  13D9  2BEE               	goto	l6441
 11139  13DA                     l6435:	
 11140                           
 11141                           ;usb_device.c: 2151: {
 11142                           ;usb_device.c: 2152: ep_data_in[i].Val = 0u;
 11143  13DA  0835               	movf	USBStdSetCfgHandler@i^(0+128),w
 11144  13DB  3ED1               	addlw	_ep_data_in& (0+255)
 11145  13DC  0086               	movwf	6
 11146  13DD  3001               	movlw	1	; select bank3/4
 11147  13DE  0087               	movwf	7
 11148  13DF  0181               	clrf	1
 11149                           
 11150                           ;usb_device.c: 2153: ep_data_out[i].Val = 0u;
 11151  13E0  0835               	movf	USBStdSetCfgHandler@i^(0+128),w
 11152  13E1  3ED3               	addlw	_ep_data_out& (0+255)
 11153  13E2  0086               	movwf	6
 11154  13E3  3001               	movlw	1	; select bank3/4
 11155  13E4  0087               	movwf	7
 11156  13E5  0181               	clrf	1
 11157  13E6  3001               	movlw	1
 11158  13E7  00B1               	movwf	??_USBStdSetCfgHandler^(0+128)
 11159  13E8  0831               	movf	??_USBStdSetCfgHandler^(0+128),w
 11160  13E9  07B5               	addwf	USBStdSetCfgHandler@i^(0+128),f
 11161  13EA  3002               	movlw	2
 11162  13EB  0235               	subwf	USBStdSetCfgHandler@i^(0+128),w
 11163  13EC  1C03               	skipc
 11164  13ED  2BDA               	goto	l6435
 11165  13EE                     l6441:	
 11166                           
 11167                           ;usb_device.c: 2154: }
 11168                           ;usb_device.c: 2157: memset((void*)&USBAlternateInterface,0x00,1);
 11169  13EE  3000               	movlw	0
 11170  13EF  0020               	movlb	0	; select bank0
 11171  13F0  00DE               	movwf	?_memset
 11172  13F1  3000               	movlw	0
 11173  13F2  00DF               	movwf	?_memset+1
 11174  13F3  3001               	movlw	1
 11175  13F4  00E0               	movwf	?_memset+2
 11176  13F5  3000               	movlw	0
 11177  13F6  00E1               	movwf	?_memset+3
 11178  13F7  30ED               	movlw	_USBAlternateInterface& (0+255)
 11179  13F8  319C  24CC  3193   	fcall	_memset
 11180                           
 11181                           ;usb_device.c: 2160: UCONbits.PPBRST = 0;
 11182  13FB  003D               	movlb	29	; select bank29
 11183  13FC  130E               	bcf	14,6	;volatile
 11184                           
 11185                           ;usb_device.c: 2162: pBDTEntryIn[0] = (volatile BDT_ENTRY*)&BDT[2];
 11186  13FD  3028               	movlw	40
 11187  13FE  0021               	movlb	1	; select bank1
 11188  13FF  00B1               	movwf	??_USBStdSetCfgHandler^(0+128)
 11189  1400  0831               	movf	??_USBStdSetCfgHandler^(0+128),w
 11190  1401  00E0               	movwf	_pBDTEntryIn^(0+128)
 11191                           
 11192                           ;usb_device.c: 2165: pBDTEntryEP0OutCurrent = (volatile BDT_ENTRY*)&BDT[0];
 11193  1402  3020               	movlw	32
 11194  1403  00B1               	movwf	??_USBStdSetCfgHandler^(0+128)
 11195  1404  0831               	movf	??_USBStdSetCfgHandler^(0+128),w
 11196  1405  00E6               	movwf	_pBDTEntryEP0OutCurrent^(0+128)
 11197                           
 11198                           ;usb_device.c: 2166: pBDTEntryEP0OutNext = pBDTEntryEP0OutCurrent;
 11199  1406  0866               	movf	_pBDTEntryEP0OutCurrent^(0+128),w
 11200  1407  00B1               	movwf	??_USBStdSetCfgHandler^(0+128)
 11201  1408  0831               	movf	??_USBStdSetCfgHandler^(0+128),w
 11202  1409  0020               	movlb	0	; select bank0
 11203  140A  00EA               	movwf	_pBDTEntryEP0OutNext
 11204                           
 11205                           ;usb_device.c: 2169: USBActiveConfiguration = SetupPkt.bConfigurationValue;
 11206  140B  0842               	movf	66,w	;volatile
 11207  140C  0021               	movlb	1	; select bank1
 11208  140D  00B1               	movwf	??_USBStdSetCfgHandler^(0+128)
 11209  140E  0831               	movf	??_USBStdSetCfgHandler^(0+128),w
 11210  140F  00EC               	movwf	_USBActiveConfiguration^(0+128)
 11211                           
 11212                           ;usb_device.c: 2172: if(USBActiveConfiguration == 0)
 11213  1410  08EC               	movf	_USBActiveConfiguration^(0+128),f
 11214  1411  1D03               	skipz
 11215  1412  2C18               	goto	l6457
 11216                           
 11217                           ;usb_device.c: 2173: {
 11218                           ;usb_device.c: 2175: USBDeviceState = ADDRESS_STATE;
 11219  1413  3010               	movlw	16
 11220  1414  00B1               	movwf	??_USBStdSetCfgHandler^(0+128)
 11221  1415  0831               	movf	??_USBStdSetCfgHandler^(0+128),w
 11222  1416  00E3               	movwf	_USBDeviceState^(0+128)
 11223                           
 11224                           ;usb_device.c: 2176: }
 11225  1417  0008               	return
 11226  1418                     l6457:	
 11227                           
 11228                           ;usb_device.c: 2177: else
 11229                           ;usb_device.c: 2178: {
 11230                           ;usb_device.c: 2180: USER_USB_CALLBACK_EVENT_HANDLER(EVENT_CONFIGURED,(void*)&USBActiveC
      +                          onfiguration,1);
 11231  1418  3001               	movlw	1
 11232  1419  00AC               	movwf	?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)
 11233  141A  3000               	movlw	0
 11234  141B  00AD               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)+1)
 11235  141C  30EC               	movlw	_USBActiveConfiguration& (0+255)
 11236  141D  00B1               	movwf	??_USBStdSetCfgHandler^(0+128)
 11237  141E  0831               	movf	??_USBStdSetCfgHandler^(0+128),w
 11238  141F  00AE               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER+2)^(0+128)
 11239  1420  3001               	movlw	1
 11240  1421  00AF               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)+3)
 11241  1422  3000               	movlw	0
 11242  1423  00B0               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)+4)
 11243  1424  319D  25F4         	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
 11244                           
 11245                           ;usb_device.c: 2185: USBDeviceState = CONFIGURED_STATE;
 11246  1426  3020               	movlw	32
 11247  1427  0021               	movlb	1	; select bank1
 11248  1428  00B1               	movwf	??_USBStdSetCfgHandler^(0+128)
 11249  1429  0831               	movf	??_USBStdSetCfgHandler^(0+128),w
 11250  142A  00E3               	movwf	_USBDeviceState^(0+128)
 11251  142B  0008               	return
 11252  142C                     __end_of_USBStdSetCfgHandler:	
 11253                           
 11254                           	psect	text39
 11255  1CCC                     __ptext39:	
 11256 ;; *************** function _memset *****************
 11257 ;; Defined at:
 11258 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.20\sources\common\memset.c"
 11259 ;; Parameters:    Size  Location     Type
 11260 ;;  p1              1    wreg     PTR void 
 11261 ;;		 -> USBAlternateInterface(1), BDT(32), 
 11262 ;;  c               2   14[BANK0 ] int 
 11263 ;;  n               2   16[BANK0 ] unsigned int 
 11264 ;; Auto vars:     Size  Location     Type
 11265 ;;  p1              1    1[BANK1 ] PTR void 
 11266 ;;		 -> USBAlternateInterface(1), BDT(32), 
 11267 ;;  p               1    2[BANK1 ] PTR unsigned char 
 11268 ;;		 -> USBAlternateInterface(1), BDT(32), 
 11269 ;; Return value:  Size  Location     Type
 11270 ;;                  1    wreg      PTR void 
 11271 ;; Registers used:
 11272 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11273 ;; Tracked objects:
 11274 ;;		On entry : 0/0
 11275 ;;		On exit  : 0/0
 11276 ;;		Unchanged: 0/0
 11277 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11278 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11279 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
 11280 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 11281 ;;      Totals:         0       4       3       0       0       0       0       0       0       0       0       0       
      +0       0
 11282 ;;Total ram usage:        7 bytes
 11283 ;; Hardware stack levels used:    1
 11284 ;; Hardware stack levels required when called:    4
 11285 ;; This function calls:
 11286 ;;		Nothing
 11287 ;; This function is called by:
 11288 ;;		_USBStdSetCfgHandler
 11289 ;; This function uses a non-reentrant model
 11290 ;;
 11291                           
 11292                           
 11293                           ;psect for function _memset
 11294  1CCC                     _memset:	
 11295                           
 11296                           ;incstack = 0
 11297                           ; Regs used in _memset: [wreg+fsr1l+fsr1h+status,2+status,0]
 11298                           ;memset@p1 stored from wreg
 11299  1CCC  0021               	movlb	1	; select bank1
 11300  1CCD  00A1               	movwf	memset@p1^(0+128)
 11301  1CCE  0821               	movf	memset@p1^(0+128),w
 11302  1CCF  00A0               	movwf	??_memset^(0+128)
 11303  1CD0  0820               	movf	??_memset^(0+128),w
 11304  1CD1  00A2               	movwf	memset@p^(0+128)
 11305  1CD2                     l4713:	
 11306  1CD2  3001               	movlw	1
 11307  1CD3  0020               	movlb	0	; select bank0
 11308  1CD4  02E0               	subwf	memset@n,f
 11309  1CD5  3000               	movlw	0
 11310  1CD6  3BE1               	subwfb	memset@n+1,f
 11311  1CD7  30FF               	movlw	255
 11312  1CD8  0661               	xorwf	memset@n+1,w
 11313  1CD9  1D03               	skipz
 11314  1CDA  2CDD               	goto	u4205
 11315  1CDB  30FF               	movlw	255
 11316  1CDC  0660               	xorwf	memset@n,w
 11317  1CDD                     u4205:	
 11318  1CDD  1903               	btfsc	3,2
 11319  1CDE  0008               	return
 11320  1CDF  0020               	movlb	0	; select bank0
 11321  1CE0  085E               	movf	memset@c,w
 11322  1CE1  0021               	movlb	1	; select bank1
 11323  1CE2  00A0               	movwf	??_memset^(0+128)
 11324  1CE3  0822               	movf	memset@p^(0+128),w
 11325  1CE4  0086               	movwf	6
 11326  1CE5  0187               	clrf	7
 11327  1CE6  0820               	movf	??_memset^(0+128),w
 11328  1CE7  0081               	movwf	1
 11329  1CE8  3001               	movlw	1
 11330  1CE9  00A0               	movwf	??_memset^(0+128)
 11331  1CEA  0820               	movf	??_memset^(0+128),w
 11332  1CEB  07A2               	addwf	memset@p^(0+128),f
 11333  1CEC  2CD2               	goto	l4713
 11334  1CED                     __end_of_memset:	
 11335                           ;	Return value of _memset is never used
 11336                           
 11337                           
 11338                           	psect	text40
 11339  15B9                     __ptext40:	
 11340 ;; *************** function _USBCtrlEPServiceComplete *****************
 11341 ;; Defined at:
 11342 ;;		line 1786 in file "../USB/usb_device.c"
 11343 ;; Parameters:    Size  Location     Type
 11344 ;;		None
 11345 ;; Auto vars:     Size  Location     Type
 11346 ;;		None
 11347 ;; Return value:  Size  Location     Type
 11348 ;;		None               void
 11349 ;; Registers used:
 11350 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11351 ;; Tracked objects:
 11352 ;;		On entry : 0/0
 11353 ;;		On exit  : 0/0
 11354 ;;		Unchanged: 0/0
 11355 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11356 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11357 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11358 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
 11359 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
 11360 ;;Total ram usage:        2 bytes
 11361 ;; Hardware stack levels used:    1
 11362 ;; Hardware stack levels required when called:    6
 11363 ;; This function calls:
 11364 ;;		_USBCtrlEPAllowStatusStage
 11365 ;;		_USBCtrlEPAllowDataStage
 11366 ;; This function is called by:
 11367 ;;		_USBCtrlTrfSetupHandler
 11368 ;; This function uses a non-reentrant model
 11369 ;;
 11370                           
 11371                           
 11372                           ;psect for function _USBCtrlEPServiceComplete
 11373  15B9                     _USBCtrlEPServiceComplete:	
 11374                           
 11375                           ;usb_device.c: 1791: UCONbits.PKTDIS = 0;
 11376                           
 11377                           ;incstack = 0
 11378                           ; Regs used in _USBCtrlEPServiceComplete: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11379  15B9  003D               	movlb	29	; select bank29
 11380  15BA  120E               	bcf	14,4	;volatile
 11381                           
 11382                           ;usb_device.c: 1797: if(inPipes[0].info.bits.busy == 0)
 11383  15BB  0021               	movlb	1	; select bank1
 11384  15BC  1BE9               	btfsc	(_inPipes^(0+128)+2),7
 11385  15BD  2DFA               	goto	l208
 11386                           
 11387                           ;usb_device.c: 1798: {
 11388                           ;usb_device.c: 1799: if(outPipes[0].info.bits.busy == 1)
 11389  15BE  0023               	movlb	3	; select bank3
 11390  15BF  1FC9               	btfss	(_outPipes^(0+384)+2),7
 11391  15C0  2DD1               	goto	l4585
 11392                           
 11393                           ;usb_device.c: 1800: {
 11394                           ;usb_device.c: 1801: controlTransferState = 2;
 11395  15C1  3002               	movlw	2
 11396  15C2  0021               	movlb	1	; select bank1
 11397  15C3  00A2               	movwf	??_USBCtrlEPServiceComplete^(0+128)
 11398  15C4  0822               	movf	??_USBCtrlEPServiceComplete^(0+128),w
 11399  15C5  0020               	movlb	0	; select bank0
 11400  15C6  00E9               	movwf	_controlTransferState
 11401                           
 11402                           ;usb_device.c: 1812: if(USBDeferOUTDataStagePackets == FALSE)
 11403  15C7  0022               	movlb	2	; select bank2
 11404  15C8  08E7               	movf	_USBDeferOUTDataStagePackets^(0+256),f
 11405  15C9  1D03               	skipz
 11406  15CA  2DCD               	goto	l4581
 11407                           
 11408                           ;usb_device.c: 1813: {
 11409                           ;usb_device.c: 1814: USBCtrlEPAllowDataStage();
 11410  15CB  319F  27A9         	fcall	_USBCtrlEPAllowDataStage
 11411  15CD                     l4581:	
 11412                           
 11413                           ;usb_device.c: 1815: }
 11414                           ;usb_device.c: 1819: USBStatusStageEnabledFlag2 = FALSE;
 11415  15CD  0022               	movlb	2	; select bank2
 11416  15CE  01EB               	clrf	_USBStatusStageEnabledFlag2^(0+256)	;volatile
 11417                           
 11418                           ;usb_device.c: 1820: USBStatusStageEnabledFlag1 = FALSE;
 11419  15CF  01EA               	clrf	_USBStatusStageEnabledFlag1^(0+256)	;volatile
 11420                           
 11421                           ;usb_device.c: 1821: }
 11422  15D0  0008               	return
 11423  15D1                     l4585:	
 11424                           
 11425                           ;usb_device.c: 1822: else
 11426                           ;usb_device.c: 1823: {
 11427                           ;usb_device.c: 1828: pBDTEntryEP0OutNext->CNT = 8;
 11428  15D1  3008               	movlw	8
 11429  15D2  0021               	movlb	1	; select bank1
 11430  15D3  00A2               	movwf	??_USBCtrlEPServiceComplete^(0+128)
 11431  15D4  0020               	movlb	0	; select bank0
 11432  15D5  0A6A               	incf	_pBDTEntryEP0OutNext,w
 11433  15D6  0086               	movwf	6
 11434  15D7  0187               	clrf	7
 11435  15D8  0021               	movlb	1	; select bank1
 11436  15D9  0822               	movf	??_USBCtrlEPServiceComplete^(0+128),w
 11437  15DA  0081               	movwf	1
 11438                           
 11439                           ;usb_device.c: 1829: pBDTEntryEP0OutNext->ADR = (((WORD)(&SetupPkt))& 0x7FFF);
 11440  15DB  3040               	movlw	64
 11441  15DC  00A2               	movwf	??_USBCtrlEPServiceComplete^(0+128)
 11442  15DD  3000               	movlw	0
 11443  15DE  00A3               	movwf	(??_USBCtrlEPServiceComplete^(0+128)+1)
 11444  15DF  0020               	movlb	0	; select bank0
 11445  15E0  086A               	movf	_pBDTEntryEP0OutNext,w
 11446  15E1  3E02               	addlw	2
 11447  15E2  0086               	movwf	6
 11448  15E3  0187               	clrf	7
 11449  15E4  0021               	movlb	1	; select bank1
 11450  15E5  0822               	movf	??_USBCtrlEPServiceComplete^(0+128),w
 11451  15E6  3FC0               	movwi [0]fsr1
 11452  15E7  0823               	movf	(??_USBCtrlEPServiceComplete+1)^(0+128),w
 11453  15E8  3FC1               	movwi [1]fsr1
 11454                           
 11455                           ;usb_device.c: 1830: pBDTEntryEP0OutNext->STAT.Val = 0x80|0x00|(0x08 & 0x08)|0x04;
 11456  15E9  308C               	movlw	140
 11457  15EA  00A2               	movwf	??_USBCtrlEPServiceComplete^(0+128)
 11458  15EB  0020               	movlb	0	; select bank0
 11459  15EC  086A               	movf	_pBDTEntryEP0OutNext,w
 11460  15ED  0086               	movwf	6
 11461  15EE  0187               	clrf	7
 11462  15EF  0021               	movlb	1	; select bank1
 11463  15F0  0822               	movf	??_USBCtrlEPServiceComplete^(0+128),w
 11464  15F1  0081               	movwf	1
 11465                           
 11466                           ;usb_device.c: 1831: pBDTEntryIn[0]->STAT.Val = 0x80|0x04;
 11467  15F2  3084               	movlw	132
 11468  15F3  00A2               	movwf	??_USBCtrlEPServiceComplete^(0+128)
 11469  15F4  0860               	movf	_pBDTEntryIn^(0+128),w
 11470  15F5  0086               	movwf	6
 11471  15F6  0187               	clrf	7
 11472  15F7  0822               	movf	??_USBCtrlEPServiceComplete^(0+128),w
 11473  15F8  0081               	movwf	1
 11474                           
 11475                           ;usb_device.c: 1832: }
 11476                           ;usb_device.c: 1833: }
 11477  15F9  0008               	return
 11478  15FA                     l208:	
 11479                           
 11480                           ;usb_device.c: 1834: else
 11481                           ;usb_device.c: 1835: {
 11482                           ;usb_device.c: 1836: if(SetupPkt.DataDir == (0x80>>7))
 11483  15FA  0020               	movlb	0	; select bank0
 11484  15FB  1FC0               	btfss	64,7	;volatile
 11485  15FC  2E10               	goto	l4601
 11486                           
 11487                           ;usb_device.c: 1837: {
 11488                           ;usb_device.c: 1838: controlTransferState = 1;
 11489  15FD  01E9               	clrf	_controlTransferState
 11490  15FE  0AE9               	incf	_controlTransferState,f
 11491                           
 11492                           ;usb_device.c: 1852: if(USBDeferINDataStagePackets == FALSE)
 11493  15FF  0022               	movlb	2	; select bank2
 11494  1600  08E6               	movf	_USBDeferINDataStagePackets^(0+256),f
 11495  1601  1D03               	skipz
 11496  1602  2E06               	goto	l4593
 11497                           
 11498                           ;usb_device.c: 1853: {
 11499                           ;usb_device.c: 1854: USBCtrlEPAllowDataStage();
 11500  1603  319F  27A9  3195   	fcall	_USBCtrlEPAllowDataStage
 11501  1606                     l4593:	
 11502                           
 11503                           ;usb_device.c: 1855: }
 11504                           ;usb_device.c: 1877: USBStatusStageEnabledFlag2 = FALSE;
 11505  1606  0022               	movlb	2	; select bank2
 11506  1607  01EB               	clrf	_USBStatusStageEnabledFlag2^(0+256)	;volatile
 11507                           
 11508                           ;usb_device.c: 1878: USBStatusStageEnabledFlag1 = FALSE;
 11509  1608  01EA               	clrf	_USBStatusStageEnabledFlag1^(0+256)	;volatile
 11510                           
 11511                           ;usb_device.c: 1879: if(USBDeferStatusStagePacket == FALSE)
 11512  1609  0020               	movlb	0	; select bank0
 11513  160A  08E8               	movf	_USBDeferStatusStagePacket,f
 11514  160B  1D03               	skipz
 11515  160C  0008               	return
 11516                           
 11517                           ;usb_device.c: 1880: {
 11518                           ;usb_device.c: 1881: USBCtrlEPAllowStatusStage();
 11519  160D  3191  21D3         	fcall	_USBCtrlEPAllowStatusStage
 11520                           
 11521                           ;usb_device.c: 1882: }
 11522                           ;usb_device.c: 1883: }
 11523  160F  0008               	return
 11524  1610                     l4601:	
 11525                           
 11526                           ;usb_device.c: 1884: else
 11527                           ;usb_device.c: 1885: {
 11528                           ;usb_device.c: 1896: controlTransferState = 2;
 11529  1610  3002               	movlw	2
 11530  1611  0021               	movlb	1	; select bank1
 11531  1612  00A2               	movwf	??_USBCtrlEPServiceComplete^(0+128)
 11532  1613  0822               	movf	??_USBCtrlEPServiceComplete^(0+128),w
 11533  1614  0020               	movlb	0	; select bank0
 11534  1615  00E9               	movwf	_controlTransferState
 11535                           
 11536                           ;usb_device.c: 1899: pBDTEntryEP0OutNext->CNT = 8;
 11537  1616  3008               	movlw	8
 11538  1617  0021               	movlb	1	; select bank1
 11539  1618  00A2               	movwf	??_USBCtrlEPServiceComplete^(0+128)
 11540  1619  0020               	movlb	0	; select bank0
 11541  161A  0A6A               	incf	_pBDTEntryEP0OutNext,w
 11542  161B  0086               	movwf	6
 11543  161C  0187               	clrf	7
 11544  161D  0021               	movlb	1	; select bank1
 11545  161E  0822               	movf	??_USBCtrlEPServiceComplete^(0+128),w
 11546  161F  0081               	movwf	1
 11547                           
 11548                           ;usb_device.c: 1900: pBDTEntryEP0OutNext->ADR = (((WORD)(&SetupPkt))& 0x7FFF);
 11549  1620  3040               	movlw	64
 11550  1621  00A2               	movwf	??_USBCtrlEPServiceComplete^(0+128)
 11551  1622  3000               	movlw	0
 11552  1623  00A3               	movwf	(??_USBCtrlEPServiceComplete^(0+128)+1)
 11553  1624  0020               	movlb	0	; select bank0
 11554  1625  086A               	movf	_pBDTEntryEP0OutNext,w
 11555  1626  3E02               	addlw	2
 11556  1627  0086               	movwf	6
 11557  1628  0187               	clrf	7
 11558  1629  0021               	movlb	1	; select bank1
 11559  162A  0822               	movf	??_USBCtrlEPServiceComplete^(0+128),w
 11560  162B  3FC0               	movwi [0]fsr1
 11561  162C  0823               	movf	(??_USBCtrlEPServiceComplete+1)^(0+128),w
 11562  162D  3FC1               	movwi [1]fsr1
 11563                           
 11564                           ;usb_device.c: 1901: pBDTEntryEP0OutNext->STAT.Val = 0x80|0x04;
 11565  162E  3084               	movlw	132
 11566  162F  00A2               	movwf	??_USBCtrlEPServiceComplete^(0+128)
 11567  1630  0020               	movlb	0	; select bank0
 11568  1631  086A               	movf	_pBDTEntryEP0OutNext,w
 11569  1632  0086               	movwf	6
 11570  1633  0187               	clrf	7
 11571  1634  0021               	movlb	1	; select bank1
 11572  1635  0822               	movf	??_USBCtrlEPServiceComplete^(0+128),w
 11573  1636  0081               	movwf	1
 11574                           
 11575                           ;usb_device.c: 1904: USBStatusStageEnabledFlag2 = FALSE;
 11576  1637  0022               	movlb	2	; select bank2
 11577  1638  01EB               	clrf	_USBStatusStageEnabledFlag2^(0+256)	;volatile
 11578                           
 11579                           ;usb_device.c: 1905: USBStatusStageEnabledFlag1 = FALSE;
 11580  1639  01EA               	clrf	_USBStatusStageEnabledFlag1^(0+256)	;volatile
 11581                           
 11582                           ;usb_device.c: 1906: if(USBDeferStatusStagePacket == FALSE)
 11583  163A  0020               	movlb	0	; select bank0
 11584  163B  08E8               	movf	_USBDeferStatusStagePacket,f
 11585  163C  1D03               	skipz
 11586  163D  0008               	return
 11587                           
 11588                           ;usb_device.c: 1907: {
 11589                           ;usb_device.c: 1908: USBCtrlEPAllowStatusStage();
 11590  163E  3191  21D3         	fcall	_USBCtrlEPAllowStatusStage
 11591  1640  0008               	return
 11592  1641                     __end_of_USBCtrlEPServiceComplete:	
 11593                           
 11594                           	psect	text41
 11595  1FA9                     __ptext41:	
 11596 ;; *************** function _USBCtrlEPAllowDataStage *****************
 11597 ;; Defined at:
 11598 ;;		line 1660 in file "../USB/usb_device.c"
 11599 ;; Parameters:    Size  Location     Type
 11600 ;;		None
 11601 ;; Auto vars:     Size  Location     Type
 11602 ;;		None
 11603 ;; Return value:  Size  Location     Type
 11604 ;;		None               void
 11605 ;; Registers used:
 11606 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11607 ;; Tracked objects:
 11608 ;;		On entry : 0/0
 11609 ;;		On exit  : 0/0
 11610 ;;		Unchanged: 0/0
 11611 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11612 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11613 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11614 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
 11615 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
 11616 ;;Total ram usage:        2 bytes
 11617 ;; Hardware stack levels used:    1
 11618 ;; Hardware stack levels required when called:    5
 11619 ;; This function calls:
 11620 ;;		_USBCtrlTrfTxService
 11621 ;; This function is called by:
 11622 ;;		_USBCtrlEPServiceComplete
 11623 ;; This function uses a non-reentrant model
 11624 ;;
 11625                           
 11626                           
 11627                           ;psect for function _USBCtrlEPAllowDataStage
 11628  1FA9                     _USBCtrlEPAllowDataStage:	
 11629                           
 11630                           ;usb_device.c: 1661: USBDeferINDataStagePackets = FALSE;
 11631                           
 11632                           ;incstack = 0
 11633                           ; Regs used in _USBCtrlEPAllowDataStage: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11634  1FA9  0022               	movlb	2	; select bank2
 11635  1FAA  01E6               	clrf	_USBDeferINDataStagePackets^(0+256)	;volatile
 11636                           
 11637                           ;usb_device.c: 1662: USBDeferOUTDataStagePackets = FALSE;
 11638  1FAB  01E7               	clrf	_USBDeferOUTDataStagePackets^(0+256)	;volatile
 11639                           
 11640                           ;usb_device.c: 1664: if(controlTransferState == 2)
 11641  1FAC  0020               	movlb	0	; select bank0
 11642  1FAD  0869               	movf	_controlTransferState,w
 11643  1FAE  3A02               	xorlw	2
 11644  1FAF  1D03               	skipz
 11645  1FB0  2FD3               	goto	l4519
 11646                           
 11647                           ;usb_device.c: 1665: {
 11648                           ;usb_device.c: 1667: pBDTEntryEP0OutNext->CNT = 8;
 11649  1FB1  3008               	movlw	8
 11650  1FB2  0021               	movlb	1	; select bank1
 11651  1FB3  00A0               	movwf	??_USBCtrlEPAllowDataStage^(0+128)
 11652  1FB4  0020               	movlb	0	; select bank0
 11653  1FB5  0A6A               	incf	_pBDTEntryEP0OutNext,w
 11654  1FB6  0086               	movwf	6
 11655  1FB7  0187               	clrf	7
 11656  1FB8  0021               	movlb	1	; select bank1
 11657  1FB9  0820               	movf	??_USBCtrlEPAllowDataStage^(0+128),w
 11658  1FBA  0081               	movwf	1
 11659                           
 11660                           ;usb_device.c: 1668: pBDTEntryEP0OutNext->ADR = (((WORD)(&CtrlTrfData))& 0x7FFF);
 11661  1FBB  3048               	movlw	72
 11662  1FBC  00A0               	movwf	??_USBCtrlEPAllowDataStage^(0+128)
 11663  1FBD  3000               	movlw	0
 11664  1FBE  00A1               	movwf	(??_USBCtrlEPAllowDataStage^(0+128)+1)
 11665  1FBF  0020               	movlb	0	; select bank0
 11666  1FC0  086A               	movf	_pBDTEntryEP0OutNext,w
 11667  1FC1  3E02               	addlw	2
 11668  1FC2  0086               	movwf	6
 11669  1FC3  0187               	clrf	7
 11670  1FC4  0021               	movlb	1	; select bank1
 11671  1FC5  0820               	movf	??_USBCtrlEPAllowDataStage^(0+128),w
 11672  1FC6  3FC0               	movwi [0]fsr1
 11673  1FC7  0821               	movf	(??_USBCtrlEPAllowDataStage+1)^(0+128),w
 11674  1FC8  3FC1               	movwi [1]fsr1
 11675                           
 11676                           ;usb_device.c: 1669: pBDTEntryEP0OutNext->STAT.Val = 0x80|0x40|(0x08 & 0x08);
 11677  1FC9  30C8               	movlw	200
 11678  1FCA  00A0               	movwf	??_USBCtrlEPAllowDataStage^(0+128)
 11679  1FCB  0020               	movlb	0	; select bank0
 11680  1FCC  086A               	movf	_pBDTEntryEP0OutNext,w
 11681  1FCD  0086               	movwf	6
 11682  1FCE  0187               	clrf	7
 11683  1FCF  0021               	movlb	1	; select bank1
 11684  1FD0  0820               	movf	??_USBCtrlEPAllowDataStage^(0+128),w
 11685  1FD1  0081               	movwf	1
 11686                           
 11687                           ;usb_device.c: 1670: }
 11688  1FD2  0008               	return
 11689  1FD3                     l4519:	
 11690                           
 11691                           ;usb_device.c: 1671: else
 11692                           ;usb_device.c: 1672: {
 11693                           ;usb_device.c: 1675: if(SetupPkt.wLength < inPipes[0].wCount.Val)
 11694  1FD3  0021               	movlb	1	; select bank1
 11695  1FD4  086B               	movf	((_inPipes+1)^(0+128)+3),w
 11696  1FD5  0020               	movlb	0	; select bank0
 11697  1FD6  0247               	subwf	71,w	;volatile
 11698  1FD7  1D03               	skipz
 11699  1FD8  2FDD               	goto	u3955
 11700  1FD9  0021               	movlb	1	; select bank1
 11701  1FDA  086A               	movf	(_inPipes^(0+128)+3),w
 11702  1FDB  0020               	movlb	0	; select bank0
 11703  1FDC  0246               	subwf	70,w	;volatile
 11704  1FDD                     u3955:	
 11705  1FDD  1803               	skipnc
 11706  1FDE  2FE8               	goto	l4523
 11707                           
 11708                           ;usb_device.c: 1676: {
 11709                           ;usb_device.c: 1677: inPipes[0].wCount.Val = SetupPkt.wLength;
 11710  1FDF  0847               	movf	71,w	;volatile
 11711  1FE0  0021               	movlb	1	; select bank1
 11712  1FE1  01EB               	clrf	((_inPipes+1)^(0+128)+3)
 11713  1FE2  07EB               	addwf	((_inPipes+1)^(0+128)+3),f
 11714  1FE3  0020               	movlb	0	; select bank0
 11715  1FE4  0846               	movf	70,w	;volatile
 11716  1FE5  0021               	movlb	1	; select bank1
 11717  1FE6  01EA               	clrf	(_inPipes^(0+128)+3)
 11718  1FE7  07EA               	addwf	(_inPipes^(0+128)+3),f
 11719  1FE8                     l4523:	
 11720                           
 11721                           ;usb_device.c: 1678: }
 11722                           ;usb_device.c: 1679: USBCtrlTrfTxService();
 11723  1FE8  3194  24AE  319F   	fcall	_USBCtrlTrfTxService
 11724                           
 11725                           ;usb_device.c: 1684: pBDTEntryIn[0]->ADR = (((WORD)(&CtrlTrfData))& 0x7FFF);
 11726  1FEB  3048               	movlw	72
 11727  1FEC  0021               	movlb	1	; select bank1
 11728  1FED  00A0               	movwf	??_USBCtrlEPAllowDataStage^(0+128)
 11729  1FEE  3000               	movlw	0
 11730  1FEF  00A1               	movwf	(??_USBCtrlEPAllowDataStage^(0+128)+1)
 11731  1FF0  0860               	movf	_pBDTEntryIn^(0+128),w
 11732  1FF1  3E02               	addlw	2
 11733  1FF2  0086               	movwf	6
 11734  1FF3  0187               	clrf	7
 11735  1FF4  0820               	movf	??_USBCtrlEPAllowDataStage^(0+128),w
 11736  1FF5  3FC0               	movwi [0]fsr1
 11737  1FF6  0821               	movf	(??_USBCtrlEPAllowDataStage+1)^(0+128),w
 11738  1FF7  3FC1               	movwi [1]fsr1
 11739                           
 11740                           ;usb_device.c: 1685: pBDTEntryIn[0]->STAT.Val = 0x80|0x40|(0x08 & 0x08);
 11741  1FF8  30C8               	movlw	200
 11742  1FF9  00A0               	movwf	??_USBCtrlEPAllowDataStage^(0+128)
 11743  1FFA  0860               	movf	_pBDTEntryIn^(0+128),w
 11744  1FFB  0086               	movwf	6
 11745  1FFC  0187               	clrf	7
 11746  1FFD  0820               	movf	??_USBCtrlEPAllowDataStage^(0+128),w
 11747  1FFE  0081               	movwf	1
 11748  1FFF  0008               	return
 11749  2000                     __end_of_USBCtrlEPAllowDataStage:	
 11750                           
 11751                           	psect	text42
 11752  14AE                     __ptext42:	
 11753 ;; *************** function _USBCtrlTrfTxService *****************
 11754 ;; Defined at:
 11755 ;;		line 1938 in file "../USB/usb_device.c"
 11756 ;; Parameters:    Size  Location     Type
 11757 ;;		None
 11758 ;; Auto vars:     Size  Location     Type
 11759 ;;  byteToSend      1   16[BANK0 ] unsigned char 
 11760 ;; Return value:  Size  Location     Type
 11761 ;;		None               void
 11762 ;; Registers used:
 11763 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
 11764 ;; Tracked objects:
 11765 ;;		On entry : 0/0
 11766 ;;		On exit  : 0/0
 11767 ;;		Unchanged: 0/0
 11768 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11769 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11770 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11771 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11772 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11773 ;;Total ram usage:        3 bytes
 11774 ;; Hardware stack levels used:    1
 11775 ;; Hardware stack levels required when called:    4
 11776 ;; This function calls:
 11777 ;;		Nothing
 11778 ;; This function is called by:
 11779 ;;		_USBCtrlEPAllowDataStage
 11780 ;;		_USBCtrlTrfInHandler
 11781 ;; This function uses a non-reentrant model
 11782 ;;
 11783                           
 11784                           
 11785                           ;psect for function _USBCtrlTrfTxService
 11786  14AE                     _USBCtrlTrfTxService:	
 11787                           
 11788                           ;usb_device.c: 1939: BYTE byteToSend;
 11789                           ;usb_device.c: 1943: byteToSend = 8;
 11790                           
 11791                           ;incstack = 0
 11792                           ; Regs used in _USBCtrlTrfTxService: [wreg-fsr1h+status,2+status,0+pclath]
 11793  14AE  3008               	movlw	8
 11794  14AF  0020               	movlb	0	; select bank0
 11795  14B0  00DE               	movwf	??_USBCtrlTrfTxService
 11796  14B1  085E               	movf	??_USBCtrlTrfTxService,w
 11797  14B2  00E0               	movwf	USBCtrlTrfTxService@byteToSend
 11798                           
 11799                           ;usb_device.c: 1944: if(inPipes[0].wCount.Val < (BYTE)8)
 11800  14B3  3000               	movlw	0
 11801  14B4  0021               	movlb	1	; select bank1
 11802  14B5  026B               	subwf	((_inPipes+1)^(0+128)+3),w
 11803  14B6  3008               	movlw	8
 11804  14B7  1903               	skipnz
 11805  14B8  026A               	subwf	(_inPipes^(0+128)+3),w
 11806  14B9  1803               	skipnc
 11807  14BA  2CCE               	goto	l4541
 11808                           
 11809                           ;usb_device.c: 1945: {
 11810                           ;usb_device.c: 1946: byteToSend = inPipes[0].wCount.Val;
 11811  14BB  086A               	movf	(_inPipes^(0+128)+3),w
 11812  14BC  0020               	movlb	0	; select bank0
 11813  14BD  00DE               	movwf	??_USBCtrlTrfTxService
 11814  14BE  085E               	movf	??_USBCtrlTrfTxService,w
 11815  14BF  00E0               	movwf	USBCtrlTrfTxService@byteToSend
 11816                           
 11817                           ;usb_device.c: 1953: if(shortPacketStatus == 0)
 11818  14C0  08ED               	movf	_shortPacketStatus,f
 11819  14C1  1D03               	skipz
 11820  14C2  2CC6               	goto	l4537
 11821                           
 11822                           ;usb_device.c: 1954: {
 11823                           ;usb_device.c: 1955: shortPacketStatus = 1;
 11824  14C3  01ED               	clrf	_shortPacketStatus
 11825  14C4  0AED               	incf	_shortPacketStatus,f
 11826                           
 11827                           ;usb_device.c: 1956: }
 11828  14C5  2CCE               	goto	l4541
 11829  14C6                     l4537:	
 11830                           
 11831                           ;usb_device.c: 1957: else if(shortPacketStatus == 1)
 11832  14C6  086D               	movf	_shortPacketStatus,w
 11833  14C7  3A01               	xorlw	1
 11834  14C8  1D03               	skipz
 11835  14C9  2CCE               	goto	l4541
 11836                           
 11837                           ;usb_device.c: 1958: {
 11838                           ;usb_device.c: 1959: shortPacketStatus = 2;
 11839  14CA  3002               	movlw	2
 11840  14CB  00DE               	movwf	??_USBCtrlTrfTxService
 11841  14CC  085E               	movf	??_USBCtrlTrfTxService,w
 11842  14CD  00ED               	movwf	_shortPacketStatus
 11843  14CE                     l4541:	
 11844                           
 11845                           ;usb_device.c: 1960: }
 11846                           ;usb_device.c: 1961: }
 11847                           ;usb_device.c: 1965: inPipes[0].wCount.Val = inPipes[0].wCount.Val - byteToSend;
 11848  14CE  3003               	movlw	3
 11849  14CF  3EE7               	addlw	_inPipes& (0+255)
 11850  14D0  0086               	movwf	6
 11851  14D1  0187               	clrf	7
 11852  14D2  0020               	movlb	0	; select bank0
 11853  14D3  0860               	movf	USBCtrlTrfTxService@byteToSend,w
 11854  14D4  00DE               	movwf	??_USBCtrlTrfTxService
 11855  14D5  01DF               	clrf	??_USBCtrlTrfTxService+1
 11856  14D6  09DE               	comf	??_USBCtrlTrfTxService,f
 11857  14D7  09DF               	comf	??_USBCtrlTrfTxService+1,f
 11858  14D8  0ADE               	incf	??_USBCtrlTrfTxService,f
 11859  14D9  1903               	skipnz
 11860  14DA  0ADF               	incf	??_USBCtrlTrfTxService+1,f
 11861  14DB  3F40               	moviw [0]fsr1
 11862  14DC  075E               	addwf	??_USBCtrlTrfTxService,w
 11863  14DD  0021               	movlb	1	; select bank1
 11864  14DE  00EA               	movwf	(_inPipes^(0+128)+3)
 11865  14DF  3F41               	moviw [1]fsr1
 11866  14E0  0020               	movlb	0	; select bank0
 11867  14E1  3D5F               	addwfc	??_USBCtrlTrfTxService+1,w
 11868  14E2  0021               	movlb	1	; select bank1
 11869  14E3  00EB               	movwf	(_inPipes^(0+128)+4)
 11870                           
 11871                           ;usb_device.c: 1970: pBDTEntryIn[0]->CNT = byteToSend;
 11872  14E4  0020               	movlb	0	; select bank0
 11873  14E5  0860               	movf	USBCtrlTrfTxService@byteToSend,w
 11874  14E6  00DE               	movwf	??_USBCtrlTrfTxService
 11875  14E7  0021               	movlb	1	; select bank1
 11876  14E8  0A60               	incf	_pBDTEntryIn^(0+128),w
 11877  14E9  0086               	movwf	6
 11878  14EA  0187               	clrf	7
 11879  14EB  0020               	movlb	0	; select bank0
 11880  14EC  085E               	movf	??_USBCtrlTrfTxService,w
 11881  14ED  0081               	movwf	1
 11882                           
 11883                           ;usb_device.c: 1974: pDst = ( BYTE*)CtrlTrfData;
 11884  14EE  3048               	movlw	72
 11885  14EF  00DE               	movwf	??_USBCtrlTrfTxService
 11886  14F0  085E               	movf	??_USBCtrlTrfTxService,w
 11887  14F1  00EB               	movwf	_pDst
 11888                           
 11889                           ;usb_device.c: 1975: if(inPipes[0].info.bits.ctrl_trf_mem == 0x00)
 11890  14F2  0021               	movlb	1	; select bank1
 11891  14F3  1C69               	btfss	(_inPipes^(0+128)+2),0
 11892  14F4  2D0F               	goto	l4559
 11893  14F5  2D2D               	goto	l4569
 11894  14F6                     l4551:	
 11895                           ;usb_device.c: 1976: {
 11896                           ;usb_device.c: 1977: while(byteToSend)
 11897                           
 11898                           
 11899                           ;usb_device.c: 1978: {
 11900                           ;usb_device.c: 1979: *pDst++ = *inPipes[0].pSrc.bRom++;
 11901  14F6  0021               	movlb	1	; select bank1
 11902  14F7  0867               	movf	_inPipes^(0+128),w
 11903  14F8  0084               	movwf	4
 11904  14F9  0868               	movf	(_inPipes+1)^(0+128),w
 11905  14FA  0085               	movwf	5
 11906  14FB  0800               	movf	0,w	;code access
 11907  14FC  0020               	movlb	0	; select bank0
 11908  14FD  00DE               	movwf	??_USBCtrlTrfTxService
 11909  14FE  086B               	movf	_pDst,w
 11910  14FF  0086               	movwf	6
 11911  1500  0187               	clrf	7
 11912  1501  085E               	movf	??_USBCtrlTrfTxService,w
 11913  1502  0081               	movwf	1
 11914  1503  3001               	movlw	1
 11915  1504  0021               	movlb	1	; select bank1
 11916  1505  07E7               	addwf	_inPipes^(0+128),f
 11917  1506  3000               	movlw	0
 11918  1507  3DE8               	addwfc	(_inPipes+1)^(0+128),f
 11919  1508  3001               	movlw	1
 11920  1509  0020               	movlb	0	; select bank0
 11921  150A  00DE               	movwf	??_USBCtrlTrfTxService
 11922  150B  085E               	movf	??_USBCtrlTrfTxService,w
 11923  150C  07EB               	addwf	_pDst,f
 11924                           
 11925                           ;usb_device.c: 1980: byteToSend--;
 11926  150D  3001               	movlw	1
 11927  150E  02E0               	subwf	USBCtrlTrfTxService@byteToSend,f
 11928  150F                     l4559:	
 11929  150F  0020               	movlb	0	; select bank0
 11930  1510  08E0               	movf	USBCtrlTrfTxService@byteToSend,f
 11931  1511  1903               	btfsc	3,2
 11932  1512  0008               	return
 11933  1513  2CF6               	goto	l4551
 11934  1514                     l4561:	
 11935                           ;usb_device.c: 1983: else
 11936                           ;usb_device.c: 1984: {
 11937                           ;usb_device.c: 1985: while(byteToSend)
 11938                           
 11939                           ;usb_device.c: 1981: }
 11940                           ;usb_device.c: 1982: }
 11941                           
 11942                           
 11943                           ;usb_device.c: 1986: {
 11944                           ;usb_device.c: 1987: *pDst++ = *inPipes[0].pSrc.bRam++;
 11945  1514  0021               	movlb	1	; select bank1
 11946  1515  0867               	movf	_inPipes^(0+128),w
 11947  1516  0084               	movwf	4
 11948  1517  0868               	movf	(_inPipes+1)^(0+128),w
 11949  1518  0085               	movwf	5
 11950  1519  0800               	movf	0,w	;code access
 11951  151A  0020               	movlb	0	; select bank0
 11952  151B  00DE               	movwf	??_USBCtrlTrfTxService
 11953  151C  086B               	movf	_pDst,w
 11954  151D  0086               	movwf	6
 11955  151E  0187               	clrf	7
 11956  151F  085E               	movf	??_USBCtrlTrfTxService,w
 11957  1520  0081               	movwf	1
 11958  1521  3001               	movlw	1
 11959  1522  0021               	movlb	1	; select bank1
 11960  1523  07E7               	addwf	_inPipes^(0+128),f
 11961  1524  3000               	movlw	0
 11962  1525  3DE8               	addwfc	(_inPipes+1)^(0+128),f
 11963  1526  3001               	movlw	1
 11964  1527  0020               	movlb	0	; select bank0
 11965  1528  00DE               	movwf	??_USBCtrlTrfTxService
 11966  1529  085E               	movf	??_USBCtrlTrfTxService,w
 11967  152A  07EB               	addwf	_pDst,f
 11968                           
 11969                           ;usb_device.c: 1988: byteToSend--;
 11970  152B  3001               	movlw	1
 11971  152C  02E0               	subwf	USBCtrlTrfTxService@byteToSend,f
 11972  152D                     l4569:	
 11973  152D  0020               	movlb	0	; select bank0
 11974  152E  08E0               	movf	USBCtrlTrfTxService@byteToSend,f
 11975  152F  1903               	btfsc	3,2
 11976  1530  0008               	return
 11977  1531  2D14               	goto	l4561
 11978  1532                     __end_of_USBCtrlTrfTxService:	
 11979                           
 11980                           	psect	text43
 11981  11D3                     __ptext43:	
 11982 ;; *************** function _USBCtrlEPAllowStatusStage *****************
 11983 ;; Defined at:
 11984 ;;		line 1590 in file "../USB/usb_device.c"
 11985 ;; Parameters:    Size  Location     Type
 11986 ;;		None
 11987 ;; Auto vars:     Size  Location     Type
 11988 ;;		None
 11989 ;; Return value:  Size  Location     Type
 11990 ;;		None               void
 11991 ;; Registers used:
 11992 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11993 ;; Tracked objects:
 11994 ;;		On entry : 0/0
 11995 ;;		On exit  : 0/0
 11996 ;;		Unchanged: 0/0
 11997 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11998 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11999 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12000 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12001 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12002 ;;Total ram usage:        2 bytes
 12003 ;; Hardware stack levels used:    1
 12004 ;; Hardware stack levels required when called:    4
 12005 ;; This function calls:
 12006 ;;		Nothing
 12007 ;; This function is called by:
 12008 ;;		_USBDeviceTasks
 12009 ;;		_USBCtrlEPServiceComplete
 12010 ;;		_USBCtrlTrfRxService
 12011 ;; This function uses a non-reentrant model
 12012 ;;
 12013                           
 12014                           
 12015                           ;psect for function _USBCtrlEPAllowStatusStage
 12016  11D3                     _USBCtrlEPAllowStatusStage:	
 12017                           
 12018                           ;usb_device.c: 1596: if(USBStatusStageEnabledFlag1 == FALSE)
 12019                           
 12020                           ;incstack = 0
 12021                           ; Regs used in _USBCtrlEPAllowStatusStage: [wreg+fsr1l+fsr1h+status,2+status,0]
 12022  11D3  0022               	movlb	2	; select bank2
 12023  11D4  08EA               	movf	_USBStatusStageEnabledFlag1^(0+256),f
 12024  11D5  1D03               	skipz
 12025  11D6  0008               	return
 12026                           
 12027                           ;usb_device.c: 1597: {
 12028                           ;usb_device.c: 1598: USBStatusStageEnabledFlag1 = TRUE;
 12029  11D7  3001               	movlw	1
 12030  11D8  0020               	movlb	0	; select bank0
 12031  11D9  00DE               	movwf	??_USBCtrlEPAllowStatusStage
 12032  11DA  085E               	movf	??_USBCtrlEPAllowStatusStage,w
 12033  11DB  0022               	movlb	2	; select bank2
 12034  11DC  00EA               	movwf	_USBStatusStageEnabledFlag1^(0+256)	;volatile
 12035                           
 12036                           ;usb_device.c: 1599: if(USBStatusStageEnabledFlag2 == FALSE)
 12037  11DD  08EB               	movf	_USBStatusStageEnabledFlag2^(0+256),f
 12038  11DE  1D03               	skipz
 12039  11DF  0008               	return
 12040                           
 12041                           ;usb_device.c: 1600: {
 12042                           ;usb_device.c: 1601: USBStatusStageEnabledFlag2 = TRUE;
 12043  11E0  3001               	movlw	1
 12044  11E1  0020               	movlb	0	; select bank0
 12045  11E2  00DE               	movwf	??_USBCtrlEPAllowStatusStage
 12046  11E3  085E               	movf	??_USBCtrlEPAllowStatusStage,w
 12047  11E4  0022               	movlb	2	; select bank2
 12048  11E5  00EB               	movwf	_USBStatusStageEnabledFlag2^(0+256)	;volatile
 12049                           
 12050                           ;usb_device.c: 1605: if(controlTransferState == 2)
 12051  11E6  0020               	movlb	0	; select bank0
 12052  11E7  0869               	movf	_controlTransferState,w
 12053  11E8  3A02               	xorlw	2
 12054  11E9  1D03               	skipz
 12055  11EA  29FB               	goto	l4379
 12056                           
 12057                           ;usb_device.c: 1606: {
 12058                           ;usb_device.c: 1607: pBDTEntryIn[0]->CNT = 0;
 12059  11EB  0021               	movlb	1	; select bank1
 12060  11EC  0A60               	incf	_pBDTEntryIn^(0+128),w
 12061  11ED  0086               	movwf	6
 12062  11EE  0187               	clrf	7
 12063  11EF  0181               	clrf	1
 12064                           
 12065                           ;usb_device.c: 1608: pBDTEntryIn[0]->STAT.Val = 0x80|0x40|(0x08 & 0x08);
 12066  11F0  30C8               	movlw	200
 12067  11F1  0020               	movlb	0	; select bank0
 12068  11F2  00DE               	movwf	??_USBCtrlEPAllowStatusStage
 12069  11F3  0021               	movlb	1	; select bank1
 12070  11F4  0860               	movf	_pBDTEntryIn^(0+128),w
 12071  11F5  0086               	movwf	6
 12072  11F6  0187               	clrf	7
 12073  11F7  0020               	movlb	0	; select bank0
 12074  11F8  085E               	movf	??_USBCtrlEPAllowStatusStage,w
 12075  11F9  0081               	movwf	1
 12076                           
 12077                           ;usb_device.c: 1609: }
 12078  11FA  0008               	return
 12079  11FB                     l4379:	
 12080                           
 12081                           ;usb_device.c: 1610: else if(controlTransferState == 1)
 12082  11FB  0869               	movf	_controlTransferState,w
 12083  11FC  3A01               	xorlw	1
 12084  11FD  1D03               	skipz
 12085  11FE  0008               	return
 12086                           
 12087                           ;usb_device.c: 1611: {
 12088                           ;usb_device.c: 1612: BothEP0OutUOWNsSet = FALSE;
 12089  11FF  0022               	movlb	2	; select bank2
 12090  1200  01DD               	clrf	_BothEP0OutUOWNsSet^(0+256)
 12091                           
 12092                           ;usb_device.c: 1617: pBDTEntryEP0OutCurrent->CNT = 8;
 12093  1201  3008               	movlw	8
 12094  1202  0020               	movlb	0	; select bank0
 12095  1203  00DE               	movwf	??_USBCtrlEPAllowStatusStage
 12096  1204  0021               	movlb	1	; select bank1
 12097  1205  0A66               	incf	_pBDTEntryEP0OutCurrent^(0+128),w
 12098  1206  0086               	movwf	6
 12099  1207  0187               	clrf	7
 12100  1208  0020               	movlb	0	; select bank0
 12101  1209  085E               	movf	??_USBCtrlEPAllowStatusStage,w
 12102  120A  0081               	movwf	1
 12103                           
 12104                           ;usb_device.c: 1618: pBDTEntryEP0OutCurrent->ADR = (((WORD)(&SetupPkt))& 0x7FFF);
 12105  120B  3040               	movlw	64
 12106  120C  00DE               	movwf	??_USBCtrlEPAllowStatusStage
 12107  120D  3000               	movlw	0
 12108  120E  00DF               	movwf	??_USBCtrlEPAllowStatusStage+1
 12109  120F  0021               	movlb	1	; select bank1
 12110  1210  0866               	movf	_pBDTEntryEP0OutCurrent^(0+128),w
 12111  1211  3E02               	addlw	2
 12112  1212  0086               	movwf	6
 12113  1213  0187               	clrf	7
 12114  1214  0020               	movlb	0	; select bank0
 12115  1215  085E               	movf	??_USBCtrlEPAllowStatusStage,w
 12116  1216  3FC0               	movwi [0]fsr1
 12117  1217  085F               	movf	??_USBCtrlEPAllowStatusStage+1,w
 12118  1218  3FC1               	movwi [1]fsr1
 12119                           
 12120                           ;usb_device.c: 1619: pBDTEntryEP0OutCurrent->STAT.Val = 0x80|0x04;
 12121  1219  3084               	movlw	132
 12122  121A  00DE               	movwf	??_USBCtrlEPAllowStatusStage
 12123  121B  0021               	movlb	1	; select bank1
 12124  121C  0866               	movf	_pBDTEntryEP0OutCurrent^(0+128),w
 12125  121D  0086               	movwf	6
 12126  121E  0187               	clrf	7
 12127  121F  0020               	movlb	0	; select bank0
 12128  1220  085E               	movf	??_USBCtrlEPAllowStatusStage,w
 12129  1221  0081               	movwf	1
 12130                           
 12131                           ;usb_device.c: 1620: BothEP0OutUOWNsSet = TRUE;
 12132  1222  0022               	movlb	2	; select bank2
 12133  1223  01DD               	clrf	_BothEP0OutUOWNsSet^(0+256)
 12134  1224  0ADD               	incf	_BothEP0OutUOWNsSet^(0+256),f
 12135                           
 12136                           ;usb_device.c: 1624: pBDTEntryEP0OutNext->CNT = 8;
 12137  1225  3008               	movlw	8
 12138  1226  0020               	movlb	0	; select bank0
 12139  1227  00DE               	movwf	??_USBCtrlEPAllowStatusStage
 12140  1228  0A6A               	incf	_pBDTEntryEP0OutNext,w
 12141  1229  0086               	movwf	6
 12142  122A  0187               	clrf	7
 12143  122B  085E               	movf	??_USBCtrlEPAllowStatusStage,w
 12144  122C  0081               	movwf	1
 12145                           
 12146                           ;usb_device.c: 1625: pBDTEntryEP0OutNext->ADR = (((WORD)(&SetupPkt))& 0x7FFF);
 12147  122D  3040               	movlw	64
 12148  122E  00DE               	movwf	??_USBCtrlEPAllowStatusStage
 12149  122F  3000               	movlw	0
 12150  1230  00DF               	movwf	??_USBCtrlEPAllowStatusStage+1
 12151  1231  086A               	movf	_pBDTEntryEP0OutNext,w
 12152  1232  3E02               	addlw	2
 12153  1233  0086               	movwf	6
 12154  1234  0187               	clrf	7
 12155  1235  085E               	movf	??_USBCtrlEPAllowStatusStage,w
 12156  1236  3FC0               	movwi [0]fsr1
 12157  1237  085F               	movf	??_USBCtrlEPAllowStatusStage+1,w
 12158  1238  3FC1               	movwi [1]fsr1
 12159                           
 12160                           ;usb_device.c: 1626: pBDTEntryEP0OutNext->STAT.Val = 0x80;
 12161  1239  3080               	movlw	128
 12162  123A  00DE               	movwf	??_USBCtrlEPAllowStatusStage
 12163  123B  086A               	movf	_pBDTEntryEP0OutNext,w
 12164  123C  0086               	movwf	6
 12165  123D  0187               	clrf	7
 12166  123E  085E               	movf	??_USBCtrlEPAllowStatusStage,w
 12167  123F  0081               	movwf	1
 12168  1240  0008               	return
 12169  1241                     __end_of_USBCtrlEPAllowStatusStage:	
 12170                           
 12171                           	psect	text44
 12172  1CED                     __ptext44:	
 12173 ;; *************** function _USBStallHandler *****************
 12174 ;; Defined at:
 12175 ;;		line 2356 in file "../USB/usb_device.c"
 12176 ;; Parameters:    Size  Location     Type
 12177 ;;		None
 12178 ;; Auto vars:     Size  Location     Type
 12179 ;;		None
 12180 ;; Return value:  Size  Location     Type
 12181 ;;		None               void
 12182 ;; Registers used:
 12183 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12184 ;; Tracked objects:
 12185 ;;		On entry : 0/0
 12186 ;;		On exit  : 0/0
 12187 ;;		Unchanged: 0/0
 12188 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12189 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12190 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12191 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12192 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12193 ;;Total ram usage:        1 bytes
 12194 ;; Hardware stack levels used:    1
 12195 ;; Hardware stack levels required when called:    4
 12196 ;; This function calls:
 12197 ;;		Nothing
 12198 ;; This function is called by:
 12199 ;;		_USBDeviceTasks
 12200 ;; This function uses a non-reentrant model
 12201 ;;
 12202                           
 12203                           
 12204                           ;psect for function _USBStallHandler
 12205  1CED                     _USBStallHandler:	
 12206                           
 12207                           ;usb_device.c: 2368: if(UEP0bits.EPSTALL == 1)
 12208                           
 12209                           ;incstack = 0
 12210                           ; Regs used in _USBStallHandler: [wreg+fsr1l+fsr1h+status,2+status,0]
 12211  1CED  003D               	movlb	29	; select bank29
 12212  1CEE  1C18               	btfss	24,0	;volatile
 12213  1CEF  2D0B               	goto	l4407
 12214                           
 12215                           ;usb_device.c: 2369: {
 12216                           ;usb_device.c: 2371: if((pBDTEntryEP0OutCurrent->STAT.Val == 0x80) && (pBDTEntryIn[0]->S
      +                          TAT.Val == (0x80|0x04)))
 12217  1CF0  0021               	movlb	1	; select bank1
 12218  1CF1  0866               	movf	_pBDTEntryEP0OutCurrent^(0+128),w
 12219  1CF2  0086               	movwf	6
 12220  1CF3  0187               	clrf	7
 12221  1CF4  0801               	movf	1,w
 12222  1CF5  3A80               	xorlw	128
 12223  1CF6  1D03               	skipz
 12224  1CF7  2D09               	goto	l4405
 12225  1CF8  0860               	movf	_pBDTEntryIn^(0+128),w
 12226  1CF9  0086               	movwf	6
 12227  1CFA  0187               	clrf	7
 12228  1CFB  0801               	movf	1,w
 12229  1CFC  3A84               	xorlw	132
 12230  1CFD  1D03               	skipz
 12231  1CFE  2D09               	goto	l4405
 12232                           
 12233                           ;usb_device.c: 2372: {
 12234                           ;usb_device.c: 2374: pBDTEntryEP0OutCurrent->STAT.Val = 0x80|0x00|(0x08 & 0x08)|0x04;
 12235  1CFF  308C               	movlw	140
 12236  1D00  0020               	movlb	0	; select bank0
 12237  1D01  00DE               	movwf	??_USBStallHandler
 12238  1D02  0021               	movlb	1	; select bank1
 12239  1D03  0866               	movf	_pBDTEntryEP0OutCurrent^(0+128),w
 12240  1D04  0086               	movwf	6
 12241  1D05  0187               	clrf	7
 12242  1D06  0020               	movlb	0	; select bank0
 12243  1D07  085E               	movf	??_USBStallHandler,w
 12244  1D08  0081               	movwf	1
 12245  1D09                     l4405:	
 12246                           
 12247                           ;usb_device.c: 2375: }
 12248                           ;usb_device.c: 2376: UEP0bits.EPSTALL = 0;
 12249  1D09  003D               	movlb	29	; select bank29
 12250  1D0A  1018               	bcf	24,0	;volatile
 12251  1D0B                     l4407:	
 12252                           
 12253                           ;usb_device.c: 2377: }
 12254                           ;usb_device.c: 2379: (UIR &= 0xDF);
 12255  1D0B  30DF               	movlw	223
 12256  1D0C  0020               	movlb	0	; select bank0
 12257  1D0D  00DE               	movwf	??_USBStallHandler
 12258  1D0E  085E               	movf	??_USBStallHandler,w
 12259  1D0F  003D               	movlb	29	; select bank29
 12260  1D10  0590               	andwf	16,f	;volatile
 12261  1D11  0008               	return
 12262  1D12                     __end_of_USBStallHandler:	
 12263                           
 12264                           	psect	text45
 12265  1C24                     __ptext45:	
 12266 ;; *************** function _USBSuspend *****************
 12267 ;; Defined at:
 12268 ;;		line 2399 in file "../USB/usb_device.c"
 12269 ;; Parameters:    Size  Location     Type
 12270 ;;		None
 12271 ;; Auto vars:     Size  Location     Type
 12272 ;;		None
 12273 ;; Return value:  Size  Location     Type
 12274 ;;		None               void
 12275 ;; Registers used:
 12276 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
 12277 ;; Tracked objects:
 12278 ;;		On entry : 0/0
 12279 ;;		On exit  : 0/0
 12280 ;;		Unchanged: 0/0
 12281 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12282 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12283 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12284 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 12285 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 12286 ;;Total ram usage:        1 bytes
 12287 ;; Hardware stack levels used:    1
 12288 ;; Hardware stack levels required when called:    8
 12289 ;; This function calls:
 12290 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 12291 ;; This function is called by:
 12292 ;;		_USBDeviceTasks
 12293 ;; This function uses a non-reentrant model
 12294 ;;
 12295                           
 12296                           
 12297                           ;psect for function _USBSuspend
 12298  1C24                     _USBSuspend:	
 12299                           
 12300                           ;usb_device.c: 2423: UIEbits.ACTVIE = 1;
 12301                           
 12302                           ;incstack = 0
 12303                           ; Regs used in _USBSuspend: [allreg]
 12304  1C24  003D               	movlb	29	; select bank29
 12305  1C25  1512               	bsf	18,2	;volatile
 12306                           
 12307                           ;usb_device.c: 2424: (UIR &= 0xEF);
 12308  1C26  30EF               	movlw	239
 12309  1C27  0021               	movlb	1	; select bank1
 12310  1C28  00B1               	movwf	??_USBSuspend^(0+128)
 12311  1C29  0831               	movf	??_USBSuspend^(0+128),w
 12312  1C2A  003D               	movlb	29	; select bank29
 12313  1C2B  0590               	andwf	16,f	;volatile
 12314                           
 12315                           ;usb_device.c: 2427: UCONbits.SUSPND = 1;
 12316  1C2C  148E               	bsf	14,1	;volatile
 12317                           
 12318                           ;usb_device.c: 2430: USBBusIsSuspended = TRUE;
 12319  1C2D  0022               	movlb	2	; select bank2
 12320  1C2E  01E5               	clrf	_USBBusIsSuspended^(0+256)
 12321  1C2F  0AE5               	incf	_USBBusIsSuspended^(0+256),f
 12322                           
 12323                           ;usb_device.c: 2437: USER_USB_CALLBACK_EVENT_HANDLER(EVENT_SUSPEND,0,0);
 12324  1C30  3075               	movlw	117
 12325  1C31  0021               	movlb	1	; select bank1
 12326  1C32  00AC               	movwf	?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)
 12327  1C33  3000               	movlw	0
 12328  1C34  00AD               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)+1)
 12329  1C35  01AE               	clrf	(?_USER_USB_CALLBACK_EVENT_HANDLER+2)^(0+128)
 12330  1C36  3000               	movlw	0
 12331  1C37  00AF               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)+3)
 12332  1C38  3000               	movlw	0
 12333  1C39  00B0               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)+4)
 12334  1C3A  319D  25F4         	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
 12335  1C3C  0008               	return
 12336  1C3D                     __end_of_USBSuspend:	
 12337                           
 12338                           	psect	text46
 12339  1C0C                     __ptext46:	
 12340 ;; *************** function _USBWakeFromSuspend *****************
 12341 ;; Defined at:
 12342 ;;		line 2456 in file "../USB/usb_device.c"
 12343 ;; Parameters:    Size  Location     Type
 12344 ;;		None
 12345 ;; Auto vars:     Size  Location     Type
 12346 ;;		None
 12347 ;; Return value:  Size  Location     Type
 12348 ;;		None               void
 12349 ;; Registers used:
 12350 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
 12351 ;; Tracked objects:
 12352 ;;		On entry : 0/0
 12353 ;;		On exit  : 0/0
 12354 ;;		Unchanged: 0/0
 12355 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12356 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12357 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12358 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 12359 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 12360 ;;Total ram usage:        1 bytes
 12361 ;; Hardware stack levels used:    1
 12362 ;; Hardware stack levels required when called:    8
 12363 ;; This function calls:
 12364 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 12365 ;; This function is called by:
 12366 ;;		_USBDeviceTasks
 12367 ;; This function uses a non-reentrant model
 12368 ;;
 12369                           
 12370                           
 12371                           ;psect for function _USBWakeFromSuspend
 12372  1C0C                     _USBWakeFromSuspend:	
 12373                           
 12374                           ;usb_device.c: 2457: USBBusIsSuspended = FALSE;
 12375                           
 12376                           ;incstack = 0
 12377                           ; Regs used in _USBWakeFromSuspend: [allreg]
 12378  1C0C  0022               	movlb	2	; select bank2
 12379  1C0D  01E5               	clrf	_USBBusIsSuspended^(0+256)
 12380                           
 12381                           ;usb_device.c: 2463: USER_USB_CALLBACK_EVENT_HANDLER(EVENT_RESUME,0,0);
 12382  1C0E  3074               	movlw	116
 12383  1C0F  0021               	movlb	1	; select bank1
 12384  1C10  00AC               	movwf	?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)
 12385  1C11  3000               	movlw	0
 12386  1C12  00AD               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)+1)
 12387  1C13  01AE               	clrf	(?_USER_USB_CALLBACK_EVENT_HANDLER+2)^(0+128)
 12388  1C14  3000               	movlw	0
 12389  1C15  00AF               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)+3)
 12390  1C16  3000               	movlw	0
 12391  1C17  00B0               	movwf	(?_USER_USB_CALLBACK_EVENT_HANDLER^(0+128)+4)
 12392  1C18  319D  25F4         	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
 12393                           
 12394                           ;usb_device.c: 2470: UCONbits.SUSPND = 0;
 12395  1C1A  003D               	movlb	29	; select bank29
 12396  1C1B  108E               	bcf	14,1	;volatile
 12397                           
 12398                           ;usb_device.c: 2475: UIEbits.ACTVIE = 0;
 12399  1C1C  1112               	bcf	18,2	;volatile
 12400                           
 12401                           ;usb_device.c: 2495: {
 12402                           ;usb_device.c: 2496: (UIR &= 0xFB);
 12403  1C1D  30FB               	movlw	251
 12404  1C1E  0021               	movlb	1	; select bank1
 12405  1C1F  00B1               	movwf	??_USBWakeFromSuspend^(0+128)
 12406  1C20  0831               	movf	??_USBWakeFromSuspend^(0+128),w
 12407  1C21  003D               	movlb	29	; select bank29
 12408  1C22  0590               	andwf	16,f	;volatile
 12409  1C23  0008               	return
 12410  1C24                     __end_of_USBWakeFromSuspend:	
 12411                           
 12412                           	psect	text47
 12413  1DF4                     __ptext47:	
 12414 ;; *************** function _USER_USB_CALLBACK_EVENT_HANDLER *****************
 12415 ;; Defined at:
 12416 ;;		line 630 in file "main.c"
 12417 ;; Parameters:    Size  Location     Type
 12418 ;;  event           2   12[BANK1 ] int 
 12419 ;;  pdata           1   14[BANK1 ] PTR void 
 12420 ;;		 -> USTATcopy(1), USBActiveConfiguration(1), NULL(0), BDT(32), 
 12421 ;;  size            2   15[BANK1 ] unsigned short 
 12422 ;; Auto vars:     Size  Location     Type
 12423 ;;		None
 12424 ;; Return value:  Size  Location     Type
 12425 ;;                  1    wreg      enum E5
 12426 ;; Registers used:
 12427 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12428 ;; Tracked objects:
 12429 ;;		On entry : 0/0
 12430 ;;		On exit  : 0/0
 12431 ;;		Unchanged: 0/0
 12432 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12433 ;;      Params:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
 12434 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12435 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12436 ;;      Totals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
 12437 ;;Total ram usage:        5 bytes
 12438 ;; Hardware stack levels used:    1
 12439 ;; Hardware stack levels required when called:    7
 12440 ;; This function calls:
 12441 ;;		_USBCBSuspend
 12442 ;;		_USBCBWakeFromSuspend
 12443 ;;		_USBCB_SOF_Handler
 12444 ;;		_USBCBErrorHandler
 12445 ;;		_USBCBCheckOtherReq
 12446 ;;		_USBCBStdSetDscHandler
 12447 ;;		_USBCBInitEP
 12448 ;; This function is called by:
 12449 ;;		_USBDeviceTasks
 12450 ;;		_USBStdSetCfgHandler
 12451 ;;		_USBSuspend
 12452 ;;		_USBWakeFromSuspend
 12453 ;;		_USBCtrlTrfSetupHandler
 12454 ;;		_USBCheckStdRequest
 12455 ;;		_USBStdFeatureReqHandler
 12456 ;; This function uses a non-reentrant model
 12457 ;;
 12458                           
 12459                           
 12460                           ;psect for function _USER_USB_CALLBACK_EVENT_HANDLER
 12461  1DF4                     _USER_USB_CALLBACK_EVENT_HANDLER:	
 12462                           
 12463                           ;main.c: 631: switch( event )
 12464                           
 12465                           ;incstack = 0
 12466                           ; Regs used in _USER_USB_CALLBACK_EVENT_HANDLER: [wreg-fsr1h+status,2+status,0+pclath+cs
      +                          tack]
 12467  1DF4  2E0A               	goto	l6309
 12468  1DF5                     l6293:	
 12469                           ;main.c: 636: case EVENT_SOF:
 12470                           
 12471                           ;main.c: 635: break;
 12472                           
 12473                           ;main.c: 632: {
 12474                           ;main.c: 633: case EVENT_TRANSFER:
 12475                           
 12476                           
 12477                           ;main.c: 637: USBCB_SOF_Handler();
 12478  1DF5  3188  20B0         	fcall	_USBCB_SOF_Handler
 12479                           
 12480                           ;main.c: 638: break;
 12481  1DF7  0008               	return
 12482  1DF8                     l6295:	
 12483                           ;main.c: 639: case EVENT_SUSPEND:
 12484                           
 12485                           
 12486                           ;main.c: 640: USBCBSuspend();
 12487  1DF8  319B  235E         	fcall	_USBCBSuspend
 12488                           
 12489                           ;main.c: 641: break;
 12490  1DFA  0008               	return
 12491  1DFB                     l6297:	
 12492                           ;main.c: 642: case EVENT_RESUME:
 12493                           
 12494                           
 12495                           ;main.c: 643: USBCBWakeFromSuspend();
 12496  1DFB  3188  20AF         	fcall	_USBCBWakeFromSuspend
 12497                           
 12498                           ;main.c: 644: break;
 12499  1DFD  0008               	return
 12500  1DFE                     l6299:	
 12501                           ;main.c: 645: case EVENT_CONFIGURED:
 12502                           
 12503                           
 12504                           ;main.c: 646: USBCBInitEP();
 12505  1DFE  319C  248F         	fcall	_USBCBInitEP
 12506                           
 12507                           ;main.c: 647: break;
 12508  1E00  0008               	return
 12509  1E01                     l6301:	
 12510                           ;main.c: 648: case EVENT_SET_DESCRIPTOR:
 12511                           
 12512                           
 12513                           ;main.c: 649: USBCBStdSetDscHandler();
 12514  1E01  3187  27FF         	fcall	_USBCBStdSetDscHandler
 12515                           
 12516                           ;main.c: 650: break;
 12517  1E03  0008               	return
 12518  1E04                     l6303:	
 12519                           ;main.c: 651: case EVENT_EP0_REQUEST:
 12520                           
 12521                           
 12522                           ;main.c: 652: USBCBCheckOtherReq();
 12523  1E04  3190  2000         	fcall	_USBCBCheckOtherReq
 12524                           
 12525                           ;main.c: 653: break;
 12526  1E06  0008               	return
 12527  1E07                     l6305:	
 12528                           ;main.c: 654: case EVENT_BUS_ERROR:
 12529                           
 12530                           
 12531                           ;main.c: 655: USBCBErrorHandler();
 12532  1E07  3180  2002         	fcall	_USBCBErrorHandler
 12533                           
 12534                           ;main.c: 669: }
 12535                           
 12536                           ;main.c: 668: break;
 12537                           
 12538                           ;main.c: 667: default:
 12539                           
 12540                           ;main.c: 666: break;
 12541                           
 12542                           ;main.c: 657: case EVENT_TRANSFER_TERMINATED:
 12543                           
 12544                           ;main.c: 656: break;
 12545  1E09  0008               	return
 12546  1E0A                     l6309:	
 12547                           
 12548                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 12549                           ; Switch size 1, requested type "space"
 12550                           ; Number of cases is 2, Range of values is 0 to 127
 12551                           ; switch strategies available:
 12552                           ; Name         Instructions Cycles
 12553                           ; simple_byte            7     4 (average)
 12554                           ; direct_byte          262     6 (fixed)
 12555                           ; jumptable            260     6 (fixed)
 12556                           ; rangetable           132     6 (fixed)
 12557                           ; spacedrange          261     8 (fixed)
 12558                           ; locatedrange         128     3 (fixed)
 12559                           ;	Chosen strategy is simple_byte
 12560  1E0A  0021               	movlb	1	; select bank1
 12561  1E0B  082D               	movf	(USER_USB_CALLBACK_EVENT_HANDLER@event+1)^(0+128),w
 12562  1E0C  3A00               	xorlw	0	; case 0
 12563  1E0D  1903               	skipnz
 12564  1E0E  2E13               	goto	l7073
 12565  1E0F  3A7F               	xorlw	127	; case 127
 12566  1E10  1903               	skipnz
 12567  1E11  2E2D               	goto	l7075
 12568  1E12  2E32               	goto	l936
 12569  1E13                     l7073:	
 12570                           
 12571                           ; Switch size 1, requested type "space"
 12572                           ; Number of cases is 8, Range of values is 1 to 117
 12573                           ; switch strategies available:
 12574                           ; Name         Instructions Cycles
 12575                           ; simple_byte           25    13 (average)
 12576                           ; direct_byte          243     9 (fixed)
 12577                           ; jumptable            263     9 (fixed)
 12578                           ;	Chosen strategy is simple_byte
 12579  1E13  082C               	movf	USER_USB_CALLBACK_EVENT_HANDLER@event^(0+128),w
 12580  1E14  3A01               	xorlw	1	; case 1
 12581  1E15  1903               	skipnz
 12582  1E16  2DFE               	goto	l6299
 12583  1E17  3A03               	xorlw	3	; case 2
 12584  1E18  1903               	skipnz
 12585  1E19  2E01               	goto	l6301
 12586  1E1A  3A01               	xorlw	1	; case 3
 12587  1E1B  1903               	skipnz
 12588  1E1C  2E04               	goto	l6303
 12589  1E1D  3A06               	xorlw	6	; case 5
 12590  1E1E  1903               	skipnz
 12591  1E1F  2E32               	goto	l936
 12592  1E20  3A77               	xorlw	119	; case 114
 12593  1E21  1903               	skipnz
 12594  1E22  2E32               	goto	l936
 12595  1E23  3A01               	xorlw	1	; case 115
 12596  1E24  1903               	skipnz
 12597  1E25  2DF5               	goto	l6293
 12598  1E26  3A07               	xorlw	7	; case 116
 12599  1E27  1903               	skipnz
 12600  1E28  2DFB               	goto	l6297
 12601  1E29  3A01               	xorlw	1	; case 117
 12602  1E2A  1903               	skipnz
 12603  1E2B  2DF8               	goto	l6295
 12604  1E2C  2E32               	goto	l936
 12605  1E2D                     l7075:	
 12606                           
 12607                           ; Switch size 1, requested type "space"
 12608                           ; Number of cases is 1, Range of values is 255 to 255
 12609                           ; switch strategies available:
 12610                           ; Name         Instructions Cycles
 12611                           ; simple_byte            4     3 (average)
 12612                           ; direct_byte            7     5 (fixed)
 12613                           ; jumptable            263     9 (fixed)
 12614                           ;	Chosen strategy is simple_byte
 12615  1E2D  082C               	movf	USER_USB_CALLBACK_EVENT_HANDLER@event^(0+128),w
 12616  1E2E  3AFF               	xorlw	255	; case 255
 12617  1E2F  1903               	skipnz
 12618  1E30  2E07               	goto	l6305
 12619  1E31  2E32               	goto	l936
 12620  1E32                     l936:	
 12621                           ;main.c: 670: return TRUE;
 12622                           ;	Return value of _USER_USB_CALLBACK_EVENT_HANDLER is never used
 12623                           
 12624  1E32  0008               	return
 12625  1E33                     __end_of_USER_USB_CALLBACK_EVENT_HANDLER:	
 12626                           
 12627                           	psect	text48
 12628  1C8F                     __ptext48:	
 12629 ;; *************** function _USBCBInitEP *****************
 12630 ;; Defined at:
 12631 ;;		line 460 in file "main.c"
 12632 ;; Parameters:    Size  Location     Type
 12633 ;;		None
 12634 ;; Auto vars:     Size  Location     Type
 12635 ;;		None
 12636 ;; Return value:  Size  Location     Type
 12637 ;;		None               void
 12638 ;; Registers used:
 12639 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12640 ;; Tracked objects:
 12641 ;;		On entry : 0/0
 12642 ;;		On exit  : 0/0
 12643 ;;		Unchanged: 0/0
 12644 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12645 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12646 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12647 ;;      Temps:          0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
 12648 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
 12649 ;;Total ram usage:        3 bytes
 12650 ;; Hardware stack levels used:    1
 12651 ;; Hardware stack levels required when called:    6
 12652 ;; This function calls:
 12653 ;;		_USBEnableEndpoint
 12654 ;;		_USBTransferOnePacket
 12655 ;; This function is called by:
 12656 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 12657 ;; This function uses a non-reentrant model
 12658 ;;
 12659                           
 12660                           
 12661                           ;psect for function _USBCBInitEP
 12662  1C8F                     _USBCBInitEP:	
 12663                           
 12664                           ;main.c: 462: USBEnableEndpoint(1,0x04|0x02|0x10|0x08);
 12665                           
 12666                           ;incstack = 0
 12667                           ; Regs used in _USBCBInitEP: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12668  1C8F  301E               	movlw	30
 12669  1C90  0021               	movlb	1	; select bank1
 12670  1C91  00A9               	movwf	??_USBCBInitEP^(0+128)
 12671  1C92  0829               	movf	??_USBCBInitEP^(0+128),w
 12672  1C93  0020               	movlb	0	; select bank0
 12673  1C94  00E1               	movwf	?_USBEnableEndpoint
 12674  1C95  3001               	movlw	1
 12675  1C96  319D  2560  319C   	fcall	_USBEnableEndpoint
 12676                           
 12677                           ;main.c: 464: USBGenericOutHandle = USBTransferOnePacket(1,0,(BYTE*)&OUTPacket,64);
 12678  1C99  0021               	movlb	1	; select bank1
 12679  1C9A  01A0               	clrf	?_USBTransferOnePacket^(0+128)
 12680  1C9B  30A0               	movlw	160
 12681  1C9C  00A9               	movwf	??_USBCBInitEP^(0+128)
 12682  1C9D  0829               	movf	??_USBCBInitEP^(0+128),w
 12683  1C9E  00A1               	movwf	(?_USBTransferOnePacket+1)^(0+128)
 12684  1C9F  3040               	movlw	64
 12685  1CA0  00AA               	movwf	(??_USBCBInitEP+1)^(0+128)
 12686  1CA1  082A               	movf	(??_USBCBInitEP+1)^(0+128),w
 12687  1CA2  00A2               	movwf	(?_USBTransferOnePacket^(0+128)+2)
 12688  1CA3  3001               	movlw	1
 12689  1CA4  319F  2708         	fcall	_USBTransferOnePacket
 12690  1CA6  0021               	movlb	1	; select bank1
 12691  1CA7  00AB               	movwf	(??_USBCBInitEP+2)^(0+128)
 12692  1CA8  082B               	movf	(??_USBCBInitEP+2)^(0+128),w
 12693  1CA9  0022               	movlb	2	; select bank2
 12694  1CAA  00E9               	movwf	_USBGenericOutHandle^(0+256)
 12695  1CAB  0008               	return
 12696  1CAC                     __end_of_USBCBInitEP:	
 12697                           
 12698                           	psect	text49
 12699  1F08                     __ptext49:	
 12700 ;; *************** function _USBTransferOnePacket *****************
 12701 ;; Defined at:
 12702 ;;		line 1173 in file "../USB/usb_device.c"
 12703 ;; Parameters:    Size  Location     Type
 12704 ;;  ep              1    wreg     unsigned char 
 12705 ;;  dir             1    0[BANK1 ] unsigned char 
 12706 ;;  data            1    1[BANK1 ] PTR unsigned char 
 12707 ;;		 -> INPacket(64), OUTPacket(64), 
 12708 ;;  len             1    2[BANK1 ] unsigned char 
 12709 ;; Auto vars:     Size  Location     Type
 12710 ;;  ep              1    5[BANK1 ] unsigned char 
 12711 ;;  handle          1    6[BANK1 ] PTR volatile struct __BD
 12712 ;;		 -> NULL(0), BDT(32), 
 12713 ;; Return value:  Size  Location     Type
 12714 ;;                  1    wreg      PTR void 
 12715 ;; Registers used:
 12716 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12717 ;; Tracked objects:
 12718 ;;		On entry : 0/0
 12719 ;;		On exit  : 0/0
 12720 ;;		Unchanged: 0/0
 12721 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12722 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
 12723 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
 12724 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
 12725 ;;      Totals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
 12726 ;;Total ram usage:        7 bytes
 12727 ;; Hardware stack levels used:    1
 12728 ;; Hardware stack levels required when called:    4
 12729 ;; This function calls:
 12730 ;;		Nothing
 12731 ;; This function is called by:
 12732 ;;		_ProcessIO
 12733 ;;		_USBCBInitEP
 12734 ;; This function uses a non-reentrant model
 12735 ;;
 12736                           
 12737                           
 12738                           ;psect for function _USBTransferOnePacket
 12739  1F08                     _USBTransferOnePacket:	
 12740                           
 12741                           ;incstack = 0
 12742                           ; Regs used in _USBTransferOnePacket: [wreg+fsr1l+fsr1h+status,2+status,0]
 12743                           ;USBTransferOnePacket@ep stored from wreg
 12744  1F08  0021               	movlb	1	; select bank1
 12745  1F09  00A5               	movwf	USBTransferOnePacket@ep^(0+128)
 12746                           
 12747                           ;usb_device.c: 1174: volatile BDT_ENTRY* handle;
 12748                           ;usb_device.c: 1177: if(dir != 0)
 12749  1F0A  0820               	movf	USBTransferOnePacket@dir^(0+128),w
 12750  1F0B  1903               	btfsc	3,2
 12751  1F0C  2F12               	goto	l6385
 12752                           
 12753                           ;usb_device.c: 1178: {
 12754                           ;usb_device.c: 1180: handle = pBDTEntryIn[ep];
 12755  1F0D  0825               	movf	USBTransferOnePacket@ep^(0+128),w
 12756  1F0E  3EE0               	addlw	_pBDTEntryIn& (0+255)
 12757  1F0F  0086               	movwf	6
 12758  1F10  0187               	clrf	7
 12759  1F11  2F17               	goto	L16
 12760  1F12                     l6385:	
 12761                           ;usb_device.c: 1181: }
 12762                           
 12763                           
 12764                           ;usb_device.c: 1182: else
 12765                           ;usb_device.c: 1183: {
 12766                           ;usb_device.c: 1185: handle = pBDTEntryOut[ep];
 12767  1F12  0825               	movf	USBTransferOnePacket@ep^(0+128),w
 12768  1F13  3E59               	addlw	_pBDTEntryOut& (0+255)
 12769  1F14  0086               	movwf	6
 12770  1F15  3001               	movlw	1	; select bank2/3
 12771  1F16  0087               	movwf	7
 12772  1F17                     L16:	
 12773  1F17  0801               	movf	1,w
 12774  1F18  00A3               	movwf	??_USBTransferOnePacket^(0+128)
 12775  1F19  0823               	movf	??_USBTransferOnePacket^(0+128),w
 12776  1F1A  00A6               	movwf	USBTransferOnePacket@handle^(0+128)
 12777                           
 12778                           ;usb_device.c: 1186: }
 12779                           ;usb_device.c: 1190: if(handle == 0)
 12780  1F1B  08A6               	movf	USBTransferOnePacket@handle^(0+128),f
 12781  1F1C  1D03               	skipz
 12782  1F1D  2F20               	goto	l6393
 12783                           
 12784                           ;usb_device.c: 1191: {
 12785                           ;usb_device.c: 1192: return 0;
 12786  1F1E  3000               	movlw	0
 12787  1F1F  0008               	return
 12788  1F20                     l6393:	
 12789                           
 12790                           ;usb_device.c: 1193: }
 12791                           ;usb_device.c: 1206: handle->ADR = (((WORD)(data))& 0x7FFF);
 12792  1F20  0821               	movf	USBTransferOnePacket@data^(0+128),w
 12793  1F21  00A3               	movwf	??_USBTransferOnePacket^(0+128)
 12794  1F22  3002               	movlw	2
 12795  1F23  00A4               	movwf	(??_USBTransferOnePacket^(0+128)+1)
 12796  1F24  0826               	movf	USBTransferOnePacket@handle^(0+128),w
 12797  1F25  3E02               	addlw	2
 12798  1F26  0086               	movwf	6
 12799  1F27  0187               	clrf	7
 12800  1F28  0823               	movf	??_USBTransferOnePacket^(0+128),w
 12801  1F29  3FC0               	movwi [0]fsr1
 12802  1F2A  0824               	movf	(??_USBTransferOnePacket+1)^(0+128),w
 12803  1F2B  3FC1               	movwi [1]fsr1
 12804                           
 12805                           ;usb_device.c: 1207: handle->CNT = len;
 12806  1F2C  0822               	movf	USBTransferOnePacket@len^(0+128),w
 12807  1F2D  00A3               	movwf	??_USBTransferOnePacket^(0+128)
 12808  1F2E  0A26               	incf	USBTransferOnePacket@handle^(0+128),w
 12809  1F2F  0086               	movwf	6
 12810  1F30  0187               	clrf	7
 12811  1F31  0823               	movf	??_USBTransferOnePacket^(0+128),w
 12812  1F32  0081               	movwf	1
 12813                           
 12814                           ;usb_device.c: 1208: handle->STAT.Val &= 0x40;
 12815  1F33  3040               	movlw	64
 12816  1F34  00A3               	movwf	??_USBTransferOnePacket^(0+128)
 12817  1F35  0826               	movf	USBTransferOnePacket@handle^(0+128),w
 12818  1F36  0086               	movwf	6
 12819  1F37  0187               	clrf	7
 12820  1F38  0823               	movf	??_USBTransferOnePacket^(0+128),w
 12821  1F39  0581               	andwf	1,f
 12822                           
 12823                           ;usb_device.c: 1209: handle->STAT.Val |= 0x80 | (0x08 & 0x08);
 12824  1F3A  3088               	movlw	136
 12825  1F3B  00A3               	movwf	??_USBTransferOnePacket^(0+128)
 12826  1F3C  0826               	movf	USBTransferOnePacket@handle^(0+128),w
 12827  1F3D  0086               	movwf	6
 12828  1F3E  0187               	clrf	7
 12829  1F3F  0823               	movf	??_USBTransferOnePacket^(0+128),w
 12830  1F40  0481               	iorwf	1,f
 12831                           
 12832                           ;usb_device.c: 1212: if(dir != 0)
 12833  1F41  0820               	movf	USBTransferOnePacket@dir^(0+128),w
 12834  1F42  1903               	btfsc	3,2
 12835  1F43  2F4B               	goto	l6403
 12836                           
 12837                           ;usb_device.c: 1213: {
 12838                           ;usb_device.c: 1215: ((BYTE_VAL*)&pBDTEntryIn[ep])->Val ^= 0x0004;;
 12839  1F44  3004               	movlw	4
 12840  1F45  00A3               	movwf	??_USBTransferOnePacket^(0+128)
 12841  1F46  0825               	movf	USBTransferOnePacket@ep^(0+128),w
 12842  1F47  3EE0               	addlw	_pBDTEntryIn& (0+255)
 12843  1F48  0086               	movwf	6
 12844  1F49  0187               	clrf	7
 12845  1F4A  2F52               	goto	L17
 12846  1F4B                     l6403:	
 12847                           ;usb_device.c: 1216: }
 12848                           
 12849                           
 12850                           ;usb_device.c: 1217: else
 12851                           ;usb_device.c: 1218: {
 12852                           ;usb_device.c: 1220: ((BYTE_VAL*)&pBDTEntryOut[ep])->Val ^= 0x0004;;
 12853  1F4B  3004               	movlw	4
 12854  1F4C  00A3               	movwf	??_USBTransferOnePacket^(0+128)
 12855  1F4D  0825               	movf	USBTransferOnePacket@ep^(0+128),w
 12856  1F4E  3E59               	addlw	_pBDTEntryOut& (0+255)
 12857  1F4F  0086               	movwf	6
 12858  1F50  3001               	movlw	1	; select bank2/3
 12859  1F51  0087               	movwf	7
 12860  1F52                     L17:	
 12861  1F52  0823               	movf	??_USBTransferOnePacket^(0+128),w
 12862  1F53  0681               	xorwf	1,f
 12863                           
 12864                           ;usb_device.c: 1221: }
 12865                           ;usb_device.c: 1222: return (void*)handle;
 12866  1F54  0826               	movf	USBTransferOnePacket@handle^(0+128),w
 12867  1F55  0008               	return
 12868  1F56                     __end_of_USBTransferOnePacket:	
 12869                           
 12870                           	psect	text50
 12871  1D60                     __ptext50:	
 12872 ;; *************** function _USBEnableEndpoint *****************
 12873 ;; Defined at:
 12874 ;;		line 1056 in file "../USB/usb_device.c"
 12875 ;; Parameters:    Size  Location     Type
 12876 ;;  ep              1    wreg     unsigned char 
 12877 ;;  options         1   17[BANK0 ] unsigned char 
 12878 ;; Auto vars:     Size  Location     Type
 12879 ;;  ep              1    8[BANK1 ] unsigned char 
 12880 ;;  p               2    6[BANK1 ] PTR unsigned char 
 12881 ;;		 -> UEP0(1), 
 12882 ;; Return value:  Size  Location     Type
 12883 ;;		None               void
 12884 ;; Registers used:
 12885 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12886 ;; Tracked objects:
 12887 ;;		On entry : 0/0
 12888 ;;		On exit  : 0/0
 12889 ;;		Unchanged: 0/0
 12890 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12891 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12892 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
 12893 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
 12894 ;;      Totals:         0       1       5       0       0       0       0       0       0       0       0       0       
      +0       0
 12895 ;;Total ram usage:        6 bytes
 12896 ;; Hardware stack levels used:    1
 12897 ;; Hardware stack levels required when called:    5
 12898 ;; This function calls:
 12899 ;;		_USBConfigureEndpoint
 12900 ;; This function is called by:
 12901 ;;		_USBCBInitEP
 12902 ;; This function uses a non-reentrant model
 12903 ;;
 12904                           
 12905                           
 12906                           ;psect for function _USBEnableEndpoint
 12907  1D60                     _USBEnableEndpoint:	
 12908                           
 12909                           ;incstack = 0
 12910                           ; Regs used in _USBEnableEndpoint: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12911                           ;USBEnableEndpoint@ep stored from wreg
 12912  1D60  0021               	movlb	1	; select bank1
 12913  1D61  00A8               	movwf	USBEnableEndpoint@ep^(0+128)
 12914                           
 12915                           ;usb_device.c: 1057: unsigned char* p;
 12916                           ;usb_device.c: 1061: if(options & 0x04)
 12917  1D62  0020               	movlb	0	; select bank0
 12918  1D63  1D61               	btfss	USBEnableEndpoint@options,2
 12919  1D64  2D6B               	goto	l6357
 12920                           
 12921                           ;usb_device.c: 1062: {
 12922                           ;usb_device.c: 1063: USBConfigureEndpoint(ep, 0);
 12923  1D65  01DE               	clrf	?_USBConfigureEndpoint
 12924  1D66  0021               	movlb	1	; select bank1
 12925  1D67  0828               	movf	USBEnableEndpoint@ep^(0+128),w
 12926  1D68  319E  26BB  319D   	fcall	_USBConfigureEndpoint
 12927  1D6B                     l6357:	
 12928                           
 12929                           ;usb_device.c: 1064: }
 12930                           ;usb_device.c: 1065: if(options & 0x02)
 12931  1D6B  0020               	movlb	0	; select bank0
 12932  1D6C  1CE1               	btfss	USBEnableEndpoint@options,1
 12933  1D6D  2D74               	goto	l6361
 12934                           
 12935                           ;usb_device.c: 1066: {
 12936                           ;usb_device.c: 1067: USBConfigureEndpoint(ep, 1);
 12937  1D6E  01DE               	clrf	?_USBConfigureEndpoint
 12938  1D6F  0ADE               	incf	?_USBConfigureEndpoint,f
 12939  1D70  0021               	movlb	1	; select bank1
 12940  1D71  0828               	movf	USBEnableEndpoint@ep^(0+128),w
 12941  1D72  319E  26BB         	fcall	_USBConfigureEndpoint
 12942  1D74                     l6361:	
 12943                           
 12944                           ;usb_device.c: 1068: }
 12945                           ;usb_device.c: 1076: p = (unsigned char*)(&UEP0+ep);
 12946  1D74  0021               	movlb	1	; select bank1
 12947  1D75  0828               	movf	USBEnableEndpoint@ep^(0+128),w
 12948  1D76  3E98               	addlw	152
 12949  1D77  00A4               	movwf	??_USBEnableEndpoint^(0+128)
 12950  1D78  01A5               	clrf	(??_USBEnableEndpoint^(0+128)+1)
 12951  1D79  300E               	movlw	14
 12952  1D7A  3DA5               	addwfc	(??_USBEnableEndpoint^(0+128)+1),f
 12953  1D7B  0824               	movf	??_USBEnableEndpoint^(0+128),w
 12954  1D7C  00A6               	movwf	USBEnableEndpoint@p^(0+128)
 12955  1D7D  0825               	movf	(??_USBEnableEndpoint+1)^(0+128),w
 12956  1D7E  00A7               	movwf	(USBEnableEndpoint@p+1)^(0+128)
 12957                           
 12958                           ;usb_device.c: 1078: *p = options;
 12959  1D7F  0020               	movlb	0	; select bank0
 12960  1D80  0861               	movf	USBEnableEndpoint@options,w
 12961  1D81  0021               	movlb	1	; select bank1
 12962  1D82  00A4               	movwf	??_USBEnableEndpoint^(0+128)
 12963  1D83  0826               	movf	USBEnableEndpoint@p^(0+128),w
 12964  1D84  0086               	movwf	6
 12965  1D85  0827               	movf	(USBEnableEndpoint@p+1)^(0+128),w
 12966  1D86  0087               	movwf	7
 12967  1D87  0824               	movf	??_USBEnableEndpoint^(0+128),w
 12968  1D88  0081               	movwf	1
 12969  1D89  0008               	return
 12970  1D8A                     __end_of_USBEnableEndpoint:	
 12971                           
 12972                           	psect	text51
 12973  1EBB                     __ptext51:	
 12974 ;; *************** function _USBConfigureEndpoint *****************
 12975 ;; Defined at:
 12976 ;;		line 1713 in file "../USB/usb_device.c"
 12977 ;; Parameters:    Size  Location     Type
 12978 ;;  EPNum           1    wreg     unsigned char 
 12979 ;;  direction       1   14[BANK0 ] unsigned char 
 12980 ;; Auto vars:     Size  Location     Type
 12981 ;;  EPNum           1   15[BANK0 ] unsigned char 
 12982 ;;  handle          1   16[BANK0 ] PTR volatile struct __BD
 12983 ;;		 -> BDT(32), 
 12984 ;; Return value:  Size  Location     Type
 12985 ;;		None               void
 12986 ;; Registers used:
 12987 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12988 ;; Tracked objects:
 12989 ;;		On entry : 0/0
 12990 ;;		On exit  : 0/0
 12991 ;;		Unchanged: 0/0
 12992 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12993 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12994 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12995 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
 12996 ;;      Totals:         0       3       4       0       0       0       0       0       0       0       0       0       
      +0       0
 12997 ;;Total ram usage:        7 bytes
 12998 ;; Hardware stack levels used:    1
 12999 ;; Hardware stack levels required when called:    4
 13000 ;; This function calls:
 13001 ;;		Nothing
 13002 ;; This function is called by:
 13003 ;;		_USBEnableEndpoint
 13004 ;; This function uses a non-reentrant model
 13005 ;;
 13006                           
 13007                           
 13008                           ;psect for function _USBConfigureEndpoint
 13009  1EBB                     _USBConfigureEndpoint:	
 13010                           
 13011                           ;incstack = 0
 13012                           ; Regs used in _USBConfigureEndpoint: [wreg+fsr1l+fsr1h+status,2+status,0]
 13013                           ;USBConfigureEndpoint@EPNum stored from wreg
 13014  1EBB  0020               	movlb	0	; select bank0
 13015  1EBC  00DF               	movwf	USBConfigureEndpoint@EPNum
 13016                           
 13017                           ;usb_device.c: 1714: volatile BDT_ENTRY* handle;
 13018                           ;usb_device.c: 1718: handle = (volatile BDT_ENTRY*)&BDT[0];
 13019  1EBD  3020               	movlw	32
 13020  1EBE  0021               	movlb	1	; select bank1
 13021  1EBF  00A0               	movwf	??_USBConfigureEndpoint^(0+128)
 13022  1EC0  0820               	movf	??_USBConfigureEndpoint^(0+128),w
 13023  1EC1  0020               	movlb	0	; select bank0
 13024  1EC2  00E0               	movwf	USBConfigureEndpoint@handle
 13025                           
 13026                           ;usb_device.c: 1719: handle += (4*EPNum+2*direction+0u);
 13027  1EC3  085E               	movf	USBConfigureEndpoint@direction,w
 13028  1EC4  0021               	movlb	1	; select bank1
 13029  1EC5  00A0               	movwf	??_USBConfigureEndpoint^(0+128)
 13030  1EC6  3001               	movlw	1
 13031  1EC7                     u6855:	
 13032  1EC7  35A0               	lslf	??_USBConfigureEndpoint^(0+128),f
 13033  1EC8  0B89               	decfsz	9,f
 13034  1EC9  2EC7               	goto	u6855
 13035  1ECA  0020               	movlb	0	; select bank0
 13036  1ECB  085F               	movf	USBConfigureEndpoint@EPNum,w
 13037  1ECC  0021               	movlb	1	; select bank1
 13038  1ECD  00A1               	movwf	(??_USBConfigureEndpoint+1)^(0+128)
 13039  1ECE  3001               	movlw	1
 13040  1ECF                     u6865:	
 13041  1ECF  35A1               	lslf	(??_USBConfigureEndpoint+1)^(0+128),f
 13042  1ED0  3EFF               	addlw	-1
 13043  1ED1  1D03               	skipz
 13044  1ED2  2ECF               	goto	u6865
 13045  1ED3  3521               	lslf	(??_USBConfigureEndpoint+1)^(0+128),w
 13046  1ED4  0720               	addwf	??_USBConfigureEndpoint^(0+128),w
 13047  1ED5  00A2               	movwf	(??_USBConfigureEndpoint+2)^(0+128)
 13048  1ED6  3001               	movlw	1
 13049  1ED7                     u6875:	
 13050  1ED7  35A2               	lslf	(??_USBConfigureEndpoint+2)^(0+128),f
 13051  1ED8  3EFF               	addlw	-1
 13052  1ED9  1D03               	skipz
 13053  1EDA  2ED7               	goto	u6875
 13054  1EDB  3522               	lslf	(??_USBConfigureEndpoint+2)^(0+128),w
 13055  1EDC  00A3               	movwf	(??_USBConfigureEndpoint+3)^(0+128)
 13056  1EDD  0823               	movf	(??_USBConfigureEndpoint+3)^(0+128),w
 13057  1EDE  0020               	movlb	0	; select bank0
 13058  1EDF  07E0               	addwf	USBConfigureEndpoint@handle,f
 13059                           
 13060                           ;usb_device.c: 1721: handle->STAT.UOWN = 0;
 13061  1EE0  0860               	movf	USBConfigureEndpoint@handle,w
 13062  1EE1  0086               	movwf	6
 13063  1EE2  0187               	clrf	7
 13064  1EE3  1381               	bcf	1,7
 13065                           
 13066                           ;usb_device.c: 1726: if(direction == 0)
 13067  1EE4  08DE               	movf	USBConfigureEndpoint@direction,f
 13068  1EE5  1D03               	skipz
 13069  1EE6  2EF1               	goto	l6375
 13070                           
 13071                           ;usb_device.c: 1727: {
 13072                           ;usb_device.c: 1728: pBDTEntryOut[EPNum] = handle;
 13073  1EE7  0860               	movf	USBConfigureEndpoint@handle,w
 13074  1EE8  0021               	movlb	1	; select bank1
 13075  1EE9  00A0               	movwf	??_USBConfigureEndpoint^(0+128)
 13076  1EEA  0020               	movlb	0	; select bank0
 13077  1EEB  085F               	movf	USBConfigureEndpoint@EPNum,w
 13078  1EEC  3E59               	addlw	_pBDTEntryOut& (0+255)
 13079  1EED  0086               	movwf	6
 13080  1EEE  3001               	movlw	1	; select bank2/3
 13081  1EEF  0087               	movwf	7
 13082  1EF0  2EFA               	goto	L18
 13083  1EF1                     l6375:	
 13084                           ;usb_device.c: 1729: }
 13085                           
 13086                           
 13087                           ;usb_device.c: 1730: else
 13088                           ;usb_device.c: 1731: {
 13089                           ;usb_device.c: 1732: pBDTEntryIn[EPNum] = handle;
 13090  1EF1  0020               	movlb	0	; select bank0
 13091  1EF2  0860               	movf	USBConfigureEndpoint@handle,w
 13092  1EF3  0021               	movlb	1	; select bank1
 13093  1EF4  00A0               	movwf	??_USBConfigureEndpoint^(0+128)
 13094  1EF5  0020               	movlb	0	; select bank0
 13095  1EF6  085F               	movf	USBConfigureEndpoint@EPNum,w
 13096  1EF7  3EE0               	addlw	_pBDTEntryIn& (0+255)
 13097  1EF8  0086               	movwf	6
 13098  1EF9  0187               	clrf	7
 13099  1EFA                     L18:	
 13100  1EFA  0021               	movlb	1	; select bank1
 13101  1EFB  0820               	movf	??_USBConfigureEndpoint^(0+128),w
 13102  1EFC  0081               	movwf	1
 13103                           
 13104                           ;usb_device.c: 1733: }
 13105                           ;usb_device.c: 1736: handle->STAT.DTS = 0;
 13106  1EFD  0020               	movlb	0	; select bank0
 13107  1EFE  0860               	movf	USBConfigureEndpoint@handle,w
 13108  1EFF  0086               	movwf	6
 13109  1F00  0187               	clrf	7
 13110  1F01  1301               	bcf	1,6
 13111                           
 13112                           ;usb_device.c: 1737: (handle+1)->STAT.DTS = 1;
 13113  1F02  0860               	movf	USBConfigureEndpoint@handle,w
 13114  1F03  3E04               	addlw	4
 13115  1F04  0086               	movwf	6
 13116  1F05  0187               	clrf	7
 13117  1F06  1701               	bsf	1,6
 13118  1F07  0008               	return
 13119  1F08                     __end_of_USBConfigureEndpoint:	
 13120                           
 13121                           	psect	text52
 13122  07FF                     __ptext52:	
 13123 ;; *************** function _USBCBStdSetDscHandler *****************
 13124 ;; Defined at:
 13125 ;;		line 434 in file "main.c"
 13126 ;; Parameters:    Size  Location     Type
 13127 ;;		None
 13128 ;; Auto vars:     Size  Location     Type
 13129 ;;		None
 13130 ;; Return value:  Size  Location     Type
 13131 ;;		None               void
 13132 ;; Registers used:
 13133 ;;		None
 13134 ;; Tracked objects:
 13135 ;;		On entry : 0/0
 13136 ;;		On exit  : 0/0
 13137 ;;		Unchanged: 0/0
 13138 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13139 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13140 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13141 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13142 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13143 ;;Total ram usage:        0 bytes
 13144 ;; Hardware stack levels used:    1
 13145 ;; Hardware stack levels required when called:    4
 13146 ;; This function calls:
 13147 ;;		Nothing
 13148 ;; This function is called by:
 13149 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 13150 ;; This function uses a non-reentrant model
 13151 ;;
 13152                           
 13153                           
 13154                           ;psect for function _USBCBStdSetDscHandler
 13155  07FF                     _USBCBStdSetDscHandler:	
 13156                           
 13157                           ;incstack = 0
 13158                           ; Regs used in _USBCBStdSetDscHandler: []
 13159  07FF  0008               	return
 13160  0800                     __end_of_USBCBStdSetDscHandler:	
 13161                           
 13162                           	psect	text53
 13163  1000                     __ptext53:	
 13164 ;; *************** function _USBCBCheckOtherReq *****************
 13165 ;; Defined at:
 13166 ;;		line 409 in file "main.c"
 13167 ;; Parameters:    Size  Location     Type
 13168 ;;		None
 13169 ;; Auto vars:     Size  Location     Type
 13170 ;;		None
 13171 ;; Return value:  Size  Location     Type
 13172 ;;		None               void
 13173 ;; Registers used:
 13174 ;;		status,2, status,0, pclath, cstack
 13175 ;; Tracked objects:
 13176 ;;		On entry : 0/0
 13177 ;;		On exit  : 0/0
 13178 ;;		Unchanged: 0/0
 13179 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13180 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13181 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13182 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13183 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13184 ;;Total ram usage:        0 bytes
 13185 ;; Hardware stack levels used:    1
 13186 ;; Hardware stack levels required when called:    5
 13187 ;; This function calls:
 13188 ;;		_USBCheckVendorRequest
 13189 ;; This function is called by:
 13190 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 13191 ;; This function uses a non-reentrant model
 13192 ;;
 13193                           
 13194                           
 13195                           ;psect for function _USBCBCheckOtherReq
 13196  1000                     _USBCBCheckOtherReq:	
 13197                           
 13198                           ;main.c: 410: USBCheckVendorRequest();
 13199                           
 13200                           ;incstack = 0
 13201                           ; Regs used in _USBCBCheckOtherReq: [status,2+status,0+pclath+cstack]
 13202  1000  3180  2003         	fcall	_USBCheckVendorRequest
 13203  1002  0008               	return
 13204  1003                     __end_of_USBCBCheckOtherReq:	
 13205                           
 13206                           	psect	text54
 13207  0003                     __ptext54:	
 13208 ;; *************** function _USBCheckVendorRequest *****************
 13209 ;; Defined at:
 13210 ;;		line 248 in file "../USB/usb_function_generic.c"
 13211 ;; Parameters:    Size  Location     Type
 13212 ;;		None
 13213 ;; Auto vars:     Size  Location     Type
 13214 ;;		None
 13215 ;; Return value:  Size  Location     Type
 13216 ;;		None               void
 13217 ;; Registers used:
 13218 ;;		None
 13219 ;; Tracked objects:
 13220 ;;		On entry : 0/0
 13221 ;;		On exit  : 0/0
 13222 ;;		Unchanged: 0/0
 13223 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13224 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13225 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13226 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13227 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13228 ;;Total ram usage:        0 bytes
 13229 ;; Hardware stack levels used:    1
 13230 ;; Hardware stack levels required when called:    4
 13231 ;; This function calls:
 13232 ;;		Nothing
 13233 ;; This function is called by:
 13234 ;;		_USBCBCheckOtherReq
 13235 ;; This function uses a non-reentrant model
 13236 ;;
 13237                           
 13238                           
 13239                           ;psect for function _USBCheckVendorRequest
 13240  0003                     _USBCheckVendorRequest:	
 13241                           
 13242                           ;incstack = 0
 13243                           ; Regs used in _USBCheckVendorRequest: []
 13244  0003  0008               	return
 13245  0004                     __end_of_USBCheckVendorRequest:	
 13246                           
 13247                           	psect	text55
 13248  0002                     __ptext55:	
 13249 ;; *************** function _USBCBErrorHandler *****************
 13250 ;; Defined at:
 13251 ;;		line 358 in file "main.c"
 13252 ;; Parameters:    Size  Location     Type
 13253 ;;		None
 13254 ;; Auto vars:     Size  Location     Type
 13255 ;;		None
 13256 ;; Return value:  Size  Location     Type
 13257 ;;		None               void
 13258 ;; Registers used:
 13259 ;;		None
 13260 ;; Tracked objects:
 13261 ;;		On entry : 0/0
 13262 ;;		On exit  : 0/0
 13263 ;;		Unchanged: 0/0
 13264 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13265 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13266 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13267 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13268 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13269 ;;Total ram usage:        0 bytes
 13270 ;; Hardware stack levels used:    1
 13271 ;; Hardware stack levels required when called:    4
 13272 ;; This function calls:
 13273 ;;		Nothing
 13274 ;; This function is called by:
 13275 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 13276 ;; This function uses a non-reentrant model
 13277 ;;
 13278                           
 13279                           
 13280                           ;psect for function _USBCBErrorHandler
 13281  0002                     _USBCBErrorHandler:	
 13282                           
 13283                           ;incstack = 0
 13284                           ; Regs used in _USBCBErrorHandler: []
 13285  0002  0008               	return
 13286  0003                     __end_of_USBCBErrorHandler:	
 13287                           
 13288                           	psect	text56
 13289  08B0                     __ptext56:	
 13290 ;; *************** function _USBCB_SOF_Handler *****************
 13291 ;; Defined at:
 13292 ;;		line 335 in file "main.c"
 13293 ;; Parameters:    Size  Location     Type
 13294 ;;		None
 13295 ;; Auto vars:     Size  Location     Type
 13296 ;;		None
 13297 ;; Return value:  Size  Location     Type
 13298 ;;		None               void
 13299 ;; Registers used:
 13300 ;;		None
 13301 ;; Tracked objects:
 13302 ;;		On entry : 0/0
 13303 ;;		On exit  : 0/0
 13304 ;;		Unchanged: 0/0
 13305 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13306 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13307 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13308 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13309 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13310 ;;Total ram usage:        0 bytes
 13311 ;; Hardware stack levels used:    1
 13312 ;; Hardware stack levels required when called:    4
 13313 ;; This function calls:
 13314 ;;		Nothing
 13315 ;; This function is called by:
 13316 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 13317 ;; This function uses a non-reentrant model
 13318 ;;
 13319                           
 13320                           
 13321                           ;psect for function _USBCB_SOF_Handler
 13322  08B0                     _USBCB_SOF_Handler:	
 13323                           
 13324                           ;incstack = 0
 13325                           ; Regs used in _USBCB_SOF_Handler: []
 13326  08B0  0008               	return
 13327  08B1                     __end_of_USBCB_SOF_Handler:	
 13328                           
 13329                           	psect	text57
 13330  08AF                     __ptext57:	
 13331 ;; *************** function _USBCBWakeFromSuspend *****************
 13332 ;; Defined at:
 13333 ;;		line 305 in file "main.c"
 13334 ;; Parameters:    Size  Location     Type
 13335 ;;		None
 13336 ;; Auto vars:     Size  Location     Type
 13337 ;;		None
 13338 ;; Return value:  Size  Location     Type
 13339 ;;		None               void
 13340 ;; Registers used:
 13341 ;;		None
 13342 ;; Tracked objects:
 13343 ;;		On entry : 0/0
 13344 ;;		On exit  : 0/0
 13345 ;;		Unchanged: 0/0
 13346 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13347 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13348 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13349 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13350 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13351 ;;Total ram usage:        0 bytes
 13352 ;; Hardware stack levels used:    1
 13353 ;; Hardware stack levels required when called:    4
 13354 ;; This function calls:
 13355 ;;		Nothing
 13356 ;; This function is called by:
 13357 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 13358 ;;		_USBCBSendResume
 13359 ;; This function uses a non-reentrant model
 13360 ;;
 13361                           
 13362                           
 13363                           ;psect for function _USBCBWakeFromSuspend
 13364  08AF                     _USBCBWakeFromSuspend:	
 13365                           
 13366                           ;incstack = 0
 13367                           ; Regs used in _USBCBWakeFromSuspend: []
 13368  08AF  0008               	return
 13369  08B0                     __end_of_USBCBWakeFromSuspend:	
 13370                           
 13371                           	psect	text58
 13372  1B5E                     __ptext58:	
 13373 ;; *************** function _USBCBSuspend *****************
 13374 ;; Defined at:
 13375 ;;		line 264 in file "main.c"
 13376 ;; Parameters:    Size  Location     Type
 13377 ;;		None
 13378 ;; Auto vars:     Size  Location     Type
 13379 ;;		None
 13380 ;; Return value:  Size  Location     Type
 13381 ;;		None               void
 13382 ;; Registers used:
 13383 ;;		None
 13384 ;; Tracked objects:
 13385 ;;		On entry : 0/0
 13386 ;;		On exit  : 0/0
 13387 ;;		Unchanged: 0/0
 13388 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13389 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13390 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13391 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13392 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13393 ;;Total ram usage:        0 bytes
 13394 ;; Hardware stack levels used:    1
 13395 ;; Hardware stack levels required when called:    4
 13396 ;; This function calls:
 13397 ;;		Nothing
 13398 ;; This function is called by:
 13399 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 13400 ;; This function uses a non-reentrant model
 13401 ;;
 13402                           
 13403                           
 13404                           ;psect for function _USBCBSuspend
 13405  1B5E                     _USBCBSuspend:	
 13406                           
 13407                           ;incstack = 0
 13408                           ; Regs used in _USBCBSuspend: []
 13409  1B5E  0008               	return
 13410  1B5F                     __end_of_USBCBSuspend:	
 13411                           
 13412                           	psect	text59
 13413  0984                     __ptext59:	
 13414 ;; *************** function _USBDeviceInit *****************
 13415 ;; Defined at:
 13416 ;;		line 467 in file "../USB/usb_device.c"
 13417 ;; Parameters:    Size  Location     Type
 13418 ;;		None
 13419 ;; Auto vars:     Size  Location     Type
 13420 ;;  p               2    0[BANK1 ] PTR unsigned char 
 13421 ;;		 -> UEP1(1), 
 13422 ;;  i               1    2[BANK1 ] unsigned char 
 13423 ;;  i               1    3[BANK1 ] unsigned char 
 13424 ;; Return value:  Size  Location     Type
 13425 ;;		None               void
 13426 ;; Registers used:
 13427 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13428 ;; Tracked objects:
 13429 ;;		On entry : 0/0
 13430 ;;		On exit  : 0/0
 13431 ;;		Unchanged: 0/0
 13432 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13433 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13434 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
 13435 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13436 ;;      Totals:         0       2       4       0       0       0       0       0       0       0       0       0       
      +0       0
 13437 ;;Total ram usage:        6 bytes
 13438 ;; Hardware stack levels used:    1
 13439 ;; Hardware stack levels required when called:    4
 13440 ;; This function calls:
 13441 ;;		Nothing
 13442 ;; This function is called by:
 13443 ;;		_USBDeviceTasks
 13444 ;;		_InitializeSystem
 13445 ;; This function uses a non-reentrant model
 13446 ;;
 13447                           
 13448                           
 13449                           ;psect for function _USBDeviceInit
 13450  0984                     _USBDeviceInit:	
 13451                           
 13452                           ;usb_device.c: 468: BYTE i;
 13453                           ;usb_device.c: 470: {PIE2bits.USBIE = 0;};
 13454                           
 13455                           ;incstack = 0
 13456                           ; Regs used in _USBDeviceInit: [wreg+fsr1l+fsr1h+status,2+status,0]
 13457  0984  0021               	movlb	1	; select bank1
 13458  0985  1112               	bcf	18,2	;volatile
 13459                           
 13460                           ;usb_device.c: 473: UEIR = 0;;
 13461  0986  003D               	movlb	29	; select bank29
 13462  0987  0193               	clrf	19	;volatile
 13463                           
 13464                           ;usb_device.c: 476: UIR = 0;;
 13465  0988  0190               	clrf	16	;volatile
 13466                           
 13467                           ;usb_device.c: 479: UEP0 = 0;
 13468  0989  0198               	clrf	24	;volatile
 13469                           
 13470                           ;usb_device.c: 481: { BYTE i; BYTE* p = (BYTE*)&UEP1; for(i=0;i<1;i++) *p++ = 0; };
 13471  098A  300E               	movlw	14
 13472  098B  0021               	movlb	1	; select bank1
 13473  098C  00A1               	movwf	(USBDeviceInit@p+1)^(0+128)
 13474  098D  3099               	movlw	153
 13475  098E  00A0               	movwf	USBDeviceInit@p^(0+128)
 13476  098F  01A2               	clrf	USBDeviceInit@i_718^(0+128)
 13477  0990  0822               	movf	USBDeviceInit@i_718^(0+128),w
 13478  0991  1D03               	skipz
 13479  0992  29A5               	goto	l4143
 13480  0993                     l4135:	
 13481  0993  0820               	movf	USBDeviceInit@p^(0+128),w
 13482  0994  0086               	movwf	6
 13483  0995  0821               	movf	(USBDeviceInit@p+1)^(0+128),w
 13484  0996  0087               	movwf	7
 13485  0997  0181               	clrf	1
 13486  0998  3001               	movlw	1
 13487  0999  07A0               	addwf	USBDeviceInit@p^(0+128),f
 13488  099A  3000               	movlw	0
 13489  099B  3DA1               	addwfc	(USBDeviceInit@p+1)^(0+128),f
 13490  099C  3001               	movlw	1
 13491  099D  0020               	movlb	0	; select bank0
 13492  099E  00DE               	movwf	??_USBDeviceInit
 13493  099F  085E               	movf	??_USBDeviceInit,w
 13494  09A0  0021               	movlb	1	; select bank1
 13495  09A1  07A2               	addwf	USBDeviceInit@i_718^(0+128),f
 13496  09A2  0822               	movf	USBDeviceInit@i_718^(0+128),w
 13497  09A3  1903               	btfsc	3,2
 13498  09A4  2993               	goto	l4135
 13499  09A5                     l4143:	
 13500                           
 13501                           ;usb_device.c: 483: { UCFG = 0x10 | 0x00 | 0x04 | 0x02; UEIE = 0x9F; UIE = 0x39 | 0x40 |
      +                           0x02; };
 13502  09A5  3016               	movlw	22
 13503  09A6  003D               	movlb	29	; select bank29
 13504  09A7  0091               	movwf	17	;volatile
 13505  09A8  309F               	movlw	159
 13506  09A9  0097               	movwf	23	;volatile
 13507  09AA  307B               	movlw	123
 13508  09AB  0092               	movwf	18	;volatile
 13509                           
 13510                           ;usb_device.c: 486: ;
 13511                           ;usb_device.c: 489: ;
 13512                           ;usb_device.c: 492: for(i=0;i<(sizeof(BDT)/sizeof(BDT_ENTRY));i++)
 13513  09AC  0021               	movlb	1	; select bank1
 13514  09AD  01A3               	clrf	USBDeviceInit@i^(0+128)
 13515  09AE  3008               	movlw	8
 13516  09AF  0223               	subwf	USBDeviceInit@i^(0+128),w
 13517  09B0  1803               	btfsc	3,0
 13518  09B1  29CD               	goto	l128
 13519  09B2                     l4151:	
 13520                           
 13521                           ;usb_device.c: 493: {
 13522                           ;usb_device.c: 494: BDT[i].Val = 0x00;
 13523  09B2  0823               	movf	USBDeviceInit@i^(0+128),w
 13524  09B3  0020               	movlb	0	; select bank0
 13525  09B4  00DE               	movwf	??_USBDeviceInit
 13526  09B5  3001               	movlw	1
 13527  09B6                     u3335:	
 13528  09B6  35DE               	lslf	??_USBDeviceInit,f
 13529  09B7  3EFF               	addlw	-1
 13530  09B8  1D03               	skipz
 13531  09B9  29B6               	goto	u3335
 13532  09BA  355E               	lslf	??_USBDeviceInit,w
 13533  09BB  3E20               	addlw	32
 13534  09BC  0086               	movwf	6
 13535  09BD  0187               	clrf	7
 13536  09BE  3000               	movlw	0
 13537  09BF  3FC0               	movwi [0]fsr1
 13538  09C0  3000               	movlw	0
 13539  09C1  3FC1               	movwi [1]fsr1
 13540  09C2  3FC2               	movwi [2]fsr1
 13541  09C3  3FC3               	movwi [3]fsr1
 13542  09C4  3001               	movlw	1
 13543  09C5  00DE               	movwf	??_USBDeviceInit
 13544  09C6  085E               	movf	??_USBDeviceInit,w
 13545  09C7  0021               	movlb	1	; select bank1
 13546  09C8  07A3               	addwf	USBDeviceInit@i^(0+128),f
 13547  09C9  3008               	movlw	8
 13548  09CA  0223               	subwf	USBDeviceInit@i^(0+128),w
 13549  09CB  1C03               	skipc
 13550  09CC  29B2               	goto	l4151
 13551  09CD                     l128:	
 13552                           
 13553                           ;usb_device.c: 495: }
 13554                           ;usb_device.c: 498: UCONbits.PPBRST = 1;
 13555  09CD  003D               	movlb	29	; select bank29
 13556  09CE  170E               	bsf	14,6	;volatile
 13557                           
 13558                           ;usb_device.c: 501: UADDR = 0x00;
 13559  09CF  0196               	clrf	22	;volatile
 13560                           
 13561                           ;usb_device.c: 504: UCONbits.PKTDIS = 0;
 13562  09D0  120E               	bcf	14,4	;volatile
 13563                           
 13564                           ;usb_device.c: 507: UCONbits.PPBRST = 0;
 13565  09D1  130E               	bcf	14,6	;volatile
 13566  09D2                     l4171:	
 13567                           ;usb_device.c: 510: while(UIRbits.TRNIF == 1)
 13568                           
 13569  09D2  003D               	movlb	29	; select bank29
 13570  09D3  1D90               	btfss	16,3	;volatile
 13571  09D4  29E2               	goto	l4173
 13572                           
 13573                           ;usb_device.c: 511: {
 13574                           ;usb_device.c: 512: (UIR &= 0xF7);
 13575  09D5  30F7               	movlw	247
 13576  09D6  0020               	movlb	0	; select bank0
 13577  09D7  00DE               	movwf	??_USBDeviceInit
 13578  09D8  085E               	movf	??_USBDeviceInit,w
 13579  09D9  003D               	movlb	29	; select bank29
 13580  09DA  0590               	andwf	16,f	;volatile
 13581                           
 13582                           ;usb_device.c: 514: inPipes[0].info.Val = 0;
 13583  09DB  0021               	movlb	1	; select bank1
 13584  09DC  01E9               	clrf	(_inPipes^(0+128)+2)
 13585                           
 13586                           ;usb_device.c: 515: outPipes[0].info.Val = 0;
 13587  09DD  0023               	movlb	3	; select bank3
 13588  09DE  01C9               	clrf	(_outPipes^(0+384)+2)
 13589                           
 13590                           ;usb_device.c: 516: outPipes[0].wCount.Val = 0;
 13591  09DF  01CA               	clrf	(_outPipes^(0+384)+3)
 13592  09E0  01CB               	clrf	((_outPipes+1)^(0+384)+3)
 13593  09E1  29D2               	goto	l4171
 13594  09E2                     l4173:	
 13595                           
 13596                           ;usb_device.c: 517: }
 13597                           ;usb_device.c: 521: USBStatusStageEnabledFlag1 = TRUE;
 13598  09E2  3001               	movlw	1
 13599  09E3  0020               	movlb	0	; select bank0
 13600  09E4  00DE               	movwf	??_USBDeviceInit
 13601  09E5  085E               	movf	??_USBDeviceInit,w
 13602  09E6  0022               	movlb	2	; select bank2
 13603  09E7  00EA               	movwf	_USBStatusStageEnabledFlag1^(0+256)	;volatile
 13604                           
 13605                           ;usb_device.c: 522: USBStatusStageEnabledFlag2 = TRUE;
 13606  09E8  3001               	movlw	1
 13607  09E9  0020               	movlb	0	; select bank0
 13608  09EA  00DE               	movwf	??_USBDeviceInit
 13609  09EB  085E               	movf	??_USBDeviceInit,w
 13610  09EC  0022               	movlb	2	; select bank2
 13611  09ED  00EB               	movwf	_USBStatusStageEnabledFlag2^(0+256)	;volatile
 13612                           
 13613                           ;usb_device.c: 524: USBDeferINDataStagePackets = FALSE;
 13614  09EE  01E6               	clrf	_USBDeferINDataStagePackets^(0+256)	;volatile
 13615                           
 13616                           ;usb_device.c: 525: USBDeferOUTDataStagePackets = FALSE;
 13617  09EF  01E7               	clrf	_USBDeferOUTDataStagePackets^(0+256)	;volatile
 13618                           
 13619                           ;usb_device.c: 526: USBBusIsSuspended = FALSE;
 13620  09F0  01E5               	clrf	_USBBusIsSuspended^(0+256)
 13621                           
 13622                           ;usb_device.c: 530: for(i = 0; i < (BYTE)(1+1u); i++)
 13623  09F1  0021               	movlb	1	; select bank1
 13624  09F2  01A3               	clrf	USBDeviceInit@i^(0+128)
 13625  09F3  3002               	movlw	2
 13626  09F4  0223               	subwf	USBDeviceInit@i^(0+128),w
 13627  09F5  1803               	btfsc	3,0
 13628  09F6  2A18               	goto	l4191
 13629  09F7                     l4185:	
 13630                           
 13631                           ;usb_device.c: 531: {
 13632                           ;usb_device.c: 532: pBDTEntryIn[i] = 0u;
 13633  09F7  0823               	movf	USBDeviceInit@i^(0+128),w
 13634  09F8  3EE0               	addlw	_pBDTEntryIn& (0+255)
 13635  09F9  0086               	movwf	6
 13636  09FA  0187               	clrf	7
 13637  09FB  0181               	clrf	1
 13638                           
 13639                           ;usb_device.c: 533: pBDTEntryOut[i] = 0u;
 13640  09FC  0823               	movf	USBDeviceInit@i^(0+128),w
 13641  09FD  3E59               	addlw	_pBDTEntryOut& (0+255)
 13642  09FE  0086               	movwf	6
 13643  09FF  3001               	movlw	1	; select bank2/3
 13644  0A00  0087               	movwf	7
 13645  0A01  0181               	clrf	1
 13646                           
 13647                           ;usb_device.c: 534: ep_data_in[i].Val = 0u;
 13648  0A02  0823               	movf	USBDeviceInit@i^(0+128),w
 13649  0A03  3ED1               	addlw	_ep_data_in& (0+255)
 13650  0A04  0086               	movwf	6
 13651  0A05  3001               	movlw	1	; select bank3/4
 13652  0A06  0087               	movwf	7
 13653  0A07  0181               	clrf	1
 13654                           
 13655                           ;usb_device.c: 535: ep_data_out[i].Val = 0u;
 13656  0A08  0823               	movf	USBDeviceInit@i^(0+128),w
 13657  0A09  3ED3               	addlw	_ep_data_out& (0+255)
 13658  0A0A  0086               	movwf	6
 13659  0A0B  3001               	movlw	1	; select bank3/4
 13660  0A0C  0087               	movwf	7
 13661  0A0D  0181               	clrf	1
 13662  0A0E  3001               	movlw	1
 13663  0A0F  0020               	movlb	0	; select bank0
 13664  0A10  00DE               	movwf	??_USBDeviceInit
 13665  0A11  085E               	movf	??_USBDeviceInit,w
 13666  0A12  0021               	movlb	1	; select bank1
 13667  0A13  07A3               	addwf	USBDeviceInit@i^(0+128),f
 13668  0A14  3002               	movlw	2
 13669  0A15  0223               	subwf	USBDeviceInit@i^(0+128),w
 13670  0A16  1C03               	skipc
 13671  0A17  29F7               	goto	l4185
 13672  0A18                     l4191:	
 13673                           
 13674                           ;usb_device.c: 536: }
 13675                           ;usb_device.c: 539: pBDTEntryIn[0] = (volatile BDT_ENTRY*)&BDT[2];
 13676  0A18  3028               	movlw	40
 13677  0A19  0020               	movlb	0	; select bank0
 13678  0A1A  00DE               	movwf	??_USBDeviceInit
 13679  0A1B  085E               	movf	??_USBDeviceInit,w
 13680  0A1C  0021               	movlb	1	; select bank1
 13681  0A1D  00E0               	movwf	_pBDTEntryIn^(0+128)
 13682                           
 13683                           ;usb_device.c: 541: UEP0 = 0x06|0x10;
 13684  0A1E  3016               	movlw	22
 13685  0A1F  003D               	movlb	29	; select bank29
 13686  0A20  0098               	movwf	24	;volatile
 13687                           
 13688                           ;usb_device.c: 543: BDT[0].ADR = (((WORD)(&SetupPkt))& 0x7FFF);
 13689  0A21  3040               	movlw	64
 13690  0A22  0020               	movlb	0	; select bank0
 13691  0A23  00DE               	movwf	??_USBDeviceInit
 13692  0A24  3000               	movlw	0
 13693  0A25  00DF               	movwf	??_USBDeviceInit+1
 13694  0A26  085E               	movf	??_USBDeviceInit,w
 13695  0A27  00A2               	movwf	34	;volatile
 13696  0A28  085F               	movf	??_USBDeviceInit+1,w
 13697  0A29  00A3               	movwf	35	;volatile
 13698                           
 13699                           ;usb_device.c: 544: BDT[0].CNT = 8;
 13700  0A2A  3008               	movlw	8
 13701  0A2B  00A1               	movwf	33	;volatile
 13702                           
 13703                           ;usb_device.c: 545: BDT[0].STAT.Val = 0x80|0x00|0x04;
 13704  0A2C  3084               	movlw	132
 13705  0A2D  00DE               	movwf	??_USBDeviceInit
 13706  0A2E  085E               	movf	??_USBDeviceInit,w
 13707  0A2F  00A0               	movwf	32	;volatile
 13708                           
 13709                           ;usb_device.c: 548: USBActiveConfiguration = 0;
 13710  0A30  0021               	movlb	1	; select bank1
 13711  0A31  01EC               	clrf	_USBActiveConfiguration^(0+128)
 13712                           
 13713                           ;usb_device.c: 551: USBDeviceState = DETACHED_STATE;
 13714  0A32  01E3               	clrf	_USBDeviceState^(0+128)
 13715  0A33  0008               	return
 13716  0A34                     __end_of_USBDeviceInit:	
 13717                           
 13718                           	psect	intentry
 13719  0004                     __pintentry:	
 13720 ;; *************** function _ISRCode *****************
 13721 ;; Defined at:
 13722 ;;		line 70 in file "main.c"
 13723 ;; Parameters:    Size  Location     Type
 13724 ;;		None
 13725 ;; Auto vars:     Size  Location     Type
 13726 ;;		None
 13727 ;; Return value:  Size  Location     Type
 13728 ;;		None               void
 13729 ;; Registers used:
 13730 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
 13731 ;; Tracked objects:
 13732 ;;		On entry : 0/0
 13733 ;;		On exit  : 0/0
 13734 ;;		Unchanged: 0/0
 13735 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13736 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13737 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13738 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13739 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13740 ;;Total ram usage:        1 bytes
 13741 ;; Hardware stack levels used:    1
 13742 ;; Hardware stack levels required when called:    3
 13743 ;; This function calls:
 13744 ;;		_ResultRx
 13745 ;; This function is called by:
 13746 ;;		Interrupt level 1
 13747 ;; This function uses a non-reentrant model
 13748 ;;
 13749                           
 13750  0004                     _ISRCode:	
 13751                           
 13752                           ;incstack = 0
 13753                           ; Regs used in _ISRCode: [wreg-fsr1h+status,2+status,0+btemp+1+pclath+cstack]
 13754  0004  3180               	pagesel	$
 13755  0005  0020               	movlb	0	; select bank0
 13756  0006  087F               	movf	127,w
 13757  0007  00DD               	movwf	??_ISRCode
 13758                           
 13759                           ;main.c: 72: if(IOCBF)
 13760  0008  0027               	movlb	7	; select bank7
 13761  0009  0816               	movf	22,w	;volatile
 13762  000A  1903               	btfsc	3,2
 13763  000B  280E               	goto	i1l852
 13764                           
 13765                           ;main.c: 73: ResultRx();
 13766  000C  318A  22E6         	fcall	_ResultRx
 13767  000E                     i1l852:	
 13768  000E  0020               	movlb	0	; select bank0
 13769  000F  085D               	movf	??_ISRCode,w
 13770  0010  00FF               	movwf	127
 13771  0011  0009               	retfie
 13772  0012                     __end_of_ISRCode:	
 13773                           
 13774                           	psect	text61
 13775  0AE6                     __ptext61:	
 13776 ;; *************** function _ResultRx *****************
 13777 ;; Defined at:
 13778 ;;		line 191 in file "klondike.c"
 13779 ;; Parameters:    Size  Location     Type
 13780 ;;		None
 13781 ;; Auto vars:     Size  Location     Type
 13782 ;;		None
 13783 ;; Return value:  Size  Location     Type
 13784 ;;		None               void
 13785 ;; Registers used:
 13786 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
 13787 ;; Tracked objects:
 13788 ;;		On entry : 0/0
 13789 ;;		On exit  : 0/0
 13790 ;;		Unchanged: 0/0
 13791 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13792 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13793 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13794 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13795 ;;      Totals:         2       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13796 ;;Total ram usage:        7 bytes
 13797 ;; Hardware stack levels used:    1
 13798 ;; Hardware stack levels required when called:    2
 13799 ;; This function calls:
 13800 ;;		i1_SendCmdReply
 13801 ;;		i1___bmul
 13802 ;; This function is called by:
 13803 ;;		_ISRCode
 13804 ;; This function uses a non-reentrant model
 13805 ;;
 13806                           
 13807                           
 13808                           ;psect for function _ResultRx
 13809  0AE6                     _ResultRx:	
 13810                           
 13811                           ;klondike.c: 192: TimeOut = 0;
 13812                           
 13813                           ;incstack = 0
 13814                           ; Regs used in _ResultRx: [wreg-fsr1h+status,2+status,0+btemp+1+pclath+cstack]
 13815  0AE6  0022               	movlb	2	; select bank2
 13816  0AE7  01E4               	clrf	_TimeOut^(0+256)
 13817                           
 13818                           ;klondike.c: 193: ResultPos++;
 13819  0AE8  3001               	movlw	1
 13820  0AE9  0020               	movlb	0	; select bank0
 13821  0AEA  00D8               	movwf	??_ResultRx
 13822  0AEB  0858               	movf	??_ResultRx,w
 13823  0AEC  07E7               	addwf	_ResultPos,f
 13824                           
 13825                           ;klondike.c: 195: if(ResultPos == 2)
 13826  0AED  0867               	movf	_ResultPos,w
 13827  0AEE  3A02               	xorlw	2
 13828  0AEF  1903               	btfsc	3,2
 13829                           
 13830                           ;klondike.c: 196: ResultPos = 0;
 13831  0AF0  01E7               	clrf	_ResultPos
 13832  0AF1                     i1l6047:	
 13833                           ;klondike.c: 198: while(ResultQC < 4) {
 13834                           
 13835  0AF1  3004               	movlw	4
 13836  0AF2  0022               	movlb	2	; select bank2
 13837  0AF3  0262               	subwf	_ResultQC^(0+256),w
 13838  0AF4  1803               	btfsc	3,0
 13839  0AF5  2B3B               	goto	i1l6049
 13840                           
 13841                           ;klondike.c: 199: if(RCIF) {
 13842  0AF6  0020               	movlb	0	; select bank0
 13843  0AF7  1E91               	btfss	17,5	;volatile
 13844  0AF8  2B1C               	goto	i1l6039
 13845                           
 13846                           ;klondike.c: 200: ResultQue[ResultPos][2+ResultQC++] = RCREG;
 13847  0AF9  0023               	movlb	3	; select bank3
 13848  0AFA  0819               	movf	25,w	;volatile
 13849  0AFB  0020               	movlb	0	; select bank0
 13850  0AFC  00D8               	movwf	??_ResultRx
 13851  0AFD  3002               	movlw	2
 13852  0AFE  0022               	movlb	2	; select bank2
 13853  0AFF  0762               	addwf	_ResultQC^(0+256),w
 13854  0B00  0020               	movlb	0	; select bank0
 13855  0B01  00D9               	movwf	??_ResultRx+1
 13856  0B02  30D5               	movlw	_ResultQue& (0+255)
 13857  0B03  0759               	addwf	??_ResultRx+1,w
 13858  0B04  00DA               	movwf	??_ResultRx+2
 13859  0B05  3006               	movlw	6
 13860  0B06  00DB               	movwf	??_ResultRx+3
 13861  0B07  085B               	movf	??_ResultRx+3,w
 13862  0B08  00F0               	movwf	?i1___bmul
 13863  0B09  0867               	movf	_ResultPos,w
 13864  0B0A  319B  2380  318A   	fcall	i1___bmul
 13865  0B0D  0020               	movlb	0	; select bank0
 13866  0B0E  075A               	addwf	??_ResultRx+2,w
 13867  0B0F  00DC               	movwf	??_ResultRx+4
 13868  0B10  085C               	movf	??_ResultRx+4,w
 13869  0B11  0086               	movwf	6
 13870  0B12  3001               	movlw	1	; select bank3/4
 13871  0B13  0087               	movwf	7
 13872  0B14  0858               	movf	??_ResultRx,w
 13873  0B15  0081               	movwf	1
 13874  0B16  3001               	movlw	1
 13875  0B17  00D8               	movwf	??_ResultRx
 13876  0B18  0858               	movf	??_ResultRx,w
 13877  0B19  0022               	movlb	2	; select bank2
 13878  0B1A  07E2               	addwf	_ResultQC^(0+256),f
 13879                           
 13880                           ;klondike.c: 201: TimeOut = 0;
 13881  0B1B  01E4               	clrf	_TimeOut^(0+256)
 13882  0B1C                     i1l6039:	
 13883                           
 13884                           ;klondike.c: 202: }
 13885                           ;klondike.c: 203: if(TimeOut++ > 32) {
 13886  0B1C  3001               	movlw	1
 13887  0B1D  0020               	movlb	0	; select bank0
 13888  0B1E  00D8               	movwf	??_ResultRx
 13889  0B1F  0858               	movf	??_ResultRx,w
 13890  0B20  0022               	movlb	2	; select bank2
 13891  0B21  07E4               	addwf	_TimeOut^(0+256),f
 13892  0B22  3022               	movlw	34
 13893  0B23  0264               	subwf	_TimeOut^(0+256),w
 13894  0B24  1C03               	skipc
 13895  0B25  2B2D               	goto	i1l741
 13896                           
 13897                           ;klondike.c: 204: Status.Noise++;
 13898  0B26  3001               	movlw	1
 13899  0B27  0020               	movlb	0	; select bank0
 13900  0B28  00D8               	movwf	??_ResultRx
 13901  0B29  0858               	movf	??_ResultRx,w
 13902  0B2A  0023               	movlb	3	; select bank3
 13903  0B2B  07B8               	addwf	(_Status^(0+384)+12),f	;volatile
 13904                           
 13905                           ;klondike.c: 205: goto outrx;
 13906  0B2C  2B91               	goto	i1l6059
 13907  0B2D                     i1l741:	
 13908                           
 13909                           ;klondike.c: 206: }
 13910                           ;klondike.c: 207: if(RCSTAbits.OERR) {
 13911  0B2D  0023               	movlb	3	; select bank3
 13912  0B2E  1C9D               	btfss	29,1	;volatile
 13913  0B2F  2AF1               	goto	i1l6047
 13914                           
 13915                           ;klondike.c: 208: if(Status.State == 'W') {
 13916  0B30  082C               	movf	_Status^(0+384),w	;volatile
 13917  0B31  3A57               	xorlw	87
 13918  0B32  1D03               	skipz
 13919  0B33  2B91               	goto	i1l6059
 13920                           
 13921                           ;klondike.c: 209: Status.ErrorCount++;
 13922  0B34  3001               	movlw	1
 13923  0B35  0020               	movlb	0	; select bank0
 13924  0B36  00D8               	movwf	??_ResultRx
 13925  0B37  0858               	movf	??_ResultRx,w
 13926  0B38  0023               	movlb	3	; select bank3
 13927  0B39  07B3               	addwf	(_Status^(0+384)+7),f	;volatile
 13928                           
 13929                           ;klondike.c: 210: }
 13930                           ;klondike.c: 211: goto outrx;
 13931  0B3A  2B91               	goto	i1l6059
 13932  0B3B                     i1l6049:	
 13933                           
 13934                           ;klondike.c: 212: }
 13935                           ;klondike.c: 213: }
 13936                           ;klondike.c: 215: if(Status.State == 'W') {
 13937  0B3B  0023               	movlb	3	; select bank3
 13938  0B3C  082C               	movf	_Status^(0+384),w	;volatile
 13939  0B3D  3A57               	xorlw	87
 13940  0B3E  1D03               	skipz
 13941  0B3F  2B91               	goto	i1l6059
 13942                           
 13943                           ;klondike.c: 216: ResultQue[ResultPos][0] = '=';
 13944  0B40  303D               	movlw	61
 13945  0B41  0020               	movlb	0	; select bank0
 13946  0B42  00D8               	movwf	??_ResultRx
 13947  0B43  3006               	movlw	6
 13948  0B44  00D9               	movwf	??_ResultRx+1
 13949  0B45  0859               	movf	??_ResultRx+1,w
 13950  0B46  00F0               	movwf	?i1___bmul
 13951  0B47  0867               	movf	_ResultPos,w
 13952  0B48  319B  2380  318A   	fcall	i1___bmul
 13953  0B4B  3ED5               	addlw	_ResultQue& (0+255)
 13954  0B4C  0086               	movwf	6
 13955  0B4D  3001               	movlw	1	; select bank3/4
 13956  0B4E  0087               	movwf	7
 13957  0B4F  0020               	movlb	0	; select bank0
 13958  0B50  0858               	movf	??_ResultRx,w
 13959  0B51  0081               	movwf	1
 13960                           
 13961                           ;klondike.c: 217: ResultQue[ResultPos][1] = Status.WorkID;
 13962  0B52  0023               	movlb	3	; select bank3
 13963  0B53  0830               	movf	(_Status^(0+384)+4),w	;volatile
 13964  0B54  0020               	movlb	0	; select bank0
 13965  0B55  00D8               	movwf	??_ResultRx
 13966  0B56  3006               	movlw	6
 13967  0B57  00D9               	movwf	??_ResultRx+1
 13968  0B58  0859               	movf	??_ResultRx+1,w
 13969  0B59  00F0               	movwf	?i1___bmul
 13970  0B5A  0867               	movf	_ResultPos,w
 13971  0B5B  319B  2380  318A   	fcall	i1___bmul
 13972  0B5E  0020               	movlb	0	; select bank0
 13973  0B5F  00DA               	movwf	??_ResultRx+2
 13974  0B60  0A5A               	incf	??_ResultRx+2,w
 13975  0B61  3ED5               	addlw	_ResultQue& (0+255)
 13976  0B62  0086               	movwf	6
 13977  0B63  3001               	movlw	1	; select bank3/4
 13978  0B64  0087               	movwf	7
 13979  0B65  0858               	movf	??_ResultRx,w
 13980  0B66  0081               	movwf	1
 13981                           
 13982                           ;klondike.c: 218: SendCmdReply(&ResultQue[ResultPos], &ResultQue[ResultPos]+1, sizeof(Re
      +                          sultQue[ResultPos])-1);
 13983  0B67  3006               	movlw	6
 13984  0B68  00D8               	movwf	??_ResultRx
 13985  0B69  0858               	movf	??_ResultRx,w
 13986  0B6A  00F0               	movwf	?i1___bmul
 13987  0B6B  0867               	movf	_ResultPos,w
 13988  0B6C  319B  2380  318A   	fcall	i1___bmul
 13989  0B6F  3ED5               	addlw	_ResultQue& (0+255)
 13990  0B70  0020               	movlb	0	; select bank0
 13991  0B71  00D9               	movwf	??_ResultRx+1
 13992  0B72  0859               	movf	??_ResultRx+1,w
 13993  0B73  00FC               	movwf	_ResultRx$3156
 13994                           
 13995                           ;klondike.c: 218: SendCmdReply(&ResultQue[ResultPos], &ResultQue[ResultPos]+1, sizeof(Re
      +                          sultQue[ResultPos])-1);
 13996  0B74  3006               	movlw	6
 13997  0B75  00D8               	movwf	??_ResultRx
 13998  0B76  0858               	movf	??_ResultRx,w
 13999  0B77  00F0               	movwf	?i1___bmul
 14000  0B78  0867               	movf	_ResultPos,w
 14001  0B79  319B  2380  318A   	fcall	i1___bmul
 14002  0B7C  0020               	movlb	0	; select bank0
 14003  0B7D  00D9               	movwf	??_ResultRx+1
 14004  0B7E  0A59               	incf	??_ResultRx+1,w
 14005  0B7F  3ED5               	addlw	_ResultQue& (0+255)
 14006  0B80  00DA               	movwf	??_ResultRx+2
 14007  0B81  085A               	movf	??_ResultRx+2,w
 14008  0B82  00FD               	movwf	_ResultRx$3157
 14009                           
 14010                           ;klondike.c: 218: SendCmdReply(&ResultQue[ResultPos], &ResultQue[ResultPos]+1, sizeof(Re
      +                          sultQue[ResultPos])-1);
 14011  0B83  087C               	movf	_ResultRx$3156,w
 14012  0B84  00F6               	movwf	?i1_SendCmdReply
 14013  0B85  3001               	movlw	1
 14014  0B86  00F7               	movwf	?i1_SendCmdReply+1
 14015  0B87  087D               	movf	_ResultRx$3157,w
 14016  0B88  00F8               	movwf	?i1_SendCmdReply+2
 14017  0B89  3001               	movlw	1
 14018  0B8A  00F9               	movwf	?i1_SendCmdReply+3
 14019  0B8B  3005               	movlw	5
 14020  0B8C  00D8               	movwf	??_ResultRx
 14021  0B8D  0858               	movf	??_ResultRx,w
 14022  0B8E  00FA               	movwf	?i1_SendCmdReply+4
 14023  0B8F  3196  2641         	fcall	i1_SendCmdReply
 14024  0B91                     i1l6059:	
 14025                           ;klondike.c: 219: }
 14026                           ;klondike.c: 221: outrx:
 14027                           
 14028                           
 14029                           ;klondike.c: 222: { RCSTAbits.SPEN = 0; RCSTAbits.SPEN = 1; };
 14030  0B91  0023               	movlb	3	; select bank3
 14031  0B92  139D               	bcf	29,7	;volatile
 14032  0B93  179D               	bsf	29,7	;volatile
 14033                           
 14034                           ;klondike.c: 223: ResultQC = 0;
 14035  0B94  0022               	movlb	2	; select bank2
 14036  0B95  01E2               	clrf	_ResultQC^(0+256)
 14037                           
 14038                           ;klondike.c: 224: IOCBF = 0;
 14039  0B96  0027               	movlb	7	; select bank7
 14040  0B97  0196               	clrf	22	;volatile
 14041  0B98  0008               	return
 14042  0B99                     __end_of_ResultRx:	
 14043                           
 14044                           	psect	text62
 14045  1641                     __ptext62:	
 14046 ;; *************** function i1_SendCmdReply *****************
 14047 ;; Defined at:
 14048 ;;		line 208 in file "main.c"
 14049 ;; Parameters:    Size  Location     Type
 14050 ;;  SendCmdReply    2    6[COMMON] PTR unsigned char 
 14051 ;;		 -> ResultQue(12), OUTPacket(64), 
 14052 ;;  SendCmdReply    2    8[COMMON] PTR unsigned char 
 14053 ;;		 -> ResultQue(12), Cfg(6), ID(12), Status(13), 
 14054 ;;  SendCmdReply    1   10[COMMON] unsigned char 
 14055 ;; Auto vars:     Size  Location     Type
 14056 ;;  SendCmdReply    1   11[COMMON] unsigned char 
 14057 ;; Return value:  Size  Location     Type
 14058 ;;		None               void
 14059 ;; Registers used:
 14060 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
 14061 ;; Tracked objects:
 14062 ;;		On entry : 0/0
 14063 ;;		On exit  : 0/0
 14064 ;;		Unchanged: 0/0
 14065 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14066 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14067 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14068 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14069 ;;      Totals:         6       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14070 ;;Total ram usage:       14 bytes
 14071 ;; Hardware stack levels used:    1
 14072 ;; Hardware stack levels required when called:    1
 14073 ;; This function calls:
 14074 ;;		i1___wmul
 14075 ;;		i1___bmul
 14076 ;; This function is called by:
 14077 ;;		_ResultRx
 14078 ;; This function uses a non-reentrant model
 14079 ;;
 14080                           
 14081                           
 14082                           ;psect for function i1_SendCmdReply
 14083  1641                     i1_SendCmdReply:	
 14084                           
 14085                           ;main.c: 209: if(WQI*15 + count + 2 < 64) {
 14086                           
 14087                           ;incstack = 0
 14088                           ; Regs used in i1_SendCmdReply: [wreg-fsr1h+status,2+status,0+btemp+1+pclath+cstack]
 14089  1641  087A               	movf	i1SendCmdReply@count,w
 14090  1642  0020               	movlb	0	; select bank0
 14091  1643  00D0               	movwf	??i1_SendCmdReply
 14092  1644  01D1               	clrf	??i1_SendCmdReply+1
 14093  1645  0021               	movlb	1	; select bank1
 14094  1646  086F               	movf	_WQI^(0+128),w
 14095  1647  0020               	movlb	0	; select bank0
 14096  1648  00D2               	movwf	??i1_SendCmdReply+2
 14097  1649  01D3               	clrf	??i1_SendCmdReply+3
 14098  164A  0852               	movf	??i1_SendCmdReply+2,w
 14099  164B  00F0               	movwf	?i1___wmul
 14100  164C  0853               	movf	??i1_SendCmdReply+3,w
 14101  164D  00F1               	movwf	?i1___wmul+1
 14102  164E  300F               	movlw	15
 14103  164F  00F2               	movwf	?i1___wmul+2
 14104  1650  3000               	movlw	0
 14105  1651  00F3               	movwf	?i1___wmul+3
 14106  1652  319C  2472  3196   	fcall	i1___wmul
 14107  1655  0020               	movlb	0	; select bank0
 14108  1656  0850               	movf	??i1_SendCmdReply,w
 14109  1657  0770               	addwf	?i1___wmul,w
 14110  1658  00D4               	movwf	??i1_SendCmdReply+4
 14111  1659  0851               	movf	??i1_SendCmdReply+1,w
 14112  165A  3D71               	addwfc	?i1___wmul+1,w
 14113  165B  00D5               	movwf	??i1_SendCmdReply+5
 14114  165C  0854               	movf	??i1_SendCmdReply+4,w
 14115  165D  3E02               	addlw	2
 14116  165E  00D6               	movwf	??i1_SendCmdReply+6
 14117  165F  3000               	movlw	0
 14118  1660  3D55               	addwfc	??i1_SendCmdReply+5,w
 14119  1661  00D7               	movwf	??i1_SendCmdReply+7
 14120  1662  0857               	movf	??i1_SendCmdReply+7,w
 14121  1663  3A80               	xorlw	128
 14122  1664  00FF               	movwf	127
 14123  1665  3080               	movlw	128
 14124  1666  027F               	subwf	127,w
 14125  1667  1D03               	skipz
 14126  1668  2E6B               	goto	u641_25
 14127  1669  3040               	movlw	64
 14128  166A  0256               	subwf	??i1_SendCmdReply+6,w
 14129  166B                     u641_25:	
 14130  166B  1803               	skipnc
 14131  166C  0008               	return
 14132                           
 14133                           ;main.c: 210: INPacket[WQI*15] = cmd[0];
 14134  166D  0876               	movf	i1SendCmdReply@cmd,w
 14135  166E  0086               	movwf	6
 14136  166F  0877               	movf	i1SendCmdReply@cmd+1,w
 14137  1670  0087               	movwf	7
 14138  1671  0801               	movf	1,w
 14139  1672  0020               	movlb	0	; select bank0
 14140  1673  00D0               	movwf	??i1_SendCmdReply
 14141  1674  300F               	movlw	15
 14142  1675  00D1               	movwf	??i1_SendCmdReply+1
 14143  1676  0851               	movf	??i1_SendCmdReply+1,w
 14144  1677  00F0               	movwf	?i1___bmul
 14145  1678  0021               	movlb	1	; select bank1
 14146  1679  086F               	movf	_WQI^(0+128),w
 14147  167A  319B  2380  3196   	fcall	i1___bmul
 14148  167D  3E20               	addlw	32
 14149  167E  0086               	movwf	6
 14150  167F  3002               	movlw	2	; select bank4/5
 14151  1680  0087               	movwf	7
 14152  1681  0020               	movlb	0	; select bank0
 14153  1682  0850               	movf	??i1_SendCmdReply,w
 14154  1683  0081               	movwf	1
 14155                           
 14156                           ;main.c: 211: INPacket[WQI*15 + 1] = SlaveAddress;
 14157  1684  0021               	movlb	1	; select bank1
 14158  1685  0862               	movf	_SlaveAddress^(0+128),w
 14159  1686  0020               	movlb	0	; select bank0
 14160  1687  00D0               	movwf	??i1_SendCmdReply
 14161  1688  300F               	movlw	15
 14162  1689  00D1               	movwf	??i1_SendCmdReply+1
 14163  168A  0851               	movf	??i1_SendCmdReply+1,w
 14164  168B  00F0               	movwf	?i1___bmul
 14165  168C  0021               	movlb	1	; select bank1
 14166  168D  086F               	movf	_WQI^(0+128),w
 14167  168E  319B  2380  3196   	fcall	i1___bmul
 14168  1691  0020               	movlb	0	; select bank0
 14169  1692  00D2               	movwf	??i1_SendCmdReply+2
 14170  1693  0A52               	incf	??i1_SendCmdReply+2,w
 14171  1694  3E20               	addlw	32
 14172  1695  0086               	movwf	6
 14173  1696  3002               	movlw	2	; select bank4/5
 14174  1697  0087               	movwf	7
 14175  1698  0850               	movf	??i1_SendCmdReply,w
 14176  1699  0081               	movwf	1
 14177                           
 14178                           ;main.c: 212: for(BYTE n = 0; n < count; n++)
 14179  169A  01FB               	clrf	i1SendCmdReply@n
 14180  169B                     i1l6021:	
 14181  169B  087A               	movf	i1SendCmdReply@count,w
 14182  169C  027B               	subwf	i1SendCmdReply@n,w
 14183  169D  1803               	btfsc	3,0
 14184  169E  2ECB               	goto	i1l6023
 14185                           
 14186                           ;main.c: 213: INPacket[WQI*15 + n + 2] = data[n];
 14187  169F  0879               	movf	i1SendCmdReply@data+1,w
 14188  16A0  00D1               	movwf	??i1_SendCmdReply+1
 14189  16A1  0878               	movf	i1SendCmdReply@data,w
 14190  16A2  00D0               	movwf	??i1_SendCmdReply
 14191  16A3  087B               	movf	i1SendCmdReply@n,w
 14192  16A4  0750               	addwf	??i1_SendCmdReply,w
 14193  16A5  0084               	movwf	4
 14194  16A6  0851               	movf	??i1_SendCmdReply+1,w
 14195  16A7  1803               	skipnc
 14196  16A8  0A51               	incf	??i1_SendCmdReply+1,w
 14197  16A9  0085               	movwf	5
 14198  16AA  0800               	movf	0,w	;code access
 14199  16AB  00D2               	movwf	??i1_SendCmdReply+2
 14200  16AC  0021               	movlb	1	; select bank1
 14201  16AD  086F               	movf	_WQI^(0+128),w
 14202  16AE  0020               	movlb	0	; select bank0
 14203  16AF  00D3               	movwf	??i1_SendCmdReply+3
 14204  16B0  01D4               	clrf	??i1_SendCmdReply+4
 14205  16B1  0853               	movf	??i1_SendCmdReply+3,w
 14206  16B2  00F0               	movwf	?i1___wmul
 14207  16B3  0854               	movf	??i1_SendCmdReply+4,w
 14208  16B4  00F1               	movwf	?i1___wmul+1
 14209  16B5  300F               	movlw	15
 14210  16B6  00F2               	movwf	?i1___wmul+2
 14211  16B7  3000               	movlw	0
 14212  16B8  00F3               	movwf	?i1___wmul+3
 14213  16B9  319C  2472  3196   	fcall	i1___wmul
 14214  16BC  0870               	movf	?i1___wmul,w
 14215  16BD  077B               	addwf	i1SendCmdReply@n,w
 14216  16BE  3E02               	addlw	2
 14217  16BF  3E20               	addlw	32
 14218  16C0  0086               	movwf	6
 14219  16C1  3002               	movlw	2	; select bank4/5
 14220  16C2  0087               	movwf	7
 14221  16C3  0020               	movlb	0	; select bank0
 14222  16C4  0852               	movf	??i1_SendCmdReply+2,w
 14223  16C5  0081               	movwf	1
 14224  16C6  3001               	movlw	1
 14225  16C7  00D0               	movwf	??i1_SendCmdReply
 14226  16C8  0850               	movf	??i1_SendCmdReply,w
 14227  16C9  07FB               	addwf	i1SendCmdReply@n,f
 14228  16CA  2E9B               	goto	i1l6021
 14229  16CB                     i1l6023:	
 14230                           
 14231                           ;main.c: 214: WQI = (WQI+1) & 3;
 14232  16CB  0021               	movlb	1	; select bank1
 14233  16CC  0A6F               	incf	_WQI^(0+128),w
 14234  16CD  3903               	andlw	3
 14235  16CE  0020               	movlb	0	; select bank0
 14236  16CF  00D0               	movwf	??i1_SendCmdReply
 14237  16D0  0850               	movf	??i1_SendCmdReply,w
 14238  16D1  0021               	movlb	1	; select bank1
 14239  16D2  00EF               	movwf	_WQI^(0+128)
 14240  16D3  0008               	return
 14241  16D4                     __end_ofi1_SendCmdReply:	
 14242                           
 14243                           	psect	text63
 14244  1B80                     __ptext63:	
 14245 ;; *************** function i1___bmul *****************
 14246 ;; Defined at:
 14247 ;;		line 3 in file "C:\Program Files (x86)\Microchip\xc8\v1.20\sources\pic\bmul.c"
 14248 ;; Parameters:    Size  Location     Type
 14249 ;;  __bmul          1    wreg     unsigned char 
 14250 ;;  __bmul          1    0[COMMON] unsigned char 
 14251 ;; Auto vars:     Size  Location     Type
 14252 ;;  __bmul          1    2[COMMON] unsigned char 
 14253 ;;  __bmul          1    3[COMMON] unsigned char 
 14254 ;; Return value:  Size  Location     Type
 14255 ;;                  1    wreg      unsigned char 
 14256 ;; Registers used:
 14257 ;;		wreg, status,2, status,0
 14258 ;; Tracked objects:
 14259 ;;		On entry : 0/0
 14260 ;;		On exit  : 0/0
 14261 ;;		Unchanged: 0/0
 14262 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14263 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14264 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14265 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14266 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14267 ;;Total ram usage:        4 bytes
 14268 ;; Hardware stack levels used:    1
 14269 ;; This function calls:
 14270 ;;		Nothing
 14271 ;; This function is called by:
 14272 ;;		_ResultRx
 14273 ;;		i1_SendCmdReply
 14274 ;; This function uses a non-reentrant model
 14275 ;;
 14276                           
 14277                           
 14278                           ;psect for function i1___bmul
 14279  1B80                     i1___bmul:	
 14280                           
 14281                           ;incstack = 0
 14282                           ; Regs used in i1___bmul: [wreg+status,2+status,0]
 14283                           ;i1___bmul@multiplier stored from wreg
 14284  1B80  00F2               	movwf	i1___bmul@multiplier
 14285  1B81  01F3               	clrf	i1___bmul@product
 14286  1B82                     i1l5997:	
 14287  1B82  1C72               	btfss	i1___bmul@multiplier,0
 14288  1B83  2B88               	goto	i1l6001
 14289  1B84  0870               	movf	i1___bmul@multiplicand,w
 14290  1B85  00F1               	movwf	??i1___bmul
 14291  1B86  0871               	movf	??i1___bmul,w
 14292  1B87  07F3               	addwf	i1___bmul@product,f
 14293  1B88                     i1l6001:	
 14294  1B88  1003               	clrc
 14295  1B89  0DF0               	rlf	i1___bmul@multiplicand,f
 14296  1B8A  1003               	clrc
 14297  1B8B  0CF2               	rrf	i1___bmul@multiplier,f
 14298  1B8C  08F2               	movf	i1___bmul@multiplier,f
 14299  1B8D  1D03               	skipz
 14300  1B8E  2B82               	goto	i1l5997
 14301  1B8F  0873               	movf	i1___bmul@product,w
 14302  1B90  0008               	return
 14303  1B91                     __end_ofi1___bmul:	
 14304                           
 14305                           	psect	text64
 14306  1C72                     __ptext64:	
 14307 ;; *************** function i1___wmul *****************
 14308 ;; Defined at:
 14309 ;;		line 3 in file "C:\Program Files (x86)\Microchip\xc8\v1.20\sources\pic\wmul.c"
 14310 ;; Parameters:    Size  Location     Type
 14311 ;;  __wmul          2    0[COMMON] unsigned int 
 14312 ;;  __wmul          2    2[COMMON] unsigned int 
 14313 ;; Auto vars:     Size  Location     Type
 14314 ;;  __wmul          2    4[COMMON] unsigned int 
 14315 ;; Return value:  Size  Location     Type
 14316 ;;                  2    0[COMMON] unsigned int 
 14317 ;; Registers used:
 14318 ;;		wreg, status,2, status,0
 14319 ;; Tracked objects:
 14320 ;;		On entry : 0/0
 14321 ;;		On exit  : 0/0
 14322 ;;		Unchanged: 0/0
 14323 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14324 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14325 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14326 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14327 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14328 ;;Total ram usage:        6 bytes
 14329 ;; Hardware stack levels used:    1
 14330 ;; This function calls:
 14331 ;;		Nothing
 14332 ;; This function is called by:
 14333 ;;		i1_SendCmdReply
 14334 ;; This function uses a non-reentrant model
 14335 ;;
 14336                           
 14337                           
 14338                           ;psect for function i1___wmul
 14339  1C72                     i1___wmul:	
 14340                           
 14341                           ;incstack = 0
 14342                           ; Regs used in i1___wmul: [wreg+status,2+status,0]
 14343  1C72  01F4               	clrf	i1___wmul@product
 14344  1C73  01F5               	clrf	i1___wmul@product+1
 14345  1C74                     i1l5985:	
 14346  1C74  1C70               	btfss	i1___wmul@multiplier,0
 14347  1C75  2C7A               	goto	i1l1295
 14348  1C76  0872               	movf	i1___wmul@multiplicand,w
 14349  1C77  07F4               	addwf	i1___wmul@product,f
 14350  1C78  0873               	movf	i1___wmul@multiplicand+1,w
 14351  1C79  3DF5               	addwfc	i1___wmul@product+1,f
 14352  1C7A                     i1l1295:	
 14353  1C7A  3001               	movlw	1
 14354  1C7B                     u636_25:	
 14355  1C7B  35F2               	lslf	i1___wmul@multiplicand,f
 14356  1C7C  0DF3               	rlf	i1___wmul@multiplicand+1,f
 14357  1C7D  0B89               	decfsz	9,f
 14358  1C7E  2C7B               	goto	u636_25
 14359  1C7F  3001               	movlw	1
 14360  1C80                     u637_25:	
 14361  1C80  36F1               	lsrf	i1___wmul@multiplier+1,f
 14362  1C81  0CF0               	rrf	i1___wmul@multiplier,f
 14363  1C82  0B89               	decfsz	9,f
 14364  1C83  2C80               	goto	u637_25
 14365  1C84  0871               	movf	i1___wmul@multiplier+1,w
 14366  1C85  0470               	iorwf	i1___wmul@multiplier,w
 14367  1C86  1D03               	skipz
 14368  1C87  2C74               	goto	i1l5985
 14369  1C88  0875               	movf	i1___wmul@product+1,w
 14370  1C89  01F1               	clrf	?i1___wmul+1
 14371  1C8A  07F1               	addwf	?i1___wmul+1,f
 14372  1C8B  0874               	movf	i1___wmul@product,w
 14373  1C8C  01F0               	clrf	?i1___wmul
 14374  1C8D  07F0               	addwf	?i1___wmul,f
 14375  1C8E  0008               	return
 14376  1C8F                     __end_ofi1___wmul:	
 14377  007E                     btemp	set	126	;btemp
 14378  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    174
    Data        72
    BSS         152
    Persistent  3
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            32     18      32
    BANK1            80     64      80
    BANK2            80     57      80
    BANK3            80      0      70
    BANK4            16      0      16
    BANK5            16      0       0
    BANK6            80      0      56
    BANK7            80      0      32
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           28      0       0
    BANK11            0      0       0
    BANK12            0      0       0

Pointer List with Targets:

    ResultRx$3157	PTR unsigned char  size(1) Largest target is 12
		 -> ResultQue(BANK3[12]), 

    ResultRx$3156	PTR unsigned char  size(1) Largest target is 12
		 -> ResultQue(BANK3[12]), 

    ResultRx$3113	PTR unsigned char  size(1) Largest target is 12
		 -> ResultQue(BANK3[12]), 

    ResultRx$3112	PTR unsigned char  size(1) Largest target is 12
		 -> ResultQue(BANK3[12]), 

    ResultRx$2875	PTR unsigned char  size(1) Largest target is 12
		 -> ResultQue(BANK3[12]), 

    ResultRx$2874	PTR unsigned char  size(1) Largest target is 12
		 -> ResultQue(BANK3[12]), 

    ?___ftpack	float  size(1) Largest target is 0

    ?___fttol	long  size(1) Largest target is 0

    ?___ftadd	float  size(1) Largest target is 0

    ?___ftmul	float  size(1) Largest target is 0

    ?___ftneg	float  size(1) Largest target is 0

    ?___awtoft	float  size(1) Largest target is 0

    ?___awdiv	int  size(1) Largest target is 0

    ?___lwdiv	unsigned int  size(1) Largest target is 0

    ?___wmul	unsigned int  size(1) Largest target is 0

    ?_rotate	unsigned long  size(1) Largest target is 0

    ?_memset	PTR void  size(1) Largest target is 32
		 -> USBAlternateInterface(BANK1[1]), BDT(BANK0[32]), 

    ?_USBTransferOnePacket	PTR void  size(1) Largest target is 32
		 -> NULL(NULL[0]), BDT(BANK0[32]), 

    USER_USB_CALLBACK_EVENT_HANDLER@pdata	PTR void  size(1) Largest target is 32
		 -> USTATcopy(BANK1[1]), USBActiveConfiguration(BANK1[1]), NULL(NULL[0]), BDT(BANK0[32]), 

    memset@p1	PTR void  size(1) Largest target is 32
		 -> USBAlternateInterface(BANK1[1]), BDT(BANK0[32]), 

    memset@p	PTR unsigned char  size(1) Largest target is 32
		 -> USBAlternateInterface(BANK1[1]), BDT(BANK0[32]), 

    SendCmdReply@data	PTR unsigned char  size(2) Largest target is 13
		 -> ResultQue(BANK3[12]), Cfg(BANK3[6]), ID(CODE[12]), Status(BANK3[13]), 

    SendCmdReply@cmd	PTR unsigned char  size(2) Largest target is 64
		 -> ResultQue(BANK3[12]), OUTPacket(BANK5[64]), 

    USBGenericInHandle	PTR void  size(1) Largest target is 32
		 -> NULL(NULL[0]), BDT(BANK0[32]), 

    USBGenericOutHandle	PTR void  size(1) Largest target is 32
		 -> NULL(NULL[0]), BDT(BANK0[32]), 

    ProcessCmd@cmd	PTR unsigned char  size(1) Largest target is 64
		 -> OUTPacket(BANK5[64]), 

    I2CInBuf	PTR unsigned char  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    AsicPreCalc@work	PTR struct _worktask size(2) Largest target is 180
		 -> WorkQue(BIGRAM[180]), 

    SendAsicData@work	PTR struct _worktask size(2) Largest target is 180
		 -> WorkQue(BIGRAM[180]), 

    USBStdFeatureReqHandler@pUEP	PTR unsigned char  size(2) Largest target is 1
		 -> UEP0(BITSFR29[1]), 

    USBStdFeatureReqHandler@p	PTR struct __BDT size(1) Largest target is 32
		 -> NULL(NULL[0]), BDT(BANK0[32]), 

    USBStdGetStatusHandler@p	PTR struct __BDT size(1) Largest target is 32
		 -> NULL(NULL[0]), BDT(BANK0[32]), 

    USB_SD_Ptr	const PTR const unsigned char [3] size(1) Largest target is 52
		 -> sd002(CODE[52]), sd001(CODE[52]), sd000(CODE[4]), 

    USB_CD_Ptr	const PTR const unsigned char [1] size(1) Largest target is 32
		 -> configDescriptor1(CODE[32]), 

    sp__memset	PTR void  size(1) Largest target is 32
		 -> USBAlternateInterface(BANK1[1]), BDT(BANK0[32]), 

    USBStdSetCfgHandler@p	PTR unsigned char  size(2) Largest target is 1
		 -> UEP1(BITSFR29[1]), 

    pDst	PTR unsigned char  size(1) Largest target is 8
		 -> CtrlTrfData(BANK0[8]), NULL(NULL[0]), 

    USBConfigureEndpoint@handle	PTR volatile struct __BDT size(1) Largest target is 32
		 -> BDT(BANK0[32]), 

    pBDTEntryEP0OutCurrent	PTR volatile struct __BDT size(1) Largest target is 32
		 -> NULL(NULL[0]), BDT(BANK0[32]), 

    pBDTEntryEP0OutNext	PTR volatile struct __BDT size(1) Largest target is 32
		 -> NULL(NULL[0]), BDT(BANK0[32]), 

    USBTransferOnePacket@data	PTR unsigned char  size(1) Largest target is 64
		 -> INPacket(BANK4[64]), OUTPacket(BANK5[64]), 

    sp__USBTransferOnePacket	PTR void  size(1) Largest target is 32
		 -> NULL(NULL[0]), BDT(BANK0[32]), 

    USBTransferOnePacket@handle	PTR volatile struct __BDT size(1) Largest target is 32
		 -> NULL(NULL[0]), BDT(BANK0[32]), 

    USBEnableEndpoint@p	PTR unsigned char  size(2) Largest target is 1
		 -> UEP0(BITSFR29[1]), 

    pBDTEntryOut	PTR volatile struct __BDT[2] size(1) Largest target is 32
		 -> NULL(NULL[0]), BDT(BANK0[32]), 

    pBDTEntryIn	PTR volatile struct __BDT[2] size(1) Largest target is 32
		 -> NULL(NULL[0]), BDT(BANK0[32]), 

    S118$pFunc	PTR FTN()void  size(1) Largest target is 0

    outPipes.pFunc	PTR FTN()void  size(1) Largest target is 0

    S108$wRam	PTR unsigned short  size(1) Largest target is 0

    outPipes.pDst.wRam	PTR unsigned short  size(1) Largest target is 0

    S108$bRam	PTR unsigned char  size(1) Largest target is 0

    outPipes.pDst.bRam	PTR unsigned char  size(1) Largest target is 0

    S66$wRom	PTR const unsigned short  size(1) Largest target is 0

    inPipes.pSrc.wRom	PTR const unsigned short  size(1) Largest target is 0

    S66$wRam	PTR unsigned short  size(1) Largest target is 0

    inPipes.pSrc.wRam	PTR unsigned short  size(1) Largest target is 0

    S66$bRom	PTR const unsigned char  size(1) Largest target is 0

    inPipes.pSrc.bRom	PTR const unsigned char  size(1) Largest target is 0

    S66$bRam	PTR unsigned char  size(1) Largest target is 0

    inPipes.pSrc.bRam	PTR unsigned char  size(1) Largest target is 0

    USBDeviceInit@p	PTR unsigned char  size(2) Largest target is 1
		 -> UEP1(BITSFR29[1]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISRCode in COMMON

    _ISRCode->_ResultRx
    _ResultRx->i1_SendCmdReply
    i1_SendCmdReply->i1___wmul

Critical Paths under _main in BANK0

    _ProcessIO->___bmul
    _ProcessCmd->___lwdiv
    _ProcessCmd->___wmul
    _SendCmdReply->___bmul
    _SendCmdReply->___wmul
    _AsicPushWork->___wmul
    _AsicPreCalc->___wmul
    _SendAsicData->___wmul
    _DetectAsics->___awdiv
    _UpdateFanLevel->___awtoft
    ___fttol->___awtoft
    ___ftneg->___awtoft
    ___ftmul->___awtoft
    ___ftadd->___awtoft
    ___awtoft->___ftpack
    _USBCtrlEPService->_USBCtrlTrfInHandler
    _USBCtrlTrfInHandler->_USBCtrlTrfTxService
    _USBCtrlTrfOutHandler->_USBCtrlTrfRxService
    _USBCtrlTrfRxService->_USBCtrlEPAllowStatusStage
    _USBStdSetCfgHandler->_memset
    _USBCtrlEPAllowDataStage->_USBCtrlTrfTxService
    _USBCBInitEP->_USBEnableEndpoint
    _USBTransferOnePacket->___bmul
    _USBEnableEndpoint->_USBConfigureEndpoint

Critical Paths under _ISRCode in BANK0

    _ISRCode->_ResultRx
    _ResultRx->i1_SendCmdReply

Critical Paths under _main in BANK1

    _main->_WorkTick
    _ProcessIO->_ProcessCmd
    _ProcessCmd->_AsicPushWork
    _SendCmdReply->___wmul
    _AsicPushWork->_AsicPreCalc
    _AsicPreCalc->_rotate
    _SendAsicData->___wmul
    _UserInit->_DetectAsics
    _DetectAsics->___awdiv
    _WorkTick->_UpdateFanLevel
    _UpdateFanLevel->___fttol
    ___fttol->___ftadd
    ___ftneg->___ftmul
    ___ftmul->___awtoft
    ___ftadd->___ftneg
    ___awtoft->___ftpack
    _USBDeviceTasks->_USBCtrlEPService
    _USBCtrlEPService->_USBCtrlTrfSetupHandler
    _USBCtrlTrfOutHandler->_USBCtrlTrfRxService
    _USBCtrlTrfSetupHandler->_USBCheckStdRequest
    _USBCheckStdRequest->_USBStdFeatureReqHandler
    _USBStdFeatureReqHandler->_USER_USB_CALLBACK_EVENT_HANDLER
    _USBStdSetCfgHandler->_USER_USB_CALLBACK_EVENT_HANDLER
    _USBCtrlEPServiceComplete->_USBCtrlEPAllowDataStage
    _USBSuspend->_USER_USB_CALLBACK_EVENT_HANDLER
    _USBWakeFromSuspend->_USER_USB_CALLBACK_EVENT_HANDLER
    _USER_USB_CALLBACK_EVENT_HANDLER->_USBCBInitEP
    _USBCBInitEP->_USBEnableEndpoint
    _USBEnableEndpoint->_USBConfigureEndpoint

Critical Paths under _ISRCode in BANK1

    None.

Critical Paths under _main in BANK2

    _AsicPushWork->_AsicPreCalc

Critical Paths under _ISRCode in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISRCode in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISRCode in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISRCode in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISRCode in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISRCode in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISRCode in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISRCode in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISRCode in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISRCode in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISRCode in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   18078
                     _USBDeviceTasks
                       _AsicPushWork
                           _WorkTick
                   _InitializeSystem
                          _ProcessIO
 ---------------------------------------------------------------------------------
 (1) _ProcessIO                                            8     8      0    3460
                                             37 BANK1      8     8      0
               _USBTransferOnePacket
                         _ProcessCmd
                             ___bmul
 ---------------------------------------------------------------------------------
 (2) _ProcessCmd                                           7     7      0    2854
                                             30 BANK1      7     7      0
                       _AsicPushWork
                       _SendCmdReply
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     162
                                             14 BANK0      4     0      4
                                              0 BANK1      4     4      0
 ---------------------------------------------------------------------------------
 (3) _SendCmdReply                                        14     9      5     340
                                              2 BANK1     14     9      5
                             ___bmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               4     3      1      92
                                             14 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (3) _AsicPushWork                                         5     5      0    1972
                                             25 BANK1      5     5      0
                       _SendAsicData
                        _AsicPreCalc
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4      92
                                             14 BANK0      4     0      4
                                              0 BANK1      2     2      0
 ---------------------------------------------------------------------------------
 (4) _AsicPreCalc                                         69    67      2    1836
                                             13 BANK1     12    10      2
                                              0 BANK2     57    57      0
                             _rotate
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (5) _rotate                                              13     8      5      88
                                              0 BANK1     13     8      5
 ---------------------------------------------------------------------------------
 (4) _SendAsicData                                         6     4      2      44
                                              2 BANK1      6     4      2
                             _Send32
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (5) _Send32                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _InitializeSystem                                     0     0      0     663
                      _USBDeviceInit
                           _UserInit
 ---------------------------------------------------------------------------------
 (2) _UserInit                                             0     0      0     391
                        _DetectAsics
                            _InitFAN
                     _InitTempSensor
                       _InitWorkTick
                       _InitResultRx
 ---------------------------------------------------------------------------------
 (3) _InitResultRx                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _InitWorkTick                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _InitTempSensor                                       1     1      0       0
                                             14 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _InitFAN                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _DetectAsics                                         10    10      0     391
                                              5 BANK1     10    10      0
                            ___awdiv
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              9     5      4     300
                                             14 BANK0      4     0      4
                                              0 BANK1      5     5      0
 ---------------------------------------------------------------------------------
 (1) _WorkTick                                             1     1      0    3252
                                             63 BANK1      1     1      0
                     _UpdateFanLevel
 ---------------------------------------------------------------------------------
 (2) _UpdateFanLevel                                       7     7      0    3252
                                             56 BANK1      7     7      0
                           ___awtoft
                            ___ftadd
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             14    10      4     371
                                             42 BANK1     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3      65
                                             26 BANK1      3     0      3
                           ___awtoft (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             16    10      6     800
                                             10 BANK1     16    10      6
                           ___ftpack
                           ___awtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             13     7      6    1537
                                             29 BANK1     13     7      6
                           ___ftpack
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             6     3      3     445
                                             17 BANK0      1     1      0
                                              5 BANK1      5     2      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5     312
                                             14 BANK0      3     3      0
                                              0 BANK1      5     0      5
 ---------------------------------------------------------------------------------
 (1) _USBDeviceTasks                                       3     3      0    8731
                                             29 BANK1      3     3      0
                      _USBDeviceInit
                 _USBWakeFromSuspend
                         _USBSuspend
    _USER_USB_CALLBACK_EVENT_HANDLER
          _USBCtrlEPAllowStatusStage
                    _USBStallHandler
                   _USBCtrlEPService
 ---------------------------------------------------------------------------------
 (2) _USBCtrlEPService                                     4     4      0    5370
                                             25 BANK1      4     4      0
             _USBCtrlTrfSetupHandler
               _USBCtrlTrfOutHandler
                _USBCtrlTrfInHandler
 ---------------------------------------------------------------------------------
 (3) _USBCtrlTrfInHandler                                  3     3      0     115
                                             17 BANK0      1     1      0
                                              0 BANK1      2     2      0
                _USBCtrlTrfTxService
 ---------------------------------------------------------------------------------
 (3) _USBCtrlTrfOutHandler                                 2     2      0     114
                                              2 BANK1      2     2      0
                _USBCtrlTrfRxService
 ---------------------------------------------------------------------------------
 (4) _USBCtrlTrfRxService                                  4     4      0     114
                                             16 BANK0      2     2      0
                                              0 BANK1      2     2      0
          _USBCtrlEPAllowStatusStage
 ---------------------------------------------------------------------------------
 (3) _USBCtrlTrfSetupHandler                               1     1      0    5042
                                             24 BANK1      1     1      0
    _USER_USB_CALLBACK_EVENT_HANDLER
           _USBCtrlEPServiceComplete
                 _USBCheckStdRequest
 ---------------------------------------------------------------------------------
 (4) _USBCheckStdRequest                                   1     1      0    3943
                                             23 BANK1      1     1      0
    _USER_USB_CALLBACK_EVENT_HANDLER
                _USBStdSetCfgHandler
                _USBStdGetDscHandler
             _USBStdGetStatusHandler
            _USBStdFeatureReqHandler
 ---------------------------------------------------------------------------------
 (5) _USBStdFeatureReqHandler                              6     6      0    1530
                                             17 BANK1      6     6      0
    _USER_USB_CALLBACK_EVENT_HANDLER
 ---------------------------------------------------------------------------------
 (5) _USBStdGetStatusHandler                               2     2      0      68
                                             14 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (5) _USBStdGetDscHandler                                  3     3      0       0
                                             14 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) _USBStdSetCfgHandler                                  5     5      0    1338
                                             17 BANK1      5     5      0
    _USER_USB_CALLBACK_EVENT_HANDLER
                             _memset
 ---------------------------------------------------------------------------------
 (6) _memset                                               7     3      4      96
                                             14 BANK0      4     0      4
                                              0 BANK1      3     3      0
 ---------------------------------------------------------------------------------
 (4) _USBCtrlEPServiceComplete                             2     2      0      92
                                              2 BANK1      2     2      0
          _USBCtrlEPAllowStatusStage
            _USBCtrlEPAllowDataStage
 ---------------------------------------------------------------------------------
 (5) _USBCtrlEPAllowDataStage                              2     2      0      92
                                              0 BANK1      2     2      0
                _USBCtrlTrfTxService
 ---------------------------------------------------------------------------------
 (4) _USBCtrlTrfTxService                                  3     3      0      92
                                             14 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) _USBCtrlEPAllowStatusStage                            2     2      0       0
                                             14 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _USBStallHandler                                      1     1      0       0
                                             14 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _USBSuspend                                           1     1      0    1007
                                             17 BANK1      1     1      0
    _USER_USB_CALLBACK_EVENT_HANDLER
 ---------------------------------------------------------------------------------
 (2) _USBWakeFromSuspend                                   1     1      0    1007
                                             17 BANK1      1     1      0
    _USER_USB_CALLBACK_EVENT_HANDLER
 ---------------------------------------------------------------------------------
 (6) _USER_USB_CALLBACK_EVENT_HANDLER                      5     0      5    1007
                                             12 BANK1      5     0      5
                       _USBCBSuspend
               _USBCBWakeFromSuspend
                  _USBCB_SOF_Handler
                  _USBCBErrorHandler
                 _USBCBCheckOtherReq
              _USBCBStdSetDscHandler
                        _USBCBInitEP
 ---------------------------------------------------------------------------------
 (7) _USBCBInitEP                                          3     3      0     976
                                              9 BANK1      3     3      0
                  _USBEnableEndpoint
               _USBTransferOnePacket
 ---------------------------------------------------------------------------------
 (2) _USBTransferOnePacket                                 7     4      3     440
                                              0 BANK1      7     4      3
                             ___bmul (ARG)
 ---------------------------------------------------------------------------------
 (8) _USBEnableEndpoint                                    6     5      1     536
                                             17 BANK0      1     0      1
                                              4 BANK1      5     5      0
               _USBConfigureEndpoint
 ---------------------------------------------------------------------------------
 (9) _USBConfigureEndpoint                                 7     6      1     316
                                             14 BANK0      3     2      1
                                              0 BANK1      4     4      0
 ---------------------------------------------------------------------------------
 (7) _USBCBStdSetDscHandler                                0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _USBCBCheckOtherReq                                   0     0      0       0
              _USBCheckVendorRequest
 ---------------------------------------------------------------------------------
 (8) _USBCheckVendorRequest                                0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _USBCBErrorHandler                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _USBCB_SOF_Handler                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _USBCBWakeFromSuspend                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _USBCBSuspend                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _USBDeviceInit                                        6     6      0     272
                                             14 BANK0      2     2      0
                                              0 BANK1      4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _ISRCode                                             1     1      0    1273
                                             13 BANK0      1     1      0
                           _ResultRx
 ---------------------------------------------------------------------------------
 (11) _ResultRx                                            7     7      0    1273
                                             12 COMMON     2     2      0
                                              8 BANK0      5     5      0
                     i1_SendCmdReply
                           i1___bmul
 ---------------------------------------------------------------------------------
 (12) i1_SendCmdReply                                     14     9      5    1027
                                              6 COMMON     6     1      5
                                              0 BANK0      8     8      0
                           i1___wmul
                           i1___bmul
 ---------------------------------------------------------------------------------
 (12) i1___bmul                                            4     3      1     212
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (13) i1___wmul                                            6     2      4     300
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _USBDeviceTasks
     _USBDeviceInit
     _USBWakeFromSuspend
       _USER_USB_CALLBACK_EVENT_HANDLER
         _USBCBSuspend
         _USBCBWakeFromSuspend
         _USBCB_SOF_Handler
         _USBCBErrorHandler
         _USBCBCheckOtherReq
           _USBCheckVendorRequest
         _USBCBStdSetDscHandler
         _USBCBInitEP
           _USBEnableEndpoint
             _USBConfigureEndpoint
           _USBTransferOnePacket
             ___bmul (ARG)
     _USBSuspend
       _USER_USB_CALLBACK_EVENT_HANDLER
         _USBCBSuspend
         _USBCBWakeFromSuspend
         _USBCB_SOF_Handler
         _USBCBErrorHandler
         _USBCBCheckOtherReq
           _USBCheckVendorRequest
         _USBCBStdSetDscHandler
         _USBCBInitEP
           _USBEnableEndpoint
             _USBConfigureEndpoint
           _USBTransferOnePacket
             ___bmul (ARG)
     _USER_USB_CALLBACK_EVENT_HANDLER
       _USBCBSuspend
       _USBCBWakeFromSuspend
       _USBCB_SOF_Handler
       _USBCBErrorHandler
       _USBCBCheckOtherReq
         _USBCheckVendorRequest
       _USBCBStdSetDscHandler
       _USBCBInitEP
         _USBEnableEndpoint
           _USBConfigureEndpoint
         _USBTransferOnePacket
           ___bmul (ARG)
     _USBCtrlEPAllowStatusStage
     _USBStallHandler
     _USBCtrlEPService
       _USBCtrlTrfSetupHandler
         _USER_USB_CALLBACK_EVENT_HANDLER
           _USBCBSuspend
           _USBCBWakeFromSuspend
           _USBCB_SOF_Handler
           _USBCBErrorHandler
           _USBCBCheckOtherReq
             _USBCheckVendorRequest
           _USBCBStdSetDscHandler
           _USBCBInitEP
             _USBEnableEndpoint
               _USBConfigureEndpoint
             _USBTransferOnePacket
               ___bmul (ARG)
         _USBCtrlEPServiceComplete
           _USBCtrlEPAllowStatusStage
           _USBCtrlEPAllowDataStage
             _USBCtrlTrfTxService
         _USBCheckStdRequest
           _USER_USB_CALLBACK_EVENT_HANDLER
             _USBCBSuspend
             _USBCBWakeFromSuspend
             _USBCB_SOF_Handler
             _USBCBErrorHandler
             _USBCBCheckOtherReq
               _USBCheckVendorRequest
             _USBCBStdSetDscHandler
             _USBCBInitEP
               _USBEnableEndpoint
                 _USBConfigureEndpoint
               _USBTransferOnePacket
                 ___bmul (ARG)
           _USBStdSetCfgHandler
             _USER_USB_CALLBACK_EVENT_HANDLER
               _USBCBSuspend
               _USBCBWakeFromSuspend
               _USBCB_SOF_Handler
               _USBCBErrorHandler
               _USBCBCheckOtherReq
                 _USBCheckVendorRequest
               _USBCBStdSetDscHandler
               _USBCBInitEP
                 _USBEnableEndpoint
                   _USBConfigureEndpoint
                 _USBTransferOnePacket
                   ___bmul (ARG)
             _memset
           _USBStdGetDscHandler
           _USBStdGetStatusHandler
           _USBStdFeatureReqHandler
             _USER_USB_CALLBACK_EVENT_HANDLER
               _USBCBSuspend
               _USBCBWakeFromSuspend
               _USBCB_SOF_Handler
               _USBCBErrorHandler
               _USBCBCheckOtherReq
                 _USBCheckVendorRequest
               _USBCBStdSetDscHandler
               _USBCBInitEP
                 _USBEnableEndpoint
                   _USBConfigureEndpoint
                 _USBTransferOnePacket
                   ___bmul (ARG)
       _USBCtrlTrfOutHandler
         _USBCtrlTrfRxService
           _USBCtrlEPAllowStatusStage
       _USBCtrlTrfInHandler
         _USBCtrlTrfTxService
   _AsicPushWork
     _SendAsicData
       _Send32
       ___wmul (ARG)
     _AsicPreCalc
       _rotate
       ___wmul (ARG)
     ___wmul
   _WorkTick
     _UpdateFanLevel
       ___awtoft
         ___ftpack
       ___ftadd
         ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___ftpack
           ___awtoft (ARG)
             ___ftpack
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___ftpack
             ___awtoft (ARG)
               ___ftpack
       ___ftmul
         ___ftpack
         ___awtoft (ARG)
           ___ftpack
       ___ftneg
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___ftpack
           ___awtoft (ARG)
             ___ftpack
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___ftpack
             ___awtoft (ARG)
               ___ftpack
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___ftpack
               ___awtoft (ARG)
                 ___ftpack
         ___ftmul (ARG)
           ___ftpack
           ___awtoft (ARG)
             ___ftpack
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___ftpack
             ___awtoft (ARG)
               ___ftpack
   _InitializeSystem
     _USBDeviceInit
     _UserInit
       _DetectAsics
         ___awdiv
       _InitFAN
       _InitTempSensor
       _InitWorkTick
       _InitResultRx
   _ProcessIO
     _USBTransferOnePacket
       ___bmul (ARG)
     _ProcessCmd
       _AsicPushWork
         _SendAsicData
           _Send32
           ___wmul (ARG)
         _AsicPreCalc
           _rotate
           ___wmul (ARG)
         ___wmul
       _SendCmdReply
         ___bmul
         ___wmul
       ___lwdiv
       ___wmul
     ___bmul

 _ISRCode (ROOT)
   _ResultRx
     i1_SendCmdReply
       i1___wmul
       i1___bmul
     i1___bmul

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0      11       3        0.0%
BITBANK0            20      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               20     12      20       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     40      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50     39      50       9      100.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      46      11       87.5%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            10      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               10      0      10      13      100.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            10      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               10      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0      38      17       70.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0      20      19       40.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     17C      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              1C      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BANK11               0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BANK12               0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     18D      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.20 build 52243 
Symbol Table                                                                                   Fri Oct 25 16:00:44 2013

                              _USB_SD_Ptr 0801                                         pc 0002  
                          ___bmul@product 0060                               _SSPSTATbits 0214  
                                      _ID 089F                    ?_USBCheckVendorRequest 0070  
                            ___awdiv@sign 00A2                             _USBDeviceInit 0984  
                     ___wmul@multiplicand 0060                          i1___wmul@product 0074  
                            ___ftadd@exp1 00C9                              ___ftadd@exp2 00C8  
                     __end_of_AsicPreCalc 04E1                                       LATC 010E  
                              _BankRanges 03A0      USER_USB_CALLBACK_EVENT_HANDLER@event 00AC  
    USER_USB_CALLBACK_EVENT_HANDLER@pdata 00AE                              ___ftadd@sign 00C7  
                     __end_of_DetectAsics 0D05                                       l140 0D12  
                                     l142 0D16                                       l128 09CD  
                                     l208 15FA                                       l330 109A  
                                     l146 0D3C                                       l315 10BB  
                                     l155 0D9D                                       l332 104A  
                                     l156 0DED                                       l341 1073  
             __end_of_USBStdGetDscHandler 13AB                                       l318 10F4  
                                     l271 1F5B                                       l353 0F49  
                                     l274 1F9A                                       l354 0F4A  
                                     l275 1F67                                       l276 1F6A  
                                     l701 0568                                       l366 0FBC  
                                     l358 0F7D                                       l702 057A  
                                     l703 0585                                       l751 0772  
                                     l692 04E4                                       _BDT 0020  
                                     l695 0650                                       l855 1BF8  
                                     l936 1E32                                       _GIE 005F  
                                     _PR2 001B                                       _UIE 0E92  
                                     _UIR 0E90                                       _Cfg 01C1  
                                     _WQI 00EF                                       _WQX 006E  
                                     _buf 0260                                _USBSuspend 1C24  
                                     _ptr 006C                      USBStdSetCfgHandler@i 00B5  
                    USBStdSetCfgHandler@p 00B2                                       wreg 0009  
                          _USBDeviceTasks 0D05                            _USBDeviceState 00E3  
                  ??_USBCBWakeFromSuspend 005E                                      S7071 1800  
                   ??_USBCtrlTrfRxService 0060                  USBEnableEndpoint@options 0061  
                                    INDF1 0001                              __CFG_LVP$OFF 0000  
                                    FSR1H 0007                                      FSR1L 0006  
                                    l1112 0E8F                                      l1083 119F  
                                    l1089 11B6                                      l1295 1D46  
              USBConfigureEndpoint@handle 0060                                      l4151 09B2  
                                    l4143 09A5                                      l4135 0993  
                                    l5023 0063                                      l5017 0028  
                                    l4171 09D2                                      l4173 09E2  
                                    l4405 1D09                                      l4191 0A18  
                                    l4407 1D0B                                      l4185 09F7  
                                    l4601 1610                                      l6201 0D4C  
                                    l5401 17C8                                      l5321 052A  
                                    l4523 1FE8                                      l7003 15B0  
                                    l5403 17FA                                      l5331 0542  
                                    l6301 1E01                                      l4541 14CE  
                                    l6221 0D75                                      l6303 1E04  
                                    l4551 14F6                                      l4519 1FD3  
                                    l4623 0A4F                                      l6231 0D82  
                                    l6215 0D69                                      l5351 05A5  
                                    l5335 0543                                      l6305 1E07  
                                    l4561 1514                                      l4537 14C6  
                                    l4713 1CD2                                      l4721 1341  
                                    l4641 0AB3                                      l4633 0A69  
                                    l6225 0D7B                                      l6209 0D58  
                                    l5329 0531                                      l6403 1F4B  
                                    l4379 11FB                                      l4643 0ABC  
                                    l4635 0A87                                      l5443 0CB2  
                                    l6309 1E0A                                      l4581 15CD  
                                    l4733 1398                                      l4805 1DBA  
                                    l6181 0D29                                      l5445 0CFD  
                                    l5365 061A                                      l5357 05E8  
                                    l5373 0637                                      l4559 150F  
                                    l4735 139B                                      l4727 1376  
                                    l4719 1337                                      l4831 10EB  
                                    l6343 07E1                                      l6239 0D95  
                                    l5359 05F9                                      l6361 1D74  
                                    l7073 1E13                                      l4569 152D  
                                    l4593 1606                                      l4585 15D1  
                                    l6441 13EE                                      l6425 13C5  
                                    l6417 13B5                                      l6601 0F76  
                                    l6521 1051                                      l4649 0ADE  
                                    l4817 10B6                                      l6337 07BC  
                                    l6265 0DD1                                      l6249 0DA3  
                                    l6169 0D19                                      l5713 111B  
                                    l7075 1E2D                                      l6435 13DA  
                                    l4739 139E                                      l6603 0F86  
                                    l6523 1054                                      l4827 10DE  
                                    l6347 07F0                                      l6267 0DE1  
                                    l6259 0DBB                                      l5731 114A  
                                    l5723 1126                                      l5707 110E  
                                    l6357 1D6B                                      l6293 1DF5  
                                    l6613 0FAB                                      l6533 1061  
                                    l6525 1057                                      l4837 10FD  
                                    l6349 07F3                                      l6189 0D36  
                                    l5725 1135                                      l6375 1EF1  
                                    l6295 1DF8                                      l6471 1F76  
                                    l6623 0FC3                                      l6615 0FB0  
                                    l6535 1064                                      l6551 108F  
                                    l4839 10FE                                      l5735 1155  
                                    l6393 1F20                                      l6385 1F12  
                                    l6297 1DFB                                      l6457 1418  
                                    l6481 1F8E                                      l6537 1067  
                                    l6801 1184                                      l5761 1B9A  
                                    l6713 1C08                                      l6299 1DFE  
                                    l6627 0FE2                                      l6547 1082  
                                    l6811 11AC                                      l6803 1189  
                                    l5739 115E                                      l6629 0FEA  
                                    l6901 0ECE                                      l6645 1028  
                                    l5757 1B94                                      l6741 12CD  
                                    l6709 1C00                                      l6591 0F58  
                                    l6583 0F2B                                      l6567 0EFB  
                                    l4799 1D92                                      l6911 0BB0  
                                    l6647 102E                                      l6569 0EFD  
                                    l6809 11A4                                      l6841 0E18  
                                    l6673 0755                                      l6753 1300  
                                    l6851 0E2E                                      l5963 1EA5  
                                    l5955 1E81                                      l6755 1303  
                                    l6747 12E8                                      l6739 12CA  
                                    l6829 1D1F                                      l6845 0E1F  
                                    l6941 0C1D                                      l6933 0C09  
                                    l6917 0BC6                                      l6669 073C  
                                    l5973 1D3C                                      l5957 1E90  
                                    l6871 0E65                                      l6863 0E48  
                                    l5967 1EB0                                      l6881 0E81  
                                    l6873 0E6A                                      l6945 0C25  
                                    l6929 0C01                                      l6795 1171  
                                    l6891 0EB3                                      l6883 0E8B  
                                    l6875 0E6E                                      l6869 0E5B  
                                    l6799 1178                                      l6887 0EA1  
                                    l6969 154B                                      l6995 1596  
                                    l6987 157B                                      l6997 159F  
                                    l6989 1589                                      l6999 15A2  
                                    _LATC 010E                                      u5100 0519  
                                    u4205 1CDD                                      u3335 09B6  
                                    u5130 0558                                      u5205 059D  
                                    u4095 0A47                                      u5215 05AF  
                                    u5305 0CD2                                      u5315 0CE7  
                                    u5235 1798                                      u4605 0049  
                                    u4560 1DD0                                      u4705 0192  
                                    u4570 1DE1                                      u4715 01E2  
                                    u4635 006D                                      u5195 0596  
                                    u4580 001E                                      _RCIF 008D  
                                    u4565 1DCB                                      u4805 038E  
                                    u4725 0246                                      u4645 0085  
                                    u6325 1D48                                      u5295 0CBD  
                                    u4575 1DDD                                      u4815 03B9  
                                    u4735 025E                                      u4655 00AF  
                                    u6335 1D4D                                      u6255 1E86  
                                    u7225 1021                                      u5705 1137  
                                    u4825 03EF                                      u4745 0276  
                                    u4665 00E4                                      u3955 1FDD  
                                    u5715 1142                                      u4835 0407  
                                    u4755 028E                                      u4675 0118  
                                    u6275 1E92                                      u5725 114C  
                                    u4845 0466                                      u4765 02A7  
                                    u4685 014C                                      u6285 1E9D  
                                    u7255 071B                                      u4855 0481  
                                    u4775 02D5                                      u4695 0164  
                                    u6295 1EA7                     ??_USBCtrlTrfTxService 005E  
                                    u7265 0732                                      u4865 0499  
                                    u4785 0325                                      u7515 11BE  
                                    u7275 0751                                      u4875 04B1  
                                    u4795 0376                                      u7445 117F  
                                    u7285 076A                                      u5685 112B  
                                    u4885 04C9                                      _UCFG 0E91  
                                    u7465 119A                                      u7635 0E49  
                                    _UEP0 0E98                                      u7485 11A7  
                                    u7725 0E82                                      u7805 0BE2  
                                    _UEP1 0E99                                      u6855 1EC7  
                                    u6865 1ECF                                      u6785 0799  
                                    u7665 0E5C                                      u7825 0C0A  
                                    u6875 1ED7                                      u7835 0C10  
                                    u7915 1552                                      _UEIE 0E97  
                                    u7695 0E6F                                      u7865 0C26  
                                    u7945 157C                                      u7875 0C2C  
                                    u7795 0BD2                                      u7975 1597  
                                    _UEIR 0E93                                      _UCON 0E8E  
                                    _TMR0 0015                           __end_of_ISRCode 0012  
                                    _Step 0062    USBStdFeatureReqHandler@current_ep_data 00B5  
                                    _pDst 006B                                      _main 1BF5  
                            ___ftpack@arg 00A0                              ___ftpack@exp 00A3  
                                    fsr0h 0005                                      fsr1h 0007  
                                    fsr0l 0004                                      indf0 0000  
                                    indf1 0001                                      fsr1l 0006  
                                    btemp 007E                      __end_of_AsicPushWork 14AE  
                                    start 0012                             __CFG_IESO$OFF 0000  
                      _USBCBCheckOtherReq 1000                __end_of_USBCheckStdRequest 109B  
                  ??_USBCtrlTrfOutHandler 00A2                         ___bmul@multiplier 0061  
                            ___ftmul@cntr 00B8                              ___ftmul@sign 00B9  
               ??_USBStdFeatureReqHandler 00B1                           __end_of_InitFAN 1C72  
                ??_USBStdGetStatusHandler 005E                              ___fttol@exp1 00D7  
                            ___fttol@lval 00D3                            ?_USBDeviceInit 0070  
                           ?_InitResultRx 0070                       ?_USBCBCheckOtherReq 0070  
                         i1SendCmdReply@n 007B                                     ?_main 0070  
                         __end_of___awdiv 1168                           __end_of___ftadd 0EE6  
                           __CFG_WDTE$OFF 0000         __size_of_USBCtrlEPServiceComplete 0088  
                         __end_of___ftneg 1B68                           __end_of___ftmul 0C4D  
                         ___awdiv@divisor 005E                    __end_of_USBDeviceTasks 0DF0  
                         __end_of___fttol 15B9                 ?_USBCtrlEPServiceComplete 0070  
                                   _IOCBF 0396                           __end_of___lwdiv 1EBB  
                                   i1l741 0B2D                                     i1l852 000E  
                                   _UADDR 0E96                           ___awdiv@counter 00A1  
                                   _RCREG 0199                             ?_InitWorkTick 0070  
                                   _TMR1H 0017                                     _TMR1L 0016  
                                   _USTAT 0E8F        __size_of_USBCtrlEPAllowStatusStage 006E  
                           __CFG_PWRTE$ON 0000                                     _Error 01E1  
                          __CFG_FCMEN$OFF 0000           __end_of_USBCtrlEPAllowDataStage 2000  
                                   _sd000 08AB                                     _sd001 0805  
                                   _sd002 0839                             ___awtoft@sign 0061  
                           ___ftpack@sign 00A4                      ??_USBCBCheckOtherReq 005E  
                        __end_ofi1___bmul 1B91                          __end_ofi1___wmul 1C8F  
                        ??i1_SendCmdReply 0050                                     status 0003  
                     i1___wmul@multiplier 0070                                     wtemp0 007E  
            __size_of_USBStdSetCfgHandler 0081                            __CFG_MCLRE$OFF 0000  
                         __initialization 1241                               _AsicPreCalc 0014  
                            __end_of_main 1C0C                               _DetectAsics 0C4D  
                          ??_InitResultRx 005E                 __size_of_USBCtrlEPService 0074  
                                  ??_main 0062                             ___fttol@sign1 00D2  
                          ??_InitWorkTick 005E                 __size_of_InitializeSystem 0019  
                         ?_USBDeviceTasks 0070                               ?_USBSuspend 0070  
                        __end_of_ResultRx 0B99                                 ??_ISRCode 005D  
                          _InitTempSensor 1BDE                          __end_of_UserInit 1BC9  
                                  _I2CCmd 0064                                    _ACTCON 039B  
                                  _ADRESH 009C                          ___awdiv@dividend 0060  
                        __end_of___awtoft 1D39                                    _ANSELA 018C  
                                  _ANSELB 018D                                    _ANSELC 018E  
                        __end_of___ftpack 11D3                          __end_of_WorkTick 1042  
                                  _IOCAF3 1C9B                                    _T1GSPM 00CC  
                                  i1l1295 1C7A                                    i1l6001 1B88  
                                  i1l6021 169B                                    i1l6023 16CB  
                                  i1l6039 0B1C                                    i1l6047 0AF1  
                                  i1l6049 0B3B                                    i1l6059 0B91  
                                  i1l5985 1C74                                    i1l5997 1B82  
                                  u641_25 166B                                    _OSCCON 0099  
                                  u636_25 1C7B                                    u637_25 1C80  
                                  _TMR1GE 00CF                                    _TMR0IF 005A  
                                  _TMR0CS 04AD                                    _TMR1IE 0488  
                                  _TMR1IF 0088                                    _PWM1OE 309E  
                                  _TMR2IF 0089                                    _TMR1ON 00C0  
                                  _TMR2ON 00E2                                    _SSP1EN 10AD  
                                  _SSP1IF 008B                                    _SSPADD 0212  
                                  _SSPBUF 0211                                 ??_InitFAN 005E  
                              _TempTarget 01E4                                    _Send32 08D8  
                       _shortPacketStatus 006D                             ?_SendCmdReply 00A2  
                         USBDeviceTasks@i 00BF                             ?_SendAsicData 00A2  
             USBStdFeatureReqHandler@pUEP 00B3                  USBTransferOnePacket@data 00A1  
              USBCtrlTrfInHandler@lastDTS 0061                                    _Status 01AC  
                         ??_USBDeviceInit 005E                                    ___bmul 1B91  
                                  ___wmul 1D39                                 ??___awdiv 00A0  
                               ??___ftadd 00C3                                 ??___ftneg 0062  
                               ??___ftmul 00B0                                 ??___fttol 00CE  
                            ?_USBCBInitEP 0070                                 ??___lwdiv 00A0  
                       _USBEnableEndpoint 1D60           __size_of_USBStdGetStatusHandler 0053  
                                  _memset 1CCC                          ___awdiv@quotient 00A3  
                              _ProcessCmd 04E1                        ?_USBEnableEndpoint 0061  
                                  _rotate 1DBD                     _USBCBStdSetDscHandler 07FF  
                   ___ftmul@f3_as_product 00B5             __size_of_USBTransferOnePacket 004E  
                      __size_of_ProcessIO 007C                    __end_of_InitTempSensor 1BF5  
                     ??_USBEnableEndpoint 00A4                               _CtrlTrfData 0048  
                   __size_of_AsicPushWork 0082                      _controlTransferState 0069  
                 __end_of__initialization 12AD                                ___ftadd@f1 00BD  
                              ___ftadd@f2 00C0                  __size_of_USBStallHandler 0025  
                          ??_SendCmdReply 00A7                                ___ftneg@f1 00BA  
                              ___awtoft@c 00A5                       ___bmul@multiplicand 005E  
                          ??_SendAsicData 00A4                       __size_of_USBSuspend 0019  
                              ___ftmul@f1 00AA                                ___ftmul@f2 00AD  
                 ??_USBCheckVendorRequest 005E                                ___fttol@f1 00CA  
                          __pcstackCOMMON 0070                 __end_of_USBEnableEndpoint 1D8A  
                           __end_of_sd000 08AF                             __end_of_sd001 0839  
                           __end_of_sd002 086D                              __pidataBANK0 07FE  
                            __pidataBANK3 08B1                              __pidataBANK7 1CAC  
                       _USBCB_SOF_Handler 08B0          __size_of_USBCtrlEPAllowDataStage 0057  
           __size_of_USBConfigureEndpoint 004D               __end_of_USBCtrlTrfInHandler 1101  
                      ?_USBCB_SOF_Handler 0070                                __end_of_ID 08AB  
                               ?i1___bmul 0070                                 ?i1___wmul 0070  
                          _OPTION_REGbits 0095                              _AsicPushWork 142C  
                         ?_InitTempSensor 0070                       i1SendCmdReply@count 007A  
                     ??_USBCB_SOF_Handler 005E                  ??_USBCtrlTrfSetupHandler 00B8  
                        i1___bmul@product 0073                    _USBStdGetStatusHandler 1F56  
                    __end_of_InitResultRx 1BB6                                __pbssBANK0 0062  
                              __pbssBANK1 00E0                                __pbssBANK2 0159  
                              __pbssBANK3 01C7                                __pbssBANK4 0260  
                              __pbssBANK6 0320                         i1SendCmdReply@cmd 0076  
                    __end_of_InitWorkTick 1BDE               __size_of_USBWakeFromSuspend 0018  
                             _pBDTEntryIn 00E0                         __end_of_ProcessIO 132C  
        __end_of_USBCtrlEPServiceComplete 1641                                   ?_Send32 0070  
               __end_of_USBCB_SOF_Handler 08B1                                __pmaintext 1BF5  
                    USBCtrlTrfRxService@i 00A0                                 ?_ResultRx 0070  
                                 ?___bmul 005E                                   ?___wmul 005E  
                              __pintentry 0004                                 ?_UserInit 0070  
                                 _I2CAddr 015E                                   ?_memset 005E  
                  ?_USBCBStdSetDscHandler 0070                                _device_dsc 088D  
                               ?___awtoft 00A5                                 ?___ftpack 00A0  
                        _USBCtrlEPService 078A                                 ?_WorkTick 0070  
                             ?_ProcessCmd 0070                                ??i1___bmul 0071  
                              _ep_data_in 01D1                                   ?_rotate 00A0  
                              ??i1___wmul 0074                          _InitializeSystem 1C3D  
                             _NonceRanges 0320               __end_of_USBCtrlTrfRxService 0AE6  
                      _USBCheckStdRequest 1042                         _configDescriptor1 086D  
             __end_of_USBCtrlTrfTxService 1532                       _USBStdSetCfgHandler 13AB  
                                 _ISRCode 0004                                   _PWM1DCH 0612  
                                 _PWM1DCL 0611                                   _OSCTUNE 0098  
                                 _PWM1CON 0613                                   _TMR1GIE 048F  
                                 _TMR1GIF 008F                       ?_USBCheckStdRequest 0070  
            __size_of_USBStdGetDscHandler 007F                                   _UIEbits 0E92  
           __size_of_USBCBWakeFromSuspend 0001                                __stringtab 0800  
                                 _UIRbits 0E90                                   _InitFAN 1C56  
                    ?_USBStdSetCfgHandler 0070                           __size_of_Send32 00AC  
                                 _TimeOut 0164                                ??_ResultRx 0058  
              __size_of_USBEnableEndpoint 002A                              ?_AsicPreCalc 00AD  
                            ?_DetectAsics 0070                      ??_USBCheckStdRequest 00B7  
                         __size_of___bmul 0012             __size_of_USBCtrlTrfOutHandler 0033  
                                 ___awdiv 1101                                   ___ftadd 0DF0  
                                 ___ftneg 1B5F                          ??_USBDeviceTasks 00BD  
                         __size_of___wmul 0027                                   _WorkNow 00E4  
                                 ___ftmul 0B99                                   _WorkQue 233C  
                                 ___fttol 1532                                   ___lwdiv 1E76  
                       ??_USBStallHandler 005E                                ??_UserInit 0062  
                              ??___awtoft 00A8                                ??___ftpack 005E  
                         __size_of_memset 0021                                ??_WorkTick 00DF  
               __end_of_configDescriptor1 088D                      __size_of_USBCBInitEP 001D  
                                 __ptext1 12B0                                   __ptext2 04E1  
                                 __ptext3 1E76                                   __ptext4 1769  
                                 __ptext5 1B91                                   __ptext6 142C  
                                 __ptext7 1D39                                   __ptext8 0014  
                                 __ptext9 1DBD                                   _inPipes 00E7  
                 __size_of_UpdateFanLevel 0137                          _DetectAsics$2873 00AC  
             _USBDeferOUTDataStagePackets 0167                           __size_of_rotate 0037  
                               _T1CONbits 0018                              ??_USBSuspend 00B1  
                               _T2CONbits 001C                         _USBCBErrorHandler 0002  
                    __end_of_SendCmdReply 1800                       i1___bmul@multiplier 0072  
                               _IOCBPbits 0394                      __end_of_SendAsicData 1769  
                      ?_USBCBErrorHandler 0070                             ?_USBCBSuspend 0070  
                      __end_of_USB_CD_Ptr 0805           __size_of_USBCtrlTrfSetupHandler 0043  
                                 clrloop0 1B75                      end_of_initialization 12AD  
                          _ProcessIO$2411 00CB                            _ProcessIO$2377 00C9  
             __size_of_USBCBCheckOtherReq 0003                        __end_of_USB_SD_Ptr 0804  
                     _pBDTEntryEP0OutNext 006A                                   init_ram 1B68  
                     ??_USBCBErrorHandler 005E                                   memset@c 005E  
                                 memset@n 0060                                   memset@p 00A2  
                                 initloop 1B69                       __size_of_ProcessCmd 0172  
                ?_USBStdFeatureReqHandler 0070                     ??_USBStdSetCfgHandler 00B1  
                        SendCmdReply@data 00A4                __size_of_USBCB_SOF_Handler 0001  
                      __end_of_USBSuspend 1C3D                   _USBCtrlEPAllowDataStage 1FA9  
                               _RCSTAbits 019D                                   rotate@x 00A0  
                                 rotate@y 00A4                           AsicPreCalc@work 00AD  
                _USBCtrlEPServiceComplete 15B9                     i1___wmul@multiplicand 0072  
              _USBStatusStageEnabledFlag1 016A                _USBStatusStageEnabledFlag2 016B  
                      USBEnableEndpoint@p 00A6                 __end_of_USBCBErrorHandler 0003  
                        __CFG_FOSC$INTOSC 0000                     __size_of_InitResultRx 0013  
                               _TRISAbits 008C                                 _TRISBbits 008D  
                               _TRISCbits 008E                            ??_USBCBSuspend 005E  
                      _BothEP0OutUOWNsSet 015D                 USBStdSetCfgHandler@i_1089 00B4  
                               _OUTPacket 02A0                 USBConfigureEndpoint@EPNum 005F  
              ?_USBCtrlEPAllowStatusStage 0070                     __size_of_InitWorkTick 0015  
     USER_USB_CALLBACK_EVENT_HANDLER@size 00AF                                 _USTATcopy 00EE  
            __end_of_USBTransferOnePacket 1F56                                 _TXSTAbits 019E  
                           _PrecalcHashes 0340                               ___ftmul@exp 00B4  
                      USBDeviceInit@i_718 00A2                            __end_of_Send32 0984  
                  _USBCtrlTrfSetupHandler 1E33            __size_of_USBCheckVendorRequest 0001  
           __end_of_USBCheckVendorRequest 0004                   __size_ofi1_SendCmdReply 0093  
                          __end_of___bmul 1BA3                     __end_of_USBDeviceInit 0A34  
                            _InitResultRx 1BA3                            __end_of___wmul 1D60  
                        ??_InitTempSensor 005E                               _BAUDCONbits 019F  
                          __end_of_memset 1CED                         _USBBusIsSuspended 0165  
                          __end_of_rotate 1DF4                              _InitWorkTick 1BC9  
                       __size_ofi1___bmul 0011                                 _LastError 01CF  
                     start_initialization 1241                         __size_ofi1___wmul 001D  
                 ?_USBStdGetStatusHandler 0070             USBCtrlTrfRxService@byteToRead 00A1  
            __end_of_USBConfigureEndpoint 1F08           __end_of_USBStdFeatureReqHandler 1000  
       __end_of_USBCtrlEPAllowStatusStage 1241                  __end_of_USBCtrlEPService 07FE  
                        SendAsicData@work 00A2                  __end_of_InitializeSystem 1C56  
               ??_USBCtrlEPAllowDataStage 00A0                            USBDeviceInit@i 00A3  
                                ??_Send32 005E                            USBDeviceInit@p 00A0  
                  _pBDTEntryEP0OutCurrent 00E6                   USBTransferOnePacket@dir 00A0  
                 USBTransferOnePacket@len 00A2                   ??_USBCBStdSetDscHandler 005E  
                                ??___bmul 005F                                 _ResultPos 0067  
                               _ResultQue 01D5                                  ??___wmul 0062  
                     _USBStdGetDscHandler 132C                                 _ProcessIO 12B0  
                             __pdataBANK0 006F                               __pdataBANK3 01A0  
                             __pdataBANK7 03A0                         __size_of_ResultRx 00B3  
                    __size_of_AsicPreCalc 04CD                                  ??_memset 00A0  
                    __size_of_DetectAsics 00B8                              ??_ProcessCmd 00BE  
                   __size_of_SendCmdReply 0097                            _UpdateFanLevel 0653  
                                ??_rotate 00A5                __size_of_USBCBErrorHandler 0001  
                   __size_of_SendAsicData 0095                         __size_of_UserInit 0013  
                  _USBActiveConfiguration 00EC            __end_of_USBStdGetStatusHandler 1FA9  
                       __size_of___awtoft 0027                         __size_of___ftpack 006B  
                             __pbssBIGRAM 233C                         __size_of_WorkTick 003F  
                           __pcstackBANK0 0050                             __pcstackBANK1 00A0  
                           __pcstackBANK2 0120              __size_of_USBCtrlTrfInHandler 0066  
                                ?_ISRCode 0070                      ?_USBStdGetDscHandler 0070  
                      i1SendCmdReply@data 0078                             _ResultRx$3156 007C  
                           _ResultRx$3157 007D                __end_of_USBWakeFromSuspend 1C24  
                         _USBStallHandler 1CED                              _pBDTEntryOut 0159  
                                ?_InitFAN 0070                              _send32_count 016F  
                               __pnvBANK3 01E3                        __end_of_ProcessCmd 0653  
                        ___lwdiv@dividend 0060                              _SendCmdReply 1769  
                            _SendAsicData 16D4                      __end_of_USBCBSuspend 1B5F  
            __end_of_USBCBWakeFromSuspend 08B0                                  ?___awdiv 005E  
                                ?___ftadd 00BD                                  ?___ftneg 00BA  
                              ?_ProcessIO 0070                                  ?___ftmul 00AA  
                                ?___fttol 00CA                                  ?___lwdiv 005E  
                  __end_of_UpdateFanLevel 078A                              AsicPreCalc@K 0120  
                            AsicPreCalc@m 012C                              AsicPreCalc@n 0158  
                            AsicPreCalc@x 0154                              AsicPreCalc@y 0150  
                            AsicPreCalc@z 014C                                 __pstrings 0800  
              USBCBSendResume@delay_count 01CD                                 __pswtext1 1800  
                    _USBTransferOnePacket 1F08                                  _I2CInBuf 015F  
                            DetectAsics@x 00AE                                  _I2CCount 0065  
                                _I2CState 0066                                 _last_bit0 016D  
                               _last_bit1 016E              __end_of_USBCtrlTrfOutHandler 1DBD  
                   ??_USBStdGetDscHandler 005E                               _ep_data_out 01D3  
                        ___lwdiv@quotient 00A1              __size_of_USBCtrlTrfRxService 00B2  
           USBConfigureEndpoint@direction 005E              __size_of_USBCtrlTrfTxService 0084  
                          ___wmul@product 00A0                                  _LATAbits 010C  
                                _LATCbits 010E                ??_USBCtrlEPServiceComplete 00A2  
                               clear_ram0 1B74                                  _PIE2bits 0092  
                   i1___bmul@multiplicand 0070                           SendCmdReply@cmd 00A2  
                                _PIR2bits 0012                                  _INPacket 0220  
               USBCtrlEPService@setup_cnt 00BC                                  _UEP0bits 0E98  
              _USBDeferINDataStagePackets 0166                            i1_SendCmdReply 1641  
                           ??_USBCBInitEP 00A9               __size_of_USBCheckStdRequest 0059  
                                _UCONbits 0E8E                           ?_UpdateFanLevel 0070  
                     _UpdateFanLevel$2876 00DC                      _USBConfigureEndpoint 1EBB  
                           ProcessCmd@cmd 00C4          __size_of_USBStdFeatureReqHandler 011A  
                                i1___bmul 1B80                                _ADCON0bits 009D  
                              _ADCON1bits 009E                                _ADCON2bits 009F  
                       ___wmul@multiplier 005E                     ?_USBTransferOnePacket 00A0  
                                i1___wmul 1C72                                  _BankSize 01E5  
                                _FanLevel 01E3                              _RemoteWakeup 0161  
                                _ClockCfg 01B9                __end_of_USBCBCheckOtherReq 1003  
                                _HashTime 006F                   __end_of_USBStallHandler 1D12  
                        __size_of_ISRCode 000E               ??_USBCtrlEPAllowStatusStage 005E  
             __end_of_USBStdSetCfgHandler 142C                                  _LastTemp 0160  
                            _SlaveAddress 00E2                        __end_of_device_dsc 089F  
                 ?_USBCtrlTrfSetupHandler 0070                          __size_of_InitFAN 001C  
                 USBStdGetStatusHandler@p 005F                    __end_ofi1_SendCmdReply 16D4  
                  USBTransferOnePacket@ep 00A5                                  _ResultQC 0162  
                                _ResultRx 0AE6                                  _SetupPkt 0040  
                                _SlowTick 0163                               ??_ProcessIO 00C5  
                   ?_USBConfigureEndpoint 005E                                  _UserInit 1BB6  
                        __size_of___awdiv 0067                          __size_of___ftadd 00F6  
                        __size_of___ftneg 0009                          __size_of___ftmul 00B4  
                        __size_of___fttol 0087                          __size_of___lwdiv 0045  
                                ___awtoft 1D12                                  ___ftpack 1168  
                                _WorkTick 1003                        __end_of__stringtab 0801  
                              _ANSELBbits 018D                       __end_of_USBCBInitEP 1CAC  
                           ?_AsicPushWork 0070                               _send32_data 015B  
                 __size_of_USBDeviceTasks 00EB                           ___lwdiv@divisor 005E  
                         ___lwdiv@counter 00A3                                  __ptext10 16D4  
                                __ptext11 08D8                                  __ptext20 1003  
                                __ptext12 1C3D                                  __ptext21 0653  
                                __ptext13 1BB6                                _T1GCONbits 0019  
                                __ptext30 109B                                  __ptext22 1532  
                                __ptext14 1BA3                                  __ptext31 1D8A  
                                __ptext23 1B5F                                  __ptext15 1BC9  
                                __ptext40 15B9                                  __ptext32 0A34  
                                __ptext24 0B99                                  __ptext16 1BDE  
                                __ptext41 1FA9                                  __ptext33 1E33  
                                __ptext25 0DF0                                  __ptext17 1C56  
                                __ptext50 1D60                                  __ptext42 14AE  
                                __ptext34 1042                                  __ptext26 1D12  
                                __ptext18 0C4D                                  __ptext51 1EBB  
                                __ptext43 11D3                                  __ptext35 0EE6  
                                __ptext27 1168                                  __ptext19 1101  
                                __ptext52 07FF                                  __ptext44 1CED  
                                __ptext36 1F56                                  __ptext28 0D05  
                                __ptext61 0AE6                                  __ptext53 1000  
                                __ptext45 1C24                                  __ptext37 132C  
                                __ptext29 078A                                  __ptext62 1641  
                                __ptext54 0003                                  __ptext46 1C0C  
                                __ptext38 13AB                                  __ptext63 1B80  
                                __ptext55 0002                                  __ptext47 1DF4  
                                __ptext39 1CCC                                  __ptext64 1C72  
                                __ptext56 08B0                                  __ptext48 1C8F  
                                __ptext57 08AF                                  __ptext49 1F08  
                                __ptext58 1B5E                                  __ptext59 0984  
                    _USBCBWakeFromSuspend 08AF            __end_of_USBCtrlTrfSetupHandler 1E76  
                           __size_of_main 0017                         ?_USBCtrlEPService 0070  
                   __size_of_USBCBSuspend 0001                         ?_InitializeSystem 0070  
                      ??_USBCtrlEPService 00B9                       _USBGenericOutHandle 0169  
                     _USBCtrlTrfInHandler 109B                           ?i1_SendCmdReply 0076  
                      ??_InitializeSystem 0062                                  _outPipes 01C7  
                    _USBCtrlTrfOutHandler 1D8A                 _USBCtrlEPAllowStatusStage 11D3  
          __size_of_USBCBStdSetDscHandler 0001             __end_of_USBCBStdSetDscHandler 0800  
                  ??_USBTransferOnePacket 00A3                     _USBCheckVendorRequest 0003  
                          ??_AsicPushWork 00B9                 _USBDeferStatusStagePacket 0068  
                              _INTCONbits 000B                        _USBGenericInHandle 0168  
                    ?_USBCtrlTrfInHandler 0070             USBCtrlTrfTxService@byteToSend 0060  
                                memset@p1 00A1                              _USBCBSuspend 1B5E  
                        ?_USBStallHandler 0070                  USBStdFeatureReqHandler@p 00B6  
                   ?_USBCBWakeFromSuspend 0070                                  intlevel1 0000  
                  __size_of_USBDeviceInit 00B0   __end_of_USER_USB_CALLBACK_EVENT_HANDLER 1E33  
__size_of_USER_USB_CALLBACK_EVENT_HANDLER 003F         ??_USER_USB_CALLBACK_EVENT_HANDLER 0062  
        ?_USER_USB_CALLBACK_EVENT_HANDLER 00AC           _USER_USB_CALLBACK_EVENT_HANDLER 1DF4  
                        AsicPreCalc@F3347 01A0                                  next_word 08DD  
                       SendCmdReply@count 00A6                             SendCmdReply@n 00AF  
                           ??_AsicPreCalc 00AF                           _ProcessCmd$2059 00C2  
                           ??_DetectAsics 00A5                    ??_USBConfigureEndpoint 00A0  
                   ?_USBCtrlTrfOutHandler 0070                      __CFG_CPUDIV$NOCLKDIV 0000  
                     _USBCtrlTrfRxService 0A34                               _USBCBInitEP 1C8F  
                      _USBWakeFromSuspend 1C0C                   _USBStdFeatureReqHandler 0EE6  
                     _USBCtrlTrfTxService 14AE                       ?_USBWakeFromSuspend 0070  
                   ??_USBCtrlTrfInHandler 00A0                     _USBAlternateInterface 00ED  
                             _SSPCON1bits 0215                               _SSPCON2bits 0216  
                     USBEnableEndpoint@ep 00A8                               _SSPCON3bits 0217  
                         _endpoint_number 00E5                   __size_of_InitTempSensor 0017  
                    ?_USBCtrlTrfRxService 0070                  ?_USBCtrlEPAllowDataStage 0070  
                    ?_USBCtrlTrfTxService 0070              _USBStatusStageTimeoutCounter 016C  
                    ??_USBWakeFromSuspend 00B1                USBTransferOnePacket@handle 00A6  
                        ??_UpdateFanLevel 00D8                                _USB_CD_Ptr 0804  
